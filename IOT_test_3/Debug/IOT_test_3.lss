
IOT_test_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000056a  00800200  00006040  000060d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006040  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000128b  0080076a  0080076a  0000663e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000663e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000669c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b98  00000000  00000000  000066dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ef76  00000000  00000000  00007274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d0a  00000000  00000000  000161ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006f6a  00000000  00000000  00019ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000026c4  00000000  00000000  00020e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000044af  00000000  00000000  00023524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000cd14  00000000  00000000  000279d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bb8  00000000  00000000  000346e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c2       	rjmp	.+1170   	; 0x494 <__ctors_end>
       2:	00 00       	nop
       4:	68 c2       	rjmp	.+1232   	; 0x4d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c2       	rjmp	.+1228   	; 0x4d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c2       	rjmp	.+1224   	; 0x4d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c2       	rjmp	.+1220   	; 0x4d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c2       	rjmp	.+1216   	; 0x4d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c2       	rjmp	.+1212   	; 0x4d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c2       	rjmp	.+1208   	; 0x4d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c2       	rjmp	.+1204   	; 0x4d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c2       	rjmp	.+1200   	; 0x4d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c2       	rjmp	.+1196   	; 0x4d6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c2       	rjmp	.+1192   	; 0x4d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 34 0a 	jmp	0x1468	; 0x1468 <__vector_12>
      34:	50 c2       	rjmp	.+1184   	; 0x4d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c2       	rjmp	.+1180   	; 0x4d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c2       	rjmp	.+1176   	; 0x4d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c2       	rjmp	.+1172   	; 0x4d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c2       	rjmp	.+1168   	; 0x4d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c2       	rjmp	.+1164   	; 0x4d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c2       	rjmp	.+1160   	; 0x4d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c2       	rjmp	.+1156   	; 0x4d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c2       	rjmp	.+1152   	; 0x4d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c2       	rjmp	.+1148   	; 0x4d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c2       	rjmp	.+1144   	; 0x4d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c2       	rjmp	.+1140   	; 0x4d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 42 25 	jmp	0x4a84	; 0x4a84 <__vector_25>
      68:	0c 94 94 25 	jmp	0x4b28	; 0x4b28 <__vector_26>
      6c:	34 c2       	rjmp	.+1128   	; 0x4d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c2       	rjmp	.+1124   	; 0x4d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c2       	rjmp	.+1120   	; 0x4d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c2       	rjmp	.+1116   	; 0x4d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c2       	rjmp	.+1112   	; 0x4d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c2       	rjmp	.+1108   	; 0x4d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c2       	rjmp	.+1104   	; 0x4d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c2       	rjmp	.+1100   	; 0x4d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c2       	rjmp	.+1096   	; 0x4d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 d8 25 	jmp	0x4bb0	; 0x4bb0 <__vector_36>
      94:	0c 94 2a 26 	jmp	0x4c54	; 0x4c54 <__vector_37>
      98:	1e c2       	rjmp	.+1084   	; 0x4d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 c2 28 	jmp	0x5184	; 0x5184 <__vector_39>
      a0:	1a c2       	rjmp	.+1076   	; 0x4d6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	18 c2       	rjmp	.+1072   	; 0x4d6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	16 c2       	rjmp	.+1068   	; 0x4d6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	14 c2       	rjmp	.+1064   	; 0x4d6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	12 c2       	rjmp	.+1060   	; 0x4d6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	10 c2       	rjmp	.+1056   	; 0x4d6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0e c2       	rjmp	.+1052   	; 0x4d6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c c2       	rjmp	.+1048   	; 0x4d6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	0a c2       	rjmp	.+1044   	; 0x4d6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	08 c2       	rjmp	.+1040   	; 0x4d6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	06 c2       	rjmp	.+1036   	; 0x4d6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 6e 26 	jmp	0x4cdc	; 0x4cdc <__vector_51>
      d0:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <__vector_52>
      d4:	00 c2       	rjmp	.+1024   	; 0x4d6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 04 27 	jmp	0x4e08	; 0x4e08 <__vector_54>
      dc:	0c 94 56 27 	jmp	0x4eac	; 0x4eac <__vector_55>
      e0:	fa c1       	rjmp	.+1012   	; 0x4d6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c0 01       	movw	r24, r0
      e6:	c0 01       	movw	r24, r0
      e8:	c0 01       	movw	r24, r0
      ea:	fa 01       	movw	r30, r20
      ec:	02 02       	muls	r16, r18
      ee:	18 02       	muls	r17, r24
      f0:	c0 01       	movw	r24, r0
      f2:	c0 01       	movw	r24, r0
      f4:	fa 01       	movw	r30, r20
      f6:	02 02       	muls	r16, r18
      f8:	e4 28       	or	r14, r4
      fa:	54 29       	or	r21, r4
      fc:	54 29       	or	r21, r4
      fe:	54 29       	or	r21, r4
     100:	54 29       	or	r21, r4
     102:	54 29       	or	r21, r4
     104:	54 29       	or	r21, r4
     106:	54 29       	or	r21, r4
     108:	e4 28       	or	r14, r4
     10a:	54 29       	or	r21, r4
     10c:	54 29       	or	r21, r4
     10e:	54 29       	or	r21, r4
     110:	54 29       	or	r21, r4
     112:	54 29       	or	r21, r4
     114:	54 29       	or	r21, r4
     116:	54 29       	or	r21, r4
     118:	e6 28       	or	r14, r6
     11a:	54 29       	or	r21, r4
     11c:	54 29       	or	r21, r4
     11e:	54 29       	or	r21, r4
     120:	54 29       	or	r21, r4
     122:	54 29       	or	r21, r4
     124:	54 29       	or	r21, r4
     126:	54 29       	or	r21, r4
     128:	54 29       	or	r21, r4
     12a:	54 29       	or	r21, r4
     12c:	54 29       	or	r21, r4
     12e:	54 29       	or	r21, r4
     130:	54 29       	or	r21, r4
     132:	54 29       	or	r21, r4
     134:	54 29       	or	r21, r4
     136:	54 29       	or	r21, r4
     138:	e6 28       	or	r14, r6
     13a:	54 29       	or	r21, r4
     13c:	54 29       	or	r21, r4
     13e:	54 29       	or	r21, r4
     140:	54 29       	or	r21, r4
     142:	54 29       	or	r21, r4
     144:	54 29       	or	r21, r4
     146:	54 29       	or	r21, r4
     148:	54 29       	or	r21, r4
     14a:	54 29       	or	r21, r4
     14c:	54 29       	or	r21, r4
     14e:	54 29       	or	r21, r4
     150:	54 29       	or	r21, r4
     152:	54 29       	or	r21, r4
     154:	54 29       	or	r21, r4
     156:	54 29       	or	r21, r4
     158:	50 29       	or	r21, r0
     15a:	54 29       	or	r21, r4
     15c:	54 29       	or	r21, r4
     15e:	54 29       	or	r21, r4
     160:	54 29       	or	r21, r4
     162:	54 29       	or	r21, r4
     164:	54 29       	or	r21, r4
     166:	54 29       	or	r21, r4
     168:	1b 29       	or	r17, r11
     16a:	54 29       	or	r21, r4
     16c:	54 29       	or	r21, r4
     16e:	54 29       	or	r21, r4
     170:	54 29       	or	r21, r4
     172:	54 29       	or	r21, r4
     174:	54 29       	or	r21, r4
     176:	54 29       	or	r21, r4
     178:	54 29       	or	r21, r4
     17a:	54 29       	or	r21, r4
     17c:	54 29       	or	r21, r4
     17e:	54 29       	or	r21, r4
     180:	54 29       	or	r21, r4
     182:	54 29       	or	r21, r4
     184:	54 29       	or	r21, r4
     186:	54 29       	or	r21, r4
     188:	0f 29       	or	r16, r15
     18a:	54 29       	or	r21, r4
     18c:	54 29       	or	r21, r4
     18e:	54 29       	or	r21, r4
     190:	54 29       	or	r21, r4
     192:	54 29       	or	r21, r4
     194:	54 29       	or	r21, r4
     196:	54 29       	or	r21, r4
     198:	33 29       	or	r19, r3

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	02 eb       	ldi	r16, 0xB2	; 178
     19c:	17 e1       	ldi	r17, 0x17	; 23
     19e:	0f 2e       	mov	r0, r31
     1a0:	f2 ee       	ldi	r31, 0xE2	; 226
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f7 e1       	ldi	r31, 0x17	; 23
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 b1 17 	lds	r24, 0x17B1	; 0x8017b1 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	b3 d7       	rcall	.+3942   	; 0x1132 <uxListRemove>
     1cc:	80 91 a5 17 	lds	r24, 0x17A5	; 0x8017a5 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 a5 17 	sts	0x17A5, r24	; 0x8017a5 <uxCurrentNumberOfTasks>
     1d6:	80 91 b1 17 	lds	r24, 0x17B1	; 0x8017b1 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 b1 17 	sts	0x17B1, r24	; 0x8017b1 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e8:	00 d7       	rcall	.+3584   	; 0xfea <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	fe d6       	rcall	.+3580   	; 0xfea <vPortFree>
     1ee:	80 91 b1 17 	lds	r24, 0x17B1	; 0x8017b1 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	10 f0       	brcs	.+4      	; 0x202 <prvIdleTask+0x68>
     1fe:	0e 94 6e 09 	call	0x12dc	; 0x12dc <vPortYield>
     202:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <vApplicationIdleHook>
     206:	d1 cf       	rjmp	.-94     	; 0x1aa <prvIdleTask+0x10>

00000208 <prvTimerTask>:
     208:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20a:	df 93       	push	r29
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	60 97       	sbiw	r28, 0x10	; 16
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	de bf       	out	0x3e, r29	; 62
     218:	0f be       	out	0x3f, r0	; 63
     21a:	cd bf       	out	0x3d, r28	; 61
     21c:	ce 01       	movw	r24, r28
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	9a 87       	std	Y+10, r25	; 0x0a
     222:	89 87       	std	Y+9, r24	; 0x09
     224:	81 2c       	mov	r8, r1
     226:	91 2c       	mov	r9, r1
     228:	a1 2c       	mov	r10, r1
     22a:	b1 2c       	mov	r11, r1
     22c:	69 84       	ldd	r6, Y+9	; 0x09
     22e:	7a 84       	ldd	r7, Y+10	; 0x0a
     230:	e0 91 1a 18 	lds	r30, 0x181A	; 0x80181a <pxCurrentTimerList>
     234:	f0 91 1b 18 	lds	r31, 0x181B	; 0x80181b <pxCurrentTimerList+0x1>
     238:	80 81       	ld	r24, Z
     23a:	88 23       	and	r24, r24
     23c:	09 f4       	brne	.+2      	; 0x240 <prvTimerTask+0x38>
     23e:	10 c1       	rjmp	.+544    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     240:	07 80       	ldd	r0, Z+7	; 0x07
     242:	f0 85       	ldd	r31, Z+8	; 0x08
     244:	e0 2d       	mov	r30, r0
     246:	20 80       	ld	r2, Z
     248:	31 80       	ldd	r3, Z+1	; 0x01
     24a:	42 80       	ldd	r4, Z+2	; 0x02
     24c:	53 80       	ldd	r5, Z+3	; 0x03
     24e:	0e 94 ce 12 	call	0x259c	; 0x259c <vTaskSuspendAll>
     252:	ce 01       	movw	r24, r28
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <prvSampleTimeNow>
     25a:	6b 87       	std	Y+11, r22	; 0x0b
     25c:	7c 87       	std	Y+12, r23	; 0x0c
     25e:	8d 87       	std	Y+13, r24	; 0x0d
     260:	9e 87       	std	Y+14, r25	; 0x0e
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	81 11       	cpse	r24, r1
     266:	65 c0       	rjmp	.+202    	; 0x332 <prvTimerTask+0x12a>
     268:	8b 85       	ldd	r24, Y+11	; 0x0b
     26a:	9c 85       	ldd	r25, Y+12	; 0x0c
     26c:	ad 85       	ldd	r26, Y+13	; 0x0d
     26e:	be 85       	ldd	r27, Y+14	; 0x0e
     270:	82 15       	cp	r24, r2
     272:	93 05       	cpc	r25, r3
     274:	a4 05       	cpc	r26, r4
     276:	b5 05       	cpc	r27, r5
     278:	08 f4       	brcc	.+2      	; 0x27c <prvTimerTask+0x74>
     27a:	44 c0       	rjmp	.+136    	; 0x304 <prvTimerTask+0xfc>
     27c:	0e 94 b7 13 	call	0x276e	; 0x276e <xTaskResumeAll>
     280:	e0 91 1a 18 	lds	r30, 0x181A	; 0x80181a <pxCurrentTimerList>
     284:	f0 91 1b 18 	lds	r31, 0x181B	; 0x80181b <pxCurrentTimerList+0x1>
     288:	07 80       	ldd	r0, Z+7	; 0x07
     28a:	f0 85       	ldd	r31, Z+8	; 0x08
     28c:	e0 2d       	mov	r30, r0
     28e:	a0 85       	ldd	r26, Z+8	; 0x08
     290:	b1 85       	ldd	r27, Z+9	; 0x09
     292:	b8 8b       	std	Y+16, r27	; 0x10
     294:	af 87       	std	Y+15, r26	; 0x0f
     296:	cd 01       	movw	r24, r26
     298:	02 96       	adiw	r24, 0x02	; 2
     29a:	4b d7       	rcall	.+3734   	; 0x1132 <uxListRemove>
     29c:	ef 85       	ldd	r30, Y+15	; 0x0f
     29e:	f8 89       	ldd	r31, Y+16	; 0x10
     2a0:	87 89       	ldd	r24, Z+23	; 0x17
     2a2:	82 ff       	sbrs	r24, 2
     2a4:	21 c0       	rjmp	.+66     	; 0x2e8 <prvTimerTask+0xe0>
     2a6:	46 85       	ldd	r20, Z+14	; 0x0e
     2a8:	57 85       	ldd	r21, Z+15	; 0x0f
     2aa:	60 89       	ldd	r22, Z+16	; 0x10
     2ac:	71 89       	ldd	r23, Z+17	; 0x11
     2ae:	42 0d       	add	r20, r2
     2b0:	53 1d       	adc	r21, r3
     2b2:	64 1d       	adc	r22, r4
     2b4:	75 1d       	adc	r23, r5
     2b6:	72 01       	movw	r14, r4
     2b8:	61 01       	movw	r12, r2
     2ba:	0b 85       	ldd	r16, Y+11	; 0x0b
     2bc:	1c 85       	ldd	r17, Y+12	; 0x0c
     2be:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c0:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c2:	cf 01       	movw	r24, r30
     2c4:	0e 94 60 19 	call	0x32c0	; 0x32c0 <prvInsertTimerInActiveList>
     2c8:	88 23       	and	r24, r24
     2ca:	99 f0       	breq	.+38     	; 0x2f2 <prvTimerTask+0xea>
     2cc:	c8 2c       	mov	r12, r8
     2ce:	d9 2c       	mov	r13, r9
     2d0:	ea 2c       	mov	r14, r10
     2d2:	fb 2c       	mov	r15, r11
     2d4:	00 e0       	ldi	r16, 0x00	; 0
     2d6:	10 e0       	ldi	r17, 0x00	; 0
     2d8:	a2 01       	movw	r20, r4
     2da:	91 01       	movw	r18, r2
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e0:	98 89       	ldd	r25, Y+16	; 0x10
     2e2:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <xTimerGenericCommand>
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <prvTimerTask+0xea>
     2e8:	8e 7f       	andi	r24, 0xFE	; 254
     2ea:	af 85       	ldd	r26, Y+15	; 0x0f
     2ec:	b8 89       	ldd	r27, Y+16	; 0x10
     2ee:	57 96       	adiw	r26, 0x17	; 23
     2f0:	8c 93       	st	X, r24
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	54 96       	adiw	r26, 0x14	; 20
     2f8:	ed 91       	ld	r30, X+
     2fa:	fc 91       	ld	r31, X
     2fc:	55 97       	sbiw	r26, 0x15	; 21
     2fe:	cd 01       	movw	r24, r26
     300:	19 95       	eicall
     302:	9f c0       	rjmp	.+318    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	b2 01       	movw	r22, r4
     308:	a1 01       	movw	r20, r2
     30a:	8b 85       	ldd	r24, Y+11	; 0x0b
     30c:	9c 85       	ldd	r25, Y+12	; 0x0c
     30e:	ad 85       	ldd	r26, Y+13	; 0x0d
     310:	be 85       	ldd	r27, Y+14	; 0x0e
     312:	48 1b       	sub	r20, r24
     314:	59 0b       	sbc	r21, r25
     316:	6a 0b       	sbc	r22, r26
     318:	7b 0b       	sbc	r23, r27
     31a:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <xTimerQueue>
     31e:	90 91 17 18 	lds	r25, 0x1817	; 0x801817 <xTimerQueue+0x1>
     322:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <vQueueWaitForMessageRestricted>
     326:	0e 94 b7 13 	call	0x276e	; 0x276e <xTaskResumeAll>
     32a:	81 11       	cpse	r24, r1
     32c:	8a c0       	rjmp	.+276    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     32e:	d6 d7       	rcall	.+4012   	; 0x12dc <vPortYield>
     330:	88 c0       	rjmp	.+272    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     332:	0e 94 b7 13 	call	0x276e	; 0x276e <xTaskResumeAll>
     336:	85 c0       	rjmp	.+266    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	88 23       	and	r24, r24
     33c:	0c f4       	brge	.+2      	; 0x340 <prvTimerTask+0x138>
     33e:	81 c0       	rjmp	.+258    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     340:	4e 80       	ldd	r4, Y+6	; 0x06
     342:	5f 80       	ldd	r5, Y+7	; 0x07
     344:	d2 01       	movw	r26, r4
     346:	1c 96       	adiw	r26, 0x0c	; 12
     348:	8d 91       	ld	r24, X+
     34a:	9c 91       	ld	r25, X
     34c:	1d 97       	sbiw	r26, 0x0d	; 13
     34e:	89 2b       	or	r24, r25
     350:	19 f0       	breq	.+6      	; 0x358 <prvTimerTask+0x150>
     352:	c2 01       	movw	r24, r4
     354:	02 96       	adiw	r24, 0x02	; 2
     356:	ed d6       	rcall	.+3546   	; 0x1132 <uxListRemove>
     358:	ce 01       	movw	r24, r28
     35a:	08 96       	adiw	r24, 0x08	; 8
     35c:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <prvSampleTimeNow>
     360:	8b 01       	movw	r16, r22
     362:	9c 01       	movw	r18, r24
     364:	e9 81       	ldd	r30, Y+1	; 0x01
     366:	0e 2e       	mov	r0, r30
     368:	00 0c       	add	r0, r0
     36a:	ff 0b       	sbc	r31, r31
     36c:	ea 30       	cpi	r30, 0x0A	; 10
     36e:	f1 05       	cpc	r31, r1
     370:	08 f0       	brcs	.+2      	; 0x374 <prvTimerTask+0x16c>
     372:	67 c0       	rjmp	.+206    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     374:	88 27       	eor	r24, r24
     376:	ee 58       	subi	r30, 0x8E	; 142
     378:	ff 4f       	sbci	r31, 0xFF	; 255
     37a:	8f 4f       	sbci	r24, 0xFF	; 255
     37c:	0c 94 5a 2b 	jmp	0x56b4	; 0x56b4 <__tablejump2__>
     380:	f2 01       	movw	r30, r4
     382:	87 89       	ldd	r24, Z+23	; 0x17
     384:	81 60       	ori	r24, 0x01	; 1
     386:	87 8b       	std	Z+23, r24	; 0x17
     388:	ca 80       	ldd	r12, Y+2	; 0x02
     38a:	db 80       	ldd	r13, Y+3	; 0x03
     38c:	ec 80       	ldd	r14, Y+4	; 0x04
     38e:	fd 80       	ldd	r15, Y+5	; 0x05
     390:	46 85       	ldd	r20, Z+14	; 0x0e
     392:	57 85       	ldd	r21, Z+15	; 0x0f
     394:	60 89       	ldd	r22, Z+16	; 0x10
     396:	71 89       	ldd	r23, Z+17	; 0x11
     398:	4c 0d       	add	r20, r12
     39a:	5d 1d       	adc	r21, r13
     39c:	6e 1d       	adc	r22, r14
     39e:	7f 1d       	adc	r23, r15
     3a0:	c2 01       	movw	r24, r4
     3a2:	0e 94 60 19 	call	0x32c0	; 0x32c0 <prvInsertTimerInActiveList>
     3a6:	88 23       	and	r24, r24
     3a8:	09 f4       	brne	.+2      	; 0x3ac <prvTimerTask+0x1a4>
     3aa:	4b c0       	rjmp	.+150    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3ac:	d2 01       	movw	r26, r4
     3ae:	54 96       	adiw	r26, 0x14	; 20
     3b0:	ed 91       	ld	r30, X+
     3b2:	fc 91       	ld	r31, X
     3b4:	55 97       	sbiw	r26, 0x15	; 21
     3b6:	c2 01       	movw	r24, r4
     3b8:	19 95       	eicall
     3ba:	f2 01       	movw	r30, r4
     3bc:	87 89       	ldd	r24, Z+23	; 0x17
     3be:	82 ff       	sbrs	r24, 2
     3c0:	40 c0       	rjmp	.+128    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3c2:	4a 81       	ldd	r20, Y+2	; 0x02
     3c4:	5b 81       	ldd	r21, Y+3	; 0x03
     3c6:	6c 81       	ldd	r22, Y+4	; 0x04
     3c8:	7d 81       	ldd	r23, Y+5	; 0x05
     3ca:	86 85       	ldd	r24, Z+14	; 0x0e
     3cc:	97 85       	ldd	r25, Z+15	; 0x0f
     3ce:	a0 89       	ldd	r26, Z+16	; 0x10
     3d0:	b1 89       	ldd	r27, Z+17	; 0x11
     3d2:	9a 01       	movw	r18, r20
     3d4:	ab 01       	movw	r20, r22
     3d6:	28 0f       	add	r18, r24
     3d8:	39 1f       	adc	r19, r25
     3da:	4a 1f       	adc	r20, r26
     3dc:	5b 1f       	adc	r21, r27
     3de:	c8 2c       	mov	r12, r8
     3e0:	d9 2c       	mov	r13, r9
     3e2:	ea 2c       	mov	r14, r10
     3e4:	fb 2c       	mov	r15, r11
     3e6:	00 e0       	ldi	r16, 0x00	; 0
     3e8:	10 e0       	ldi	r17, 0x00	; 0
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	c2 01       	movw	r24, r4
     3ee:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <xTimerGenericCommand>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3f4:	d2 01       	movw	r26, r4
     3f6:	57 96       	adiw	r26, 0x17	; 23
     3f8:	8c 91       	ld	r24, X
     3fa:	57 97       	sbiw	r26, 0x17	; 23
     3fc:	8e 7f       	andi	r24, 0xFE	; 254
     3fe:	57 96       	adiw	r26, 0x17	; 23
     400:	8c 93       	st	X, r24
     402:	1f c0       	rjmp	.+62     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     404:	f2 01       	movw	r30, r4
     406:	87 89       	ldd	r24, Z+23	; 0x17
     408:	81 60       	ori	r24, 0x01	; 1
     40a:	87 8b       	std	Z+23, r24	; 0x17
     40c:	4a 81       	ldd	r20, Y+2	; 0x02
     40e:	5b 81       	ldd	r21, Y+3	; 0x03
     410:	6c 81       	ldd	r22, Y+4	; 0x04
     412:	7d 81       	ldd	r23, Y+5	; 0x05
     414:	46 87       	std	Z+14, r20	; 0x0e
     416:	57 87       	std	Z+15, r21	; 0x0f
     418:	60 8b       	std	Z+16, r22	; 0x10
     41a:	71 8b       	std	Z+17, r23	; 0x11
     41c:	40 0f       	add	r20, r16
     41e:	51 1f       	adc	r21, r17
     420:	62 1f       	adc	r22, r18
     422:	73 1f       	adc	r23, r19
     424:	68 01       	movw	r12, r16
     426:	79 01       	movw	r14, r18
     428:	c2 01       	movw	r24, r4
     42a:	0e 94 60 19 	call	0x32c0	; 0x32c0 <prvInsertTimerInActiveList>
     42e:	09 c0       	rjmp	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     430:	f2 01       	movw	r30, r4
     432:	87 89       	ldd	r24, Z+23	; 0x17
     434:	81 fd       	sbrc	r24, 1
     436:	03 c0       	rjmp	.+6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     438:	c2 01       	movw	r24, r4
     43a:	d7 d5       	rcall	.+2990   	; 0xfea <vPortFree>
     43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     43e:	8e 7f       	andi	r24, 0xFE	; 254
     440:	87 8b       	std	Z+23, r24	; 0x17
     442:	28 2d       	mov	r18, r8
     444:	39 2d       	mov	r19, r9
     446:	4a 2d       	mov	r20, r10
     448:	5b 2d       	mov	r21, r11
     44a:	66 2d       	mov	r22, r6
     44c:	77 2d       	mov	r23, r7
     44e:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <xTimerQueue>
     452:	90 91 17 18 	lds	r25, 0x1817	; 0x801817 <xTimerQueue+0x1>
     456:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <xQueueReceive>
     45a:	81 11       	cpse	r24, r1
     45c:	6d cf       	rjmp	.-294    	; 0x338 <prvTimerTask+0x130>
     45e:	e8 ce       	rjmp	.-560    	; 0x230 <prvTimerTask+0x28>
     460:	0e 94 ce 12 	call	0x259c	; 0x259c <vTaskSuspendAll>
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <prvSampleTimeNow>
     46c:	6b 87       	std	Y+11, r22	; 0x0b
     46e:	7c 87       	std	Y+12, r23	; 0x0c
     470:	8d 87       	std	Y+13, r24	; 0x0d
     472:	9e 87       	std	Y+14, r25	; 0x0e
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	81 11       	cpse	r24, r1
     478:	5c cf       	rjmp	.-328    	; 0x332 <prvTimerTask+0x12a>
     47a:	e0 91 18 18 	lds	r30, 0x1818	; 0x801818 <pxOverflowTimerList>
     47e:	f0 91 19 18 	lds	r31, 0x1819	; 0x801819 <pxOverflowTimerList+0x1>
     482:	80 81       	ld	r24, Z
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	81 11       	cpse	r24, r1
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	28 2c       	mov	r2, r8
     48c:	39 2c       	mov	r3, r9
     48e:	4a 2c       	mov	r4, r10
     490:	5b 2c       	mov	r5, r11
     492:	39 cf       	rjmp	.-398    	; 0x306 <prvTimerTask+0xfe>

00000494 <__ctors_end>:
     494:	11 24       	eor	r1, r1
     496:	1f be       	out	0x3f, r1	; 63
     498:	cf ef       	ldi	r28, 0xFF	; 255
     49a:	d1 e2       	ldi	r29, 0x21	; 33
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	00 e0       	ldi	r16, 0x00	; 0
     4a2:	0c bf       	out	0x3c, r16	; 60

000004a4 <__do_copy_data>:
     4a4:	17 e0       	ldi	r17, 0x07	; 7
     4a6:	a0 e0       	ldi	r26, 0x00	; 0
     4a8:	b2 e0       	ldi	r27, 0x02	; 2
     4aa:	e0 e4       	ldi	r30, 0x40	; 64
     4ac:	f0 e6       	ldi	r31, 0x60	; 96
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0b bf       	out	0x3b, r16	; 59
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__do_copy_data+0x14>
     4b4:	07 90       	elpm	r0, Z+
     4b6:	0d 92       	st	X+, r0
     4b8:	aa 36       	cpi	r26, 0x6A	; 106
     4ba:	b1 07       	cpc	r27, r17
     4bc:	d9 f7       	brne	.-10     	; 0x4b4 <__do_copy_data+0x10>

000004be <__do_clear_bss>:
     4be:	29 e1       	ldi	r18, 0x19	; 25
     4c0:	aa e6       	ldi	r26, 0x6A	; 106
     4c2:	b7 e0       	ldi	r27, 0x07	; 7
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <.do_clear_bss_start>

000004c6 <.do_clear_bss_loop>:
     4c6:	1d 92       	st	X+, r1

000004c8 <.do_clear_bss_start>:
     4c8:	a5 3f       	cpi	r26, 0xF5	; 245
     4ca:	b2 07       	cpc	r27, r18
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <.do_clear_bss_loop>
     4ce:	0e 94 01 1c 	call	0x3802	; 0x3802 <main>
     4d2:	0c 94 1e 30 	jmp	0x603c	; 0x603c <_exit>

000004d6 <__bad_interrupt>:
     4d6:	94 cd       	rjmp	.-1240   	; 0x0 <__vectors>

000004d8 <CO2_handler_task>:
	);
}

void CO2_handler_task( void *pvParameters ){
	for (;;) {
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, CO2_measure_bit, pdTRUE, pdTRUE, 500); // wait for permission from loraHandler
     4d8:	0f 2e       	mov	r0, r31
     4da:	f4 ef       	ldi	r31, 0xF4	; 244
     4dc:	cf 2e       	mov	r12, r31
     4de:	dd 24       	eor	r13, r13
     4e0:	d3 94       	inc	r13
     4e2:	e1 2c       	mov	r14, r1
     4e4:	f1 2c       	mov	r15, r1
     4e6:	f0 2d       	mov	r31, r0
     4e8:	01 e0       	ldi	r16, 0x01	; 1
     4ea:	21 e0       	ldi	r18, 0x01	; 1
     4ec:	41 e0       	ldi	r20, 0x01	; 1
     4ee:	50 e0       	ldi	r21, 0x00	; 0
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	80 91 92 19 	lds	r24, 0x1992	; 0x801992 <Measure_event_group>
     4f8:	90 91 93 19 	lds	r25, 0x1993	; 0x801993 <Measure_event_group+0x1>
     4fc:	17 d3       	rcall	.+1582   	; 0xb2c <xEventGroupWaitBits>
		if((measureBits & (CO2_measure_bit)) == (CO2_measure_bit)){
     4fe:	60 ff       	sbrs	r22, 0
     500:	eb cf       	rjmp	.-42     	; 0x4d8 <CO2_handler_task>
			return_code = mh_z19_take_meassuring();
     502:	0e 94 b7 23 	call	0x476e	; 0x476e <mh_z19_take_meassuring>
     506:	80 93 94 19 	sts	0x1994, r24	; 0x801994 <return_code>
			while(return_code != MHZ19_OK){ // measure until confirmation is received
     50a:	88 23       	and	r24, r24
     50c:	61 f0       	breq	.+24     	; 0x526 <CO2_handler_task+0x4e>
				vTaskDelay(50);
     50e:	62 e3       	ldi	r22, 0x32	; 50
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 91 14 	call	0x2922	; 0x2922 <vTaskDelay>
				return_code = mh_z19_take_meassuring();
     51a:	0e 94 b7 23 	call	0x476e	; 0x476e <mh_z19_take_meassuring>
     51e:	80 93 94 19 	sts	0x1994, r24	; 0x801994 <return_code>
void CO2_handler_task( void *pvParameters ){
	for (;;) {
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, CO2_measure_bit, pdTRUE, pdTRUE, 500); // wait for permission from loraHandler
		if((measureBits & (CO2_measure_bit)) == (CO2_measure_bit)){
			return_code = mh_z19_take_meassuring();
			while(return_code != MHZ19_OK){ // measure until confirmation is received
     522:	81 11       	cpse	r24, r1
     524:	f4 cf       	rjmp	.-24     	; 0x50e <CO2_handler_task+0x36>
				vTaskDelay(50);
				return_code = mh_z19_take_meassuring();
			}
			vTaskDelay(100); // giving it some time to set the values
     526:	64 e6       	ldi	r22, 0x64	; 100
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 91 14 	call	0x2922	; 0x2922 <vTaskDelay>
			xEventGroupSetBits(Data_event_group, CO2_data_bit);		 // signal PacketAssembly
     532:	44 e0       	ldi	r20, 0x04	; 4
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	80 91 90 19 	lds	r24, 0x1990	; 0x801990 <Data_event_group>
     53e:	90 91 91 19 	lds	r25, 0x1991	; 0x801991 <Data_event_group+0x1>
     542:	b4 d3       	rcall	.+1896   	; 0xcac <xEventGroupSetBits>
     544:	c9 cf       	rjmp	.-110    	; 0x4d8 <CO2_handler_task>

00000546 <CO2Sensor_create>:
mh_z19_return_code_t return_code;
	
void CO2_handler_task( void *pvParameters );

void CO2Sensor_create()
{
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
	mh_z19_create(ser_USART3, setCO2);
     54c:	6a e8       	ldi	r22, 0x8A	; 138
     54e:	74 e0       	ldi	r23, 0x04	; 4
     550:	83 e0       	ldi	r24, 0x03	; 3
     552:	0e 94 89 23 	call	0x4712	; 0x4712 <mh_z19_create>
	xTaskCreate(
     556:	e1 2c       	mov	r14, r1
     558:	f1 2c       	mov	r15, r1
     55a:	02 e0       	ldi	r16, 0x02	; 2
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	48 e8       	ldi	r20, 0x88	; 136
     562:	51 e0       	ldi	r21, 0x01	; 1
     564:	6f e6       	ldi	r22, 0x6F	; 111
     566:	72 e0       	ldi	r23, 0x02	; 2
     568:	8c e6       	ldi	r24, 0x6C	; 108
     56a:	92 e0       	ldi	r25, 0x02	; 2
     56c:	0e 94 73 11 	call	0x22e6	; 0x22e6 <xTaskCreate>
		configMINIMAL_STACK_SIZE+200,
		NULL,
		2,
		NULL 
	);
}
     570:	0f 91       	pop	r16
     572:	ff 90       	pop	r15
     574:	ef 90       	pop	r14
     576:	08 95       	ret

00000578 <lora_send_task_create>:

extern QueueHandle_t Message_queue;
static lora_payload_t _uplink_payload;

void lora_send_task_create(UBaseType_t lora_handler_task_priority)
{	
     578:	ef 92       	push	r14
     57a:	ff 92       	push	r15
     57c:	0f 93       	push	r16
     57e:	08 2f       	mov	r16, r24
	lora_driver_create(LORA_USART, down_link_message_buffer_handle); 
     580:	60 91 af 19 	lds	r22, 0x19AF	; 0x8019af <down_link_message_buffer_handle>
     584:	70 91 b0 19 	lds	r23, 0x19B0	; 0x8019b0 <down_link_message_buffer_handle+0x1>
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <lora_driver_create>
	xTaskCreate(
     58e:	e1 2c       	mov	r14, r1
     590:	f1 2c       	mov	r15, r1
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	48 e8       	ldi	r20, 0x88	; 136
     598:	51 e0       	ldi	r21, 0x01	; 1
     59a:	6b e7       	ldi	r22, 0x7B	; 123
     59c:	72 e0       	ldi	r23, 0x02	; 2
     59e:	81 ea       	ldi	r24, 0xA1	; 161
     5a0:	93 e0       	ldi	r25, 0x03	; 3
     5a2:	0e 94 73 11 	call	0x22e6	; 0x22e6 <xTaskCreate>
	  (const portCHAR *)"LRHand",  // A name just for humans
	  configMINIMAL_STACK_SIZE+200,  // This stack size can be checked & adjusted by reading the Stack Highwater
	  NULL,
	  lora_handler_task_priority,  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	  NULL );
}
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	ef 90       	pop	r14
     5ac:	08 95       	ret

000005ae <lora_setup>:


bool lora_setup(){
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
	e_LoRa_return_code_t return_code;
	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     5b8:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <lora_driver_rn2483_factory_reset>
     5bc:	0e 94 60 22 	call	0x44c0	; 0x44c0 <lora_driver_map_return_code_to_text>
     5c0:	9f 93       	push	r25
     5c2:	8f 93       	push	r24
     5c4:	82 e8       	ldi	r24, 0x82	; 130
     5c6:	92 e0       	ldi	r25, 0x02	; 2
     5c8:	9f 93       	push	r25
     5ca:	8f 93       	push	r24
     5cc:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <printf>
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     5d0:	0e 94 61 21 	call	0x42c2	; 0x42c2 <lora_driver_configure_to_eu868>
     5d4:	0e 94 60 22 	call	0x44c0	; 0x44c0 <lora_driver_map_return_code_to_text>
     5d8:	9f 93       	push	r25
     5da:	8f 93       	push	r24
     5dc:	85 e9       	ldi	r24, 0x95	; 149
     5de:	92 e0       	ldi	r25, 0x02	; 2
     5e0:	9f 93       	push	r25
     5e2:	8f 93       	push	r24
     5e4:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <printf>
	// Get the transceivers HW EUI
	return_code = lora_driver_get_rn2483_hweui(_out_buf);
     5e8:	81 e8       	ldi	r24, 0x81	; 129
     5ea:	97 e0       	ldi	r25, 0x07	; 7
     5ec:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(return_code), _out_buf);
     5f0:	0e 94 60 22 	call	0x44c0	; 0x44c0 <lora_driver_map_return_code_to_text>
     5f4:	c1 e8       	ldi	r28, 0x81	; 129
     5f6:	d7 e0       	ldi	r29, 0x07	; 7
     5f8:	df 93       	push	r29
     5fa:	cf 93       	push	r28
     5fc:	9f 93       	push	r25
     5fe:	8f 93       	push	r24
     600:	8e ea       	ldi	r24, 0xAE	; 174
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <printf>
	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     60c:	ce 01       	movw	r24, r28
     60e:	0e 94 11 20 	call	0x4022	; 0x4022 <lora_driver_set_device_identifier>
     612:	0e 94 60 22 	call	0x44c0	; 0x44c0 <lora_driver_map_return_code_to_text>
     616:	9f 93       	push	r25
     618:	8f 93       	push	r24
     61a:	df 93       	push	r29
     61c:	cf 93       	push	r28
     61e:	82 ec       	ldi	r24, 0xC2	; 194
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	9f 93       	push	r25
     624:	8f 93       	push	r24
     626:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <printf>
	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     62a:	ae 01       	movw	r20, r28
     62c:	67 ed       	ldi	r22, 0xD7	; 215
     62e:	72 e0       	ldi	r23, 0x02	; 2
     630:	88 ef       	ldi	r24, 0xF8	; 248
     632:	92 e0       	ldi	r25, 0x02	; 2
     634:	0e 94 3f 22 	call	0x447e	; 0x447e <lora_driver_set_otaa_identity>
     638:	0e 94 60 22 	call	0x44c0	; 0x44c0 <lora_driver_map_return_code_to_text>
     63c:	9f 93       	push	r25
     63e:	8f 93       	push	r24
     640:	df 93       	push	r29
     642:	cf 93       	push	r28
     644:	87 ed       	ldi	r24, 0xD7	; 215
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	9f 93       	push	r25
     64a:	8f 93       	push	r24
     64c:	88 ef       	ldi	r24, 0xF8	; 248
     64e:	92 e0       	ldi	r25, 0x02	; 2
     650:	9f 93       	push	r25
     652:	8f 93       	push	r24
     654:	89 e0       	ldi	r24, 0x09	; 9
     656:	93 e0       	ldi	r25, 0x03	; 3
     658:	9f 93       	push	r25
     65a:	8f 93       	push	r24
     65c:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <printf>
	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     660:	0e 94 44 20 	call	0x4088	; 0x4088 <lora_driver_save_mac>
     664:	0e 94 60 22 	call	0x44c0	; 0x44c0 <lora_driver_map_return_code_to_text>
     668:	9f 93       	push	r25
     66a:	8f 93       	push	r24
     66c:	8f e3       	ldi	r24, 0x3F	; 63
     66e:	93 e0       	ldi	r25, 0x03	; 3
     670:	9f 93       	push	r25
     672:	8f 93       	push	r24
     674:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <printf>
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     678:	8d b7       	in	r24, 0x3d	; 61
     67a:	9e b7       	in	r25, 0x3e	; 62
     67c:	82 96       	adiw	r24, 0x22	; 34
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	9e bf       	out	0x3e, r25	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	8d bf       	out	0x3d, r24	; 61
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	0e 94 3e 21 	call	0x427c	; 0x427c <lora_driver_set_adaptive_data_rate>
     68e:	0e 94 60 22 	call	0x44c0	; 0x44c0 <lora_driver_map_return_code_to_text>
     692:	9f 93       	push	r25
     694:	8f 93       	push	r24
     696:	8e e4       	ldi	r24, 0x4E	; 78
     698:	93 e0       	ldi	r25, 0x03	; 3
     69a:	9f 93       	push	r25
     69c:	8f 93       	push	r24
     69e:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <printf>
	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     6a2:	84 ef       	ldi	r24, 0xF4	; 244
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	0e 94 49 21 	call	0x4292	; 0x4292 <lora_driver_set_receive_delay>
     6aa:	0e 94 60 22 	call	0x44c0	; 0x44c0 <lora_driver_map_return_code_to_text>
     6ae:	9f 93       	push	r25
     6b0:	8f 93       	push	r24
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	8f 93       	push	r24
     6b6:	84 ef       	ldi	r24, 0xF4	; 244
     6b8:	8f 93       	push	r24
     6ba:	8f e6       	ldi	r24, 0x6F	; 111
     6bc:	93 e0       	ldi	r25, 0x03	; 3
     6be:	9f 93       	push	r25
     6c0:	8f 93       	push	r24
     6c2:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <printf>
     6c6:	8d b7       	in	r24, 0x3d	; 61
     6c8:	9e b7       	in	r25, 0x3e	; 62
     6ca:	0a 96       	adiw	r24, 0x0a	; 10
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	9e bf       	out	0x3e, r25	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	8d bf       	out	0x3d, r24	; 61
     6d6:	c3 e0       	ldi	r28, 0x03	; 3
     6d8:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 3; // This is 3 because after 3rd connection attempt Loriot responds "no free channel"
	
		do {
			return_code = lora_driver_join(LoRa_OTAA);
			printf("Join Network TriesLeft: %d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(return_code));
     6da:	0f 2e       	mov	r0, r31
     6dc:	ff e8       	ldi	r31, 0x8F	; 143
     6de:	ef 2e       	mov	r14, r31
     6e0:	f3 e0       	ldi	r31, 0x03	; 3
     6e2:	ff 2e       	mov	r15, r31
     6e4:	f0 2d       	mov	r31, r0
	//xMessageBuffer = xMessageBufferCreate( 10 );
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 3; // This is 3 because after 3rd connection attempt Loriot responds "no free channel"
	
		do {
			return_code = lora_driver_join(LoRa_OTAA);
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	0e 94 4a 20 	call	0x4094	; 0x4094 <lora_driver_join>
     6ec:	18 2f       	mov	r17, r24
			printf("Join Network TriesLeft: %d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(return_code));
     6ee:	0e 94 60 22 	call	0x44c0	; 0x44c0 <lora_driver_map_return_code_to_text>
     6f2:	9f 93       	push	r25
     6f4:	8f 93       	push	r24
     6f6:	df 93       	push	r29
     6f8:	cf 93       	push	r28
     6fa:	ff 92       	push	r15
     6fc:	ef 92       	push	r14
     6fe:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <printf>

			if(return_code == LoRa_NO_FREE_CH){ // if no free channel - restart entire connection session
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	13 30       	cpi	r17, 0x03	; 3
     710:	79 f0       	breq	.+30     	; 0x730 <lora_setup+0x182>
				return 0;
			}

			else if ( return_code != LoRa_ACCEPTED && return_code != LoRa_NO_FREE_CH){ // Keep trying with same session
     712:	18 30       	cpi	r17, 0x08	; 8
     714:	79 f0       	breq	.+30     	; 0x734 <lora_setup+0x186>
				// Make the red led pulse to tell something went wrong
				led_long_puls(led_ST1); // OPTIONAL
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <led_long_puls>
				// Wait 5 sec and lets try again
				vTaskDelay(pdMS_TO_TICKS(5000UL));
     71c:	66 e3       	ldi	r22, 0x36	; 54
     71e:	71 e0       	ldi	r23, 0x01	; 1
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 91 14 	call	0x2922	; 0x2922 <vTaskDelay>
     728:	21 97       	sbiw	r28, 0x01	; 1
			
			else if(return_code == LoRa_ACCEPTED){
				return 1; // Connection success!
			}
			
		} while (--maxJoinTriesLeft);
     72a:	e9 f6       	brne	.-70     	; 0x6e6 <lora_setup+0x138>
		
			return 0; // connection session failed
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	03 c0       	rjmp	.+6      	; 0x736 <lora_setup+0x188>
		do {
			return_code = lora_driver_join(LoRa_OTAA);
			printf("Join Network TriesLeft: %d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(return_code));

			if(return_code == LoRa_NO_FREE_CH){ // if no free channel - restart entire connection session
				return 0;
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	01 c0       	rjmp	.+2      	; 0x736 <lora_setup+0x188>
				// Wait 5 sec and lets try again
				vTaskDelay(pdMS_TO_TICKS(5000UL));
			}
			
			else if(return_code == LoRa_ACCEPTED){
				return 1; // Connection success!
     734:	81 e0       	ldi	r24, 0x01	; 1
			}
			
		} while (--maxJoinTriesLeft);
		
			return 0; // connection session failed
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	ff 90       	pop	r15
     73e:	ef 90       	pop	r14
     740:	08 95       	ret

00000742 <lora_send_task>:

/*-----------------------------------------------------------*/
void lora_send_task( void *pvParameters ){
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	00 d0       	rcall	.+0      	; 0x748 <lora_send_task+0x6>
     748:	1f 92       	push	r1
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
			EventBits_t dataBits = xEventGroupWaitBits(Data_event_group, Send_data_bit, pdTRUE, pdTRUE, 500); // wait for package
			if((dataBits & (Send_data_bit)) == (Send_data_bit)){			
				BaseType_t dequeue = xQueueReceive(Message_queue, &_uplink_payload, portMAX_DELAY); // take package
				if(dequeue == pdTRUE){				
					rc = lora_driver_sent_upload_message(false, &_uplink_payload); // send package
					printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(rc)); // display result
     74e:	0f 2e       	mov	r0, r31
     750:	f0 eb       	ldi	r31, 0xB0	; 176
     752:	af 2e       	mov	r10, r31
     754:	f3 e0       	ldi	r31, 0x03	; 3
     756:	bf 2e       	mov	r11, r31
     758:	f0 2d       	mov	r31, r0
	while(1)
	{
		static e_LoRa_return_code_t rc;
		
		// Hardware reset of LoRaWAN transceiver
		lora_driver_reset_rn2483(1);
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <lora_driver_reset_rn2483>
		vTaskDelay(2);
     760:	62 e0       	ldi	r22, 0x02	; 2
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 91 14 	call	0x2922	; 0x2922 <vTaskDelay>
		lora_driver_reset_rn2483(0);
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <lora_driver_reset_rn2483>
		// Give it a chance to wakeup
		vTaskDelay(150);
     772:	66 e9       	ldi	r22, 0x96	; 150
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 91 14 	call	0x2922	; 0x2922 <vTaskDelay>

		lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     77e:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <lora_driver_flush_buffers>
	
		bool setup_value = 0;
	
		while(setup_value == 0){	// while lora setup in not comfirmed, retry the connection
			setup_value = lora_setup();	
     782:	15 df       	rcall	.-470    	; 0x5ae <lora_setup>

		lora_driver_flush_buffers(); // get rid of first version string from module after reset!
	
		bool setup_value = 0;
	
		while(setup_value == 0){	// while lora setup in not comfirmed, retry the connection
     784:	88 23       	and	r24, r24
     786:	e9 f3       	breq	.-6      	; 0x782 <lora_send_task+0x40>
			setup_value = lora_setup();	
		}
		 TickType_t xLastWakeTime;
		 const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
		 xLastWakeTime = xTaskGetTickCount();
     788:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <xTaskGetTickCount>
     78c:	69 83       	std	Y+1, r22	; 0x01
     78e:	7a 83       	std	Y+2, r23	; 0x02
     790:	8b 83       	std	Y+3, r24	; 0x03
     792:	9c 83       	std	Y+4, r25	; 0x04
		 
		 while(1)
		 {
			vTaskDelayUntil( &xLastWakeTime, xFrequency ); 
     794:	44 e4       	ldi	r20, 0x44	; 68
     796:	57 e0       	ldi	r21, 0x07	; 7
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	ce 01       	movw	r24, r28
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	0e 94 33 14 	call	0x2866	; 0x2866 <vTaskDelayUntil>
			xEventGroupSetBits(Measure_event_group, CO2_measure_bit|Hum_temp_measure_bit); // allow sensors to measure
     7a4:	43 e0       	ldi	r20, 0x03	; 3
     7a6:	50 e0       	ldi	r21, 0x00	; 0
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	80 91 92 19 	lds	r24, 0x1992	; 0x801992 <Measure_event_group>
     7b0:	90 91 93 19 	lds	r25, 0x1993	; 0x801993 <Measure_event_group+0x1>
     7b4:	7b d2       	rcall	.+1270   	; 0xcac <xEventGroupSetBits>
			EventBits_t dataBits = xEventGroupWaitBits(Data_event_group, Send_data_bit, pdTRUE, pdTRUE, 500); // wait for package
     7b6:	0f 2e       	mov	r0, r31
     7b8:	f4 ef       	ldi	r31, 0xF4	; 244
     7ba:	cf 2e       	mov	r12, r31
     7bc:	dd 24       	eor	r13, r13
     7be:	d3 94       	inc	r13
     7c0:	e1 2c       	mov	r14, r1
     7c2:	f1 2c       	mov	r15, r1
     7c4:	f0 2d       	mov	r31, r0
     7c6:	01 e0       	ldi	r16, 0x01	; 1
     7c8:	21 e0       	ldi	r18, 0x01	; 1
     7ca:	40 e1       	ldi	r20, 0x10	; 16
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	80 91 90 19 	lds	r24, 0x1990	; 0x801990 <Data_event_group>
     7d6:	90 91 91 19 	lds	r25, 0x1991	; 0x801991 <Data_event_group+0x1>
     7da:	a8 d1       	rcall	.+848    	; 0xb2c <xEventGroupWaitBits>
			if((dataBits & (Send_data_bit)) == (Send_data_bit)){			
     7dc:	64 ff       	sbrs	r22, 4
     7de:	da cf       	rjmp	.-76     	; 0x794 <lora_send_task+0x52>
				BaseType_t dequeue = xQueueReceive(Message_queue, &_uplink_payload, portMAX_DELAY); // take package
     7e0:	2f ef       	ldi	r18, 0xFF	; 255
     7e2:	3f ef       	ldi	r19, 0xFF	; 255
     7e4:	a9 01       	movw	r20, r18
     7e6:	6b e6       	ldi	r22, 0x6B	; 107
     7e8:	77 e0       	ldi	r23, 0x07	; 7
     7ea:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <Message_queue>
     7ee:	90 91 b2 19 	lds	r25, 0x19B2	; 0x8019b2 <Message_queue+0x1>
     7f2:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <xQueueReceive>
				if(dequeue == pdTRUE){				
     7f6:	81 30       	cpi	r24, 0x01	; 1
     7f8:	69 f6       	brne	.-102    	; 0x794 <lora_send_task+0x52>
					rc = lora_driver_sent_upload_message(false, &_uplink_payload); // send package
     7fa:	6b e6       	ldi	r22, 0x6B	; 107
     7fc:	77 e0       	ldi	r23, 0x07	; 7
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	0e 94 73 20 	call	0x40e6	; 0x40e6 <lora_driver_sent_upload_message>
     804:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <__data_end>
					printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(rc)); // display result
     808:	0e 94 60 22 	call	0x44c0	; 0x44c0 <lora_driver_map_return_code_to_text>
     80c:	9f 93       	push	r25
     80e:	8f 93       	push	r24
     810:	bf 92       	push	r11
     812:	af 92       	push	r10
     814:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <printf>
					if(rc == LoRa_NO_FREE_CH){ // After 5-8 messages LORIOT responds with no free channel, restart connection in that case
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <__data_end>
     824:	83 30       	cpi	r24, 0x03	; 3
     826:	09 f0       	breq	.+2      	; 0x82a <lora_send_task+0xe8>
     828:	b5 cf       	rjmp	.-150    	; 0x794 <lora_send_task+0x52>
     82a:	97 cf       	rjmp	.-210    	; 0x75a <lora_send_task+0x18>

0000082c <packet_assembly_task>:
			// retrieve data
			uint16_t hum = (int) getHumidity();
			int16_t temp = (int) getTemperature();
			uint16_t co2_ppm = getCO2();
			// put data to package
			payload_to_queue.len = 6;
     82c:	c3 eb       	ldi	r28, 0xB3	; 179
     82e:	d9 e1       	ldi	r29, 0x19	; 25
     830:	0f 2e       	mov	r0, r31
     832:	f6 e0       	ldi	r31, 0x06	; 6
     834:	af 2e       	mov	r10, r31
     836:	f0 2d       	mov	r31, r0
			payload_to_queue.port_no = 2;
     838:	68 94       	set
     83a:	bb 24       	eor	r11, r11
     83c:	b1 f8       	bld	r11, 1
	);
}

void packet_assembly_task(){
	for(;;){
		EventBits_t dataBits = xEventGroupWaitBits(Data_event_group, CO2_data_bit|Hum_temp_data_bit, pdTRUE, pdTRUE, 500); // wait for data from sensors
     83e:	0f 2e       	mov	r0, r31
     840:	f4 ef       	ldi	r31, 0xF4	; 244
     842:	cf 2e       	mov	r12, r31
     844:	dd 24       	eor	r13, r13
     846:	d3 94       	inc	r13
     848:	e1 2c       	mov	r14, r1
     84a:	f1 2c       	mov	r15, r1
     84c:	f0 2d       	mov	r31, r0
     84e:	01 e0       	ldi	r16, 0x01	; 1
     850:	21 e0       	ldi	r18, 0x01	; 1
     852:	4c e0       	ldi	r20, 0x0C	; 12
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	80 91 90 19 	lds	r24, 0x1990	; 0x801990 <Data_event_group>
     85e:	90 91 91 19 	lds	r25, 0x1991	; 0x801991 <Data_event_group+0x1>
     862:	64 d1       	rcall	.+712    	; 0xb2c <xEventGroupWaitBits>
		if((dataBits & (CO2_data_bit|Hum_temp_data_bit)) == (CO2_data_bit|Hum_temp_data_bit)){
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	8c 70       	andi	r24, 0x0C	; 12
     86a:	99 27       	eor	r25, r25
     86c:	aa 27       	eor	r26, r26
     86e:	bb 27       	eor	r27, r27
     870:	0c 97       	sbiw	r24, 0x0c	; 12
     872:	a1 05       	cpc	r26, r1
     874:	b1 05       	cpc	r27, r1
			// retrieve data
			uint16_t hum = (int) getHumidity();
     876:	19 f7       	brne	.-58     	; 0x83e <packet_assembly_task+0x12>
     878:	73 d0       	rcall	.+230    	; 0x960 <getHumidity>
     87a:	0e 94 11 1c 	call	0x3822	; 0x3822 <__fixsfsi>
     87e:	f6 2e       	mov	r15, r22
			int16_t temp = (int) getTemperature();
     880:	e7 2e       	mov	r14, r23
     882:	b4 d0       	rcall	.+360    	; 0x9ec <getTemperature>
     884:	0e 94 11 1c 	call	0x3822	; 0x3822 <__fixsfsi>
     888:	16 2f       	mov	r17, r22
			uint16_t co2_ppm = getCO2();
     88a:	07 2f       	mov	r16, r23
     88c:	30 d0       	rcall	.+96     	; 0x8ee <getCO2>
			// put data to package
			payload_to_queue.len = 6;
     88e:	a9 82       	std	Y+1, r10	; 0x01
			payload_to_queue.port_no = 2;
     890:	b8 82       	st	Y, r11
			payload_to_queue.bytes[0] = hum >> 8;
     892:	ea 82       	std	Y+2, r14	; 0x02
			payload_to_queue.bytes[1] = hum & 0xFF;
     894:	fb 82       	std	Y+3, r15	; 0x03
			payload_to_queue.bytes[2] = temp >> 8;
     896:	0c 83       	std	Y+4, r16	; 0x04
			payload_to_queue.bytes[3] = temp & 0xFF;
     898:	1d 83       	std	Y+5, r17	; 0x05
			payload_to_queue.bytes[4] = co2_ppm >> 8;
     89a:	9e 83       	std	Y+6, r25	; 0x06
			payload_to_queue.bytes[5] = co2_ppm & 0xFF;
     89c:	8f 83       	std	Y+7, r24	; 0x07
			// put packet into queue
			xQueueSend(Message_queue, &payload_to_queue,portMAX_DELAY); 
     89e:	00 e0       	ldi	r16, 0x00	; 0
     8a0:	2f ef       	ldi	r18, 0xFF	; 255
     8a2:	3f ef       	ldi	r19, 0xFF	; 255
     8a4:	a9 01       	movw	r20, r18
     8a6:	be 01       	movw	r22, r28
     8a8:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <Message_queue>
     8ac:	90 91 b2 19 	lds	r25, 0x19B2	; 0x8019b2 <Message_queue+0x1>
     8b0:	1f d7       	rcall	.+3646   	; 0x16f0 <xQueueGenericSend>
			// signal that data is packed and ready to be sent
			xEventGroupSetBits(Data_event_group, Send_data_bit);
     8b2:	40 e1       	ldi	r20, 0x10	; 16
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	80 91 90 19 	lds	r24, 0x1990	; 0x801990 <Data_event_group>
     8be:	90 91 91 19 	lds	r25, 0x1991	; 0x801991 <Data_event_group+0x1>
     8c2:	f4 d1       	rcall	.+1000   	; 0xcac <xEventGroupSetBits>
     8c4:	bc cf       	rjmp	.-136    	; 0x83e <packet_assembly_task+0x12>

000008c6 <PacketAssembly_create>:
extern QueueHandle_t Message_queue;

void packet_assembly_task();

void PacketAssembly_create()
{
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
	xTaskCreate(
     8cc:	e1 2c       	mov	r14, r1
     8ce:	f1 2c       	mov	r15, r1
     8d0:	02 e0       	ldi	r16, 0x02	; 2
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	42 ef       	ldi	r20, 0xF2	; 242
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	65 ec       	ldi	r22, 0xC5	; 197
     8dc:	73 e0       	ldi	r23, 0x03	; 3
     8de:	86 e1       	ldi	r24, 0x16	; 22
     8e0:	94 e0       	ldi	r25, 0x04	; 4
     8e2:	0e 94 73 11 	call	0x22e6	; 0x22e6 <xTaskCreate>
	configMINIMAL_STACK_SIZE+50,  
	NULL,
	2,
	NULL
	);
}
     8e6:	0f 91       	pop	r16
     8e8:	ff 90       	pop	r15
     8ea:	ef 90       	pop	r14
     8ec:	08 95       	ret

000008ee <getCO2>:
bool isTaken_CO2 = 0;
bool isTaken_humidity = 0;
bool isTaken_temperature = 0;

uint16_t getCO2(){ //not possible to return mutex after returning from function call, therefore we don't use it in get functions
	while(isTaken_CO2){	 // delay task while mutex is taken
     8ee:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <isTaken_CO2>
     8f2:	88 23       	and	r24, r24
     8f4:	51 f0       	breq	.+20     	; 0x90a <getCO2+0x1c>
		vTaskDelay(50);
     8f6:	62 e3       	ldi	r22, 0x32	; 50
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 91 14 	call	0x2922	; 0x2922 <vTaskDelay>
bool isTaken_CO2 = 0;
bool isTaken_humidity = 0;
bool isTaken_temperature = 0;

uint16_t getCO2(){ //not possible to return mutex after returning from function call, therefore we don't use it in get functions
	while(isTaken_CO2){	 // delay task while mutex is taken
     902:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <isTaken_CO2>
     906:	81 11       	cpse	r24, r1
     908:	f6 cf       	rjmp	.-20     	; 0x8f6 <getCO2+0x8>
		vTaskDelay(50);
	}
	return local_CO2;
}
     90a:	80 91 cd 19 	lds	r24, 0x19CD	; 0x8019cd <local_CO2>
     90e:	90 91 ce 19 	lds	r25, 0x19CE	; 0x8019ce <local_CO2+0x1>
     912:	08 95       	ret

00000914 <setCO2>:

void setCO2(uint16_t CO2){
     914:	0f 93       	push	r16
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	ec 01       	movw	r28, r24
	xSemaphoreTake(Mutex_CO2,1000);
     91c:	48 ee       	ldi	r20, 0xE8	; 232
     91e:	53 e0       	ldi	r21, 0x03	; 3
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	80 91 97 19 	lds	r24, 0x1997	; 0x801997 <Mutex_CO2>
     928:	90 91 98 19 	lds	r25, 0x1998	; 0x801998 <Mutex_CO2+0x1>
     92c:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <xQueueSemaphoreTake>
	isTaken_CO2 = 1;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <isTaken_CO2>
	local_CO2 = CO2;
     936:	d0 93 ce 19 	sts	0x19CE, r29	; 0x8019ce <local_CO2+0x1>
     93a:	c0 93 cd 19 	sts	0x19CD, r28	; 0x8019cd <local_CO2>
	xSemaphoreGive(Mutex_CO2);
     93e:	00 e0       	ldi	r16, 0x00	; 0
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	a9 01       	movw	r20, r18
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	80 91 97 19 	lds	r24, 0x1997	; 0x801997 <Mutex_CO2>
     94e:	90 91 98 19 	lds	r25, 0x1998	; 0x801998 <Mutex_CO2+0x1>
     952:	ce d6       	rcall	.+3484   	; 0x16f0 <xQueueGenericSend>
	isTaken_CO2 = 0;
     954:	10 92 e7 07 	sts	0x07E7, r1	; 0x8007e7 <isTaken_CO2>
}
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	0f 91       	pop	r16
     95e:	08 95       	ret

00000960 <getHumidity>:

float getHumidity(){
	while(isTaken_humidity){
     960:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <isTaken_humidity>
     964:	88 23       	and	r24, r24
     966:	51 f0       	breq	.+20     	; 0x97c <getHumidity+0x1c>
		vTaskDelay(50);
     968:	62 e3       	ldi	r22, 0x32	; 50
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 91 14 	call	0x2922	; 0x2922 <vTaskDelay>
	xSemaphoreGive(Mutex_CO2);
	isTaken_CO2 = 0;
}

float getHumidity(){
	while(isTaken_humidity){
     974:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <isTaken_humidity>
     978:	81 11       	cpse	r24, r1
     97a:	f6 cf       	rjmp	.-20     	; 0x968 <getHumidity+0x8>
		vTaskDelay(50);
	}
	return local_humidity;
     97c:	60 91 cf 19 	lds	r22, 0x19CF	; 0x8019cf <local_humidity>
     980:	70 91 d0 19 	lds	r23, 0x19D0	; 0x8019d0 <local_humidity+0x1>
     984:	80 91 d1 19 	lds	r24, 0x19D1	; 0x8019d1 <local_humidity+0x2>
     988:	90 91 d2 19 	lds	r25, 0x19D2	; 0x8019d2 <local_humidity+0x3>
}
     98c:	08 95       	ret

0000098e <setHumidity>:
void setHumidity(float humidity_level){
     98e:	cf 92       	push	r12
     990:	df 92       	push	r13
     992:	ef 92       	push	r14
     994:	ff 92       	push	r15
     996:	0f 93       	push	r16
     998:	6b 01       	movw	r12, r22
     99a:	7c 01       	movw	r14, r24
	xSemaphoreTake(Mutex_humidity,1000);
     99c:	48 ee       	ldi	r20, 0xE8	; 232
     99e:	53 e0       	ldi	r21, 0x03	; 3
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	80 91 8e 19 	lds	r24, 0x198E	; 0x80198e <Mutex_humidity>
     9a8:	90 91 8f 19 	lds	r25, 0x198F	; 0x80198f <Mutex_humidity+0x1>
     9ac:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <xQueueSemaphoreTake>
	isTaken_humidity = 1;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <isTaken_humidity>
	local_humidity = humidity_level;
     9b6:	c0 92 cf 19 	sts	0x19CF, r12	; 0x8019cf <local_humidity>
     9ba:	d0 92 d0 19 	sts	0x19D0, r13	; 0x8019d0 <local_humidity+0x1>
     9be:	e0 92 d1 19 	sts	0x19D1, r14	; 0x8019d1 <local_humidity+0x2>
     9c2:	f0 92 d2 19 	sts	0x19D2, r15	; 0x8019d2 <local_humidity+0x3>
	xSemaphoreGive(Mutex_humidity);
     9c6:	00 e0       	ldi	r16, 0x00	; 0
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	a9 01       	movw	r20, r18
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	80 91 8e 19 	lds	r24, 0x198E	; 0x80198e <Mutex_humidity>
     9d6:	90 91 8f 19 	lds	r25, 0x198F	; 0x80198f <Mutex_humidity+0x1>
     9da:	8a d6       	rcall	.+3348   	; 0x16f0 <xQueueGenericSend>
	isTaken_humidity = 0;
     9dc:	10 92 e6 07 	sts	0x07E6, r1	; 0x8007e6 <isTaken_humidity>
}
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	df 90       	pop	r13
     9e8:	cf 90       	pop	r12
     9ea:	08 95       	ret

000009ec <getTemperature>:

float getTemperature(){
	while(isTaken_temperature){
     9ec:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <isTaken_temperature>
     9f0:	88 23       	and	r24, r24
     9f2:	51 f0       	breq	.+20     	; 0xa08 <getTemperature+0x1c>
		vTaskDelay(50);
     9f4:	62 e3       	ldi	r22, 0x32	; 50
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 91 14 	call	0x2922	; 0x2922 <vTaskDelay>
	xSemaphoreGive(Mutex_humidity);
	isTaken_humidity = 0;
}

float getTemperature(){
	while(isTaken_temperature){
     a00:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <isTaken_temperature>
     a04:	81 11       	cpse	r24, r1
     a06:	f6 cf       	rjmp	.-20     	; 0x9f4 <getTemperature+0x8>
		vTaskDelay(50);
	}
	return local_temperature;
     a08:	60 91 c9 19 	lds	r22, 0x19C9	; 0x8019c9 <local_temperature>
     a0c:	70 91 ca 19 	lds	r23, 0x19CA	; 0x8019ca <local_temperature+0x1>
     a10:	80 91 cb 19 	lds	r24, 0x19CB	; 0x8019cb <local_temperature+0x2>
     a14:	90 91 cc 19 	lds	r25, 0x19CC	; 0x8019cc <local_temperature+0x3>
}
     a18:	08 95       	ret

00000a1a <setTemperature>:
void setTemperature(float temperature_level){
     a1a:	cf 92       	push	r12
     a1c:	df 92       	push	r13
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	6b 01       	movw	r12, r22
     a26:	7c 01       	movw	r14, r24
	xSemaphoreTake(Mutex_temperature,1000);
     a28:	48 ee       	ldi	r20, 0xE8	; 232
     a2a:	53 e0       	ldi	r21, 0x03	; 3
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	80 91 95 19 	lds	r24, 0x1995	; 0x801995 <Mutex_temperature>
     a34:	90 91 96 19 	lds	r25, 0x1996	; 0x801996 <Mutex_temperature+0x1>
     a38:	e8 d7       	rcall	.+4048   	; 0x1a0a <xQueueSemaphoreTake>
	isTaken_temperature = 1;
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <isTaken_temperature>
	local_temperature = temperature_level;
     a40:	c0 92 c9 19 	sts	0x19C9, r12	; 0x8019c9 <local_temperature>
     a44:	d0 92 ca 19 	sts	0x19CA, r13	; 0x8019ca <local_temperature+0x1>
     a48:	e0 92 cb 19 	sts	0x19CB, r14	; 0x8019cb <local_temperature+0x2>
     a4c:	f0 92 cc 19 	sts	0x19CC, r15	; 0x8019cc <local_temperature+0x3>
	xSemaphoreGive(Mutex_temperature);
     a50:	00 e0       	ldi	r16, 0x00	; 0
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	a9 01       	movw	r20, r18
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	80 91 95 19 	lds	r24, 0x1995	; 0x801995 <Mutex_temperature>
     a60:	90 91 96 19 	lds	r25, 0x1996	; 0x801996 <Mutex_temperature+0x1>
     a64:	45 d6       	rcall	.+3210   	; 0x16f0 <xQueueGenericSend>
	isTaken_temperature = 0;
     a66:	10 92 e5 07 	sts	0x07E5, r1	; 0x8007e5 <isTaken_temperature>
}
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	cf 90       	pop	r12
     a74:	08 95       	ret

00000a76 <Servo_handler_task>:
}

void  Servo_handler_task( void *pvParameters )
{	
  for (;;){
	xMessageBufferReceive(down_link_message_buffer_handle, &downlink_payload, sizeof(lora_payload_t), portMAX_DELAY);
     a76:	0f ef       	ldi	r16, 0xFF	; 255
     a78:	1f ef       	ldi	r17, 0xFF	; 255
     a7a:	98 01       	movw	r18, r16
     a7c:	46 e1       	ldi	r20, 0x16	; 22
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	69 e9       	ldi	r22, 0x99	; 153
     a82:	79 e1       	ldi	r23, 0x19	; 25
     a84:	80 91 af 19 	lds	r24, 0x19AF	; 0x8019af <down_link_message_buffer_handle>
     a88:	90 91 b0 19 	lds	r25, 0x19B0	; 0x8019b0 <down_link_message_buffer_handle+0x1>
     a8c:	0e 94 30 10 	call	0x2060	; 0x2060 <xStreamBufferReceive>
	if (downlink_payload.port_no==3){ // Check that we have get contacted on right port
     a90:	80 91 99 19 	lds	r24, 0x1999	; 0x801999 <downlink_payload>
     a94:	83 30       	cpi	r24, 0x03	; 3
     a96:	41 f4       	brne	.+16     	; 0xaa8 <Servo_handler_task+0x32>
		percent = percent * -1;	// Makes servo turn all length opposite direction
     a98:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <percent>
     a9c:	61 95       	neg	r22
     a9e:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <percent>
		rcServoSet(servoNo,percent);
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0e 94 e6 23 	call	0x47cc	; 0x47cc <rcServoSet>
	}
	lora_driver_flush_buffers();
     aa8:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <lora_driver_flush_buffers>
  }
     aac:	e4 cf       	rjmp	.-56     	; 0xa76 <Servo_handler_task>

00000aae <ServoHandler_create>:
const uint8_t servoNo = 0;
int8_t percent = 100;
extern MessageBufferHandle_t down_link_message_buffer_handle;
void Servo_handler_task( void *pvParameters );

void ServoHandler_create(){
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
    rcServoCreate();	
     ab4:	0e 94 fe 23 	call	0x47fc	; 0x47fc <rcServoCreate>
    xTaskCreate(
     ab8:	e1 2c       	mov	r14, r1
     aba:	f1 2c       	mov	r15, r1
     abc:	03 e0       	ldi	r16, 0x03	; 3
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	42 ef       	ldi	r20, 0xF2	; 242
     ac4:	50 e0       	ldi	r21, 0x00	; 0
     ac6:	62 ed       	ldi	r22, 0xD2	; 210
     ac8:	73 e0       	ldi	r23, 0x03	; 3
     aca:	8b e3       	ldi	r24, 0x3B	; 59
     acc:	95 e0       	ldi	r25, 0x05	; 5
     ace:	0e 94 73 11 	call	0x22e6	; 0x22e6 <xTaskCreate>
      (const portCHAR *)"ServoHTask",  
      configMINIMAL_STACK_SIZE+50 , 
      NULL,
      3,  
      NULL );
}
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	08 95       	ret

00000ada <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     ada:	e7 e0       	ldi	r30, 0x07	; 7
     adc:	f1 e0       	ldi	r31, 0x01	; 1
     ade:	80 81       	ld	r24, Z
     ae0:	8f 60       	ori	r24, 0x0F	; 15
     ae2:	80 83       	st	Z, r24
     ae4:	08 95       	ret

00000ae6 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     ae6:	e8 e0       	ldi	r30, 0x08	; 8
     ae8:	f1 e0       	ldi	r31, 0x01	; 1
     aea:	90 81       	ld	r25, Z
     aec:	90 7f       	andi	r25, 0xF0	; 240
     aee:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     af0:	90 81       	ld	r25, Z
     af2:	8f 70       	andi	r24, 0x0F	; 15
     af4:	98 2b       	or	r25, r24
     af6:	90 83       	st	Z, r25
     af8:	08 95       	ret

00000afa <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     afa:	e8 e0       	ldi	r30, 0x08	; 8
     afc:	f1 e0       	ldi	r31, 0x01	; 1
     afe:	80 81       	ld	r24, Z
     b00:	80 7f       	andi	r24, 0xF0	; 240
     b02:	80 83       	st	Z, r24
     b04:	08 95       	ret

00000b06 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	80 e1       	ldi	r24, 0x10	; 16
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	b4 d1       	rcall	.+872    	; 0xe78 <pvPortMalloc>
     b10:	ec 01       	movw	r28, r24
     b12:	00 97       	sbiw	r24, 0x00	; 0
     b14:	39 f0       	breq	.+14     	; 0xb24 <xEventGroupCreate+0x1e>
     b16:	fc 01       	movw	r30, r24
     b18:	11 92       	st	Z+, r1
     b1a:	11 92       	st	Z+, r1
     b1c:	11 92       	st	Z+, r1
     b1e:	11 92       	st	Z+, r1
     b20:	cf 01       	movw	r24, r30
     b22:	94 d2       	rcall	.+1320   	; 0x104c <vListInitialise>
     b24:	ce 01       	movw	r24, r28
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	08 95       	ret

00000b2c <xEventGroupWaitBits>:
     b2c:	2f 92       	push	r2
     b2e:	3f 92       	push	r3
     b30:	4f 92       	push	r4
     b32:	5f 92       	push	r5
     b34:	6f 92       	push	r6
     b36:	7f 92       	push	r7
     b38:	8f 92       	push	r8
     b3a:	9f 92       	push	r9
     b3c:	af 92       	push	r10
     b3e:	bf 92       	push	r11
     b40:	cf 92       	push	r12
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	ec 01       	movw	r28, r24
     b52:	4a 01       	movw	r8, r20
     b54:	5b 01       	movw	r10, r22
     b56:	62 2e       	mov	r6, r18
     b58:	70 2e       	mov	r7, r16
     b5a:	0e 94 ce 12 	call	0x259c	; 0x259c <vTaskSuspendAll>
     b5e:	28 80       	ld	r2, Y
     b60:	39 80       	ldd	r3, Y+1	; 0x01
     b62:	4a 80       	ldd	r4, Y+2	; 0x02
     b64:	5b 80       	ldd	r5, Y+3	; 0x03
     b66:	01 11       	cpse	r16, r1
     b68:	0d c0       	rjmp	.+26     	; 0xb84 <xEventGroupWaitBits+0x58>
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	b2 01       	movw	r22, r4
     b6e:	a1 01       	movw	r20, r2
     b70:	48 21       	and	r20, r8
     b72:	59 21       	and	r21, r9
     b74:	6a 21       	and	r22, r10
     b76:	7b 21       	and	r23, r11
     b78:	45 2b       	or	r20, r21
     b7a:	46 2b       	or	r20, r22
     b7c:	47 2b       	or	r20, r23
     b7e:	79 f4       	brne	.+30     	; 0xb9e <xEventGroupWaitBits+0x72>
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	0d c0       	rjmp	.+26     	; 0xb9e <xEventGroupWaitBits+0x72>
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	b2 01       	movw	r22, r4
     b88:	a1 01       	movw	r20, r2
     b8a:	48 21       	and	r20, r8
     b8c:	59 21       	and	r21, r9
     b8e:	6a 21       	and	r22, r10
     b90:	7b 21       	and	r23, r11
     b92:	48 15       	cp	r20, r8
     b94:	59 05       	cpc	r21, r9
     b96:	6a 05       	cpc	r22, r10
     b98:	7b 05       	cpc	r23, r11
     b9a:	09 f0       	breq	.+2      	; 0xb9e <xEventGroupWaitBits+0x72>
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	88 23       	and	r24, r24
     ba0:	81 f0       	breq	.+32     	; 0xbc2 <xEventGroupWaitBits+0x96>
     ba2:	66 20       	and	r6, r6
     ba4:	09 f4       	brne	.+2      	; 0xba8 <xEventGroupWaitBits+0x7c>
     ba6:	6b c0       	rjmp	.+214    	; 0xc7e <xEventGroupWaitBits+0x152>
     ba8:	80 94       	com	r8
     baa:	90 94       	com	r9
     bac:	a0 94       	com	r10
     bae:	b0 94       	com	r11
     bb0:	82 20       	and	r8, r2
     bb2:	93 20       	and	r9, r3
     bb4:	a4 20       	and	r10, r4
     bb6:	b5 20       	and	r11, r5
     bb8:	88 82       	st	Y, r8
     bba:	99 82       	std	Y+1, r9	; 0x01
     bbc:	aa 82       	std	Y+2, r10	; 0x02
     bbe:	bb 82       	std	Y+3, r11	; 0x03
     bc0:	5e c0       	rjmp	.+188    	; 0xc7e <xEventGroupWaitBits+0x152>
     bc2:	c1 14       	cp	r12, r1
     bc4:	d1 04       	cpc	r13, r1
     bc6:	e1 04       	cpc	r14, r1
     bc8:	f1 04       	cpc	r15, r1
     bca:	09 f4       	brne	.+2      	; 0xbce <xEventGroupWaitBits+0xa2>
     bcc:	58 c0       	rjmp	.+176    	; 0xc7e <xEventGroupWaitBits+0x152>
     bce:	66 20       	and	r6, r6
     bd0:	29 f0       	breq	.+10     	; 0xbdc <xEventGroupWaitBits+0xb0>
     bd2:	40 e0       	ldi	r20, 0x00	; 0
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	71 e0       	ldi	r23, 0x01	; 1
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <xEventGroupWaitBits+0xb6>
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	ba 01       	movw	r22, r20
     be2:	71 10       	cpse	r7, r1
     be4:	74 60       	ori	r23, 0x04	; 4
     be6:	48 29       	or	r20, r8
     be8:	59 29       	or	r21, r9
     bea:	6a 29       	or	r22, r10
     bec:	7b 29       	or	r23, r11
     bee:	97 01       	movw	r18, r14
     bf0:	86 01       	movw	r16, r12
     bf2:	ce 01       	movw	r24, r28
     bf4:	04 96       	adiw	r24, 0x04	; 4
     bf6:	0e 94 40 15 	call	0x2a80	; 0x2a80 <vTaskPlaceOnUnorderedEventList>
     bfa:	0e 94 b7 13 	call	0x276e	; 0x276e <xTaskResumeAll>
     bfe:	81 11       	cpse	r24, r1
     c00:	01 c0       	rjmp	.+2      	; 0xc04 <xEventGroupWaitBits+0xd8>
     c02:	6c d3       	rcall	.+1752   	; 0x12dc <vPortYield>
     c04:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uxTaskResetEventItemValue>
     c08:	91 fd       	sbrc	r25, 1
     c0a:	35 c0       	rjmp	.+106    	; 0xc76 <xEventGroupWaitBits+0x14a>
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	0f 92       	push	r0
     c12:	68 81       	ld	r22, Y
     c14:	79 81       	ldd	r23, Y+1	; 0x01
     c16:	8a 81       	ldd	r24, Y+2	; 0x02
     c18:	9b 81       	ldd	r25, Y+3	; 0x03
     c1a:	71 10       	cpse	r7, r1
     c1c:	0d c0       	rjmp	.+26     	; 0xc38 <xEventGroupWaitBits+0x10c>
     c1e:	21 e0       	ldi	r18, 0x01	; 1
     c20:	75 01       	movw	r14, r10
     c22:	64 01       	movw	r12, r8
     c24:	c6 22       	and	r12, r22
     c26:	d7 22       	and	r13, r23
     c28:	e8 22       	and	r14, r24
     c2a:	f9 22       	and	r15, r25
     c2c:	cd 28       	or	r12, r13
     c2e:	ce 28       	or	r12, r14
     c30:	cf 28       	or	r12, r15
     c32:	79 f4       	brne	.+30     	; 0xc52 <xEventGroupWaitBits+0x126>
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	0d c0       	rjmp	.+26     	; 0xc52 <xEventGroupWaitBits+0x126>
     c38:	21 e0       	ldi	r18, 0x01	; 1
     c3a:	75 01       	movw	r14, r10
     c3c:	64 01       	movw	r12, r8
     c3e:	c6 22       	and	r12, r22
     c40:	d7 22       	and	r13, r23
     c42:	e8 22       	and	r14, r24
     c44:	f9 22       	and	r15, r25
     c46:	c8 14       	cp	r12, r8
     c48:	d9 04       	cpc	r13, r9
     c4a:	ea 04       	cpc	r14, r10
     c4c:	fb 04       	cpc	r15, r11
     c4e:	09 f0       	breq	.+2      	; 0xc52 <xEventGroupWaitBits+0x126>
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	22 23       	and	r18, r18
     c54:	71 f0       	breq	.+28     	; 0xc72 <xEventGroupWaitBits+0x146>
     c56:	66 20       	and	r6, r6
     c58:	61 f0       	breq	.+24     	; 0xc72 <xEventGroupWaitBits+0x146>
     c5a:	80 94       	com	r8
     c5c:	90 94       	com	r9
     c5e:	a0 94       	com	r10
     c60:	b0 94       	com	r11
     c62:	86 22       	and	r8, r22
     c64:	97 22       	and	r9, r23
     c66:	a8 22       	and	r10, r24
     c68:	b9 22       	and	r11, r25
     c6a:	88 82       	st	Y, r8
     c6c:	99 82       	std	Y+1, r9	; 0x01
     c6e:	aa 82       	std	Y+2, r10	; 0x02
     c70:	bb 82       	std	Y+3, r11	; 0x03
     c72:	0f 90       	pop	r0
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	1b 01       	movw	r2, r22
     c78:	2c 01       	movw	r4, r24
     c7a:	55 24       	eor	r5, r5
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <xEventGroupWaitBits+0x156>
     c7e:	0e 94 b7 13 	call	0x276e	; 0x276e <xTaskResumeAll>
     c82:	c2 01       	movw	r24, r4
     c84:	b1 01       	movw	r22, r2
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	ff 90       	pop	r15
     c90:	ef 90       	pop	r14
     c92:	df 90       	pop	r13
     c94:	cf 90       	pop	r12
     c96:	bf 90       	pop	r11
     c98:	af 90       	pop	r10
     c9a:	9f 90       	pop	r9
     c9c:	8f 90       	pop	r8
     c9e:	7f 90       	pop	r7
     ca0:	6f 90       	pop	r6
     ca2:	5f 90       	pop	r5
     ca4:	4f 90       	pop	r4
     ca6:	3f 90       	pop	r3
     ca8:	2f 90       	pop	r2
     caa:	08 95       	ret

00000cac <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     cac:	4f 92       	push	r4
     cae:	5f 92       	push	r5
     cb0:	6f 92       	push	r6
     cb2:	7f 92       	push	r7
     cb4:	8f 92       	push	r8
     cb6:	9f 92       	push	r9
     cb8:	af 92       	push	r10
     cba:	bf 92       	push	r11
     cbc:	cf 92       	push	r12
     cbe:	df 92       	push	r13
     cc0:	ef 92       	push	r14
     cc2:	ff 92       	push	r15
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	ec 01       	movw	r28, r24
     cce:	6a 01       	movw	r12, r20
     cd0:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     cd2:	8c 01       	movw	r16, r24
     cd4:	09 5f       	subi	r16, 0xF9	; 249
     cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     cd8:	0e 94 ce 12 	call	0x259c	; 0x259c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     cdc:	eb 85       	ldd	r30, Y+11	; 0x0b
     cde:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     ce0:	88 81       	ld	r24, Y
     ce2:	99 81       	ldd	r25, Y+1	; 0x01
     ce4:	aa 81       	ldd	r26, Y+2	; 0x02
     ce6:	bb 81       	ldd	r27, Y+3	; 0x03
     ce8:	c8 2a       	or	r12, r24
     cea:	d9 2a       	or	r13, r25
     cec:	ea 2a       	or	r14, r26
     cee:	fb 2a       	or	r15, r27
     cf0:	c8 82       	st	Y, r12
     cf2:	d9 82       	std	Y+1, r13	; 0x01
     cf4:	ea 82       	std	Y+2, r14	; 0x02
     cf6:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     cf8:	0e 17       	cp	r16, r30
     cfa:	1f 07       	cpc	r17, r31
     cfc:	09 f4       	brne	.+2      	; 0xd00 <xEventGroupSetBits+0x54>
     cfe:	45 c0       	rjmp	.+138    	; 0xd8a <xEventGroupSetBits+0xde>
     d00:	c1 2c       	mov	r12, r1
     d02:	d1 2c       	mov	r13, r1
     d04:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     d06:	99 24       	eor	r9, r9
     d08:	93 94       	inc	r9
     d0a:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
     d0c:	a4 80       	ldd	r10, Z+4	; 0x04
     d0e:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     d10:	80 81       	ld	r24, Z
     d12:	91 81       	ldd	r25, Z+1	; 0x01
     d14:	a2 81       	ldd	r26, Z+2	; 0x02
     d16:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     d18:	ac 01       	movw	r20, r24
     d1a:	bd 01       	movw	r22, r26
     d1c:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     d1e:	b2 fd       	sbrc	r27, 2
     d20:	0f c0       	rjmp	.+30     	; 0xd40 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     d22:	48 80       	ld	r4, Y
     d24:	59 80       	ldd	r5, Y+1	; 0x01
     d26:	6a 80       	ldd	r6, Y+2	; 0x02
     d28:	7b 80       	ldd	r7, Y+3	; 0x03
     d2a:	44 22       	and	r4, r20
     d2c:	55 22       	and	r5, r21
     d2e:	66 22       	and	r6, r22
     d30:	77 22       	and	r7, r23
     d32:	29 2d       	mov	r18, r9
     d34:	45 28       	or	r4, r5
     d36:	46 28       	or	r4, r6
     d38:	47 28       	or	r4, r7
     d3a:	89 f4       	brne	.+34     	; 0xd5e <xEventGroupSetBits+0xb2>
     d3c:	28 2d       	mov	r18, r8
     d3e:	0f c0       	rjmp	.+30     	; 0xd5e <xEventGroupSetBits+0xb2>
     d40:	48 80       	ld	r4, Y
     d42:	59 80       	ldd	r5, Y+1	; 0x01
     d44:	6a 80       	ldd	r6, Y+2	; 0x02
     d46:	7b 80       	ldd	r7, Y+3	; 0x03
     d48:	44 22       	and	r4, r20
     d4a:	55 22       	and	r5, r21
     d4c:	66 22       	and	r6, r22
     d4e:	77 22       	and	r7, r23
     d50:	29 2d       	mov	r18, r9
     d52:	44 16       	cp	r4, r20
     d54:	55 06       	cpc	r5, r21
     d56:	66 06       	cpc	r6, r22
     d58:	77 06       	cpc	r7, r23
     d5a:	09 f0       	breq	.+2      	; 0xd5e <xEventGroupSetBits+0xb2>
     d5c:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     d5e:	22 23       	and	r18, r18
     d60:	71 f0       	breq	.+28     	; 0xd7e <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     d62:	b0 ff       	sbrs	r27, 0
     d64:	04 c0       	rjmp	.+8      	; 0xd6e <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     d66:	c4 2a       	or	r12, r20
     d68:	d5 2a       	or	r13, r21
     d6a:	e6 2a       	or	r14, r22
     d6c:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     d6e:	48 81       	ld	r20, Y
     d70:	59 81       	ldd	r21, Y+1	; 0x01
     d72:	6a 81       	ldd	r22, Y+2	; 0x02
     d74:	7b 81       	ldd	r23, Y+3	; 0x03
     d76:	72 60       	ori	r23, 0x02	; 2
     d78:	cf 01       	movw	r24, r30
     d7a:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <vTaskRemoveFromUnorderedEventList>
     d7e:	ea 2d       	mov	r30, r10
     d80:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     d82:	0e 17       	cp	r16, r30
     d84:	1f 07       	cpc	r17, r31
     d86:	11 f6       	brne	.-124    	; 0xd0c <xEventGroupSetBits+0x60>
     d88:	03 c0       	rjmp	.+6      	; 0xd90 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     d8a:	c1 2c       	mov	r12, r1
     d8c:	d1 2c       	mov	r13, r1
     d8e:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     d90:	c0 94       	com	r12
     d92:	d0 94       	com	r13
     d94:	e0 94       	com	r14
     d96:	f0 94       	com	r15
     d98:	88 81       	ld	r24, Y
     d9a:	99 81       	ldd	r25, Y+1	; 0x01
     d9c:	aa 81       	ldd	r26, Y+2	; 0x02
     d9e:	bb 81       	ldd	r27, Y+3	; 0x03
     da0:	c8 22       	and	r12, r24
     da2:	d9 22       	and	r13, r25
     da4:	ea 22       	and	r14, r26
     da6:	fb 22       	and	r15, r27
     da8:	c8 82       	st	Y, r12
     daa:	d9 82       	std	Y+1, r13	; 0x01
     dac:	ea 82       	std	Y+2, r14	; 0x02
     dae:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     db0:	0e 94 b7 13 	call	0x276e	; 0x276e <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     db4:	68 81       	ld	r22, Y
     db6:	79 81       	ldd	r23, Y+1	; 0x01
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	9b 81       	ldd	r25, Y+3	; 0x03
}
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	df 90       	pop	r13
     dca:	cf 90       	pop	r12
     dcc:	bf 90       	pop	r11
     dce:	af 90       	pop	r10
     dd0:	9f 90       	pop	r9
     dd2:	8f 90       	pop	r8
     dd4:	7f 90       	pop	r7
     dd6:	6f 90       	pop	r6
     dd8:	5f 90       	pop	r5
     dda:	4f 90       	pop	r4
     ddc:	08 95       	ret

00000dde <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     de4:	e0 ef       	ldi	r30, 0xF0	; 240
     de6:	f7 e0       	ldi	r31, 0x07	; 7
     de8:	01 c0       	rjmp	.+2      	; 0xdec <prvInsertBlockIntoFreeList+0xe>
     dea:	f9 01       	movw	r30, r18
     dec:	20 81       	ld	r18, Z
     dee:	31 81       	ldd	r19, Z+1	; 0x01
     df0:	2a 17       	cp	r18, r26
     df2:	3b 07       	cpc	r19, r27
     df4:	d0 f3       	brcs	.-12     	; 0xdea <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     df6:	82 81       	ldd	r24, Z+2	; 0x02
     df8:	93 81       	ldd	r25, Z+3	; 0x03
     dfa:	af 01       	movw	r20, r30
     dfc:	48 0f       	add	r20, r24
     dfe:	59 1f       	adc	r21, r25
     e00:	a4 17       	cp	r26, r20
     e02:	b5 07       	cpc	r27, r21
     e04:	49 f4       	brne	.+18     	; 0xe18 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     e06:	12 96       	adiw	r26, 0x02	; 2
     e08:	4d 91       	ld	r20, X+
     e0a:	5c 91       	ld	r21, X
     e0c:	13 97       	sbiw	r26, 0x03	; 3
     e0e:	84 0f       	add	r24, r20
     e10:	95 1f       	adc	r25, r21
     e12:	93 83       	std	Z+3, r25	; 0x03
     e14:	82 83       	std	Z+2, r24	; 0x02
     e16:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     e18:	12 96       	adiw	r26, 0x02	; 2
     e1a:	8d 91       	ld	r24, X+
     e1c:	9c 91       	ld	r25, X
     e1e:	13 97       	sbiw	r26, 0x03	; 3
     e20:	ed 01       	movw	r28, r26
     e22:	c8 0f       	add	r28, r24
     e24:	d9 1f       	adc	r29, r25
     e26:	2c 17       	cp	r18, r28
     e28:	3d 07       	cpc	r19, r29
     e2a:	d9 f4       	brne	.+54     	; 0xe62 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     e2c:	20 91 ee 07 	lds	r18, 0x07EE	; 0x8007ee <pxEnd>
     e30:	30 91 ef 07 	lds	r19, 0x07EF	; 0x8007ef <pxEnd+0x1>
     e34:	c2 17       	cp	r28, r18
     e36:	d3 07       	cpc	r29, r19
     e38:	81 f0       	breq	.+32     	; 0xe5a <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     e3a:	2a 81       	ldd	r18, Y+2	; 0x02
     e3c:	3b 81       	ldd	r19, Y+3	; 0x03
     e3e:	82 0f       	add	r24, r18
     e40:	93 1f       	adc	r25, r19
     e42:	13 96       	adiw	r26, 0x03	; 3
     e44:	9c 93       	st	X, r25
     e46:	8e 93       	st	-X, r24
     e48:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     e4a:	c0 81       	ld	r28, Z
     e4c:	d1 81       	ldd	r29, Z+1	; 0x01
     e4e:	88 81       	ld	r24, Y
     e50:	99 81       	ldd	r25, Y+1	; 0x01
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	9c 93       	st	X, r25
     e56:	8e 93       	st	-X, r24
     e58:	07 c0       	rjmp	.+14     	; 0xe68 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     e5a:	11 96       	adiw	r26, 0x01	; 1
     e5c:	dc 93       	st	X, r29
     e5e:	ce 93       	st	-X, r28
     e60:	03 c0       	rjmp	.+6      	; 0xe68 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     e62:	11 96       	adiw	r26, 0x01	; 1
     e64:	3c 93       	st	X, r19
     e66:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     e68:	ae 17       	cp	r26, r30
     e6a:	bf 07       	cpc	r27, r31
     e6c:	11 f0       	breq	.+4      	; 0xe72 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     e6e:	b1 83       	std	Z+1, r27	; 0x01
     e70:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	08 95       	ret

00000e78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     e78:	cf 92       	push	r12
     e7a:	df 92       	push	r13
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
     e8a:	0e 94 ce 12 	call	0x259c	; 0x259c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     e8e:	80 91 ee 07 	lds	r24, 0x07EE	; 0x8007ee <pxEnd>
     e92:	90 91 ef 07 	lds	r25, 0x07EF	; 0x8007ef <pxEnd+0x1>
     e96:	89 2b       	or	r24, r25
     e98:	41 f5       	brne	.+80     	; 0xeea <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     e9a:	e0 ef       	ldi	r30, 0xF0	; 240
     e9c:	f7 e0       	ldi	r31, 0x07	; 7
     e9e:	a4 ef       	ldi	r26, 0xF4	; 244
     ea0:	b7 e0       	ldi	r27, 0x07	; 7
     ea2:	b1 83       	std	Z+1, r27	; 0x01
     ea4:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
     ea6:	13 82       	std	Z+3, r1	; 0x03
     ea8:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     eaa:	e0 e9       	ldi	r30, 0x90	; 144
     eac:	f7 e1       	ldi	r31, 0x17	; 23
     eae:	f0 93 ef 07 	sts	0x07EF, r31	; 0x8007ef <pxEnd+0x1>
     eb2:	e0 93 ee 07 	sts	0x07EE, r30	; 0x8007ee <pxEnd>
	pxEnd->xBlockSize = 0;
     eb6:	13 82       	std	Z+3, r1	; 0x03
     eb8:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     eba:	11 82       	std	Z+1, r1	; 0x01
     ebc:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     ebe:	8c e9       	ldi	r24, 0x9C	; 156
     ec0:	9f e0       	ldi	r25, 0x0F	; 15
     ec2:	13 96       	adiw	r26, 0x03	; 3
     ec4:	9c 93       	st	X, r25
     ec6:	8e 93       	st	-X, r24
     ec8:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     eca:	ed 93       	st	X+, r30
     ecc:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     ece:	90 93 eb 07 	sts	0x07EB, r25	; 0x8007eb <xMinimumEverFreeBytesRemaining+0x1>
     ed2:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     ed6:	90 93 ed 07 	sts	0x07ED, r25	; 0x8007ed <xFreeBytesRemaining+0x1>
     eda:	80 93 ec 07 	sts	0x07EC, r24	; 0x8007ec <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e8       	ldi	r25, 0x80	; 128
     ee2:	90 93 e9 07 	sts	0x07E9, r25	; 0x8007e9 <xBlockAllocatedBit+0x1>
     ee6:	80 93 e8 07 	sts	0x07E8, r24	; 0x8007e8 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     eea:	e0 90 e8 07 	lds	r14, 0x07E8	; 0x8007e8 <xBlockAllocatedBit>
     eee:	f0 90 e9 07 	lds	r15, 0x07E9	; 0x8007e9 <xBlockAllocatedBit+0x1>
     ef2:	c7 01       	movw	r24, r14
     ef4:	8c 23       	and	r24, r28
     ef6:	9d 23       	and	r25, r29
     ef8:	89 2b       	or	r24, r25
     efa:	09 f0       	breq	.+2      	; 0xefe <pvPortMalloc+0x86>
     efc:	66 c0       	rjmp	.+204    	; 0xfca <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     efe:	20 97       	sbiw	r28, 0x00	; 0
     f00:	09 f4       	brne	.+2      	; 0xf04 <pvPortMalloc+0x8c>
     f02:	66 c0       	rjmp	.+204    	; 0xfd0 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
     f04:	ae 01       	movw	r20, r28
     f06:	4c 5f       	subi	r20, 0xFC	; 252
     f08:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     f0a:	09 f4       	brne	.+2      	; 0xf0e <pvPortMalloc+0x96>
     f0c:	5e c0       	rjmp	.+188    	; 0xfca <pvPortMalloc+0x152>
     f0e:	00 91 ec 07 	lds	r16, 0x07EC	; 0x8007ec <xFreeBytesRemaining>
     f12:	10 91 ed 07 	lds	r17, 0x07ED	; 0x8007ed <xFreeBytesRemaining+0x1>
     f16:	04 17       	cp	r16, r20
     f18:	15 07       	cpc	r17, r21
     f1a:	08 f4       	brcc	.+2      	; 0xf1e <pvPortMalloc+0xa6>
     f1c:	56 c0       	rjmp	.+172    	; 0xfca <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
     f1e:	c0 91 f0 07 	lds	r28, 0x07F0	; 0x8007f0 <xStart>
     f22:	d0 91 f1 07 	lds	r29, 0x07F1	; 0x8007f1 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     f26:	e0 ef       	ldi	r30, 0xF0	; 240
     f28:	f7 e0       	ldi	r31, 0x07	; 7
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <pvPortMalloc+0xb8>
     f2c:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
     f2e:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     f30:	2a 81       	ldd	r18, Y+2	; 0x02
     f32:	3b 81       	ldd	r19, Y+3	; 0x03
     f34:	24 17       	cp	r18, r20
     f36:	35 07       	cpc	r19, r21
     f38:	28 f4       	brcc	.+10     	; 0xf44 <pvPortMalloc+0xcc>
     f3a:	28 81       	ld	r18, Y
     f3c:	39 81       	ldd	r19, Y+1	; 0x01
     f3e:	21 15       	cp	r18, r1
     f40:	31 05       	cpc	r19, r1
     f42:	a1 f7       	brne	.-24     	; 0xf2c <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     f44:	80 91 ee 07 	lds	r24, 0x07EE	; 0x8007ee <pxEnd>
     f48:	90 91 ef 07 	lds	r25, 0x07EF	; 0x8007ef <pxEnd+0x1>
     f4c:	c8 17       	cp	r28, r24
     f4e:	d9 07       	cpc	r29, r25
     f50:	e1 f1       	breq	.+120    	; 0xfca <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     f52:	c0 80       	ld	r12, Z
     f54:	d1 80       	ldd	r13, Z+1	; 0x01
     f56:	84 e0       	ldi	r24, 0x04	; 4
     f58:	c8 0e       	add	r12, r24
     f5a:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     f5c:	88 81       	ld	r24, Y
     f5e:	99 81       	ldd	r25, Y+1	; 0x01
     f60:	91 83       	std	Z+1, r25	; 0x01
     f62:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     f64:	2a 81       	ldd	r18, Y+2	; 0x02
     f66:	3b 81       	ldd	r19, Y+3	; 0x03
     f68:	24 1b       	sub	r18, r20
     f6a:	35 0b       	sbc	r19, r21
     f6c:	29 30       	cpi	r18, 0x09	; 9
     f6e:	31 05       	cpc	r19, r1
     f70:	48 f0       	brcs	.+18     	; 0xf84 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     f72:	ce 01       	movw	r24, r28
     f74:	84 0f       	add	r24, r20
     f76:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     f78:	fc 01       	movw	r30, r24
     f7a:	33 83       	std	Z+3, r19	; 0x03
     f7c:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
     f7e:	5b 83       	std	Y+3, r21	; 0x03
     f80:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     f82:	2d df       	rcall	.-422    	; 0xdde <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	9b 81       	ldd	r25, Y+3	; 0x03
     f88:	08 1b       	sub	r16, r24
     f8a:	19 0b       	sbc	r17, r25
     f8c:	10 93 ed 07 	sts	0x07ED, r17	; 0x8007ed <xFreeBytesRemaining+0x1>
     f90:	00 93 ec 07 	sts	0x07EC, r16	; 0x8007ec <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     f94:	20 91 ea 07 	lds	r18, 0x07EA	; 0x8007ea <xMinimumEverFreeBytesRemaining>
     f98:	30 91 eb 07 	lds	r19, 0x07EB	; 0x8007eb <xMinimumEverFreeBytesRemaining+0x1>
     f9c:	02 17       	cp	r16, r18
     f9e:	13 07       	cpc	r17, r19
     fa0:	20 f4       	brcc	.+8      	; 0xfaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     fa2:	10 93 eb 07 	sts	0x07EB, r17	; 0x8007eb <xMinimumEverFreeBytesRemaining+0x1>
     fa6:	00 93 ea 07 	sts	0x07EA, r16	; 0x8007ea <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     faa:	e8 2a       	or	r14, r24
     fac:	f9 2a       	or	r15, r25
     fae:	fb 82       	std	Y+3, r15	; 0x03
     fb0:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
     fb2:	19 82       	std	Y+1, r1	; 0x01
     fb4:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     fb6:	0e 94 b7 13 	call	0x276e	; 0x276e <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     fba:	c1 14       	cp	r12, r1
     fbc:	d1 04       	cpc	r13, r1
     fbe:	59 f4       	brne	.+22     	; 0xfd6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     fc0:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <vApplicationMallocFailedHook>
     fc4:	c1 2c       	mov	r12, r1
     fc6:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
     fc8:	06 c0       	rjmp	.+12     	; 0xfd6 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     fca:	0e 94 b7 13 	call	0x276e	; 0x276e <xTaskResumeAll>
     fce:	f8 cf       	rjmp	.-16     	; 0xfc0 <pvPortMalloc+0x148>
     fd0:	0e 94 b7 13 	call	0x276e	; 0x276e <xTaskResumeAll>
     fd4:	f5 cf       	rjmp	.-22     	; 0xfc0 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
     fd6:	c6 01       	movw	r24, r12
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	ff 90       	pop	r15
     fe2:	ef 90       	pop	r14
     fe4:	df 90       	pop	r13
     fe6:	cf 90       	pop	r12
     fe8:	08 95       	ret

00000fea <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	51 f1       	breq	.+84     	; 0x1046 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     ff2:	fc 01       	movw	r30, r24
     ff4:	34 97       	sbiw	r30, 0x04	; 4
     ff6:	22 81       	ldd	r18, Z+2	; 0x02
     ff8:	33 81       	ldd	r19, Z+3	; 0x03
     ffa:	40 91 e8 07 	lds	r20, 0x07E8	; 0x8007e8 <xBlockAllocatedBit>
     ffe:	50 91 e9 07 	lds	r21, 0x07E9	; 0x8007e9 <xBlockAllocatedBit+0x1>
    1002:	b9 01       	movw	r22, r18
    1004:	64 23       	and	r22, r20
    1006:	75 23       	and	r23, r21
    1008:	67 2b       	or	r22, r23
    100a:	e9 f0       	breq	.+58     	; 0x1046 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    100c:	60 81       	ld	r22, Z
    100e:	71 81       	ldd	r23, Z+1	; 0x01
    1010:	67 2b       	or	r22, r23
    1012:	c9 f4       	brne	.+50     	; 0x1046 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1014:	ef 01       	movw	r28, r30
    1016:	40 95       	com	r20
    1018:	50 95       	com	r21
    101a:	24 23       	and	r18, r20
    101c:	35 23       	and	r19, r21
    101e:	33 83       	std	Z+3, r19	; 0x03
    1020:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    1022:	0e 94 ce 12 	call	0x259c	; 0x259c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    1026:	20 91 ec 07 	lds	r18, 0x07EC	; 0x8007ec <xFreeBytesRemaining>
    102a:	30 91 ed 07 	lds	r19, 0x07ED	; 0x8007ed <xFreeBytesRemaining+0x1>
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	9b 81       	ldd	r25, Y+3	; 0x03
    1032:	82 0f       	add	r24, r18
    1034:	93 1f       	adc	r25, r19
    1036:	90 93 ed 07 	sts	0x07ED, r25	; 0x8007ed <xFreeBytesRemaining+0x1>
    103a:	80 93 ec 07 	sts	0x07EC, r24	; 0x8007ec <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    103e:	ce 01       	movw	r24, r28
    1040:	ce de       	rcall	.-612    	; 0xdde <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    1042:	0e 94 b7 13 	call	0x276e	; 0x276e <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    104c:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    104e:	03 96       	adiw	r24, 0x03	; 3
    1050:	92 83       	std	Z+2, r25	; 0x02
    1052:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1054:	4f ef       	ldi	r20, 0xFF	; 255
    1056:	5f ef       	ldi	r21, 0xFF	; 255
    1058:	ba 01       	movw	r22, r20
    105a:	43 83       	std	Z+3, r20	; 0x03
    105c:	54 83       	std	Z+4, r21	; 0x04
    105e:	65 83       	std	Z+5, r22	; 0x05
    1060:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1062:	90 87       	std	Z+8, r25	; 0x08
    1064:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1066:	92 87       	std	Z+10, r25	; 0x0a
    1068:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    106a:	10 82       	st	Z, r1
    106c:	08 95       	ret

0000106e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    106e:	fc 01       	movw	r30, r24
    1070:	13 86       	std	Z+11, r1	; 0x0b
    1072:	12 86       	std	Z+10, r1	; 0x0a
    1074:	08 95       	ret

00001076 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	9c 01       	movw	r18, r24
    107c:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    107e:	dc 01       	movw	r26, r24
    1080:	11 96       	adiw	r26, 0x01	; 1
    1082:	cd 91       	ld	r28, X+
    1084:	dc 91       	ld	r29, X
    1086:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1088:	d5 83       	std	Z+5, r29	; 0x05
    108a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    108c:	8e 81       	ldd	r24, Y+6	; 0x06
    108e:	9f 81       	ldd	r25, Y+7	; 0x07
    1090:	97 83       	std	Z+7, r25	; 0x07
    1092:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1094:	8e 81       	ldd	r24, Y+6	; 0x06
    1096:	9f 81       	ldd	r25, Y+7	; 0x07
    1098:	dc 01       	movw	r26, r24
    109a:	15 96       	adiw	r26, 0x05	; 5
    109c:	7c 93       	st	X, r23
    109e:	6e 93       	st	-X, r22
    10a0:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    10a2:	7f 83       	std	Y+7, r23	; 0x07
    10a4:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    10a6:	33 87       	std	Z+11, r19	; 0x0b
    10a8:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    10aa:	f9 01       	movw	r30, r18
    10ac:	80 81       	ld	r24, Z
    10ae:	8f 5f       	subi	r24, 0xFF	; 255
    10b0:	80 83       	st	Z, r24
}
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	08 95       	ret

000010b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    10c2:	08 81       	ld	r16, Y
    10c4:	19 81       	ldd	r17, Y+1	; 0x01
    10c6:	2a 81       	ldd	r18, Y+2	; 0x02
    10c8:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    10ca:	0f 3f       	cpi	r16, 0xFF	; 255
    10cc:	4f ef       	ldi	r20, 0xFF	; 255
    10ce:	14 07       	cpc	r17, r20
    10d0:	24 07       	cpc	r18, r20
    10d2:	34 07       	cpc	r19, r20
    10d4:	21 f4       	brne	.+8      	; 0x10de <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    10d6:	fc 01       	movw	r30, r24
    10d8:	a1 85       	ldd	r26, Z+9	; 0x09
    10da:	b2 85       	ldd	r27, Z+10	; 0x0a
    10dc:	11 c0       	rjmp	.+34     	; 0x1100 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    10de:	dc 01       	movw	r26, r24
    10e0:	13 96       	adiw	r26, 0x03	; 3
    10e2:	01 c0       	rjmp	.+2      	; 0x10e6 <vListInsert+0x2e>
    10e4:	df 01       	movw	r26, r30
    10e6:	14 96       	adiw	r26, 0x04	; 4
    10e8:	ed 91       	ld	r30, X+
    10ea:	fc 91       	ld	r31, X
    10ec:	15 97       	sbiw	r26, 0x05	; 5
    10ee:	40 81       	ld	r20, Z
    10f0:	51 81       	ldd	r21, Z+1	; 0x01
    10f2:	62 81       	ldd	r22, Z+2	; 0x02
    10f4:	73 81       	ldd	r23, Z+3	; 0x03
    10f6:	04 17       	cp	r16, r20
    10f8:	15 07       	cpc	r17, r21
    10fa:	26 07       	cpc	r18, r22
    10fc:	37 07       	cpc	r19, r23
    10fe:	90 f7       	brcc	.-28     	; 0x10e4 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1100:	14 96       	adiw	r26, 0x04	; 4
    1102:	ed 91       	ld	r30, X+
    1104:	fc 91       	ld	r31, X
    1106:	15 97       	sbiw	r26, 0x05	; 5
    1108:	fd 83       	std	Y+5, r31	; 0x05
    110a:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    110c:	d7 83       	std	Z+7, r29	; 0x07
    110e:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    1110:	bf 83       	std	Y+7, r27	; 0x07
    1112:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    1114:	15 96       	adiw	r26, 0x05	; 5
    1116:	dc 93       	st	X, r29
    1118:	ce 93       	st	-X, r28
    111a:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    111c:	9b 87       	std	Y+11, r25	; 0x0b
    111e:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1120:	fc 01       	movw	r30, r24
    1122:	20 81       	ld	r18, Z
    1124:	2f 5f       	subi	r18, 0xFF	; 255
    1126:	20 83       	st	Z, r18
}
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	08 95       	ret

00001132 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    1138:	a2 85       	ldd	r26, Z+10	; 0x0a
    113a:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    113c:	c4 81       	ldd	r28, Z+4	; 0x04
    113e:	d5 81       	ldd	r29, Z+5	; 0x05
    1140:	86 81       	ldd	r24, Z+6	; 0x06
    1142:	97 81       	ldd	r25, Z+7	; 0x07
    1144:	9f 83       	std	Y+7, r25	; 0x07
    1146:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1148:	c6 81       	ldd	r28, Z+6	; 0x06
    114a:	d7 81       	ldd	r29, Z+7	; 0x07
    114c:	84 81       	ldd	r24, Z+4	; 0x04
    114e:	95 81       	ldd	r25, Z+5	; 0x05
    1150:	9d 83       	std	Y+5, r25	; 0x05
    1152:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1154:	11 96       	adiw	r26, 0x01	; 1
    1156:	8d 91       	ld	r24, X+
    1158:	9c 91       	ld	r25, X
    115a:	12 97       	sbiw	r26, 0x02	; 2
    115c:	e8 17       	cp	r30, r24
    115e:	f9 07       	cpc	r31, r25
    1160:	31 f4       	brne	.+12     	; 0x116e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1162:	86 81       	ldd	r24, Z+6	; 0x06
    1164:	97 81       	ldd	r25, Z+7	; 0x07
    1166:	12 96       	adiw	r26, 0x02	; 2
    1168:	9c 93       	st	X, r25
    116a:	8e 93       	st	-X, r24
    116c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    116e:	13 86       	std	Z+11, r1	; 0x0b
    1170:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1172:	8c 91       	ld	r24, X
    1174:	81 50       	subi	r24, 0x01	; 1
    1176:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1178:	8c 91       	ld	r24, X
}
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

00001180 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1180:	31 e1       	ldi	r19, 0x11	; 17
    1182:	fc 01       	movw	r30, r24
    1184:	30 83       	st	Z, r19
    1186:	31 97       	sbiw	r30, 0x01	; 1
    1188:	22 e2       	ldi	r18, 0x22	; 34
    118a:	20 83       	st	Z, r18
    118c:	31 97       	sbiw	r30, 0x01	; 1
    118e:	a3 e3       	ldi	r26, 0x33	; 51
    1190:	a0 83       	st	Z, r26
    1192:	31 97       	sbiw	r30, 0x01	; 1
    1194:	60 83       	st	Z, r22
    1196:	31 97       	sbiw	r30, 0x01	; 1
    1198:	70 83       	st	Z, r23
    119a:	31 97       	sbiw	r30, 0x01	; 1
    119c:	10 82       	st	Z, r1
    119e:	31 97       	sbiw	r30, 0x01	; 1
    11a0:	10 82       	st	Z, r1
    11a2:	31 97       	sbiw	r30, 0x01	; 1
    11a4:	60 e8       	ldi	r22, 0x80	; 128
    11a6:	60 83       	st	Z, r22
    11a8:	31 97       	sbiw	r30, 0x01	; 1
    11aa:	10 82       	st	Z, r1
    11ac:	31 97       	sbiw	r30, 0x01	; 1
    11ae:	10 82       	st	Z, r1
    11b0:	31 97       	sbiw	r30, 0x01	; 1
    11b2:	10 82       	st	Z, r1
    11b4:	31 97       	sbiw	r30, 0x01	; 1
    11b6:	62 e0       	ldi	r22, 0x02	; 2
    11b8:	60 83       	st	Z, r22
    11ba:	31 97       	sbiw	r30, 0x01	; 1
    11bc:	63 e0       	ldi	r22, 0x03	; 3
    11be:	60 83       	st	Z, r22
    11c0:	31 97       	sbiw	r30, 0x01	; 1
    11c2:	64 e0       	ldi	r22, 0x04	; 4
    11c4:	60 83       	st	Z, r22
    11c6:	31 97       	sbiw	r30, 0x01	; 1
    11c8:	65 e0       	ldi	r22, 0x05	; 5
    11ca:	60 83       	st	Z, r22
    11cc:	31 97       	sbiw	r30, 0x01	; 1
    11ce:	66 e0       	ldi	r22, 0x06	; 6
    11d0:	60 83       	st	Z, r22
    11d2:	31 97       	sbiw	r30, 0x01	; 1
    11d4:	67 e0       	ldi	r22, 0x07	; 7
    11d6:	60 83       	st	Z, r22
    11d8:	31 97       	sbiw	r30, 0x01	; 1
    11da:	68 e0       	ldi	r22, 0x08	; 8
    11dc:	60 83       	st	Z, r22
    11de:	31 97       	sbiw	r30, 0x01	; 1
    11e0:	69 e0       	ldi	r22, 0x09	; 9
    11e2:	60 83       	st	Z, r22
    11e4:	31 97       	sbiw	r30, 0x01	; 1
    11e6:	60 e1       	ldi	r22, 0x10	; 16
    11e8:	60 83       	st	Z, r22
    11ea:	31 97       	sbiw	r30, 0x01	; 1
    11ec:	30 83       	st	Z, r19
    11ee:	31 97       	sbiw	r30, 0x01	; 1
    11f0:	32 e1       	ldi	r19, 0x12	; 18
    11f2:	30 83       	st	Z, r19
    11f4:	31 97       	sbiw	r30, 0x01	; 1
    11f6:	33 e1       	ldi	r19, 0x13	; 19
    11f8:	30 83       	st	Z, r19
    11fa:	31 97       	sbiw	r30, 0x01	; 1
    11fc:	34 e1       	ldi	r19, 0x14	; 20
    11fe:	30 83       	st	Z, r19
    1200:	31 97       	sbiw	r30, 0x01	; 1
    1202:	35 e1       	ldi	r19, 0x15	; 21
    1204:	30 83       	st	Z, r19
    1206:	31 97       	sbiw	r30, 0x01	; 1
    1208:	36 e1       	ldi	r19, 0x16	; 22
    120a:	30 83       	st	Z, r19
    120c:	31 97       	sbiw	r30, 0x01	; 1
    120e:	37 e1       	ldi	r19, 0x17	; 23
    1210:	30 83       	st	Z, r19
    1212:	31 97       	sbiw	r30, 0x01	; 1
    1214:	38 e1       	ldi	r19, 0x18	; 24
    1216:	30 83       	st	Z, r19
    1218:	31 97       	sbiw	r30, 0x01	; 1
    121a:	39 e1       	ldi	r19, 0x19	; 25
    121c:	30 83       	st	Z, r19
    121e:	31 97       	sbiw	r30, 0x01	; 1
    1220:	30 e2       	ldi	r19, 0x20	; 32
    1222:	30 83       	st	Z, r19
    1224:	31 97       	sbiw	r30, 0x01	; 1
    1226:	31 e2       	ldi	r19, 0x21	; 33
    1228:	30 83       	st	Z, r19
    122a:	31 97       	sbiw	r30, 0x01	; 1
    122c:	20 83       	st	Z, r18
    122e:	31 97       	sbiw	r30, 0x01	; 1
    1230:	23 e2       	ldi	r18, 0x23	; 35
    1232:	20 83       	st	Z, r18
    1234:	31 97       	sbiw	r30, 0x01	; 1
    1236:	40 83       	st	Z, r20
    1238:	31 97       	sbiw	r30, 0x01	; 1
    123a:	50 83       	st	Z, r21
    123c:	31 97       	sbiw	r30, 0x01	; 1
    123e:	26 e2       	ldi	r18, 0x26	; 38
    1240:	20 83       	st	Z, r18
    1242:	31 97       	sbiw	r30, 0x01	; 1
    1244:	27 e2       	ldi	r18, 0x27	; 39
    1246:	20 83       	st	Z, r18
    1248:	31 97       	sbiw	r30, 0x01	; 1
    124a:	28 e2       	ldi	r18, 0x28	; 40
    124c:	20 83       	st	Z, r18
    124e:	31 97       	sbiw	r30, 0x01	; 1
    1250:	29 e2       	ldi	r18, 0x29	; 41
    1252:	20 83       	st	Z, r18
    1254:	31 97       	sbiw	r30, 0x01	; 1
    1256:	20 e3       	ldi	r18, 0x30	; 48
    1258:	20 83       	st	Z, r18
    125a:	31 97       	sbiw	r30, 0x01	; 1
    125c:	21 e3       	ldi	r18, 0x31	; 49
    125e:	20 83       	st	Z, r18
    1260:	89 97       	sbiw	r24, 0x29	; 41
    1262:	08 95       	ret

00001264 <xPortStartScheduler>:
    1264:	a8 95       	wdr
    1266:	90 ec       	ldi	r25, 0xC0	; 192
    1268:	88 e1       	ldi	r24, 0x18	; 24
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	a8 95       	wdr
    1270:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    127a:	a0 91 0e 18 	lds	r26, 0x180E	; 0x80180e <pxCurrentTCB>
    127e:	b0 91 0f 18 	lds	r27, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    1282:	cd 91       	ld	r28, X+
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	dd 91       	ld	r29, X+
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	ff 91       	pop	r31
    128c:	ef 91       	pop	r30
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	bf 91       	pop	r27
    1294:	af 91       	pop	r26
    1296:	9f 91       	pop	r25
    1298:	8f 91       	pop	r24
    129a:	7f 91       	pop	r23
    129c:	6f 91       	pop	r22
    129e:	5f 91       	pop	r21
    12a0:	4f 91       	pop	r20
    12a2:	3f 91       	pop	r19
    12a4:	2f 91       	pop	r18
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	ff 90       	pop	r15
    12ac:	ef 90       	pop	r14
    12ae:	df 90       	pop	r13
    12b0:	cf 90       	pop	r12
    12b2:	bf 90       	pop	r11
    12b4:	af 90       	pop	r10
    12b6:	9f 90       	pop	r9
    12b8:	8f 90       	pop	r8
    12ba:	7f 90       	pop	r7
    12bc:	6f 90       	pop	r6
    12be:	5f 90       	pop	r5
    12c0:	4f 90       	pop	r4
    12c2:	3f 90       	pop	r3
    12c4:	2f 90       	pop	r2
    12c6:	1f 90       	pop	r1
    12c8:	0f 90       	pop	r0
    12ca:	0c be       	out	0x3c, r0	; 60
    12cc:	0f 90       	pop	r0
    12ce:	0b be       	out	0x3b, r0	; 59
    12d0:	0f 90       	pop	r0
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	0f 90       	pop	r0
    12d6:	08 95       	ret
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	08 95       	ret

000012dc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    12dc:	0f 92       	push	r0
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	0f 92       	push	r0
    12e4:	0b b6       	in	r0, 0x3b	; 59
    12e6:	0f 92       	push	r0
    12e8:	0c b6       	in	r0, 0x3c	; 60
    12ea:	0f 92       	push	r0
    12ec:	1f 92       	push	r1
    12ee:	11 24       	eor	r1, r1
    12f0:	2f 92       	push	r2
    12f2:	3f 92       	push	r3
    12f4:	4f 92       	push	r4
    12f6:	5f 92       	push	r5
    12f8:	6f 92       	push	r6
    12fa:	7f 92       	push	r7
    12fc:	8f 92       	push	r8
    12fe:	9f 92       	push	r9
    1300:	af 92       	push	r10
    1302:	bf 92       	push	r11
    1304:	cf 92       	push	r12
    1306:	df 92       	push	r13
    1308:	ef 92       	push	r14
    130a:	ff 92       	push	r15
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
    1310:	2f 93       	push	r18
    1312:	3f 93       	push	r19
    1314:	4f 93       	push	r20
    1316:	5f 93       	push	r21
    1318:	6f 93       	push	r22
    131a:	7f 93       	push	r23
    131c:	8f 93       	push	r24
    131e:	9f 93       	push	r25
    1320:	af 93       	push	r26
    1322:	bf 93       	push	r27
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	ef 93       	push	r30
    132a:	ff 93       	push	r31
    132c:	a0 91 0e 18 	lds	r26, 0x180E	; 0x80180e <pxCurrentTCB>
    1330:	b0 91 0f 18 	lds	r27, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    1334:	0d b6       	in	r0, 0x3d	; 61
    1336:	0d 92       	st	X+, r0
    1338:	0e b6       	in	r0, 0x3e	; 62
    133a:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    133c:	0e 94 aa 14 	call	0x2954	; 0x2954 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1340:	a0 91 0e 18 	lds	r26, 0x180E	; 0x80180e <pxCurrentTCB>
    1344:	b0 91 0f 18 	lds	r27, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    1348:	cd 91       	ld	r28, X+
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	dd 91       	ld	r29, X+
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	ff 91       	pop	r31
    1352:	ef 91       	pop	r30
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	bf 91       	pop	r27
    135a:	af 91       	pop	r26
    135c:	9f 91       	pop	r25
    135e:	8f 91       	pop	r24
    1360:	7f 91       	pop	r23
    1362:	6f 91       	pop	r22
    1364:	5f 91       	pop	r21
    1366:	4f 91       	pop	r20
    1368:	3f 91       	pop	r19
    136a:	2f 91       	pop	r18
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	ff 90       	pop	r15
    1372:	ef 90       	pop	r14
    1374:	df 90       	pop	r13
    1376:	cf 90       	pop	r12
    1378:	bf 90       	pop	r11
    137a:	af 90       	pop	r10
    137c:	9f 90       	pop	r9
    137e:	8f 90       	pop	r8
    1380:	7f 90       	pop	r7
    1382:	6f 90       	pop	r6
    1384:	5f 90       	pop	r5
    1386:	4f 90       	pop	r4
    1388:	3f 90       	pop	r3
    138a:	2f 90       	pop	r2
    138c:	1f 90       	pop	r1
    138e:	0f 90       	pop	r0
    1390:	0c be       	out	0x3c, r0	; 60
    1392:	0f 90       	pop	r0
    1394:	0b be       	out	0x3b, r0	; 59
    1396:	0f 90       	pop	r0
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    139c:	08 95       	ret

0000139e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    139e:	0f 92       	push	r0
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	0f 92       	push	r0
    13a6:	0b b6       	in	r0, 0x3b	; 59
    13a8:	0f 92       	push	r0
    13aa:	0c b6       	in	r0, 0x3c	; 60
    13ac:	0f 92       	push	r0
    13ae:	1f 92       	push	r1
    13b0:	11 24       	eor	r1, r1
    13b2:	2f 92       	push	r2
    13b4:	3f 92       	push	r3
    13b6:	4f 92       	push	r4
    13b8:	5f 92       	push	r5
    13ba:	6f 92       	push	r6
    13bc:	7f 92       	push	r7
    13be:	8f 92       	push	r8
    13c0:	9f 92       	push	r9
    13c2:	af 92       	push	r10
    13c4:	bf 92       	push	r11
    13c6:	cf 92       	push	r12
    13c8:	df 92       	push	r13
    13ca:	ef 92       	push	r14
    13cc:	ff 92       	push	r15
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	2f 93       	push	r18
    13d4:	3f 93       	push	r19
    13d6:	4f 93       	push	r20
    13d8:	5f 93       	push	r21
    13da:	6f 93       	push	r22
    13dc:	7f 93       	push	r23
    13de:	8f 93       	push	r24
    13e0:	9f 93       	push	r25
    13e2:	af 93       	push	r26
    13e4:	bf 93       	push	r27
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	ef 93       	push	r30
    13ec:	ff 93       	push	r31
    13ee:	a0 91 0e 18 	lds	r26, 0x180E	; 0x80180e <pxCurrentTCB>
    13f2:	b0 91 0f 18 	lds	r27, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    13f6:	0d b6       	in	r0, 0x3d	; 61
    13f8:	0d 92       	st	X+, r0
    13fa:	0e b6       	in	r0, 0x3e	; 62
    13fc:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    13fe:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    1400:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <xTaskIncrementTick>
    1404:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1406:	0e 94 aa 14 	call	0x2954	; 0x2954 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    140a:	a0 91 0e 18 	lds	r26, 0x180E	; 0x80180e <pxCurrentTCB>
    140e:	b0 91 0f 18 	lds	r27, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    1412:	cd 91       	ld	r28, X+
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	dd 91       	ld	r29, X+
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	ff 91       	pop	r31
    141c:	ef 91       	pop	r30
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	bf 91       	pop	r27
    1424:	af 91       	pop	r26
    1426:	9f 91       	pop	r25
    1428:	8f 91       	pop	r24
    142a:	7f 91       	pop	r23
    142c:	6f 91       	pop	r22
    142e:	5f 91       	pop	r21
    1430:	4f 91       	pop	r20
    1432:	3f 91       	pop	r19
    1434:	2f 91       	pop	r18
    1436:	1f 91       	pop	r17
    1438:	0f 91       	pop	r16
    143a:	ff 90       	pop	r15
    143c:	ef 90       	pop	r14
    143e:	df 90       	pop	r13
    1440:	cf 90       	pop	r12
    1442:	bf 90       	pop	r11
    1444:	af 90       	pop	r10
    1446:	9f 90       	pop	r9
    1448:	8f 90       	pop	r8
    144a:	7f 90       	pop	r7
    144c:	6f 90       	pop	r6
    144e:	5f 90       	pop	r5
    1450:	4f 90       	pop	r4
    1452:	3f 90       	pop	r3
    1454:	2f 90       	pop	r2
    1456:	1f 90       	pop	r1
    1458:	0f 90       	pop	r0
    145a:	0c be       	out	0x3c, r0	; 60
    145c:	0f 90       	pop	r0
    145e:	0b be       	out	0x3b, r0	; 59
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1466:	08 95       	ret

00001468 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1468:	9a df       	rcall	.-204    	; 0x139e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    146a:	18 95       	reti

0000146c <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	0f 92       	push	r0
    1472:	fc 01       	movw	r30, r24
    1474:	96 8d       	ldd	r25, Z+30	; 0x1e
    1476:	0f 90       	pop	r0
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	91 11       	cpse	r25, r1
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	08 95       	ret

00001482 <prvCopyDataToQueue>:
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	ec 01       	movw	r28, r24
    148c:	04 2f       	mov	r16, r20
    148e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1490:	48 a1       	ldd	r20, Y+32	; 0x20
    1492:	41 11       	cpse	r20, r1
    1494:	0c c0       	rjmp	.+24     	; 0x14ae <prvCopyDataToQueue+0x2c>
    1496:	88 81       	ld	r24, Y
    1498:	99 81       	ldd	r25, Y+1	; 0x01
    149a:	89 2b       	or	r24, r25
    149c:	09 f0       	breq	.+2      	; 0x14a0 <prvCopyDataToQueue+0x1e>
    149e:	42 c0       	rjmp	.+132    	; 0x1524 <prvCopyDataToQueue+0xa2>
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	9d 81       	ldd	r25, Y+5	; 0x05
    14a4:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <xTaskPriorityDisinherit>
    14a8:	1d 82       	std	Y+5, r1	; 0x05
    14aa:	1c 82       	std	Y+4, r1	; 0x04
    14ac:	42 c0       	rjmp	.+132    	; 0x1532 <prvCopyDataToQueue+0xb0>
    14ae:	01 11       	cpse	r16, r1
    14b0:	17 c0       	rjmp	.+46     	; 0x14e0 <prvCopyDataToQueue+0x5e>
    14b2:	50 e0       	ldi	r21, 0x00	; 0
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	9b 81       	ldd	r25, Y+3	; 0x03
    14b8:	0e 94 a1 2c 	call	0x5942	; 0x5942 <memcpy>
    14bc:	28 a1       	ldd	r18, Y+32	; 0x20
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	9b 81       	ldd	r25, Y+3	; 0x03
    14c2:	82 0f       	add	r24, r18
    14c4:	91 1d       	adc	r25, r1
    14c6:	9b 83       	std	Y+3, r25	; 0x03
    14c8:	8a 83       	std	Y+2, r24	; 0x02
    14ca:	2c 81       	ldd	r18, Y+4	; 0x04
    14cc:	3d 81       	ldd	r19, Y+5	; 0x05
    14ce:	82 17       	cp	r24, r18
    14d0:	93 07       	cpc	r25, r19
    14d2:	50 f1       	brcs	.+84     	; 0x1528 <prvCopyDataToQueue+0xa6>
    14d4:	88 81       	ld	r24, Y
    14d6:	99 81       	ldd	r25, Y+1	; 0x01
    14d8:	9b 83       	std	Y+3, r25	; 0x03
    14da:	8a 83       	std	Y+2, r24	; 0x02
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	29 c0       	rjmp	.+82     	; 0x1532 <prvCopyDataToQueue+0xb0>
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	8e 81       	ldd	r24, Y+6	; 0x06
    14e4:	9f 81       	ldd	r25, Y+7	; 0x07
    14e6:	0e 94 a1 2c 	call	0x5942	; 0x5942 <memcpy>
    14ea:	88 a1       	ldd	r24, Y+32	; 0x20
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	91 95       	neg	r25
    14f0:	81 95       	neg	r24
    14f2:	91 09       	sbc	r25, r1
    14f4:	2e 81       	ldd	r18, Y+6	; 0x06
    14f6:	3f 81       	ldd	r19, Y+7	; 0x07
    14f8:	28 0f       	add	r18, r24
    14fa:	39 1f       	adc	r19, r25
    14fc:	3f 83       	std	Y+7, r19	; 0x07
    14fe:	2e 83       	std	Y+6, r18	; 0x06
    1500:	48 81       	ld	r20, Y
    1502:	59 81       	ldd	r21, Y+1	; 0x01
    1504:	24 17       	cp	r18, r20
    1506:	35 07       	cpc	r19, r21
    1508:	30 f4       	brcc	.+12     	; 0x1516 <prvCopyDataToQueue+0x94>
    150a:	2c 81       	ldd	r18, Y+4	; 0x04
    150c:	3d 81       	ldd	r19, Y+5	; 0x05
    150e:	82 0f       	add	r24, r18
    1510:	93 1f       	adc	r25, r19
    1512:	9f 83       	std	Y+7, r25	; 0x07
    1514:	8e 83       	std	Y+6, r24	; 0x06
    1516:	02 30       	cpi	r16, 0x02	; 2
    1518:	49 f4       	brne	.+18     	; 0x152c <prvCopyDataToQueue+0xaa>
    151a:	11 23       	and	r17, r17
    151c:	49 f0       	breq	.+18     	; 0x1530 <prvCopyDataToQueue+0xae>
    151e:	11 50       	subi	r17, 0x01	; 1
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	07 c0       	rjmp	.+14     	; 0x1532 <prvCopyDataToQueue+0xb0>
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <prvCopyDataToQueue+0xb0>
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	03 c0       	rjmp	.+6      	; 0x1532 <prvCopyDataToQueue+0xb0>
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <prvCopyDataToQueue+0xb0>
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	1f 5f       	subi	r17, 0xFF	; 255
    1534:	1e 8f       	std	Y+30, r17	; 0x1e
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	08 95       	ret

00001540 <prvCopyDataFromQueue>:
    1540:	fc 01       	movw	r30, r24
    1542:	40 a1       	ldd	r20, Z+32	; 0x20
    1544:	44 23       	and	r20, r20
    1546:	a9 f0       	breq	.+42     	; 0x1572 <prvCopyDataFromQueue+0x32>
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	26 81       	ldd	r18, Z+6	; 0x06
    154c:	37 81       	ldd	r19, Z+7	; 0x07
    154e:	24 0f       	add	r18, r20
    1550:	35 1f       	adc	r19, r21
    1552:	37 83       	std	Z+7, r19	; 0x07
    1554:	26 83       	std	Z+6, r18	; 0x06
    1556:	84 81       	ldd	r24, Z+4	; 0x04
    1558:	95 81       	ldd	r25, Z+5	; 0x05
    155a:	28 17       	cp	r18, r24
    155c:	39 07       	cpc	r19, r25
    155e:	20 f0       	brcs	.+8      	; 0x1568 <prvCopyDataFromQueue+0x28>
    1560:	80 81       	ld	r24, Z
    1562:	91 81       	ldd	r25, Z+1	; 0x01
    1564:	97 83       	std	Z+7, r25	; 0x07
    1566:	86 83       	std	Z+6, r24	; 0x06
    1568:	cb 01       	movw	r24, r22
    156a:	66 81       	ldd	r22, Z+6	; 0x06
    156c:	77 81       	ldd	r23, Z+7	; 0x07
    156e:	0c 94 a1 2c 	jmp	0x5942	; 0x5942 <memcpy>
    1572:	08 95       	ret

00001574 <prvUnlockQueue>:
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	8c 01       	movw	r16, r24
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	0f 92       	push	r0
    1586:	fc 01       	movw	r30, r24
    1588:	c2 a1       	ldd	r28, Z+34	; 0x22
    158a:	1c 16       	cp	r1, r28
    158c:	ac f4       	brge	.+42     	; 0x15b8 <prvUnlockQueue+0x44>
    158e:	83 89       	ldd	r24, Z+19	; 0x13
    1590:	81 11       	cpse	r24, r1
    1592:	06 c0       	rjmp	.+12     	; 0x15a0 <prvUnlockQueue+0x2c>
    1594:	11 c0       	rjmp	.+34     	; 0x15b8 <prvUnlockQueue+0x44>
    1596:	f8 01       	movw	r30, r16
    1598:	83 89       	ldd	r24, Z+19	; 0x13
    159a:	81 11       	cpse	r24, r1
    159c:	05 c0       	rjmp	.+10     	; 0x15a8 <prvUnlockQueue+0x34>
    159e:	0c c0       	rjmp	.+24     	; 0x15b8 <prvUnlockQueue+0x44>
    15a0:	78 01       	movw	r14, r16
    15a2:	f3 e1       	ldi	r31, 0x13	; 19
    15a4:	ef 0e       	add	r14, r31
    15a6:	f1 1c       	adc	r15, r1
    15a8:	c7 01       	movw	r24, r14
    15aa:	0e 94 84 15 	call	0x2b08	; 0x2b08 <xTaskRemoveFromEventList>
    15ae:	81 11       	cpse	r24, r1
    15b0:	0e 94 76 16 	call	0x2cec	; 0x2cec <vTaskMissedYield>
    15b4:	c1 50       	subi	r28, 0x01	; 1
    15b6:	79 f7       	brne	.-34     	; 0x1596 <prvUnlockQueue+0x22>
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	f8 01       	movw	r30, r16
    15bc:	82 a3       	std	Z+34, r24	; 0x22
    15be:	0f 90       	pop	r0
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	0f 92       	push	r0
    15c8:	c1 a1       	ldd	r28, Z+33	; 0x21
    15ca:	1c 16       	cp	r1, r28
    15cc:	ac f4       	brge	.+42     	; 0x15f8 <prvUnlockQueue+0x84>
    15ce:	80 85       	ldd	r24, Z+8	; 0x08
    15d0:	81 11       	cpse	r24, r1
    15d2:	06 c0       	rjmp	.+12     	; 0x15e0 <prvUnlockQueue+0x6c>
    15d4:	11 c0       	rjmp	.+34     	; 0x15f8 <prvUnlockQueue+0x84>
    15d6:	f8 01       	movw	r30, r16
    15d8:	80 85       	ldd	r24, Z+8	; 0x08
    15da:	81 11       	cpse	r24, r1
    15dc:	05 c0       	rjmp	.+10     	; 0x15e8 <prvUnlockQueue+0x74>
    15de:	0c c0       	rjmp	.+24     	; 0x15f8 <prvUnlockQueue+0x84>
    15e0:	78 01       	movw	r14, r16
    15e2:	f8 e0       	ldi	r31, 0x08	; 8
    15e4:	ef 0e       	add	r14, r31
    15e6:	f1 1c       	adc	r15, r1
    15e8:	c7 01       	movw	r24, r14
    15ea:	0e 94 84 15 	call	0x2b08	; 0x2b08 <xTaskRemoveFromEventList>
    15ee:	81 11       	cpse	r24, r1
    15f0:	0e 94 76 16 	call	0x2cec	; 0x2cec <vTaskMissedYield>
    15f4:	c1 50       	subi	r28, 0x01	; 1
    15f6:	79 f7       	brne	.-34     	; 0x15d6 <prvUnlockQueue+0x62>
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	f8 01       	movw	r30, r16
    15fc:	81 a3       	std	Z+33, r24	; 0x21
    15fe:	0f 90       	pop	r0
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	08 95       	ret

0000160e <xQueueGenericReset>:
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	ec 01       	movw	r28, r24
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	0f 92       	push	r0
    161a:	e8 81       	ld	r30, Y
    161c:	f9 81       	ldd	r31, Y+1	; 0x01
    161e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1620:	28 a1       	ldd	r18, Y+32	; 0x20
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	82 9f       	mul	r24, r18
    1628:	a0 01       	movw	r20, r0
    162a:	83 9f       	mul	r24, r19
    162c:	50 0d       	add	r21, r0
    162e:	92 9f       	mul	r25, r18
    1630:	50 0d       	add	r21, r0
    1632:	11 24       	eor	r1, r1
    1634:	4e 0f       	add	r20, r30
    1636:	5f 1f       	adc	r21, r31
    1638:	5d 83       	std	Y+5, r21	; 0x05
    163a:	4c 83       	std	Y+4, r20	; 0x04
    163c:	1e 8e       	std	Y+30, r1	; 0x1e
    163e:	fb 83       	std	Y+3, r31	; 0x03
    1640:	ea 83       	std	Y+2, r30	; 0x02
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	82 9f       	mul	r24, r18
    1646:	a0 01       	movw	r20, r0
    1648:	83 9f       	mul	r24, r19
    164a:	50 0d       	add	r21, r0
    164c:	92 9f       	mul	r25, r18
    164e:	50 0d       	add	r21, r0
    1650:	11 24       	eor	r1, r1
    1652:	cf 01       	movw	r24, r30
    1654:	84 0f       	add	r24, r20
    1656:	95 1f       	adc	r25, r21
    1658:	9f 83       	std	Y+7, r25	; 0x07
    165a:	8e 83       	std	Y+6, r24	; 0x06
    165c:	8f ef       	ldi	r24, 0xFF	; 255
    165e:	89 a3       	std	Y+33, r24	; 0x21
    1660:	8a a3       	std	Y+34, r24	; 0x22
    1662:	61 11       	cpse	r22, r1
    1664:	0b c0       	rjmp	.+22     	; 0x167c <xQueueGenericReset+0x6e>
    1666:	88 85       	ldd	r24, Y+8	; 0x08
    1668:	88 23       	and	r24, r24
    166a:	71 f0       	breq	.+28     	; 0x1688 <xQueueGenericReset+0x7a>
    166c:	ce 01       	movw	r24, r28
    166e:	08 96       	adiw	r24, 0x08	; 8
    1670:	0e 94 84 15 	call	0x2b08	; 0x2b08 <xTaskRemoveFromEventList>
    1674:	88 23       	and	r24, r24
    1676:	41 f0       	breq	.+16     	; 0x1688 <xQueueGenericReset+0x7a>
    1678:	31 de       	rcall	.-926    	; 0x12dc <vPortYield>
    167a:	06 c0       	rjmp	.+12     	; 0x1688 <xQueueGenericReset+0x7a>
    167c:	ce 01       	movw	r24, r28
    167e:	08 96       	adiw	r24, 0x08	; 8
    1680:	e5 dc       	rcall	.-1590   	; 0x104c <vListInitialise>
    1682:	ce 01       	movw	r24, r28
    1684:	43 96       	adiw	r24, 0x13	; 19
    1686:	e2 dc       	rcall	.-1596   	; 0x104c <vListInitialise>
    1688:	0f 90       	pop	r0
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <xQueueGenericCreate>:
    1694:	ff 92       	push	r15
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	08 2f       	mov	r16, r24
    16a0:	16 2f       	mov	r17, r22
    16a2:	f4 2e       	mov	r15, r20
    16a4:	66 23       	and	r22, r22
    16a6:	b9 f0       	breq	.+46     	; 0x16d6 <xQueueGenericCreate+0x42>
    16a8:	86 9f       	mul	r24, r22
    16aa:	c0 01       	movw	r24, r0
    16ac:	11 24       	eor	r1, r1
    16ae:	85 96       	adiw	r24, 0x25	; 37
    16b0:	e3 db       	rcall	.-2106   	; 0xe78 <pvPortMalloc>
    16b2:	ec 01       	movw	r28, r24
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	41 f4       	brne	.+16     	; 0x16c8 <xQueueGenericCreate+0x34>
    16b8:	14 c0       	rjmp	.+40     	; 0x16e2 <xQueueGenericCreate+0x4e>
    16ba:	0f 8f       	std	Y+31, r16	; 0x1f
    16bc:	18 a3       	std	Y+32, r17	; 0x20
    16be:	61 e0       	ldi	r22, 0x01	; 1
    16c0:	ce 01       	movw	r24, r28
    16c2:	a5 df       	rcall	.-182    	; 0x160e <xQueueGenericReset>
    16c4:	fc a2       	std	Y+36, r15	; 0x24
    16c6:	0d c0       	rjmp	.+26     	; 0x16e2 <xQueueGenericCreate+0x4e>
    16c8:	85 96       	adiw	r24, 0x25	; 37
    16ca:	99 83       	std	Y+1, r25	; 0x01
    16cc:	88 83       	st	Y, r24
    16ce:	f5 cf       	rjmp	.-22     	; 0x16ba <xQueueGenericCreate+0x26>
    16d0:	d9 83       	std	Y+1, r29	; 0x01
    16d2:	c8 83       	st	Y, r28
    16d4:	f2 cf       	rjmp	.-28     	; 0x16ba <xQueueGenericCreate+0x26>
    16d6:	85 e2       	ldi	r24, 0x25	; 37
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	ce db       	rcall	.-2148   	; 0xe78 <pvPortMalloc>
    16dc:	ec 01       	movw	r28, r24
    16de:	89 2b       	or	r24, r25
    16e0:	b9 f7       	brne	.-18     	; 0x16d0 <xQueueGenericCreate+0x3c>
    16e2:	ce 01       	movw	r24, r28
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	ff 90       	pop	r15
    16ee:	08 95       	ret

000016f0 <xQueueGenericSend>:
    16f0:	9f 92       	push	r9
    16f2:	af 92       	push	r10
    16f4:	bf 92       	push	r11
    16f6:	cf 92       	push	r12
    16f8:	df 92       	push	r13
    16fa:	ef 92       	push	r14
    16fc:	ff 92       	push	r15
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	29 97       	sbiw	r28, 0x09	; 9
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	7c 01       	movw	r14, r24
    1718:	5b 01       	movw	r10, r22
    171a:	2e 83       	std	Y+6, r18	; 0x06
    171c:	3f 83       	std	Y+7, r19	; 0x07
    171e:	48 87       	std	Y+8, r20	; 0x08
    1720:	59 87       	std	Y+9, r21	; 0x09
    1722:	10 e0       	ldi	r17, 0x00	; 0
    1724:	99 24       	eor	r9, r9
    1726:	93 94       	inc	r9
    1728:	6c 01       	movw	r12, r24
    172a:	88 e0       	ldi	r24, 0x08	; 8
    172c:	c8 0e       	add	r12, r24
    172e:	d1 1c       	adc	r13, r1
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	0f 92       	push	r0
    1736:	f7 01       	movw	r30, r14
    1738:	96 8d       	ldd	r25, Z+30	; 0x1e
    173a:	87 8d       	ldd	r24, Z+31	; 0x1f
    173c:	98 17       	cp	r25, r24
    173e:	10 f0       	brcs	.+4      	; 0x1744 <xQueueGenericSend+0x54>
    1740:	02 30       	cpi	r16, 0x02	; 2
    1742:	b1 f4       	brne	.+44     	; 0x1770 <xQueueGenericSend+0x80>
    1744:	40 2f       	mov	r20, r16
    1746:	b5 01       	movw	r22, r10
    1748:	c7 01       	movw	r24, r14
    174a:	9b de       	rcall	.-714    	; 0x1482 <prvCopyDataToQueue>
    174c:	f7 01       	movw	r30, r14
    174e:	93 89       	ldd	r25, Z+19	; 0x13
    1750:	99 23       	and	r25, r25
    1752:	41 f0       	breq	.+16     	; 0x1764 <xQueueGenericSend+0x74>
    1754:	c7 01       	movw	r24, r14
    1756:	43 96       	adiw	r24, 0x13	; 19
    1758:	0e 94 84 15 	call	0x2b08	; 0x2b08 <xTaskRemoveFromEventList>
    175c:	88 23       	and	r24, r24
    175e:	21 f0       	breq	.+8      	; 0x1768 <xQueueGenericSend+0x78>
    1760:	bd dd       	rcall	.-1158   	; 0x12dc <vPortYield>
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <xQueueGenericSend+0x78>
    1764:	81 11       	cpse	r24, r1
    1766:	ba dd       	rcall	.-1164   	; 0x12dc <vPortYield>
    1768:	0f 90       	pop	r0
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	4e c0       	rjmp	.+156    	; 0x180c <xQueueGenericSend+0x11c>
    1770:	8e 81       	ldd	r24, Y+6	; 0x06
    1772:	9f 81       	ldd	r25, Y+7	; 0x07
    1774:	a8 85       	ldd	r26, Y+8	; 0x08
    1776:	b9 85       	ldd	r27, Y+9	; 0x09
    1778:	89 2b       	or	r24, r25
    177a:	8a 2b       	or	r24, r26
    177c:	8b 2b       	or	r24, r27
    177e:	21 f4       	brne	.+8      	; 0x1788 <xQueueGenericSend+0x98>
    1780:	0f 90       	pop	r0
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	42 c0       	rjmp	.+132    	; 0x180c <xQueueGenericSend+0x11c>
    1788:	11 11       	cpse	r17, r1
    178a:	05 c0       	rjmp	.+10     	; 0x1796 <xQueueGenericSend+0xa6>
    178c:	ce 01       	movw	r24, r28
    178e:	01 96       	adiw	r24, 0x01	; 1
    1790:	0e 94 10 16 	call	0x2c20	; 0x2c20 <vTaskInternalSetTimeOutState>
    1794:	19 2d       	mov	r17, r9
    1796:	0f 90       	pop	r0
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	00 d7       	rcall	.+3584   	; 0x259c <vTaskSuspendAll>
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	0f 92       	push	r0
    17a2:	f7 01       	movw	r30, r14
    17a4:	81 a1       	ldd	r24, Z+33	; 0x21
    17a6:	8f 3f       	cpi	r24, 0xFF	; 255
    17a8:	09 f4       	brne	.+2      	; 0x17ac <xQueueGenericSend+0xbc>
    17aa:	11 a2       	std	Z+33, r1	; 0x21
    17ac:	f7 01       	movw	r30, r14
    17ae:	82 a1       	ldd	r24, Z+34	; 0x22
    17b0:	8f 3f       	cpi	r24, 0xFF	; 255
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <xQueueGenericSend+0xc6>
    17b4:	12 a2       	std	Z+34, r1	; 0x22
    17b6:	0f 90       	pop	r0
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	be 01       	movw	r22, r28
    17bc:	6a 5f       	subi	r22, 0xFA	; 250
    17be:	7f 4f       	sbci	r23, 0xFF	; 255
    17c0:	ce 01       	movw	r24, r28
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	0e 94 21 16 	call	0x2c42	; 0x2c42 <xTaskCheckForTimeOut>
    17c8:	81 11       	cpse	r24, r1
    17ca:	1c c0       	rjmp	.+56     	; 0x1804 <xQueueGenericSend+0x114>
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	0f 92       	push	r0
    17d2:	f7 01       	movw	r30, r14
    17d4:	96 8d       	ldd	r25, Z+30	; 0x1e
    17d6:	87 8d       	ldd	r24, Z+31	; 0x1f
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	98 13       	cpse	r25, r24
    17de:	0e c0       	rjmp	.+28     	; 0x17fc <xQueueGenericSend+0x10c>
    17e0:	4e 81       	ldd	r20, Y+6	; 0x06
    17e2:	5f 81       	ldd	r21, Y+7	; 0x07
    17e4:	68 85       	ldd	r22, Y+8	; 0x08
    17e6:	79 85       	ldd	r23, Y+9	; 0x09
    17e8:	c6 01       	movw	r24, r12
    17ea:	0e 94 29 15 	call	0x2a52	; 0x2a52 <vTaskPlaceOnEventList>
    17ee:	c7 01       	movw	r24, r14
    17f0:	c1 de       	rcall	.-638    	; 0x1574 <prvUnlockQueue>
    17f2:	bd d7       	rcall	.+3962   	; 0x276e <xTaskResumeAll>
    17f4:	81 11       	cpse	r24, r1
    17f6:	9c cf       	rjmp	.-200    	; 0x1730 <xQueueGenericSend+0x40>
    17f8:	71 dd       	rcall	.-1310   	; 0x12dc <vPortYield>
    17fa:	9a cf       	rjmp	.-204    	; 0x1730 <xQueueGenericSend+0x40>
    17fc:	c7 01       	movw	r24, r14
    17fe:	ba de       	rcall	.-652    	; 0x1574 <prvUnlockQueue>
    1800:	b6 d7       	rcall	.+3948   	; 0x276e <xTaskResumeAll>
    1802:	96 cf       	rjmp	.-212    	; 0x1730 <xQueueGenericSend+0x40>
    1804:	c7 01       	movw	r24, r14
    1806:	b6 de       	rcall	.-660    	; 0x1574 <prvUnlockQueue>
    1808:	b2 d7       	rcall	.+3940   	; 0x276e <xTaskResumeAll>
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	29 96       	adiw	r28, 0x09	; 9
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	df 90       	pop	r13
    1826:	cf 90       	pop	r12
    1828:	bf 90       	pop	r11
    182a:	af 90       	pop	r10
    182c:	9f 90       	pop	r9
    182e:	08 95       	ret

00001830 <xQueueCreateMutex>:
    1830:	0f 93       	push	r16
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	48 2f       	mov	r20, r24
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	2b df       	rcall	.-426    	; 0x1694 <xQueueGenericCreate>
    183e:	ec 01       	movw	r28, r24
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	61 f0       	breq	.+24     	; 0x185c <xQueueCreateMutex+0x2c>
    1844:	1d 82       	std	Y+5, r1	; 0x05
    1846:	1c 82       	std	Y+4, r1	; 0x04
    1848:	19 82       	std	Y+1, r1	; 0x01
    184a:	18 82       	st	Y, r1
    184c:	1e 82       	std	Y+6, r1	; 0x06
    184e:	00 e0       	ldi	r16, 0x00	; 0
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	a9 01       	movw	r20, r18
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	4a df       	rcall	.-364    	; 0x16f0 <xQueueGenericSend>
    185c:	ce 01       	movw	r24, r28
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	0f 91       	pop	r16
    1864:	08 95       	ret

00001866 <xQueueGenericSendFromISR>:
    1866:	ef 92       	push	r14
    1868:	ff 92       	push	r15
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	8a 01       	movw	r16, r20
    1874:	fc 01       	movw	r30, r24
    1876:	56 8d       	ldd	r21, Z+30	; 0x1e
    1878:	37 8d       	ldd	r19, Z+31	; 0x1f
    187a:	53 17       	cp	r21, r19
    187c:	10 f0       	brcs	.+4      	; 0x1882 <xQueueGenericSendFromISR+0x1c>
    187e:	22 30       	cpi	r18, 0x02	; 2
    1880:	e9 f4       	brne	.+58     	; 0x18bc <xQueueGenericSendFromISR+0x56>
    1882:	42 2f       	mov	r20, r18
    1884:	78 01       	movw	r14, r16
    1886:	ec 01       	movw	r28, r24
    1888:	1a a1       	ldd	r17, Y+34	; 0x22
    188a:	fb dd       	rcall	.-1034   	; 0x1482 <prvCopyDataToQueue>
    188c:	1f 3f       	cpi	r17, 0xFF	; 255
    188e:	81 f4       	brne	.+32     	; 0x18b0 <xQueueGenericSendFromISR+0x4a>
    1890:	8b 89       	ldd	r24, Y+19	; 0x13
    1892:	88 23       	and	r24, r24
    1894:	a9 f0       	breq	.+42     	; 0x18c0 <xQueueGenericSendFromISR+0x5a>
    1896:	ce 01       	movw	r24, r28
    1898:	43 96       	adiw	r24, 0x13	; 19
    189a:	0e 94 84 15 	call	0x2b08	; 0x2b08 <xTaskRemoveFromEventList>
    189e:	88 23       	and	r24, r24
    18a0:	89 f0       	breq	.+34     	; 0x18c4 <xQueueGenericSendFromISR+0x5e>
    18a2:	e1 14       	cp	r14, r1
    18a4:	f1 04       	cpc	r15, r1
    18a6:	81 f0       	breq	.+32     	; 0x18c8 <xQueueGenericSendFromISR+0x62>
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	f7 01       	movw	r30, r14
    18ac:	80 83       	st	Z, r24
    18ae:	0d c0       	rjmp	.+26     	; 0x18ca <xQueueGenericSendFromISR+0x64>
    18b0:	ff 24       	eor	r15, r15
    18b2:	f3 94       	inc	r15
    18b4:	f1 0e       	add	r15, r17
    18b6:	fa a2       	std	Y+34, r15	; 0x22
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	07 c0       	rjmp	.+14     	; 0x18ca <xQueueGenericSendFromISR+0x64>
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	05 c0       	rjmp	.+10     	; 0x18ca <xQueueGenericSendFromISR+0x64>
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	03 c0       	rjmp	.+6      	; 0x18ca <xQueueGenericSendFromISR+0x64>
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	01 c0       	rjmp	.+2      	; 0x18ca <xQueueGenericSendFromISR+0x64>
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	ff 90       	pop	r15
    18d4:	ef 90       	pop	r14
    18d6:	08 95       	ret

000018d8 <xQueueReceive>:
    18d8:	9f 92       	push	r9
    18da:	af 92       	push	r10
    18dc:	bf 92       	push	r11
    18de:	cf 92       	push	r12
    18e0:	df 92       	push	r13
    18e2:	ef 92       	push	r14
    18e4:	ff 92       	push	r15
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	29 97       	sbiw	r28, 0x09	; 9
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	8c 01       	movw	r16, r24
    1900:	5b 01       	movw	r10, r22
    1902:	2e 83       	std	Y+6, r18	; 0x06
    1904:	3f 83       	std	Y+7, r19	; 0x07
    1906:	48 87       	std	Y+8, r20	; 0x08
    1908:	59 87       	std	Y+9, r21	; 0x09
    190a:	e1 2c       	mov	r14, r1
    190c:	99 24       	eor	r9, r9
    190e:	93 94       	inc	r9
    1910:	6c 01       	movw	r12, r24
    1912:	83 e1       	ldi	r24, 0x13	; 19
    1914:	c8 0e       	add	r12, r24
    1916:	d1 1c       	adc	r13, r1
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	0f 92       	push	r0
    191e:	f8 01       	movw	r30, r16
    1920:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1922:	ff 20       	and	r15, r15
    1924:	99 f0       	breq	.+38     	; 0x194c <xQueueReceive+0x74>
    1926:	b5 01       	movw	r22, r10
    1928:	c8 01       	movw	r24, r16
    192a:	0a de       	rcall	.-1004   	; 0x1540 <prvCopyDataFromQueue>
    192c:	fa 94       	dec	r15
    192e:	f8 01       	movw	r30, r16
    1930:	f6 8e       	std	Z+30, r15	; 0x1e
    1932:	80 85       	ldd	r24, Z+8	; 0x08
    1934:	88 23       	and	r24, r24
    1936:	31 f0       	breq	.+12     	; 0x1944 <xQueueReceive+0x6c>
    1938:	c8 01       	movw	r24, r16
    193a:	08 96       	adiw	r24, 0x08	; 8
    193c:	0e 94 84 15 	call	0x2b08	; 0x2b08 <xTaskRemoveFromEventList>
    1940:	81 11       	cpse	r24, r1
    1942:	cc dc       	rcall	.-1640   	; 0x12dc <vPortYield>
    1944:	0f 90       	pop	r0
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	4d c0       	rjmp	.+154    	; 0x19e6 <xQueueReceive+0x10e>
    194c:	8e 81       	ldd	r24, Y+6	; 0x06
    194e:	9f 81       	ldd	r25, Y+7	; 0x07
    1950:	a8 85       	ldd	r26, Y+8	; 0x08
    1952:	b9 85       	ldd	r27, Y+9	; 0x09
    1954:	89 2b       	or	r24, r25
    1956:	8a 2b       	or	r24, r26
    1958:	8b 2b       	or	r24, r27
    195a:	21 f4       	brne	.+8      	; 0x1964 <xQueueReceive+0x8c>
    195c:	0f 90       	pop	r0
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	41 c0       	rjmp	.+130    	; 0x19e6 <xQueueReceive+0x10e>
    1964:	e1 10       	cpse	r14, r1
    1966:	05 c0       	rjmp	.+10     	; 0x1972 <xQueueReceive+0x9a>
    1968:	ce 01       	movw	r24, r28
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	0e 94 10 16 	call	0x2c20	; 0x2c20 <vTaskInternalSetTimeOutState>
    1970:	e9 2c       	mov	r14, r9
    1972:	0f 90       	pop	r0
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	12 d6       	rcall	.+3108   	; 0x259c <vTaskSuspendAll>
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	0f 92       	push	r0
    197e:	f8 01       	movw	r30, r16
    1980:	81 a1       	ldd	r24, Z+33	; 0x21
    1982:	8f 3f       	cpi	r24, 0xFF	; 255
    1984:	09 f4       	brne	.+2      	; 0x1988 <xQueueReceive+0xb0>
    1986:	11 a2       	std	Z+33, r1	; 0x21
    1988:	f8 01       	movw	r30, r16
    198a:	82 a1       	ldd	r24, Z+34	; 0x22
    198c:	8f 3f       	cpi	r24, 0xFF	; 255
    198e:	09 f4       	brne	.+2      	; 0x1992 <xQueueReceive+0xba>
    1990:	12 a2       	std	Z+34, r1	; 0x22
    1992:	0f 90       	pop	r0
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	be 01       	movw	r22, r28
    1998:	6a 5f       	subi	r22, 0xFA	; 250
    199a:	7f 4f       	sbci	r23, 0xFF	; 255
    199c:	ce 01       	movw	r24, r28
    199e:	01 96       	adiw	r24, 0x01	; 1
    19a0:	0e 94 21 16 	call	0x2c42	; 0x2c42 <xTaskCheckForTimeOut>
    19a4:	81 11       	cpse	r24, r1
    19a6:	16 c0       	rjmp	.+44     	; 0x19d4 <xQueueReceive+0xfc>
    19a8:	c8 01       	movw	r24, r16
    19aa:	60 dd       	rcall	.-1344   	; 0x146c <prvIsQueueEmpty>
    19ac:	88 23       	and	r24, r24
    19ae:	71 f0       	breq	.+28     	; 0x19cc <xQueueReceive+0xf4>
    19b0:	4e 81       	ldd	r20, Y+6	; 0x06
    19b2:	5f 81       	ldd	r21, Y+7	; 0x07
    19b4:	68 85       	ldd	r22, Y+8	; 0x08
    19b6:	79 85       	ldd	r23, Y+9	; 0x09
    19b8:	c6 01       	movw	r24, r12
    19ba:	0e 94 29 15 	call	0x2a52	; 0x2a52 <vTaskPlaceOnEventList>
    19be:	c8 01       	movw	r24, r16
    19c0:	d9 dd       	rcall	.-1102   	; 0x1574 <prvUnlockQueue>
    19c2:	d5 d6       	rcall	.+3498   	; 0x276e <xTaskResumeAll>
    19c4:	81 11       	cpse	r24, r1
    19c6:	a8 cf       	rjmp	.-176    	; 0x1918 <xQueueReceive+0x40>
    19c8:	89 dc       	rcall	.-1774   	; 0x12dc <vPortYield>
    19ca:	a6 cf       	rjmp	.-180    	; 0x1918 <xQueueReceive+0x40>
    19cc:	c8 01       	movw	r24, r16
    19ce:	d2 dd       	rcall	.-1116   	; 0x1574 <prvUnlockQueue>
    19d0:	ce d6       	rcall	.+3484   	; 0x276e <xTaskResumeAll>
    19d2:	a2 cf       	rjmp	.-188    	; 0x1918 <xQueueReceive+0x40>
    19d4:	c8 01       	movw	r24, r16
    19d6:	ce dd       	rcall	.-1124   	; 0x1574 <prvUnlockQueue>
    19d8:	ca d6       	rcall	.+3476   	; 0x276e <xTaskResumeAll>
    19da:	c8 01       	movw	r24, r16
    19dc:	47 dd       	rcall	.-1394   	; 0x146c <prvIsQueueEmpty>
    19de:	88 23       	and	r24, r24
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <xQueueReceive+0x10c>
    19e2:	9a cf       	rjmp	.-204    	; 0x1918 <xQueueReceive+0x40>
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	29 96       	adiw	r28, 0x09	; 9
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	1f 91       	pop	r17
    19f8:	0f 91       	pop	r16
    19fa:	ff 90       	pop	r15
    19fc:	ef 90       	pop	r14
    19fe:	df 90       	pop	r13
    1a00:	cf 90       	pop	r12
    1a02:	bf 90       	pop	r11
    1a04:	af 90       	pop	r10
    1a06:	9f 90       	pop	r9
    1a08:	08 95       	ret

00001a0a <xQueueSemaphoreTake>:
    1a0a:	bf 92       	push	r11
    1a0c:	cf 92       	push	r12
    1a0e:	df 92       	push	r13
    1a10:	ef 92       	push	r14
    1a12:	ff 92       	push	r15
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	29 97       	sbiw	r28, 0x09	; 9
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	8c 01       	movw	r16, r24
    1a2e:	4e 83       	std	Y+6, r20	; 0x06
    1a30:	5f 83       	std	Y+7, r21	; 0x07
    1a32:	68 87       	std	Y+8, r22	; 0x08
    1a34:	79 87       	std	Y+9, r23	; 0x09
    1a36:	b1 2c       	mov	r11, r1
    1a38:	d1 2c       	mov	r13, r1
    1a3a:	cc 24       	eor	r12, r12
    1a3c:	c3 94       	inc	r12
    1a3e:	7c 01       	movw	r14, r24
    1a40:	83 e1       	ldi	r24, 0x13	; 19
    1a42:	e8 0e       	add	r14, r24
    1a44:	f1 1c       	adc	r15, r1
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	0f 92       	push	r0
    1a4c:	d8 01       	movw	r26, r16
    1a4e:	5e 96       	adiw	r26, 0x1e	; 30
    1a50:	8c 91       	ld	r24, X
    1a52:	5e 97       	sbiw	r26, 0x1e	; 30
    1a54:	88 23       	and	r24, r24
    1a56:	e1 f0       	breq	.+56     	; 0x1a90 <xQueueSemaphoreTake+0x86>
    1a58:	81 50       	subi	r24, 0x01	; 1
    1a5a:	5e 96       	adiw	r26, 0x1e	; 30
    1a5c:	8c 93       	st	X, r24
    1a5e:	5e 97       	sbiw	r26, 0x1e	; 30
    1a60:	8d 91       	ld	r24, X+
    1a62:	9c 91       	ld	r25, X
    1a64:	89 2b       	or	r24, r25
    1a66:	29 f4       	brne	.+10     	; 0x1a72 <xQueueSemaphoreTake+0x68>
    1a68:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <pvTaskIncrementMutexHeldCount>
    1a6c:	f8 01       	movw	r30, r16
    1a6e:	95 83       	std	Z+5, r25	; 0x05
    1a70:	84 83       	std	Z+4, r24	; 0x04
    1a72:	d8 01       	movw	r26, r16
    1a74:	18 96       	adiw	r26, 0x08	; 8
    1a76:	8c 91       	ld	r24, X
    1a78:	88 23       	and	r24, r24
    1a7a:	31 f0       	breq	.+12     	; 0x1a88 <xQueueSemaphoreTake+0x7e>
    1a7c:	c8 01       	movw	r24, r16
    1a7e:	08 96       	adiw	r24, 0x08	; 8
    1a80:	0e 94 84 15 	call	0x2b08	; 0x2b08 <xTaskRemoveFromEventList>
    1a84:	81 11       	cpse	r24, r1
    1a86:	2a dc       	rcall	.-1964   	; 0x12dc <vPortYield>
    1a88:	0f 90       	pop	r0
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	7a c0       	rjmp	.+244    	; 0x1b84 <xQueueSemaphoreTake+0x17a>
    1a90:	8e 81       	ldd	r24, Y+6	; 0x06
    1a92:	9f 81       	ldd	r25, Y+7	; 0x07
    1a94:	a8 85       	ldd	r26, Y+8	; 0x08
    1a96:	b9 85       	ldd	r27, Y+9	; 0x09
    1a98:	89 2b       	or	r24, r25
    1a9a:	8a 2b       	or	r24, r26
    1a9c:	8b 2b       	or	r24, r27
    1a9e:	21 f4       	brne	.+8      	; 0x1aa8 <xQueueSemaphoreTake+0x9e>
    1aa0:	0f 90       	pop	r0
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	6e c0       	rjmp	.+220    	; 0x1b84 <xQueueSemaphoreTake+0x17a>
    1aa8:	d1 10       	cpse	r13, r1
    1aaa:	05 c0       	rjmp	.+10     	; 0x1ab6 <xQueueSemaphoreTake+0xac>
    1aac:	ce 01       	movw	r24, r28
    1aae:	01 96       	adiw	r24, 0x01	; 1
    1ab0:	0e 94 10 16 	call	0x2c20	; 0x2c20 <vTaskInternalSetTimeOutState>
    1ab4:	dc 2c       	mov	r13, r12
    1ab6:	0f 90       	pop	r0
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	70 d5       	rcall	.+2784   	; 0x259c <vTaskSuspendAll>
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	0f 92       	push	r0
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	81 a1       	ldd	r24, Z+33	; 0x21
    1ac6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <xQueueSemaphoreTake+0xc2>
    1aca:	11 a2       	std	Z+33, r1	; 0x21
    1acc:	d8 01       	movw	r26, r16
    1ace:	92 96       	adiw	r26, 0x22	; 34
    1ad0:	8c 91       	ld	r24, X
    1ad2:	92 97       	sbiw	r26, 0x22	; 34
    1ad4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ad6:	11 f4       	brne	.+4      	; 0x1adc <xQueueSemaphoreTake+0xd2>
    1ad8:	92 96       	adiw	r26, 0x22	; 34
    1ada:	1c 92       	st	X, r1
    1adc:	0f 90       	pop	r0
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	be 01       	movw	r22, r28
    1ae2:	6a 5f       	subi	r22, 0xFA	; 250
    1ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	01 96       	adiw	r24, 0x01	; 1
    1aea:	0e 94 21 16 	call	0x2c42	; 0x2c42 <xTaskCheckForTimeOut>
    1aee:	81 11       	cpse	r24, r1
    1af0:	24 c0       	rjmp	.+72     	; 0x1b3a <xQueueSemaphoreTake+0x130>
    1af2:	c8 01       	movw	r24, r16
    1af4:	bb dc       	rcall	.-1674   	; 0x146c <prvIsQueueEmpty>
    1af6:	88 23       	and	r24, r24
    1af8:	e1 f0       	breq	.+56     	; 0x1b32 <xQueueSemaphoreTake+0x128>
    1afa:	f8 01       	movw	r30, r16
    1afc:	80 81       	ld	r24, Z
    1afe:	91 81       	ldd	r25, Z+1	; 0x01
    1b00:	89 2b       	or	r24, r25
    1b02:	51 f4       	brne	.+20     	; 0x1b18 <xQueueSemaphoreTake+0x10e>
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	0f 92       	push	r0
    1b0a:	84 81       	ldd	r24, Z+4	; 0x04
    1b0c:	95 81       	ldd	r25, Z+5	; 0x05
    1b0e:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <xTaskPriorityInherit>
    1b12:	b8 2e       	mov	r11, r24
    1b14:	0f 90       	pop	r0
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	4e 81       	ldd	r20, Y+6	; 0x06
    1b1a:	5f 81       	ldd	r21, Y+7	; 0x07
    1b1c:	68 85       	ldd	r22, Y+8	; 0x08
    1b1e:	79 85       	ldd	r23, Y+9	; 0x09
    1b20:	c7 01       	movw	r24, r14
    1b22:	97 d7       	rcall	.+3886   	; 0x2a52 <vTaskPlaceOnEventList>
    1b24:	c8 01       	movw	r24, r16
    1b26:	26 dd       	rcall	.-1460   	; 0x1574 <prvUnlockQueue>
    1b28:	22 d6       	rcall	.+3140   	; 0x276e <xTaskResumeAll>
    1b2a:	81 11       	cpse	r24, r1
    1b2c:	8c cf       	rjmp	.-232    	; 0x1a46 <xQueueSemaphoreTake+0x3c>
    1b2e:	d6 db       	rcall	.-2132   	; 0x12dc <vPortYield>
    1b30:	8a cf       	rjmp	.-236    	; 0x1a46 <xQueueSemaphoreTake+0x3c>
    1b32:	c8 01       	movw	r24, r16
    1b34:	1f dd       	rcall	.-1474   	; 0x1574 <prvUnlockQueue>
    1b36:	1b d6       	rcall	.+3126   	; 0x276e <xTaskResumeAll>
    1b38:	86 cf       	rjmp	.-244    	; 0x1a46 <xQueueSemaphoreTake+0x3c>
    1b3a:	c8 01       	movw	r24, r16
    1b3c:	1b dd       	rcall	.-1482   	; 0x1574 <prvUnlockQueue>
    1b3e:	17 d6       	rcall	.+3118   	; 0x276e <xTaskResumeAll>
    1b40:	c8 01       	movw	r24, r16
    1b42:	94 dc       	rcall	.-1752   	; 0x146c <prvIsQueueEmpty>
    1b44:	88 23       	and	r24, r24
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <xQueueSemaphoreTake+0x140>
    1b48:	7e cf       	rjmp	.-260    	; 0x1a46 <xQueueSemaphoreTake+0x3c>
    1b4a:	bb 20       	and	r11, r11
    1b4c:	d1 f0       	breq	.+52     	; 0x1b82 <xQueueSemaphoreTake+0x178>
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	0f 92       	push	r0
    1b54:	f8 01       	movw	r30, r16
    1b56:	83 89       	ldd	r24, Z+19	; 0x13
    1b58:	88 23       	and	r24, r24
    1b5a:	39 f0       	breq	.+14     	; 0x1b6a <xQueueSemaphoreTake+0x160>
    1b5c:	02 8c       	ldd	r0, Z+26	; 0x1a
    1b5e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1b60:	e0 2d       	mov	r30, r0
    1b62:	80 81       	ld	r24, Z
    1b64:	64 e0       	ldi	r22, 0x04	; 4
    1b66:	68 1b       	sub	r22, r24
    1b68:	01 c0       	rjmp	.+2      	; 0x1b6c <xQueueSemaphoreTake+0x162>
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	d8 01       	movw	r26, r16
    1b6e:	14 96       	adiw	r26, 0x04	; 4
    1b70:	8d 91       	ld	r24, X+
    1b72:	9c 91       	ld	r25, X
    1b74:	15 97       	sbiw	r26, 0x05	; 5
    1b76:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <vTaskPriorityDisinheritAfterTimeout>
    1b7a:	0f 90       	pop	r0
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	01 c0       	rjmp	.+2      	; 0x1b84 <xQueueSemaphoreTake+0x17a>
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	29 96       	adiw	r28, 0x09	; 9
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	ff 90       	pop	r15
    1b9a:	ef 90       	pop	r14
    1b9c:	df 90       	pop	r13
    1b9e:	cf 90       	pop	r12
    1ba0:	bf 90       	pop	r11
    1ba2:	08 95       	ret

00001ba4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	0f 92       	push	r0
    1bb0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb2:	8f 3f       	cpi	r24, 0xFF	; 255
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <vQueueWaitForMessageRestricted+0x14>
    1bb6:	19 a2       	std	Y+33, r1	; 0x21
    1bb8:	8a a1       	ldd	r24, Y+34	; 0x22
    1bba:	8f 3f       	cpi	r24, 0xFF	; 255
    1bbc:	09 f4       	brne	.+2      	; 0x1bc0 <vQueueWaitForMessageRestricted+0x1c>
    1bbe:	1a a2       	std	Y+34, r1	; 0x22
    1bc0:	0f 90       	pop	r0
    1bc2:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1bc4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bc6:	81 11       	cpse	r24, r1
    1bc8:	03 c0       	rjmp	.+6      	; 0x1bd0 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1bca:	ce 01       	movw	r24, r28
    1bcc:	43 96       	adiw	r24, 0x13	; 19
    1bce:	7c d7       	rcall	.+3832   	; 0x2ac8 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	d0 dc       	rcall	.-1632   	; 0x1574 <prvUnlockQueue>
    }
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	08 95       	ret

00001bda <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1bda:	fc 01       	movw	r30, r24
    1bdc:	44 81       	ldd	r20, Z+4	; 0x04
    1bde:	55 81       	ldd	r21, Z+5	; 0x05
    1be0:	22 81       	ldd	r18, Z+2	; 0x02
    1be2:	33 81       	ldd	r19, Z+3	; 0x03
    1be4:	24 0f       	add	r18, r20
    1be6:	35 1f       	adc	r19, r21
    1be8:	80 81       	ld	r24, Z
    1bea:	91 81       	ldd	r25, Z+1	; 0x01
    1bec:	b9 01       	movw	r22, r18
    1bee:	68 1b       	sub	r22, r24
    1bf0:	79 0b       	sbc	r23, r25
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	64 17       	cp	r22, r20
    1bf6:	75 07       	cpc	r23, r21
    1bf8:	10 f0       	brcs	.+4      	; 0x1bfe <prvBytesInBuffer+0x24>
    1bfa:	84 1b       	sub	r24, r20
    1bfc:	95 0b       	sbc	r25, r21
    1bfe:	08 95       	ret

00001c00 <prvWriteBytesToBuffer>:
    1c00:	af 92       	push	r10
    1c02:	bf 92       	push	r11
    1c04:	cf 92       	push	r12
    1c06:	df 92       	push	r13
    1c08:	ef 92       	push	r14
    1c0a:	ff 92       	push	r15
    1c0c:	0f 93       	push	r16
    1c0e:	1f 93       	push	r17
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	6c 01       	movw	r12, r24
    1c16:	5b 01       	movw	r10, r22
    1c18:	7a 01       	movw	r14, r20
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	c2 81       	ldd	r28, Z+2	; 0x02
    1c1e:	d3 81       	ldd	r29, Z+3	; 0x03
    1c20:	04 81       	ldd	r16, Z+4	; 0x04
    1c22:	15 81       	ldd	r17, Z+5	; 0x05
    1c24:	0c 1b       	sub	r16, r28
    1c26:	1d 0b       	sbc	r17, r29
    1c28:	40 17       	cp	r20, r16
    1c2a:	51 07       	cpc	r21, r17
    1c2c:	08 f4       	brcc	.+2      	; 0x1c30 <prvWriteBytesToBuffer+0x30>
    1c2e:	8a 01       	movw	r16, r20
    1c30:	f6 01       	movw	r30, r12
    1c32:	84 85       	ldd	r24, Z+12	; 0x0c
    1c34:	95 85       	ldd	r25, Z+13	; 0x0d
    1c36:	a8 01       	movw	r20, r16
    1c38:	b5 01       	movw	r22, r10
    1c3a:	8c 0f       	add	r24, r28
    1c3c:	9d 1f       	adc	r25, r29
    1c3e:	0e 94 a1 2c 	call	0x5942	; 0x5942 <memcpy>
    1c42:	0e 15       	cp	r16, r14
    1c44:	1f 05       	cpc	r17, r15
    1c46:	58 f4       	brcc	.+22     	; 0x1c5e <prvWriteBytesToBuffer+0x5e>
    1c48:	a7 01       	movw	r20, r14
    1c4a:	40 1b       	sub	r20, r16
    1c4c:	51 0b       	sbc	r21, r17
    1c4e:	b5 01       	movw	r22, r10
    1c50:	60 0f       	add	r22, r16
    1c52:	71 1f       	adc	r23, r17
    1c54:	f6 01       	movw	r30, r12
    1c56:	84 85       	ldd	r24, Z+12	; 0x0c
    1c58:	95 85       	ldd	r25, Z+13	; 0x0d
    1c5a:	0e 94 a1 2c 	call	0x5942	; 0x5942 <memcpy>
    1c5e:	ce 01       	movw	r24, r28
    1c60:	8e 0d       	add	r24, r14
    1c62:	9f 1d       	adc	r25, r15
    1c64:	f6 01       	movw	r30, r12
    1c66:	24 81       	ldd	r18, Z+4	; 0x04
    1c68:	35 81       	ldd	r19, Z+5	; 0x05
    1c6a:	82 17       	cp	r24, r18
    1c6c:	93 07       	cpc	r25, r19
    1c6e:	10 f0       	brcs	.+4      	; 0x1c74 <prvWriteBytesToBuffer+0x74>
    1c70:	82 1b       	sub	r24, r18
    1c72:	93 0b       	sbc	r25, r19
    1c74:	f6 01       	movw	r30, r12
    1c76:	93 83       	std	Z+3, r25	; 0x03
    1c78:	82 83       	std	Z+2, r24	; 0x02
    1c7a:	c7 01       	movw	r24, r14
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	ff 90       	pop	r15
    1c86:	ef 90       	pop	r14
    1c88:	df 90       	pop	r13
    1c8a:	cf 90       	pop	r12
    1c8c:	bf 90       	pop	r11
    1c8e:	af 90       	pop	r10
    1c90:	08 95       	ret

00001c92 <prvWriteMessageToBuffer>:
    1c92:	cf 92       	push	r12
    1c94:	df 92       	push	r13
    1c96:	ef 92       	push	r14
    1c98:	ff 92       	push	r15
    1c9a:	0f 93       	push	r16
    1c9c:	1f 93       	push	r17
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	1f 92       	push	r1
    1ca4:	1f 92       	push	r1
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	5a 83       	std	Y+2, r21	; 0x02
    1cac:	49 83       	std	Y+1, r20	; 0x01
    1cae:	21 15       	cp	r18, r1
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	c9 f0       	breq	.+50     	; 0x1ce6 <prvWriteMessageToBuffer+0x54>
    1cb4:	6b 01       	movw	r12, r22
    1cb6:	7c 01       	movw	r14, r24
    1cb8:	fc 01       	movw	r30, r24
    1cba:	86 85       	ldd	r24, Z+14	; 0x0e
    1cbc:	80 fd       	sbrc	r24, 0
    1cbe:	08 c0       	rjmp	.+16     	; 0x1cd0 <prvWriteMessageToBuffer+0x3e>
    1cc0:	ca 01       	movw	r24, r20
    1cc2:	24 17       	cp	r18, r20
    1cc4:	35 07       	cpc	r19, r21
    1cc6:	08 f4       	brcc	.+2      	; 0x1cca <prvWriteMessageToBuffer+0x38>
    1cc8:	c9 01       	movw	r24, r18
    1cca:	9a 83       	std	Y+2, r25	; 0x02
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    1cce:	11 c0       	rjmp	.+34     	; 0x1cf2 <prvWriteMessageToBuffer+0x60>
    1cd0:	20 17       	cp	r18, r16
    1cd2:	31 07       	cpc	r19, r17
    1cd4:	58 f0       	brcs	.+22     	; 0x1cec <prvWriteMessageToBuffer+0x5a>
    1cd6:	42 e0       	ldi	r20, 0x02	; 2
    1cd8:	50 e0       	ldi	r21, 0x00	; 0
    1cda:	be 01       	movw	r22, r28
    1cdc:	6f 5f       	subi	r22, 0xFF	; 255
    1cde:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce0:	c7 01       	movw	r24, r14
    1ce2:	8e df       	rcall	.-228    	; 0x1c00 <prvWriteBytesToBuffer>
    1ce4:	06 c0       	rjmp	.+12     	; 0x1cf2 <prvWriteMessageToBuffer+0x60>
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	08 c0       	rjmp	.+16     	; 0x1cfc <prvWriteMessageToBuffer+0x6a>
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	05 c0       	rjmp	.+10     	; 0x1cfc <prvWriteMessageToBuffer+0x6a>
    1cf2:	49 81       	ldd	r20, Y+1	; 0x01
    1cf4:	5a 81       	ldd	r21, Y+2	; 0x02
    1cf6:	b6 01       	movw	r22, r12
    1cf8:	c7 01       	movw	r24, r14
    1cfa:	82 df       	rcall	.-252    	; 0x1c00 <prvWriteBytesToBuffer>
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	1f 91       	pop	r17
    1d06:	0f 91       	pop	r16
    1d08:	ff 90       	pop	r15
    1d0a:	ef 90       	pop	r14
    1d0c:	df 90       	pop	r13
    1d0e:	cf 90       	pop	r12
    1d10:	08 95       	ret

00001d12 <prvReadBytesFromBuffer>:
    1d12:	af 92       	push	r10
    1d14:	bf 92       	push	r11
    1d16:	cf 92       	push	r12
    1d18:	df 92       	push	r13
    1d1a:	ef 92       	push	r14
    1d1c:	ff 92       	push	r15
    1d1e:	0f 93       	push	r16
    1d20:	1f 93       	push	r17
    1d22:	cf 93       	push	r28
    1d24:	df 93       	push	r29
    1d26:	7c 01       	movw	r14, r24
    1d28:	5b 01       	movw	r10, r22
    1d2a:	e9 01       	movw	r28, r18
    1d2c:	42 17       	cp	r20, r18
    1d2e:	53 07       	cpc	r21, r19
    1d30:	08 f4       	brcc	.+2      	; 0x1d34 <prvReadBytesFromBuffer+0x22>
    1d32:	ea 01       	movw	r28, r20
    1d34:	20 97       	sbiw	r28, 0x00	; 0
    1d36:	79 f1       	breq	.+94     	; 0x1d96 <prvReadBytesFromBuffer+0x84>
    1d38:	f7 01       	movw	r30, r14
    1d3a:	00 81       	ld	r16, Z
    1d3c:	11 81       	ldd	r17, Z+1	; 0x01
    1d3e:	c4 80       	ldd	r12, Z+4	; 0x04
    1d40:	d5 80       	ldd	r13, Z+5	; 0x05
    1d42:	c0 1a       	sub	r12, r16
    1d44:	d1 0a       	sbc	r13, r17
    1d46:	cc 15       	cp	r28, r12
    1d48:	dd 05       	cpc	r29, r13
    1d4a:	08 f4       	brcc	.+2      	; 0x1d4e <prvReadBytesFromBuffer+0x3c>
    1d4c:	6e 01       	movw	r12, r28
    1d4e:	f7 01       	movw	r30, r14
    1d50:	64 85       	ldd	r22, Z+12	; 0x0c
    1d52:	75 85       	ldd	r23, Z+13	; 0x0d
    1d54:	60 0f       	add	r22, r16
    1d56:	71 1f       	adc	r23, r17
    1d58:	a6 01       	movw	r20, r12
    1d5a:	c5 01       	movw	r24, r10
    1d5c:	0e 94 a1 2c 	call	0x5942	; 0x5942 <memcpy>
    1d60:	cc 16       	cp	r12, r28
    1d62:	dd 06       	cpc	r13, r29
    1d64:	58 f4       	brcc	.+22     	; 0x1d7c <prvReadBytesFromBuffer+0x6a>
    1d66:	ae 01       	movw	r20, r28
    1d68:	4c 19       	sub	r20, r12
    1d6a:	5d 09       	sbc	r21, r13
    1d6c:	f7 01       	movw	r30, r14
    1d6e:	64 85       	ldd	r22, Z+12	; 0x0c
    1d70:	75 85       	ldd	r23, Z+13	; 0x0d
    1d72:	c5 01       	movw	r24, r10
    1d74:	8c 0d       	add	r24, r12
    1d76:	9d 1d       	adc	r25, r13
    1d78:	0e 94 a1 2c 	call	0x5942	; 0x5942 <memcpy>
    1d7c:	0c 0f       	add	r16, r28
    1d7e:	1d 1f       	adc	r17, r29
    1d80:	f7 01       	movw	r30, r14
    1d82:	84 81       	ldd	r24, Z+4	; 0x04
    1d84:	95 81       	ldd	r25, Z+5	; 0x05
    1d86:	08 17       	cp	r16, r24
    1d88:	19 07       	cpc	r17, r25
    1d8a:	10 f0       	brcs	.+4      	; 0x1d90 <prvReadBytesFromBuffer+0x7e>
    1d8c:	08 1b       	sub	r16, r24
    1d8e:	19 0b       	sbc	r17, r25
    1d90:	f7 01       	movw	r30, r14
    1d92:	11 83       	std	Z+1, r17	; 0x01
    1d94:	00 83       	st	Z, r16
    1d96:	ce 01       	movw	r24, r28
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	1f 91       	pop	r17
    1d9e:	0f 91       	pop	r16
    1da0:	ff 90       	pop	r15
    1da2:	ef 90       	pop	r14
    1da4:	df 90       	pop	r13
    1da6:	cf 90       	pop	r12
    1da8:	bf 90       	pop	r11
    1daa:	af 90       	pop	r10
    1dac:	08 95       	ret

00001dae <xStreamBufferGenericCreate>:
    1dae:	ef 92       	push	r14
    1db0:	ff 92       	push	r15
    1db2:	1f 93       	push	r17
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	eb 01       	movw	r28, r22
    1dba:	11 e0       	ldi	r17, 0x01	; 1
    1dbc:	41 30       	cpi	r20, 0x01	; 1
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <xStreamBufferGenericCreate+0x14>
    1dc0:	10 e0       	ldi	r17, 0x00	; 0
    1dc2:	20 97       	sbiw	r28, 0x00	; 0
    1dc4:	11 f4       	brne	.+4      	; 0x1dca <xStreamBufferGenericCreate+0x1c>
    1dc6:	c1 e0       	ldi	r28, 0x01	; 1
    1dc8:	d0 e0       	ldi	r29, 0x00	; 0
    1dca:	7c 01       	movw	r14, r24
    1dcc:	2f ef       	ldi	r18, 0xFF	; 255
    1dce:	e2 1a       	sub	r14, r18
    1dd0:	f2 0a       	sbc	r15, r18
    1dd2:	41 96       	adiw	r24, 0x11	; 17
    1dd4:	51 d8       	rcall	.-3934   	; 0xe78 <pvPortMalloc>
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	81 f0       	breq	.+32     	; 0x1dfa <xStreamBufferGenericCreate+0x4c>
    1dda:	20 e1       	ldi	r18, 0x10	; 16
    1ddc:	fc 01       	movw	r30, r24
    1dde:	11 92       	st	Z+, r1
    1de0:	2a 95       	dec	r18
    1de2:	e9 f7       	brne	.-6      	; 0x1dde <xStreamBufferGenericCreate+0x30>
    1de4:	9c 01       	movw	r18, r24
    1de6:	20 5f       	subi	r18, 0xF0	; 240
    1de8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dea:	fc 01       	movw	r30, r24
    1dec:	35 87       	std	Z+13, r19	; 0x0d
    1dee:	24 87       	std	Z+12, r18	; 0x0c
    1df0:	f5 82       	std	Z+5, r15	; 0x05
    1df2:	e4 82       	std	Z+4, r14	; 0x04
    1df4:	d7 83       	std	Z+7, r29	; 0x07
    1df6:	c6 83       	std	Z+6, r28	; 0x06
    1df8:	16 87       	std	Z+14, r17	; 0x0e
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	1f 91       	pop	r17
    1e00:	ff 90       	pop	r15
    1e02:	ef 90       	pop	r14
    1e04:	08 95       	ret

00001e06 <xStreamBufferReset>:
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	27 85       	ldd	r18, Z+15	; 0x0f
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	0f 92       	push	r0
    1e14:	80 85       	ldd	r24, Z+8	; 0x08
    1e16:	91 85       	ldd	r25, Z+9	; 0x09
    1e18:	89 2b       	or	r24, r25
    1e1a:	d1 f4       	brne	.+52     	; 0x1e50 <xStreamBufferReset+0x4a>
    1e1c:	82 85       	ldd	r24, Z+10	; 0x0a
    1e1e:	93 85       	ldd	r25, Z+11	; 0x0b
    1e20:	89 2b       	or	r24, r25
    1e22:	c1 f4       	brne	.+48     	; 0x1e54 <xStreamBufferReset+0x4e>
    1e24:	86 85       	ldd	r24, Z+14	; 0x0e
    1e26:	46 81       	ldd	r20, Z+6	; 0x06
    1e28:	57 81       	ldd	r21, Z+7	; 0x07
    1e2a:	64 81       	ldd	r22, Z+4	; 0x04
    1e2c:	75 81       	ldd	r23, Z+5	; 0x05
    1e2e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e30:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e32:	90 e1       	ldi	r25, 0x10	; 16
    1e34:	ef 01       	movw	r28, r30
    1e36:	19 92       	st	Y+, r1
    1e38:	9a 95       	dec	r25
    1e3a:	e9 f7       	brne	.-6      	; 0x1e36 <xStreamBufferReset+0x30>
    1e3c:	b5 87       	std	Z+13, r27	; 0x0d
    1e3e:	a4 87       	std	Z+12, r26	; 0x0c
    1e40:	75 83       	std	Z+5, r23	; 0x05
    1e42:	64 83       	std	Z+4, r22	; 0x04
    1e44:	57 83       	std	Z+7, r21	; 0x07
    1e46:	46 83       	std	Z+6, r20	; 0x06
    1e48:	86 87       	std	Z+14, r24	; 0x0e
    1e4a:	27 87       	std	Z+15, r18	; 0x0f
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	03 c0       	rjmp	.+6      	; 0x1e56 <xStreamBufferReset+0x50>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	01 c0       	rjmp	.+2      	; 0x1e56 <xStreamBufferReset+0x50>
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	0f 90       	pop	r0
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	08 95       	ret

00001e60 <xStreamBufferSpacesAvailable>:
    1e60:	fc 01       	movw	r30, r24
    1e62:	24 81       	ldd	r18, Z+4	; 0x04
    1e64:	35 81       	ldd	r19, Z+5	; 0x05
    1e66:	80 81       	ld	r24, Z
    1e68:	91 81       	ldd	r25, Z+1	; 0x01
    1e6a:	42 81       	ldd	r20, Z+2	; 0x02
    1e6c:	53 81       	ldd	r21, Z+3	; 0x03
    1e6e:	82 0f       	add	r24, r18
    1e70:	93 1f       	adc	r25, r19
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	84 1b       	sub	r24, r20
    1e76:	95 0b       	sbc	r25, r21
    1e78:	82 17       	cp	r24, r18
    1e7a:	93 07       	cpc	r25, r19
    1e7c:	10 f0       	brcs	.+4      	; 0x1e82 <xStreamBufferSpacesAvailable+0x22>
    1e7e:	82 1b       	sub	r24, r18
    1e80:	93 0b       	sbc	r25, r19
    1e82:	08 95       	ret

00001e84 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1e84:	2f 92       	push	r2
    1e86:	3f 92       	push	r3
    1e88:	4f 92       	push	r4
    1e8a:	5f 92       	push	r5
    1e8c:	6f 92       	push	r6
    1e8e:	7f 92       	push	r7
    1e90:	8f 92       	push	r8
    1e92:	9f 92       	push	r9
    1e94:	af 92       	push	r10
    1e96:	bf 92       	push	r11
    1e98:	cf 92       	push	r12
    1e9a:	df 92       	push	r13
    1e9c:	ef 92       	push	r14
    1e9e:	ff 92       	push	r15
    1ea0:	0f 93       	push	r16
    1ea2:	1f 93       	push	r17
    1ea4:	cf 93       	push	r28
    1ea6:	df 93       	push	r29
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	29 97       	sbiw	r28, 0x09	; 9
    1eae:	0f b6       	in	r0, 0x3f	; 63
    1eb0:	f8 94       	cli
    1eb2:	de bf       	out	0x3e, r29	; 62
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	cd bf       	out	0x3d, r28	; 61
    1eb8:	5c 01       	movw	r10, r24
    1eba:	1b 01       	movw	r2, r22
    1ebc:	2a 01       	movw	r4, r20
    1ebe:	0e 83       	std	Y+6, r16	; 0x06
    1ec0:	1f 83       	std	Y+7, r17	; 0x07
    1ec2:	28 87       	std	Y+8, r18	; 0x08
    1ec4:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	86 85       	ldd	r24, Z+14	; 0x0e
    1eca:	80 ff       	sbrs	r24, 0
    1ecc:	05 c0       	rjmp	.+10     	; 0x1ed8 <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1ece:	3a 01       	movw	r6, r20
    1ed0:	f2 e0       	ldi	r31, 0x02	; 2
    1ed2:	6f 0e       	add	r6, r31
    1ed4:	71 1c       	adc	r7, r1
    1ed6:	01 c0       	rjmp	.+2      	; 0x1eda <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    1ed8:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1eda:	8e 81       	ldd	r24, Y+6	; 0x06
    1edc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ede:	a8 85       	ldd	r26, Y+8	; 0x08
    1ee0:	b9 85       	ldd	r27, Y+9	; 0x09
    1ee2:	89 2b       	or	r24, r25
    1ee4:	8a 2b       	or	r24, r26
    1ee6:	8b 2b       	or	r24, r27
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <xStreamBufferSend+0x68>
    1eea:	35 c0       	rjmp	.+106    	; 0x1f56 <xStreamBufferSend+0xd2>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1eec:	ce 01       	movw	r24, r28
    1eee:	01 96       	adiw	r24, 0x01	; 1
    1ef0:	81 d6       	rcall	.+3330   	; 0x2bf4 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1ef8:	c5 01       	movw	r24, r10
    1efa:	b2 df       	rcall	.-156    	; 0x1e60 <xStreamBufferSpacesAvailable>
    1efc:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    1efe:	86 15       	cp	r24, r6
    1f00:	97 05       	cpc	r25, r7
    1f02:	20 f5       	brcc	.+72     	; 0x1f4c <xStreamBufferSend+0xc8>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	0e 94 4c 19 	call	0x3298	; 0x3298 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1f0c:	f3 d6       	rcall	.+3558   	; 0x2cf4 <xTaskGetCurrentTaskHandle>
    1f0e:	f5 01       	movw	r30, r10
    1f10:	93 87       	std	Z+11, r25	; 0x0b
    1f12:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1f14:	0f 90       	pop	r0
    1f16:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1f18:	ce 80       	ldd	r12, Y+6	; 0x06
    1f1a:	df 80       	ldd	r13, Y+7	; 0x07
    1f1c:	e8 84       	ldd	r14, Y+8	; 0x08
    1f1e:	f9 84       	ldd	r15, Y+9	; 0x09
    1f20:	00 e0       	ldi	r16, 0x00	; 0
    1f22:	10 e0       	ldi	r17, 0x00	; 0
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	a9 01       	movw	r20, r18
    1f2a:	60 e0       	ldi	r22, 0x00	; 0
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
    1f2e:	cb 01       	movw	r24, r22
    1f30:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1f34:	f5 01       	movw	r30, r10
    1f36:	13 86       	std	Z+11, r1	; 0x0b
    1f38:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1f3a:	be 01       	movw	r22, r28
    1f3c:	6a 5f       	subi	r22, 0xFA	; 250
    1f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f40:	ce 01       	movw	r24, r28
    1f42:	01 96       	adiw	r24, 0x01	; 1
    1f44:	7e d6       	rcall	.+3324   	; 0x2c42 <xTaskCheckForTimeOut>
    1f46:	88 23       	and	r24, r24
    1f48:	a1 f2       	breq	.-88     	; 0x1ef2 <xStreamBufferSend+0x6e>
    1f4a:	02 c0       	rjmp	.+4      	; 0x1f50 <xStreamBufferSend+0xcc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1f4c:	0f 90       	pop	r0
    1f4e:	0f be       	out	0x3f, r0	; 63
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1f50:	81 14       	cp	r8, r1
    1f52:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1f54:	19 f4       	brne	.+6      	; 0x1f5c <xStreamBufferSend+0xd8>
    1f56:	c5 01       	movw	r24, r10
    1f58:	83 df       	rcall	.-250    	; 0x1e60 <xStreamBufferSpacesAvailable>
    1f5a:	4c 01       	movw	r8, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1f5c:	83 01       	movw	r16, r6
    1f5e:	94 01       	movw	r18, r8
    1f60:	a2 01       	movw	r20, r4
    1f62:	b1 01       	movw	r22, r2
    1f64:	c5 01       	movw	r24, r10
    1f66:	95 de       	rcall	.-726    	; 0x1c92 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    1f68:	7c 01       	movw	r14, r24
    1f6a:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1f6c:	e1 f0       	breq	.+56     	; 0x1fa6 <xStreamBufferSend+0x122>
    1f6e:	c5 01       	movw	r24, r10
    1f70:	34 de       	rcall	.-920    	; 0x1bda <prvBytesInBuffer>
    1f72:	f5 01       	movw	r30, r10
    1f74:	26 81       	ldd	r18, Z+6	; 0x06
    1f76:	37 81       	ldd	r19, Z+7	; 0x07
    1f78:	82 17       	cp	r24, r18
    1f7a:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1f7c:	a0 f0       	brcs	.+40     	; 0x1fa6 <xStreamBufferSend+0x122>
    1f7e:	0e d3       	rcall	.+1564   	; 0x259c <vTaskSuspendAll>
    1f80:	f5 01       	movw	r30, r10
    1f82:	80 85       	ldd	r24, Z+8	; 0x08
    1f84:	91 85       	ldd	r25, Z+9	; 0x09
    1f86:	89 2b       	or	r24, r25
    1f88:	69 f0       	breq	.+26     	; 0x1fa4 <xStreamBufferSend+0x120>
    1f8a:	80 85       	ldd	r24, Z+8	; 0x08
    1f8c:	91 85       	ldd	r25, Z+9	; 0x09
    1f8e:	00 e0       	ldi	r16, 0x00	; 0
    1f90:	10 e0       	ldi	r17, 0x00	; 0
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	ba 01       	movw	r22, r20
    1f9a:	0e 94 4b 18 	call	0x3096	; 0x3096 <xTaskGenericNotify>
    1f9e:	f5 01       	movw	r30, r10
    1fa0:	11 86       	std	Z+9, r1	; 0x09
    1fa2:	10 86       	std	Z+8, r1	; 0x08
    1fa4:	e4 d3       	rcall	.+1992   	; 0x276e <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1fa6:	c7 01       	movw	r24, r14
    1fa8:	29 96       	adiw	r28, 0x09	; 9
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	ff 90       	pop	r15
    1fbe:	ef 90       	pop	r14
    1fc0:	df 90       	pop	r13
    1fc2:	cf 90       	pop	r12
    1fc4:	bf 90       	pop	r11
    1fc6:	af 90       	pop	r10
    1fc8:	9f 90       	pop	r9
    1fca:	8f 90       	pop	r8
    1fcc:	7f 90       	pop	r7
    1fce:	6f 90       	pop	r6
    1fd0:	5f 90       	pop	r5
    1fd2:	4f 90       	pop	r4
    1fd4:	3f 90       	pop	r3
    1fd6:	2f 90       	pop	r2
    1fd8:	08 95       	ret

00001fda <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1fda:	af 92       	push	r10
    1fdc:	bf 92       	push	r11
    1fde:	cf 92       	push	r12
    1fe0:	df 92       	push	r13
    1fe2:	ef 92       	push	r14
    1fe4:	ff 92       	push	r15
    1fe6:	0f 93       	push	r16
    1fe8:	1f 93       	push	r17
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	ec 01       	movw	r28, r24
    1ff0:	5b 01       	movw	r10, r22
    1ff2:	6a 01       	movw	r12, r20
    1ff4:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1ff6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ff8:	80 ff       	sbrs	r24, 0
    1ffa:	04 c0       	rjmp	.+8      	; 0x2004 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1ffc:	8a 01       	movw	r16, r20
    1ffe:	0e 5f       	subi	r16, 0xFE	; 254
    2000:	1f 4f       	sbci	r17, 0xFF	; 255
    2002:	01 c0       	rjmp	.+2      	; 0x2006 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    2004:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2006:	ce 01       	movw	r24, r28
    2008:	2b df       	rcall	.-426    	; 0x1e60 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    200a:	9c 01       	movw	r18, r24
    200c:	a6 01       	movw	r20, r12
    200e:	b5 01       	movw	r22, r10
    2010:	ce 01       	movw	r24, r28
    2012:	3f de       	rcall	.-898    	; 0x1c92 <prvWriteMessageToBuffer>
    2014:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    2016:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2018:	b9 f0       	breq	.+46     	; 0x2048 <xStreamBufferSendFromISR+0x6e>
    201a:	ce 01       	movw	r24, r28
    201c:	de dd       	rcall	.-1092   	; 0x1bda <prvBytesInBuffer>
    201e:	2e 81       	ldd	r18, Y+6	; 0x06
    2020:	3f 81       	ldd	r19, Y+7	; 0x07
    2022:	82 17       	cp	r24, r18
    2024:	93 07       	cpc	r25, r19
    2026:	80 f0       	brcs	.+32     	; 0x2048 <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2028:	88 85       	ldd	r24, Y+8	; 0x08
    202a:	99 85       	ldd	r25, Y+9	; 0x09
    202c:	89 2b       	or	r24, r25
    202e:	61 f0       	breq	.+24     	; 0x2048 <xStreamBufferSendFromISR+0x6e>
    2030:	88 85       	ldd	r24, Y+8	; 0x08
    2032:	99 85       	ldd	r25, Y+9	; 0x09
    2034:	00 e0       	ldi	r16, 0x00	; 0
    2036:	10 e0       	ldi	r17, 0x00	; 0
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	50 e0       	ldi	r21, 0x00	; 0
    203e:	ba 01       	movw	r22, r20
    2040:	0e 94 c3 18 	call	0x3186	; 0x3186 <xTaskGenericNotifyFromISR>
    2044:	19 86       	std	Y+9, r1	; 0x09
    2046:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    2048:	c6 01       	movw	r24, r12
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	1f 91       	pop	r17
    2050:	0f 91       	pop	r16
    2052:	ff 90       	pop	r15
    2054:	ef 90       	pop	r14
    2056:	df 90       	pop	r13
    2058:	cf 90       	pop	r12
    205a:	bf 90       	pop	r11
    205c:	af 90       	pop	r10
    205e:	08 95       	ret

00002060 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    2060:	4f 92       	push	r4
    2062:	5f 92       	push	r5
    2064:	6f 92       	push	r6
    2066:	7f 92       	push	r7
    2068:	8f 92       	push	r8
    206a:	9f 92       	push	r9
    206c:	af 92       	push	r10
    206e:	bf 92       	push	r11
    2070:	cf 92       	push	r12
    2072:	df 92       	push	r13
    2074:	ef 92       	push	r14
    2076:	ff 92       	push	r15
    2078:	0f 93       	push	r16
    207a:	1f 93       	push	r17
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	1f 92       	push	r1
    2082:	1f 92       	push	r1
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	5c 01       	movw	r10, r24
    208a:	2b 01       	movw	r4, r22
    208c:	3a 01       	movw	r6, r20
    208e:	68 01       	movw	r12, r16
    2090:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2092:	fc 01       	movw	r30, r24
    2094:	86 85       	ldd	r24, Z+14	; 0x0e
    2096:	80 fd       	sbrc	r24, 0
    2098:	03 c0       	rjmp	.+6      	; 0x20a0 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    209a:	81 2c       	mov	r8, r1
    209c:	91 2c       	mov	r9, r1
    209e:	04 c0       	rjmp	.+8      	; 0x20a8 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    20a0:	68 94       	set
    20a2:	88 24       	eor	r8, r8
    20a4:	81 f8       	bld	r8, 1
    20a6:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    20a8:	c1 14       	cp	r12, r1
    20aa:	d1 04       	cpc	r13, r1
    20ac:	e1 04       	cpc	r14, r1
    20ae:	f1 04       	cpc	r15, r1
    20b0:	31 f1       	breq	.+76     	; 0x20fe <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    20b8:	c5 01       	movw	r24, r10
    20ba:	8f dd       	rcall	.-1250   	; 0x1bda <prvBytesInBuffer>
    20bc:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    20be:	88 16       	cp	r8, r24
    20c0:	99 06       	cpc	r9, r25
    20c2:	40 f0       	brcs	.+16     	; 0x20d4 <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	0e 94 4c 19 	call	0x3298	; 0x3298 <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    20cc:	13 d6       	rcall	.+3110   	; 0x2cf4 <xTaskGetCurrentTaskHandle>
    20ce:	f5 01       	movw	r30, r10
    20d0:	91 87       	std	Z+9, r25	; 0x09
    20d2:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    20d4:	0f 90       	pop	r0
    20d6:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    20d8:	80 16       	cp	r8, r16
    20da:	91 06       	cpc	r9, r17
    20dc:	b0 f0       	brcs	.+44     	; 0x210a <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    20de:	00 e0       	ldi	r16, 0x00	; 0
    20e0:	10 e0       	ldi	r17, 0x00	; 0
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	a9 01       	movw	r20, r18
    20e8:	60 e0       	ldi	r22, 0x00	; 0
    20ea:	70 e0       	ldi	r23, 0x00	; 0
    20ec:	cb 01       	movw	r24, r22
    20ee:	49 d7       	rcall	.+3730   	; 0x2f82 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    20f0:	f5 01       	movw	r30, r10
    20f2:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    20f4:	10 86       	std	Z+8, r1	; 0x08
    20f6:	c5 01       	movw	r24, r10
    20f8:	70 dd       	rcall	.-1312   	; 0x1bda <prvBytesInBuffer>
    20fa:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    20fc:	03 c0       	rjmp	.+6      	; 0x2104 <xStreamBufferReceive+0xa4>
    20fe:	c5 01       	movw	r24, r10
    2100:	6c dd       	rcall	.-1320   	; 0x1bda <prvBytesInBuffer>
    2102:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2104:	80 16       	cp	r8, r16
    2106:	91 06       	cpc	r9, r17
    2108:	b8 f5       	brcc	.+110    	; 0x2178 <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    210a:	81 14       	cp	r8, r1
    210c:	91 04       	cpc	r9, r1
    210e:	c1 f0       	breq	.+48     	; 0x2140 <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    2110:	f5 01       	movw	r30, r10
    2112:	e0 80       	ld	r14, Z
    2114:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    2116:	98 01       	movw	r18, r16
    2118:	a4 01       	movw	r20, r8
    211a:	be 01       	movw	r22, r28
    211c:	6f 5f       	subi	r22, 0xFF	; 255
    211e:	7f 4f       	sbci	r23, 0xFF	; 255
    2120:	c5 01       	movw	r24, r10
    2122:	f7 dd       	rcall	.-1042   	; 0x1d12 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    2128:	08 19       	sub	r16, r8
    212a:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    212c:	68 16       	cp	r6, r24
    212e:	79 06       	cpc	r7, r25
    2130:	30 f4       	brcc	.+12     	; 0x213e <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    2132:	f5 01       	movw	r30, r10
    2134:	f1 82       	std	Z+1, r15	; 0x01
    2136:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    2138:	61 2c       	mov	r6, r1
    213a:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    213c:	01 c0       	rjmp	.+2      	; 0x2140 <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    213e:	3c 01       	movw	r6, r24
    2140:	98 01       	movw	r18, r16
    2142:	a3 01       	movw	r20, r6
    2144:	b2 01       	movw	r22, r4
    2146:	c5 01       	movw	r24, r10
    2148:	e4 dd       	rcall	.-1080   	; 0x1d12 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    214a:	7c 01       	movw	r14, r24
    214c:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    214e:	b1 f0       	breq	.+44     	; 0x217c <xStreamBufferReceive+0x11c>
    2150:	25 d2       	rcall	.+1098   	; 0x259c <vTaskSuspendAll>
    2152:	f5 01       	movw	r30, r10
    2154:	82 85       	ldd	r24, Z+10	; 0x0a
    2156:	93 85       	ldd	r25, Z+11	; 0x0b
    2158:	89 2b       	or	r24, r25
    215a:	61 f0       	breq	.+24     	; 0x2174 <xStreamBufferReceive+0x114>
    215c:	82 85       	ldd	r24, Z+10	; 0x0a
    215e:	93 85       	ldd	r25, Z+11	; 0x0b
    2160:	00 e0       	ldi	r16, 0x00	; 0
    2162:	10 e0       	ldi	r17, 0x00	; 0
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	40 e0       	ldi	r20, 0x00	; 0
    2168:	50 e0       	ldi	r21, 0x00	; 0
    216a:	ba 01       	movw	r22, r20
    216c:	94 d7       	rcall	.+3880   	; 0x3096 <xTaskGenericNotify>
    216e:	f5 01       	movw	r30, r10
    2170:	13 86       	std	Z+11, r1	; 0x0b
    2172:	12 86       	std	Z+10, r1	; 0x0a
    2174:	fc d2       	rcall	.+1528   	; 0x276e <xTaskResumeAll>
    2176:	02 c0       	rjmp	.+4      	; 0x217c <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2178:	e1 2c       	mov	r14, r1
    217a:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    217c:	c7 01       	movw	r24, r14
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	1f 91       	pop	r17
    2188:	0f 91       	pop	r16
    218a:	ff 90       	pop	r15
    218c:	ef 90       	pop	r14
    218e:	df 90       	pop	r13
    2190:	cf 90       	pop	r12
    2192:	bf 90       	pop	r11
    2194:	af 90       	pop	r10
    2196:	9f 90       	pop	r9
    2198:	8f 90       	pop	r8
    219a:	7f 90       	pop	r7
    219c:	6f 90       	pop	r6
    219e:	5f 90       	pop	r5
    21a0:	4f 90       	pop	r4
    21a2:	08 95       	ret

000021a4 <prvResetNextTaskUnblockTime>:
    21a4:	e0 91 ca 17 	lds	r30, 0x17CA	; 0x8017ca <pxDelayedTaskList>
    21a8:	f0 91 cb 17 	lds	r31, 0x17CB	; 0x8017cb <pxDelayedTaskList+0x1>
    21ac:	80 81       	ld	r24, Z
    21ae:	81 11       	cpse	r24, r1
    21b0:	0c c0       	rjmp	.+24     	; 0x21ca <prvResetNextTaskUnblockTime+0x26>
    21b2:	8f ef       	ldi	r24, 0xFF	; 255
    21b4:	9f ef       	ldi	r25, 0xFF	; 255
    21b6:	dc 01       	movw	r26, r24
    21b8:	80 93 97 17 	sts	0x1797, r24	; 0x801797 <xNextTaskUnblockTime>
    21bc:	90 93 98 17 	sts	0x1798, r25	; 0x801798 <xNextTaskUnblockTime+0x1>
    21c0:	a0 93 99 17 	sts	0x1799, r26	; 0x801799 <xNextTaskUnblockTime+0x2>
    21c4:	b0 93 9a 17 	sts	0x179A, r27	; 0x80179a <xNextTaskUnblockTime+0x3>
    21c8:	08 95       	ret
    21ca:	e0 91 ca 17 	lds	r30, 0x17CA	; 0x8017ca <pxDelayedTaskList>
    21ce:	f0 91 cb 17 	lds	r31, 0x17CB	; 0x8017cb <pxDelayedTaskList+0x1>
    21d2:	07 80       	ldd	r0, Z+7	; 0x07
    21d4:	f0 85       	ldd	r31, Z+8	; 0x08
    21d6:	e0 2d       	mov	r30, r0
    21d8:	00 84       	ldd	r0, Z+8	; 0x08
    21da:	f1 85       	ldd	r31, Z+9	; 0x09
    21dc:	e0 2d       	mov	r30, r0
    21de:	82 81       	ldd	r24, Z+2	; 0x02
    21e0:	93 81       	ldd	r25, Z+3	; 0x03
    21e2:	a4 81       	ldd	r26, Z+4	; 0x04
    21e4:	b5 81       	ldd	r27, Z+5	; 0x05
    21e6:	80 93 97 17 	sts	0x1797, r24	; 0x801797 <xNextTaskUnblockTime>
    21ea:	90 93 98 17 	sts	0x1798, r25	; 0x801798 <xNextTaskUnblockTime+0x1>
    21ee:	a0 93 99 17 	sts	0x1799, r26	; 0x801799 <xNextTaskUnblockTime+0x2>
    21f2:	b0 93 9a 17 	sts	0x179A, r27	; 0x80179a <xNextTaskUnblockTime+0x3>
    21f6:	08 95       	ret

000021f8 <prvAddCurrentTaskToDelayedList>:
    21f8:	8f 92       	push	r8
    21fa:	9f 92       	push	r9
    21fc:	af 92       	push	r10
    21fe:	bf 92       	push	r11
    2200:	cf 92       	push	r12
    2202:	df 92       	push	r13
    2204:	ef 92       	push	r14
    2206:	ff 92       	push	r15
    2208:	cf 93       	push	r28
    220a:	6b 01       	movw	r12, r22
    220c:	7c 01       	movw	r14, r24
    220e:	c4 2f       	mov	r28, r20
    2210:	80 90 a1 17 	lds	r8, 0x17A1	; 0x8017a1 <xTickCount>
    2214:	90 90 a2 17 	lds	r9, 0x17A2	; 0x8017a2 <xTickCount+0x1>
    2218:	a0 90 a3 17 	lds	r10, 0x17A3	; 0x8017a3 <xTickCount+0x2>
    221c:	b0 90 a4 17 	lds	r11, 0x17A4	; 0x8017a4 <xTickCount+0x3>
    2220:	80 91 0e 18 	lds	r24, 0x180E	; 0x80180e <pxCurrentTCB>
    2224:	90 91 0f 18 	lds	r25, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2228:	02 96       	adiw	r24, 0x02	; 2
    222a:	0e 94 99 08 	call	0x1132	; 0x1132 <uxListRemove>
    222e:	8f ef       	ldi	r24, 0xFF	; 255
    2230:	c8 16       	cp	r12, r24
    2232:	d8 06       	cpc	r13, r24
    2234:	e8 06       	cpc	r14, r24
    2236:	f8 06       	cpc	r15, r24
    2238:	69 f4       	brne	.+26     	; 0x2254 <__stack+0x55>
    223a:	cc 23       	and	r28, r28
    223c:	59 f0       	breq	.+22     	; 0x2254 <__stack+0x55>
    223e:	60 91 0e 18 	lds	r22, 0x180E	; 0x80180e <pxCurrentTCB>
    2242:	70 91 0f 18 	lds	r23, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2246:	6e 5f       	subi	r22, 0xFE	; 254
    2248:	7f 4f       	sbci	r23, 0xFF	; 255
    224a:	86 ea       	ldi	r24, 0xA6	; 166
    224c:	97 e1       	ldi	r25, 0x17	; 23
    224e:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsertEnd>
    2252:	3f c0       	rjmp	.+126    	; 0x22d2 <__stack+0xd3>
    2254:	c8 0c       	add	r12, r8
    2256:	d9 1c       	adc	r13, r9
    2258:	ea 1c       	adc	r14, r10
    225a:	fb 1c       	adc	r15, r11
    225c:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    2260:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2264:	c2 82       	std	Z+2, r12	; 0x02
    2266:	d3 82       	std	Z+3, r13	; 0x03
    2268:	e4 82       	std	Z+4, r14	; 0x04
    226a:	f5 82       	std	Z+5, r15	; 0x05
    226c:	c8 14       	cp	r12, r8
    226e:	d9 04       	cpc	r13, r9
    2270:	ea 04       	cpc	r14, r10
    2272:	fb 04       	cpc	r15, r11
    2274:	68 f4       	brcc	.+26     	; 0x2290 <__stack+0x91>
    2276:	60 91 0e 18 	lds	r22, 0x180E	; 0x80180e <pxCurrentTCB>
    227a:	70 91 0f 18 	lds	r23, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    227e:	80 91 c8 17 	lds	r24, 0x17C8	; 0x8017c8 <pxOverflowDelayedTaskList>
    2282:	90 91 c9 17 	lds	r25, 0x17C9	; 0x8017c9 <pxOverflowDelayedTaskList+0x1>
    2286:	6e 5f       	subi	r22, 0xFE	; 254
    2288:	7f 4f       	sbci	r23, 0xFF	; 255
    228a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <vListInsert>
    228e:	21 c0       	rjmp	.+66     	; 0x22d2 <__stack+0xd3>
    2290:	60 91 0e 18 	lds	r22, 0x180E	; 0x80180e <pxCurrentTCB>
    2294:	70 91 0f 18 	lds	r23, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2298:	80 91 ca 17 	lds	r24, 0x17CA	; 0x8017ca <pxDelayedTaskList>
    229c:	90 91 cb 17 	lds	r25, 0x17CB	; 0x8017cb <pxDelayedTaskList+0x1>
    22a0:	6e 5f       	subi	r22, 0xFE	; 254
    22a2:	7f 4f       	sbci	r23, 0xFF	; 255
    22a4:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <vListInsert>
    22a8:	80 91 97 17 	lds	r24, 0x1797	; 0x801797 <xNextTaskUnblockTime>
    22ac:	90 91 98 17 	lds	r25, 0x1798	; 0x801798 <xNextTaskUnblockTime+0x1>
    22b0:	a0 91 99 17 	lds	r26, 0x1799	; 0x801799 <xNextTaskUnblockTime+0x2>
    22b4:	b0 91 9a 17 	lds	r27, 0x179A	; 0x80179a <xNextTaskUnblockTime+0x3>
    22b8:	c8 16       	cp	r12, r24
    22ba:	d9 06       	cpc	r13, r25
    22bc:	ea 06       	cpc	r14, r26
    22be:	fb 06       	cpc	r15, r27
    22c0:	40 f4       	brcc	.+16     	; 0x22d2 <__stack+0xd3>
    22c2:	c0 92 97 17 	sts	0x1797, r12	; 0x801797 <xNextTaskUnblockTime>
    22c6:	d0 92 98 17 	sts	0x1798, r13	; 0x801798 <xNextTaskUnblockTime+0x1>
    22ca:	e0 92 99 17 	sts	0x1799, r14	; 0x801799 <xNextTaskUnblockTime+0x2>
    22ce:	f0 92 9a 17 	sts	0x179A, r15	; 0x80179a <xNextTaskUnblockTime+0x3>
    22d2:	cf 91       	pop	r28
    22d4:	ff 90       	pop	r15
    22d6:	ef 90       	pop	r14
    22d8:	df 90       	pop	r13
    22da:	cf 90       	pop	r12
    22dc:	bf 90       	pop	r11
    22de:	af 90       	pop	r10
    22e0:	9f 90       	pop	r9
    22e2:	8f 90       	pop	r8
    22e4:	08 95       	ret

000022e6 <xTaskCreate>:
    22e6:	4f 92       	push	r4
    22e8:	5f 92       	push	r5
    22ea:	6f 92       	push	r6
    22ec:	7f 92       	push	r7
    22ee:	8f 92       	push	r8
    22f0:	9f 92       	push	r9
    22f2:	af 92       	push	r10
    22f4:	bf 92       	push	r11
    22f6:	cf 92       	push	r12
    22f8:	df 92       	push	r13
    22fa:	ef 92       	push	r14
    22fc:	ff 92       	push	r15
    22fe:	0f 93       	push	r16
    2300:	cf 93       	push	r28
    2302:	df 93       	push	r29
    2304:	4c 01       	movw	r8, r24
    2306:	6b 01       	movw	r12, r22
    2308:	5a 01       	movw	r10, r20
    230a:	29 01       	movw	r4, r18
    230c:	ca 01       	movw	r24, r20
    230e:	0e 94 3c 07 	call	0xe78	; 0xe78 <pvPortMalloc>
    2312:	3c 01       	movw	r6, r24
    2314:	89 2b       	or	r24, r25
    2316:	09 f4       	brne	.+2      	; 0x231a <xTaskCreate+0x34>
    2318:	f4 c0       	rjmp	.+488    	; 0x2502 <xTaskCreate+0x21c>
    231a:	80 e3       	ldi	r24, 0x30	; 48
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	0e 94 3c 07 	call	0xe78	; 0xe78 <pvPortMalloc>
    2322:	ec 01       	movw	r28, r24
    2324:	89 2b       	or	r24, r25
    2326:	99 f0       	breq	.+38     	; 0x234e <xTaskCreate+0x68>
    2328:	7c 8e       	std	Y+28, r7	; 0x1c
    232a:	6b 8e       	std	Y+27, r6	; 0x1b
    232c:	a5 01       	movw	r20, r10
    232e:	65 ea       	ldi	r22, 0xA5	; 165
    2330:	70 e0       	ldi	r23, 0x00	; 0
    2332:	c3 01       	movw	r24, r6
    2334:	0e 94 aa 2c 	call	0x5954	; 0x5954 <memset>
    2338:	21 e0       	ldi	r18, 0x01	; 1
    233a:	a2 1a       	sub	r10, r18
    233c:	b1 08       	sbc	r11, r1
    233e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2340:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2342:	a8 0e       	add	r10, r24
    2344:	b9 1e       	adc	r11, r25
    2346:	c1 14       	cp	r12, r1
    2348:	d1 04       	cpc	r13, r1
    234a:	29 f4       	brne	.+10     	; 0x2356 <xTaskCreate+0x70>
    234c:	20 c0       	rjmp	.+64     	; 0x238e <xTaskCreate+0xa8>
    234e:	c3 01       	movw	r24, r6
    2350:	0e 94 f5 07 	call	0xfea	; 0xfea <vPortFree>
    2354:	d6 c0       	rjmp	.+428    	; 0x2502 <xTaskCreate+0x21c>
    2356:	d6 01       	movw	r26, r12
    2358:	8c 91       	ld	r24, X
    235a:	8d 8f       	std	Y+29, r24	; 0x1d
    235c:	8c 91       	ld	r24, X
    235e:	88 23       	and	r24, r24
    2360:	a1 f0       	breq	.+40     	; 0x238a <xTaskCreate+0xa4>
    2362:	ae 01       	movw	r20, r28
    2364:	42 5e       	subi	r20, 0xE2	; 226
    2366:	5f 4f       	sbci	r21, 0xFF	; 255
    2368:	f6 01       	movw	r30, r12
    236a:	31 96       	adiw	r30, 0x01	; 1
    236c:	b8 e0       	ldi	r27, 0x08	; 8
    236e:	cb 0e       	add	r12, r27
    2370:	d1 1c       	adc	r13, r1
    2372:	cf 01       	movw	r24, r30
    2374:	21 91       	ld	r18, Z+
    2376:	da 01       	movw	r26, r20
    2378:	2d 93       	st	X+, r18
    237a:	ad 01       	movw	r20, r26
    237c:	dc 01       	movw	r26, r24
    237e:	8c 91       	ld	r24, X
    2380:	88 23       	and	r24, r24
    2382:	19 f0       	breq	.+6      	; 0x238a <xTaskCreate+0xa4>
    2384:	ec 15       	cp	r30, r12
    2386:	fd 05       	cpc	r31, r13
    2388:	a1 f7       	brne	.-24     	; 0x2372 <xTaskCreate+0x8c>
    238a:	1c a2       	std	Y+36, r1	; 0x24
    238c:	01 c0       	rjmp	.+2      	; 0x2390 <xTaskCreate+0xaa>
    238e:	1d 8e       	std	Y+29, r1	; 0x1d
    2390:	04 30       	cpi	r16, 0x04	; 4
    2392:	08 f0       	brcs	.+2      	; 0x2396 <xTaskCreate+0xb0>
    2394:	03 e0       	ldi	r16, 0x03	; 3
    2396:	0a 8f       	std	Y+26, r16	; 0x1a
    2398:	0f a3       	std	Y+39, r16	; 0x27
    239a:	18 a6       	std	Y+40, r1	; 0x28
    239c:	6e 01       	movw	r12, r28
    239e:	b2 e0       	ldi	r27, 0x02	; 2
    23a0:	cb 0e       	add	r12, r27
    23a2:	d1 1c       	adc	r13, r1
    23a4:	c6 01       	movw	r24, r12
    23a6:	0e 94 37 08 	call	0x106e	; 0x106e <vListInitialiseItem>
    23aa:	ce 01       	movw	r24, r28
    23ac:	0e 96       	adiw	r24, 0x0e	; 14
    23ae:	0e 94 37 08 	call	0x106e	; 0x106e <vListInitialiseItem>
    23b2:	db 87       	std	Y+11, r29	; 0x0b
    23b4:	ca 87       	std	Y+10, r28	; 0x0a
    23b6:	84 e0       	ldi	r24, 0x04	; 4
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	a0 e0       	ldi	r26, 0x00	; 0
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	80 1b       	sub	r24, r16
    23c0:	91 09       	sbc	r25, r1
    23c2:	a1 09       	sbc	r26, r1
    23c4:	b1 09       	sbc	r27, r1
    23c6:	8e 87       	std	Y+14, r24	; 0x0e
    23c8:	9f 87       	std	Y+15, r25	; 0x0f
    23ca:	a8 8b       	std	Y+16, r26	; 0x10
    23cc:	b9 8b       	std	Y+17, r27	; 0x11
    23ce:	df 8b       	std	Y+23, r29	; 0x17
    23d0:	ce 8b       	std	Y+22, r28	; 0x16
    23d2:	1a a6       	std	Y+42, r1	; 0x2a
    23d4:	19 a6       	std	Y+41, r1	; 0x29
    23d6:	1b a6       	std	Y+43, r1	; 0x2b
    23d8:	1c a6       	std	Y+44, r1	; 0x2c
    23da:	1d a6       	std	Y+45, r1	; 0x2d
    23dc:	1e a6       	std	Y+46, r1	; 0x2e
    23de:	1f a6       	std	Y+47, r1	; 0x2f
    23e0:	a2 01       	movw	r20, r4
    23e2:	b4 01       	movw	r22, r8
    23e4:	c5 01       	movw	r24, r10
    23e6:	0e 94 c0 08 	call	0x1180	; 0x1180 <pxPortInitialiseStack>
    23ea:	99 83       	std	Y+1, r25	; 0x01
    23ec:	88 83       	st	Y, r24
    23ee:	e1 14       	cp	r14, r1
    23f0:	f1 04       	cpc	r15, r1
    23f2:	19 f0       	breq	.+6      	; 0x23fa <xTaskCreate+0x114>
    23f4:	f7 01       	movw	r30, r14
    23f6:	d1 83       	std	Z+1, r29	; 0x01
    23f8:	c0 83       	st	Z, r28
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	0f 92       	push	r0
    2400:	80 91 a5 17 	lds	r24, 0x17A5	; 0x8017a5 <uxCurrentNumberOfTasks>
    2404:	8f 5f       	subi	r24, 0xFF	; 255
    2406:	80 93 a5 17 	sts	0x17A5, r24	; 0x8017a5 <uxCurrentNumberOfTasks>
    240a:	80 91 0e 18 	lds	r24, 0x180E	; 0x80180e <pxCurrentTCB>
    240e:	90 91 0f 18 	lds	r25, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2412:	89 2b       	or	r24, r25
    2414:	d1 f5       	brne	.+116    	; 0x248a <xTaskCreate+0x1a4>
    2416:	d0 93 0f 18 	sts	0x180F, r29	; 0x80180f <pxCurrentTCB+0x1>
    241a:	c0 93 0e 18 	sts	0x180E, r28	; 0x80180e <pxCurrentTCB>
    241e:	80 91 a5 17 	lds	r24, 0x17A5	; 0x8017a5 <uxCurrentNumberOfTasks>
    2422:	81 30       	cpi	r24, 0x01	; 1
    2424:	09 f0       	breq	.+2      	; 0x2428 <xTaskCreate+0x142>
    2426:	41 c0       	rjmp	.+130    	; 0x24aa <xTaskCreate+0x1c4>
    2428:	82 ee       	ldi	r24, 0xE2	; 226
    242a:	97 e1       	ldi	r25, 0x17	; 23
    242c:	0e 94 26 08 	call	0x104c	; 0x104c <vListInitialise>
    2430:	8d ee       	ldi	r24, 0xED	; 237
    2432:	97 e1       	ldi	r25, 0x17	; 23
    2434:	0e 94 26 08 	call	0x104c	; 0x104c <vListInitialise>
    2438:	88 ef       	ldi	r24, 0xF8	; 248
    243a:	97 e1       	ldi	r25, 0x17	; 23
    243c:	0e 94 26 08 	call	0x104c	; 0x104c <vListInitialise>
    2440:	83 e0       	ldi	r24, 0x03	; 3
    2442:	98 e1       	ldi	r25, 0x18	; 24
    2444:	0e 94 26 08 	call	0x104c	; 0x104c <vListInitialise>
    2448:	87 ed       	ldi	r24, 0xD7	; 215
    244a:	97 e1       	ldi	r25, 0x17	; 23
    244c:	0e 94 26 08 	call	0x104c	; 0x104c <vListInitialise>
    2450:	8c ec       	ldi	r24, 0xCC	; 204
    2452:	97 e1       	ldi	r25, 0x17	; 23
    2454:	0e 94 26 08 	call	0x104c	; 0x104c <vListInitialise>
    2458:	8d eb       	ldi	r24, 0xBD	; 189
    245a:	97 e1       	ldi	r25, 0x17	; 23
    245c:	0e 94 26 08 	call	0x104c	; 0x104c <vListInitialise>
    2460:	82 eb       	ldi	r24, 0xB2	; 178
    2462:	97 e1       	ldi	r25, 0x17	; 23
    2464:	0e 94 26 08 	call	0x104c	; 0x104c <vListInitialise>
    2468:	86 ea       	ldi	r24, 0xA6	; 166
    246a:	97 e1       	ldi	r25, 0x17	; 23
    246c:	0e 94 26 08 	call	0x104c	; 0x104c <vListInitialise>
    2470:	87 ed       	ldi	r24, 0xD7	; 215
    2472:	97 e1       	ldi	r25, 0x17	; 23
    2474:	90 93 cb 17 	sts	0x17CB, r25	; 0x8017cb <pxDelayedTaskList+0x1>
    2478:	80 93 ca 17 	sts	0x17CA, r24	; 0x8017ca <pxDelayedTaskList>
    247c:	8c ec       	ldi	r24, 0xCC	; 204
    247e:	97 e1       	ldi	r25, 0x17	; 23
    2480:	90 93 c9 17 	sts	0x17C9, r25	; 0x8017c9 <pxOverflowDelayedTaskList+0x1>
    2484:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <pxOverflowDelayedTaskList>
    2488:	10 c0       	rjmp	.+32     	; 0x24aa <xTaskCreate+0x1c4>
    248a:	80 91 9f 17 	lds	r24, 0x179F	; 0x80179f <xSchedulerRunning>
    248e:	81 11       	cpse	r24, r1
    2490:	0c c0       	rjmp	.+24     	; 0x24aa <xTaskCreate+0x1c4>
    2492:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    2496:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    249a:	92 8d       	ldd	r25, Z+26	; 0x1a
    249c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    249e:	89 17       	cp	r24, r25
    24a0:	20 f0       	brcs	.+8      	; 0x24aa <xTaskCreate+0x1c4>
    24a2:	d0 93 0f 18 	sts	0x180F, r29	; 0x80180f <pxCurrentTCB+0x1>
    24a6:	c0 93 0e 18 	sts	0x180E, r28	; 0x80180e <pxCurrentTCB>
    24aa:	80 91 9b 17 	lds	r24, 0x179B	; 0x80179b <uxTaskNumber>
    24ae:	8f 5f       	subi	r24, 0xFF	; 255
    24b0:	80 93 9b 17 	sts	0x179B, r24	; 0x80179b <uxTaskNumber>
    24b4:	8d a3       	std	Y+37, r24	; 0x25
    24b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    24b8:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <uxTopReadyPriority>
    24bc:	98 17       	cp	r25, r24
    24be:	10 f4       	brcc	.+4      	; 0x24c4 <xTaskCreate+0x1de>
    24c0:	80 93 a0 17 	sts	0x17A0, r24	; 0x8017a0 <uxTopReadyPriority>
    24c4:	fb e0       	ldi	r31, 0x0B	; 11
    24c6:	8f 9f       	mul	r24, r31
    24c8:	c0 01       	movw	r24, r0
    24ca:	11 24       	eor	r1, r1
    24cc:	b6 01       	movw	r22, r12
    24ce:	8e 51       	subi	r24, 0x1E	; 30
    24d0:	98 4e       	sbci	r25, 0xE8	; 232
    24d2:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsertEnd>
    24d6:	0f 90       	pop	r0
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	80 91 9f 17 	lds	r24, 0x179F	; 0x80179f <xSchedulerRunning>
    24de:	88 23       	and	r24, r24
    24e0:	61 f0       	breq	.+24     	; 0x24fa <xTaskCreate+0x214>
    24e2:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    24e6:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    24ea:	92 8d       	ldd	r25, Z+26	; 0x1a
    24ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    24ee:	98 17       	cp	r25, r24
    24f0:	30 f4       	brcc	.+12     	; 0x24fe <xTaskCreate+0x218>
    24f2:	0e 94 6e 09 	call	0x12dc	; 0x12dc <vPortYield>
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	05 c0       	rjmp	.+10     	; 0x2504 <xTaskCreate+0x21e>
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	03 c0       	rjmp	.+6      	; 0x2504 <xTaskCreate+0x21e>
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	01 c0       	rjmp	.+2      	; 0x2504 <xTaskCreate+0x21e>
    2502:	8f ef       	ldi	r24, 0xFF	; 255
    2504:	df 91       	pop	r29
    2506:	cf 91       	pop	r28
    2508:	0f 91       	pop	r16
    250a:	ff 90       	pop	r15
    250c:	ef 90       	pop	r14
    250e:	df 90       	pop	r13
    2510:	cf 90       	pop	r12
    2512:	bf 90       	pop	r11
    2514:	af 90       	pop	r10
    2516:	9f 90       	pop	r9
    2518:	8f 90       	pop	r8
    251a:	7f 90       	pop	r7
    251c:	6f 90       	pop	r6
    251e:	5f 90       	pop	r5
    2520:	4f 90       	pop	r4
    2522:	08 95       	ret

00002524 <vTaskStartScheduler>:
    2524:	ef 92       	push	r14
    2526:	ff 92       	push	r15
    2528:	0f 93       	push	r16
    252a:	0f 2e       	mov	r0, r31
    252c:	f5 e9       	ldi	r31, 0x95	; 149
    252e:	ef 2e       	mov	r14, r31
    2530:	f7 e1       	ldi	r31, 0x17	; 23
    2532:	ff 2e       	mov	r15, r31
    2534:	f0 2d       	mov	r31, r0
    2536:	00 e0       	ldi	r16, 0x00	; 0
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 ec       	ldi	r20, 0xC0	; 192
    253e:	50 e0       	ldi	r21, 0x00	; 0
    2540:	6d ed       	ldi	r22, 0xDD	; 221
    2542:	73 e0       	ldi	r23, 0x03	; 3
    2544:	8d ec       	ldi	r24, 0xCD	; 205
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	ce de       	rcall	.-612    	; 0x22e6 <xTaskCreate>
    254a:	81 30       	cpi	r24, 0x01	; 1
    254c:	19 f5       	brne	.+70     	; 0x2594 <vTaskStartScheduler+0x70>
    254e:	2a d7       	rcall	.+3668   	; 0x33a4 <xTimerCreateTimerTask>
    2550:	81 30       	cpi	r24, 0x01	; 1
    2552:	01 f5       	brne	.+64     	; 0x2594 <vTaskStartScheduler+0x70>
    2554:	f8 94       	cli
    2556:	8f ef       	ldi	r24, 0xFF	; 255
    2558:	9f ef       	ldi	r25, 0xFF	; 255
    255a:	dc 01       	movw	r26, r24
    255c:	80 93 97 17 	sts	0x1797, r24	; 0x801797 <xNextTaskUnblockTime>
    2560:	90 93 98 17 	sts	0x1798, r25	; 0x801798 <xNextTaskUnblockTime+0x1>
    2564:	a0 93 99 17 	sts	0x1799, r26	; 0x801799 <xNextTaskUnblockTime+0x2>
    2568:	b0 93 9a 17 	sts	0x179A, r27	; 0x80179a <xNextTaskUnblockTime+0x3>
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	80 93 9f 17 	sts	0x179F, r24	; 0x80179f <xSchedulerRunning>
    2572:	10 92 a1 17 	sts	0x17A1, r1	; 0x8017a1 <xTickCount>
    2576:	10 92 a2 17 	sts	0x17A2, r1	; 0x8017a2 <xTickCount+0x1>
    257a:	10 92 a3 17 	sts	0x17A3, r1	; 0x8017a3 <xTickCount+0x2>
    257e:	10 92 a4 17 	sts	0x17A4, r1	; 0x8017a4 <xTickCount+0x3>
    2582:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    2586:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    258a:	81 a5       	ldd	r24, Z+41	; 0x29
    258c:	0e 94 73 05 	call	0xae6	; 0xae6 <task_switch_in>
    2590:	0e 94 32 09 	call	0x1264	; 0x1264 <xPortStartScheduler>
    2594:	0f 91       	pop	r16
    2596:	ff 90       	pop	r15
    2598:	ef 90       	pop	r14
    259a:	08 95       	ret

0000259c <vTaskSuspendAll>:
    259c:	80 91 94 17 	lds	r24, 0x1794	; 0x801794 <uxSchedulerSuspended>
    25a0:	8f 5f       	subi	r24, 0xFF	; 255
    25a2:	80 93 94 17 	sts	0x1794, r24	; 0x801794 <uxSchedulerSuspended>
    25a6:	08 95       	ret

000025a8 <xTaskGetTickCount>:
    25a8:	0f b6       	in	r0, 0x3f	; 63
    25aa:	f8 94       	cli
    25ac:	0f 92       	push	r0
    25ae:	60 91 a1 17 	lds	r22, 0x17A1	; 0x8017a1 <xTickCount>
    25b2:	70 91 a2 17 	lds	r23, 0x17A2	; 0x8017a2 <xTickCount+0x1>
    25b6:	80 91 a3 17 	lds	r24, 0x17A3	; 0x8017a3 <xTickCount+0x2>
    25ba:	90 91 a4 17 	lds	r25, 0x17A4	; 0x8017a4 <xTickCount+0x3>
    25be:	0f 90       	pop	r0
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	08 95       	ret

000025c4 <xTaskIncrementTick>:
    25c4:	9f 92       	push	r9
    25c6:	af 92       	push	r10
    25c8:	bf 92       	push	r11
    25ca:	cf 92       	push	r12
    25cc:	df 92       	push	r13
    25ce:	ef 92       	push	r14
    25d0:	ff 92       	push	r15
    25d2:	0f 93       	push	r16
    25d4:	1f 93       	push	r17
    25d6:	cf 93       	push	r28
    25d8:	df 93       	push	r29
    25da:	80 91 94 17 	lds	r24, 0x1794	; 0x801794 <uxSchedulerSuspended>
    25de:	81 11       	cpse	r24, r1
    25e0:	ad c0       	rjmp	.+346    	; 0x273c <xTaskIncrementTick+0x178>
    25e2:	c0 90 a1 17 	lds	r12, 0x17A1	; 0x8017a1 <xTickCount>
    25e6:	d0 90 a2 17 	lds	r13, 0x17A2	; 0x8017a2 <xTickCount+0x1>
    25ea:	e0 90 a3 17 	lds	r14, 0x17A3	; 0x8017a3 <xTickCount+0x2>
    25ee:	f0 90 a4 17 	lds	r15, 0x17A4	; 0x8017a4 <xTickCount+0x3>
    25f2:	8f ef       	ldi	r24, 0xFF	; 255
    25f4:	c8 1a       	sub	r12, r24
    25f6:	d8 0a       	sbc	r13, r24
    25f8:	e8 0a       	sbc	r14, r24
    25fa:	f8 0a       	sbc	r15, r24
    25fc:	c0 92 a1 17 	sts	0x17A1, r12	; 0x8017a1 <xTickCount>
    2600:	d0 92 a2 17 	sts	0x17A2, r13	; 0x8017a2 <xTickCount+0x1>
    2604:	e0 92 a3 17 	sts	0x17A3, r14	; 0x8017a3 <xTickCount+0x2>
    2608:	f0 92 a4 17 	sts	0x17A4, r15	; 0x8017a4 <xTickCount+0x3>
    260c:	c1 14       	cp	r12, r1
    260e:	d1 04       	cpc	r13, r1
    2610:	e1 04       	cpc	r14, r1
    2612:	f1 04       	cpc	r15, r1
    2614:	b1 f4       	brne	.+44     	; 0x2642 <xTaskIncrementTick+0x7e>
    2616:	80 91 ca 17 	lds	r24, 0x17CA	; 0x8017ca <pxDelayedTaskList>
    261a:	90 91 cb 17 	lds	r25, 0x17CB	; 0x8017cb <pxDelayedTaskList+0x1>
    261e:	20 91 c8 17 	lds	r18, 0x17C8	; 0x8017c8 <pxOverflowDelayedTaskList>
    2622:	30 91 c9 17 	lds	r19, 0x17C9	; 0x8017c9 <pxOverflowDelayedTaskList+0x1>
    2626:	30 93 cb 17 	sts	0x17CB, r19	; 0x8017cb <pxDelayedTaskList+0x1>
    262a:	20 93 ca 17 	sts	0x17CA, r18	; 0x8017ca <pxDelayedTaskList>
    262e:	90 93 c9 17 	sts	0x17C9, r25	; 0x8017c9 <pxOverflowDelayedTaskList+0x1>
    2632:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <pxOverflowDelayedTaskList>
    2636:	80 91 9c 17 	lds	r24, 0x179C	; 0x80179c <xNumOfOverflows>
    263a:	8f 5f       	subi	r24, 0xFF	; 255
    263c:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <xNumOfOverflows>
    2640:	b1 dd       	rcall	.-1182   	; 0x21a4 <prvResetNextTaskUnblockTime>
    2642:	80 91 97 17 	lds	r24, 0x1797	; 0x801797 <xNextTaskUnblockTime>
    2646:	90 91 98 17 	lds	r25, 0x1798	; 0x801798 <xNextTaskUnblockTime+0x1>
    264a:	a0 91 99 17 	lds	r26, 0x1799	; 0x801799 <xNextTaskUnblockTime+0x2>
    264e:	b0 91 9a 17 	lds	r27, 0x179A	; 0x80179a <xNextTaskUnblockTime+0x3>
    2652:	c8 16       	cp	r12, r24
    2654:	d9 06       	cpc	r13, r25
    2656:	ea 06       	cpc	r14, r26
    2658:	fb 06       	cpc	r15, r27
    265a:	10 f4       	brcc	.+4      	; 0x2660 <xTaskIncrementTick+0x9c>
    265c:	b1 2c       	mov	r11, r1
    265e:	5d c0       	rjmp	.+186    	; 0x271a <xTaskIncrementTick+0x156>
    2660:	b1 2c       	mov	r11, r1
    2662:	0f 2e       	mov	r0, r31
    2664:	fb e0       	ldi	r31, 0x0B	; 11
    2666:	af 2e       	mov	r10, r31
    2668:	f0 2d       	mov	r31, r0
    266a:	99 24       	eor	r9, r9
    266c:	93 94       	inc	r9
    266e:	e0 91 ca 17 	lds	r30, 0x17CA	; 0x8017ca <pxDelayedTaskList>
    2672:	f0 91 cb 17 	lds	r31, 0x17CB	; 0x8017cb <pxDelayedTaskList+0x1>
    2676:	80 81       	ld	r24, Z
    2678:	81 11       	cpse	r24, r1
    267a:	0c c0       	rjmp	.+24     	; 0x2694 <xTaskIncrementTick+0xd0>
    267c:	8f ef       	ldi	r24, 0xFF	; 255
    267e:	9f ef       	ldi	r25, 0xFF	; 255
    2680:	dc 01       	movw	r26, r24
    2682:	80 93 97 17 	sts	0x1797, r24	; 0x801797 <xNextTaskUnblockTime>
    2686:	90 93 98 17 	sts	0x1798, r25	; 0x801798 <xNextTaskUnblockTime+0x1>
    268a:	a0 93 99 17 	sts	0x1799, r26	; 0x801799 <xNextTaskUnblockTime+0x2>
    268e:	b0 93 9a 17 	sts	0x179A, r27	; 0x80179a <xNextTaskUnblockTime+0x3>
    2692:	43 c0       	rjmp	.+134    	; 0x271a <xTaskIncrementTick+0x156>
    2694:	e0 91 ca 17 	lds	r30, 0x17CA	; 0x8017ca <pxDelayedTaskList>
    2698:	f0 91 cb 17 	lds	r31, 0x17CB	; 0x8017cb <pxDelayedTaskList+0x1>
    269c:	07 80       	ldd	r0, Z+7	; 0x07
    269e:	f0 85       	ldd	r31, Z+8	; 0x08
    26a0:	e0 2d       	mov	r30, r0
    26a2:	c0 85       	ldd	r28, Z+8	; 0x08
    26a4:	d1 85       	ldd	r29, Z+9	; 0x09
    26a6:	8a 81       	ldd	r24, Y+2	; 0x02
    26a8:	9b 81       	ldd	r25, Y+3	; 0x03
    26aa:	ac 81       	ldd	r26, Y+4	; 0x04
    26ac:	bd 81       	ldd	r27, Y+5	; 0x05
    26ae:	c8 16       	cp	r12, r24
    26b0:	d9 06       	cpc	r13, r25
    26b2:	ea 06       	cpc	r14, r26
    26b4:	fb 06       	cpc	r15, r27
    26b6:	48 f4       	brcc	.+18     	; 0x26ca <xTaskIncrementTick+0x106>
    26b8:	80 93 97 17 	sts	0x1797, r24	; 0x801797 <xNextTaskUnblockTime>
    26bc:	90 93 98 17 	sts	0x1798, r25	; 0x801798 <xNextTaskUnblockTime+0x1>
    26c0:	a0 93 99 17 	sts	0x1799, r26	; 0x801799 <xNextTaskUnblockTime+0x2>
    26c4:	b0 93 9a 17 	sts	0x179A, r27	; 0x80179a <xNextTaskUnblockTime+0x3>
    26c8:	28 c0       	rjmp	.+80     	; 0x271a <xTaskIncrementTick+0x156>
    26ca:	8e 01       	movw	r16, r28
    26cc:	0e 5f       	subi	r16, 0xFE	; 254
    26ce:	1f 4f       	sbci	r17, 0xFF	; 255
    26d0:	c8 01       	movw	r24, r16
    26d2:	0e 94 99 08 	call	0x1132	; 0x1132 <uxListRemove>
    26d6:	88 8d       	ldd	r24, Y+24	; 0x18
    26d8:	99 8d       	ldd	r25, Y+25	; 0x19
    26da:	89 2b       	or	r24, r25
    26dc:	21 f0       	breq	.+8      	; 0x26e6 <xTaskIncrementTick+0x122>
    26de:	ce 01       	movw	r24, r28
    26e0:	0e 96       	adiw	r24, 0x0e	; 14
    26e2:	0e 94 99 08 	call	0x1132	; 0x1132 <uxListRemove>
    26e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26e8:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <uxTopReadyPriority>
    26ec:	98 17       	cp	r25, r24
    26ee:	10 f4       	brcc	.+4      	; 0x26f4 <xTaskIncrementTick+0x130>
    26f0:	80 93 a0 17 	sts	0x17A0, r24	; 0x8017a0 <uxTopReadyPriority>
    26f4:	a8 9e       	mul	r10, r24
    26f6:	c0 01       	movw	r24, r0
    26f8:	11 24       	eor	r1, r1
    26fa:	b8 01       	movw	r22, r16
    26fc:	8e 51       	subi	r24, 0x1E	; 30
    26fe:	98 4e       	sbci	r25, 0xE8	; 232
    2700:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsertEnd>
    2704:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    2708:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    270c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    270e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2710:	98 17       	cp	r25, r24
    2712:	08 f4       	brcc	.+2      	; 0x2716 <xTaskIncrementTick+0x152>
    2714:	ac cf       	rjmp	.-168    	; 0x266e <xTaskIncrementTick+0xaa>
    2716:	b9 2c       	mov	r11, r9
    2718:	aa cf       	rjmp	.-172    	; 0x266e <xTaskIncrementTick+0xaa>
    271a:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    271e:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2722:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2724:	8b e0       	ldi	r24, 0x0B	; 11
    2726:	e8 9f       	mul	r30, r24
    2728:	f0 01       	movw	r30, r0
    272a:	11 24       	eor	r1, r1
    272c:	ee 51       	subi	r30, 0x1E	; 30
    272e:	f8 4e       	sbci	r31, 0xE8	; 232
    2730:	80 81       	ld	r24, Z
    2732:	82 30       	cpi	r24, 0x02	; 2
    2734:	48 f0       	brcs	.+18     	; 0x2748 <xTaskIncrementTick+0x184>
    2736:	bb 24       	eor	r11, r11
    2738:	b3 94       	inc	r11
    273a:	06 c0       	rjmp	.+12     	; 0x2748 <xTaskIncrementTick+0x184>
    273c:	80 91 9e 17 	lds	r24, 0x179E	; 0x80179e <uxPendedTicks>
    2740:	8f 5f       	subi	r24, 0xFF	; 255
    2742:	80 93 9e 17 	sts	0x179E, r24	; 0x80179e <uxPendedTicks>
    2746:	b1 2c       	mov	r11, r1
    2748:	80 91 9d 17 	lds	r24, 0x179D	; 0x80179d <xYieldPending>
    274c:	88 23       	and	r24, r24
    274e:	11 f0       	breq	.+4      	; 0x2754 <xTaskIncrementTick+0x190>
    2750:	bb 24       	eor	r11, r11
    2752:	b3 94       	inc	r11
    2754:	8b 2d       	mov	r24, r11
    2756:	df 91       	pop	r29
    2758:	cf 91       	pop	r28
    275a:	1f 91       	pop	r17
    275c:	0f 91       	pop	r16
    275e:	ff 90       	pop	r15
    2760:	ef 90       	pop	r14
    2762:	df 90       	pop	r13
    2764:	cf 90       	pop	r12
    2766:	bf 90       	pop	r11
    2768:	af 90       	pop	r10
    276a:	9f 90       	pop	r9
    276c:	08 95       	ret

0000276e <xTaskResumeAll>:
    276e:	cf 92       	push	r12
    2770:	df 92       	push	r13
    2772:	ef 92       	push	r14
    2774:	ff 92       	push	r15
    2776:	0f 93       	push	r16
    2778:	1f 93       	push	r17
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29
    277e:	0f b6       	in	r0, 0x3f	; 63
    2780:	f8 94       	cli
    2782:	0f 92       	push	r0
    2784:	80 91 94 17 	lds	r24, 0x1794	; 0x801794 <uxSchedulerSuspended>
    2788:	81 50       	subi	r24, 0x01	; 1
    278a:	80 93 94 17 	sts	0x1794, r24	; 0x801794 <uxSchedulerSuspended>
    278e:	80 91 94 17 	lds	r24, 0x1794	; 0x801794 <uxSchedulerSuspended>
    2792:	81 11       	cpse	r24, r1
    2794:	5a c0       	rjmp	.+180    	; 0x284a <xTaskResumeAll+0xdc>
    2796:	80 91 a5 17 	lds	r24, 0x17A5	; 0x8017a5 <uxCurrentNumberOfTasks>
    279a:	81 11       	cpse	r24, r1
    279c:	2c c0       	rjmp	.+88     	; 0x27f6 <xTaskResumeAll+0x88>
    279e:	58 c0       	rjmp	.+176    	; 0x2850 <xTaskResumeAll+0xe2>
    27a0:	d7 01       	movw	r26, r14
    27a2:	17 96       	adiw	r26, 0x07	; 7
    27a4:	ed 91       	ld	r30, X+
    27a6:	fc 91       	ld	r31, X
    27a8:	18 97       	sbiw	r26, 0x08	; 8
    27aa:	c0 85       	ldd	r28, Z+8	; 0x08
    27ac:	d1 85       	ldd	r29, Z+9	; 0x09
    27ae:	ce 01       	movw	r24, r28
    27b0:	0e 96       	adiw	r24, 0x0e	; 14
    27b2:	0e 94 99 08 	call	0x1132	; 0x1132 <uxListRemove>
    27b6:	8e 01       	movw	r16, r28
    27b8:	0e 5f       	subi	r16, 0xFE	; 254
    27ba:	1f 4f       	sbci	r17, 0xFF	; 255
    27bc:	c8 01       	movw	r24, r16
    27be:	0e 94 99 08 	call	0x1132	; 0x1132 <uxListRemove>
    27c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27c4:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <uxTopReadyPriority>
    27c8:	98 17       	cp	r25, r24
    27ca:	10 f4       	brcc	.+4      	; 0x27d0 <xTaskResumeAll+0x62>
    27cc:	80 93 a0 17 	sts	0x17A0, r24	; 0x8017a0 <uxTopReadyPriority>
    27d0:	d8 9e       	mul	r13, r24
    27d2:	c0 01       	movw	r24, r0
    27d4:	11 24       	eor	r1, r1
    27d6:	b8 01       	movw	r22, r16
    27d8:	8e 51       	subi	r24, 0x1E	; 30
    27da:	98 4e       	sbci	r25, 0xE8	; 232
    27dc:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsertEnd>
    27e0:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    27e4:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    27e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    27ec:	98 17       	cp	r25, r24
    27ee:	88 f0       	brcs	.+34     	; 0x2812 <xTaskResumeAll+0xa4>
    27f0:	c0 92 9d 17 	sts	0x179D, r12	; 0x80179d <xYieldPending>
    27f4:	0e c0       	rjmp	.+28     	; 0x2812 <xTaskResumeAll+0xa4>
    27f6:	c0 e0       	ldi	r28, 0x00	; 0
    27f8:	d0 e0       	ldi	r29, 0x00	; 0
    27fa:	0f 2e       	mov	r0, r31
    27fc:	fd eb       	ldi	r31, 0xBD	; 189
    27fe:	ef 2e       	mov	r14, r31
    2800:	f7 e1       	ldi	r31, 0x17	; 23
    2802:	ff 2e       	mov	r15, r31
    2804:	f0 2d       	mov	r31, r0
    2806:	0f 2e       	mov	r0, r31
    2808:	fb e0       	ldi	r31, 0x0B	; 11
    280a:	df 2e       	mov	r13, r31
    280c:	f0 2d       	mov	r31, r0
    280e:	cc 24       	eor	r12, r12
    2810:	c3 94       	inc	r12
    2812:	f7 01       	movw	r30, r14
    2814:	80 81       	ld	r24, Z
    2816:	81 11       	cpse	r24, r1
    2818:	c3 cf       	rjmp	.-122    	; 0x27a0 <xTaskResumeAll+0x32>
    281a:	cd 2b       	or	r28, r29
    281c:	09 f0       	breq	.+2      	; 0x2820 <xTaskResumeAll+0xb2>
    281e:	c2 dc       	rcall	.-1660   	; 0x21a4 <prvResetNextTaskUnblockTime>
    2820:	c0 91 9e 17 	lds	r28, 0x179E	; 0x80179e <uxPendedTicks>
    2824:	cc 23       	and	r28, r28
    2826:	49 f0       	breq	.+18     	; 0x283a <xTaskResumeAll+0xcc>
    2828:	d1 e0       	ldi	r29, 0x01	; 1
    282a:	cc de       	rcall	.-616    	; 0x25c4 <xTaskIncrementTick>
    282c:	81 11       	cpse	r24, r1
    282e:	d0 93 9d 17 	sts	0x179D, r29	; 0x80179d <xYieldPending>
    2832:	c1 50       	subi	r28, 0x01	; 1
    2834:	d1 f7       	brne	.-12     	; 0x282a <xTaskResumeAll+0xbc>
    2836:	10 92 9e 17 	sts	0x179E, r1	; 0x80179e <uxPendedTicks>
    283a:	80 91 9d 17 	lds	r24, 0x179D	; 0x80179d <xYieldPending>
    283e:	88 23       	and	r24, r24
    2840:	31 f0       	breq	.+12     	; 0x284e <xTaskResumeAll+0xe0>
    2842:	0e 94 6e 09 	call	0x12dc	; 0x12dc <vPortYield>
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	03 c0       	rjmp	.+6      	; 0x2850 <xTaskResumeAll+0xe2>
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	01 c0       	rjmp	.+2      	; 0x2850 <xTaskResumeAll+0xe2>
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	0f 90       	pop	r0
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	df 91       	pop	r29
    2856:	cf 91       	pop	r28
    2858:	1f 91       	pop	r17
    285a:	0f 91       	pop	r16
    285c:	ff 90       	pop	r15
    285e:	ef 90       	pop	r14
    2860:	df 90       	pop	r13
    2862:	cf 90       	pop	r12
    2864:	08 95       	ret

00002866 <vTaskDelayUntil>:
    2866:	cf 92       	push	r12
    2868:	df 92       	push	r13
    286a:	ef 92       	push	r14
    286c:	ff 92       	push	r15
    286e:	0f 93       	push	r16
    2870:	1f 93       	push	r17
    2872:	cf 93       	push	r28
    2874:	df 93       	push	r29
    2876:	ec 01       	movw	r28, r24
    2878:	6a 01       	movw	r12, r20
    287a:	7b 01       	movw	r14, r22
    287c:	8f de       	rcall	.-738    	; 0x259c <vTaskSuspendAll>
    287e:	00 91 a1 17 	lds	r16, 0x17A1	; 0x8017a1 <xTickCount>
    2882:	10 91 a2 17 	lds	r17, 0x17A2	; 0x8017a2 <xTickCount+0x1>
    2886:	20 91 a3 17 	lds	r18, 0x17A3	; 0x8017a3 <xTickCount+0x2>
    288a:	30 91 a4 17 	lds	r19, 0x17A4	; 0x8017a4 <xTickCount+0x3>
    288e:	88 81       	ld	r24, Y
    2890:	99 81       	ldd	r25, Y+1	; 0x01
    2892:	aa 81       	ldd	r26, Y+2	; 0x02
    2894:	bb 81       	ldd	r27, Y+3	; 0x03
    2896:	ac 01       	movw	r20, r24
    2898:	bd 01       	movw	r22, r26
    289a:	4c 0d       	add	r20, r12
    289c:	5d 1d       	adc	r21, r13
    289e:	6e 1d       	adc	r22, r14
    28a0:	7f 1d       	adc	r23, r15
    28a2:	08 17       	cp	r16, r24
    28a4:	19 07       	cpc	r17, r25
    28a6:	2a 07       	cpc	r18, r26
    28a8:	3b 07       	cpc	r19, r27
    28aa:	78 f4       	brcc	.+30     	; 0x28ca <vTaskDelayUntil+0x64>
    28ac:	48 17       	cp	r20, r24
    28ae:	59 07       	cpc	r21, r25
    28b0:	6a 07       	cpc	r22, r26
    28b2:	7b 07       	cpc	r23, r27
    28b4:	40 f5       	brcc	.+80     	; 0x2906 <vTaskDelayUntil+0xa0>
    28b6:	48 83       	st	Y, r20
    28b8:	59 83       	std	Y+1, r21	; 0x01
    28ba:	6a 83       	std	Y+2, r22	; 0x02
    28bc:	7b 83       	std	Y+3, r23	; 0x03
    28be:	04 17       	cp	r16, r20
    28c0:	15 07       	cpc	r17, r21
    28c2:	26 07       	cpc	r18, r22
    28c4:	37 07       	cpc	r19, r23
    28c6:	a0 f4       	brcc	.+40     	; 0x28f0 <vTaskDelayUntil+0x8a>
    28c8:	0b c0       	rjmp	.+22     	; 0x28e0 <vTaskDelayUntil+0x7a>
    28ca:	48 17       	cp	r20, r24
    28cc:	59 07       	cpc	r21, r25
    28ce:	6a 07       	cpc	r22, r26
    28d0:	7b 07       	cpc	r23, r27
    28d2:	a0 f0       	brcs	.+40     	; 0x28fc <vTaskDelayUntil+0x96>
    28d4:	04 17       	cp	r16, r20
    28d6:	15 07       	cpc	r17, r21
    28d8:	26 07       	cpc	r18, r22
    28da:	37 07       	cpc	r19, r23
    28dc:	78 f0       	brcs	.+30     	; 0x28fc <vTaskDelayUntil+0x96>
    28de:	13 c0       	rjmp	.+38     	; 0x2906 <vTaskDelayUntil+0xa0>
    28e0:	cb 01       	movw	r24, r22
    28e2:	ba 01       	movw	r22, r20
    28e4:	60 1b       	sub	r22, r16
    28e6:	71 0b       	sbc	r23, r17
    28e8:	82 0b       	sbc	r24, r18
    28ea:	93 0b       	sbc	r25, r19
    28ec:	40 e0       	ldi	r20, 0x00	; 0
    28ee:	84 dc       	rcall	.-1784   	; 0x21f8 <prvAddCurrentTaskToDelayedList>
    28f0:	3e df       	rcall	.-388    	; 0x276e <xTaskResumeAll>
    28f2:	81 11       	cpse	r24, r1
    28f4:	0d c0       	rjmp	.+26     	; 0x2910 <vTaskDelayUntil+0xaa>
    28f6:	0e 94 6e 09 	call	0x12dc	; 0x12dc <vPortYield>
    28fa:	0a c0       	rjmp	.+20     	; 0x2910 <vTaskDelayUntil+0xaa>
    28fc:	48 83       	st	Y, r20
    28fe:	59 83       	std	Y+1, r21	; 0x01
    2900:	6a 83       	std	Y+2, r22	; 0x02
    2902:	7b 83       	std	Y+3, r23	; 0x03
    2904:	ed cf       	rjmp	.-38     	; 0x28e0 <vTaskDelayUntil+0x7a>
    2906:	48 83       	st	Y, r20
    2908:	59 83       	std	Y+1, r21	; 0x01
    290a:	6a 83       	std	Y+2, r22	; 0x02
    290c:	7b 83       	std	Y+3, r23	; 0x03
    290e:	f0 cf       	rjmp	.-32     	; 0x28f0 <vTaskDelayUntil+0x8a>
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	1f 91       	pop	r17
    2916:	0f 91       	pop	r16
    2918:	ff 90       	pop	r15
    291a:	ef 90       	pop	r14
    291c:	df 90       	pop	r13
    291e:	cf 90       	pop	r12
    2920:	08 95       	ret

00002922 <vTaskDelay>:
    2922:	cf 92       	push	r12
    2924:	df 92       	push	r13
    2926:	ef 92       	push	r14
    2928:	ff 92       	push	r15
    292a:	6b 01       	movw	r12, r22
    292c:	7c 01       	movw	r14, r24
    292e:	67 2b       	or	r22, r23
    2930:	68 2b       	or	r22, r24
    2932:	69 2b       	or	r22, r25
    2934:	41 f0       	breq	.+16     	; 0x2946 <vTaskDelay+0x24>
    2936:	32 de       	rcall	.-924    	; 0x259c <vTaskSuspendAll>
    2938:	40 e0       	ldi	r20, 0x00	; 0
    293a:	c7 01       	movw	r24, r14
    293c:	b6 01       	movw	r22, r12
    293e:	5c dc       	rcall	.-1864   	; 0x21f8 <prvAddCurrentTaskToDelayedList>
    2940:	16 df       	rcall	.-468    	; 0x276e <xTaskResumeAll>
    2942:	81 11       	cpse	r24, r1
    2944:	02 c0       	rjmp	.+4      	; 0x294a <vTaskDelay+0x28>
    2946:	0e 94 6e 09 	call	0x12dc	; 0x12dc <vPortYield>
    294a:	ff 90       	pop	r15
    294c:	ef 90       	pop	r14
    294e:	df 90       	pop	r13
    2950:	cf 90       	pop	r12
    2952:	08 95       	ret

00002954 <vTaskSwitchContext>:
    2954:	80 91 94 17 	lds	r24, 0x1794	; 0x801794 <uxSchedulerSuspended>
    2958:	88 23       	and	r24, r24
    295a:	21 f0       	breq	.+8      	; 0x2964 <vTaskSwitchContext+0x10>
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	80 93 9d 17 	sts	0x179D, r24	; 0x80179d <xYieldPending>
    2962:	08 95       	ret
    2964:	10 92 9d 17 	sts	0x179D, r1	; 0x80179d <xYieldPending>
    2968:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    296c:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2970:	81 a5       	ldd	r24, Z+41	; 0x29
    2972:	0e 94 7d 05 	call	0xafa	; 0xafa <task_switch_out>
    2976:	a0 91 0e 18 	lds	r26, 0x180E	; 0x80180e <pxCurrentTCB>
    297a:	b0 91 0f 18 	lds	r27, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    297e:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    2982:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2986:	2d 91       	ld	r18, X+
    2988:	3c 91       	ld	r19, X
    298a:	83 8d       	ldd	r24, Z+27	; 0x1b
    298c:	94 8d       	ldd	r25, Z+28	; 0x1c
    298e:	82 17       	cp	r24, r18
    2990:	93 07       	cpc	r25, r19
    2992:	58 f0       	brcs	.+22     	; 0x29aa <vTaskSwitchContext+0x56>
    2994:	60 91 0e 18 	lds	r22, 0x180E	; 0x80180e <pxCurrentTCB>
    2998:	70 91 0f 18 	lds	r23, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    299c:	80 91 0e 18 	lds	r24, 0x180E	; 0x80180e <pxCurrentTCB>
    29a0:	90 91 0f 18 	lds	r25, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    29a4:	63 5e       	subi	r22, 0xE3	; 227
    29a6:	7f 4f       	sbci	r23, 0xFF	; 255
    29a8:	20 d6       	rcall	.+3136   	; 0x35ea <vApplicationStackOverflowHook>
    29aa:	80 91 a0 17 	lds	r24, 0x17A0	; 0x8017a0 <uxTopReadyPriority>
    29ae:	28 2f       	mov	r18, r24
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	9b e0       	ldi	r25, 0x0B	; 11
    29b4:	89 9f       	mul	r24, r25
    29b6:	f0 01       	movw	r30, r0
    29b8:	11 24       	eor	r1, r1
    29ba:	ee 51       	subi	r30, 0x1E	; 30
    29bc:	f8 4e       	sbci	r31, 0xE8	; 232
    29be:	90 81       	ld	r25, Z
    29c0:	91 11       	cpse	r25, r1
    29c2:	0e c0       	rjmp	.+28     	; 0x29e0 <vTaskSwitchContext+0x8c>
    29c4:	4b e0       	ldi	r20, 0x0B	; 11
    29c6:	81 50       	subi	r24, 0x01	; 1
    29c8:	28 2f       	mov	r18, r24
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	42 9f       	mul	r20, r18
    29ce:	f0 01       	movw	r30, r0
    29d0:	43 9f       	mul	r20, r19
    29d2:	f0 0d       	add	r31, r0
    29d4:	11 24       	eor	r1, r1
    29d6:	ee 51       	subi	r30, 0x1E	; 30
    29d8:	f8 4e       	sbci	r31, 0xE8	; 232
    29da:	90 81       	ld	r25, Z
    29dc:	99 23       	and	r25, r25
    29de:	99 f3       	breq	.-26     	; 0x29c6 <vTaskSwitchContext+0x72>
    29e0:	9b e0       	ldi	r25, 0x0B	; 11
    29e2:	92 9f       	mul	r25, r18
    29e4:	a0 01       	movw	r20, r0
    29e6:	93 9f       	mul	r25, r19
    29e8:	50 0d       	add	r21, r0
    29ea:	11 24       	eor	r1, r1
    29ec:	da 01       	movw	r26, r20
    29ee:	ae 51       	subi	r26, 0x1E	; 30
    29f0:	b8 4e       	sbci	r27, 0xE8	; 232
    29f2:	11 96       	adiw	r26, 0x01	; 1
    29f4:	ed 91       	ld	r30, X+
    29f6:	fc 91       	ld	r31, X
    29f8:	12 97       	sbiw	r26, 0x02	; 2
    29fa:	04 80       	ldd	r0, Z+4	; 0x04
    29fc:	f5 81       	ldd	r31, Z+5	; 0x05
    29fe:	e0 2d       	mov	r30, r0
    2a00:	12 96       	adiw	r26, 0x02	; 2
    2a02:	fc 93       	st	X, r31
    2a04:	ee 93       	st	-X, r30
    2a06:	11 97       	sbiw	r26, 0x01	; 1
    2a08:	4b 51       	subi	r20, 0x1B	; 27
    2a0a:	58 4e       	sbci	r21, 0xE8	; 232
    2a0c:	e4 17       	cp	r30, r20
    2a0e:	f5 07       	cpc	r31, r21
    2a10:	29 f4       	brne	.+10     	; 0x2a1c <vTaskSwitchContext+0xc8>
    2a12:	44 81       	ldd	r20, Z+4	; 0x04
    2a14:	55 81       	ldd	r21, Z+5	; 0x05
    2a16:	fd 01       	movw	r30, r26
    2a18:	52 83       	std	Z+2, r21	; 0x02
    2a1a:	41 83       	std	Z+1, r20	; 0x01
    2a1c:	9b e0       	ldi	r25, 0x0B	; 11
    2a1e:	92 9f       	mul	r25, r18
    2a20:	f0 01       	movw	r30, r0
    2a22:	93 9f       	mul	r25, r19
    2a24:	f0 0d       	add	r31, r0
    2a26:	11 24       	eor	r1, r1
    2a28:	ee 51       	subi	r30, 0x1E	; 30
    2a2a:	f8 4e       	sbci	r31, 0xE8	; 232
    2a2c:	01 80       	ldd	r0, Z+1	; 0x01
    2a2e:	f2 81       	ldd	r31, Z+2	; 0x02
    2a30:	e0 2d       	mov	r30, r0
    2a32:	20 85       	ldd	r18, Z+8	; 0x08
    2a34:	31 85       	ldd	r19, Z+9	; 0x09
    2a36:	30 93 0f 18 	sts	0x180F, r19	; 0x80180f <pxCurrentTCB+0x1>
    2a3a:	20 93 0e 18 	sts	0x180E, r18	; 0x80180e <pxCurrentTCB>
    2a3e:	80 93 a0 17 	sts	0x17A0, r24	; 0x8017a0 <uxTopReadyPriority>
    2a42:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    2a46:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2a4a:	81 a5       	ldd	r24, Z+41	; 0x29
    2a4c:	0c 94 73 05 	jmp	0xae6	; 0xae6 <task_switch_in>
    2a50:	08 95       	ret

00002a52 <vTaskPlaceOnEventList>:
    2a52:	cf 92       	push	r12
    2a54:	df 92       	push	r13
    2a56:	ef 92       	push	r14
    2a58:	ff 92       	push	r15
    2a5a:	6a 01       	movw	r12, r20
    2a5c:	7b 01       	movw	r14, r22
    2a5e:	60 91 0e 18 	lds	r22, 0x180E	; 0x80180e <pxCurrentTCB>
    2a62:	70 91 0f 18 	lds	r23, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2a66:	62 5f       	subi	r22, 0xF2	; 242
    2a68:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <vListInsert>
    2a6e:	41 e0       	ldi	r20, 0x01	; 1
    2a70:	c7 01       	movw	r24, r14
    2a72:	b6 01       	movw	r22, r12
    2a74:	c1 db       	rcall	.-2174   	; 0x21f8 <prvAddCurrentTaskToDelayedList>
    2a76:	ff 90       	pop	r15
    2a78:	ef 90       	pop	r14
    2a7a:	df 90       	pop	r13
    2a7c:	cf 90       	pop	r12
    2a7e:	08 95       	ret

00002a80 <vTaskPlaceOnUnorderedEventList>:
    2a80:	cf 92       	push	r12
    2a82:	df 92       	push	r13
    2a84:	ef 92       	push	r14
    2a86:	ff 92       	push	r15
    2a88:	0f 93       	push	r16
    2a8a:	1f 93       	push	r17
    2a8c:	68 01       	movw	r12, r16
    2a8e:	79 01       	movw	r14, r18
    2a90:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    2a94:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2a98:	70 68       	ori	r23, 0x80	; 128
    2a9a:	46 87       	std	Z+14, r20	; 0x0e
    2a9c:	57 87       	std	Z+15, r21	; 0x0f
    2a9e:	60 8b       	std	Z+16, r22	; 0x10
    2aa0:	71 8b       	std	Z+17, r23	; 0x11
    2aa2:	60 91 0e 18 	lds	r22, 0x180E	; 0x80180e <pxCurrentTCB>
    2aa6:	70 91 0f 18 	lds	r23, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2aaa:	62 5f       	subi	r22, 0xF2	; 242
    2aac:	7f 4f       	sbci	r23, 0xFF	; 255
    2aae:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsertEnd>
    2ab2:	41 e0       	ldi	r20, 0x01	; 1
    2ab4:	c7 01       	movw	r24, r14
    2ab6:	b6 01       	movw	r22, r12
    2ab8:	9f db       	rcall	.-2242   	; 0x21f8 <prvAddCurrentTaskToDelayedList>
    2aba:	1f 91       	pop	r17
    2abc:	0f 91       	pop	r16
    2abe:	ff 90       	pop	r15
    2ac0:	ef 90       	pop	r14
    2ac2:	df 90       	pop	r13
    2ac4:	cf 90       	pop	r12
    2ac6:	08 95       	ret

00002ac8 <vTaskPlaceOnEventListRestricted>:
    2ac8:	cf 92       	push	r12
    2aca:	df 92       	push	r13
    2acc:	ef 92       	push	r14
    2ace:	ff 92       	push	r15
    2ad0:	cf 93       	push	r28
    2ad2:	6a 01       	movw	r12, r20
    2ad4:	7b 01       	movw	r14, r22
    2ad6:	c2 2f       	mov	r28, r18
    2ad8:	60 91 0e 18 	lds	r22, 0x180E	; 0x80180e <pxCurrentTCB>
    2adc:	70 91 0f 18 	lds	r23, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2ae0:	62 5f       	subi	r22, 0xF2	; 242
    2ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae4:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsertEnd>
    2ae8:	cc 23       	and	r28, r28
    2aea:	21 f0       	breq	.+8      	; 0x2af4 <vTaskPlaceOnEventListRestricted+0x2c>
    2aec:	cc 24       	eor	r12, r12
    2aee:	ca 94       	dec	r12
    2af0:	dc 2c       	mov	r13, r12
    2af2:	76 01       	movw	r14, r12
    2af4:	4c 2f       	mov	r20, r28
    2af6:	c7 01       	movw	r24, r14
    2af8:	b6 01       	movw	r22, r12
    2afa:	7e db       	rcall	.-2308   	; 0x21f8 <prvAddCurrentTaskToDelayedList>
    2afc:	cf 91       	pop	r28
    2afe:	ff 90       	pop	r15
    2b00:	ef 90       	pop	r14
    2b02:	df 90       	pop	r13
    2b04:	cf 90       	pop	r12
    2b06:	08 95       	ret

00002b08 <xTaskRemoveFromEventList>:
    2b08:	0f 93       	push	r16
    2b0a:	1f 93       	push	r17
    2b0c:	cf 93       	push	r28
    2b0e:	df 93       	push	r29
    2b10:	dc 01       	movw	r26, r24
    2b12:	17 96       	adiw	r26, 0x07	; 7
    2b14:	ed 91       	ld	r30, X+
    2b16:	fc 91       	ld	r31, X
    2b18:	18 97       	sbiw	r26, 0x08	; 8
    2b1a:	c0 85       	ldd	r28, Z+8	; 0x08
    2b1c:	d1 85       	ldd	r29, Z+9	; 0x09
    2b1e:	8e 01       	movw	r16, r28
    2b20:	02 5f       	subi	r16, 0xF2	; 242
    2b22:	1f 4f       	sbci	r17, 0xFF	; 255
    2b24:	c8 01       	movw	r24, r16
    2b26:	0e 94 99 08 	call	0x1132	; 0x1132 <uxListRemove>
    2b2a:	80 91 94 17 	lds	r24, 0x1794	; 0x801794 <uxSchedulerSuspended>
    2b2e:	81 11       	cpse	r24, r1
    2b30:	16 c0       	rjmp	.+44     	; 0x2b5e <xTaskRemoveFromEventList+0x56>
    2b32:	0c 50       	subi	r16, 0x0C	; 12
    2b34:	11 09       	sbc	r17, r1
    2b36:	c8 01       	movw	r24, r16
    2b38:	0e 94 99 08 	call	0x1132	; 0x1132 <uxListRemove>
    2b3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b3e:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <uxTopReadyPriority>
    2b42:	98 17       	cp	r25, r24
    2b44:	10 f4       	brcc	.+4      	; 0x2b4a <xTaskRemoveFromEventList+0x42>
    2b46:	80 93 a0 17 	sts	0x17A0, r24	; 0x8017a0 <uxTopReadyPriority>
    2b4a:	bb e0       	ldi	r27, 0x0B	; 11
    2b4c:	8b 9f       	mul	r24, r27
    2b4e:	c0 01       	movw	r24, r0
    2b50:	11 24       	eor	r1, r1
    2b52:	b8 01       	movw	r22, r16
    2b54:	8e 51       	subi	r24, 0x1E	; 30
    2b56:	98 4e       	sbci	r25, 0xE8	; 232
    2b58:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsertEnd>
    2b5c:	05 c0       	rjmp	.+10     	; 0x2b68 <xTaskRemoveFromEventList+0x60>
    2b5e:	b8 01       	movw	r22, r16
    2b60:	8d eb       	ldi	r24, 0xBD	; 189
    2b62:	97 e1       	ldi	r25, 0x17	; 23
    2b64:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsertEnd>
    2b68:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    2b6c:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2b70:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b72:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b74:	89 17       	cp	r24, r25
    2b76:	20 f4       	brcc	.+8      	; 0x2b80 <xTaskRemoveFromEventList+0x78>
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	80 93 9d 17 	sts	0x179D, r24	; 0x80179d <xYieldPending>
    2b7e:	01 c0       	rjmp	.+2      	; 0x2b82 <xTaskRemoveFromEventList+0x7a>
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	df 91       	pop	r29
    2b84:	cf 91       	pop	r28
    2b86:	1f 91       	pop	r17
    2b88:	0f 91       	pop	r16
    2b8a:	08 95       	ret

00002b8c <vTaskRemoveFromUnorderedEventList>:
    2b8c:	0f 93       	push	r16
    2b8e:	1f 93       	push	r17
    2b90:	cf 93       	push	r28
    2b92:	df 93       	push	r29
    2b94:	70 68       	ori	r23, 0x80	; 128
    2b96:	fc 01       	movw	r30, r24
    2b98:	40 83       	st	Z, r20
    2b9a:	51 83       	std	Z+1, r21	; 0x01
    2b9c:	62 83       	std	Z+2, r22	; 0x02
    2b9e:	73 83       	std	Z+3, r23	; 0x03
    2ba0:	c0 85       	ldd	r28, Z+8	; 0x08
    2ba2:	d1 85       	ldd	r29, Z+9	; 0x09
    2ba4:	0e 94 99 08 	call	0x1132	; 0x1132 <uxListRemove>
    2ba8:	8e 01       	movw	r16, r28
    2baa:	0e 5f       	subi	r16, 0xFE	; 254
    2bac:	1f 4f       	sbci	r17, 0xFF	; 255
    2bae:	c8 01       	movw	r24, r16
    2bb0:	0e 94 99 08 	call	0x1132	; 0x1132 <uxListRemove>
    2bb4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bb6:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <uxTopReadyPriority>
    2bba:	98 17       	cp	r25, r24
    2bbc:	10 f4       	brcc	.+4      	; 0x2bc2 <vTaskRemoveFromUnorderedEventList+0x36>
    2bbe:	80 93 a0 17 	sts	0x17A0, r24	; 0x8017a0 <uxTopReadyPriority>
    2bc2:	fb e0       	ldi	r31, 0x0B	; 11
    2bc4:	8f 9f       	mul	r24, r31
    2bc6:	c0 01       	movw	r24, r0
    2bc8:	11 24       	eor	r1, r1
    2bca:	b8 01       	movw	r22, r16
    2bcc:	8e 51       	subi	r24, 0x1E	; 30
    2bce:	98 4e       	sbci	r25, 0xE8	; 232
    2bd0:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsertEnd>
    2bd4:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    2bd8:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2bdc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2bde:	82 8d       	ldd	r24, Z+26	; 0x1a
    2be0:	89 17       	cp	r24, r25
    2be2:	18 f4       	brcc	.+6      	; 0x2bea <vTaskRemoveFromUnorderedEventList+0x5e>
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	80 93 9d 17 	sts	0x179D, r24	; 0x80179d <xYieldPending>
    2bea:	df 91       	pop	r29
    2bec:	cf 91       	pop	r28
    2bee:	1f 91       	pop	r17
    2bf0:	0f 91       	pop	r16
    2bf2:	08 95       	ret

00002bf4 <vTaskSetTimeOutState>:
    2bf4:	0f b6       	in	r0, 0x3f	; 63
    2bf6:	f8 94       	cli
    2bf8:	0f 92       	push	r0
    2bfa:	20 91 9c 17 	lds	r18, 0x179C	; 0x80179c <xNumOfOverflows>
    2bfe:	fc 01       	movw	r30, r24
    2c00:	20 83       	st	Z, r18
    2c02:	40 91 a1 17 	lds	r20, 0x17A1	; 0x8017a1 <xTickCount>
    2c06:	50 91 a2 17 	lds	r21, 0x17A2	; 0x8017a2 <xTickCount+0x1>
    2c0a:	60 91 a3 17 	lds	r22, 0x17A3	; 0x8017a3 <xTickCount+0x2>
    2c0e:	70 91 a4 17 	lds	r23, 0x17A4	; 0x8017a4 <xTickCount+0x3>
    2c12:	41 83       	std	Z+1, r20	; 0x01
    2c14:	52 83       	std	Z+2, r21	; 0x02
    2c16:	63 83       	std	Z+3, r22	; 0x03
    2c18:	74 83       	std	Z+4, r23	; 0x04
    2c1a:	0f 90       	pop	r0
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	08 95       	ret

00002c20 <vTaskInternalSetTimeOutState>:
    2c20:	20 91 9c 17 	lds	r18, 0x179C	; 0x80179c <xNumOfOverflows>
    2c24:	fc 01       	movw	r30, r24
    2c26:	20 83       	st	Z, r18
    2c28:	40 91 a1 17 	lds	r20, 0x17A1	; 0x8017a1 <xTickCount>
    2c2c:	50 91 a2 17 	lds	r21, 0x17A2	; 0x8017a2 <xTickCount+0x1>
    2c30:	60 91 a3 17 	lds	r22, 0x17A3	; 0x8017a3 <xTickCount+0x2>
    2c34:	70 91 a4 17 	lds	r23, 0x17A4	; 0x8017a4 <xTickCount+0x3>
    2c38:	41 83       	std	Z+1, r20	; 0x01
    2c3a:	52 83       	std	Z+2, r21	; 0x02
    2c3c:	63 83       	std	Z+3, r22	; 0x03
    2c3e:	74 83       	std	Z+4, r23	; 0x04
    2c40:	08 95       	ret

00002c42 <xTaskCheckForTimeOut>:
    2c42:	cf 92       	push	r12
    2c44:	df 92       	push	r13
    2c46:	ef 92       	push	r14
    2c48:	ff 92       	push	r15
    2c4a:	0f 93       	push	r16
    2c4c:	1f 93       	push	r17
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	fb 01       	movw	r30, r22
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	0f 92       	push	r0
    2c5a:	40 91 a1 17 	lds	r20, 0x17A1	; 0x8017a1 <xTickCount>
    2c5e:	50 91 a2 17 	lds	r21, 0x17A2	; 0x8017a2 <xTickCount+0x1>
    2c62:	60 91 a3 17 	lds	r22, 0x17A3	; 0x8017a3 <xTickCount+0x2>
    2c66:	70 91 a4 17 	lds	r23, 0x17A4	; 0x8017a4 <xTickCount+0x3>
    2c6a:	00 81       	ld	r16, Z
    2c6c:	11 81       	ldd	r17, Z+1	; 0x01
    2c6e:	22 81       	ldd	r18, Z+2	; 0x02
    2c70:	33 81       	ldd	r19, Z+3	; 0x03
    2c72:	0f 3f       	cpi	r16, 0xFF	; 255
    2c74:	af ef       	ldi	r26, 0xFF	; 255
    2c76:	1a 07       	cpc	r17, r26
    2c78:	2a 07       	cpc	r18, r26
    2c7a:	3a 07       	cpc	r19, r26
    2c7c:	49 f1       	breq	.+82     	; 0x2cd0 <xTaskCheckForTimeOut+0x8e>
    2c7e:	ec 01       	movw	r28, r24
    2c80:	c9 80       	ldd	r12, Y+1	; 0x01
    2c82:	da 80       	ldd	r13, Y+2	; 0x02
    2c84:	eb 80       	ldd	r14, Y+3	; 0x03
    2c86:	fc 80       	ldd	r15, Y+4	; 0x04
    2c88:	a0 91 9c 17 	lds	r26, 0x179C	; 0x80179c <xNumOfOverflows>
    2c8c:	b8 81       	ld	r27, Y
    2c8e:	ba 17       	cp	r27, r26
    2c90:	29 f0       	breq	.+10     	; 0x2c9c <xTaskCheckForTimeOut+0x5a>
    2c92:	4c 15       	cp	r20, r12
    2c94:	5d 05       	cpc	r21, r13
    2c96:	6e 05       	cpc	r22, r14
    2c98:	7f 05       	cpc	r23, r15
    2c9a:	e0 f4       	brcc	.+56     	; 0x2cd4 <xTaskCheckForTimeOut+0x92>
    2c9c:	4c 19       	sub	r20, r12
    2c9e:	5d 09       	sbc	r21, r13
    2ca0:	6e 09       	sbc	r22, r14
    2ca2:	7f 09       	sbc	r23, r15
    2ca4:	40 17       	cp	r20, r16
    2ca6:	51 07       	cpc	r21, r17
    2ca8:	62 07       	cpc	r22, r18
    2caa:	73 07       	cpc	r23, r19
    2cac:	58 f4       	brcc	.+22     	; 0x2cc4 <xTaskCheckForTimeOut+0x82>
    2cae:	04 1b       	sub	r16, r20
    2cb0:	15 0b       	sbc	r17, r21
    2cb2:	26 0b       	sbc	r18, r22
    2cb4:	37 0b       	sbc	r19, r23
    2cb6:	00 83       	st	Z, r16
    2cb8:	11 83       	std	Z+1, r17	; 0x01
    2cba:	22 83       	std	Z+2, r18	; 0x02
    2cbc:	33 83       	std	Z+3, r19	; 0x03
    2cbe:	b0 df       	rcall	.-160    	; 0x2c20 <vTaskInternalSetTimeOutState>
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	09 c0       	rjmp	.+18     	; 0x2cd6 <xTaskCheckForTimeOut+0x94>
    2cc4:	10 82       	st	Z, r1
    2cc6:	11 82       	std	Z+1, r1	; 0x01
    2cc8:	12 82       	std	Z+2, r1	; 0x02
    2cca:	13 82       	std	Z+3, r1	; 0x03
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	03 c0       	rjmp	.+6      	; 0x2cd6 <xTaskCheckForTimeOut+0x94>
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	01 c0       	rjmp	.+2      	; 0x2cd6 <xTaskCheckForTimeOut+0x94>
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	0f 90       	pop	r0
    2cd8:	0f be       	out	0x3f, r0	; 63
    2cda:	df 91       	pop	r29
    2cdc:	cf 91       	pop	r28
    2cde:	1f 91       	pop	r17
    2ce0:	0f 91       	pop	r16
    2ce2:	ff 90       	pop	r15
    2ce4:	ef 90       	pop	r14
    2ce6:	df 90       	pop	r13
    2ce8:	cf 90       	pop	r12
    2cea:	08 95       	ret

00002cec <vTaskMissedYield>:
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	80 93 9d 17 	sts	0x179D, r24	; 0x80179d <xYieldPending>
    2cf2:	08 95       	ret

00002cf4 <xTaskGetCurrentTaskHandle>:
    2cf4:	80 91 0e 18 	lds	r24, 0x180E	; 0x80180e <pxCurrentTCB>
    2cf8:	90 91 0f 18 	lds	r25, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2cfc:	08 95       	ret

00002cfe <xTaskGetSchedulerState>:
    2cfe:	80 91 9f 17 	lds	r24, 0x179F	; 0x80179f <xSchedulerRunning>
    2d02:	88 23       	and	r24, r24
    2d04:	31 f0       	breq	.+12     	; 0x2d12 <xTaskGetSchedulerState+0x14>
    2d06:	80 91 94 17 	lds	r24, 0x1794	; 0x801794 <uxSchedulerSuspended>
    2d0a:	88 23       	and	r24, r24
    2d0c:	21 f0       	breq	.+8      	; 0x2d16 <xTaskGetSchedulerState+0x18>
    2d0e:	80 e0       	ldi	r24, 0x00	; 0
    2d10:	08 95       	ret
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	08 95       	ret
    2d16:	82 e0       	ldi	r24, 0x02	; 2
    2d18:	08 95       	ret

00002d1a <xTaskPriorityInherit>:
    2d1a:	0f 93       	push	r16
    2d1c:	1f 93       	push	r17
    2d1e:	cf 93       	push	r28
    2d20:	df 93       	push	r29
    2d22:	fc 01       	movw	r30, r24
    2d24:	89 2b       	or	r24, r25
    2d26:	09 f4       	brne	.+2      	; 0x2d2a <xTaskPriorityInherit+0x10>
    2d28:	60 c0       	rjmp	.+192    	; 0x2dea <xTaskPriorityInherit+0xd0>
    2d2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d2c:	a0 91 0e 18 	lds	r26, 0x180E	; 0x80180e <pxCurrentTCB>
    2d30:	b0 91 0f 18 	lds	r27, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2d34:	5a 96       	adiw	r26, 0x1a	; 26
    2d36:	9c 91       	ld	r25, X
    2d38:	89 17       	cp	r24, r25
    2d3a:	08 f0       	brcs	.+2      	; 0x2d3e <xTaskPriorityInherit+0x24>
    2d3c:	4a c0       	rjmp	.+148    	; 0x2dd2 <xTaskPriorityInherit+0xb8>
    2d3e:	46 85       	ldd	r20, Z+14	; 0x0e
    2d40:	57 85       	ldd	r21, Z+15	; 0x0f
    2d42:	60 89       	ldd	r22, Z+16	; 0x10
    2d44:	71 89       	ldd	r23, Z+17	; 0x11
    2d46:	77 23       	and	r23, r23
    2d48:	94 f0       	brlt	.+36     	; 0x2d6e <xTaskPriorityInherit+0x54>
    2d4a:	a0 91 0e 18 	lds	r26, 0x180E	; 0x80180e <pxCurrentTCB>
    2d4e:	b0 91 0f 18 	lds	r27, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2d52:	5a 96       	adiw	r26, 0x1a	; 26
    2d54:	9c 91       	ld	r25, X
    2d56:	44 e0       	ldi	r20, 0x04	; 4
    2d58:	50 e0       	ldi	r21, 0x00	; 0
    2d5a:	60 e0       	ldi	r22, 0x00	; 0
    2d5c:	70 e0       	ldi	r23, 0x00	; 0
    2d5e:	49 1b       	sub	r20, r25
    2d60:	51 09       	sbc	r21, r1
    2d62:	61 09       	sbc	r22, r1
    2d64:	71 09       	sbc	r23, r1
    2d66:	46 87       	std	Z+14, r20	; 0x0e
    2d68:	57 87       	std	Z+15, r21	; 0x0f
    2d6a:	60 8b       	std	Z+16, r22	; 0x10
    2d6c:	71 8b       	std	Z+17, r23	; 0x11
    2d6e:	2b e0       	ldi	r18, 0x0B	; 11
    2d70:	82 9f       	mul	r24, r18
    2d72:	c0 01       	movw	r24, r0
    2d74:	11 24       	eor	r1, r1
    2d76:	8e 51       	subi	r24, 0x1E	; 30
    2d78:	98 4e       	sbci	r25, 0xE8	; 232
    2d7a:	24 85       	ldd	r18, Z+12	; 0x0c
    2d7c:	35 85       	ldd	r19, Z+13	; 0x0d
    2d7e:	28 17       	cp	r18, r24
    2d80:	39 07       	cpc	r19, r25
    2d82:	f1 f4       	brne	.+60     	; 0x2dc0 <xTaskPriorityInherit+0xa6>
    2d84:	8f 01       	movw	r16, r30
    2d86:	ef 01       	movw	r28, r30
    2d88:	22 96       	adiw	r28, 0x02	; 2
    2d8a:	ce 01       	movw	r24, r28
    2d8c:	0e 94 99 08 	call	0x1132	; 0x1132 <uxListRemove>
    2d90:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    2d94:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2d98:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d9a:	f8 01       	movw	r30, r16
    2d9c:	82 8f       	std	Z+26, r24	; 0x1a
    2d9e:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <uxTopReadyPriority>
    2da2:	98 17       	cp	r25, r24
    2da4:	10 f4       	brcc	.+4      	; 0x2daa <xTaskPriorityInherit+0x90>
    2da6:	80 93 a0 17 	sts	0x17A0, r24	; 0x8017a0 <uxTopReadyPriority>
    2daa:	fb e0       	ldi	r31, 0x0B	; 11
    2dac:	8f 9f       	mul	r24, r31
    2dae:	c0 01       	movw	r24, r0
    2db0:	11 24       	eor	r1, r1
    2db2:	be 01       	movw	r22, r28
    2db4:	8e 51       	subi	r24, 0x1E	; 30
    2db6:	98 4e       	sbci	r25, 0xE8	; 232
    2db8:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsertEnd>
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	16 c0       	rjmp	.+44     	; 0x2dec <xTaskPriorityInherit+0xd2>
    2dc0:	a0 91 0e 18 	lds	r26, 0x180E	; 0x80180e <pxCurrentTCB>
    2dc4:	b0 91 0f 18 	lds	r27, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2dc8:	5a 96       	adiw	r26, 0x1a	; 26
    2dca:	8c 91       	ld	r24, X
    2dcc:	82 8f       	std	Z+26, r24	; 0x1a
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	0d c0       	rjmp	.+26     	; 0x2dec <xTaskPriorityInherit+0xd2>
    2dd2:	a0 91 0e 18 	lds	r26, 0x180E	; 0x80180e <pxCurrentTCB>
    2dd6:	b0 91 0f 18 	lds	r27, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	27 a1       	ldd	r18, Z+39	; 0x27
    2dde:	5a 96       	adiw	r26, 0x1a	; 26
    2de0:	9c 91       	ld	r25, X
    2de2:	29 17       	cp	r18, r25
    2de4:	18 f0       	brcs	.+6      	; 0x2dec <xTaskPriorityInherit+0xd2>
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	01 c0       	rjmp	.+2      	; 0x2dec <xTaskPriorityInherit+0xd2>
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	1f 91       	pop	r17
    2df2:	0f 91       	pop	r16
    2df4:	08 95       	ret

00002df6 <xTaskPriorityDisinherit>:
    2df6:	0f 93       	push	r16
    2df8:	1f 93       	push	r17
    2dfa:	cf 93       	push	r28
    2dfc:	df 93       	push	r29
    2dfe:	fc 01       	movw	r30, r24
    2e00:	89 2b       	or	r24, r25
    2e02:	79 f1       	breq	.+94     	; 0x2e62 <xTaskPriorityDisinherit+0x6c>
    2e04:	80 a5       	ldd	r24, Z+40	; 0x28
    2e06:	81 50       	subi	r24, 0x01	; 1
    2e08:	80 a7       	std	Z+40, r24	; 0x28
    2e0a:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e0c:	97 a1       	ldd	r25, Z+39	; 0x27
    2e0e:	29 17       	cp	r18, r25
    2e10:	51 f1       	breq	.+84     	; 0x2e66 <xTaskPriorityDisinherit+0x70>
    2e12:	81 11       	cpse	r24, r1
    2e14:	2a c0       	rjmp	.+84     	; 0x2e6a <xTaskPriorityDisinherit+0x74>
    2e16:	ef 01       	movw	r28, r30
    2e18:	8f 01       	movw	r16, r30
    2e1a:	0e 5f       	subi	r16, 0xFE	; 254
    2e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1e:	c8 01       	movw	r24, r16
    2e20:	0e 94 99 08 	call	0x1132	; 0x1132 <uxListRemove>
    2e24:	8f a1       	ldd	r24, Y+39	; 0x27
    2e26:	8a 8f       	std	Y+26, r24	; 0x1a
    2e28:	44 e0       	ldi	r20, 0x04	; 4
    2e2a:	50 e0       	ldi	r21, 0x00	; 0
    2e2c:	60 e0       	ldi	r22, 0x00	; 0
    2e2e:	70 e0       	ldi	r23, 0x00	; 0
    2e30:	48 1b       	sub	r20, r24
    2e32:	51 09       	sbc	r21, r1
    2e34:	61 09       	sbc	r22, r1
    2e36:	71 09       	sbc	r23, r1
    2e38:	4e 87       	std	Y+14, r20	; 0x0e
    2e3a:	5f 87       	std	Y+15, r21	; 0x0f
    2e3c:	68 8b       	std	Y+16, r22	; 0x10
    2e3e:	79 8b       	std	Y+17, r23	; 0x11
    2e40:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <uxTopReadyPriority>
    2e44:	98 17       	cp	r25, r24
    2e46:	10 f4       	brcc	.+4      	; 0x2e4c <xTaskPriorityDisinherit+0x56>
    2e48:	80 93 a0 17 	sts	0x17A0, r24	; 0x8017a0 <uxTopReadyPriority>
    2e4c:	2b e0       	ldi	r18, 0x0B	; 11
    2e4e:	82 9f       	mul	r24, r18
    2e50:	c0 01       	movw	r24, r0
    2e52:	11 24       	eor	r1, r1
    2e54:	b8 01       	movw	r22, r16
    2e56:	8e 51       	subi	r24, 0x1E	; 30
    2e58:	98 4e       	sbci	r25, 0xE8	; 232
    2e5a:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsertEnd>
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	05 c0       	rjmp	.+10     	; 0x2e6c <xTaskPriorityDisinherit+0x76>
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	03 c0       	rjmp	.+6      	; 0x2e6c <xTaskPriorityDisinherit+0x76>
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	01 c0       	rjmp	.+2      	; 0x2e6c <xTaskPriorityDisinherit+0x76>
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	df 91       	pop	r29
    2e6e:	cf 91       	pop	r28
    2e70:	1f 91       	pop	r17
    2e72:	0f 91       	pop	r16
    2e74:	08 95       	ret

00002e76 <vTaskPriorityDisinheritAfterTimeout>:
    2e76:	0f 93       	push	r16
    2e78:	1f 93       	push	r17
    2e7a:	cf 93       	push	r28
    2e7c:	df 93       	push	r29
    2e7e:	fc 01       	movw	r30, r24
    2e80:	89 2b       	or	r24, r25
    2e82:	09 f4       	brne	.+2      	; 0x2e86 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2e84:	3f c0       	rjmp	.+126    	; 0x2f04 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2e86:	87 a1       	ldd	r24, Z+39	; 0x27
    2e88:	86 17       	cp	r24, r22
    2e8a:	08 f4       	brcc	.+2      	; 0x2e8e <vTaskPriorityDisinheritAfterTimeout+0x18>
    2e8c:	86 2f       	mov	r24, r22
    2e8e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e90:	98 17       	cp	r25, r24
    2e92:	c1 f1       	breq	.+112    	; 0x2f04 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2e94:	20 a5       	ldd	r18, Z+40	; 0x28
    2e96:	21 30       	cpi	r18, 0x01	; 1
    2e98:	a9 f5       	brne	.+106    	; 0x2f04 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2e9a:	82 8f       	std	Z+26, r24	; 0x1a
    2e9c:	46 85       	ldd	r20, Z+14	; 0x0e
    2e9e:	57 85       	ldd	r21, Z+15	; 0x0f
    2ea0:	60 89       	ldd	r22, Z+16	; 0x10
    2ea2:	71 89       	ldd	r23, Z+17	; 0x11
    2ea4:	77 23       	and	r23, r23
    2ea6:	64 f0       	brlt	.+24     	; 0x2ec0 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    2ea8:	44 e0       	ldi	r20, 0x04	; 4
    2eaa:	50 e0       	ldi	r21, 0x00	; 0
    2eac:	60 e0       	ldi	r22, 0x00	; 0
    2eae:	70 e0       	ldi	r23, 0x00	; 0
    2eb0:	48 1b       	sub	r20, r24
    2eb2:	51 09       	sbc	r21, r1
    2eb4:	61 09       	sbc	r22, r1
    2eb6:	71 09       	sbc	r23, r1
    2eb8:	46 87       	std	Z+14, r20	; 0x0e
    2eba:	57 87       	std	Z+15, r21	; 0x0f
    2ebc:	60 8b       	std	Z+16, r22	; 0x10
    2ebe:	71 8b       	std	Z+17, r23	; 0x11
    2ec0:	2b e0       	ldi	r18, 0x0B	; 11
    2ec2:	92 9f       	mul	r25, r18
    2ec4:	c0 01       	movw	r24, r0
    2ec6:	11 24       	eor	r1, r1
    2ec8:	8e 51       	subi	r24, 0x1E	; 30
    2eca:	98 4e       	sbci	r25, 0xE8	; 232
    2ecc:	24 85       	ldd	r18, Z+12	; 0x0c
    2ece:	35 85       	ldd	r19, Z+13	; 0x0d
    2ed0:	28 17       	cp	r18, r24
    2ed2:	39 07       	cpc	r19, r25
    2ed4:	b9 f4       	brne	.+46     	; 0x2f04 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2ed6:	ef 01       	movw	r28, r30
    2ed8:	8f 01       	movw	r16, r30
    2eda:	0e 5f       	subi	r16, 0xFE	; 254
    2edc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ede:	c8 01       	movw	r24, r16
    2ee0:	0e 94 99 08 	call	0x1132	; 0x1132 <uxListRemove>
    2ee4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ee6:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <uxTopReadyPriority>
    2eea:	98 17       	cp	r25, r24
    2eec:	10 f4       	brcc	.+4      	; 0x2ef2 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    2eee:	80 93 a0 17 	sts	0x17A0, r24	; 0x8017a0 <uxTopReadyPriority>
    2ef2:	2b e0       	ldi	r18, 0x0B	; 11
    2ef4:	82 9f       	mul	r24, r18
    2ef6:	c0 01       	movw	r24, r0
    2ef8:	11 24       	eor	r1, r1
    2efa:	b8 01       	movw	r22, r16
    2efc:	8e 51       	subi	r24, 0x1E	; 30
    2efe:	98 4e       	sbci	r25, 0xE8	; 232
    2f00:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsertEnd>
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
    2f08:	1f 91       	pop	r17
    2f0a:	0f 91       	pop	r16
    2f0c:	08 95       	ret

00002f0e <uxTaskResetEventItemValue>:
    2f0e:	cf 92       	push	r12
    2f10:	df 92       	push	r13
    2f12:	ef 92       	push	r14
    2f14:	ff 92       	push	r15
    2f16:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    2f1a:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2f1e:	66 85       	ldd	r22, Z+14	; 0x0e
    2f20:	77 85       	ldd	r23, Z+15	; 0x0f
    2f22:	80 89       	ldd	r24, Z+16	; 0x10
    2f24:	91 89       	ldd	r25, Z+17	; 0x11
    2f26:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    2f2a:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2f2e:	a0 91 0e 18 	lds	r26, 0x180E	; 0x80180e <pxCurrentTCB>
    2f32:	b0 91 0f 18 	lds	r27, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2f36:	5a 96       	adiw	r26, 0x1a	; 26
    2f38:	2c 91       	ld	r18, X
    2f3a:	c1 2c       	mov	r12, r1
    2f3c:	d1 2c       	mov	r13, r1
    2f3e:	76 01       	movw	r14, r12
    2f40:	68 94       	set
    2f42:	c2 f8       	bld	r12, 2
    2f44:	c2 1a       	sub	r12, r18
    2f46:	d1 08       	sbc	r13, r1
    2f48:	e1 08       	sbc	r14, r1
    2f4a:	f1 08       	sbc	r15, r1
    2f4c:	c6 86       	std	Z+14, r12	; 0x0e
    2f4e:	d7 86       	std	Z+15, r13	; 0x0f
    2f50:	e0 8a       	std	Z+16, r14	; 0x10
    2f52:	f1 8a       	std	Z+17, r15	; 0x11
    2f54:	ff 90       	pop	r15
    2f56:	ef 90       	pop	r14
    2f58:	df 90       	pop	r13
    2f5a:	cf 90       	pop	r12
    2f5c:	08 95       	ret

00002f5e <pvTaskIncrementMutexHeldCount>:
    2f5e:	80 91 0e 18 	lds	r24, 0x180E	; 0x80180e <pxCurrentTCB>
    2f62:	90 91 0f 18 	lds	r25, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2f66:	89 2b       	or	r24, r25
    2f68:	39 f0       	breq	.+14     	; 0x2f78 <pvTaskIncrementMutexHeldCount+0x1a>
    2f6a:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    2f6e:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2f72:	80 a5       	ldd	r24, Z+40	; 0x28
    2f74:	8f 5f       	subi	r24, 0xFF	; 255
    2f76:	80 a7       	std	Z+40, r24	; 0x28
    2f78:	80 91 0e 18 	lds	r24, 0x180E	; 0x80180e <pxCurrentTCB>
    2f7c:	90 91 0f 18 	lds	r25, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2f80:	08 95       	ret

00002f82 <xTaskNotifyWait>:
    2f82:	4f 92       	push	r4
    2f84:	5f 92       	push	r5
    2f86:	6f 92       	push	r6
    2f88:	7f 92       	push	r7
    2f8a:	8f 92       	push	r8
    2f8c:	9f 92       	push	r9
    2f8e:	af 92       	push	r10
    2f90:	bf 92       	push	r11
    2f92:	cf 92       	push	r12
    2f94:	df 92       	push	r13
    2f96:	ef 92       	push	r14
    2f98:	ff 92       	push	r15
    2f9a:	0f 93       	push	r16
    2f9c:	1f 93       	push	r17
    2f9e:	49 01       	movw	r8, r18
    2fa0:	5a 01       	movw	r10, r20
    2fa2:	0f b6       	in	r0, 0x3f	; 63
    2fa4:	f8 94       	cli
    2fa6:	0f 92       	push	r0
    2fa8:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    2fac:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2fb0:	27 a5       	ldd	r18, Z+47	; 0x2f
    2fb2:	22 30       	cpi	r18, 0x02	; 2
    2fb4:	39 f1       	breq	.+78     	; 0x3004 <xTaskNotifyWait+0x82>
    2fb6:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    2fba:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2fbe:	43 a4       	ldd	r4, Z+43	; 0x2b
    2fc0:	54 a4       	ldd	r5, Z+44	; 0x2c
    2fc2:	65 a4       	ldd	r6, Z+45	; 0x2d
    2fc4:	76 a4       	ldd	r7, Z+46	; 0x2e
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	80 95       	com	r24
    2fcc:	90 95       	com	r25
    2fce:	a0 95       	com	r26
    2fd0:	b0 95       	com	r27
    2fd2:	84 21       	and	r24, r4
    2fd4:	95 21       	and	r25, r5
    2fd6:	a6 21       	and	r26, r6
    2fd8:	b7 21       	and	r27, r7
    2fda:	83 a7       	std	Z+43, r24	; 0x2b
    2fdc:	94 a7       	std	Z+44, r25	; 0x2c
    2fde:	a5 a7       	std	Z+45, r26	; 0x2d
    2fe0:	b6 a7       	std	Z+46, r27	; 0x2e
    2fe2:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    2fe6:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	87 a7       	std	Z+47, r24	; 0x2f
    2fee:	c1 14       	cp	r12, r1
    2ff0:	d1 04       	cpc	r13, r1
    2ff2:	e1 04       	cpc	r14, r1
    2ff4:	f1 04       	cpc	r15, r1
    2ff6:	31 f0       	breq	.+12     	; 0x3004 <xTaskNotifyWait+0x82>
    2ff8:	41 e0       	ldi	r20, 0x01	; 1
    2ffa:	c7 01       	movw	r24, r14
    2ffc:	b6 01       	movw	r22, r12
    2ffe:	fc d8       	rcall	.-3592   	; 0x21f8 <prvAddCurrentTaskToDelayedList>
    3000:	0e 94 6e 09 	call	0x12dc	; 0x12dc <vPortYield>
    3004:	0f 90       	pop	r0
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	0f b6       	in	r0, 0x3f	; 63
    300a:	f8 94       	cli
    300c:	0f 92       	push	r0
    300e:	01 15       	cp	r16, r1
    3010:	11 05       	cpc	r17, r1
    3012:	69 f0       	breq	.+26     	; 0x302e <xTaskNotifyWait+0xac>
    3014:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    3018:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    301c:	83 a5       	ldd	r24, Z+43	; 0x2b
    301e:	94 a5       	ldd	r25, Z+44	; 0x2c
    3020:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3022:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3024:	f8 01       	movw	r30, r16
    3026:	80 83       	st	Z, r24
    3028:	91 83       	std	Z+1, r25	; 0x01
    302a:	a2 83       	std	Z+2, r26	; 0x02
    302c:	b3 83       	std	Z+3, r27	; 0x03
    302e:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    3032:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    3036:	87 a5       	ldd	r24, Z+47	; 0x2f
    3038:	82 30       	cpi	r24, 0x02	; 2
    303a:	b1 f4       	brne	.+44     	; 0x3068 <xTaskNotifyWait+0xe6>
    303c:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    3040:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    3044:	83 a5       	ldd	r24, Z+43	; 0x2b
    3046:	94 a5       	ldd	r25, Z+44	; 0x2c
    3048:	a5 a5       	ldd	r26, Z+45	; 0x2d
    304a:	b6 a5       	ldd	r27, Z+46	; 0x2e
    304c:	80 94       	com	r8
    304e:	90 94       	com	r9
    3050:	a0 94       	com	r10
    3052:	b0 94       	com	r11
    3054:	88 22       	and	r8, r24
    3056:	99 22       	and	r9, r25
    3058:	aa 22       	and	r10, r26
    305a:	bb 22       	and	r11, r27
    305c:	83 a6       	std	Z+43, r8	; 0x2b
    305e:	94 a6       	std	Z+44, r9	; 0x2c
    3060:	a5 a6       	std	Z+45, r10	; 0x2d
    3062:	b6 a6       	std	Z+46, r11	; 0x2e
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	01 c0       	rjmp	.+2      	; 0x306a <xTaskNotifyWait+0xe8>
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    306e:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    3072:	17 a6       	std	Z+47, r1	; 0x2f
    3074:	0f 90       	pop	r0
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	1f 91       	pop	r17
    307a:	0f 91       	pop	r16
    307c:	ff 90       	pop	r15
    307e:	ef 90       	pop	r14
    3080:	df 90       	pop	r13
    3082:	cf 90       	pop	r12
    3084:	bf 90       	pop	r11
    3086:	af 90       	pop	r10
    3088:	9f 90       	pop	r9
    308a:	8f 90       	pop	r8
    308c:	7f 90       	pop	r7
    308e:	6f 90       	pop	r6
    3090:	5f 90       	pop	r5
    3092:	4f 90       	pop	r4
    3094:	08 95       	ret

00003096 <xTaskGenericNotify>:
    3096:	0f 93       	push	r16
    3098:	1f 93       	push	r17
    309a:	cf 93       	push	r28
    309c:	df 93       	push	r29
    309e:	fc 01       	movw	r30, r24
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	f8 94       	cli
    30a4:	0f 92       	push	r0
    30a6:	01 15       	cp	r16, r1
    30a8:	11 05       	cpc	r17, r1
    30aa:	49 f0       	breq	.+18     	; 0x30be <xTaskGenericNotify+0x28>
    30ac:	83 a5       	ldd	r24, Z+43	; 0x2b
    30ae:	94 a5       	ldd	r25, Z+44	; 0x2c
    30b0:	a5 a5       	ldd	r26, Z+45	; 0x2d
    30b2:	b6 a5       	ldd	r27, Z+46	; 0x2e
    30b4:	e8 01       	movw	r28, r16
    30b6:	88 83       	st	Y, r24
    30b8:	99 83       	std	Y+1, r25	; 0x01
    30ba:	aa 83       	std	Y+2, r26	; 0x02
    30bc:	bb 83       	std	Y+3, r27	; 0x03
    30be:	87 a5       	ldd	r24, Z+47	; 0x2f
    30c0:	92 e0       	ldi	r25, 0x02	; 2
    30c2:	97 a7       	std	Z+47, r25	; 0x2f
    30c4:	22 30       	cpi	r18, 0x02	; 2
    30c6:	b1 f0       	breq	.+44     	; 0x30f4 <xTaskGenericNotify+0x5e>
    30c8:	18 f4       	brcc	.+6      	; 0x30d0 <xTaskGenericNotify+0x3a>
    30ca:	21 30       	cpi	r18, 0x01	; 1
    30cc:	31 f0       	breq	.+12     	; 0x30da <xTaskGenericNotify+0x44>
    30ce:	2a c0       	rjmp	.+84     	; 0x3124 <xTaskGenericNotify+0x8e>
    30d0:	23 30       	cpi	r18, 0x03	; 3
    30d2:	e9 f0       	breq	.+58     	; 0x310e <xTaskGenericNotify+0x78>
    30d4:	24 30       	cpi	r18, 0x04	; 4
    30d6:	01 f1       	breq	.+64     	; 0x3118 <xTaskGenericNotify+0x82>
    30d8:	25 c0       	rjmp	.+74     	; 0x3124 <xTaskGenericNotify+0x8e>
    30da:	03 a5       	ldd	r16, Z+43	; 0x2b
    30dc:	14 a5       	ldd	r17, Z+44	; 0x2c
    30de:	25 a5       	ldd	r18, Z+45	; 0x2d
    30e0:	36 a5       	ldd	r19, Z+46	; 0x2e
    30e2:	40 2b       	or	r20, r16
    30e4:	51 2b       	or	r21, r17
    30e6:	62 2b       	or	r22, r18
    30e8:	73 2b       	or	r23, r19
    30ea:	43 a7       	std	Z+43, r20	; 0x2b
    30ec:	54 a7       	std	Z+44, r21	; 0x2c
    30ee:	65 a7       	std	Z+45, r22	; 0x2d
    30f0:	76 a7       	std	Z+46, r23	; 0x2e
    30f2:	18 c0       	rjmp	.+48     	; 0x3124 <xTaskGenericNotify+0x8e>
    30f4:	43 a5       	ldd	r20, Z+43	; 0x2b
    30f6:	54 a5       	ldd	r21, Z+44	; 0x2c
    30f8:	65 a5       	ldd	r22, Z+45	; 0x2d
    30fa:	76 a5       	ldd	r23, Z+46	; 0x2e
    30fc:	4f 5f       	subi	r20, 0xFF	; 255
    30fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3100:	6f 4f       	sbci	r22, 0xFF	; 255
    3102:	7f 4f       	sbci	r23, 0xFF	; 255
    3104:	43 a7       	std	Z+43, r20	; 0x2b
    3106:	54 a7       	std	Z+44, r21	; 0x2c
    3108:	65 a7       	std	Z+45, r22	; 0x2d
    310a:	76 a7       	std	Z+46, r23	; 0x2e
    310c:	0b c0       	rjmp	.+22     	; 0x3124 <xTaskGenericNotify+0x8e>
    310e:	43 a7       	std	Z+43, r20	; 0x2b
    3110:	54 a7       	std	Z+44, r21	; 0x2c
    3112:	65 a7       	std	Z+45, r22	; 0x2d
    3114:	76 a7       	std	Z+46, r23	; 0x2e
    3116:	06 c0       	rjmp	.+12     	; 0x3124 <xTaskGenericNotify+0x8e>
    3118:	82 30       	cpi	r24, 0x02	; 2
    311a:	49 f1       	breq	.+82     	; 0x316e <xTaskGenericNotify+0xd8>
    311c:	43 a7       	std	Z+43, r20	; 0x2b
    311e:	54 a7       	std	Z+44, r21	; 0x2c
    3120:	65 a7       	std	Z+45, r22	; 0x2d
    3122:	76 a7       	std	Z+46, r23	; 0x2e
    3124:	81 30       	cpi	r24, 0x01	; 1
    3126:	29 f5       	brne	.+74     	; 0x3172 <xTaskGenericNotify+0xdc>
    3128:	ef 01       	movw	r28, r30
    312a:	8f 01       	movw	r16, r30
    312c:	0e 5f       	subi	r16, 0xFE	; 254
    312e:	1f 4f       	sbci	r17, 0xFF	; 255
    3130:	c8 01       	movw	r24, r16
    3132:	0e 94 99 08 	call	0x1132	; 0x1132 <uxListRemove>
    3136:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3138:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <uxTopReadyPriority>
    313c:	98 17       	cp	r25, r24
    313e:	10 f4       	brcc	.+4      	; 0x3144 <xTaskGenericNotify+0xae>
    3140:	80 93 a0 17 	sts	0x17A0, r24	; 0x8017a0 <uxTopReadyPriority>
    3144:	2b e0       	ldi	r18, 0x0B	; 11
    3146:	82 9f       	mul	r24, r18
    3148:	c0 01       	movw	r24, r0
    314a:	11 24       	eor	r1, r1
    314c:	b8 01       	movw	r22, r16
    314e:	8e 51       	subi	r24, 0x1E	; 30
    3150:	98 4e       	sbci	r25, 0xE8	; 232
    3152:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsertEnd>
    3156:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    315a:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    315e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3160:	82 8d       	ldd	r24, Z+26	; 0x1a
    3162:	89 17       	cp	r24, r25
    3164:	40 f4       	brcc	.+16     	; 0x3176 <xTaskGenericNotify+0xe0>
    3166:	0e 94 6e 09 	call	0x12dc	; 0x12dc <vPortYield>
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	05 c0       	rjmp	.+10     	; 0x3178 <xTaskGenericNotify+0xe2>
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	03 c0       	rjmp	.+6      	; 0x3178 <xTaskGenericNotify+0xe2>
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	01 c0       	rjmp	.+2      	; 0x3178 <xTaskGenericNotify+0xe2>
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	0f 90       	pop	r0
    317a:	0f be       	out	0x3f, r0	; 63
    317c:	df 91       	pop	r29
    317e:	cf 91       	pop	r28
    3180:	1f 91       	pop	r17
    3182:	0f 91       	pop	r16
    3184:	08 95       	ret

00003186 <xTaskGenericNotifyFromISR>:
    3186:	ef 92       	push	r14
    3188:	ff 92       	push	r15
    318a:	0f 93       	push	r16
    318c:	1f 93       	push	r17
    318e:	cf 93       	push	r28
    3190:	df 93       	push	r29
    3192:	fc 01       	movw	r30, r24
    3194:	01 15       	cp	r16, r1
    3196:	11 05       	cpc	r17, r1
    3198:	49 f0       	breq	.+18     	; 0x31ac <xTaskGenericNotifyFromISR+0x26>
    319a:	83 a5       	ldd	r24, Z+43	; 0x2b
    319c:	94 a5       	ldd	r25, Z+44	; 0x2c
    319e:	a5 a5       	ldd	r26, Z+45	; 0x2d
    31a0:	b6 a5       	ldd	r27, Z+46	; 0x2e
    31a2:	e8 01       	movw	r28, r16
    31a4:	88 83       	st	Y, r24
    31a6:	99 83       	std	Y+1, r25	; 0x01
    31a8:	aa 83       	std	Y+2, r26	; 0x02
    31aa:	bb 83       	std	Y+3, r27	; 0x03
    31ac:	87 a5       	ldd	r24, Z+47	; 0x2f
    31ae:	92 e0       	ldi	r25, 0x02	; 2
    31b0:	97 a7       	std	Z+47, r25	; 0x2f
    31b2:	22 30       	cpi	r18, 0x02	; 2
    31b4:	b1 f0       	breq	.+44     	; 0x31e2 <xTaskGenericNotifyFromISR+0x5c>
    31b6:	18 f4       	brcc	.+6      	; 0x31be <xTaskGenericNotifyFromISR+0x38>
    31b8:	21 30       	cpi	r18, 0x01	; 1
    31ba:	31 f0       	breq	.+12     	; 0x31c8 <xTaskGenericNotifyFromISR+0x42>
    31bc:	2a c0       	rjmp	.+84     	; 0x3212 <xTaskGenericNotifyFromISR+0x8c>
    31be:	23 30       	cpi	r18, 0x03	; 3
    31c0:	e9 f0       	breq	.+58     	; 0x31fc <xTaskGenericNotifyFromISR+0x76>
    31c2:	24 30       	cpi	r18, 0x04	; 4
    31c4:	01 f1       	breq	.+64     	; 0x3206 <xTaskGenericNotifyFromISR+0x80>
    31c6:	25 c0       	rjmp	.+74     	; 0x3212 <xTaskGenericNotifyFromISR+0x8c>
    31c8:	03 a5       	ldd	r16, Z+43	; 0x2b
    31ca:	14 a5       	ldd	r17, Z+44	; 0x2c
    31cc:	25 a5       	ldd	r18, Z+45	; 0x2d
    31ce:	36 a5       	ldd	r19, Z+46	; 0x2e
    31d0:	40 2b       	or	r20, r16
    31d2:	51 2b       	or	r21, r17
    31d4:	62 2b       	or	r22, r18
    31d6:	73 2b       	or	r23, r19
    31d8:	43 a7       	std	Z+43, r20	; 0x2b
    31da:	54 a7       	std	Z+44, r21	; 0x2c
    31dc:	65 a7       	std	Z+45, r22	; 0x2d
    31de:	76 a7       	std	Z+46, r23	; 0x2e
    31e0:	18 c0       	rjmp	.+48     	; 0x3212 <xTaskGenericNotifyFromISR+0x8c>
    31e2:	43 a5       	ldd	r20, Z+43	; 0x2b
    31e4:	54 a5       	ldd	r21, Z+44	; 0x2c
    31e6:	65 a5       	ldd	r22, Z+45	; 0x2d
    31e8:	76 a5       	ldd	r23, Z+46	; 0x2e
    31ea:	4f 5f       	subi	r20, 0xFF	; 255
    31ec:	5f 4f       	sbci	r21, 0xFF	; 255
    31ee:	6f 4f       	sbci	r22, 0xFF	; 255
    31f0:	7f 4f       	sbci	r23, 0xFF	; 255
    31f2:	43 a7       	std	Z+43, r20	; 0x2b
    31f4:	54 a7       	std	Z+44, r21	; 0x2c
    31f6:	65 a7       	std	Z+45, r22	; 0x2d
    31f8:	76 a7       	std	Z+46, r23	; 0x2e
    31fa:	0b c0       	rjmp	.+22     	; 0x3212 <xTaskGenericNotifyFromISR+0x8c>
    31fc:	43 a7       	std	Z+43, r20	; 0x2b
    31fe:	54 a7       	std	Z+44, r21	; 0x2c
    3200:	65 a7       	std	Z+45, r22	; 0x2d
    3202:	76 a7       	std	Z+46, r23	; 0x2e
    3204:	06 c0       	rjmp	.+12     	; 0x3212 <xTaskGenericNotifyFromISR+0x8c>
    3206:	82 30       	cpi	r24, 0x02	; 2
    3208:	d9 f1       	breq	.+118    	; 0x3280 <xTaskGenericNotifyFromISR+0xfa>
    320a:	43 a7       	std	Z+43, r20	; 0x2b
    320c:	54 a7       	std	Z+44, r21	; 0x2c
    320e:	65 a7       	std	Z+45, r22	; 0x2d
    3210:	76 a7       	std	Z+46, r23	; 0x2e
    3212:	81 30       	cpi	r24, 0x01	; 1
    3214:	b9 f5       	brne	.+110    	; 0x3284 <xTaskGenericNotifyFromISR+0xfe>
    3216:	ef 01       	movw	r28, r30
    3218:	80 91 94 17 	lds	r24, 0x1794	; 0x801794 <uxSchedulerSuspended>
    321c:	81 11       	cpse	r24, r1
    321e:	17 c0       	rjmp	.+46     	; 0x324e <xTaskGenericNotifyFromISR+0xc8>
    3220:	8f 01       	movw	r16, r30
    3222:	0e 5f       	subi	r16, 0xFE	; 254
    3224:	1f 4f       	sbci	r17, 0xFF	; 255
    3226:	c8 01       	movw	r24, r16
    3228:	0e 94 99 08 	call	0x1132	; 0x1132 <uxListRemove>
    322c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    322e:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <uxTopReadyPriority>
    3232:	98 17       	cp	r25, r24
    3234:	10 f4       	brcc	.+4      	; 0x323a <xTaskGenericNotifyFromISR+0xb4>
    3236:	80 93 a0 17 	sts	0x17A0, r24	; 0x8017a0 <uxTopReadyPriority>
    323a:	eb e0       	ldi	r30, 0x0B	; 11
    323c:	8e 9f       	mul	r24, r30
    323e:	c0 01       	movw	r24, r0
    3240:	11 24       	eor	r1, r1
    3242:	b8 01       	movw	r22, r16
    3244:	8e 51       	subi	r24, 0x1E	; 30
    3246:	98 4e       	sbci	r25, 0xE8	; 232
    3248:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsertEnd>
    324c:	07 c0       	rjmp	.+14     	; 0x325c <xTaskGenericNotifyFromISR+0xd6>
    324e:	bf 01       	movw	r22, r30
    3250:	62 5f       	subi	r22, 0xF2	; 242
    3252:	7f 4f       	sbci	r23, 0xFF	; 255
    3254:	8d eb       	ldi	r24, 0xBD	; 189
    3256:	97 e1       	ldi	r25, 0x17	; 23
    3258:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsertEnd>
    325c:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <pxCurrentTCB>
    3260:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <pxCurrentTCB+0x1>
    3264:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3266:	82 8d       	ldd	r24, Z+26	; 0x1a
    3268:	89 17       	cp	r24, r25
    326a:	70 f4       	brcc	.+28     	; 0x3288 <xTaskGenericNotifyFromISR+0x102>
    326c:	e1 14       	cp	r14, r1
    326e:	f1 04       	cpc	r15, r1
    3270:	19 f0       	breq	.+6      	; 0x3278 <xTaskGenericNotifyFromISR+0xf2>
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	e7 01       	movw	r28, r14
    3276:	88 83       	st	Y, r24
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	80 93 9d 17 	sts	0x179D, r24	; 0x80179d <xYieldPending>
    327e:	05 c0       	rjmp	.+10     	; 0x328a <xTaskGenericNotifyFromISR+0x104>
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	03 c0       	rjmp	.+6      	; 0x328a <xTaskGenericNotifyFromISR+0x104>
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	01 c0       	rjmp	.+2      	; 0x328a <xTaskGenericNotifyFromISR+0x104>
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	1f 91       	pop	r17
    3290:	0f 91       	pop	r16
    3292:	ff 90       	pop	r15
    3294:	ef 90       	pop	r14
    3296:	08 95       	ret

00003298 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3298:	00 97       	sbiw	r24, 0x00	; 0
    329a:	21 f4       	brne	.+8      	; 0x32a4 <xTaskNotifyStateClear+0xc>
    329c:	80 91 0e 18 	lds	r24, 0x180E	; 0x80180e <pxCurrentTCB>
    32a0:	90 91 0f 18 	lds	r25, 0x180F	; 0x80180f <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    32a4:	0f b6       	in	r0, 0x3f	; 63
    32a6:	f8 94       	cli
    32a8:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    32aa:	fc 01       	movw	r30, r24
    32ac:	27 a5       	ldd	r18, Z+47	; 0x2f
    32ae:	22 30       	cpi	r18, 0x02	; 2
    32b0:	19 f4       	brne	.+6      	; 0x32b8 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    32b2:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	01 c0       	rjmp	.+2      	; 0x32ba <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    32b8:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    32ba:	0f 90       	pop	r0
    32bc:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    32be:	08 95       	ret

000032c0 <prvInsertTimerInActiveList>:
    32c0:	cf 92       	push	r12
    32c2:	df 92       	push	r13
    32c4:	ef 92       	push	r14
    32c6:	ff 92       	push	r15
    32c8:	0f 93       	push	r16
    32ca:	1f 93       	push	r17
    32cc:	fc 01       	movw	r30, r24
    32ce:	42 83       	std	Z+2, r20	; 0x02
    32d0:	53 83       	std	Z+3, r21	; 0x03
    32d2:	64 83       	std	Z+4, r22	; 0x04
    32d4:	75 83       	std	Z+5, r23	; 0x05
    32d6:	93 87       	std	Z+11, r25	; 0x0b
    32d8:	82 87       	std	Z+10, r24	; 0x0a
    32da:	04 17       	cp	r16, r20
    32dc:	15 07       	cpc	r17, r21
    32de:	26 07       	cpc	r18, r22
    32e0:	37 07       	cpc	r19, r23
    32e2:	c0 f0       	brcs	.+48     	; 0x3314 <prvInsertTimerInActiveList+0x54>
    32e4:	0c 19       	sub	r16, r12
    32e6:	1d 09       	sbc	r17, r13
    32e8:	2e 09       	sbc	r18, r14
    32ea:	3f 09       	sbc	r19, r15
    32ec:	86 85       	ldd	r24, Z+14	; 0x0e
    32ee:	97 85       	ldd	r25, Z+15	; 0x0f
    32f0:	a0 89       	ldd	r26, Z+16	; 0x10
    32f2:	b1 89       	ldd	r27, Z+17	; 0x11
    32f4:	08 17       	cp	r16, r24
    32f6:	19 07       	cpc	r17, r25
    32f8:	2a 07       	cpc	r18, r26
    32fa:	3b 07       	cpc	r19, r27
    32fc:	00 f5       	brcc	.+64     	; 0x333e <prvInsertTimerInActiveList+0x7e>
    32fe:	bf 01       	movw	r22, r30
    3300:	6e 5f       	subi	r22, 0xFE	; 254
    3302:	7f 4f       	sbci	r23, 0xFF	; 255
    3304:	80 91 18 18 	lds	r24, 0x1818	; 0x801818 <pxOverflowTimerList>
    3308:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <pxOverflowTimerList+0x1>
    330c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <vListInsert>
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	18 c0       	rjmp	.+48     	; 0x3344 <prvInsertTimerInActiveList+0x84>
    3314:	0c 15       	cp	r16, r12
    3316:	1d 05       	cpc	r17, r13
    3318:	2e 05       	cpc	r18, r14
    331a:	3f 05       	cpc	r19, r15
    331c:	28 f4       	brcc	.+10     	; 0x3328 <prvInsertTimerInActiveList+0x68>
    331e:	4c 15       	cp	r20, r12
    3320:	5d 05       	cpc	r21, r13
    3322:	6e 05       	cpc	r22, r14
    3324:	7f 05       	cpc	r23, r15
    3326:	68 f4       	brcc	.+26     	; 0x3342 <prvInsertTimerInActiveList+0x82>
    3328:	bf 01       	movw	r22, r30
    332a:	6e 5f       	subi	r22, 0xFE	; 254
    332c:	7f 4f       	sbci	r23, 0xFF	; 255
    332e:	80 91 1a 18 	lds	r24, 0x181A	; 0x80181a <pxCurrentTimerList>
    3332:	90 91 1b 18 	lds	r25, 0x181B	; 0x80181b <pxCurrentTimerList+0x1>
    3336:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <vListInsert>
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	03 c0       	rjmp	.+6      	; 0x3344 <prvInsertTimerInActiveList+0x84>
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	01 c0       	rjmp	.+2      	; 0x3344 <prvInsertTimerInActiveList+0x84>
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	1f 91       	pop	r17
    3346:	0f 91       	pop	r16
    3348:	ff 90       	pop	r15
    334a:	ef 90       	pop	r14
    334c:	df 90       	pop	r13
    334e:	cf 90       	pop	r12
    3350:	08 95       	ret

00003352 <prvCheckForValidListAndQueue>:
    3352:	0f b6       	in	r0, 0x3f	; 63
    3354:	f8 94       	cli
    3356:	0f 92       	push	r0
    3358:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <xTimerQueue>
    335c:	90 91 17 18 	lds	r25, 0x1817	; 0x801817 <xTimerQueue+0x1>
    3360:	89 2b       	or	r24, r25
    3362:	e9 f4       	brne	.+58     	; 0x339e <prvCheckForValidListAndQueue+0x4c>
    3364:	87 e2       	ldi	r24, 0x27	; 39
    3366:	98 e1       	ldi	r25, 0x18	; 24
    3368:	0e 94 26 08 	call	0x104c	; 0x104c <vListInitialise>
    336c:	8c e1       	ldi	r24, 0x1C	; 28
    336e:	98 e1       	ldi	r25, 0x18	; 24
    3370:	0e 94 26 08 	call	0x104c	; 0x104c <vListInitialise>
    3374:	87 e2       	ldi	r24, 0x27	; 39
    3376:	98 e1       	ldi	r25, 0x18	; 24
    3378:	90 93 1b 18 	sts	0x181B, r25	; 0x80181b <pxCurrentTimerList+0x1>
    337c:	80 93 1a 18 	sts	0x181A, r24	; 0x80181a <pxCurrentTimerList>
    3380:	8c e1       	ldi	r24, 0x1C	; 28
    3382:	98 e1       	ldi	r25, 0x18	; 24
    3384:	90 93 19 18 	sts	0x1819, r25	; 0x801819 <pxOverflowTimerList+0x1>
    3388:	80 93 18 18 	sts	0x1818, r24	; 0x801818 <pxOverflowTimerList>
    338c:	40 e0       	ldi	r20, 0x00	; 0
    338e:	67 e0       	ldi	r22, 0x07	; 7
    3390:	8a e0       	ldi	r24, 0x0A	; 10
    3392:	0e 94 4a 0b 	call	0x1694	; 0x1694 <xQueueGenericCreate>
    3396:	90 93 17 18 	sts	0x1817, r25	; 0x801817 <xTimerQueue+0x1>
    339a:	80 93 16 18 	sts	0x1816, r24	; 0x801816 <xTimerQueue>
    339e:	0f 90       	pop	r0
    33a0:	0f be       	out	0x3f, r0	; 63
    33a2:	08 95       	ret

000033a4 <xTimerCreateTimerTask>:
    33a4:	ef 92       	push	r14
    33a6:	ff 92       	push	r15
    33a8:	0f 93       	push	r16
    33aa:	d3 df       	rcall	.-90     	; 0x3352 <prvCheckForValidListAndQueue>
    33ac:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <xTimerQueue>
    33b0:	90 91 17 18 	lds	r25, 0x1817	; 0x801817 <xTimerQueue+0x1>
    33b4:	89 2b       	or	r24, r25
    33b6:	91 f0       	breq	.+36     	; 0x33dc <xTimerCreateTimerTask+0x38>
    33b8:	0f 2e       	mov	r0, r31
    33ba:	f4 e1       	ldi	r31, 0x14	; 20
    33bc:	ef 2e       	mov	r14, r31
    33be:	f8 e1       	ldi	r31, 0x18	; 24
    33c0:	ff 2e       	mov	r15, r31
    33c2:	f0 2d       	mov	r31, r0
    33c4:	03 e0       	ldi	r16, 0x03	; 3
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	45 e5       	ldi	r20, 0x55	; 85
    33cc:	50 e0       	ldi	r21, 0x00	; 0
    33ce:	62 ee       	ldi	r22, 0xE2	; 226
    33d0:	73 e0       	ldi	r23, 0x03	; 3
    33d2:	84 e0       	ldi	r24, 0x04	; 4
    33d4:	91 e0       	ldi	r25, 0x01	; 1
    33d6:	0e 94 73 11 	call	0x22e6	; 0x22e6 <xTaskCreate>
    33da:	01 c0       	rjmp	.+2      	; 0x33de <xTimerCreateTimerTask+0x3a>
    33dc:	80 e0       	ldi	r24, 0x00	; 0
    33de:	0f 91       	pop	r16
    33e0:	ff 90       	pop	r15
    33e2:	ef 90       	pop	r14
    33e4:	08 95       	ret

000033e6 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    33e6:	8f 92       	push	r8
    33e8:	9f 92       	push	r9
    33ea:	af 92       	push	r10
    33ec:	bf 92       	push	r11
    33ee:	cf 92       	push	r12
    33f0:	df 92       	push	r13
    33f2:	ef 92       	push	r14
    33f4:	ff 92       	push	r15
    33f6:	0f 93       	push	r16
    33f8:	1f 93       	push	r17
    33fa:	cf 93       	push	r28
    33fc:	df 93       	push	r29
    33fe:	cd b7       	in	r28, 0x3d	; 61
    3400:	de b7       	in	r29, 0x3e	; 62
    3402:	27 97       	sbiw	r28, 0x07	; 7
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    340e:	e0 91 16 18 	lds	r30, 0x1816	; 0x801816 <xTimerQueue>
    3412:	f0 91 17 18 	lds	r31, 0x1817	; 0x801817 <xTimerQueue+0x1>
    3416:	30 97       	sbiw	r30, 0x00	; 0
    3418:	81 f1       	breq	.+96     	; 0x347a <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    341a:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    341c:	2a 83       	std	Y+2, r18	; 0x02
    341e:	3b 83       	std	Y+3, r19	; 0x03
    3420:	4c 83       	std	Y+4, r20	; 0x04
    3422:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3424:	9f 83       	std	Y+7, r25	; 0x07
    3426:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3428:	66 30       	cpi	r22, 0x06	; 6
    342a:	f4 f4       	brge	.+60     	; 0x3468 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    342c:	68 dc       	rcall	.-1840   	; 0x2cfe <xTaskGetSchedulerState>
    342e:	82 30       	cpi	r24, 0x02	; 2
    3430:	69 f4       	brne	.+26     	; 0x344c <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3432:	00 e0       	ldi	r16, 0x00	; 0
    3434:	a7 01       	movw	r20, r14
    3436:	96 01       	movw	r18, r12
    3438:	be 01       	movw	r22, r28
    343a:	6f 5f       	subi	r22, 0xFF	; 255
    343c:	7f 4f       	sbci	r23, 0xFF	; 255
    343e:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <xTimerQueue>
    3442:	90 91 17 18 	lds	r25, 0x1817	; 0x801817 <xTimerQueue+0x1>
    3446:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <xQueueGenericSend>
    344a:	18 c0       	rjmp	.+48     	; 0x347c <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    344c:	00 e0       	ldi	r16, 0x00	; 0
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	a9 01       	movw	r20, r18
    3454:	be 01       	movw	r22, r28
    3456:	6f 5f       	subi	r22, 0xFF	; 255
    3458:	7f 4f       	sbci	r23, 0xFF	; 255
    345a:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <xTimerQueue>
    345e:	90 91 17 18 	lds	r25, 0x1817	; 0x801817 <xTimerQueue+0x1>
    3462:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <xQueueGenericSend>
    3466:	0a c0       	rjmp	.+20     	; 0x347c <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	a8 01       	movw	r20, r16
    346c:	be 01       	movw	r22, r28
    346e:	6f 5f       	subi	r22, 0xFF	; 255
    3470:	7f 4f       	sbci	r23, 0xFF	; 255
    3472:	cf 01       	movw	r24, r30
    3474:	0e 94 33 0c 	call	0x1866	; 0x1866 <xQueueGenericSendFromISR>
    3478:	01 c0       	rjmp	.+2      	; 0x347c <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    347a:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    347c:	27 96       	adiw	r28, 0x07	; 7
    347e:	0f b6       	in	r0, 0x3f	; 63
    3480:	f8 94       	cli
    3482:	de bf       	out	0x3e, r29	; 62
    3484:	0f be       	out	0x3f, r0	; 63
    3486:	cd bf       	out	0x3d, r28	; 61
    3488:	df 91       	pop	r29
    348a:	cf 91       	pop	r28
    348c:	1f 91       	pop	r17
    348e:	0f 91       	pop	r16
    3490:	ff 90       	pop	r15
    3492:	ef 90       	pop	r14
    3494:	df 90       	pop	r13
    3496:	cf 90       	pop	r12
    3498:	bf 90       	pop	r11
    349a:	af 90       	pop	r10
    349c:	9f 90       	pop	r9
    349e:	8f 90       	pop	r8
    34a0:	08 95       	ret

000034a2 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    34a2:	2f 92       	push	r2
    34a4:	3f 92       	push	r3
    34a6:	4f 92       	push	r4
    34a8:	5f 92       	push	r5
    34aa:	6f 92       	push	r6
    34ac:	7f 92       	push	r7
    34ae:	8f 92       	push	r8
    34b0:	9f 92       	push	r9
    34b2:	af 92       	push	r10
    34b4:	bf 92       	push	r11
    34b6:	cf 92       	push	r12
    34b8:	df 92       	push	r13
    34ba:	ef 92       	push	r14
    34bc:	ff 92       	push	r15
    34be:	0f 93       	push	r16
    34c0:	1f 93       	push	r17
    34c2:	cf 93       	push	r28
    34c4:	df 93       	push	r29
    34c6:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    34c8:	6f d8       	rcall	.-3874   	; 0x25a8 <xTaskGetTickCount>
    34ca:	2b 01       	movw	r4, r22
    34cc:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    34ce:	80 91 10 18 	lds	r24, 0x1810	; 0x801810 <xLastTime.2432>
    34d2:	90 91 11 18 	lds	r25, 0x1811	; 0x801811 <xLastTime.2432+0x1>
    34d6:	a0 91 12 18 	lds	r26, 0x1812	; 0x801812 <xLastTime.2432+0x2>
    34da:	b0 91 13 18 	lds	r27, 0x1813	; 0x801813 <xLastTime.2432+0x3>
    34de:	48 16       	cp	r4, r24
    34e0:	59 06       	cpc	r5, r25
    34e2:	6a 06       	cpc	r6, r26
    34e4:	7b 06       	cpc	r7, r27
    34e6:	08 f0       	brcs	.+2      	; 0x34ea <prvSampleTimeNow+0x48>
    34e8:	53 c0       	rjmp	.+166    	; 0x3590 <prvSampleTimeNow+0xee>
    34ea:	3b c0       	rjmp	.+118    	; 0x3562 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    34ec:	07 80       	ldd	r0, Z+7	; 0x07
    34ee:	f0 85       	ldd	r31, Z+8	; 0x08
    34f0:	e0 2d       	mov	r30, r0
    34f2:	80 80       	ld	r8, Z
    34f4:	91 80       	ldd	r9, Z+1	; 0x01
    34f6:	a2 80       	ldd	r10, Z+2	; 0x02
    34f8:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    34fa:	c0 85       	ldd	r28, Z+8	; 0x08
    34fc:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    34fe:	8e 01       	movw	r16, r28
    3500:	0e 5f       	subi	r16, 0xFE	; 254
    3502:	1f 4f       	sbci	r17, 0xFF	; 255
    3504:	c8 01       	movw	r24, r16
    3506:	0e 94 99 08 	call	0x1132	; 0x1132 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    350a:	ec 89       	ldd	r30, Y+20	; 0x14
    350c:	fd 89       	ldd	r31, Y+21	; 0x15
    350e:	ce 01       	movw	r24, r28
    3510:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3512:	8f 89       	ldd	r24, Y+23	; 0x17
    3514:	82 ff       	sbrs	r24, 2
    3516:	25 c0       	rjmp	.+74     	; 0x3562 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3518:	8e 85       	ldd	r24, Y+14	; 0x0e
    351a:	9f 85       	ldd	r25, Y+15	; 0x0f
    351c:	a8 89       	ldd	r26, Y+16	; 0x10
    351e:	b9 89       	ldd	r27, Y+17	; 0x11
    3520:	88 0d       	add	r24, r8
    3522:	99 1d       	adc	r25, r9
    3524:	aa 1d       	adc	r26, r10
    3526:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    3528:	88 16       	cp	r8, r24
    352a:	99 06       	cpc	r9, r25
    352c:	aa 06       	cpc	r10, r26
    352e:	bb 06       	cpc	r11, r27
    3530:	70 f4       	brcc	.+28     	; 0x354e <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3532:	8a 83       	std	Y+2, r24	; 0x02
    3534:	9b 83       	std	Y+3, r25	; 0x03
    3536:	ac 83       	std	Y+4, r26	; 0x04
    3538:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    353a:	db 87       	std	Y+11, r29	; 0x0b
    353c:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    353e:	b8 01       	movw	r22, r16
    3540:	80 91 1a 18 	lds	r24, 0x181A	; 0x80181a <pxCurrentTimerList>
    3544:	90 91 1b 18 	lds	r25, 0x181B	; 0x80181b <pxCurrentTimerList+0x1>
    3548:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <vListInsert>
    354c:	0a c0       	rjmp	.+20     	; 0x3562 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    354e:	c1 2c       	mov	r12, r1
    3550:	d1 2c       	mov	r13, r1
    3552:	76 01       	movw	r14, r12
    3554:	00 e0       	ldi	r16, 0x00	; 0
    3556:	10 e0       	ldi	r17, 0x00	; 0
    3558:	a5 01       	movw	r20, r10
    355a:	94 01       	movw	r18, r8
    355c:	60 e0       	ldi	r22, 0x00	; 0
    355e:	ce 01       	movw	r24, r28
    3560:	42 df       	rcall	.-380    	; 0x33e6 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3562:	e0 91 1a 18 	lds	r30, 0x181A	; 0x80181a <pxCurrentTimerList>
    3566:	f0 91 1b 18 	lds	r31, 0x181B	; 0x80181b <pxCurrentTimerList+0x1>
    356a:	80 81       	ld	r24, Z
    356c:	81 11       	cpse	r24, r1
    356e:	be cf       	rjmp	.-132    	; 0x34ec <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3570:	80 91 18 18 	lds	r24, 0x1818	; 0x801818 <pxOverflowTimerList>
    3574:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <pxOverflowTimerList+0x1>
    3578:	90 93 1b 18 	sts	0x181B, r25	; 0x80181b <pxCurrentTimerList+0x1>
    357c:	80 93 1a 18 	sts	0x181A, r24	; 0x80181a <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3580:	f0 93 19 18 	sts	0x1819, r31	; 0x801819 <pxOverflowTimerList+0x1>
    3584:	e0 93 18 18 	sts	0x1818, r30	; 0x801818 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	f1 01       	movw	r30, r2
    358c:	80 83       	st	Z, r24
    358e:	02 c0       	rjmp	.+4      	; 0x3594 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3590:	f1 01       	movw	r30, r2
    3592:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3594:	40 92 10 18 	sts	0x1810, r4	; 0x801810 <xLastTime.2432>
    3598:	50 92 11 18 	sts	0x1811, r5	; 0x801811 <xLastTime.2432+0x1>
    359c:	60 92 12 18 	sts	0x1812, r6	; 0x801812 <xLastTime.2432+0x2>
    35a0:	70 92 13 18 	sts	0x1813, r7	; 0x801813 <xLastTime.2432+0x3>

    return xTimeNow;
}
    35a4:	c3 01       	movw	r24, r6
    35a6:	b2 01       	movw	r22, r4
    35a8:	df 91       	pop	r29
    35aa:	cf 91       	pop	r28
    35ac:	1f 91       	pop	r17
    35ae:	0f 91       	pop	r16
    35b0:	ff 90       	pop	r15
    35b2:	ef 90       	pop	r14
    35b4:	df 90       	pop	r13
    35b6:	cf 90       	pop	r12
    35b8:	bf 90       	pop	r11
    35ba:	af 90       	pop	r10
    35bc:	9f 90       	pop	r9
    35be:	8f 90       	pop	r8
    35c0:	7f 90       	pop	r7
    35c2:	6f 90       	pop	r6
    35c4:	5f 90       	pop	r5
    35c6:	4f 90       	pop	r4
    35c8:	3f 90       	pop	r3
    35ca:	2f 90       	pop	r2
    35cc:	08 95       	ret

000035ce <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    35ce:	08 95       	ret

000035d0 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    35d0:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    35d2:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    35d4:	2f ef       	ldi	r18, 0xFF	; 255
    35d6:	80 e7       	ldi	r24, 0x70	; 112
    35d8:	92 e0       	ldi	r25, 0x02	; 2
    35da:	21 50       	subi	r18, 0x01	; 1
    35dc:	80 40       	sbci	r24, 0x00	; 0
    35de:	90 40       	sbci	r25, 0x00	; 0
    35e0:	e1 f7       	brne	.-8      	; 0x35da <vApplicationMallocFailedHook+0xa>
    35e2:	00 c0       	rjmp	.+0      	; 0x35e4 <vApplicationMallocFailedHook+0x14>
    35e4:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    35e6:	1f 9a       	sbi	0x03, 7	; 3
    35e8:	f5 cf       	rjmp	.-22     	; 0x35d4 <vApplicationMallocFailedHook+0x4>

000035ea <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    35ea:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    35ec:	2f 9a       	sbi	0x05, 7	; 5
    35ee:	2f ef       	ldi	r18, 0xFF	; 255
    35f0:	87 ea       	ldi	r24, 0xA7	; 167
    35f2:	91 e6       	ldi	r25, 0x61	; 97
    35f4:	21 50       	subi	r18, 0x01	; 1
    35f6:	80 40       	sbci	r24, 0x00	; 0
    35f8:	90 40       	sbci	r25, 0x00	; 0
    35fa:	e1 f7       	brne	.-8      	; 0x35f4 <vApplicationStackOverflowHook+0xa>
    35fc:	00 c0       	rjmp	.+0      	; 0x35fe <vApplicationStackOverflowHook+0x14>
    35fe:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3600:	1f 9a       	sbi	0x03, 7	; 3
    3602:	f5 cf       	rjmp	.-22     	; 0x35ee <vApplicationStackOverflowHook+0x4>

00003604 <hum_temp_task>:

void hum_temp_task( void *pvParameters )
{
	for (;;) {
		
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, Hum_temp_measure_bit, pdTRUE, pdTRUE, 500); // wait for permission from lorawan
    3604:	0f 2e       	mov	r0, r31
    3606:	f4 ef       	ldi	r31, 0xF4	; 244
    3608:	cf 2e       	mov	r12, r31
    360a:	dd 24       	eor	r13, r13
    360c:	d3 94       	inc	r13
    360e:	e1 2c       	mov	r14, r1
    3610:	f1 2c       	mov	r15, r1
    3612:	f0 2d       	mov	r31, r0
    3614:	01 e0       	ldi	r16, 0x01	; 1
    3616:	21 e0       	ldi	r18, 0x01	; 1
    3618:	42 e0       	ldi	r20, 0x02	; 2
    361a:	50 e0       	ldi	r21, 0x00	; 0
    361c:	60 e0       	ldi	r22, 0x00	; 0
    361e:	70 e0       	ldi	r23, 0x00	; 0
    3620:	80 91 92 19 	lds	r24, 0x1992	; 0x801992 <Measure_event_group>
    3624:	90 91 93 19 	lds	r25, 0x1993	; 0x801993 <Measure_event_group+0x1>
    3628:	0e 94 96 05 	call	0xb2c	; 0xb2c <xEventGroupWaitBits>
		if((measureBits & (Hum_temp_measure_bit)) == (Hum_temp_measure_bit)){
    362c:	61 ff       	sbrs	r22, 1
    362e:	ea cf       	rjmp	.-44     	; 0x3604 <hum_temp_task>
			
				driver_ready_check = hih8120Wakeup();
    3630:	c9 d1       	rcall	.+914    	; 0x39c4 <hih8120Wakeup>
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	90 93 d4 19 	sts	0x19D4, r25	; 0x8019d4 <driver_ready_check+0x1>
    3638:	80 93 d3 19 	sts	0x19D3, r24	; 0x8019d3 <driver_ready_check>
				while (driver_ready_check != HIH8120_OK){
    363c:	89 2b       	or	r24, r25
    363e:	69 f0       	breq	.+26     	; 0x365a <hum_temp_task+0x56>
					vTaskDelay(50);
    3640:	62 e3       	ldi	r22, 0x32	; 50
    3642:	70 e0       	ldi	r23, 0x00	; 0
    3644:	80 e0       	ldi	r24, 0x00	; 0
    3646:	90 e0       	ldi	r25, 0x00	; 0
					driver_ready_check = hih8120Wakeup();
    3648:	6c d9       	rcall	.-3368   	; 0x2922 <vTaskDelay>
    364a:	bc d1       	rcall	.+888    	; 0x39c4 <hih8120Wakeup>
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	90 93 d4 19 	sts	0x19D4, r25	; 0x8019d4 <driver_ready_check+0x1>
    3652:	80 93 d3 19 	sts	0x19D3, r24	; 0x8019d3 <driver_ready_check>
		
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, Hum_temp_measure_bit, pdTRUE, pdTRUE, 500); // wait for permission from lorawan
		if((measureBits & (Hum_temp_measure_bit)) == (Hum_temp_measure_bit)){
			
				driver_ready_check = hih8120Wakeup();
				while (driver_ready_check != HIH8120_OK){
    3656:	89 2b       	or	r24, r25
    3658:	99 f7       	brne	.-26     	; 0x3640 <hum_temp_task+0x3c>
					vTaskDelay(50);
					driver_ready_check = hih8120Wakeup();
					
				}
				vTaskDelay(60); // necessary wait delay after calling wakeup
    365a:	6c e3       	ldi	r22, 0x3C	; 60
    365c:	70 e0       	ldi	r23, 0x00	; 0
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	90 e0       	ldi	r25, 0x00	; 0
				driver_ready_check = hih8120Meassure();
    3662:	5f d9       	rcall	.-3394   	; 0x2922 <vTaskDelay>
    3664:	c4 d1       	rcall	.+904    	; 0x39ee <hih8120Meassure>
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	90 93 d4 19 	sts	0x19D4, r25	; 0x8019d4 <driver_ready_check+0x1>
    366c:	80 93 d3 19 	sts	0x19D3, r24	; 0x8019d3 <driver_ready_check>
				while (driver_ready_check != HIH8120_OK){ // check if measure went okay
    3670:	89 2b       	or	r24, r25
					vTaskDelay(50);
    3672:	69 f0       	breq	.+26     	; 0x368e <hum_temp_task+0x8a>
    3674:	62 e3       	ldi	r22, 0x32	; 50
    3676:	70 e0       	ldi	r23, 0x00	; 0
    3678:	80 e0       	ldi	r24, 0x00	; 0
    367a:	90 e0       	ldi	r25, 0x00	; 0
					driver_ready_check = hih8120Meassure();
    367c:	52 d9       	rcall	.-3420   	; 0x2922 <vTaskDelay>
    367e:	b7 d1       	rcall	.+878    	; 0x39ee <hih8120Meassure>
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	90 93 d4 19 	sts	0x19D4, r25	; 0x8019d4 <driver_ready_check+0x1>
    3686:	80 93 d3 19 	sts	0x19D3, r24	; 0x8019d3 <driver_ready_check>
				}
				vTaskDelay(20); // giving it some time to get the values
    368a:	89 2b       	or	r24, r25
    368c:	99 f7       	brne	.-26     	; 0x3674 <hum_temp_task+0x70>
    368e:	64 e1       	ldi	r22, 0x14	; 20
    3690:	70 e0       	ldi	r23, 0x00	; 0
    3692:	80 e0       	ldi	r24, 0x00	; 0
				setHumidity(hih8120GetHumidity()); // set values
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	45 d9       	rcall	.-3446   	; 0x2922 <vTaskDelay>
    3698:	bb d1       	rcall	.+886    	; 0x3a10 <hih8120GetHumidity>
    369a:	0e 94 c7 04 	call	0x98e	; 0x98e <setHumidity>
				setTemperature(hih8120GetTemperature());
    369e:	cd d1       	rcall	.+922    	; 0x3a3a <hih8120GetTemperature>
    36a0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <setTemperature>
				xEventGroupSetBits(Data_event_group, Hum_temp_data_bit); // send comfirmation for packet assembly
    36a4:	48 e0       	ldi	r20, 0x08	; 8
    36a6:	50 e0       	ldi	r21, 0x00	; 0
    36a8:	60 e0       	ldi	r22, 0x00	; 0
    36aa:	70 e0       	ldi	r23, 0x00	; 0
    36ac:	80 91 90 19 	lds	r24, 0x1990	; 0x801990 <Data_event_group>
    36b0:	90 91 91 19 	lds	r25, 0x1991	; 0x801991 <Data_event_group+0x1>
    36b4:	0e 94 56 06 	call	0xcac	; 0xcac <xEventGroupSetBits>
    36b8:	a5 cf       	rjmp	.-182    	; 0x3604 <hum_temp_task>

000036ba <HumidityTemperatureSensor_create>:
int driver_ready_check;
	
void hum_temp_task(void *pvParameters);

void HumidityTemperatureSensor_create()
{
    36ba:	ef 92       	push	r14
    36bc:	ff 92       	push	r15
    36be:	0f 93       	push	r16
	hih8120Create(); 
    36c0:	69 d1       	rcall	.+722    	; 0x3994 <hih8120Create>
	xTaskCreate(
    36c2:	e1 2c       	mov	r14, r1
    36c4:	f1 2c       	mov	r15, r1
    36c6:	02 e0       	ldi	r16, 0x02	; 2
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	42 ef       	ldi	r20, 0xF2	; 242
    36ce:	50 e0       	ldi	r21, 0x00	; 0
    36d0:	6a ee       	ldi	r22, 0xEA	; 234
    36d2:	73 e0       	ldi	r23, 0x03	; 3
    36d4:	82 e0       	ldi	r24, 0x02	; 2
    36d6:	9b e1       	ldi	r25, 0x1B	; 27
    36d8:	0e 94 73 11 	call	0x22e6	; 0x22e6 <xTaskCreate>
		configMINIMAL_STACK_SIZE+50,  
		NULL,
		2, 
		NULL
	 );
}
    36dc:	0f 91       	pop	r16
    36de:	ff 90       	pop	r15
    36e0:	ef 90       	pop	r14
    36e2:	08 95       	ret

000036e4 <create_tasks_and_resources>:
extern MessageBufferHandle_t Messadown_link_message_buffer_handle;

/*-----------------------------------------------------------*/
void create_tasks_and_resources(void)
{	
		ServoHandler_create();
    36e4:	0e 94 57 05 	call	0xaae	; 0xaae <ServoHandler_create>
		HumidityTemperatureSensor_create();
    36e8:	e8 df       	rcall	.-48     	; 0x36ba <HumidityTemperatureSensor_create>
		CO2Sensor_create();
    36ea:	0e 94 a3 02 	call	0x546	; 0x546 <CO2Sensor_create>
		PacketAssembly_create();
    36ee:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <PacketAssembly_create>
    36f2:	08 95       	ret

000036f4 <create_controllers>:
}

void create_controllers() // controllers - influences how tasks and resources interact
{
    36f4:	0f 93       	push	r16
	down_link_message_buffer_handle = xMessageBufferCreate(sizeof(lora_payload_t)*2);
    36f6:	41 e0       	ldi	r20, 0x01	; 1
    36f8:	60 e0       	ldi	r22, 0x00	; 0
    36fa:	70 e0       	ldi	r23, 0x00	; 0
    36fc:	8c e2       	ldi	r24, 0x2C	; 44
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <xStreamBufferGenericCreate>
    3704:	90 93 b0 19 	sts	0x19B0, r25	; 0x8019b0 <down_link_message_buffer_handle+0x1>
    3708:	80 93 af 19 	sts	0x19AF, r24	; 0x8019af <down_link_message_buffer_handle>
	if(down_link_message_buffer_handle == NULL){
    370c:	89 2b       	or	r24, r25
    370e:	21 f4       	brne	.+8      	; 0x3718 <create_controllers+0x24>
		printf("%s\n","Message buffer not created!!");
    3710:	86 ef       	ldi	r24, 0xF6	; 246
    3712:	93 e0       	ldi	r25, 0x03	; 3
    3714:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <puts>
	}
	if ( Mutex_CO2 == NULL ) {  // Check to confirm that the Semaphore has not already been created.
    3718:	80 91 97 19 	lds	r24, 0x1997	; 0x801997 <Mutex_CO2>
    371c:	90 91 98 19 	lds	r25, 0x1998	; 0x801998 <Mutex_CO2+0x1>
    3720:	89 2b       	or	r24, r25
    3722:	89 f4       	brne	.+34     	; 0x3746 <create_controllers+0x52>
	
		Mutex_CO2 = xSemaphoreCreateMutex();  // Create a MUTEX semaphore.
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	0e 94 18 0c 	call	0x1830	; 0x1830 <xQueueCreateMutex>
    372a:	90 93 98 19 	sts	0x1998, r25	; 0x801998 <Mutex_CO2+0x1>
    372e:	80 93 97 19 	sts	0x1997, r24	; 0x801997 <Mutex_CO2>
		if ( ( Mutex_CO2 ) != NULL ){
    3732:	00 97       	sbiw	r24, 0x00	; 0
    3734:	41 f0       	breq	.+16     	; 0x3746 <create_controllers+0x52>
			xSemaphoreGive( ( Mutex_CO2 ) );  // Make the MUTEX available for use, by initially "Giving" the Semaphore.
    3736:	00 e0       	ldi	r16, 0x00	; 0
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	a9 01       	movw	r20, r18
    373e:	60 e0       	ldi	r22, 0x00	; 0
    3740:	70 e0       	ldi	r23, 0x00	; 0
    3742:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <xQueueGenericSend>
		}
	}
	
	if ( Mutex_humidity == NULL ) {
    3746:	80 91 8e 19 	lds	r24, 0x198E	; 0x80198e <Mutex_humidity>
    374a:	90 91 8f 19 	lds	r25, 0x198F	; 0x80198f <Mutex_humidity+0x1>
    374e:	89 2b       	or	r24, r25
    3750:	89 f4       	brne	.+34     	; 0x3774 <create_controllers+0x80>
		Mutex_humidity = xSemaphoreCreateMutex(); 
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	0e 94 18 0c 	call	0x1830	; 0x1830 <xQueueCreateMutex>
    3758:	90 93 8f 19 	sts	0x198F, r25	; 0x80198f <Mutex_humidity+0x1>
    375c:	80 93 8e 19 	sts	0x198E, r24	; 0x80198e <Mutex_humidity>
		if ( ( Mutex_humidity ) != NULL ){
    3760:	00 97       	sbiw	r24, 0x00	; 0
    3762:	41 f0       	breq	.+16     	; 0x3774 <create_controllers+0x80>
			xSemaphoreGive( ( Mutex_humidity ) ); 
    3764:	00 e0       	ldi	r16, 0x00	; 0
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	a9 01       	movw	r20, r18
    376c:	60 e0       	ldi	r22, 0x00	; 0
    376e:	70 e0       	ldi	r23, 0x00	; 0
    3770:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <xQueueGenericSend>
		}
	}
	
	if ( Mutex_temperature == NULL ) {
    3774:	80 91 95 19 	lds	r24, 0x1995	; 0x801995 <Mutex_temperature>
    3778:	90 91 96 19 	lds	r25, 0x1996	; 0x801996 <Mutex_temperature+0x1>
    377c:	89 2b       	or	r24, r25
    377e:	89 f4       	brne	.+34     	; 0x37a2 <create_controllers+0xae>
		Mutex_temperature = xSemaphoreCreateMutex();
    3780:	81 e0       	ldi	r24, 0x01	; 1
    3782:	0e 94 18 0c 	call	0x1830	; 0x1830 <xQueueCreateMutex>
    3786:	90 93 96 19 	sts	0x1996, r25	; 0x801996 <Mutex_temperature+0x1>
    378a:	80 93 95 19 	sts	0x1995, r24	; 0x801995 <Mutex_temperature>
		if ( ( Mutex_temperature ) != NULL ){
    378e:	00 97       	sbiw	r24, 0x00	; 0
    3790:	41 f0       	breq	.+16     	; 0x37a2 <create_controllers+0xae>
			xSemaphoreGive( ( Mutex_temperature ) );
    3792:	00 e0       	ldi	r16, 0x00	; 0
    3794:	20 e0       	ldi	r18, 0x00	; 0
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	a9 01       	movw	r20, r18
    379a:	60 e0       	ldi	r22, 0x00	; 0
    379c:	70 e0       	ldi	r23, 0x00	; 0
    379e:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <xQueueGenericSend>
		}
	}
	Measure_event_group = xEventGroupCreate();
    37a2:	0e 94 83 05 	call	0xb06	; 0xb06 <xEventGroupCreate>
    37a6:	90 93 93 19 	sts	0x1993, r25	; 0x801993 <Measure_event_group+0x1>
    37aa:	80 93 92 19 	sts	0x1992, r24	; 0x801992 <Measure_event_group>
	if(Measure_event_group == NULL)
    37ae:	89 2b       	or	r24, r25
    37b0:	21 f4       	brne	.+8      	; 0x37ba <create_controllers+0xc6>
			printf("%s\n","#ERROR - Measure_event_group was NOT created because there was insufficient FreeRTOS heap available");
    37b2:	83 e1       	ldi	r24, 0x13	; 19
    37b4:	94 e0       	ldi	r25, 0x04	; 4
    37b6:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <puts>
	Data_event_group = xEventGroupCreate();
    37ba:	0e 94 83 05 	call	0xb06	; 0xb06 <xEventGroupCreate>
    37be:	90 93 91 19 	sts	0x1991, r25	; 0x801991 <Data_event_group+0x1>
    37c2:	80 93 90 19 	sts	0x1990, r24	; 0x801990 <Data_event_group>
	if(Data_event_group == NULL) 
    37c6:	89 2b       	or	r24, r25
    37c8:	21 f4       	brne	.+8      	; 0x37d2 <create_controllers+0xde>
			printf("%s\n","#ERROR - Measure_event_group was NOT created because there was insufficient FreeRTOS heap available");
    37ca:	83 e1       	ldi	r24, 0x13	; 19
    37cc:	94 e0       	ldi	r25, 0x04	; 4
    37ce:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <puts>
	Message_queue = xQueueCreate(10,sizeof(lora_payload_t));
    37d2:	40 e0       	ldi	r20, 0x00	; 0
    37d4:	66 e1       	ldi	r22, 0x16	; 22
    37d6:	8a e0       	ldi	r24, 0x0A	; 10
    37d8:	0e 94 4a 0b 	call	0x1694	; 0x1694 <xQueueGenericCreate>
    37dc:	90 93 b2 19 	sts	0x19B2, r25	; 0x8019b2 <Message_queue+0x1>
    37e0:	80 93 b1 19 	sts	0x19B1, r24	; 0x8019b1 <Message_queue>
}
    37e4:	0f 91       	pop	r16
    37e6:	08 95       	ret

000037e8 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Initialize the trace-driver to be used together with the R2R-Network
	trace_init();
    37e8:	0e 94 6d 05 	call	0xada	; 0xada <trace_init>
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    37ec:	80 e0       	ldi	r24, 0x00	; 0
    37ee:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <stdioCreate>
	create_controllers();
    37f2:	80 df       	rcall	.-256    	; 0x36f4 <create_controllers>
	create_tasks_and_resources();
    37f4:	77 df       	rcall	.-274    	; 0x36e4 <create_tasks_and_resources>
	// Initialize the HAL layer and use 5 for LED driver priority
	hal_create(5);
    37f6:	85 e0       	ldi	r24, 0x05	; 5
    37f8:	6e d0       	rcall	.+220    	; 0x38d6 <hal_create>
    37fa:	83 e0       	ldi	r24, 0x03	; 3
	// Create LoRaWAN task and start it up with priority 3
	lora_send_task_create(3);
    37fc:	0c 94 bc 02 	jmp	0x578	; 0x578 <lora_send_task_create>
    3800:	08 95       	ret

00003802 <main>:
    3802:	f2 df       	rcall	.-28     	; 0x37e8 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{	
	initialiseSystem(); 
	printf("START\n");
    3804:	87 e7       	ldi	r24, 0x77	; 119
    3806:	94 e0       	ldi	r25, 0x04	; 4
    3808:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    380c:	0e 94 92 12 	call	0x2524	; 0x2524 <vTaskStartScheduler>
	while (1)
	{
		printf("Task Scheduler crashed!");
    3810:	cd e7       	ldi	r28, 0x7D	; 125
    3812:	d4 e0       	ldi	r29, 0x04	; 4
    3814:	df 93       	push	r29
    3816:	cf 93       	push	r28
    3818:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <printf>
    381c:	0f 90       	pop	r0
    381e:	0f 90       	pop	r0
    3820:	f9 cf       	rjmp	.-14     	; 0x3814 <main+0x12>

00003822 <__fixsfsi>:
    3822:	04 d0       	rcall	.+8      	; 0x382c <__fixunssfsi>
    3824:	68 94       	set
    3826:	b1 11       	cpse	r27, r1
    3828:	50 c0       	rjmp	.+160    	; 0x38ca <__fp_szero>
    382a:	08 95       	ret

0000382c <__fixunssfsi>:
    382c:	33 d0       	rcall	.+102    	; 0x3894 <__fp_splitA>
    382e:	88 f0       	brcs	.+34     	; 0x3852 <__fixunssfsi+0x26>
    3830:	9f 57       	subi	r25, 0x7F	; 127
    3832:	90 f0       	brcs	.+36     	; 0x3858 <__fixunssfsi+0x2c>
    3834:	b9 2f       	mov	r27, r25
    3836:	99 27       	eor	r25, r25
    3838:	b7 51       	subi	r27, 0x17	; 23
    383a:	a0 f0       	brcs	.+40     	; 0x3864 <__fixunssfsi+0x38>
    383c:	d1 f0       	breq	.+52     	; 0x3872 <__fixunssfsi+0x46>
    383e:	66 0f       	add	r22, r22
    3840:	77 1f       	adc	r23, r23
    3842:	88 1f       	adc	r24, r24
    3844:	99 1f       	adc	r25, r25
    3846:	1a f0       	brmi	.+6      	; 0x384e <__fixunssfsi+0x22>
    3848:	ba 95       	dec	r27
    384a:	c9 f7       	brne	.-14     	; 0x383e <__fixunssfsi+0x12>
    384c:	12 c0       	rjmp	.+36     	; 0x3872 <__fixunssfsi+0x46>
    384e:	b1 30       	cpi	r27, 0x01	; 1
    3850:	81 f0       	breq	.+32     	; 0x3872 <__fixunssfsi+0x46>
    3852:	3a d0       	rcall	.+116    	; 0x38c8 <__fp_zero>
    3854:	b1 e0       	ldi	r27, 0x01	; 1
    3856:	08 95       	ret
    3858:	37 c0       	rjmp	.+110    	; 0x38c8 <__fp_zero>
    385a:	67 2f       	mov	r22, r23
    385c:	78 2f       	mov	r23, r24
    385e:	88 27       	eor	r24, r24
    3860:	b8 5f       	subi	r27, 0xF8	; 248
    3862:	39 f0       	breq	.+14     	; 0x3872 <__fixunssfsi+0x46>
    3864:	b9 3f       	cpi	r27, 0xF9	; 249
    3866:	cc f3       	brlt	.-14     	; 0x385a <__fixunssfsi+0x2e>
    3868:	86 95       	lsr	r24
    386a:	77 95       	ror	r23
    386c:	67 95       	ror	r22
    386e:	b3 95       	inc	r27
    3870:	d9 f7       	brne	.-10     	; 0x3868 <__fixunssfsi+0x3c>
    3872:	3e f4       	brtc	.+14     	; 0x3882 <__fixunssfsi+0x56>
    3874:	90 95       	com	r25
    3876:	80 95       	com	r24
    3878:	70 95       	com	r23
    387a:	61 95       	neg	r22
    387c:	7f 4f       	sbci	r23, 0xFF	; 255
    387e:	8f 4f       	sbci	r24, 0xFF	; 255
    3880:	9f 4f       	sbci	r25, 0xFF	; 255
    3882:	08 95       	ret

00003884 <__fp_split3>:
    3884:	57 fd       	sbrc	r21, 7
    3886:	90 58       	subi	r25, 0x80	; 128
    3888:	44 0f       	add	r20, r20
    388a:	55 1f       	adc	r21, r21
    388c:	59 f0       	breq	.+22     	; 0x38a4 <__fp_splitA+0x10>
    388e:	5f 3f       	cpi	r21, 0xFF	; 255
    3890:	71 f0       	breq	.+28     	; 0x38ae <__fp_splitA+0x1a>
    3892:	47 95       	ror	r20

00003894 <__fp_splitA>:
    3894:	88 0f       	add	r24, r24
    3896:	97 fb       	bst	r25, 7
    3898:	99 1f       	adc	r25, r25
    389a:	61 f0       	breq	.+24     	; 0x38b4 <__fp_splitA+0x20>
    389c:	9f 3f       	cpi	r25, 0xFF	; 255
    389e:	79 f0       	breq	.+30     	; 0x38be <__fp_splitA+0x2a>
    38a0:	87 95       	ror	r24
    38a2:	08 95       	ret
    38a4:	12 16       	cp	r1, r18
    38a6:	13 06       	cpc	r1, r19
    38a8:	14 06       	cpc	r1, r20
    38aa:	55 1f       	adc	r21, r21
    38ac:	f2 cf       	rjmp	.-28     	; 0x3892 <__fp_split3+0xe>
    38ae:	46 95       	lsr	r20
    38b0:	f1 df       	rcall	.-30     	; 0x3894 <__fp_splitA>
    38b2:	08 c0       	rjmp	.+16     	; 0x38c4 <__fp_splitA+0x30>
    38b4:	16 16       	cp	r1, r22
    38b6:	17 06       	cpc	r1, r23
    38b8:	18 06       	cpc	r1, r24
    38ba:	99 1f       	adc	r25, r25
    38bc:	f1 cf       	rjmp	.-30     	; 0x38a0 <__fp_splitA+0xc>
    38be:	86 95       	lsr	r24
    38c0:	71 05       	cpc	r23, r1
    38c2:	61 05       	cpc	r22, r1
    38c4:	08 94       	sec
    38c6:	08 95       	ret

000038c8 <__fp_zero>:
    38c8:	e8 94       	clt

000038ca <__fp_szero>:
    38ca:	bb 27       	eor	r27, r27
    38cc:	66 27       	eor	r22, r22
    38ce:	77 27       	eor	r23, r23
    38d0:	cb 01       	movw	r24, r22
    38d2:	97 f9       	bld	r25, 7
    38d4:	08 95       	ret

000038d6 <hal_create>:
    38d6:	e5 ed       	ldi	r30, 0xD5	; 213
    38d8:	f9 e1       	ldi	r31, 0x19	; 25
    38da:	21 ee       	ldi	r18, 0xE1	; 225
    38dc:	32 e2       	ldi	r19, 0x22	; 34
    38de:	31 83       	std	Z+1, r19	; 0x01
    38e0:	20 83       	st	Z, r18
    38e2:	24 ee       	ldi	r18, 0xE4	; 228
    38e4:	32 e2       	ldi	r19, 0x22	; 34
    38e6:	33 83       	std	Z+3, r19	; 0x03
    38e8:	22 83       	std	Z+2, r18	; 0x02
    38ea:	2f ee       	ldi	r18, 0xEF	; 239
    38ec:	32 e2       	ldi	r19, 0x22	; 34
    38ee:	35 83       	std	Z+5, r19	; 0x05
    38f0:	24 83       	std	Z+4, r18	; 0x04
    38f2:	23 ef       	ldi	r18, 0xF3	; 243
    38f4:	32 e2       	ldi	r19, 0x22	; 34
    38f6:	37 83       	std	Z+7, r19	; 0x07
    38f8:	26 83       	std	Z+6, r18	; 0x06
    38fa:	29 ef       	ldi	r18, 0xF9	; 249
    38fc:	32 e2       	ldi	r19, 0x22	; 34
    38fe:	31 87       	std	Z+9, r19	; 0x09
    3900:	20 87       	std	Z+8, r18	; 0x08
    3902:	25 e0       	ldi	r18, 0x05	; 5
    3904:	33 e2       	ldi	r19, 0x23	; 35
    3906:	33 87       	std	Z+11, r19	; 0x0b
    3908:	22 87       	std	Z+10, r18	; 0x0a
    390a:	2a e0       	ldi	r18, 0x0A	; 10
    390c:	33 e2       	ldi	r19, 0x23	; 35
    390e:	35 87       	std	Z+13, r19	; 0x0d
    3910:	24 87       	std	Z+12, r18	; 0x0c
    3912:	26 e1       	ldi	r18, 0x16	; 22
    3914:	33 e2       	ldi	r19, 0x23	; 35
    3916:	37 87       	std	Z+15, r19	; 0x0f
    3918:	26 87       	std	Z+14, r18	; 0x0e
    391a:	26 ef       	ldi	r18, 0xF6	; 246
    391c:	32 e2       	ldi	r19, 0x22	; 34
    391e:	31 8b       	std	Z+17, r19	; 0x11
    3920:	20 8b       	std	Z+16, r18	; 0x10
    3922:	2b e1       	ldi	r18, 0x1B	; 27
    3924:	33 e2       	ldi	r19, 0x23	; 35
    3926:	33 8b       	std	Z+19, r19	; 0x13
    3928:	22 8b       	std	Z+18, r18	; 0x12
    392a:	28 e2       	ldi	r18, 0x28	; 40
    392c:	33 e2       	ldi	r19, 0x23	; 35
    392e:	35 8b       	std	Z+21, r19	; 0x15
    3930:	24 8b       	std	Z+20, r18	; 0x14
    3932:	68 2f       	mov	r22, r24
    3934:	cf 01       	movw	r24, r30
    3936:	3a c1       	rjmp	.+628    	; 0x3bac <led_create>
    3938:	08 95       	ret

0000393a <_hihTwiCallback>:
    393a:	65 30       	cpi	r22, 0x05	; 5
    393c:	f1 f4       	brne	.+60     	; 0x397a <_hihTwiCallback+0x40>
    393e:	fa 01       	movw	r30, r20
    3940:	80 81       	ld	r24, Z
    3942:	8f 73       	andi	r24, 0x3F	; 63
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	98 2f       	mov	r25, r24
    3948:	88 27       	eor	r24, r24
    394a:	21 81       	ldd	r18, Z+1	; 0x01
    394c:	82 2b       	or	r24, r18
    394e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3952:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3956:	82 81       	ldd	r24, Z+2	; 0x02
    3958:	f0 e4       	ldi	r31, 0x40	; 64
    395a:	8f 9f       	mul	r24, r31
    395c:	c0 01       	movw	r24, r0
    395e:	11 24       	eor	r1, r1
    3960:	fa 01       	movw	r30, r20
    3962:	23 81       	ldd	r18, Z+3	; 0x03
    3964:	26 95       	lsr	r18
    3966:	26 95       	lsr	r18
    3968:	82 2b       	or	r24, r18
    396a:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    396e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <_measuringIsReady>
    3978:	08 95       	ret
    397a:	64 30       	cpi	r22, 0x04	; 4
    397c:	51 f0       	breq	.+20     	; 0x3992 <_hihTwiCallback+0x58>
    397e:	80 e0       	ldi	r24, 0x00	; 0
    3980:	90 e4       	ldi	r25, 0x40	; 64
    3982:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3986:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    398a:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    398e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3992:	08 95       	ret

00003994 <hih8120Create>:
    3994:	0f 93       	push	r16
    3996:	1f 93       	push	r17
    3998:	0d e9       	ldi	r16, 0x9D	; 157
    399a:	1c e1       	ldi	r17, 0x1C	; 28
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	34 e2       	ldi	r19, 0x24	; 36
    39a0:	44 ef       	ldi	r20, 0xF4	; 244
    39a2:	50 e0       	ldi	r21, 0x00	; 0
    39a4:	60 e0       	ldi	r22, 0x00	; 0
    39a6:	87 e2       	ldi	r24, 0x27	; 39
    39a8:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <twiCreate>
    39ac:	90 93 34 18 	sts	0x1834, r25	; 0x801834 <_hih8120Handler+0x1>
    39b0:	80 93 33 18 	sts	0x1833, r24	; 0x801833 <_hih8120Handler>
    39b4:	21 e0       	ldi	r18, 0x01	; 1
    39b6:	89 2b       	or	r24, r25
    39b8:	09 f0       	breq	.+2      	; 0x39bc <hih8120Create+0x28>
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	82 2f       	mov	r24, r18
    39be:	1f 91       	pop	r17
    39c0:	0f 91       	pop	r16
    39c2:	08 95       	ret

000039c4 <hih8120Wakeup>:
    39c4:	80 91 33 18 	lds	r24, 0x1833	; 0x801833 <_hih8120Handler>
    39c8:	90 91 34 18 	lds	r25, 0x1834	; 0x801834 <_hih8120Handler+0x1>
    39cc:	00 97       	sbiw	r24, 0x00	; 0
    39ce:	59 f0       	breq	.+22     	; 0x39e6 <hih8120Wakeup+0x22>
    39d0:	40 e0       	ldi	r20, 0x00	; 0
    39d2:	60 e0       	ldi	r22, 0x00	; 0
    39d4:	70 e0       	ldi	r23, 0x00	; 0
    39d6:	0e 94 43 28 	call	0x5086	; 0x5086 <twiTransmit>
    39da:	84 30       	cpi	r24, 0x04	; 4
    39dc:	31 f4       	brne	.+12     	; 0x39ea <hih8120Wakeup+0x26>
    39de:	10 92 32 18 	sts	0x1832, r1	; 0x801832 <_measuringIsReady>
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	08 95       	ret
    39e6:	82 e0       	ldi	r24, 0x02	; 2
    39e8:	08 95       	ret
    39ea:	83 e0       	ldi	r24, 0x03	; 3
    39ec:	08 95       	ret

000039ee <hih8120Meassure>:
    39ee:	80 91 33 18 	lds	r24, 0x1833	; 0x801833 <_hih8120Handler>
    39f2:	90 91 34 18 	lds	r25, 0x1834	; 0x801834 <_hih8120Handler+0x1>
    39f6:	00 97       	sbiw	r24, 0x00	; 0
    39f8:	39 f0       	breq	.+14     	; 0x3a08 <hih8120Meassure+0x1a>
    39fa:	64 e0       	ldi	r22, 0x04	; 4
    39fc:	0e 94 8f 28 	call	0x511e	; 0x511e <twiReceive>
    3a00:	85 30       	cpi	r24, 0x05	; 5
    3a02:	21 f0       	breq	.+8      	; 0x3a0c <hih8120Meassure+0x1e>
    3a04:	83 e0       	ldi	r24, 0x03	; 3
    3a06:	08 95       	ret
    3a08:	82 e0       	ldi	r24, 0x02	; 2
    3a0a:	08 95       	ret
    3a0c:	80 e0       	ldi	r24, 0x00	; 0
    3a0e:	08 95       	ret

00003a10 <hih8120GetHumidity>:
    3a10:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3a14:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3a18:	80 e0       	ldi	r24, 0x00	; 0
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	0e 94 6d 2a 	call	0x54da	; 0x54da <__floatunsisf>
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	48 ec       	ldi	r20, 0xC8	; 200
    3a26:	52 e4       	ldi	r21, 0x42	; 66
    3a28:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <__mulsf3>
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	38 ef       	ldi	r19, 0xF8	; 248
    3a30:	4f e7       	ldi	r20, 0x7F	; 127
    3a32:	56 e4       	ldi	r21, 0x46	; 70
    3a34:	0c 94 02 2a 	jmp	0x5404	; 0x5404 <__divsf3>
    3a38:	08 95       	ret

00003a3a <hih8120GetTemperature>:
    3a3a:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3a3e:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3a42:	80 e0       	ldi	r24, 0x00	; 0
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	0e 94 6d 2a 	call	0x54da	; 0x54da <__floatunsisf>
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	45 e2       	ldi	r20, 0x25	; 37
    3a50:	53 e4       	ldi	r21, 0x43	; 67
    3a52:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <__mulsf3>
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	38 ef       	ldi	r19, 0xF8	; 248
    3a5a:	4f e7       	ldi	r20, 0x7F	; 127
    3a5c:	56 e4       	ldi	r21, 0x46	; 70
    3a5e:	0e 94 02 2a 	call	0x5404	; 0x5404 <__divsf3>
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	40 e2       	ldi	r20, 0x20	; 32
    3a68:	52 e4       	ldi	r21, 0x42	; 66
    3a6a:	0c 94 9b 29 	jmp	0x5336	; 0x5336 <__subsf3>
    3a6e:	08 95       	ret

00003a70 <_turn_off>:
    3a70:	cf 93       	push	r28
    3a72:	df 93       	push	r29
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	fc 01       	movw	r30, r24
    3a78:	ee 0f       	add	r30, r30
    3a7a:	ff 1f       	adc	r31, r31
    3a7c:	e8 0f       	add	r30, r24
    3a7e:	f9 1f       	adc	r31, r25
    3a80:	ee 0f       	add	r30, r30
    3a82:	ff 1f       	adc	r31, r31
    3a84:	eb 5c       	subi	r30, 0xCB	; 203
    3a86:	f7 4e       	sbci	r31, 0xE7	; 231
    3a88:	23 81       	ldd	r18, Z+3	; 0x03
    3a8a:	21 11       	cpse	r18, r1
    3a8c:	0a c0       	rjmp	.+20     	; 0x3aa2 <_turn_off+0x32>
    3a8e:	ef 01       	movw	r28, r30
    3a90:	e0 91 dd 19 	lds	r30, 0x19DD	; 0x8019dd <register_access+0x8>
    3a94:	f0 91 de 19 	lds	r31, 0x19DE	; 0x8019de <register_access+0x9>
    3a98:	6a 81       	ldd	r22, Y+2	; 0x02
    3a9a:	88 81       	ld	r24, Y
    3a9c:	99 81       	ldd	r25, Y+1	; 0x01
    3a9e:	19 95       	eicall
    3aa0:	12 c0       	rjmp	.+36     	; 0x3ac6 <_turn_off+0x56>
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	aa 0f       	add	r26, r26
    3aa6:	bb 1f       	adc	r27, r27
    3aa8:	ed 01       	movw	r28, r26
    3aaa:	c8 0f       	add	r28, r24
    3aac:	d9 1f       	adc	r29, r25
    3aae:	cc 0f       	add	r28, r28
    3ab0:	dd 1f       	adc	r29, r29
    3ab2:	cb 5c       	subi	r28, 0xCB	; 203
    3ab4:	d7 4e       	sbci	r29, 0xE7	; 231
    3ab6:	e0 91 e7 19 	lds	r30, 0x19E7	; 0x8019e7 <register_access+0x12>
    3aba:	f0 91 e8 19 	lds	r31, 0x19E8	; 0x8019e8 <register_access+0x13>
    3abe:	6a 81       	ldd	r22, Y+2	; 0x02
    3ac0:	88 81       	ld	r24, Y
    3ac2:	99 81       	ldd	r25, Y+1	; 0x01
    3ac4:	19 95       	eicall
    3ac6:	df 91       	pop	r29
    3ac8:	cf 91       	pop	r28
    3aca:	08 95       	ret

00003acc <_turn_on>:
    3acc:	cf 93       	push	r28
    3ace:	df 93       	push	r29
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	fc 01       	movw	r30, r24
    3ad4:	ee 0f       	add	r30, r30
    3ad6:	ff 1f       	adc	r31, r31
    3ad8:	e8 0f       	add	r30, r24
    3ada:	f9 1f       	adc	r31, r25
    3adc:	ee 0f       	add	r30, r30
    3ade:	ff 1f       	adc	r31, r31
    3ae0:	eb 5c       	subi	r30, 0xCB	; 203
    3ae2:	f7 4e       	sbci	r31, 0xE7	; 231
    3ae4:	23 81       	ldd	r18, Z+3	; 0x03
    3ae6:	21 11       	cpse	r18, r1
    3ae8:	0a c0       	rjmp	.+20     	; 0x3afe <_turn_on+0x32>
    3aea:	ef 01       	movw	r28, r30
    3aec:	e0 91 e7 19 	lds	r30, 0x19E7	; 0x8019e7 <register_access+0x12>
    3af0:	f0 91 e8 19 	lds	r31, 0x19E8	; 0x8019e8 <register_access+0x13>
    3af4:	6a 81       	ldd	r22, Y+2	; 0x02
    3af6:	88 81       	ld	r24, Y
    3af8:	99 81       	ldd	r25, Y+1	; 0x01
    3afa:	19 95       	eicall
    3afc:	12 c0       	rjmp	.+36     	; 0x3b22 <_turn_on+0x56>
    3afe:	dc 01       	movw	r26, r24
    3b00:	aa 0f       	add	r26, r26
    3b02:	bb 1f       	adc	r27, r27
    3b04:	ed 01       	movw	r28, r26
    3b06:	c8 0f       	add	r28, r24
    3b08:	d9 1f       	adc	r29, r25
    3b0a:	cc 0f       	add	r28, r28
    3b0c:	dd 1f       	adc	r29, r29
    3b0e:	cb 5c       	subi	r28, 0xCB	; 203
    3b10:	d7 4e       	sbci	r29, 0xE7	; 231
    3b12:	e0 91 dd 19 	lds	r30, 0x19DD	; 0x8019dd <register_access+0x8>
    3b16:	f0 91 de 19 	lds	r31, 0x19DE	; 0x8019de <register_access+0x9>
    3b1a:	6a 81       	ldd	r22, Y+2	; 0x02
    3b1c:	88 81       	ld	r24, Y
    3b1e:	99 81       	ldd	r25, Y+1	; 0x01
    3b20:	19 95       	eicall
    3b22:	df 91       	pop	r29
    3b24:	cf 91       	pop	r28
    3b26:	08 95       	ret

00003b28 <_hal_led_task>:
    3b28:	0f 2e       	mov	r0, r31
    3b2a:	f5 ed       	ldi	r31, 0xD5	; 213
    3b2c:	cf 2e       	mov	r12, r31
    3b2e:	f9 e1       	ldi	r31, 0x19	; 25
    3b30:	df 2e       	mov	r13, r31
    3b32:	f0 2d       	mov	r31, r0
    3b34:	04 e0       	ldi	r16, 0x04	; 4
    3b36:	c5 e3       	ldi	r28, 0x35	; 53
    3b38:	d8 e1       	ldi	r29, 0x18	; 24
    3b3a:	10 e0       	ldi	r17, 0x00	; 0
    3b3c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b3e:	81 30       	cpi	r24, 0x01	; 1
    3b40:	69 f0       	breq	.+26     	; 0x3b5c <_hal_led_task+0x34>
    3b42:	e8 f0       	brcs	.+58     	; 0x3b7e <_hal_led_task+0x56>
    3b44:	82 30       	cpi	r24, 0x02	; 2
    3b46:	39 f5       	brne	.+78     	; 0x3b96 <_hal_led_task+0x6e>
    3b48:	d6 01       	movw	r26, r12
    3b4a:	1c 96       	adiw	r26, 0x0c	; 12
    3b4c:	ed 91       	ld	r30, X+
    3b4e:	fc 91       	ld	r31, X
    3b50:	1d 97       	sbiw	r26, 0x0d	; 13
    3b52:	6a 81       	ldd	r22, Y+2	; 0x02
    3b54:	88 81       	ld	r24, Y
    3b56:	99 81       	ldd	r25, Y+1	; 0x01
    3b58:	19 95       	eicall
    3b5a:	1d c0       	rjmp	.+58     	; 0x3b96 <_hal_led_task+0x6e>
    3b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b5e:	8f 5f       	subi	r24, 0xFF	; 255
    3b60:	8a 30       	cpi	r24, 0x0A	; 10
    3b62:	10 f4       	brcc	.+4      	; 0x3b68 <_hal_led_task+0x40>
    3b64:	8d 83       	std	Y+5, r24	; 0x05
    3b66:	17 c0       	rjmp	.+46     	; 0x3b96 <_hal_led_task+0x6e>
    3b68:	1d 82       	std	Y+5, r1	; 0x05
    3b6a:	d6 01       	movw	r26, r12
    3b6c:	1c 96       	adiw	r26, 0x0c	; 12
    3b6e:	ed 91       	ld	r30, X+
    3b70:	fc 91       	ld	r31, X
    3b72:	1d 97       	sbiw	r26, 0x0d	; 13
    3b74:	6a 81       	ldd	r22, Y+2	; 0x02
    3b76:	88 81       	ld	r24, Y
    3b78:	99 81       	ldd	r25, Y+1	; 0x01
    3b7a:	19 95       	eicall
    3b7c:	0c c0       	rjmp	.+24     	; 0x3b96 <_hal_led_task+0x6e>
    3b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b80:	88 23       	and	r24, r24
    3b82:	31 f0       	breq	.+12     	; 0x3b90 <_hal_led_task+0x68>
    3b84:	81 2f       	mov	r24, r17
    3b86:	a2 df       	rcall	.-188    	; 0x3acc <_turn_on>
    3b88:	8d 81       	ldd	r24, Y+5	; 0x05
    3b8a:	81 50       	subi	r24, 0x01	; 1
    3b8c:	8d 83       	std	Y+5, r24	; 0x05
    3b8e:	03 c0       	rjmp	.+6      	; 0x3b96 <_hal_led_task+0x6e>
    3b90:	0c 83       	std	Y+4, r16	; 0x04
    3b92:	81 2f       	mov	r24, r17
    3b94:	6d df       	rcall	.-294    	; 0x3a70 <_turn_off>
    3b96:	1f 5f       	subi	r17, 0xFF	; 255
    3b98:	26 96       	adiw	r28, 0x06	; 6
    3b9a:	14 30       	cpi	r17, 0x04	; 4
    3b9c:	79 f6       	brne	.-98     	; 0x3b3c <_hal_led_task+0x14>
    3b9e:	65 e0       	ldi	r22, 0x05	; 5
    3ba0:	70 e0       	ldi	r23, 0x00	; 0
    3ba2:	80 e0       	ldi	r24, 0x00	; 0
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	0e 94 91 14 	call	0x2922	; 0x2922 <vTaskDelay>
    3baa:	c5 cf       	rjmp	.-118    	; 0x3b36 <_hal_led_task+0xe>

00003bac <led_create>:
    3bac:	cf 92       	push	r12
    3bae:	df 92       	push	r13
    3bb0:	ef 92       	push	r14
    3bb2:	ff 92       	push	r15
    3bb4:	0f 93       	push	r16
    3bb6:	1f 93       	push	r17
    3bb8:	cf 93       	push	r28
    3bba:	df 93       	push	r29
    3bbc:	06 2f       	mov	r16, r22
    3bbe:	0f 2e       	mov	r0, r31
    3bc0:	f5 ed       	ldi	r31, 0xD5	; 213
    3bc2:	ef 2e       	mov	r14, r31
    3bc4:	f9 e1       	ldi	r31, 0x19	; 25
    3bc6:	ff 2e       	mov	r15, r31
    3bc8:	f0 2d       	mov	r31, r0
    3bca:	d7 01       	movw	r26, r14
    3bcc:	18 96       	adiw	r26, 0x08	; 8
    3bce:	ed 91       	ld	r30, X+
    3bd0:	fc 91       	ld	r31, X
    3bd2:	19 97       	sbiw	r26, 0x09	; 9
    3bd4:	66 e0       	ldi	r22, 0x06	; 6
    3bd6:	87 e2       	ldi	r24, 0x27	; 39
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	19 95       	eicall
    3bdc:	c5 e3       	ldi	r28, 0x35	; 53
    3bde:	d8 e1       	ldi	r29, 0x18	; 24
    3be0:	0f 2e       	mov	r0, r31
    3be2:	f8 e2       	ldi	r31, 0x28	; 40
    3be4:	cf 2e       	mov	r12, r31
    3be6:	d1 2c       	mov	r13, r1
    3be8:	f0 2d       	mov	r31, r0
    3bea:	d9 82       	std	Y+1, r13	; 0x01
    3bec:	c8 82       	st	Y, r12
    3bee:	86 e0       	ldi	r24, 0x06	; 6
    3bf0:	8a 83       	std	Y+2, r24	; 0x02
    3bf2:	1b 82       	std	Y+3, r1	; 0x03
    3bf4:	14 e0       	ldi	r17, 0x04	; 4
    3bf6:	1c 83       	std	Y+4, r17	; 0x04
    3bf8:	80 e0       	ldi	r24, 0x00	; 0
    3bfa:	3a df       	rcall	.-396    	; 0x3a70 <_turn_off>
    3bfc:	d7 01       	movw	r26, r14
    3bfe:	18 96       	adiw	r26, 0x08	; 8
    3c00:	ed 91       	ld	r30, X+
    3c02:	fc 91       	ld	r31, X
    3c04:	19 97       	sbiw	r26, 0x09	; 9
    3c06:	67 e0       	ldi	r22, 0x07	; 7
    3c08:	87 e2       	ldi	r24, 0x27	; 39
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	19 95       	eicall
    3c0e:	df 82       	std	Y+7, r13	; 0x07
    3c10:	ce 82       	std	Y+6, r12	; 0x06
    3c12:	87 e0       	ldi	r24, 0x07	; 7
    3c14:	88 87       	std	Y+8, r24	; 0x08
    3c16:	19 86       	std	Y+9, r1	; 0x09
    3c18:	1a 87       	std	Y+10, r17	; 0x0a
    3c1a:	81 e0       	ldi	r24, 0x01	; 1
    3c1c:	29 df       	rcall	.-430    	; 0x3a70 <_turn_off>
    3c1e:	d7 01       	movw	r26, r14
    3c20:	18 96       	adiw	r26, 0x08	; 8
    3c22:	ed 91       	ld	r30, X+
    3c24:	fc 91       	ld	r31, X
    3c26:	19 97       	sbiw	r26, 0x09	; 9
    3c28:	65 e0       	ldi	r22, 0x05	; 5
    3c2a:	83 e3       	ldi	r24, 0x33	; 51
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	19 95       	eicall
    3c30:	d7 01       	movw	r26, r14
    3c32:	18 96       	adiw	r26, 0x08	; 8
    3c34:	ed 91       	ld	r30, X+
    3c36:	fc 91       	ld	r31, X
    3c38:	19 97       	sbiw	r26, 0x09	; 9
    3c3a:	61 e0       	ldi	r22, 0x01	; 1
    3c3c:	84 e3       	ldi	r24, 0x34	; 52
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	19 95       	eicall
    3c42:	84 e3       	ldi	r24, 0x34	; 52
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	9d 87       	std	Y+13, r25	; 0x0d
    3c48:	8c 87       	std	Y+12, r24	; 0x0c
    3c4a:	85 e0       	ldi	r24, 0x05	; 5
    3c4c:	8e 87       	std	Y+14, r24	; 0x0e
    3c4e:	1f 86       	std	Y+15, r1	; 0x0f
    3c50:	18 8b       	std	Y+16, r17	; 0x10
    3c52:	82 e0       	ldi	r24, 0x02	; 2
    3c54:	0d df       	rcall	.-486    	; 0x3a70 <_turn_off>
    3c56:	d7 01       	movw	r26, r14
    3c58:	18 96       	adiw	r26, 0x08	; 8
    3c5a:	ed 91       	ld	r30, X+
    3c5c:	fc 91       	ld	r31, X
    3c5e:	19 97       	sbiw	r26, 0x09	; 9
    3c60:	64 e0       	ldi	r22, 0x04	; 4
    3c62:	81 e0       	ldi	r24, 0x01	; 1
    3c64:	91 e0       	ldi	r25, 0x01	; 1
    3c66:	19 95       	eicall
    3c68:	d7 01       	movw	r26, r14
    3c6a:	18 96       	adiw	r26, 0x08	; 8
    3c6c:	ed 91       	ld	r30, X+
    3c6e:	fc 91       	ld	r31, X
    3c70:	19 97       	sbiw	r26, 0x09	; 9
    3c72:	61 e0       	ldi	r22, 0x01	; 1
    3c74:	82 e0       	ldi	r24, 0x02	; 2
    3c76:	91 e0       	ldi	r25, 0x01	; 1
    3c78:	19 95       	eicall
    3c7a:	82 e0       	ldi	r24, 0x02	; 2
    3c7c:	91 e0       	ldi	r25, 0x01	; 1
    3c7e:	9b 8b       	std	Y+19, r25	; 0x13
    3c80:	8a 8b       	std	Y+18, r24	; 0x12
    3c82:	1c 8b       	std	Y+20, r17	; 0x14
    3c84:	1d 8a       	std	Y+21, r1	; 0x15
    3c86:	1e 8b       	std	Y+22, r17	; 0x16
    3c88:	83 e0       	ldi	r24, 0x03	; 3
    3c8a:	f2 de       	rcall	.-540    	; 0x3a70 <_turn_off>
    3c8c:	e1 2c       	mov	r14, r1
    3c8e:	f1 2c       	mov	r15, r1
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	40 ec       	ldi	r20, 0xC0	; 192
    3c96:	50 e0       	ldi	r21, 0x00	; 0
    3c98:	65 e9       	ldi	r22, 0x95	; 149
    3c9a:	74 e0       	ldi	r23, 0x04	; 4
    3c9c:	84 e9       	ldi	r24, 0x94	; 148
    3c9e:	9d e1       	ldi	r25, 0x1D	; 29
    3ca0:	0e 94 73 11 	call	0x22e6	; 0x22e6 <xTaskCreate>
    3ca4:	df 91       	pop	r29
    3ca6:	cf 91       	pop	r28
    3ca8:	1f 91       	pop	r17
    3caa:	0f 91       	pop	r16
    3cac:	ff 90       	pop	r15
    3cae:	ef 90       	pop	r14
    3cb0:	df 90       	pop	r13
    3cb2:	cf 90       	pop	r12
    3cb4:	08 95       	ret

00003cb6 <led_long_puls>:
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	fc 01       	movw	r30, r24
    3cba:	ee 0f       	add	r30, r30
    3cbc:	ff 1f       	adc	r31, r31
    3cbe:	df 01       	movw	r26, r30
    3cc0:	a8 0f       	add	r26, r24
    3cc2:	b9 1f       	adc	r27, r25
    3cc4:	aa 0f       	add	r26, r26
    3cc6:	bb 1f       	adc	r27, r27
    3cc8:	ab 5c       	subi	r26, 0xCB	; 203
    3cca:	b7 4e       	sbci	r27, 0xE7	; 231
    3ccc:	24 e0       	ldi	r18, 0x04	; 4
    3cce:	15 96       	adiw	r26, 0x05	; 5
    3cd0:	2c 93       	st	X, r18
    3cd2:	15 97       	sbiw	r26, 0x05	; 5
    3cd4:	fd 01       	movw	r30, r26
    3cd6:	14 82       	std	Z+4, r1	; 0x04
    3cd8:	08 95       	ret

00003cda <_serial_call_back>:
    3cda:	0f 93       	push	r16
    3cdc:	1f 93       	push	r17
    3cde:	cf 93       	push	r28
    3ce0:	df 93       	push	r29
    3ce2:	1f 92       	push	r1
    3ce4:	1f 92       	push	r1
    3ce6:	cd b7       	in	r28, 0x3d	; 61
    3ce8:	de b7       	in	r29, 0x3e	; 62
    3cea:	8c 01       	movw	r16, r24
    3cec:	19 82       	std	Y+1, r1	; 0x01
    3cee:	2d c0       	rjmp	.+90     	; 0x3d4a <_serial_call_back+0x70>
    3cf0:	e0 91 b1 18 	lds	r30, 0x18B1	; 0x8018b1 <rec_buf_inp.2947>
    3cf4:	ec 32       	cpi	r30, 0x2C	; 44
    3cf6:	50 f4       	brcc	.+20     	; 0x3d0c <_serial_call_back+0x32>
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	8e 0f       	add	r24, r30
    3cfc:	80 93 b1 18 	sts	0x18B1, r24	; 0x8018b1 <rec_buf_inp.2947>
    3d00:	f0 e0       	ldi	r31, 0x00	; 0
    3d02:	ed 51       	subi	r30, 0x1D	; 29
    3d04:	f7 4e       	sbci	r31, 0xE7	; 231
    3d06:	8a 81       	ldd	r24, Y+2	; 0x02
    3d08:	80 83       	st	Z, r24
    3d0a:	02 c0       	rjmp	.+4      	; 0x3d10 <_serial_call_back+0x36>
    3d0c:	10 92 b1 18 	sts	0x18B1, r1	; 0x8018b1 <rec_buf_inp.2947>
    3d10:	8a 81       	ldd	r24, Y+2	; 0x02
    3d12:	8a 30       	cpi	r24, 0x0A	; 10
    3d14:	d1 f4       	brne	.+52     	; 0x3d4a <_serial_call_back+0x70>
    3d16:	40 91 b1 18 	lds	r20, 0x18B1	; 0x8018b1 <rec_buf_inp.2947>
    3d1a:	50 e0       	ldi	r21, 0x00	; 0
    3d1c:	fa 01       	movw	r30, r20
    3d1e:	ef 51       	subi	r30, 0x1F	; 31
    3d20:	f7 4e       	sbci	r31, 0xE7	; 231
    3d22:	10 82       	st	Z, r1
    3d24:	41 50       	subi	r20, 0x01	; 1
    3d26:	51 09       	sbc	r21, r1
    3d28:	9e 01       	movw	r18, r28
    3d2a:	2f 5f       	subi	r18, 0xFF	; 255
    3d2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d2e:	63 ee       	ldi	r22, 0xE3	; 227
    3d30:	78 e1       	ldi	r23, 0x18	; 24
    3d32:	80 91 b4 18 	lds	r24, 0x18B4	; 0x8018b4 <_serial_reply_buffer_handle>
    3d36:	90 91 b5 18 	lds	r25, 0x18B5	; 0x8018b5 <_serial_reply_buffer_handle+0x1>
    3d3a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <xStreamBufferSendFromISR>
    3d3e:	89 81       	ldd	r24, Y+1	; 0x01
    3d40:	81 11       	cpse	r24, r1
    3d42:	0e 94 6e 09 	call	0x12dc	; 0x12dc <vPortYield>
    3d46:	10 92 b1 18 	sts	0x18B1, r1	; 0x8018b1 <rec_buf_inp.2947>
    3d4a:	be 01       	movw	r22, r28
    3d4c:	6e 5f       	subi	r22, 0xFE	; 254
    3d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d50:	c8 01       	movw	r24, r16
    3d52:	7c d6       	rcall	.+3320   	; 0x4a4c <serial_get_byte>
    3d54:	88 23       	and	r24, r24
    3d56:	61 f2       	breq	.-104    	; 0x3cf0 <_serial_call_back+0x16>
    3d58:	0f 90       	pop	r0
    3d5a:	0f 90       	pop	r0
    3d5c:	df 91       	pop	r29
    3d5e:	cf 91       	pop	r28
    3d60:	1f 91       	pop	r17
    3d62:	0f 91       	pop	r16
    3d64:	08 95       	ret

00003d66 <_upload_message>:
    3d66:	0f 93       	push	r16
    3d68:	1f 93       	push	r17
    3d6a:	cf 93       	push	r28
    3d6c:	df 93       	push	r29
    3d6e:	8c 01       	movw	r16, r24
    3d70:	eb 01       	movw	r28, r22
    3d72:	80 91 b4 18 	lds	r24, 0x18B4	; 0x8018b4 <_serial_reply_buffer_handle>
    3d76:	90 91 b5 18 	lds	r25, 0x18B5	; 0x8018b5 <_serial_reply_buffer_handle+0x1>
    3d7a:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <xStreamBufferReset>
    3d7e:	b8 01       	movw	r22, r16
    3d80:	8d e4       	ldi	r24, 0x4D	; 77
    3d82:	98 e1       	ldi	r25, 0x18	; 24
    3d84:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <strcpy>
    3d88:	20 97       	sbiw	r28, 0x00	; 0
    3d8a:	79 f0       	breq	.+30     	; 0x3daa <_upload_message+0x44>
    3d8c:	ed e4       	ldi	r30, 0x4D	; 77
    3d8e:	f8 e1       	ldi	r31, 0x18	; 24
    3d90:	01 90       	ld	r0, Z+
    3d92:	00 20       	and	r0, r0
    3d94:	e9 f7       	brne	.-6      	; 0x3d90 <_upload_message+0x2a>
    3d96:	31 97       	sbiw	r30, 0x01	; 1
    3d98:	80 e2       	ldi	r24, 0x20	; 32
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	91 83       	std	Z+1, r25	; 0x01
    3d9e:	80 83       	st	Z, r24
    3da0:	be 01       	movw	r22, r28
    3da2:	8d e4       	ldi	r24, 0x4D	; 77
    3da4:	98 e1       	ldi	r25, 0x18	; 24
    3da6:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <strcat>
    3daa:	ed e4       	ldi	r30, 0x4D	; 77
    3dac:	f8 e1       	ldi	r31, 0x18	; 24
    3dae:	df 01       	movw	r26, r30
    3db0:	0d 90       	ld	r0, X+
    3db2:	00 20       	and	r0, r0
    3db4:	e9 f7       	brne	.-6      	; 0x3db0 <_upload_message+0x4a>
    3db6:	11 97       	sbiw	r26, 0x01	; 1
    3db8:	8d e0       	ldi	r24, 0x0D	; 13
    3dba:	9a e0       	ldi	r25, 0x0A	; 10
    3dbc:	11 96       	adiw	r26, 0x01	; 1
    3dbe:	9c 93       	st	X, r25
    3dc0:	8e 93       	st	-X, r24
    3dc2:	12 96       	adiw	r26, 0x02	; 2
    3dc4:	1c 92       	st	X, r1
    3dc6:	01 90       	ld	r0, Z+
    3dc8:	00 20       	and	r0, r0
    3dca:	e9 f7       	brne	.-6      	; 0x3dc6 <_upload_message+0x60>
    3dcc:	31 97       	sbiw	r30, 0x01	; 1
    3dce:	ed 54       	subi	r30, 0x4D	; 77
    3dd0:	f8 41       	sbci	r31, 0x18	; 24
    3dd2:	ae 2f       	mov	r26, r30
    3dd4:	8d e4       	ldi	r24, 0x4D	; 77
    3dd6:	98 e1       	ldi	r25, 0x18	; 24
    3dd8:	ac 01       	movw	r20, r24
    3dda:	6a 2f       	mov	r22, r26
    3ddc:	80 91 b6 18 	lds	r24, 0x18B6	; 0x8018b6 <_rn2483_serial>
    3de0:	90 91 b7 18 	lds	r25, 0x18B7	; 0x8018b7 <_rn2483_serial+0x1>
    3de4:	e3 d5       	rcall	.+3014   	; 0x49ac <serial_send_bytes>
    3de6:	81 11       	cpse	r24, r1
    3de8:	11 c0       	rjmp	.+34     	; 0x3e0c <_upload_message+0xa6>
    3dea:	08 e2       	ldi	r16, 0x28	; 40
    3dec:	15 e0       	ldi	r17, 0x05	; 5
    3dee:	20 e0       	ldi	r18, 0x00	; 0
    3df0:	30 e0       	ldi	r19, 0x00	; 0
    3df2:	4d e2       	ldi	r20, 0x2D	; 45
    3df4:	50 e0       	ldi	r21, 0x00	; 0
    3df6:	6d e3       	ldi	r22, 0x3D	; 61
    3df8:	79 e1       	ldi	r23, 0x19	; 25
    3dfa:	80 91 b4 18 	lds	r24, 0x18B4	; 0x8018b4 <_serial_reply_buffer_handle>
    3dfe:	90 91 b5 18 	lds	r25, 0x18B5	; 0x8018b5 <_serial_reply_buffer_handle+0x1>
    3e02:	0e 94 30 10 	call	0x2060	; 0x2060 <xStreamBufferReceive>
    3e06:	8d e3       	ldi	r24, 0x3D	; 61
    3e08:	99 e1       	ldi	r25, 0x19	; 25
    3e0a:	02 c0       	rjmp	.+4      	; 0x3e10 <_upload_message+0xaa>
    3e0c:	80 e0       	ldi	r24, 0x00	; 0
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	df 91       	pop	r29
    3e12:	cf 91       	pop	r28
    3e14:	1f 91       	pop	r17
    3e16:	0f 91       	pop	r16
    3e18:	08 95       	ret

00003e1a <_reply2return_code>:
    3e1a:	2f 92       	push	r2
    3e1c:	3f 92       	push	r3
    3e1e:	4f 92       	push	r4
    3e20:	5f 92       	push	r5
    3e22:	6f 92       	push	r6
    3e24:	7f 92       	push	r7
    3e26:	8f 92       	push	r8
    3e28:	9f 92       	push	r9
    3e2a:	af 92       	push	r10
    3e2c:	bf 92       	push	r11
    3e2e:	cf 92       	push	r12
    3e30:	df 92       	push	r13
    3e32:	ef 92       	push	r14
    3e34:	ff 92       	push	r15
    3e36:	0f 93       	push	r16
    3e38:	1f 93       	push	r17
    3e3a:	cf 93       	push	r28
    3e3c:	df 93       	push	r29
    3e3e:	5c 01       	movw	r10, r24
    3e40:	fc 01       	movw	r30, r24
    3e42:	01 90       	ld	r0, Z+
    3e44:	00 20       	and	r0, r0
    3e46:	e9 f7       	brne	.-6      	; 0x3e42 <_reply2return_code+0x28>
    3e48:	31 97       	sbiw	r30, 0x01	; 1
    3e4a:	6f 01       	movw	r12, r30
    3e4c:	c8 1a       	sub	r12, r24
    3e4e:	d9 0a       	sbc	r13, r25
    3e50:	5c 2c       	mov	r5, r12
    3e52:	0f 2e       	mov	r0, r31
    3e54:	f6 e3       	ldi	r31, 0x36	; 54
    3e56:	8f 2e       	mov	r8, r31
    3e58:	f7 e0       	ldi	r31, 0x07	; 7
    3e5a:	9f 2e       	mov	r9, r31
    3e5c:	f0 2d       	mov	r31, r0
    3e5e:	e1 2c       	mov	r14, r1
    3e60:	f1 2c       	mov	r15, r1
    3e62:	4c 2c       	mov	r4, r12
    3e64:	37 01       	movw	r6, r14
    3e66:	f4 01       	movw	r30, r8
    3e68:	01 81       	ldd	r16, Z+1	; 0x01
    3e6a:	12 81       	ldd	r17, Z+2	; 0x02
    3e6c:	e8 01       	movw	r28, r16
    3e6e:	09 90       	ld	r0, Y+
    3e70:	00 20       	and	r0, r0
    3e72:	e9 f7       	brne	.-6      	; 0x3e6e <_reply2return_code+0x54>
    3e74:	21 97       	sbiw	r28, 0x01	; 1
    3e76:	c0 1b       	sub	r28, r16
    3e78:	d1 0b       	sbc	r29, r17
    3e7a:	3c 2e       	mov	r3, r28
    3e7c:	f9 e0       	ldi	r31, 0x09	; 9
    3e7e:	cf 16       	cp	r12, r31
    3e80:	d1 04       	cpc	r13, r1
    3e82:	58 f0       	brcs	.+22     	; 0x3e9a <_reply2return_code+0x80>
    3e84:	f4 01       	movw	r30, r8
    3e86:	20 80       	ld	r2, Z
    3e88:	fe e0       	ldi	r31, 0x0E	; 14
    3e8a:	2f 12       	cpse	r2, r31
    3e8c:	06 c0       	rjmp	.+12     	; 0x3e9a <_reply2return_code+0x80>
    3e8e:	b8 01       	movw	r22, r16
    3e90:	c5 01       	movw	r24, r10
    3e92:	0e 94 b1 2c 	call	0x5962	; 0x5962 <strcasestr>
    3e96:	89 2b       	or	r24, r25
    3e98:	09 f5       	brne	.+66     	; 0x3edc <_reply2return_code+0xc2>
    3e9a:	44 2d       	mov	r20, r4
    3e9c:	35 14       	cp	r3, r5
    3e9e:	08 f4       	brcc	.+2      	; 0x3ea2 <_reply2return_code+0x88>
    3ea0:	4c 2f       	mov	r20, r28
    3ea2:	50 e0       	ldi	r21, 0x00	; 0
    3ea4:	b8 01       	movw	r22, r16
    3ea6:	c5 01       	movw	r24, r10
    3ea8:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <strncasecmp>
    3eac:	89 2b       	or	r24, r25
    3eae:	49 f4       	brne	.+18     	; 0x3ec2 <_reply2return_code+0xa8>
    3eb0:	f3 01       	movw	r30, r6
    3eb2:	ee 0f       	add	r30, r30
    3eb4:	ff 1f       	adc	r31, r31
    3eb6:	e6 0d       	add	r30, r6
    3eb8:	f7 1d       	adc	r31, r7
    3eba:	ea 5c       	subi	r30, 0xCA	; 202
    3ebc:	f8 4f       	sbci	r31, 0xF8	; 248
    3ebe:	20 80       	ld	r2, Z
    3ec0:	0d c0       	rjmp	.+26     	; 0x3edc <_reply2return_code+0xc2>
    3ec2:	8f ef       	ldi	r24, 0xFF	; 255
    3ec4:	e8 1a       	sub	r14, r24
    3ec6:	f8 0a       	sbc	r15, r24
    3ec8:	e3 e0       	ldi	r30, 0x03	; 3
    3eca:	8e 0e       	add	r8, r30
    3ecc:	91 1c       	adc	r9, r1
    3ece:	f1 e1       	ldi	r31, 0x11	; 17
    3ed0:	ef 16       	cp	r14, r31
    3ed2:	f1 04       	cpc	r15, r1
    3ed4:	39 f6       	brne	.-114    	; 0x3e64 <_reply2return_code+0x4a>
    3ed6:	68 94       	set
    3ed8:	22 24       	eor	r2, r2
    3eda:	24 f8       	bld	r2, 4
    3edc:	82 2d       	mov	r24, r2
    3ede:	df 91       	pop	r29
    3ee0:	cf 91       	pop	r28
    3ee2:	1f 91       	pop	r17
    3ee4:	0f 91       	pop	r16
    3ee6:	ff 90       	pop	r15
    3ee8:	ef 90       	pop	r14
    3eea:	df 90       	pop	r13
    3eec:	cf 90       	pop	r12
    3eee:	bf 90       	pop	r11
    3ef0:	af 90       	pop	r10
    3ef2:	9f 90       	pop	r9
    3ef4:	8f 90       	pop	r8
    3ef6:	7f 90       	pop	r7
    3ef8:	6f 90       	pop	r6
    3efa:	5f 90       	pop	r5
    3efc:	4f 90       	pop	r4
    3efe:	3f 90       	pop	r3
    3f00:	2f 90       	pop	r2
    3f02:	08 95       	ret

00003f04 <_upload_message_rc>:
    3f04:	30 df       	rcall	.-416    	; 0x3d66 <_upload_message>
    3f06:	89 cf       	rjmp	.-238    	; 0x3e1a <_reply2return_code>
    3f08:	08 95       	ret

00003f0a <lora_driver_flush_buffers>:
    3f0a:	80 91 b4 18 	lds	r24, 0x18B4	; 0x8018b4 <_serial_reply_buffer_handle>
    3f0e:	90 91 b5 18 	lds	r25, 0x18B5	; 0x8018b5 <_serial_reply_buffer_handle+0x1>
    3f12:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <xStreamBufferReset>
    3f16:	08 95       	ret

00003f18 <lora_driver_create>:
    3f18:	8f 92       	push	r8
    3f1a:	9f 92       	push	r9
    3f1c:	af 92       	push	r10
    3f1e:	cf 92       	push	r12
    3f20:	ef 92       	push	r14
    3f22:	0f 93       	push	r16
    3f24:	1f 93       	push	r17
    3f26:	cf 93       	push	r28
    3f28:	c8 2f       	mov	r28, r24
    3f2a:	8b 01       	movw	r16, r22
    3f2c:	41 e0       	ldi	r20, 0x01	; 1
    3f2e:	60 e0       	ldi	r22, 0x00	; 0
    3f30:	70 e0       	ldi	r23, 0x00	; 0
    3f32:	88 ec       	ldi	r24, 0xC8	; 200
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <xStreamBufferGenericCreate>
    3f3a:	90 93 b5 18 	sts	0x18B5, r25	; 0x8018b5 <_serial_reply_buffer_handle+0x1>
    3f3e:	80 93 b4 18 	sts	0x18B4, r24	; 0x8018b4 <_serial_reply_buffer_handle>
    3f42:	10 93 b3 18 	sts	0x18B3, r17	; 0x8018b3 <_downlinkMessageBuffer+0x1>
    3f46:	00 93 b2 18 	sts	0x18B2, r16	; 0x8018b2 <_downlinkMessageBuffer>
    3f4a:	0f 2e       	mov	r0, r31
    3f4c:	fd e6       	ldi	r31, 0x6D	; 109
    3f4e:	8f 2e       	mov	r8, r31
    3f50:	fe e1       	ldi	r31, 0x1E	; 30
    3f52:	9f 2e       	mov	r9, r31
    3f54:	f0 2d       	mov	r31, r0
    3f56:	68 94       	set
    3f58:	aa 24       	eor	r10, r10
    3f5a:	a6 f8       	bld	r10, 6
    3f5c:	68 94       	set
    3f5e:	cc 24       	eor	r12, r12
    3f60:	c6 f8       	bld	r12, 6
    3f62:	e1 2c       	mov	r14, r1
    3f64:	00 e0       	ldi	r16, 0x00	; 0
    3f66:	23 e0       	ldi	r18, 0x03	; 3
    3f68:	40 e0       	ldi	r20, 0x00	; 0
    3f6a:	51 ee       	ldi	r21, 0xE1	; 225
    3f6c:	60 e0       	ldi	r22, 0x00	; 0
    3f6e:	70 e0       	ldi	r23, 0x00	; 0
    3f70:	8c 2f       	mov	r24, r28
    3f72:	60 d4       	rcall	.+2240   	; 0x4834 <serial_new_instance>
    3f74:	90 93 b7 18 	sts	0x18B7, r25	; 0x8018b7 <_rn2483_serial+0x1>
    3f78:	80 93 b6 18 	sts	0x18B6, r24	; 0x8018b6 <_rn2483_serial>
    3f7c:	e0 91 dd 19 	lds	r30, 0x19DD	; 0x8019dd <register_access+0x8>
    3f80:	f0 91 de 19 	lds	r31, 0x19DE	; 0x8019de <register_access+0x9>
    3f84:	64 e0       	ldi	r22, 0x04	; 4
    3f86:	87 e0       	ldi	r24, 0x07	; 7
    3f88:	91 e0       	ldi	r25, 0x01	; 1
    3f8a:	19 95       	eicall
    3f8c:	cf 91       	pop	r28
    3f8e:	1f 91       	pop	r17
    3f90:	0f 91       	pop	r16
    3f92:	ef 90       	pop	r14
    3f94:	cf 90       	pop	r12
    3f96:	af 90       	pop	r10
    3f98:	9f 90       	pop	r9
    3f9a:	8f 90       	pop	r8
    3f9c:	08 95       	ret

00003f9e <lora_driver_reset_rn2483>:
    3f9e:	88 23       	and	r24, r24
    3fa0:	49 f0       	breq	.+18     	; 0x3fb4 <lora_driver_reset_rn2483+0x16>
    3fa2:	e0 91 e7 19 	lds	r30, 0x19E7	; 0x8019e7 <register_access+0x12>
    3fa6:	f0 91 e8 19 	lds	r31, 0x19E8	; 0x8019e8 <register_access+0x13>
    3faa:	64 e0       	ldi	r22, 0x04	; 4
    3fac:	88 e0       	ldi	r24, 0x08	; 8
    3fae:	91 e0       	ldi	r25, 0x01	; 1
    3fb0:	19 95       	eicall
    3fb2:	08 95       	ret
    3fb4:	e0 91 dd 19 	lds	r30, 0x19DD	; 0x8019dd <register_access+0x8>
    3fb8:	f0 91 de 19 	lds	r31, 0x19DE	; 0x8019de <register_access+0x9>
    3fbc:	64 e0       	ldi	r22, 0x04	; 4
    3fbe:	88 e0       	ldi	r24, 0x08	; 8
    3fc0:	91 e0       	ldi	r25, 0x01	; 1
    3fc2:	19 95       	eicall
    3fc4:	08 95       	ret

00003fc6 <lora_driver_rn2483_factory_reset>:
    3fc6:	60 e0       	ldi	r22, 0x00	; 0
    3fc8:	70 e0       	ldi	r23, 0x00	; 0
    3fca:	8c eb       	ldi	r24, 0xBC	; 188
    3fcc:	94 e0       	ldi	r25, 0x04	; 4
    3fce:	cb de       	rcall	.-618    	; 0x3d66 <_upload_message>
    3fd0:	ed e3       	ldi	r30, 0x3D	; 61
    3fd2:	f9 e1       	ldi	r31, 0x19	; 25
    3fd4:	01 90       	ld	r0, Z+
    3fd6:	00 20       	and	r0, r0
    3fd8:	e9 f7       	brne	.-6      	; 0x3fd4 <lora_driver_rn2483_factory_reset+0xe>
    3fda:	31 97       	sbiw	r30, 0x01	; 1
    3fdc:	ed 53       	subi	r30, 0x3D	; 61
    3fde:	f9 41       	sbci	r31, 0x19	; 25
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	75 97       	sbiw	r30, 0x15	; 21
    3fe4:	08 f0       	brcs	.+2      	; 0x3fe8 <lora_driver_rn2483_factory_reset+0x22>
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	08 95       	ret

00003fea <lora_driver_get_rn2483_hweui>:
    3fea:	cf 93       	push	r28
    3fec:	df 93       	push	r29
    3fee:	ec 01       	movw	r28, r24
    3ff0:	60 e0       	ldi	r22, 0x00	; 0
    3ff2:	70 e0       	ldi	r23, 0x00	; 0
    3ff4:	8d ec       	ldi	r24, 0xCD	; 205
    3ff6:	94 e0       	ldi	r25, 0x04	; 4
    3ff8:	b6 de       	rcall	.-660    	; 0x3d66 <_upload_message>
    3ffa:	ed e3       	ldi	r30, 0x3D	; 61
    3ffc:	f9 e1       	ldi	r31, 0x19	; 25
    3ffe:	01 90       	ld	r0, Z+
    4000:	00 20       	and	r0, r0
    4002:	e9 f7       	brne	.-6      	; 0x3ffe <lora_driver_get_rn2483_hweui+0x14>
    4004:	ee 54       	subi	r30, 0x4E	; 78
    4006:	f9 41       	sbci	r31, 0x19	; 25
    4008:	39 f4       	brne	.+14     	; 0x4018 <lora_driver_get_rn2483_hweui+0x2e>
    400a:	6d e3       	ldi	r22, 0x3D	; 61
    400c:	79 e1       	ldi	r23, 0x19	; 25
    400e:	ce 01       	movw	r24, r28
    4010:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <strcpy>
    4014:	80 e0       	ldi	r24, 0x00	; 0
    4016:	02 c0       	rjmp	.+4      	; 0x401c <lora_driver_get_rn2483_hweui+0x32>
    4018:	18 82       	st	Y, r1
    401a:	81 e0       	ldi	r24, 0x01	; 1
    401c:	df 91       	pop	r29
    401e:	cf 91       	pop	r28
    4020:	08 95       	ret

00004022 <lora_driver_set_device_identifier>:
    4022:	fc 01       	movw	r30, r24
    4024:	01 90       	ld	r0, Z+
    4026:	00 20       	and	r0, r0
    4028:	e9 f7       	brne	.-6      	; 0x4024 <lora_driver_set_device_identifier+0x2>
    402a:	9f 01       	movw	r18, r30
    402c:	21 51       	subi	r18, 0x11	; 17
    402e:	31 09       	sbc	r19, r1
    4030:	28 17       	cp	r18, r24
    4032:	39 07       	cpc	r19, r25
    4034:	29 f4       	brne	.+10     	; 0x4040 <lora_driver_set_device_identifier+0x1e>
    4036:	bc 01       	movw	r22, r24
    4038:	8b ef       	ldi	r24, 0xFB	; 251
    403a:	94 e0       	ldi	r25, 0x04	; 4
    403c:	63 cf       	rjmp	.-314    	; 0x3f04 <_upload_message_rc>
    403e:	08 95       	ret
    4040:	89 e0       	ldi	r24, 0x09	; 9
    4042:	08 95       	ret

00004044 <lora_driver_set_application_identifier>:
    4044:	fc 01       	movw	r30, r24
    4046:	01 90       	ld	r0, Z+
    4048:	00 20       	and	r0, r0
    404a:	e9 f7       	brne	.-6      	; 0x4046 <lora_driver_set_application_identifier+0x2>
    404c:	9f 01       	movw	r18, r30
    404e:	21 51       	subi	r18, 0x11	; 17
    4050:	31 09       	sbc	r19, r1
    4052:	28 17       	cp	r18, r24
    4054:	39 07       	cpc	r19, r25
    4056:	29 f4       	brne	.+10     	; 0x4062 <lora_driver_set_application_identifier+0x1e>
    4058:	bc 01       	movw	r22, r24
    405a:	8a e0       	ldi	r24, 0x0A	; 10
    405c:	95 e0       	ldi	r25, 0x05	; 5
    405e:	52 cf       	rjmp	.-348    	; 0x3f04 <_upload_message_rc>
    4060:	08 95       	ret
    4062:	89 e0       	ldi	r24, 0x09	; 9
    4064:	08 95       	ret

00004066 <lora_driver_set_application_key>:
    4066:	fc 01       	movw	r30, r24
    4068:	01 90       	ld	r0, Z+
    406a:	00 20       	and	r0, r0
    406c:	e9 f7       	brne	.-6      	; 0x4068 <lora_driver_set_application_key+0x2>
    406e:	9f 01       	movw	r18, r30
    4070:	21 52       	subi	r18, 0x21	; 33
    4072:	31 09       	sbc	r19, r1
    4074:	28 17       	cp	r18, r24
    4076:	39 07       	cpc	r19, r25
    4078:	29 f4       	brne	.+10     	; 0x4084 <lora_driver_set_application_key+0x1e>
    407a:	bc 01       	movw	r22, r24
    407c:	89 e1       	ldi	r24, 0x19	; 25
    407e:	95 e0       	ldi	r25, 0x05	; 5
    4080:	41 cf       	rjmp	.-382    	; 0x3f04 <_upload_message_rc>
    4082:	08 95       	ret
    4084:	89 e0       	ldi	r24, 0x09	; 9
    4086:	08 95       	ret

00004088 <lora_driver_save_mac>:
    4088:	60 e0       	ldi	r22, 0x00	; 0
    408a:	70 e0       	ldi	r23, 0x00	; 0
    408c:	88 e5       	ldi	r24, 0x58	; 88
    408e:	95 e0       	ldi	r25, 0x05	; 5
    4090:	39 cf       	rjmp	.-398    	; 0x3f04 <_upload_message_rc>
    4092:	08 95       	ret

00004094 <lora_driver_join>:
    4094:	0f 93       	push	r16
    4096:	1f 93       	push	r17
    4098:	e8 2f       	mov	r30, r24
    409a:	f0 e0       	ldi	r31, 0x00	; 0
    409c:	ee 0f       	add	r30, r30
    409e:	ff 1f       	adc	r31, r31
    40a0:	ee 5c       	subi	r30, 0xCE	; 206
    40a2:	f8 4f       	sbci	r31, 0xF8	; 248
    40a4:	60 81       	ld	r22, Z
    40a6:	71 81       	ldd	r23, Z+1	; 0x01
    40a8:	81 e6       	ldi	r24, 0x61	; 97
    40aa:	95 e0       	ldi	r25, 0x05	; 5
    40ac:	2b df       	rcall	.-426    	; 0x3f04 <_upload_message_rc>
    40ae:	81 11       	cpse	r24, r1
    40b0:	14 c0       	rjmp	.+40     	; 0x40da <lora_driver_join+0x46>
    40b2:	08 e2       	ldi	r16, 0x28	; 40
    40b4:	15 e0       	ldi	r17, 0x05	; 5
    40b6:	20 e0       	ldi	r18, 0x00	; 0
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	4d e2       	ldi	r20, 0x2D	; 45
    40bc:	50 e0       	ldi	r21, 0x00	; 0
    40be:	6d e3       	ldi	r22, 0x3D	; 61
    40c0:	79 e1       	ldi	r23, 0x19	; 25
    40c2:	80 91 b4 18 	lds	r24, 0x18B4	; 0x8018b4 <_serial_reply_buffer_handle>
    40c6:	90 91 b5 18 	lds	r25, 0x18B5	; 0x8018b5 <_serial_reply_buffer_handle+0x1>
    40ca:	0e 94 30 10 	call	0x2060	; 0x2060 <xStreamBufferReceive>
    40ce:	88 23       	and	r24, r24
    40d0:	21 f0       	breq	.+8      	; 0x40da <lora_driver_join+0x46>
    40d2:	8d e3       	ldi	r24, 0x3D	; 61
    40d4:	99 e1       	ldi	r25, 0x19	; 25
    40d6:	a1 de       	rcall	.-702    	; 0x3e1a <_reply2return_code>
    40d8:	03 c0       	rjmp	.+6      	; 0x40e0 <lora_driver_join+0x4c>
    40da:	8d e3       	ldi	r24, 0x3D	; 61
    40dc:	99 e1       	ldi	r25, 0x19	; 25
    40de:	9d de       	rcall	.-710    	; 0x3e1a <_reply2return_code>
    40e0:	1f 91       	pop	r17
    40e2:	0f 91       	pop	r16
    40e4:	08 95       	ret

000040e6 <lora_driver_sent_upload_message>:
    40e6:	0f 93       	push	r16
    40e8:	1f 93       	push	r17
    40ea:	cf 93       	push	r28
    40ec:	df 93       	push	r29
    40ee:	1f 92       	push	r1
    40f0:	cd b7       	in	r28, 0x3d	; 61
    40f2:	de b7       	in	r29, 0x3e	; 62
    40f4:	db 01       	movw	r26, r22
    40f6:	11 96       	adiw	r26, 0x01	; 1
    40f8:	9c 91       	ld	r25, X
    40fa:	11 97       	sbiw	r26, 0x01	; 1
    40fc:	95 31       	cpi	r25, 0x15	; 21
    40fe:	08 f0       	brcs	.+2      	; 0x4102 <lora_driver_sent_upload_message+0x1c>
    4100:	b4 c0       	rjmp	.+360    	; 0x426a <lora_driver_sent_upload_message+0x184>
    4102:	99 23       	and	r25, r25
    4104:	81 f1       	breq	.+96     	; 0x4166 <lora_driver_sent_upload_message+0x80>
    4106:	60 e0       	ldi	r22, 0x00	; 0
    4108:	70 e0       	ldi	r23, 0x00	; 0
    410a:	27 2f       	mov	r18, r23
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	46 2f       	mov	r20, r22
    4110:	50 e0       	ldi	r21, 0x00	; 0
    4112:	fd 01       	movw	r30, r26
    4114:	e4 0f       	add	r30, r20
    4116:	f5 1f       	adc	r31, r21
    4118:	92 81       	ldd	r25, Z+2	; 0x02
    411a:	92 95       	swap	r25
    411c:	9f 70       	andi	r25, 0x0F	; 15
    411e:	9a 30       	cpi	r25, 0x0A	; 10
    4120:	10 f0       	brcs	.+4      	; 0x4126 <lora_driver_sent_upload_message+0x40>
    4122:	99 5c       	subi	r25, 0xC9	; 201
    4124:	01 c0       	rjmp	.+2      	; 0x4128 <lora_driver_sent_upload_message+0x42>
    4126:	90 5d       	subi	r25, 0xD0	; 208
    4128:	f9 01       	movw	r30, r18
    412a:	e2 53       	subi	r30, 0x32	; 50
    412c:	f7 4e       	sbci	r31, 0xE7	; 231
    412e:	90 83       	st	Z, r25
    4130:	2f 5f       	subi	r18, 0xFF	; 255
    4132:	3f 4f       	sbci	r19, 0xFF	; 255
    4134:	fd 01       	movw	r30, r26
    4136:	e4 0f       	add	r30, r20
    4138:	f5 1f       	adc	r31, r21
    413a:	92 81       	ldd	r25, Z+2	; 0x02
    413c:	9f 70       	andi	r25, 0x0F	; 15
    413e:	49 2f       	mov	r20, r25
    4140:	50 e0       	ldi	r21, 0x00	; 0
    4142:	4a 30       	cpi	r20, 0x0A	; 10
    4144:	51 05       	cpc	r21, r1
    4146:	14 f0       	brlt	.+4      	; 0x414c <lora_driver_sent_upload_message+0x66>
    4148:	99 5c       	subi	r25, 0xC9	; 201
    414a:	01 c0       	rjmp	.+2      	; 0x414e <lora_driver_sent_upload_message+0x68>
    414c:	90 5d       	subi	r25, 0xD0	; 208
    414e:	f9 01       	movw	r30, r18
    4150:	e2 53       	subi	r30, 0x32	; 50
    4152:	f7 4e       	sbci	r31, 0xE7	; 231
    4154:	90 83       	st	Z, r25
    4156:	7e 5f       	subi	r23, 0xFE	; 254
    4158:	6f 5f       	subi	r22, 0xFF	; 255
    415a:	11 96       	adiw	r26, 0x01	; 1
    415c:	9c 91       	ld	r25, X
    415e:	11 97       	sbiw	r26, 0x01	; 1
    4160:	69 17       	cp	r22, r25
    4162:	98 f2       	brcs	.-90     	; 0x410a <lora_driver_sent_upload_message+0x24>
    4164:	01 c0       	rjmp	.+2      	; 0x4168 <lora_driver_sent_upload_message+0x82>
    4166:	70 e0       	ldi	r23, 0x00	; 0
    4168:	e7 2f       	mov	r30, r23
    416a:	f0 e0       	ldi	r31, 0x00	; 0
    416c:	e2 53       	subi	r30, 0x32	; 50
    416e:	f7 4e       	sbci	r31, 0xE7	; 231
    4170:	10 82       	st	Z, r1
    4172:	4c 91       	ld	r20, X
    4174:	81 11       	cpse	r24, r1
    4176:	03 c0       	rjmp	.+6      	; 0x417e <lora_driver_sent_upload_message+0x98>
    4178:	8a e6       	ldi	r24, 0x6A	; 106
    417a:	95 e0       	ldi	r25, 0x05	; 5
    417c:	02 c0       	rjmp	.+4      	; 0x4182 <lora_driver_sent_upload_message+0x9c>
    417e:	8c e6       	ldi	r24, 0x6C	; 108
    4180:	95 e0       	ldi	r25, 0x05	; 5
    4182:	2e ec       	ldi	r18, 0xCE	; 206
    4184:	38 e1       	ldi	r19, 0x18	; 24
    4186:	3f 93       	push	r19
    4188:	2f 93       	push	r18
    418a:	1f 92       	push	r1
    418c:	4f 93       	push	r20
    418e:	9f 93       	push	r25
    4190:	8f 93       	push	r24
    4192:	80 e7       	ldi	r24, 0x70	; 112
    4194:	95 e0       	ldi	r25, 0x05	; 5
    4196:	9f 93       	push	r25
    4198:	8f 93       	push	r24
    419a:	80 e1       	ldi	r24, 0x10	; 16
    419c:	99 e1       	ldi	r25, 0x19	; 25
    419e:	9f 93       	push	r25
    41a0:	8f 93       	push	r24
    41a2:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <sprintf>
    41a6:	60 e0       	ldi	r22, 0x00	; 0
    41a8:	70 e0       	ldi	r23, 0x00	; 0
    41aa:	80 e1       	ldi	r24, 0x10	; 16
    41ac:	99 e1       	ldi	r25, 0x19	; 25
    41ae:	aa de       	rcall	.-684    	; 0x3f04 <_upload_message_rc>
    41b0:	0f b6       	in	r0, 0x3f	; 63
    41b2:	f8 94       	cli
    41b4:	de bf       	out	0x3e, r29	; 62
    41b6:	0f be       	out	0x3f, r0	; 63
    41b8:	cd bf       	out	0x3d, r28	; 61
    41ba:	81 11       	cpse	r24, r1
    41bc:	59 c0       	rjmp	.+178    	; 0x4270 <lora_driver_sent_upload_message+0x18a>
    41be:	08 e2       	ldi	r16, 0x28	; 40
    41c0:	15 e0       	ldi	r17, 0x05	; 5
    41c2:	20 e0       	ldi	r18, 0x00	; 0
    41c4:	30 e0       	ldi	r19, 0x00	; 0
    41c6:	4d e2       	ldi	r20, 0x2D	; 45
    41c8:	50 e0       	ldi	r21, 0x00	; 0
    41ca:	6d e3       	ldi	r22, 0x3D	; 61
    41cc:	79 e1       	ldi	r23, 0x19	; 25
    41ce:	80 91 b4 18 	lds	r24, 0x18B4	; 0x8018b4 <_serial_reply_buffer_handle>
    41d2:	90 91 b5 18 	lds	r25, 0x18B5	; 0x8018b5 <_serial_reply_buffer_handle+0x1>
    41d6:	0e 94 30 10 	call	0x2060	; 0x2060 <xStreamBufferReceive>
    41da:	88 23       	and	r24, r24
    41dc:	09 f4       	brne	.+2      	; 0x41e0 <lora_driver_sent_upload_message+0xfa>
    41de:	47 c0       	rjmp	.+142    	; 0x426e <lora_driver_sent_upload_message+0x188>
    41e0:	8d e3       	ldi	r24, 0x3D	; 61
    41e2:	99 e1       	ldi	r25, 0x19	; 25
    41e4:	1a de       	rcall	.-972    	; 0x3e1a <_reply2return_code>
    41e6:	8e 30       	cpi	r24, 0x0E	; 14
    41e8:	09 f0       	breq	.+2      	; 0x41ec <lora_driver_sent_upload_message+0x106>
    41ea:	42 c0       	rjmp	.+132    	; 0x4270 <lora_driver_sent_upload_message+0x18a>
    41ec:	87 e0       	ldi	r24, 0x07	; 7
    41ee:	89 83       	std	Y+1, r24	; 0x01
    41f0:	80 91 b2 18 	lds	r24, 0x18B2	; 0x8018b2 <_downlinkMessageBuffer>
    41f4:	90 91 b3 18 	lds	r25, 0x18B3	; 0x8018b3 <_downlinkMessageBuffer+0x1>
    41f8:	89 2b       	or	r24, r25
    41fa:	a9 f1       	breq	.+106    	; 0x4266 <lora_driver_sent_upload_message+0x180>
    41fc:	be 01       	movw	r22, r28
    41fe:	6f 5f       	subi	r22, 0xFF	; 255
    4200:	7f 4f       	sbci	r23, 0xFF	; 255
    4202:	8d e3       	ldi	r24, 0x3D	; 61
    4204:	99 e1       	ldi	r25, 0x19	; 25
    4206:	68 d1       	rcall	.+720    	; 0x44d8 <decode_port_no>
    4208:	80 93 b8 18 	sts	0x18B8, r24	; 0x8018b8 <_downlink_payload>
    420c:	e9 81       	ldd	r30, Y+1	; 0x01
    420e:	f0 e0       	ldi	r31, 0x00	; 0
    4210:	e3 5c       	subi	r30, 0xC3	; 195
    4212:	f6 4e       	sbci	r31, 0xE6	; 230
    4214:	df 01       	movw	r26, r30
    4216:	0d 90       	ld	r0, X+
    4218:	00 20       	and	r0, r0
    421a:	e9 f7       	brne	.-6      	; 0x4216 <lora_driver_sent_upload_message+0x130>
    421c:	11 97       	sbiw	r26, 0x01	; 1
    421e:	ae 1b       	sub	r26, r30
    4220:	bf 0b       	sbc	r27, r31
    4222:	aa 23       	and	r26, r26
    4224:	91 f0       	breq	.+36     	; 0x424a <lora_driver_sent_upload_message+0x164>
    4226:	bb 27       	eor	r27, r27
    4228:	cd 01       	movw	r24, r26
    422a:	01 97       	sbiw	r24, 0x01	; 1
    422c:	9c 01       	movw	r18, r24
    422e:	12 f4       	brpl	.+4      	; 0x4234 <lora_driver_sent_upload_message+0x14e>
    4230:	2f 5f       	subi	r18, 0xFF	; 255
    4232:	3f 4f       	sbci	r19, 0xFF	; 255
    4234:	35 95       	asr	r19
    4236:	27 95       	ror	r18
    4238:	20 93 b9 18 	sts	0x18B9, r18	; 0x8018b9 <_downlink_payload+0x1>
    423c:	af 01       	movw	r20, r30
    423e:	4f 5f       	subi	r20, 0xFF	; 255
    4240:	5f 4f       	sbci	r21, 0xFF	; 255
    4242:	64 e1       	ldi	r22, 0x14	; 20
    4244:	8a eb       	ldi	r24, 0xBA	; 186
    4246:	98 e1       	ldi	r25, 0x18	; 24
    4248:	73 d1       	rcall	.+742    	; 0x4530 <decode_hexadecimal_string_bytes>
    424a:	01 e0       	ldi	r16, 0x01	; 1
    424c:	10 e0       	ldi	r17, 0x00	; 0
    424e:	20 e0       	ldi	r18, 0x00	; 0
    4250:	30 e0       	ldi	r19, 0x00	; 0
    4252:	46 e1       	ldi	r20, 0x16	; 22
    4254:	50 e0       	ldi	r21, 0x00	; 0
    4256:	68 eb       	ldi	r22, 0xB8	; 184
    4258:	78 e1       	ldi	r23, 0x18	; 24
    425a:	80 91 b2 18 	lds	r24, 0x18B2	; 0x8018b2 <_downlinkMessageBuffer>
    425e:	90 91 b3 18 	lds	r25, 0x18B3	; 0x8018b3 <_downlinkMessageBuffer+0x1>
    4262:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <xStreamBufferSend>
    4266:	8e e0       	ldi	r24, 0x0E	; 14
    4268:	03 c0       	rjmp	.+6      	; 0x4270 <lora_driver_sent_upload_message+0x18a>
    426a:	84 e1       	ldi	r24, 0x14	; 20
    426c:	01 c0       	rjmp	.+2      	; 0x4270 <lora_driver_sent_upload_message+0x18a>
    426e:	80 e0       	ldi	r24, 0x00	; 0
    4270:	0f 90       	pop	r0
    4272:	df 91       	pop	r29
    4274:	cf 91       	pop	r28
    4276:	1f 91       	pop	r17
    4278:	0f 91       	pop	r16
    427a:	08 95       	ret

0000427c <lora_driver_set_adaptive_data_rate>:
    427c:	81 30       	cpi	r24, 0x01	; 1
    427e:	19 f0       	breq	.+6      	; 0x4286 <lora_driver_set_adaptive_data_rate+0xa>
    4280:	60 e8       	ldi	r22, 0x80	; 128
    4282:	75 e0       	ldi	r23, 0x05	; 5
    4284:	02 c0       	rjmp	.+4      	; 0x428a <lora_driver_set_adaptive_data_rate+0xe>
    4286:	69 e5       	ldi	r22, 0x59	; 89
    4288:	76 e0       	ldi	r23, 0x06	; 6
    428a:	84 e8       	ldi	r24, 0x84	; 132
    428c:	95 e0       	ldi	r25, 0x05	; 5
    428e:	3a ce       	rjmp	.-908    	; 0x3f04 <_upload_message_rc>
    4290:	08 95       	ret

00004292 <lora_driver_set_receive_delay>:
    4292:	9f 93       	push	r25
    4294:	8f 93       	push	r24
    4296:	85 eb       	ldi	r24, 0xB5	; 181
    4298:	95 e0       	ldi	r25, 0x05	; 5
    429a:	9f 93       	push	r25
    429c:	8f 93       	push	r24
    429e:	80 e1       	ldi	r24, 0x10	; 16
    42a0:	99 e1       	ldi	r25, 0x19	; 25
    42a2:	9f 93       	push	r25
    42a4:	8f 93       	push	r24
    42a6:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <sprintf>
    42aa:	60 e0       	ldi	r22, 0x00	; 0
    42ac:	70 e0       	ldi	r23, 0x00	; 0
    42ae:	80 e1       	ldi	r24, 0x10	; 16
    42b0:	99 e1       	ldi	r25, 0x19	; 25
    42b2:	28 de       	rcall	.-944    	; 0x3f04 <_upload_message_rc>
    42b4:	0f 90       	pop	r0
    42b6:	0f 90       	pop	r0
    42b8:	0f 90       	pop	r0
    42ba:	0f 90       	pop	r0
    42bc:	0f 90       	pop	r0
    42be:	0f 90       	pop	r0
    42c0:	08 95       	ret

000042c2 <lora_driver_configure_to_eu868>:
    42c2:	2f 92       	push	r2
    42c4:	3f 92       	push	r3
    42c6:	4f 92       	push	r4
    42c8:	5f 92       	push	r5
    42ca:	6f 92       	push	r6
    42cc:	7f 92       	push	r7
    42ce:	8f 92       	push	r8
    42d0:	9f 92       	push	r9
    42d2:	af 92       	push	r10
    42d4:	bf 92       	push	r11
    42d6:	cf 92       	push	r12
    42d8:	df 92       	push	r13
    42da:	ef 92       	push	r14
    42dc:	ff 92       	push	r15
    42de:	0f 93       	push	r16
    42e0:	1f 93       	push	r17
    42e2:	cf 93       	push	r28
    42e4:	df 93       	push	r29
    42e6:	cd b7       	in	r28, 0x3d	; 61
    42e8:	de b7       	in	r29, 0x3e	; 62
    42ea:	a0 97       	sbiw	r28, 0x20	; 32
    42ec:	0f b6       	in	r0, 0x3f	; 63
    42ee:	f8 94       	cli
    42f0:	de bf       	out	0x3e, r29	; 62
    42f2:	0f be       	out	0x3f, r0	; 63
    42f4:	cd bf       	out	0x3d, r28	; 61
    42f6:	62 ee       	ldi	r22, 0xE2	; 226
    42f8:	75 e0       	ldi	r23, 0x05	; 5
    42fa:	8e ee       	ldi	r24, 0xEE	; 238
    42fc:	95 e0       	ldi	r25, 0x05	; 5
    42fe:	33 dd       	rcall	.-1434   	; 0x3d66 <_upload_message>
    4300:	8c dd       	rcall	.-1256   	; 0x3e1a <_reply2return_code>
    4302:	81 11       	cpse	r24, r1
    4304:	a3 c0       	rjmp	.+326    	; 0x444c <lora_driver_configure_to_eu868+0x18a>
    4306:	80 e2       	ldi	r24, 0x20	; 32
    4308:	e2 e2       	ldi	r30, 0x22	; 34
    430a:	f2 e0       	ldi	r31, 0x02	; 2
    430c:	de 01       	movw	r26, r28
    430e:	11 96       	adiw	r26, 0x01	; 1
    4310:	01 90       	ld	r0, Z+
    4312:	0d 92       	st	X+, r0
    4314:	8a 95       	dec	r24
    4316:	e1 f7       	brne	.-8      	; 0x4310 <lora_driver_configure_to_eu868+0x4e>
    4318:	9e 01       	movw	r18, r28
    431a:	2f 5f       	subi	r18, 0xFF	; 255
    431c:	3f 4f       	sbci	r19, 0xFF	; 255
    431e:	69 01       	movw	r12, r18
    4320:	e1 2c       	mov	r14, r1
    4322:	f1 2c       	mov	r15, r1
    4324:	0f 2e       	mov	r0, r31
    4326:	fa ef       	ldi	r31, 0xFA	; 250
    4328:	af 2e       	mov	r10, r31
    432a:	f5 e0       	ldi	r31, 0x05	; 5
    432c:	bf 2e       	mov	r11, r31
    432e:	f0 2d       	mov	r31, r0
    4330:	00 e1       	ldi	r16, 0x10	; 16
    4332:	19 e1       	ldi	r17, 0x19	; 25
    4334:	0f 2e       	mov	r0, r31
    4336:	f3 e1       	ldi	r31, 0x13	; 19
    4338:	4f 2e       	mov	r4, r31
    433a:	f6 e0       	ldi	r31, 0x06	; 6
    433c:	5f 2e       	mov	r5, r31
    433e:	f0 2d       	mov	r31, r0
    4340:	0f 2e       	mov	r0, r31
    4342:	fa e2       	ldi	r31, 0x2A	; 42
    4344:	8f 2e       	mov	r8, r31
    4346:	f6 e0       	ldi	r31, 0x06	; 6
    4348:	9f 2e       	mov	r9, r31
    434a:	f0 2d       	mov	r31, r0
    434c:	0f 2e       	mov	r0, r31
    434e:	f4 e4       	ldi	r31, 0x44	; 68
    4350:	6f 2e       	mov	r6, r31
    4352:	f6 e0       	ldi	r31, 0x06	; 6
    4354:	7f 2e       	mov	r7, r31
    4356:	f0 2d       	mov	r31, r0
    4358:	3e 2c       	mov	r3, r14
    435a:	2f 2c       	mov	r2, r15
    435c:	ff 92       	push	r15
    435e:	ef 92       	push	r14
    4360:	bf 92       	push	r11
    4362:	af 92       	push	r10
    4364:	1f 93       	push	r17
    4366:	0f 93       	push	r16
    4368:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <sprintf>
    436c:	60 e0       	ldi	r22, 0x00	; 0
    436e:	70 e0       	ldi	r23, 0x00	; 0
    4370:	c8 01       	movw	r24, r16
    4372:	f9 dc       	rcall	.-1550   	; 0x3d66 <_upload_message>
    4374:	52 dd       	rcall	.-1372   	; 0x3e1a <_reply2return_code>
    4376:	0f 90       	pop	r0
    4378:	0f 90       	pop	r0
    437a:	0f 90       	pop	r0
    437c:	0f 90       	pop	r0
    437e:	0f 90       	pop	r0
    4380:	0f 90       	pop	r0
    4382:	81 11       	cpse	r24, r1
    4384:	63 c0       	rjmp	.+198    	; 0x444c <lora_driver_configure_to_eu868+0x18a>
    4386:	32 e0       	ldi	r19, 0x02	; 2
    4388:	3e 15       	cp	r19, r14
    438a:	e8 f4       	brcc	.+58     	; 0x43c6 <lora_driver_configure_to_eu868+0x104>
    438c:	f6 01       	movw	r30, r12
    438e:	83 81       	ldd	r24, Z+3	; 0x03
    4390:	8f 93       	push	r24
    4392:	82 81       	ldd	r24, Z+2	; 0x02
    4394:	8f 93       	push	r24
    4396:	81 81       	ldd	r24, Z+1	; 0x01
    4398:	8f 93       	push	r24
    439a:	80 81       	ld	r24, Z
    439c:	8f 93       	push	r24
    439e:	ff 92       	push	r15
    43a0:	ef 92       	push	r14
    43a2:	5f 92       	push	r5
    43a4:	4f 92       	push	r4
    43a6:	1f 93       	push	r17
    43a8:	0f 93       	push	r16
    43aa:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <sprintf>
    43ae:	60 e0       	ldi	r22, 0x00	; 0
    43b0:	70 e0       	ldi	r23, 0x00	; 0
    43b2:	c8 01       	movw	r24, r16
    43b4:	d8 dc       	rcall	.-1616   	; 0x3d66 <_upload_message>
    43b6:	31 dd       	rcall	.-1438   	; 0x3e1a <_reply2return_code>
    43b8:	0f b6       	in	r0, 0x3f	; 63
    43ba:	f8 94       	cli
    43bc:	de bf       	out	0x3e, r29	; 62
    43be:	0f be       	out	0x3f, r0	; 63
    43c0:	cd bf       	out	0x3d, r28	; 61
    43c2:	81 11       	cpse	r24, r1
    43c4:	43 c0       	rjmp	.+134    	; 0x444c <lora_driver_configure_to_eu868+0x18a>
    43c6:	2f 92       	push	r2
    43c8:	3f 92       	push	r3
    43ca:	9f 92       	push	r9
    43cc:	8f 92       	push	r8
    43ce:	1f 93       	push	r17
    43d0:	0f 93       	push	r16
    43d2:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <sprintf>
    43d6:	60 e0       	ldi	r22, 0x00	; 0
    43d8:	70 e0       	ldi	r23, 0x00	; 0
    43da:	c8 01       	movw	r24, r16
    43dc:	c4 dc       	rcall	.-1656   	; 0x3d66 <_upload_message>
    43de:	1d dd       	rcall	.-1478   	; 0x3e1a <_reply2return_code>
    43e0:	0f 90       	pop	r0
    43e2:	0f 90       	pop	r0
    43e4:	0f 90       	pop	r0
    43e6:	0f 90       	pop	r0
    43e8:	0f 90       	pop	r0
    43ea:	0f 90       	pop	r0
    43ec:	81 11       	cpse	r24, r1
    43ee:	2e c0       	rjmp	.+92     	; 0x444c <lora_driver_configure_to_eu868+0x18a>
    43f0:	2f 92       	push	r2
    43f2:	3f 92       	push	r3
    43f4:	7f 92       	push	r7
    43f6:	6f 92       	push	r6
    43f8:	1f 93       	push	r17
    43fa:	0f 93       	push	r16
    43fc:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <sprintf>
    4400:	60 e0       	ldi	r22, 0x00	; 0
    4402:	70 e0       	ldi	r23, 0x00	; 0
    4404:	c8 01       	movw	r24, r16
    4406:	af dc       	rcall	.-1698   	; 0x3d66 <_upload_message>
    4408:	08 dd       	rcall	.-1520   	; 0x3e1a <_reply2return_code>
    440a:	0f 90       	pop	r0
    440c:	0f 90       	pop	r0
    440e:	0f 90       	pop	r0
    4410:	0f 90       	pop	r0
    4412:	0f 90       	pop	r0
    4414:	0f 90       	pop	r0
    4416:	81 11       	cpse	r24, r1
    4418:	19 c0       	rjmp	.+50     	; 0x444c <lora_driver_configure_to_eu868+0x18a>
    441a:	3f ef       	ldi	r19, 0xFF	; 255
    441c:	e3 1a       	sub	r14, r19
    441e:	f3 0a       	sbc	r15, r19
    4420:	84 e0       	ldi	r24, 0x04	; 4
    4422:	c8 0e       	add	r12, r24
    4424:	d1 1c       	adc	r13, r1
    4426:	98 e0       	ldi	r25, 0x08	; 8
    4428:	e9 16       	cp	r14, r25
    442a:	f1 04       	cpc	r15, r1
    442c:	09 f0       	breq	.+2      	; 0x4430 <lora_driver_configure_to_eu868+0x16e>
    442e:	94 cf       	rjmp	.-216    	; 0x4358 <lora_driver_configure_to_eu868+0x96>
    4430:	60 e0       	ldi	r22, 0x00	; 0
    4432:	70 e0       	ldi	r23, 0x00	; 0
    4434:	8c e5       	ldi	r24, 0x5C	; 92
    4436:	96 e0       	ldi	r25, 0x06	; 6
    4438:	96 dc       	rcall	.-1748   	; 0x3d66 <_upload_message>
    443a:	ef dc       	rcall	.-1570   	; 0x3e1a <_reply2return_code>
    443c:	81 11       	cpse	r24, r1
    443e:	06 c0       	rjmp	.+12     	; 0x444c <lora_driver_configure_to_eu868+0x18a>
    4440:	60 e0       	ldi	r22, 0x00	; 0
    4442:	70 e0       	ldi	r23, 0x00	; 0
    4444:	8d e6       	ldi	r24, 0x6D	; 109
    4446:	96 e0       	ldi	r25, 0x06	; 6
    4448:	8e dc       	rcall	.-1764   	; 0x3d66 <_upload_message>
    444a:	e7 dc       	rcall	.-1586   	; 0x3e1a <_reply2return_code>
    444c:	a0 96       	adiw	r28, 0x20	; 32
    444e:	0f b6       	in	r0, 0x3f	; 63
    4450:	f8 94       	cli
    4452:	de bf       	out	0x3e, r29	; 62
    4454:	0f be       	out	0x3f, r0	; 63
    4456:	cd bf       	out	0x3d, r28	; 61
    4458:	df 91       	pop	r29
    445a:	cf 91       	pop	r28
    445c:	1f 91       	pop	r17
    445e:	0f 91       	pop	r16
    4460:	ff 90       	pop	r15
    4462:	ef 90       	pop	r14
    4464:	df 90       	pop	r13
    4466:	cf 90       	pop	r12
    4468:	bf 90       	pop	r11
    446a:	af 90       	pop	r10
    446c:	9f 90       	pop	r9
    446e:	8f 90       	pop	r8
    4470:	7f 90       	pop	r7
    4472:	6f 90       	pop	r6
    4474:	5f 90       	pop	r5
    4476:	4f 90       	pop	r4
    4478:	3f 90       	pop	r3
    447a:	2f 90       	pop	r2
    447c:	08 95       	ret

0000447e <lora_driver_set_otaa_identity>:
    447e:	ef 92       	push	r14
    4480:	ff 92       	push	r15
    4482:	0f 93       	push	r16
    4484:	1f 93       	push	r17
    4486:	cf 93       	push	r28
    4488:	df 93       	push	r29
    448a:	ec 01       	movw	r28, r24
    448c:	8b 01       	movw	r16, r22
    448e:	7a 01       	movw	r14, r20
    4490:	81 e0       	ldi	r24, 0x01	; 1
    4492:	f4 de       	rcall	.-536    	; 0x427c <lora_driver_set_adaptive_data_rate>
    4494:	81 11       	cpse	r24, r1
    4496:	0d c0       	rjmp	.+26     	; 0x44b2 <lora_driver_set_otaa_identity+0x34>
    4498:	ce 01       	movw	r24, r28
    449a:	d4 dd       	rcall	.-1112   	; 0x4044 <lora_driver_set_application_identifier>
    449c:	81 11       	cpse	r24, r1
    449e:	09 c0       	rjmp	.+18     	; 0x44b2 <lora_driver_set_otaa_identity+0x34>
    44a0:	c8 01       	movw	r24, r16
    44a2:	e1 dd       	rcall	.-1086   	; 0x4066 <lora_driver_set_application_key>
    44a4:	81 11       	cpse	r24, r1
    44a6:	05 c0       	rjmp	.+10     	; 0x44b2 <lora_driver_set_otaa_identity+0x34>
    44a8:	c7 01       	movw	r24, r14
    44aa:	bb dd       	rcall	.-1162   	; 0x4022 <lora_driver_set_device_identifier>
    44ac:	81 11       	cpse	r24, r1
    44ae:	01 c0       	rjmp	.+2      	; 0x44b2 <lora_driver_set_otaa_identity+0x34>
    44b0:	eb dd       	rcall	.-1066   	; 0x4088 <lora_driver_save_mac>
    44b2:	df 91       	pop	r29
    44b4:	cf 91       	pop	r28
    44b6:	1f 91       	pop	r17
    44b8:	0f 91       	pop	r16
    44ba:	ff 90       	pop	r15
    44bc:	ef 90       	pop	r14
    44be:	08 95       	ret

000044c0 <lora_driver_map_return_code_to_text>:
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	fc 01       	movw	r30, r24
    44c4:	ee 0f       	add	r30, r30
    44c6:	ff 1f       	adc	r31, r31
    44c8:	8e 0f       	add	r24, r30
    44ca:	9f 1f       	adc	r25, r31
    44cc:	fc 01       	movw	r30, r24
    44ce:	ea 5c       	subi	r30, 0xCA	; 202
    44d0:	f8 4f       	sbci	r31, 0xF8	; 248
    44d2:	81 81       	ldd	r24, Z+1	; 0x01
    44d4:	92 81       	ldd	r25, Z+2	; 0x02
    44d6:	08 95       	ret

000044d8 <decode_port_no>:
    44d8:	dc 01       	movw	r26, r24
    44da:	00 97       	sbiw	r24, 0x00	; 0
    44dc:	29 f1       	breq	.+74     	; 0x4528 <decode_port_no+0x50>
    44de:	fb 01       	movw	r30, r22
    44e0:	20 81       	ld	r18, Z
    44e2:	fc 01       	movw	r30, r24
    44e4:	01 90       	ld	r0, Z+
    44e6:	00 20       	and	r0, r0
    44e8:	e9 f7       	brne	.-6      	; 0x44e4 <decode_port_no+0xc>
    44ea:	31 97       	sbiw	r30, 0x01	; 1
    44ec:	e8 1b       	sub	r30, r24
    44ee:	f9 0b       	sbc	r31, r25
    44f0:	82 2f       	mov	r24, r18
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	e8 17       	cp	r30, r24
    44f6:	f9 07       	cpc	r31, r25
    44f8:	c8 f0       	brcs	.+50     	; 0x452c <decode_port_no+0x54>
    44fa:	80 e0       	ldi	r24, 0x00	; 0
    44fc:	08 c0       	rjmp	.+16     	; 0x450e <decode_port_no+0x36>
    44fe:	88 0f       	add	r24, r24
    4500:	38 2f       	mov	r19, r24
    4502:	33 0f       	add	r19, r19
    4504:	33 0f       	add	r19, r19
    4506:	83 0f       	add	r24, r19
    4508:	80 53       	subi	r24, 0x30	; 48
    450a:	89 0f       	add	r24, r25
    450c:	2f 5f       	subi	r18, 0xFF	; 255
    450e:	fd 01       	movw	r30, r26
    4510:	e2 0f       	add	r30, r18
    4512:	f1 1d       	adc	r31, r1
    4514:	90 81       	ld	r25, Z
    4516:	30 ed       	ldi	r19, 0xD0	; 208
    4518:	39 0f       	add	r19, r25
    451a:	3a 30       	cpi	r19, 0x0A	; 10
    451c:	10 f4       	brcc	.+4      	; 0x4522 <decode_port_no+0x4a>
    451e:	91 11       	cpse	r25, r1
    4520:	ee cf       	rjmp	.-36     	; 0x44fe <decode_port_no+0x26>
    4522:	fb 01       	movw	r30, r22
    4524:	20 83       	st	Z, r18
    4526:	08 95       	ret
    4528:	80 e0       	ldi	r24, 0x00	; 0
    452a:	08 95       	ret
    452c:	80 e0       	ldi	r24, 0x00	; 0
    452e:	08 95       	ret

00004530 <decode_hexadecimal_string_bytes>:
    4530:	0f 93       	push	r16
    4532:	1f 93       	push	r17
    4534:	cf 93       	push	r28
    4536:	df 93       	push	r29
    4538:	dc 01       	movw	r26, r24
    453a:	ea 01       	movw	r28, r20
    453c:	20 97       	sbiw	r28, 0x00	; 0
    453e:	e1 f1       	breq	.+120    	; 0x45b8 <decode_hexadecimal_string_bytes+0x88>
    4540:	fa 01       	movw	r30, r20
    4542:	01 90       	ld	r0, Z+
    4544:	00 20       	and	r0, r0
    4546:	e9 f7       	brne	.-6      	; 0x4542 <decode_hexadecimal_string_bytes+0x12>
    4548:	31 97       	sbiw	r30, 0x01	; 1
    454a:	e4 1b       	sub	r30, r20
    454c:	f5 0b       	sbc	r31, r21
    454e:	32 97       	sbiw	r30, 0x02	; 2
    4550:	10 f5       	brcc	.+68     	; 0x4596 <decode_hexadecimal_string_bytes+0x66>
    4552:	32 c0       	rjmp	.+100    	; 0x45b8 <decode_hexadecimal_string_bytes+0x88>
    4554:	8d 01       	movw	r16, r26
    4556:	04 0f       	add	r16, r20
    4558:	15 1f       	adc	r17, r21
    455a:	30 e0       	ldi	r19, 0x00	; 0
    455c:	ae 01       	movw	r20, r28
    455e:	42 0f       	add	r20, r18
    4560:	53 1f       	adc	r21, r19
    4562:	fa 01       	movw	r30, r20
    4564:	90 81       	ld	r25, Z
    4566:	91 34       	cpi	r25, 0x41	; 65
    4568:	28 f0       	brcs	.+10     	; 0x4574 <decode_hexadecimal_string_bytes+0x44>
    456a:	97 53       	subi	r25, 0x37	; 55
    456c:	59 2f       	mov	r21, r25
    456e:	52 95       	swap	r21
    4570:	50 7f       	andi	r21, 0xF0	; 240
    4572:	03 c0       	rjmp	.+6      	; 0x457a <decode_hexadecimal_string_bytes+0x4a>
    4574:	59 2f       	mov	r21, r25
    4576:	52 95       	swap	r21
    4578:	50 7f       	andi	r21, 0xF0	; 240
    457a:	2c 0f       	add	r18, r28
    457c:	3d 1f       	adc	r19, r29
    457e:	f9 01       	movw	r30, r18
    4580:	91 81       	ldd	r25, Z+1	; 0x01
    4582:	91 34       	cpi	r25, 0x41	; 65
    4584:	10 f0       	brcs	.+4      	; 0x458a <decode_hexadecimal_string_bytes+0x5a>
    4586:	97 53       	subi	r25, 0x37	; 55
    4588:	01 c0       	rjmp	.+2      	; 0x458c <decode_hexadecimal_string_bytes+0x5c>
    458a:	90 53       	subi	r25, 0x30	; 48
    458c:	95 0f       	add	r25, r21
    458e:	f8 01       	movw	r30, r16
    4590:	90 83       	st	Z, r25
    4592:	8f 5f       	subi	r24, 0xFF	; 255
    4594:	01 c0       	rjmp	.+2      	; 0x4598 <decode_hexadecimal_string_bytes+0x68>
    4596:	80 e0       	ldi	r24, 0x00	; 0
    4598:	28 2f       	mov	r18, r24
    459a:	22 0f       	add	r18, r18
    459c:	48 2f       	mov	r20, r24
    459e:	50 e0       	ldi	r21, 0x00	; 0
    45a0:	fe 01       	movw	r30, r28
    45a2:	01 90       	ld	r0, Z+
    45a4:	00 20       	and	r0, r0
    45a6:	e9 f7       	brne	.-6      	; 0x45a2 <decode_hexadecimal_string_bytes+0x72>
    45a8:	31 97       	sbiw	r30, 0x01	; 1
    45aa:	ec 1b       	sub	r30, r28
    45ac:	fd 0b       	sbc	r31, r29
    45ae:	4e 17       	cp	r20, r30
    45b0:	5f 07       	cpc	r21, r31
    45b2:	10 f4       	brcc	.+4      	; 0x45b8 <decode_hexadecimal_string_bytes+0x88>
    45b4:	86 13       	cpse	r24, r22
    45b6:	ce cf       	rjmp	.-100    	; 0x4554 <decode_hexadecimal_string_bytes+0x24>
    45b8:	df 91       	pop	r29
    45ba:	cf 91       	pop	r28
    45bc:	1f 91       	pop	r17
    45be:	0f 91       	pop	r16
    45c0:	08 95       	ret

000045c2 <reg_read_register>:
    45c2:	fc 01       	movw	r30, r24
    45c4:	80 81       	ld	r24, Z
    45c6:	08 95       	ret

000045c8 <reg_read_bit>:
    45c8:	fc 01       	movw	r30, r24
    45ca:	20 81       	ld	r18, Z
    45cc:	81 e0       	ldi	r24, 0x01	; 1
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	02 c0       	rjmp	.+4      	; 0x45d6 <reg_read_bit+0xe>
    45d2:	88 0f       	add	r24, r24
    45d4:	99 1f       	adc	r25, r25
    45d6:	6a 95       	dec	r22
    45d8:	e2 f7       	brpl	.-8      	; 0x45d2 <reg_read_bit+0xa>
    45da:	82 23       	and	r24, r18
    45dc:	08 95       	ret

000045de <reg_read_bits>:
    45de:	fc 01       	movw	r30, r24
    45e0:	80 81       	ld	r24, Z
    45e2:	86 23       	and	r24, r22
    45e4:	08 95       	ret

000045e6 <reg_set_register>:
    45e6:	fc 01       	movw	r30, r24
    45e8:	60 83       	st	Z, r22
    45ea:	08 95       	ret

000045ec <reg_clear_register>:
    45ec:	fc 01       	movw	r30, r24
    45ee:	10 82       	st	Z, r1
    45f0:	08 95       	ret

000045f2 <reg_set_bit>:
    45f2:	fc 01       	movw	r30, r24
    45f4:	40 81       	ld	r20, Z
    45f6:	21 e0       	ldi	r18, 0x01	; 1
    45f8:	30 e0       	ldi	r19, 0x00	; 0
    45fa:	02 c0       	rjmp	.+4      	; 0x4600 <reg_set_bit+0xe>
    45fc:	22 0f       	add	r18, r18
    45fe:	33 1f       	adc	r19, r19
    4600:	6a 95       	dec	r22
    4602:	e2 f7       	brpl	.-8      	; 0x45fc <reg_set_bit+0xa>
    4604:	24 2b       	or	r18, r20
    4606:	20 83       	st	Z, r18
    4608:	08 95       	ret

0000460a <reg_set_bits>:
    460a:	fc 01       	movw	r30, r24
    460c:	20 81       	ld	r18, Z
    460e:	62 2b       	or	r22, r18
    4610:	60 83       	st	Z, r22
    4612:	08 95       	ret

00004614 <reg_toggle_bit>:
    4614:	fc 01       	movw	r30, r24
    4616:	40 81       	ld	r20, Z
    4618:	21 e0       	ldi	r18, 0x01	; 1
    461a:	30 e0       	ldi	r19, 0x00	; 0
    461c:	02 c0       	rjmp	.+4      	; 0x4622 <reg_toggle_bit+0xe>
    461e:	22 0f       	add	r18, r18
    4620:	33 1f       	adc	r19, r19
    4622:	6a 95       	dec	r22
    4624:	e2 f7       	brpl	.-8      	; 0x461e <reg_toggle_bit+0xa>
    4626:	24 27       	eor	r18, r20
    4628:	20 83       	st	Z, r18
    462a:	08 95       	ret

0000462c <reg_toggle_bits>:
    462c:	fc 01       	movw	r30, r24
    462e:	20 81       	ld	r18, Z
    4630:	62 27       	eor	r22, r18
    4632:	60 83       	st	Z, r22
    4634:	08 95       	ret

00004636 <reg_clear_bit>:
    4636:	fc 01       	movw	r30, r24
    4638:	90 81       	ld	r25, Z
    463a:	21 e0       	ldi	r18, 0x01	; 1
    463c:	30 e0       	ldi	r19, 0x00	; 0
    463e:	02 c0       	rjmp	.+4      	; 0x4644 <reg_clear_bit+0xe>
    4640:	22 0f       	add	r18, r18
    4642:	33 1f       	adc	r19, r19
    4644:	6a 95       	dec	r22
    4646:	e2 f7       	brpl	.-8      	; 0x4640 <reg_clear_bit+0xa>
    4648:	20 95       	com	r18
    464a:	29 23       	and	r18, r25
    464c:	20 83       	st	Z, r18
    464e:	08 95       	ret

00004650 <reg_clear_bits>:
    4650:	fc 01       	movw	r30, r24
    4652:	90 81       	ld	r25, Z
    4654:	60 95       	com	r22
    4656:	69 23       	and	r22, r25
    4658:	60 83       	st	Z, r22
    465a:	08 95       	ret

0000465c <_serial_call_back>:
    465c:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <crc_sum.1941>
    4660:	86 0f       	add	r24, r22
    4662:	80 93 6d 19 	sts	0x196D, r24	; 0x80196d <crc_sum.1941>
    4666:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <_mh_state>
    466a:	91 30       	cpi	r25, 0x01	; 1
    466c:	79 f0       	breq	.+30     	; 0x468c <_serial_call_back+0x30>
    466e:	28 f0       	brcs	.+10     	; 0x467a <_serial_call_back+0x1e>
    4670:	92 30       	cpi	r25, 0x02	; 2
    4672:	a9 f0       	breq	.+42     	; 0x469e <_serial_call_back+0x42>
    4674:	93 30       	cpi	r25, 0x03	; 3
    4676:	19 f1       	breq	.+70     	; 0x46be <_serial_call_back+0x62>
    4678:	08 95       	ret
    467a:	6f 3f       	cpi	r22, 0xFF	; 255
    467c:	09 f0       	breq	.+2      	; 0x4680 <_serial_call_back+0x24>
    467e:	48 c0       	rjmp	.+144    	; 0x4710 <_serial_call_back+0xb4>
    4680:	10 92 6d 19 	sts	0x196D, r1	; 0x80196d <crc_sum.1941>
    4684:	81 e0       	ldi	r24, 0x01	; 1
    4686:	80 93 70 19 	sts	0x1970, r24	; 0x801970 <_mh_state>
    468a:	08 95       	ret
    468c:	66 38       	cpi	r22, 0x86	; 134
    468e:	09 f0       	breq	.+2      	; 0x4692 <_serial_call_back+0x36>
    4690:	3f c0       	rjmp	.+126    	; 0x4710 <_serial_call_back+0xb4>
    4692:	10 92 6c 19 	sts	0x196C, r1	; 0x80196c <inDex.1939>
    4696:	82 e0       	ldi	r24, 0x02	; 2
    4698:	80 93 70 19 	sts	0x1970, r24	; 0x801970 <_mh_state>
    469c:	08 95       	ret
    469e:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <inDex.1939>
    46a2:	81 e0       	ldi	r24, 0x01	; 1
    46a4:	8e 0f       	add	r24, r30
    46a6:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <inDex.1939>
    46aa:	f0 e0       	ldi	r31, 0x00	; 0
    46ac:	e6 59       	subi	r30, 0x96	; 150
    46ae:	f6 4e       	sbci	r31, 0xE6	; 230
    46b0:	60 83       	st	Z, r22
    46b2:	82 30       	cpi	r24, 0x02	; 2
    46b4:	69 f5       	brne	.+90     	; 0x4710 <_serial_call_back+0xb4>
    46b6:	83 e0       	ldi	r24, 0x03	; 3
    46b8:	80 93 70 19 	sts	0x1970, r24	; 0x801970 <_mh_state>
    46bc:	08 95       	ret
    46be:	90 91 6c 19 	lds	r25, 0x196C	; 0x80196c <inDex.1939>
    46c2:	21 e0       	ldi	r18, 0x01	; 1
    46c4:	29 0f       	add	r18, r25
    46c6:	20 93 6c 19 	sts	0x196C, r18	; 0x80196c <inDex.1939>
    46ca:	96 30       	cpi	r25, 0x06	; 6
    46cc:	09 f5       	brne	.+66     	; 0x4710 <_serial_call_back+0xb4>
    46ce:	81 11       	cpse	r24, r1
    46d0:	0e c0       	rjmp	.+28     	; 0x46ee <_serial_call_back+0x92>
    46d2:	ea e6       	ldi	r30, 0x6A	; 106
    46d4:	f9 e1       	ldi	r31, 0x19	; 25
    46d6:	80 81       	ld	r24, Z
    46d8:	90 e0       	ldi	r25, 0x00	; 0
    46da:	98 2f       	mov	r25, r24
    46dc:	88 27       	eor	r24, r24
    46de:	21 81       	ldd	r18, Z+1	; 0x01
    46e0:	82 0f       	add	r24, r18
    46e2:	91 1d       	adc	r25, r1
    46e4:	90 93 72 19 	sts	0x1972, r25	; 0x801972 <_ppm+0x1>
    46e8:	80 93 71 19 	sts	0x1971, r24	; 0x801971 <_ppm>
    46ec:	04 c0       	rjmp	.+8      	; 0x46f6 <_serial_call_back+0x9a>
    46ee:	10 92 72 19 	sts	0x1972, r1	; 0x801972 <_ppm+0x1>
    46f2:	10 92 71 19 	sts	0x1971, r1	; 0x801971 <_ppm>
    46f6:	10 92 70 19 	sts	0x1970, r1	; 0x801970 <_mh_state>
    46fa:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <_app_call_back>
    46fe:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <_app_call_back+0x1>
    4702:	30 97       	sbiw	r30, 0x00	; 0
    4704:	29 f0       	breq	.+10     	; 0x4710 <_serial_call_back+0xb4>
    4706:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <_ppm>
    470a:	90 91 72 19 	lds	r25, 0x1972	; 0x801972 <_ppm+0x1>
    470e:	19 95       	eicall
    4710:	08 95       	ret

00004712 <mh_z19_create>:
    4712:	8f 92       	push	r8
    4714:	9f 92       	push	r9
    4716:	af 92       	push	r10
    4718:	cf 92       	push	r12
    471a:	ef 92       	push	r14
    471c:	0f 93       	push	r16
    471e:	cf 93       	push	r28
    4720:	df 93       	push	r29
    4722:	eb 01       	movw	r28, r22
    4724:	0f 2e       	mov	r0, r31
    4726:	fe e2       	ldi	r31, 0x2E	; 46
    4728:	8f 2e       	mov	r8, r31
    472a:	f3 e2       	ldi	r31, 0x23	; 35
    472c:	9f 2e       	mov	r9, r31
    472e:	f0 2d       	mov	r31, r0
    4730:	68 94       	set
    4732:	aa 24       	eor	r10, r10
    4734:	a4 f8       	bld	r10, 4
    4736:	68 94       	set
    4738:	cc 24       	eor	r12, r12
    473a:	c4 f8       	bld	r12, 4
    473c:	e1 2c       	mov	r14, r1
    473e:	00 e0       	ldi	r16, 0x00	; 0
    4740:	23 e0       	ldi	r18, 0x03	; 3
    4742:	40 e8       	ldi	r20, 0x80	; 128
    4744:	55 e2       	ldi	r21, 0x25	; 37
    4746:	60 e0       	ldi	r22, 0x00	; 0
    4748:	70 e0       	ldi	r23, 0x00	; 0
    474a:	74 d0       	rcall	.+232    	; 0x4834 <serial_new_instance>
    474c:	90 93 74 19 	sts	0x1974, r25	; 0x801974 <_serial+0x1>
    4750:	80 93 73 19 	sts	0x1973, r24	; 0x801973 <_serial>
    4754:	d0 93 6f 19 	sts	0x196F, r29	; 0x80196f <_app_call_back+0x1>
    4758:	c0 93 6e 19 	sts	0x196E, r28	; 0x80196e <_app_call_back>
    475c:	df 91       	pop	r29
    475e:	cf 91       	pop	r28
    4760:	0f 91       	pop	r16
    4762:	ef 90       	pop	r14
    4764:	cf 90       	pop	r12
    4766:	af 90       	pop	r10
    4768:	9f 90       	pop	r9
    476a:	8f 90       	pop	r8
    476c:	08 95       	ret

0000476e <mh_z19_take_meassuring>:
    476e:	cf 93       	push	r28
    4770:	df 93       	push	r29
    4772:	cd b7       	in	r28, 0x3d	; 61
    4774:	de b7       	in	r29, 0x3e	; 62
    4776:	29 97       	sbiw	r28, 0x09	; 9
    4778:	0f b6       	in	r0, 0x3f	; 63
    477a:	f8 94       	cli
    477c:	de bf       	out	0x3e, r29	; 62
    477e:	0f be       	out	0x3f, r0	; 63
    4780:	cd bf       	out	0x3d, r28	; 61
    4782:	89 e0       	ldi	r24, 0x09	; 9
    4784:	e2 e4       	ldi	r30, 0x42	; 66
    4786:	f2 e0       	ldi	r31, 0x02	; 2
    4788:	9e 01       	movw	r18, r28
    478a:	2f 5f       	subi	r18, 0xFF	; 255
    478c:	3f 4f       	sbci	r19, 0xFF	; 255
    478e:	d9 01       	movw	r26, r18
    4790:	01 90       	ld	r0, Z+
    4792:	0d 92       	st	X+, r0
    4794:	8a 95       	dec	r24
    4796:	e1 f7       	brne	.-8      	; 0x4790 <mh_z19_take_meassuring+0x22>
    4798:	10 92 72 19 	sts	0x1972, r1	; 0x801972 <_ppm+0x1>
    479c:	10 92 71 19 	sts	0x1971, r1	; 0x801971 <_ppm>
    47a0:	80 91 73 19 	lds	r24, 0x1973	; 0x801973 <_serial>
    47a4:	90 91 74 19 	lds	r25, 0x1974	; 0x801974 <_serial+0x1>
    47a8:	00 97       	sbiw	r24, 0x00	; 0
    47aa:	31 f0       	breq	.+12     	; 0x47b8 <mh_z19_take_meassuring+0x4a>
    47ac:	42 2f       	mov	r20, r18
    47ae:	53 2f       	mov	r21, r19
    47b0:	69 e0       	ldi	r22, 0x09	; 9
    47b2:	fc d0       	rcall	.+504    	; 0x49ac <serial_send_bytes>
    47b4:	80 e0       	ldi	r24, 0x00	; 0
    47b6:	01 c0       	rjmp	.+2      	; 0x47ba <mh_z19_take_meassuring+0x4c>
    47b8:	82 e0       	ldi	r24, 0x02	; 2
    47ba:	29 96       	adiw	r28, 0x09	; 9
    47bc:	0f b6       	in	r0, 0x3f	; 63
    47be:	f8 94       	cli
    47c0:	de bf       	out	0x3e, r29	; 62
    47c2:	0f be       	out	0x3f, r0	; 63
    47c4:	cd bf       	out	0x3d, r28	; 61
    47c6:	df 91       	pop	r29
    47c8:	cf 91       	pop	r28
    47ca:	08 95       	ret

000047cc <rcServoSet>:
    47cc:	65 36       	cpi	r22, 0x65	; 101
    47ce:	0c f0       	brlt	.+2      	; 0x47d2 <rcServoSet+0x6>
    47d0:	64 e6       	ldi	r22, 0x64	; 100
    47d2:	6c 39       	cpi	r22, 0x9C	; 156
    47d4:	0c f4       	brge	.+2      	; 0x47d8 <rcServoSet+0xc>
    47d6:	6c e9       	ldi	r22, 0x9C	; 156
    47d8:	96 ef       	ldi	r25, 0xF6	; 246
    47da:	69 02       	muls	r22, r25
    47dc:	b0 01       	movw	r22, r0
    47de:	11 24       	eor	r1, r1
    47e0:	68 54       	subi	r22, 0x48	; 72
    47e2:	74 4f       	sbci	r23, 0xF4	; 244
    47e4:	81 11       	cpse	r24, r1
    47e6:	05 c0       	rjmp	.+10     	; 0x47f2 <rcServoSet+0x26>
    47e8:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    47ec:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    47f0:	08 95       	ret
    47f2:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    47f6:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    47fa:	08 95       	ret

000047fc <rcServoCreate>:
    47fc:	ea e0       	ldi	r30, 0x0A	; 10
    47fe:	f1 e0       	ldi	r31, 0x01	; 1
    4800:	80 81       	ld	r24, Z
    4802:	88 61       	ori	r24, 0x18	; 24
    4804:	80 83       	st	Z, r24
    4806:	8f e3       	ldi	r24, 0x3F	; 63
    4808:	9c e9       	ldi	r25, 0x9C	; 156
    480a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    480e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    4812:	60 e0       	ldi	r22, 0x00	; 0
    4814:	80 e0       	ldi	r24, 0x00	; 0
    4816:	da df       	rcall	.-76     	; 0x47cc <rcServoSet>
    4818:	60 e0       	ldi	r22, 0x00	; 0
    481a:	81 e0       	ldi	r24, 0x01	; 1
    481c:	d7 df       	rcall	.-82     	; 0x47cc <rcServoSet>
    481e:	e0 e2       	ldi	r30, 0x20	; 32
    4820:	f1 e0       	ldi	r31, 0x01	; 1
    4822:	80 81       	ld	r24, Z
    4824:	82 6a       	ori	r24, 0xA2	; 162
    4826:	80 83       	st	Z, r24
    4828:	e1 e2       	ldi	r30, 0x21	; 33
    482a:	f1 e0       	ldi	r31, 0x01	; 1
    482c:	80 81       	ld	r24, Z
    482e:	8a 61       	ori	r24, 0x1A	; 26
    4830:	80 83       	st	Z, r24
    4832:	08 95       	ret

00004834 <serial_new_instance>:
    4834:	2f 92       	push	r2
    4836:	3f 92       	push	r3
    4838:	4f 92       	push	r4
    483a:	5f 92       	push	r5
    483c:	6f 92       	push	r6
    483e:	7f 92       	push	r7
    4840:	8f 92       	push	r8
    4842:	9f 92       	push	r9
    4844:	af 92       	push	r10
    4846:	cf 92       	push	r12
    4848:	ef 92       	push	r14
    484a:	ff 92       	push	r15
    484c:	0f 93       	push	r16
    484e:	1f 93       	push	r17
    4850:	cf 93       	push	r28
    4852:	df 93       	push	r29
    4854:	cd b7       	in	r28, 0x3d	; 61
    4856:	de b7       	in	r29, 0x3e	; 62
    4858:	f8 2e       	mov	r15, r24
    485a:	2a 01       	movw	r4, r20
    485c:	3b 01       	movw	r6, r22
    485e:	88 e0       	ldi	r24, 0x08	; 8
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	4a d7       	rcall	.+3732   	; 0x56f8 <malloc>
    4864:	8c 01       	movw	r16, r24
    4866:	8f 2d       	mov	r24, r15
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	88 0f       	add	r24, r24
    486c:	99 1f       	adc	r25, r25
    486e:	fc 01       	movw	r30, r24
    4870:	eb 58       	subi	r30, 0x8B	; 139
    4872:	f6 4e       	sbci	r31, 0xE6	; 230
    4874:	11 83       	std	Z+1, r17	; 0x01
    4876:	00 83       	st	Z, r16
    4878:	fc 01       	movw	r30, r24
    487a:	e5 5f       	subi	r30, 0xF5	; 245
    487c:	fd 4f       	sbci	r31, 0xFD	; 253
    487e:	80 81       	ld	r24, Z
    4880:	91 81       	ldd	r25, Z+1	; 0x01
    4882:	d8 01       	movw	r26, r16
    4884:	8d 93       	st	X+, r24
    4886:	9c 93       	st	X, r25
    4888:	6c 2d       	mov	r22, r12
    488a:	70 e0       	ldi	r23, 0x00	; 0
    488c:	84 e0       	ldi	r24, 0x04	; 4
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	19 d7       	rcall	.+3634   	; 0x56c4 <calloc>
    4892:	1c 01       	movw	r2, r24
    4894:	61 e0       	ldi	r22, 0x01	; 1
    4896:	70 e0       	ldi	r23, 0x00	; 0
    4898:	86 e0       	ldi	r24, 0x06	; 6
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	13 d7       	rcall	.+3622   	; 0x56c4 <calloc>
    489e:	7c 01       	movw	r14, r24
    48a0:	4c 2d       	mov	r20, r12
    48a2:	b1 01       	movw	r22, r2
    48a4:	2c d5       	rcall	.+2648   	; 0x52fe <fifo_init>
    48a6:	f8 01       	movw	r30, r16
    48a8:	f5 82       	std	Z+5, r15	; 0x05
    48aa:	e4 82       	std	Z+4, r14	; 0x04
    48ac:	6a 2d       	mov	r22, r10
    48ae:	70 e0       	ldi	r23, 0x00	; 0
    48b0:	84 e0       	ldi	r24, 0x04	; 4
    48b2:	90 e0       	ldi	r25, 0x00	; 0
    48b4:	07 d7       	rcall	.+3598   	; 0x56c4 <calloc>
    48b6:	1c 01       	movw	r2, r24
    48b8:	61 e0       	ldi	r22, 0x01	; 1
    48ba:	70 e0       	ldi	r23, 0x00	; 0
    48bc:	86 e0       	ldi	r24, 0x06	; 6
    48be:	90 e0       	ldi	r25, 0x00	; 0
    48c0:	01 d7       	rcall	.+3586   	; 0x56c4 <calloc>
    48c2:	7c 01       	movw	r14, r24
    48c4:	4a 2d       	mov	r20, r10
    48c6:	b1 01       	movw	r22, r2
    48c8:	1a d5       	rcall	.+2612   	; 0x52fe <fifo_init>
    48ca:	d8 01       	movw	r26, r16
    48cc:	13 96       	adiw	r26, 0x03	; 3
    48ce:	fc 92       	st	X, r15
    48d0:	ee 92       	st	-X, r14
    48d2:	12 97       	sbiw	r26, 0x02	; 2
    48d4:	17 96       	adiw	r26, 0x07	; 7
    48d6:	9c 92       	st	X, r9
    48d8:	8e 92       	st	-X, r8
    48da:	16 97       	sbiw	r26, 0x06	; 6
    48dc:	ff b6       	in	r15, 0x3f	; 63
    48de:	f8 94       	cli
    48e0:	ed 91       	ld	r30, X+
    48e2:	fc 91       	ld	r31, X
    48e4:	11 97       	sbiw	r26, 0x01	; 1
    48e6:	36 97       	sbiw	r30, 0x06	; 6
    48e8:	80 81       	ld	r24, Z
    48ea:	82 60       	ori	r24, 0x02	; 2
    48ec:	80 83       	st	Z, r24
    48ee:	8d 90       	ld	r8, X+
    48f0:	9c 90       	ld	r9, X
    48f2:	c3 01       	movw	r24, r6
    48f4:	b2 01       	movw	r22, r4
    48f6:	f1 d5       	rcall	.+3042   	; 0x54da <__floatunsisf>
    48f8:	20 e0       	ldi	r18, 0x00	; 0
    48fa:	30 e0       	ldi	r19, 0x00	; 0
    48fc:	40 e0       	ldi	r20, 0x00	; 0
    48fe:	51 e4       	ldi	r21, 0x41	; 65
    4900:	51 d6       	rcall	.+3234   	; 0x55a4 <__mulsf3>
    4902:	9b 01       	movw	r18, r22
    4904:	ac 01       	movw	r20, r24
    4906:	60 e0       	ldi	r22, 0x00	; 0
    4908:	74 e2       	ldi	r23, 0x24	; 36
    490a:	84 e7       	ldi	r24, 0x74	; 116
    490c:	9b e4       	ldi	r25, 0x4B	; 75
    490e:	7a d5       	rcall	.+2804   	; 0x5404 <__divsf3>
    4910:	20 e0       	ldi	r18, 0x00	; 0
    4912:	30 e0       	ldi	r19, 0x00	; 0
    4914:	40 e8       	ldi	r20, 0x80	; 128
    4916:	5f e3       	ldi	r21, 0x3F	; 63
    4918:	0e d5       	rcall	.+2588   	; 0x5336 <__subsf3>
    491a:	0e 94 16 1c 	call	0x382c	; 0x382c <__fixunssfsi>
    491e:	f4 01       	movw	r30, r8
    4920:	32 97       	sbiw	r30, 0x02	; 2
    4922:	60 83       	st	Z, r22
    4924:	d8 01       	movw	r26, r16
    4926:	ed 91       	ld	r30, X+
    4928:	fc 91       	ld	r31, X
    492a:	11 97       	sbiw	r26, 0x01	; 1
    492c:	35 97       	sbiw	r30, 0x05	; 5
    492e:	88 e9       	ldi	r24, 0x98	; 152
    4930:	80 83       	st	Z, r24
    4932:	ed 91       	ld	r30, X+
    4934:	fc 91       	ld	r31, X
    4936:	34 97       	sbiw	r30, 0x04	; 4
    4938:	86 e0       	ldi	r24, 0x06	; 6
    493a:	80 83       	st	Z, r24
    493c:	ff be       	out	0x3f, r15	; 63
    493e:	c8 01       	movw	r24, r16
    4940:	df 91       	pop	r29
    4942:	cf 91       	pop	r28
    4944:	1f 91       	pop	r17
    4946:	0f 91       	pop	r16
    4948:	ff 90       	pop	r15
    494a:	ef 90       	pop	r14
    494c:	cf 90       	pop	r12
    494e:	af 90       	pop	r10
    4950:	9f 90       	pop	r9
    4952:	8f 90       	pop	r8
    4954:	7f 90       	pop	r7
    4956:	6f 90       	pop	r6
    4958:	5f 90       	pop	r5
    495a:	4f 90       	pop	r4
    495c:	3f 90       	pop	r3
    495e:	2f 90       	pop	r2
    4960:	08 95       	ret

00004962 <serial_send_byte>:
    4962:	cf 93       	push	r28
    4964:	df 93       	push	r29
    4966:	ec 01       	movw	r28, r24
    4968:	ea 81       	ldd	r30, Y+2	; 0x02
    496a:	fb 81       	ldd	r31, Y+3	; 0x03
    496c:	93 81       	ldd	r25, Z+3	; 0x03
    496e:	82 81       	ldd	r24, Z+2	; 0x02
    4970:	25 81       	ldd	r18, Z+5	; 0x05
    4972:	98 1b       	sub	r25, r24
    4974:	92 23       	and	r25, r18
    4976:	84 81       	ldd	r24, Z+4	; 0x04
    4978:	98 17       	cp	r25, r24
    497a:	a1 f0       	breq	.+40     	; 0x49a4 <serial_send_byte+0x42>
    497c:	93 81       	ldd	r25, Z+3	; 0x03
    497e:	26 95       	lsr	r18
    4980:	29 23       	and	r18, r25
    4982:	a0 81       	ld	r26, Z
    4984:	b1 81       	ldd	r27, Z+1	; 0x01
    4986:	a2 0f       	add	r26, r18
    4988:	b1 1d       	adc	r27, r1
    498a:	6c 93       	st	X, r22
    498c:	9f 5f       	subi	r25, 0xFF	; 255
    498e:	25 81       	ldd	r18, Z+5	; 0x05
    4990:	92 23       	and	r25, r18
    4992:	93 83       	std	Z+3, r25	; 0x03
    4994:	e8 81       	ld	r30, Y
    4996:	f9 81       	ldd	r31, Y+1	; 0x01
    4998:	35 97       	sbiw	r30, 0x05	; 5
    499a:	80 81       	ld	r24, Z
    499c:	80 62       	ori	r24, 0x20	; 32
    499e:	80 83       	st	Z, r24
    49a0:	80 e0       	ldi	r24, 0x00	; 0
    49a2:	01 c0       	rjmp	.+2      	; 0x49a6 <serial_send_byte+0x44>
    49a4:	82 e0       	ldi	r24, 0x02	; 2
    49a6:	df 91       	pop	r29
    49a8:	cf 91       	pop	r28
    49aa:	08 95       	ret

000049ac <serial_send_bytes>:
    49ac:	ef 92       	push	r14
    49ae:	ff 92       	push	r15
    49b0:	0f 93       	push	r16
    49b2:	1f 93       	push	r17
    49b4:	cf 93       	push	r28
    49b6:	df 93       	push	r29
    49b8:	7c 01       	movw	r14, r24
    49ba:	dc 01       	movw	r26, r24
    49bc:	12 96       	adiw	r26, 0x02	; 2
    49be:	ed 91       	ld	r30, X+
    49c0:	fc 91       	ld	r31, X
    49c2:	13 97       	sbiw	r26, 0x03	; 3
    49c4:	93 81       	ldd	r25, Z+3	; 0x03
    49c6:	82 81       	ldd	r24, Z+2	; 0x02
    49c8:	98 1b       	sub	r25, r24
    49ca:	85 81       	ldd	r24, Z+5	; 0x05
    49cc:	98 23       	and	r25, r24
    49ce:	84 81       	ldd	r24, Z+4	; 0x04
    49d0:	89 1b       	sub	r24, r25
    49d2:	86 17       	cp	r24, r22
    49d4:	98 f1       	brcs	.+102    	; 0x4a3c <serial_send_bytes+0x90>
    49d6:	66 23       	and	r22, r22
    49d8:	41 f1       	breq	.+80     	; 0x4a2a <serial_send_bytes+0x7e>
    49da:	84 2f       	mov	r24, r20
    49dc:	95 2f       	mov	r25, r21
    49de:	dc 01       	movw	r26, r24
    49e0:	61 50       	subi	r22, 0x01	; 1
    49e2:	46 2f       	mov	r20, r22
    49e4:	50 e0       	ldi	r21, 0x00	; 0
    49e6:	4f 5f       	subi	r20, 0xFF	; 255
    49e8:	5f 4f       	sbci	r21, 0xFF	; 255
    49ea:	48 0f       	add	r20, r24
    49ec:	59 1f       	adc	r21, r25
    49ee:	e7 01       	movw	r28, r14
    49f0:	ea 81       	ldd	r30, Y+2	; 0x02
    49f2:	fb 81       	ldd	r31, Y+3	; 0x03
    49f4:	93 81       	ldd	r25, Z+3	; 0x03
    49f6:	82 81       	ldd	r24, Z+2	; 0x02
    49f8:	25 81       	ldd	r18, Z+5	; 0x05
    49fa:	98 1b       	sub	r25, r24
    49fc:	92 23       	and	r25, r18
    49fe:	84 81       	ldd	r24, Z+4	; 0x04
    4a00:	98 17       	cp	r25, r24
    4a02:	79 f0       	breq	.+30     	; 0x4a22 <serial_send_bytes+0x76>
    4a04:	8c 91       	ld	r24, X
    4a06:	93 81       	ldd	r25, Z+3	; 0x03
    4a08:	26 95       	lsr	r18
    4a0a:	29 23       	and	r18, r25
    4a0c:	60 81       	ld	r22, Z
    4a0e:	71 81       	ldd	r23, Z+1	; 0x01
    4a10:	8b 01       	movw	r16, r22
    4a12:	02 0f       	add	r16, r18
    4a14:	11 1d       	adc	r17, r1
    4a16:	e8 01       	movw	r28, r16
    4a18:	88 83       	st	Y, r24
    4a1a:	9f 5f       	subi	r25, 0xFF	; 255
    4a1c:	85 81       	ldd	r24, Z+5	; 0x05
    4a1e:	98 23       	and	r25, r24
    4a20:	93 83       	std	Z+3, r25	; 0x03
    4a22:	11 96       	adiw	r26, 0x01	; 1
    4a24:	a4 17       	cp	r26, r20
    4a26:	b5 07       	cpc	r27, r21
    4a28:	11 f7       	brne	.-60     	; 0x49ee <serial_send_bytes+0x42>
    4a2a:	d7 01       	movw	r26, r14
    4a2c:	ed 91       	ld	r30, X+
    4a2e:	fc 91       	ld	r31, X
    4a30:	35 97       	sbiw	r30, 0x05	; 5
    4a32:	80 81       	ld	r24, Z
    4a34:	80 62       	ori	r24, 0x20	; 32
    4a36:	80 83       	st	Z, r24
    4a38:	80 e0       	ldi	r24, 0x00	; 0
    4a3a:	01 c0       	rjmp	.+2      	; 0x4a3e <serial_send_bytes+0x92>
    4a3c:	82 e0       	ldi	r24, 0x02	; 2
    4a3e:	df 91       	pop	r29
    4a40:	cf 91       	pop	r28
    4a42:	1f 91       	pop	r17
    4a44:	0f 91       	pop	r16
    4a46:	ff 90       	pop	r15
    4a48:	ef 90       	pop	r14
    4a4a:	08 95       	ret

00004a4c <serial_get_byte>:
    4a4c:	dc 01       	movw	r26, r24
    4a4e:	14 96       	adiw	r26, 0x04	; 4
    4a50:	ed 91       	ld	r30, X+
    4a52:	fc 91       	ld	r31, X
    4a54:	15 97       	sbiw	r26, 0x05	; 5
    4a56:	93 81       	ldd	r25, Z+3	; 0x03
    4a58:	82 81       	ldd	r24, Z+2	; 0x02
    4a5a:	98 17       	cp	r25, r24
    4a5c:	89 f0       	breq	.+34     	; 0x4a80 <serial_get_byte+0x34>
    4a5e:	92 81       	ldd	r25, Z+2	; 0x02
    4a60:	85 81       	ldd	r24, Z+5	; 0x05
    4a62:	86 95       	lsr	r24
    4a64:	89 23       	and	r24, r25
    4a66:	a0 81       	ld	r26, Z
    4a68:	b1 81       	ldd	r27, Z+1	; 0x01
    4a6a:	a8 0f       	add	r26, r24
    4a6c:	b1 1d       	adc	r27, r1
    4a6e:	8c 91       	ld	r24, X
    4a70:	db 01       	movw	r26, r22
    4a72:	8c 93       	st	X, r24
    4a74:	9f 5f       	subi	r25, 0xFF	; 255
    4a76:	85 81       	ldd	r24, Z+5	; 0x05
    4a78:	98 23       	and	r25, r24
    4a7a:	92 83       	std	Z+2, r25	; 0x02
    4a7c:	80 e0       	ldi	r24, 0x00	; 0
    4a7e:	08 95       	ret
    4a80:	83 e0       	ldi	r24, 0x03	; 3
    4a82:	08 95       	ret

00004a84 <__vector_25>:
    4a84:	1f 92       	push	r1
    4a86:	0f 92       	push	r0
    4a88:	0f b6       	in	r0, 0x3f	; 63
    4a8a:	0f 92       	push	r0
    4a8c:	11 24       	eor	r1, r1
    4a8e:	0b b6       	in	r0, 0x3b	; 59
    4a90:	0f 92       	push	r0
    4a92:	2f 93       	push	r18
    4a94:	3f 93       	push	r19
    4a96:	4f 93       	push	r20
    4a98:	5f 93       	push	r21
    4a9a:	6f 93       	push	r22
    4a9c:	7f 93       	push	r23
    4a9e:	8f 93       	push	r24
    4aa0:	9f 93       	push	r25
    4aa2:	af 93       	push	r26
    4aa4:	bf 93       	push	r27
    4aa6:	cf 93       	push	r28
    4aa8:	df 93       	push	r29
    4aaa:	ef 93       	push	r30
    4aac:	ff 93       	push	r31
    4aae:	a0 91 75 19 	lds	r26, 0x1975	; 0x801975 <_ser_handle>
    4ab2:	b0 91 76 19 	lds	r27, 0x1976	; 0x801976 <_ser_handle+0x1>
    4ab6:	10 97       	sbiw	r26, 0x00	; 0
    4ab8:	11 f1       	breq	.+68     	; 0x4afe <__vector_25+0x7a>
    4aba:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4abe:	14 96       	adiw	r26, 0x04	; 4
    4ac0:	ed 91       	ld	r30, X+
    4ac2:	fc 91       	ld	r31, X
    4ac4:	15 97       	sbiw	r26, 0x05	; 5
    4ac6:	93 81       	ldd	r25, Z+3	; 0x03
    4ac8:	82 81       	ldd	r24, Z+2	; 0x02
    4aca:	25 81       	ldd	r18, Z+5	; 0x05
    4acc:	98 1b       	sub	r25, r24
    4ace:	92 23       	and	r25, r18
    4ad0:	84 81       	ldd	r24, Z+4	; 0x04
    4ad2:	98 17       	cp	r25, r24
    4ad4:	61 f0       	breq	.+24     	; 0x4aee <__vector_25+0x6a>
    4ad6:	83 81       	ldd	r24, Z+3	; 0x03
    4ad8:	26 95       	lsr	r18
    4ada:	28 23       	and	r18, r24
    4adc:	c0 81       	ld	r28, Z
    4ade:	d1 81       	ldd	r29, Z+1	; 0x01
    4ae0:	c2 0f       	add	r28, r18
    4ae2:	d1 1d       	adc	r29, r1
    4ae4:	68 83       	st	Y, r22
    4ae6:	8f 5f       	subi	r24, 0xFF	; 255
    4ae8:	95 81       	ldd	r25, Z+5	; 0x05
    4aea:	89 23       	and	r24, r25
    4aec:	83 83       	std	Z+3, r24	; 0x03
    4aee:	16 96       	adiw	r26, 0x06	; 6
    4af0:	ed 91       	ld	r30, X+
    4af2:	fc 91       	ld	r31, X
    4af4:	17 97       	sbiw	r26, 0x07	; 7
    4af6:	30 97       	sbiw	r30, 0x00	; 0
    4af8:	11 f0       	breq	.+4      	; 0x4afe <__vector_25+0x7a>
    4afa:	cd 01       	movw	r24, r26
    4afc:	19 95       	eicall
    4afe:	ff 91       	pop	r31
    4b00:	ef 91       	pop	r30
    4b02:	df 91       	pop	r29
    4b04:	cf 91       	pop	r28
    4b06:	bf 91       	pop	r27
    4b08:	af 91       	pop	r26
    4b0a:	9f 91       	pop	r25
    4b0c:	8f 91       	pop	r24
    4b0e:	7f 91       	pop	r23
    4b10:	6f 91       	pop	r22
    4b12:	5f 91       	pop	r21
    4b14:	4f 91       	pop	r20
    4b16:	3f 91       	pop	r19
    4b18:	2f 91       	pop	r18
    4b1a:	0f 90       	pop	r0
    4b1c:	0b be       	out	0x3b, r0	; 59
    4b1e:	0f 90       	pop	r0
    4b20:	0f be       	out	0x3f, r0	; 63
    4b22:	0f 90       	pop	r0
    4b24:	1f 90       	pop	r1
    4b26:	18 95       	reti

00004b28 <__vector_26>:
    4b28:	1f 92       	push	r1
    4b2a:	0f 92       	push	r0
    4b2c:	0f b6       	in	r0, 0x3f	; 63
    4b2e:	0f 92       	push	r0
    4b30:	11 24       	eor	r1, r1
    4b32:	0b b6       	in	r0, 0x3b	; 59
    4b34:	0f 92       	push	r0
    4b36:	2f 93       	push	r18
    4b38:	8f 93       	push	r24
    4b3a:	9f 93       	push	r25
    4b3c:	af 93       	push	r26
    4b3e:	bf 93       	push	r27
    4b40:	ef 93       	push	r30
    4b42:	ff 93       	push	r31
    4b44:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <_ser_handle>
    4b48:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <_ser_handle+0x1>
    4b4c:	30 97       	sbiw	r30, 0x00	; 0
    4b4e:	b9 f0       	breq	.+46     	; 0x4b7e <__vector_26+0x56>
    4b50:	02 80       	ldd	r0, Z+2	; 0x02
    4b52:	f3 81       	ldd	r31, Z+3	; 0x03
    4b54:	e0 2d       	mov	r30, r0
    4b56:	93 81       	ldd	r25, Z+3	; 0x03
    4b58:	82 81       	ldd	r24, Z+2	; 0x02
    4b5a:	98 17       	cp	r25, r24
    4b5c:	b1 f0       	breq	.+44     	; 0x4b8a <__vector_26+0x62>
    4b5e:	92 81       	ldd	r25, Z+2	; 0x02
    4b60:	85 81       	ldd	r24, Z+5	; 0x05
    4b62:	28 2f       	mov	r18, r24
    4b64:	26 95       	lsr	r18
    4b66:	29 23       	and	r18, r25
    4b68:	a0 81       	ld	r26, Z
    4b6a:	b1 81       	ldd	r27, Z+1	; 0x01
    4b6c:	a2 0f       	add	r26, r18
    4b6e:	b1 1d       	adc	r27, r1
    4b70:	2c 91       	ld	r18, X
    4b72:	9f 5f       	subi	r25, 0xFF	; 255
    4b74:	89 23       	and	r24, r25
    4b76:	82 83       	std	Z+2, r24	; 0x02
    4b78:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4b7c:	0b c0       	rjmp	.+22     	; 0x4b94 <__vector_26+0x6c>
    4b7e:	e1 ec       	ldi	r30, 0xC1	; 193
    4b80:	f0 e0       	ldi	r31, 0x00	; 0
    4b82:	80 81       	ld	r24, Z
    4b84:	8f 7d       	andi	r24, 0xDF	; 223
    4b86:	80 83       	st	Z, r24
    4b88:	05 c0       	rjmp	.+10     	; 0x4b94 <__vector_26+0x6c>
    4b8a:	e1 ec       	ldi	r30, 0xC1	; 193
    4b8c:	f0 e0       	ldi	r31, 0x00	; 0
    4b8e:	80 81       	ld	r24, Z
    4b90:	8f 7d       	andi	r24, 0xDF	; 223
    4b92:	80 83       	st	Z, r24
    4b94:	ff 91       	pop	r31
    4b96:	ef 91       	pop	r30
    4b98:	bf 91       	pop	r27
    4b9a:	af 91       	pop	r26
    4b9c:	9f 91       	pop	r25
    4b9e:	8f 91       	pop	r24
    4ba0:	2f 91       	pop	r18
    4ba2:	0f 90       	pop	r0
    4ba4:	0b be       	out	0x3b, r0	; 59
    4ba6:	0f 90       	pop	r0
    4ba8:	0f be       	out	0x3f, r0	; 63
    4baa:	0f 90       	pop	r0
    4bac:	1f 90       	pop	r1
    4bae:	18 95       	reti

00004bb0 <__vector_36>:
    4bb0:	1f 92       	push	r1
    4bb2:	0f 92       	push	r0
    4bb4:	0f b6       	in	r0, 0x3f	; 63
    4bb6:	0f 92       	push	r0
    4bb8:	11 24       	eor	r1, r1
    4bba:	0b b6       	in	r0, 0x3b	; 59
    4bbc:	0f 92       	push	r0
    4bbe:	2f 93       	push	r18
    4bc0:	3f 93       	push	r19
    4bc2:	4f 93       	push	r20
    4bc4:	5f 93       	push	r21
    4bc6:	6f 93       	push	r22
    4bc8:	7f 93       	push	r23
    4bca:	8f 93       	push	r24
    4bcc:	9f 93       	push	r25
    4bce:	af 93       	push	r26
    4bd0:	bf 93       	push	r27
    4bd2:	cf 93       	push	r28
    4bd4:	df 93       	push	r29
    4bd6:	ef 93       	push	r30
    4bd8:	ff 93       	push	r31
    4bda:	a0 91 77 19 	lds	r26, 0x1977	; 0x801977 <_ser_handle+0x2>
    4bde:	b0 91 78 19 	lds	r27, 0x1978	; 0x801978 <_ser_handle+0x3>
    4be2:	10 97       	sbiw	r26, 0x00	; 0
    4be4:	11 f1       	breq	.+68     	; 0x4c2a <__vector_36+0x7a>
    4be6:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4bea:	14 96       	adiw	r26, 0x04	; 4
    4bec:	ed 91       	ld	r30, X+
    4bee:	fc 91       	ld	r31, X
    4bf0:	15 97       	sbiw	r26, 0x05	; 5
    4bf2:	93 81       	ldd	r25, Z+3	; 0x03
    4bf4:	82 81       	ldd	r24, Z+2	; 0x02
    4bf6:	25 81       	ldd	r18, Z+5	; 0x05
    4bf8:	98 1b       	sub	r25, r24
    4bfa:	92 23       	and	r25, r18
    4bfc:	84 81       	ldd	r24, Z+4	; 0x04
    4bfe:	98 17       	cp	r25, r24
    4c00:	61 f0       	breq	.+24     	; 0x4c1a <__vector_36+0x6a>
    4c02:	83 81       	ldd	r24, Z+3	; 0x03
    4c04:	26 95       	lsr	r18
    4c06:	28 23       	and	r18, r24
    4c08:	c0 81       	ld	r28, Z
    4c0a:	d1 81       	ldd	r29, Z+1	; 0x01
    4c0c:	c2 0f       	add	r28, r18
    4c0e:	d1 1d       	adc	r29, r1
    4c10:	68 83       	st	Y, r22
    4c12:	8f 5f       	subi	r24, 0xFF	; 255
    4c14:	95 81       	ldd	r25, Z+5	; 0x05
    4c16:	89 23       	and	r24, r25
    4c18:	83 83       	std	Z+3, r24	; 0x03
    4c1a:	16 96       	adiw	r26, 0x06	; 6
    4c1c:	ed 91       	ld	r30, X+
    4c1e:	fc 91       	ld	r31, X
    4c20:	17 97       	sbiw	r26, 0x07	; 7
    4c22:	30 97       	sbiw	r30, 0x00	; 0
    4c24:	11 f0       	breq	.+4      	; 0x4c2a <__vector_36+0x7a>
    4c26:	cd 01       	movw	r24, r26
    4c28:	19 95       	eicall
    4c2a:	ff 91       	pop	r31
    4c2c:	ef 91       	pop	r30
    4c2e:	df 91       	pop	r29
    4c30:	cf 91       	pop	r28
    4c32:	bf 91       	pop	r27
    4c34:	af 91       	pop	r26
    4c36:	9f 91       	pop	r25
    4c38:	8f 91       	pop	r24
    4c3a:	7f 91       	pop	r23
    4c3c:	6f 91       	pop	r22
    4c3e:	5f 91       	pop	r21
    4c40:	4f 91       	pop	r20
    4c42:	3f 91       	pop	r19
    4c44:	2f 91       	pop	r18
    4c46:	0f 90       	pop	r0
    4c48:	0b be       	out	0x3b, r0	; 59
    4c4a:	0f 90       	pop	r0
    4c4c:	0f be       	out	0x3f, r0	; 63
    4c4e:	0f 90       	pop	r0
    4c50:	1f 90       	pop	r1
    4c52:	18 95       	reti

00004c54 <__vector_37>:
    4c54:	1f 92       	push	r1
    4c56:	0f 92       	push	r0
    4c58:	0f b6       	in	r0, 0x3f	; 63
    4c5a:	0f 92       	push	r0
    4c5c:	11 24       	eor	r1, r1
    4c5e:	0b b6       	in	r0, 0x3b	; 59
    4c60:	0f 92       	push	r0
    4c62:	2f 93       	push	r18
    4c64:	8f 93       	push	r24
    4c66:	9f 93       	push	r25
    4c68:	af 93       	push	r26
    4c6a:	bf 93       	push	r27
    4c6c:	ef 93       	push	r30
    4c6e:	ff 93       	push	r31
    4c70:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <_ser_handle+0x2>
    4c74:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <_ser_handle+0x3>
    4c78:	30 97       	sbiw	r30, 0x00	; 0
    4c7a:	b9 f0       	breq	.+46     	; 0x4caa <__vector_37+0x56>
    4c7c:	02 80       	ldd	r0, Z+2	; 0x02
    4c7e:	f3 81       	ldd	r31, Z+3	; 0x03
    4c80:	e0 2d       	mov	r30, r0
    4c82:	93 81       	ldd	r25, Z+3	; 0x03
    4c84:	82 81       	ldd	r24, Z+2	; 0x02
    4c86:	98 17       	cp	r25, r24
    4c88:	b1 f0       	breq	.+44     	; 0x4cb6 <__vector_37+0x62>
    4c8a:	92 81       	ldd	r25, Z+2	; 0x02
    4c8c:	85 81       	ldd	r24, Z+5	; 0x05
    4c8e:	28 2f       	mov	r18, r24
    4c90:	26 95       	lsr	r18
    4c92:	29 23       	and	r18, r25
    4c94:	a0 81       	ld	r26, Z
    4c96:	b1 81       	ldd	r27, Z+1	; 0x01
    4c98:	a2 0f       	add	r26, r18
    4c9a:	b1 1d       	adc	r27, r1
    4c9c:	2c 91       	ld	r18, X
    4c9e:	9f 5f       	subi	r25, 0xFF	; 255
    4ca0:	89 23       	and	r24, r25
    4ca2:	82 83       	std	Z+2, r24	; 0x02
    4ca4:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4ca8:	0b c0       	rjmp	.+22     	; 0x4cc0 <__vector_37+0x6c>
    4caa:	e9 ec       	ldi	r30, 0xC9	; 201
    4cac:	f0 e0       	ldi	r31, 0x00	; 0
    4cae:	80 81       	ld	r24, Z
    4cb0:	8f 7d       	andi	r24, 0xDF	; 223
    4cb2:	80 83       	st	Z, r24
    4cb4:	05 c0       	rjmp	.+10     	; 0x4cc0 <__vector_37+0x6c>
    4cb6:	e9 ec       	ldi	r30, 0xC9	; 201
    4cb8:	f0 e0       	ldi	r31, 0x00	; 0
    4cba:	80 81       	ld	r24, Z
    4cbc:	8f 7d       	andi	r24, 0xDF	; 223
    4cbe:	80 83       	st	Z, r24
    4cc0:	ff 91       	pop	r31
    4cc2:	ef 91       	pop	r30
    4cc4:	bf 91       	pop	r27
    4cc6:	af 91       	pop	r26
    4cc8:	9f 91       	pop	r25
    4cca:	8f 91       	pop	r24
    4ccc:	2f 91       	pop	r18
    4cce:	0f 90       	pop	r0
    4cd0:	0b be       	out	0x3b, r0	; 59
    4cd2:	0f 90       	pop	r0
    4cd4:	0f be       	out	0x3f, r0	; 63
    4cd6:	0f 90       	pop	r0
    4cd8:	1f 90       	pop	r1
    4cda:	18 95       	reti

00004cdc <__vector_51>:
    4cdc:	1f 92       	push	r1
    4cde:	0f 92       	push	r0
    4ce0:	0f b6       	in	r0, 0x3f	; 63
    4ce2:	0f 92       	push	r0
    4ce4:	11 24       	eor	r1, r1
    4ce6:	0b b6       	in	r0, 0x3b	; 59
    4ce8:	0f 92       	push	r0
    4cea:	2f 93       	push	r18
    4cec:	3f 93       	push	r19
    4cee:	4f 93       	push	r20
    4cf0:	5f 93       	push	r21
    4cf2:	6f 93       	push	r22
    4cf4:	7f 93       	push	r23
    4cf6:	8f 93       	push	r24
    4cf8:	9f 93       	push	r25
    4cfa:	af 93       	push	r26
    4cfc:	bf 93       	push	r27
    4cfe:	cf 93       	push	r28
    4d00:	df 93       	push	r29
    4d02:	ef 93       	push	r30
    4d04:	ff 93       	push	r31
    4d06:	a0 91 79 19 	lds	r26, 0x1979	; 0x801979 <_ser_handle+0x4>
    4d0a:	b0 91 7a 19 	lds	r27, 0x197A	; 0x80197a <_ser_handle+0x5>
    4d0e:	10 97       	sbiw	r26, 0x00	; 0
    4d10:	11 f1       	breq	.+68     	; 0x4d56 <__vector_51+0x7a>
    4d12:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4d16:	14 96       	adiw	r26, 0x04	; 4
    4d18:	ed 91       	ld	r30, X+
    4d1a:	fc 91       	ld	r31, X
    4d1c:	15 97       	sbiw	r26, 0x05	; 5
    4d1e:	93 81       	ldd	r25, Z+3	; 0x03
    4d20:	82 81       	ldd	r24, Z+2	; 0x02
    4d22:	25 81       	ldd	r18, Z+5	; 0x05
    4d24:	98 1b       	sub	r25, r24
    4d26:	92 23       	and	r25, r18
    4d28:	84 81       	ldd	r24, Z+4	; 0x04
    4d2a:	98 17       	cp	r25, r24
    4d2c:	61 f0       	breq	.+24     	; 0x4d46 <__vector_51+0x6a>
    4d2e:	83 81       	ldd	r24, Z+3	; 0x03
    4d30:	26 95       	lsr	r18
    4d32:	28 23       	and	r18, r24
    4d34:	c0 81       	ld	r28, Z
    4d36:	d1 81       	ldd	r29, Z+1	; 0x01
    4d38:	c2 0f       	add	r28, r18
    4d3a:	d1 1d       	adc	r29, r1
    4d3c:	68 83       	st	Y, r22
    4d3e:	8f 5f       	subi	r24, 0xFF	; 255
    4d40:	95 81       	ldd	r25, Z+5	; 0x05
    4d42:	89 23       	and	r24, r25
    4d44:	83 83       	std	Z+3, r24	; 0x03
    4d46:	16 96       	adiw	r26, 0x06	; 6
    4d48:	ed 91       	ld	r30, X+
    4d4a:	fc 91       	ld	r31, X
    4d4c:	17 97       	sbiw	r26, 0x07	; 7
    4d4e:	30 97       	sbiw	r30, 0x00	; 0
    4d50:	11 f0       	breq	.+4      	; 0x4d56 <__vector_51+0x7a>
    4d52:	cd 01       	movw	r24, r26
    4d54:	19 95       	eicall
    4d56:	ff 91       	pop	r31
    4d58:	ef 91       	pop	r30
    4d5a:	df 91       	pop	r29
    4d5c:	cf 91       	pop	r28
    4d5e:	bf 91       	pop	r27
    4d60:	af 91       	pop	r26
    4d62:	9f 91       	pop	r25
    4d64:	8f 91       	pop	r24
    4d66:	7f 91       	pop	r23
    4d68:	6f 91       	pop	r22
    4d6a:	5f 91       	pop	r21
    4d6c:	4f 91       	pop	r20
    4d6e:	3f 91       	pop	r19
    4d70:	2f 91       	pop	r18
    4d72:	0f 90       	pop	r0
    4d74:	0b be       	out	0x3b, r0	; 59
    4d76:	0f 90       	pop	r0
    4d78:	0f be       	out	0x3f, r0	; 63
    4d7a:	0f 90       	pop	r0
    4d7c:	1f 90       	pop	r1
    4d7e:	18 95       	reti

00004d80 <__vector_52>:
    4d80:	1f 92       	push	r1
    4d82:	0f 92       	push	r0
    4d84:	0f b6       	in	r0, 0x3f	; 63
    4d86:	0f 92       	push	r0
    4d88:	11 24       	eor	r1, r1
    4d8a:	0b b6       	in	r0, 0x3b	; 59
    4d8c:	0f 92       	push	r0
    4d8e:	2f 93       	push	r18
    4d90:	8f 93       	push	r24
    4d92:	9f 93       	push	r25
    4d94:	af 93       	push	r26
    4d96:	bf 93       	push	r27
    4d98:	ef 93       	push	r30
    4d9a:	ff 93       	push	r31
    4d9c:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <_ser_handle+0x4>
    4da0:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <_ser_handle+0x5>
    4da4:	30 97       	sbiw	r30, 0x00	; 0
    4da6:	b9 f0       	breq	.+46     	; 0x4dd6 <__vector_52+0x56>
    4da8:	02 80       	ldd	r0, Z+2	; 0x02
    4daa:	f3 81       	ldd	r31, Z+3	; 0x03
    4dac:	e0 2d       	mov	r30, r0
    4dae:	93 81       	ldd	r25, Z+3	; 0x03
    4db0:	82 81       	ldd	r24, Z+2	; 0x02
    4db2:	98 17       	cp	r25, r24
    4db4:	b1 f0       	breq	.+44     	; 0x4de2 <__vector_52+0x62>
    4db6:	92 81       	ldd	r25, Z+2	; 0x02
    4db8:	85 81       	ldd	r24, Z+5	; 0x05
    4dba:	28 2f       	mov	r18, r24
    4dbc:	26 95       	lsr	r18
    4dbe:	29 23       	and	r18, r25
    4dc0:	a0 81       	ld	r26, Z
    4dc2:	b1 81       	ldd	r27, Z+1	; 0x01
    4dc4:	a2 0f       	add	r26, r18
    4dc6:	b1 1d       	adc	r27, r1
    4dc8:	2c 91       	ld	r18, X
    4dca:	9f 5f       	subi	r25, 0xFF	; 255
    4dcc:	89 23       	and	r24, r25
    4dce:	82 83       	std	Z+2, r24	; 0x02
    4dd0:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4dd4:	0b c0       	rjmp	.+22     	; 0x4dec <__vector_52+0x6c>
    4dd6:	e1 ed       	ldi	r30, 0xD1	; 209
    4dd8:	f0 e0       	ldi	r31, 0x00	; 0
    4dda:	80 81       	ld	r24, Z
    4ddc:	8f 7d       	andi	r24, 0xDF	; 223
    4dde:	80 83       	st	Z, r24
    4de0:	05 c0       	rjmp	.+10     	; 0x4dec <__vector_52+0x6c>
    4de2:	e1 ed       	ldi	r30, 0xD1	; 209
    4de4:	f0 e0       	ldi	r31, 0x00	; 0
    4de6:	80 81       	ld	r24, Z
    4de8:	8f 7d       	andi	r24, 0xDF	; 223
    4dea:	80 83       	st	Z, r24
    4dec:	ff 91       	pop	r31
    4dee:	ef 91       	pop	r30
    4df0:	bf 91       	pop	r27
    4df2:	af 91       	pop	r26
    4df4:	9f 91       	pop	r25
    4df6:	8f 91       	pop	r24
    4df8:	2f 91       	pop	r18
    4dfa:	0f 90       	pop	r0
    4dfc:	0b be       	out	0x3b, r0	; 59
    4dfe:	0f 90       	pop	r0
    4e00:	0f be       	out	0x3f, r0	; 63
    4e02:	0f 90       	pop	r0
    4e04:	1f 90       	pop	r1
    4e06:	18 95       	reti

00004e08 <__vector_54>:
    4e08:	1f 92       	push	r1
    4e0a:	0f 92       	push	r0
    4e0c:	0f b6       	in	r0, 0x3f	; 63
    4e0e:	0f 92       	push	r0
    4e10:	11 24       	eor	r1, r1
    4e12:	0b b6       	in	r0, 0x3b	; 59
    4e14:	0f 92       	push	r0
    4e16:	2f 93       	push	r18
    4e18:	3f 93       	push	r19
    4e1a:	4f 93       	push	r20
    4e1c:	5f 93       	push	r21
    4e1e:	6f 93       	push	r22
    4e20:	7f 93       	push	r23
    4e22:	8f 93       	push	r24
    4e24:	9f 93       	push	r25
    4e26:	af 93       	push	r26
    4e28:	bf 93       	push	r27
    4e2a:	cf 93       	push	r28
    4e2c:	df 93       	push	r29
    4e2e:	ef 93       	push	r30
    4e30:	ff 93       	push	r31
    4e32:	a0 91 7b 19 	lds	r26, 0x197B	; 0x80197b <_ser_handle+0x6>
    4e36:	b0 91 7c 19 	lds	r27, 0x197C	; 0x80197c <_ser_handle+0x7>
    4e3a:	10 97       	sbiw	r26, 0x00	; 0
    4e3c:	11 f1       	breq	.+68     	; 0x4e82 <__vector_54+0x7a>
    4e3e:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4e42:	14 96       	adiw	r26, 0x04	; 4
    4e44:	ed 91       	ld	r30, X+
    4e46:	fc 91       	ld	r31, X
    4e48:	15 97       	sbiw	r26, 0x05	; 5
    4e4a:	93 81       	ldd	r25, Z+3	; 0x03
    4e4c:	82 81       	ldd	r24, Z+2	; 0x02
    4e4e:	25 81       	ldd	r18, Z+5	; 0x05
    4e50:	98 1b       	sub	r25, r24
    4e52:	92 23       	and	r25, r18
    4e54:	84 81       	ldd	r24, Z+4	; 0x04
    4e56:	98 17       	cp	r25, r24
    4e58:	61 f0       	breq	.+24     	; 0x4e72 <__vector_54+0x6a>
    4e5a:	83 81       	ldd	r24, Z+3	; 0x03
    4e5c:	26 95       	lsr	r18
    4e5e:	28 23       	and	r18, r24
    4e60:	c0 81       	ld	r28, Z
    4e62:	d1 81       	ldd	r29, Z+1	; 0x01
    4e64:	c2 0f       	add	r28, r18
    4e66:	d1 1d       	adc	r29, r1
    4e68:	68 83       	st	Y, r22
    4e6a:	8f 5f       	subi	r24, 0xFF	; 255
    4e6c:	95 81       	ldd	r25, Z+5	; 0x05
    4e6e:	89 23       	and	r24, r25
    4e70:	83 83       	std	Z+3, r24	; 0x03
    4e72:	16 96       	adiw	r26, 0x06	; 6
    4e74:	ed 91       	ld	r30, X+
    4e76:	fc 91       	ld	r31, X
    4e78:	17 97       	sbiw	r26, 0x07	; 7
    4e7a:	30 97       	sbiw	r30, 0x00	; 0
    4e7c:	11 f0       	breq	.+4      	; 0x4e82 <__vector_54+0x7a>
    4e7e:	cd 01       	movw	r24, r26
    4e80:	19 95       	eicall
    4e82:	ff 91       	pop	r31
    4e84:	ef 91       	pop	r30
    4e86:	df 91       	pop	r29
    4e88:	cf 91       	pop	r28
    4e8a:	bf 91       	pop	r27
    4e8c:	af 91       	pop	r26
    4e8e:	9f 91       	pop	r25
    4e90:	8f 91       	pop	r24
    4e92:	7f 91       	pop	r23
    4e94:	6f 91       	pop	r22
    4e96:	5f 91       	pop	r21
    4e98:	4f 91       	pop	r20
    4e9a:	3f 91       	pop	r19
    4e9c:	2f 91       	pop	r18
    4e9e:	0f 90       	pop	r0
    4ea0:	0b be       	out	0x3b, r0	; 59
    4ea2:	0f 90       	pop	r0
    4ea4:	0f be       	out	0x3f, r0	; 63
    4ea6:	0f 90       	pop	r0
    4ea8:	1f 90       	pop	r1
    4eaa:	18 95       	reti

00004eac <__vector_55>:
    4eac:	1f 92       	push	r1
    4eae:	0f 92       	push	r0
    4eb0:	0f b6       	in	r0, 0x3f	; 63
    4eb2:	0f 92       	push	r0
    4eb4:	11 24       	eor	r1, r1
    4eb6:	0b b6       	in	r0, 0x3b	; 59
    4eb8:	0f 92       	push	r0
    4eba:	2f 93       	push	r18
    4ebc:	8f 93       	push	r24
    4ebe:	9f 93       	push	r25
    4ec0:	af 93       	push	r26
    4ec2:	bf 93       	push	r27
    4ec4:	ef 93       	push	r30
    4ec6:	ff 93       	push	r31
    4ec8:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <_ser_handle+0x6>
    4ecc:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <_ser_handle+0x7>
    4ed0:	30 97       	sbiw	r30, 0x00	; 0
    4ed2:	b9 f0       	breq	.+46     	; 0x4f02 <__vector_55+0x56>
    4ed4:	02 80       	ldd	r0, Z+2	; 0x02
    4ed6:	f3 81       	ldd	r31, Z+3	; 0x03
    4ed8:	e0 2d       	mov	r30, r0
    4eda:	93 81       	ldd	r25, Z+3	; 0x03
    4edc:	82 81       	ldd	r24, Z+2	; 0x02
    4ede:	98 17       	cp	r25, r24
    4ee0:	b1 f0       	breq	.+44     	; 0x4f0e <__vector_55+0x62>
    4ee2:	92 81       	ldd	r25, Z+2	; 0x02
    4ee4:	85 81       	ldd	r24, Z+5	; 0x05
    4ee6:	28 2f       	mov	r18, r24
    4ee8:	26 95       	lsr	r18
    4eea:	29 23       	and	r18, r25
    4eec:	a0 81       	ld	r26, Z
    4eee:	b1 81       	ldd	r27, Z+1	; 0x01
    4ef0:	a2 0f       	add	r26, r18
    4ef2:	b1 1d       	adc	r27, r1
    4ef4:	2c 91       	ld	r18, X
    4ef6:	9f 5f       	subi	r25, 0xFF	; 255
    4ef8:	89 23       	and	r24, r25
    4efa:	82 83       	std	Z+2, r24	; 0x02
    4efc:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4f00:	0b c0       	rjmp	.+22     	; 0x4f18 <__vector_55+0x6c>
    4f02:	e1 e3       	ldi	r30, 0x31	; 49
    4f04:	f1 e0       	ldi	r31, 0x01	; 1
    4f06:	80 81       	ld	r24, Z
    4f08:	8f 7d       	andi	r24, 0xDF	; 223
    4f0a:	80 83       	st	Z, r24
    4f0c:	05 c0       	rjmp	.+10     	; 0x4f18 <__vector_55+0x6c>
    4f0e:	e1 e3       	ldi	r30, 0x31	; 49
    4f10:	f1 e0       	ldi	r31, 0x01	; 1
    4f12:	80 81       	ld	r24, Z
    4f14:	8f 7d       	andi	r24, 0xDF	; 223
    4f16:	80 83       	st	Z, r24
    4f18:	ff 91       	pop	r31
    4f1a:	ef 91       	pop	r30
    4f1c:	bf 91       	pop	r27
    4f1e:	af 91       	pop	r26
    4f20:	9f 91       	pop	r25
    4f22:	8f 91       	pop	r24
    4f24:	2f 91       	pop	r18
    4f26:	0f 90       	pop	r0
    4f28:	0b be       	out	0x3b, r0	; 59
    4f2a:	0f 90       	pop	r0
    4f2c:	0f be       	out	0x3f, r0	; 63
    4f2e:	0f 90       	pop	r0
    4f30:	1f 90       	pop	r1
    4f32:	18 95       	reti

00004f34 <usart_getchar>:
    4f34:	cf 93       	push	r28
    4f36:	df 93       	push	r29
    4f38:	1f 92       	push	r1
    4f3a:	cd b7       	in	r28, 0x3d	; 61
    4f3c:	de b7       	in	r29, 0x3e	; 62
    4f3e:	be 01       	movw	r22, r28
    4f40:	6f 5f       	subi	r22, 0xFF	; 255
    4f42:	7f 4f       	sbci	r23, 0xFF	; 255
    4f44:	80 91 7d 19 	lds	r24, 0x197D	; 0x80197d <_com_serial_instance>
    4f48:	90 91 7e 19 	lds	r25, 0x197E	; 0x80197e <_com_serial_instance+0x1>
    4f4c:	7f dd       	rcall	.-1282   	; 0x4a4c <serial_get_byte>
    4f4e:	81 11       	cpse	r24, r1
    4f50:	f6 cf       	rjmp	.-20     	; 0x4f3e <usart_getchar+0xa>
    4f52:	89 81       	ldd	r24, Y+1	; 0x01
    4f54:	90 e0       	ldi	r25, 0x00	; 0
    4f56:	0f 90       	pop	r0
    4f58:	df 91       	pop	r29
    4f5a:	cf 91       	pop	r28
    4f5c:	08 95       	ret

00004f5e <usart_putchar>:
    4f5e:	68 2f       	mov	r22, r24
    4f60:	80 91 7d 19 	lds	r24, 0x197D	; 0x80197d <_com_serial_instance>
    4f64:	90 91 7e 19 	lds	r25, 0x197E	; 0x80197e <_com_serial_instance+0x1>
    4f68:	fc dc       	rcall	.-1544   	; 0x4962 <serial_send_byte>
    4f6a:	80 e0       	ldi	r24, 0x00	; 0
    4f6c:	90 e0       	ldi	r25, 0x00	; 0
    4f6e:	08 95       	ret

00004f70 <stdioCreate>:
    4f70:	8f 92       	push	r8
    4f72:	9f 92       	push	r9
    4f74:	af 92       	push	r10
    4f76:	cf 92       	push	r12
    4f78:	ef 92       	push	r14
    4f7a:	0f 93       	push	r16
    4f7c:	81 2c       	mov	r8, r1
    4f7e:	91 2c       	mov	r9, r1
    4f80:	68 94       	set
    4f82:	aa 24       	eor	r10, r10
    4f84:	a7 f8       	bld	r10, 7
    4f86:	68 94       	set
    4f88:	cc 24       	eor	r12, r12
    4f8a:	c7 f8       	bld	r12, 7
    4f8c:	e1 2c       	mov	r14, r1
    4f8e:	00 e0       	ldi	r16, 0x00	; 0
    4f90:	23 e0       	ldi	r18, 0x03	; 3
    4f92:	40 e0       	ldi	r20, 0x00	; 0
    4f94:	51 ee       	ldi	r21, 0xE1	; 225
    4f96:	60 e0       	ldi	r22, 0x00	; 0
    4f98:	70 e0       	ldi	r23, 0x00	; 0
    4f9a:	4c dc       	rcall	.-1896   	; 0x4834 <serial_new_instance>
    4f9c:	90 93 7e 19 	sts	0x197E, r25	; 0x80197e <_com_serial_instance+0x1>
    4fa0:	80 93 7d 19 	sts	0x197D, r24	; 0x80197d <_com_serial_instance>
    4fa4:	ef ee       	ldi	r30, 0xEF	; 239
    4fa6:	f9 e1       	ldi	r31, 0x19	; 25
    4fa8:	83 e1       	ldi	r24, 0x13	; 19
    4faa:	92 e0       	ldi	r25, 0x02	; 2
    4fac:	91 83       	std	Z+1, r25	; 0x01
    4fae:	80 83       	st	Z, r24
    4fb0:	93 83       	std	Z+3, r25	; 0x03
    4fb2:	82 83       	std	Z+2, r24	; 0x02
    4fb4:	0f 91       	pop	r16
    4fb6:	ef 90       	pop	r14
    4fb8:	cf 90       	pop	r12
    4fba:	af 90       	pop	r10
    4fbc:	9f 90       	pop	r9
    4fbe:	8f 90       	pop	r8
    4fc0:	08 95       	ret

00004fc2 <_initTwiInterface>:
    4fc2:	80 91 8d 19 	lds	r24, 0x198D	; 0x80198d <_twiIsInitiated>
    4fc6:	81 11       	cpse	r24, r1
    4fc8:	0c c0       	rjmp	.+24     	; 0x4fe2 <_initTwiInterface+0x20>
    4fca:	8c e0       	ldi	r24, 0x0C	; 12
    4fcc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4fd0:	8f ef       	ldi	r24, 0xFF	; 255
    4fd2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4fd6:	84 e0       	ldi	r24, 0x04	; 4
    4fd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4fdc:	81 e0       	ldi	r24, 0x01	; 1
    4fde:	80 93 8d 19 	sts	0x198D, r24	; 0x80198d <_twiIsInitiated>
    4fe2:	08 95       	ret

00004fe4 <twiCreate>:
    4fe4:	af 92       	push	r10
    4fe6:	bf 92       	push	r11
    4fe8:	cf 92       	push	r12
    4fea:	df 92       	push	r13
    4fec:	ef 92       	push	r14
    4fee:	ff 92       	push	r15
    4ff0:	0f 93       	push	r16
    4ff2:	1f 93       	push	r17
    4ff4:	cf 93       	push	r28
    4ff6:	df 93       	push	r29
    4ff8:	a8 2e       	mov	r10, r24
    4ffa:	b6 2e       	mov	r11, r22
    4ffc:	69 01       	movw	r12, r18
    4ffe:	7a 01       	movw	r14, r20
    5000:	84 e0       	ldi	r24, 0x04	; 4
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	79 d3       	rcall	.+1778   	; 0x56f8 <malloc>
    5006:	ec 01       	movw	r28, r24
    5008:	89 2b       	or	r24, r25
    500a:	61 f1       	breq	.+88     	; 0x5064 <twiCreate+0x80>
    500c:	a8 82       	st	Y, r10
    500e:	81 e0       	ldi	r24, 0x01	; 1
    5010:	b8 12       	cpse	r11, r24
    5012:	12 c0       	rjmp	.+36     	; 0x5038 <twiCreate+0x54>
    5014:	c7 01       	movw	r24, r14
    5016:	b6 01       	movw	r22, r12
    5018:	20 ea       	ldi	r18, 0xA0	; 160
    501a:	36 e8       	ldi	r19, 0x86	; 134
    501c:	41 e0       	ldi	r20, 0x01	; 1
    501e:	50 e0       	ldi	r21, 0x00	; 0
    5020:	27 d3       	rcall	.+1614   	; 0x5670 <__udivmodsi4>
    5022:	da 01       	movw	r26, r20
    5024:	c9 01       	movw	r24, r18
    5026:	40 97       	sbiw	r24, 0x10	; 16
    5028:	a1 09       	sbc	r26, r1
    502a:	b1 09       	sbc	r27, r1
    502c:	b6 95       	lsr	r27
    502e:	a7 95       	ror	r26
    5030:	97 95       	ror	r25
    5032:	87 95       	ror	r24
    5034:	89 83       	std	Y+1, r24	; 0x01
    5036:	11 c0       	rjmp	.+34     	; 0x505a <twiCreate+0x76>
    5038:	c7 01       	movw	r24, r14
    503a:	b6 01       	movw	r22, r12
    503c:	20 e8       	ldi	r18, 0x80	; 128
    503e:	3a e1       	ldi	r19, 0x1A	; 26
    5040:	46 e0       	ldi	r20, 0x06	; 6
    5042:	50 e0       	ldi	r21, 0x00	; 0
    5044:	15 d3       	rcall	.+1578   	; 0x5670 <__udivmodsi4>
    5046:	da 01       	movw	r26, r20
    5048:	c9 01       	movw	r24, r18
    504a:	40 97       	sbiw	r24, 0x10	; 16
    504c:	a1 09       	sbc	r26, r1
    504e:	b1 09       	sbc	r27, r1
    5050:	b6 95       	lsr	r27
    5052:	a7 95       	ror	r26
    5054:	97 95       	ror	r25
    5056:	87 95       	ror	r24
    5058:	89 83       	std	Y+1, r24	; 0x01
    505a:	1b 83       	std	Y+3, r17	; 0x03
    505c:	0a 83       	std	Y+2, r16	; 0x02
    505e:	8c 2f       	mov	r24, r28
    5060:	9d 2f       	mov	r25, r29
    5062:	02 c0       	rjmp	.+4      	; 0x5068 <twiCreate+0x84>
    5064:	80 e0       	ldi	r24, 0x00	; 0
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	df 91       	pop	r29
    506a:	cf 91       	pop	r28
    506c:	1f 91       	pop	r17
    506e:	0f 91       	pop	r16
    5070:	ff 90       	pop	r15
    5072:	ef 90       	pop	r14
    5074:	df 90       	pop	r13
    5076:	cf 90       	pop	r12
    5078:	bf 90       	pop	r11
    507a:	af 90       	pop	r10
    507c:	08 95       	ret

0000507e <twiIsBusy>:
    507e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5082:	81 70       	andi	r24, 0x01	; 1
    5084:	08 95       	ret

00005086 <twiTransmit>:
    5086:	ff 92       	push	r15
    5088:	0f 93       	push	r16
    508a:	1f 93       	push	r17
    508c:	cf 93       	push	r28
    508e:	df 93       	push	r29
    5090:	00 97       	sbiw	r24, 0x00	; 0
    5092:	d1 f1       	breq	.+116    	; 0x5108 <twiTransmit+0x82>
    5094:	4a 30       	cpi	r20, 0x0A	; 10
    5096:	d0 f5       	brcc	.+116    	; 0x510c <twiTransmit+0x86>
    5098:	f4 2e       	mov	r15, r20
    509a:	8b 01       	movw	r16, r22
    509c:	ec 01       	movw	r28, r24
    509e:	ef df       	rcall	.-34     	; 0x507e <twiIsBusy>
    50a0:	81 11       	cpse	r24, r1
    50a2:	36 c0       	rjmp	.+108    	; 0x5110 <twiTransmit+0x8a>
    50a4:	80 91 80 19 	lds	r24, 0x1980	; 0x801980 <_twiCurrentHandler>
    50a8:	90 91 81 19 	lds	r25, 0x1981	; 0x801981 <_twiCurrentHandler+0x1>
    50ac:	c8 17       	cp	r28, r24
    50ae:	d9 07       	cpc	r29, r25
    50b0:	41 f0       	breq	.+16     	; 0x50c2 <twiTransmit+0x3c>
    50b2:	87 df       	rcall	.-242    	; 0x4fc2 <_initTwiInterface>
    50b4:	89 81       	ldd	r24, Y+1	; 0x01
    50b6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    50ba:	d0 93 81 19 	sts	0x1981, r29	; 0x801981 <_twiCurrentHandler+0x1>
    50be:	c0 93 80 19 	sts	0x1980, r28	; 0x801980 <_twiCurrentHandler>
    50c2:	81 e0       	ldi	r24, 0x01	; 1
    50c4:	8f 0d       	add	r24, r15
    50c6:	80 93 82 19 	sts	0x1982, r24	; 0x801982 <_twiMessageLen>
    50ca:	88 81       	ld	r24, Y
    50cc:	88 0f       	add	r24, r24
    50ce:	80 93 83 19 	sts	0x1983, r24	; 0x801983 <_twiMessageBuffer>
    50d2:	ff 20       	and	r15, r15
    50d4:	89 f0       	breq	.+34     	; 0x50f8 <twiTransmit+0x72>
    50d6:	f8 01       	movw	r30, r16
    50d8:	a4 e8       	ldi	r26, 0x84	; 132
    50da:	b9 e1       	ldi	r27, 0x19	; 25
    50dc:	4f ef       	ldi	r20, 0xFF	; 255
    50de:	4f 0d       	add	r20, r15
    50e0:	64 2f       	mov	r22, r20
    50e2:	70 e0       	ldi	r23, 0x00	; 0
    50e4:	cb 01       	movw	r24, r22
    50e6:	01 96       	adiw	r24, 0x01	; 1
    50e8:	b8 01       	movw	r22, r16
    50ea:	68 0f       	add	r22, r24
    50ec:	79 1f       	adc	r23, r25
    50ee:	81 91       	ld	r24, Z+
    50f0:	8d 93       	st	X+, r24
    50f2:	e6 17       	cp	r30, r22
    50f4:	f7 07       	cpc	r31, r23
    50f6:	d9 f7       	brne	.-10     	; 0x50ee <twiTransmit+0x68>
    50f8:	88 ef       	ldi	r24, 0xF8	; 248
    50fa:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    50fe:	85 ea       	ldi	r24, 0xA5	; 165
    5100:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5104:	84 e0       	ldi	r24, 0x04	; 4
    5106:	05 c0       	rjmp	.+10     	; 0x5112 <twiTransmit+0x8c>
    5108:	86 e0       	ldi	r24, 0x06	; 6
    510a:	03 c0       	rjmp	.+6      	; 0x5112 <twiTransmit+0x8c>
    510c:	87 e0       	ldi	r24, 0x07	; 7
    510e:	01 c0       	rjmp	.+2      	; 0x5112 <twiTransmit+0x8c>
    5110:	82 e0       	ldi	r24, 0x02	; 2
    5112:	df 91       	pop	r29
    5114:	cf 91       	pop	r28
    5116:	1f 91       	pop	r17
    5118:	0f 91       	pop	r16
    511a:	ff 90       	pop	r15
    511c:	08 95       	ret

0000511e <twiReceive>:
    511e:	1f 93       	push	r17
    5120:	cf 93       	push	r28
    5122:	df 93       	push	r29
    5124:	00 97       	sbiw	r24, 0x00	; 0
    5126:	29 f1       	breq	.+74     	; 0x5172 <twiReceive+0x54>
    5128:	6b 30       	cpi	r22, 0x0B	; 11
    512a:	28 f5       	brcc	.+74     	; 0x5176 <twiReceive+0x58>
    512c:	16 2f       	mov	r17, r22
    512e:	ec 01       	movw	r28, r24
    5130:	a6 df       	rcall	.-180    	; 0x507e <twiIsBusy>
    5132:	81 11       	cpse	r24, r1
    5134:	22 c0       	rjmp	.+68     	; 0x517a <twiReceive+0x5c>
    5136:	80 91 80 19 	lds	r24, 0x1980	; 0x801980 <_twiCurrentHandler>
    513a:	90 91 81 19 	lds	r25, 0x1981	; 0x801981 <_twiCurrentHandler+0x1>
    513e:	c8 17       	cp	r28, r24
    5140:	d9 07       	cpc	r29, r25
    5142:	41 f0       	breq	.+16     	; 0x5154 <twiReceive+0x36>
    5144:	3e df       	rcall	.-388    	; 0x4fc2 <_initTwiInterface>
    5146:	89 81       	ldd	r24, Y+1	; 0x01
    5148:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    514c:	d0 93 81 19 	sts	0x1981, r29	; 0x801981 <_twiCurrentHandler+0x1>
    5150:	c0 93 80 19 	sts	0x1980, r28	; 0x801980 <_twiCurrentHandler>
    5154:	10 93 82 19 	sts	0x1982, r17	; 0x801982 <_twiMessageLen>
    5158:	88 81       	ld	r24, Y
    515a:	88 0f       	add	r24, r24
    515c:	81 60       	ori	r24, 0x01	; 1
    515e:	80 93 83 19 	sts	0x1983, r24	; 0x801983 <_twiMessageBuffer>
    5162:	88 ef       	ldi	r24, 0xF8	; 248
    5164:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5168:	85 ea       	ldi	r24, 0xA5	; 165
    516a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    516e:	85 e0       	ldi	r24, 0x05	; 5
    5170:	05 c0       	rjmp	.+10     	; 0x517c <twiReceive+0x5e>
    5172:	86 e0       	ldi	r24, 0x06	; 6
    5174:	03 c0       	rjmp	.+6      	; 0x517c <twiReceive+0x5e>
    5176:	87 e0       	ldi	r24, 0x07	; 7
    5178:	01 c0       	rjmp	.+2      	; 0x517c <twiReceive+0x5e>
    517a:	82 e0       	ldi	r24, 0x02	; 2
    517c:	df 91       	pop	r29
    517e:	cf 91       	pop	r28
    5180:	1f 91       	pop	r17
    5182:	08 95       	ret

00005184 <__vector_39>:
    5184:	1f 92       	push	r1
    5186:	0f 92       	push	r0
    5188:	0f b6       	in	r0, 0x3f	; 63
    518a:	0f 92       	push	r0
    518c:	11 24       	eor	r1, r1
    518e:	0b b6       	in	r0, 0x3b	; 59
    5190:	0f 92       	push	r0
    5192:	2f 93       	push	r18
    5194:	3f 93       	push	r19
    5196:	4f 93       	push	r20
    5198:	5f 93       	push	r21
    519a:	6f 93       	push	r22
    519c:	7f 93       	push	r23
    519e:	8f 93       	push	r24
    51a0:	9f 93       	push	r25
    51a2:	af 93       	push	r26
    51a4:	bf 93       	push	r27
    51a6:	ef 93       	push	r30
    51a8:	ff 93       	push	r31
    51aa:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    51ae:	8e 2f       	mov	r24, r30
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	fc 01       	movw	r30, r24
    51b4:	38 97       	sbiw	r30, 0x08	; 8
    51b6:	e1 35       	cpi	r30, 0x51	; 81
    51b8:	f1 05       	cpc	r31, r1
    51ba:	08 f0       	brcs	.+2      	; 0x51be <__vector_39+0x3a>
    51bc:	75 c0       	rjmp	.+234    	; 0x52a8 <__vector_39+0x124>
    51be:	88 27       	eor	r24, r24
    51c0:	e4 58       	subi	r30, 0x84	; 132
    51c2:	ff 4f       	sbci	r31, 0xFF	; 255
    51c4:	8f 4f       	sbci	r24, 0xFF	; 255
    51c6:	76 c2       	rjmp	.+1260   	; 0x56b4 <__tablejump2__>
    51c8:	10 92 7f 19 	sts	0x197F, r1	; 0x80197f <_index.1885>
    51cc:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <_index.1885>
    51d0:	80 91 82 19 	lds	r24, 0x1982	; 0x801982 <_twiMessageLen>
    51d4:	e8 17       	cp	r30, r24
    51d6:	70 f4       	brcc	.+28     	; 0x51f4 <__vector_39+0x70>
    51d8:	81 e0       	ldi	r24, 0x01	; 1
    51da:	8e 0f       	add	r24, r30
    51dc:	80 93 7f 19 	sts	0x197F, r24	; 0x80197f <_index.1885>
    51e0:	f0 e0       	ldi	r31, 0x00	; 0
    51e2:	ed 57       	subi	r30, 0x7D	; 125
    51e4:	f6 4e       	sbci	r31, 0xE6	; 230
    51e6:	80 81       	ld	r24, Z
    51e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    51ec:	85 e8       	ldi	r24, 0x85	; 133
    51ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    51f2:	72 c0       	rjmp	.+228    	; 0x52d8 <__vector_39+0x154>
    51f4:	84 e9       	ldi	r24, 0x94	; 148
    51f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    51fa:	80 91 80 19 	lds	r24, 0x1980	; 0x801980 <_twiCurrentHandler>
    51fe:	90 91 81 19 	lds	r25, 0x1981	; 0x801981 <_twiCurrentHandler+0x1>
    5202:	dc 01       	movw	r26, r24
    5204:	12 96       	adiw	r26, 0x02	; 2
    5206:	ed 91       	ld	r30, X+
    5208:	fc 91       	ld	r31, X
    520a:	13 97       	sbiw	r26, 0x03	; 3
    520c:	30 97       	sbiw	r30, 0x00	; 0
    520e:	09 f4       	brne	.+2      	; 0x5212 <__vector_39+0x8e>
    5210:	63 c0       	rjmp	.+198    	; 0x52d8 <__vector_39+0x154>
    5212:	20 e0       	ldi	r18, 0x00	; 0
    5214:	40 e0       	ldi	r20, 0x00	; 0
    5216:	50 e0       	ldi	r21, 0x00	; 0
    5218:	64 e0       	ldi	r22, 0x04	; 4
    521a:	19 95       	eicall
    521c:	5d c0       	rjmp	.+186    	; 0x52d8 <__vector_39+0x154>
    521e:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <_index.1885>
    5222:	81 e0       	ldi	r24, 0x01	; 1
    5224:	8e 0f       	add	r24, r30
    5226:	80 93 7f 19 	sts	0x197F, r24	; 0x80197f <_index.1885>
    522a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    522e:	f0 e0       	ldi	r31, 0x00	; 0
    5230:	ed 57       	subi	r30, 0x7D	; 125
    5232:	f6 4e       	sbci	r31, 0xE6	; 230
    5234:	80 83       	st	Z, r24
    5236:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    523a:	80 34       	cpi	r24, 0x40	; 64
    523c:	11 f4       	brne	.+4      	; 0x5242 <__vector_39+0xbe>
    523e:	10 92 7f 19 	sts	0x197F, r1	; 0x80197f <_index.1885>
    5242:	20 91 7f 19 	lds	r18, 0x197F	; 0x80197f <_index.1885>
    5246:	30 e0       	ldi	r19, 0x00	; 0
    5248:	80 91 82 19 	lds	r24, 0x1982	; 0x801982 <_twiMessageLen>
    524c:	90 e0       	ldi	r25, 0x00	; 0
    524e:	01 97       	sbiw	r24, 0x01	; 1
    5250:	28 17       	cp	r18, r24
    5252:	39 07       	cpc	r19, r25
    5254:	24 f4       	brge	.+8      	; 0x525e <__vector_39+0xda>
    5256:	85 ec       	ldi	r24, 0xC5	; 197
    5258:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    525c:	3d c0       	rjmp	.+122    	; 0x52d8 <__vector_39+0x154>
    525e:	85 e8       	ldi	r24, 0x85	; 133
    5260:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5264:	39 c0       	rjmp	.+114    	; 0x52d8 <__vector_39+0x154>
    5266:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    526a:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <_index.1885>
    526e:	f0 e0       	ldi	r31, 0x00	; 0
    5270:	ed 57       	subi	r30, 0x7D	; 125
    5272:	f6 4e       	sbci	r31, 0xE6	; 230
    5274:	80 83       	st	Z, r24
    5276:	84 e9       	ldi	r24, 0x94	; 148
    5278:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    527c:	80 91 80 19 	lds	r24, 0x1980	; 0x801980 <_twiCurrentHandler>
    5280:	90 91 81 19 	lds	r25, 0x1981	; 0x801981 <_twiCurrentHandler+0x1>
    5284:	dc 01       	movw	r26, r24
    5286:	12 96       	adiw	r26, 0x02	; 2
    5288:	ed 91       	ld	r30, X+
    528a:	fc 91       	ld	r31, X
    528c:	13 97       	sbiw	r26, 0x03	; 3
    528e:	30 97       	sbiw	r30, 0x00	; 0
    5290:	19 f1       	breq	.+70     	; 0x52d8 <__vector_39+0x154>
    5292:	20 91 82 19 	lds	r18, 0x1982	; 0x801982 <_twiMessageLen>
    5296:	43 e8       	ldi	r20, 0x83	; 131
    5298:	59 e1       	ldi	r21, 0x19	; 25
    529a:	65 e0       	ldi	r22, 0x05	; 5
    529c:	19 95       	eicall
    529e:	1c c0       	rjmp	.+56     	; 0x52d8 <__vector_39+0x154>
    52a0:	85 ea       	ldi	r24, 0xA5	; 165
    52a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52a6:	18 c0       	rjmp	.+48     	; 0x52d8 <__vector_39+0x154>
    52a8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    52ac:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    52b0:	84 e0       	ldi	r24, 0x04	; 4
    52b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52b6:	80 91 80 19 	lds	r24, 0x1980	; 0x801980 <_twiCurrentHandler>
    52ba:	90 91 81 19 	lds	r25, 0x1981	; 0x801981 <_twiCurrentHandler+0x1>
    52be:	dc 01       	movw	r26, r24
    52c0:	12 96       	adiw	r26, 0x02	; 2
    52c2:	ed 91       	ld	r30, X+
    52c4:	fc 91       	ld	r31, X
    52c6:	13 97       	sbiw	r26, 0x03	; 3
    52c8:	30 97       	sbiw	r30, 0x00	; 0
    52ca:	31 f0       	breq	.+12     	; 0x52d8 <__vector_39+0x154>
    52cc:	20 e0       	ldi	r18, 0x00	; 0
    52ce:	40 e0       	ldi	r20, 0x00	; 0
    52d0:	50 e0       	ldi	r21, 0x00	; 0
    52d2:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    52d6:	19 95       	eicall
    52d8:	ff 91       	pop	r31
    52da:	ef 91       	pop	r30
    52dc:	bf 91       	pop	r27
    52de:	af 91       	pop	r26
    52e0:	9f 91       	pop	r25
    52e2:	8f 91       	pop	r24
    52e4:	7f 91       	pop	r23
    52e6:	6f 91       	pop	r22
    52e8:	5f 91       	pop	r21
    52ea:	4f 91       	pop	r20
    52ec:	3f 91       	pop	r19
    52ee:	2f 91       	pop	r18
    52f0:	0f 90       	pop	r0
    52f2:	0b be       	out	0x3b, r0	; 59
    52f4:	0f 90       	pop	r0
    52f6:	0f be       	out	0x3f, r0	; 63
    52f8:	0f 90       	pop	r0
    52fa:	1f 90       	pop	r1
    52fc:	18 95       	reti

000052fe <fifo_init>:
    52fe:	fc 01       	movw	r30, r24
    5300:	41 11       	cpse	r20, r1
    5302:	01 c0       	rjmp	.+2      	; 0x5306 <fifo_init+0x8>
    5304:	1a d3       	rcall	.+1588   	; 0x593a <abort>
    5306:	84 2f       	mov	r24, r20
    5308:	90 e0       	ldi	r25, 0x00	; 0
    530a:	9c 01       	movw	r18, r24
    530c:	21 50       	subi	r18, 0x01	; 1
    530e:	31 09       	sbc	r19, r1
    5310:	82 23       	and	r24, r18
    5312:	93 23       	and	r25, r19
    5314:	89 2b       	or	r24, r25
    5316:	09 f0       	breq	.+2      	; 0x531a <fifo_init+0x1c>
    5318:	10 d3       	rcall	.+1568   	; 0x593a <abort>
    531a:	41 38       	cpi	r20, 0x81	; 129
    531c:	08 f0       	brcs	.+2      	; 0x5320 <fifo_init+0x22>
    531e:	0d d3       	rcall	.+1562   	; 0x593a <abort>
    5320:	12 82       	std	Z+2, r1	; 0x02
    5322:	13 82       	std	Z+3, r1	; 0x03
    5324:	44 83       	std	Z+4, r20	; 0x04
    5326:	44 0f       	add	r20, r20
    5328:	41 50       	subi	r20, 0x01	; 1
    532a:	45 83       	std	Z+5, r20	; 0x05
    532c:	71 83       	std	Z+1, r23	; 0x01
    532e:	60 83       	st	Z, r22
    5330:	80 e0       	ldi	r24, 0x00	; 0
    5332:	90 e0       	ldi	r25, 0x00	; 0
    5334:	08 95       	ret

00005336 <__subsf3>:
    5336:	50 58       	subi	r21, 0x80	; 128

00005338 <__addsf3>:
    5338:	bb 27       	eor	r27, r27
    533a:	aa 27       	eor	r26, r26
    533c:	0e d0       	rcall	.+28     	; 0x535a <__addsf3x>
    533e:	21 c1       	rjmp	.+578    	; 0x5582 <__fp_round>
    5340:	12 d1       	rcall	.+548    	; 0x5566 <__fp_pscA>
    5342:	30 f0       	brcs	.+12     	; 0x5350 <__addsf3+0x18>
    5344:	17 d1       	rcall	.+558    	; 0x5574 <__fp_pscB>
    5346:	20 f0       	brcs	.+8      	; 0x5350 <__addsf3+0x18>
    5348:	31 f4       	brne	.+12     	; 0x5356 <__addsf3+0x1e>
    534a:	9f 3f       	cpi	r25, 0xFF	; 255
    534c:	11 f4       	brne	.+4      	; 0x5352 <__addsf3+0x1a>
    534e:	1e f4       	brtc	.+6      	; 0x5356 <__addsf3+0x1e>
    5350:	07 c1       	rjmp	.+526    	; 0x5560 <__fp_nan>
    5352:	0e f4       	brtc	.+2      	; 0x5356 <__addsf3+0x1e>
    5354:	e0 95       	com	r30
    5356:	e7 fb       	bst	r30, 7
    5358:	fd c0       	rjmp	.+506    	; 0x5554 <__fp_inf>

0000535a <__addsf3x>:
    535a:	e9 2f       	mov	r30, r25
    535c:	0e 94 42 1c 	call	0x3884	; 0x3884 <__fp_split3>
    5360:	78 f3       	brcs	.-34     	; 0x5340 <__addsf3+0x8>
    5362:	ba 17       	cp	r27, r26
    5364:	62 07       	cpc	r22, r18
    5366:	73 07       	cpc	r23, r19
    5368:	84 07       	cpc	r24, r20
    536a:	95 07       	cpc	r25, r21
    536c:	20 f0       	brcs	.+8      	; 0x5376 <__addsf3x+0x1c>
    536e:	79 f4       	brne	.+30     	; 0x538e <__addsf3x+0x34>
    5370:	a6 f5       	brtc	.+104    	; 0x53da <__addsf3x+0x80>
    5372:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__fp_zero>
    5376:	0e f4       	brtc	.+2      	; 0x537a <__addsf3x+0x20>
    5378:	e0 95       	com	r30
    537a:	0b 2e       	mov	r0, r27
    537c:	ba 2f       	mov	r27, r26
    537e:	a0 2d       	mov	r26, r0
    5380:	0b 01       	movw	r0, r22
    5382:	b9 01       	movw	r22, r18
    5384:	90 01       	movw	r18, r0
    5386:	0c 01       	movw	r0, r24
    5388:	ca 01       	movw	r24, r20
    538a:	a0 01       	movw	r20, r0
    538c:	11 24       	eor	r1, r1
    538e:	ff 27       	eor	r31, r31
    5390:	59 1b       	sub	r21, r25
    5392:	99 f0       	breq	.+38     	; 0x53ba <__addsf3x+0x60>
    5394:	59 3f       	cpi	r21, 0xF9	; 249
    5396:	50 f4       	brcc	.+20     	; 0x53ac <__addsf3x+0x52>
    5398:	50 3e       	cpi	r21, 0xE0	; 224
    539a:	68 f1       	brcs	.+90     	; 0x53f6 <__addsf3x+0x9c>
    539c:	1a 16       	cp	r1, r26
    539e:	f0 40       	sbci	r31, 0x00	; 0
    53a0:	a2 2f       	mov	r26, r18
    53a2:	23 2f       	mov	r18, r19
    53a4:	34 2f       	mov	r19, r20
    53a6:	44 27       	eor	r20, r20
    53a8:	58 5f       	subi	r21, 0xF8	; 248
    53aa:	f3 cf       	rjmp	.-26     	; 0x5392 <__addsf3x+0x38>
    53ac:	46 95       	lsr	r20
    53ae:	37 95       	ror	r19
    53b0:	27 95       	ror	r18
    53b2:	a7 95       	ror	r26
    53b4:	f0 40       	sbci	r31, 0x00	; 0
    53b6:	53 95       	inc	r21
    53b8:	c9 f7       	brne	.-14     	; 0x53ac <__addsf3x+0x52>
    53ba:	7e f4       	brtc	.+30     	; 0x53da <__addsf3x+0x80>
    53bc:	1f 16       	cp	r1, r31
    53be:	ba 0b       	sbc	r27, r26
    53c0:	62 0b       	sbc	r22, r18
    53c2:	73 0b       	sbc	r23, r19
    53c4:	84 0b       	sbc	r24, r20
    53c6:	ba f0       	brmi	.+46     	; 0x53f6 <__addsf3x+0x9c>
    53c8:	91 50       	subi	r25, 0x01	; 1
    53ca:	a1 f0       	breq	.+40     	; 0x53f4 <__addsf3x+0x9a>
    53cc:	ff 0f       	add	r31, r31
    53ce:	bb 1f       	adc	r27, r27
    53d0:	66 1f       	adc	r22, r22
    53d2:	77 1f       	adc	r23, r23
    53d4:	88 1f       	adc	r24, r24
    53d6:	c2 f7       	brpl	.-16     	; 0x53c8 <__addsf3x+0x6e>
    53d8:	0e c0       	rjmp	.+28     	; 0x53f6 <__addsf3x+0x9c>
    53da:	ba 0f       	add	r27, r26
    53dc:	62 1f       	adc	r22, r18
    53de:	73 1f       	adc	r23, r19
    53e0:	84 1f       	adc	r24, r20
    53e2:	48 f4       	brcc	.+18     	; 0x53f6 <__addsf3x+0x9c>
    53e4:	87 95       	ror	r24
    53e6:	77 95       	ror	r23
    53e8:	67 95       	ror	r22
    53ea:	b7 95       	ror	r27
    53ec:	f7 95       	ror	r31
    53ee:	9e 3f       	cpi	r25, 0xFE	; 254
    53f0:	08 f0       	brcs	.+2      	; 0x53f4 <__addsf3x+0x9a>
    53f2:	b1 cf       	rjmp	.-158    	; 0x5356 <__addsf3+0x1e>
    53f4:	93 95       	inc	r25
    53f6:	88 0f       	add	r24, r24
    53f8:	08 f0       	brcs	.+2      	; 0x53fc <__addsf3x+0xa2>
    53fa:	99 27       	eor	r25, r25
    53fc:	ee 0f       	add	r30, r30
    53fe:	97 95       	ror	r25
    5400:	87 95       	ror	r24
    5402:	08 95       	ret

00005404 <__divsf3>:
    5404:	0d d0       	rcall	.+26     	; 0x5420 <__divsf3x>
    5406:	bd c0       	rjmp	.+378    	; 0x5582 <__fp_round>
    5408:	b5 d0       	rcall	.+362    	; 0x5574 <__fp_pscB>
    540a:	48 f0       	brcs	.+18     	; 0x541e <__divsf3+0x1a>
    540c:	ac d0       	rcall	.+344    	; 0x5566 <__fp_pscA>
    540e:	38 f0       	brcs	.+14     	; 0x541e <__divsf3+0x1a>
    5410:	21 f4       	brne	.+8      	; 0x541a <__divsf3+0x16>
    5412:	5f 3f       	cpi	r21, 0xFF	; 255
    5414:	21 f0       	breq	.+8      	; 0x541e <__divsf3+0x1a>
    5416:	9e c0       	rjmp	.+316    	; 0x5554 <__fp_inf>
    5418:	51 11       	cpse	r21, r1
    541a:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__fp_szero>
    541e:	a0 c0       	rjmp	.+320    	; 0x5560 <__fp_nan>

00005420 <__divsf3x>:
    5420:	0e 94 42 1c 	call	0x3884	; 0x3884 <__fp_split3>
    5424:	88 f3       	brcs	.-30     	; 0x5408 <__divsf3+0x4>

00005426 <__divsf3_pse>:
    5426:	99 23       	and	r25, r25
    5428:	b9 f3       	breq	.-18     	; 0x5418 <__divsf3+0x14>
    542a:	55 23       	and	r21, r21
    542c:	a1 f3       	breq	.-24     	; 0x5416 <__divsf3+0x12>
    542e:	95 1b       	sub	r25, r21
    5430:	55 0b       	sbc	r21, r21
    5432:	bb 27       	eor	r27, r27
    5434:	aa 27       	eor	r26, r26
    5436:	62 17       	cp	r22, r18
    5438:	73 07       	cpc	r23, r19
    543a:	84 07       	cpc	r24, r20
    543c:	38 f0       	brcs	.+14     	; 0x544c <__divsf3_pse+0x26>
    543e:	9f 5f       	subi	r25, 0xFF	; 255
    5440:	5f 4f       	sbci	r21, 0xFF	; 255
    5442:	22 0f       	add	r18, r18
    5444:	33 1f       	adc	r19, r19
    5446:	44 1f       	adc	r20, r20
    5448:	aa 1f       	adc	r26, r26
    544a:	a9 f3       	breq	.-22     	; 0x5436 <__divsf3_pse+0x10>
    544c:	34 d0       	rcall	.+104    	; 0x54b6 <__divsf3_pse+0x90>
    544e:	0e 2e       	mov	r0, r30
    5450:	3a f0       	brmi	.+14     	; 0x5460 <__divsf3_pse+0x3a>
    5452:	e0 e8       	ldi	r30, 0x80	; 128
    5454:	31 d0       	rcall	.+98     	; 0x54b8 <__divsf3_pse+0x92>
    5456:	91 50       	subi	r25, 0x01	; 1
    5458:	50 40       	sbci	r21, 0x00	; 0
    545a:	e6 95       	lsr	r30
    545c:	00 1c       	adc	r0, r0
    545e:	ca f7       	brpl	.-14     	; 0x5452 <__divsf3_pse+0x2c>
    5460:	2a d0       	rcall	.+84     	; 0x54b6 <__divsf3_pse+0x90>
    5462:	fe 2f       	mov	r31, r30
    5464:	28 d0       	rcall	.+80     	; 0x54b6 <__divsf3_pse+0x90>
    5466:	66 0f       	add	r22, r22
    5468:	77 1f       	adc	r23, r23
    546a:	88 1f       	adc	r24, r24
    546c:	bb 1f       	adc	r27, r27
    546e:	26 17       	cp	r18, r22
    5470:	37 07       	cpc	r19, r23
    5472:	48 07       	cpc	r20, r24
    5474:	ab 07       	cpc	r26, r27
    5476:	b0 e8       	ldi	r27, 0x80	; 128
    5478:	09 f0       	breq	.+2      	; 0x547c <__divsf3_pse+0x56>
    547a:	bb 0b       	sbc	r27, r27
    547c:	80 2d       	mov	r24, r0
    547e:	bf 01       	movw	r22, r30
    5480:	ff 27       	eor	r31, r31
    5482:	93 58       	subi	r25, 0x83	; 131
    5484:	5f 4f       	sbci	r21, 0xFF	; 255
    5486:	32 f0       	brmi	.+12     	; 0x5494 <__divsf3_pse+0x6e>
    5488:	9e 3f       	cpi	r25, 0xFE	; 254
    548a:	51 05       	cpc	r21, r1
    548c:	70 f0       	brcs	.+28     	; 0x54aa <__divsf3_pse+0x84>
    548e:	62 c0       	rjmp	.+196    	; 0x5554 <__fp_inf>
    5490:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__fp_szero>
    5494:	5f 3f       	cpi	r21, 0xFF	; 255
    5496:	e4 f3       	brlt	.-8      	; 0x5490 <__divsf3_pse+0x6a>
    5498:	98 3e       	cpi	r25, 0xE8	; 232
    549a:	d4 f3       	brlt	.-12     	; 0x5490 <__divsf3_pse+0x6a>
    549c:	86 95       	lsr	r24
    549e:	77 95       	ror	r23
    54a0:	67 95       	ror	r22
    54a2:	b7 95       	ror	r27
    54a4:	f7 95       	ror	r31
    54a6:	9f 5f       	subi	r25, 0xFF	; 255
    54a8:	c9 f7       	brne	.-14     	; 0x549c <__divsf3_pse+0x76>
    54aa:	88 0f       	add	r24, r24
    54ac:	91 1d       	adc	r25, r1
    54ae:	96 95       	lsr	r25
    54b0:	87 95       	ror	r24
    54b2:	97 f9       	bld	r25, 7
    54b4:	08 95       	ret
    54b6:	e1 e0       	ldi	r30, 0x01	; 1
    54b8:	66 0f       	add	r22, r22
    54ba:	77 1f       	adc	r23, r23
    54bc:	88 1f       	adc	r24, r24
    54be:	bb 1f       	adc	r27, r27
    54c0:	62 17       	cp	r22, r18
    54c2:	73 07       	cpc	r23, r19
    54c4:	84 07       	cpc	r24, r20
    54c6:	ba 07       	cpc	r27, r26
    54c8:	20 f0       	brcs	.+8      	; 0x54d2 <__divsf3_pse+0xac>
    54ca:	62 1b       	sub	r22, r18
    54cc:	73 0b       	sbc	r23, r19
    54ce:	84 0b       	sbc	r24, r20
    54d0:	ba 0b       	sbc	r27, r26
    54d2:	ee 1f       	adc	r30, r30
    54d4:	88 f7       	brcc	.-30     	; 0x54b8 <__divsf3_pse+0x92>
    54d6:	e0 95       	com	r30
    54d8:	08 95       	ret

000054da <__floatunsisf>:
    54da:	e8 94       	clt
    54dc:	09 c0       	rjmp	.+18     	; 0x54f0 <__floatsisf+0x12>

000054de <__floatsisf>:
    54de:	97 fb       	bst	r25, 7
    54e0:	3e f4       	brtc	.+14     	; 0x54f0 <__floatsisf+0x12>
    54e2:	90 95       	com	r25
    54e4:	80 95       	com	r24
    54e6:	70 95       	com	r23
    54e8:	61 95       	neg	r22
    54ea:	7f 4f       	sbci	r23, 0xFF	; 255
    54ec:	8f 4f       	sbci	r24, 0xFF	; 255
    54ee:	9f 4f       	sbci	r25, 0xFF	; 255
    54f0:	99 23       	and	r25, r25
    54f2:	a9 f0       	breq	.+42     	; 0x551e <__floatsisf+0x40>
    54f4:	f9 2f       	mov	r31, r25
    54f6:	96 e9       	ldi	r25, 0x96	; 150
    54f8:	bb 27       	eor	r27, r27
    54fa:	93 95       	inc	r25
    54fc:	f6 95       	lsr	r31
    54fe:	87 95       	ror	r24
    5500:	77 95       	ror	r23
    5502:	67 95       	ror	r22
    5504:	b7 95       	ror	r27
    5506:	f1 11       	cpse	r31, r1
    5508:	f8 cf       	rjmp	.-16     	; 0x54fa <__floatsisf+0x1c>
    550a:	fa f4       	brpl	.+62     	; 0x554a <__floatsisf+0x6c>
    550c:	bb 0f       	add	r27, r27
    550e:	11 f4       	brne	.+4      	; 0x5514 <__floatsisf+0x36>
    5510:	60 ff       	sbrs	r22, 0
    5512:	1b c0       	rjmp	.+54     	; 0x554a <__floatsisf+0x6c>
    5514:	6f 5f       	subi	r22, 0xFF	; 255
    5516:	7f 4f       	sbci	r23, 0xFF	; 255
    5518:	8f 4f       	sbci	r24, 0xFF	; 255
    551a:	9f 4f       	sbci	r25, 0xFF	; 255
    551c:	16 c0       	rjmp	.+44     	; 0x554a <__floatsisf+0x6c>
    551e:	88 23       	and	r24, r24
    5520:	11 f0       	breq	.+4      	; 0x5526 <__floatsisf+0x48>
    5522:	96 e9       	ldi	r25, 0x96	; 150
    5524:	11 c0       	rjmp	.+34     	; 0x5548 <__floatsisf+0x6a>
    5526:	77 23       	and	r23, r23
    5528:	21 f0       	breq	.+8      	; 0x5532 <__floatsisf+0x54>
    552a:	9e e8       	ldi	r25, 0x8E	; 142
    552c:	87 2f       	mov	r24, r23
    552e:	76 2f       	mov	r23, r22
    5530:	05 c0       	rjmp	.+10     	; 0x553c <__floatsisf+0x5e>
    5532:	66 23       	and	r22, r22
    5534:	71 f0       	breq	.+28     	; 0x5552 <__floatsisf+0x74>
    5536:	96 e8       	ldi	r25, 0x86	; 134
    5538:	86 2f       	mov	r24, r22
    553a:	70 e0       	ldi	r23, 0x00	; 0
    553c:	60 e0       	ldi	r22, 0x00	; 0
    553e:	2a f0       	brmi	.+10     	; 0x554a <__floatsisf+0x6c>
    5540:	9a 95       	dec	r25
    5542:	66 0f       	add	r22, r22
    5544:	77 1f       	adc	r23, r23
    5546:	88 1f       	adc	r24, r24
    5548:	da f7       	brpl	.-10     	; 0x5540 <__floatsisf+0x62>
    554a:	88 0f       	add	r24, r24
    554c:	96 95       	lsr	r25
    554e:	87 95       	ror	r24
    5550:	97 f9       	bld	r25, 7
    5552:	08 95       	ret

00005554 <__fp_inf>:
    5554:	97 f9       	bld	r25, 7
    5556:	9f 67       	ori	r25, 0x7F	; 127
    5558:	80 e8       	ldi	r24, 0x80	; 128
    555a:	70 e0       	ldi	r23, 0x00	; 0
    555c:	60 e0       	ldi	r22, 0x00	; 0
    555e:	08 95       	ret

00005560 <__fp_nan>:
    5560:	9f ef       	ldi	r25, 0xFF	; 255
    5562:	80 ec       	ldi	r24, 0xC0	; 192
    5564:	08 95       	ret

00005566 <__fp_pscA>:
    5566:	00 24       	eor	r0, r0
    5568:	0a 94       	dec	r0
    556a:	16 16       	cp	r1, r22
    556c:	17 06       	cpc	r1, r23
    556e:	18 06       	cpc	r1, r24
    5570:	09 06       	cpc	r0, r25
    5572:	08 95       	ret

00005574 <__fp_pscB>:
    5574:	00 24       	eor	r0, r0
    5576:	0a 94       	dec	r0
    5578:	12 16       	cp	r1, r18
    557a:	13 06       	cpc	r1, r19
    557c:	14 06       	cpc	r1, r20
    557e:	05 06       	cpc	r0, r21
    5580:	08 95       	ret

00005582 <__fp_round>:
    5582:	09 2e       	mov	r0, r25
    5584:	03 94       	inc	r0
    5586:	00 0c       	add	r0, r0
    5588:	11 f4       	brne	.+4      	; 0x558e <__fp_round+0xc>
    558a:	88 23       	and	r24, r24
    558c:	52 f0       	brmi	.+20     	; 0x55a2 <__fp_round+0x20>
    558e:	bb 0f       	add	r27, r27
    5590:	40 f4       	brcc	.+16     	; 0x55a2 <__fp_round+0x20>
    5592:	bf 2b       	or	r27, r31
    5594:	11 f4       	brne	.+4      	; 0x559a <__fp_round+0x18>
    5596:	60 ff       	sbrs	r22, 0
    5598:	04 c0       	rjmp	.+8      	; 0x55a2 <__fp_round+0x20>
    559a:	6f 5f       	subi	r22, 0xFF	; 255
    559c:	7f 4f       	sbci	r23, 0xFF	; 255
    559e:	8f 4f       	sbci	r24, 0xFF	; 255
    55a0:	9f 4f       	sbci	r25, 0xFF	; 255
    55a2:	08 95       	ret

000055a4 <__mulsf3>:
    55a4:	0c d0       	rcall	.+24     	; 0x55be <__mulsf3x>
    55a6:	ed cf       	rjmp	.-38     	; 0x5582 <__fp_round>
    55a8:	de df       	rcall	.-68     	; 0x5566 <__fp_pscA>
    55aa:	28 f0       	brcs	.+10     	; 0x55b6 <__mulsf3+0x12>
    55ac:	e3 df       	rcall	.-58     	; 0x5574 <__fp_pscB>
    55ae:	18 f0       	brcs	.+6      	; 0x55b6 <__mulsf3+0x12>
    55b0:	95 23       	and	r25, r21
    55b2:	09 f0       	breq	.+2      	; 0x55b6 <__mulsf3+0x12>
    55b4:	cf cf       	rjmp	.-98     	; 0x5554 <__fp_inf>
    55b6:	d4 cf       	rjmp	.-88     	; 0x5560 <__fp_nan>
    55b8:	11 24       	eor	r1, r1
    55ba:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__fp_szero>

000055be <__mulsf3x>:
    55be:	0e 94 42 1c 	call	0x3884	; 0x3884 <__fp_split3>
    55c2:	90 f3       	brcs	.-28     	; 0x55a8 <__mulsf3+0x4>

000055c4 <__mulsf3_pse>:
    55c4:	95 9f       	mul	r25, r21
    55c6:	c1 f3       	breq	.-16     	; 0x55b8 <__mulsf3+0x14>
    55c8:	95 0f       	add	r25, r21
    55ca:	50 e0       	ldi	r21, 0x00	; 0
    55cc:	55 1f       	adc	r21, r21
    55ce:	62 9f       	mul	r22, r18
    55d0:	f0 01       	movw	r30, r0
    55d2:	72 9f       	mul	r23, r18
    55d4:	bb 27       	eor	r27, r27
    55d6:	f0 0d       	add	r31, r0
    55d8:	b1 1d       	adc	r27, r1
    55da:	63 9f       	mul	r22, r19
    55dc:	aa 27       	eor	r26, r26
    55de:	f0 0d       	add	r31, r0
    55e0:	b1 1d       	adc	r27, r1
    55e2:	aa 1f       	adc	r26, r26
    55e4:	64 9f       	mul	r22, r20
    55e6:	66 27       	eor	r22, r22
    55e8:	b0 0d       	add	r27, r0
    55ea:	a1 1d       	adc	r26, r1
    55ec:	66 1f       	adc	r22, r22
    55ee:	82 9f       	mul	r24, r18
    55f0:	22 27       	eor	r18, r18
    55f2:	b0 0d       	add	r27, r0
    55f4:	a1 1d       	adc	r26, r1
    55f6:	62 1f       	adc	r22, r18
    55f8:	73 9f       	mul	r23, r19
    55fa:	b0 0d       	add	r27, r0
    55fc:	a1 1d       	adc	r26, r1
    55fe:	62 1f       	adc	r22, r18
    5600:	83 9f       	mul	r24, r19
    5602:	a0 0d       	add	r26, r0
    5604:	61 1d       	adc	r22, r1
    5606:	22 1f       	adc	r18, r18
    5608:	74 9f       	mul	r23, r20
    560a:	33 27       	eor	r19, r19
    560c:	a0 0d       	add	r26, r0
    560e:	61 1d       	adc	r22, r1
    5610:	23 1f       	adc	r18, r19
    5612:	84 9f       	mul	r24, r20
    5614:	60 0d       	add	r22, r0
    5616:	21 1d       	adc	r18, r1
    5618:	82 2f       	mov	r24, r18
    561a:	76 2f       	mov	r23, r22
    561c:	6a 2f       	mov	r22, r26
    561e:	11 24       	eor	r1, r1
    5620:	9f 57       	subi	r25, 0x7F	; 127
    5622:	50 40       	sbci	r21, 0x00	; 0
    5624:	92 f0       	brmi	.+36     	; 0x564a <__mulsf3_pse+0x86>
    5626:	e9 f0       	breq	.+58     	; 0x5662 <__mulsf3_pse+0x9e>
    5628:	88 23       	and	r24, r24
    562a:	4a f0       	brmi	.+18     	; 0x563e <__mulsf3_pse+0x7a>
    562c:	ee 0f       	add	r30, r30
    562e:	ff 1f       	adc	r31, r31
    5630:	bb 1f       	adc	r27, r27
    5632:	66 1f       	adc	r22, r22
    5634:	77 1f       	adc	r23, r23
    5636:	88 1f       	adc	r24, r24
    5638:	91 50       	subi	r25, 0x01	; 1
    563a:	50 40       	sbci	r21, 0x00	; 0
    563c:	a9 f7       	brne	.-22     	; 0x5628 <__mulsf3_pse+0x64>
    563e:	9e 3f       	cpi	r25, 0xFE	; 254
    5640:	51 05       	cpc	r21, r1
    5642:	78 f0       	brcs	.+30     	; 0x5662 <__mulsf3_pse+0x9e>
    5644:	87 cf       	rjmp	.-242    	; 0x5554 <__fp_inf>
    5646:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__fp_szero>
    564a:	5f 3f       	cpi	r21, 0xFF	; 255
    564c:	e4 f3       	brlt	.-8      	; 0x5646 <__mulsf3_pse+0x82>
    564e:	98 3e       	cpi	r25, 0xE8	; 232
    5650:	d4 f3       	brlt	.-12     	; 0x5646 <__mulsf3_pse+0x82>
    5652:	86 95       	lsr	r24
    5654:	77 95       	ror	r23
    5656:	67 95       	ror	r22
    5658:	b7 95       	ror	r27
    565a:	f7 95       	ror	r31
    565c:	e7 95       	ror	r30
    565e:	9f 5f       	subi	r25, 0xFF	; 255
    5660:	c1 f7       	brne	.-16     	; 0x5652 <__mulsf3_pse+0x8e>
    5662:	fe 2b       	or	r31, r30
    5664:	88 0f       	add	r24, r24
    5666:	91 1d       	adc	r25, r1
    5668:	96 95       	lsr	r25
    566a:	87 95       	ror	r24
    566c:	97 f9       	bld	r25, 7
    566e:	08 95       	ret

00005670 <__udivmodsi4>:
    5670:	a1 e2       	ldi	r26, 0x21	; 33
    5672:	1a 2e       	mov	r1, r26
    5674:	aa 1b       	sub	r26, r26
    5676:	bb 1b       	sub	r27, r27
    5678:	fd 01       	movw	r30, r26
    567a:	0d c0       	rjmp	.+26     	; 0x5696 <__udivmodsi4_ep>

0000567c <__udivmodsi4_loop>:
    567c:	aa 1f       	adc	r26, r26
    567e:	bb 1f       	adc	r27, r27
    5680:	ee 1f       	adc	r30, r30
    5682:	ff 1f       	adc	r31, r31
    5684:	a2 17       	cp	r26, r18
    5686:	b3 07       	cpc	r27, r19
    5688:	e4 07       	cpc	r30, r20
    568a:	f5 07       	cpc	r31, r21
    568c:	20 f0       	brcs	.+8      	; 0x5696 <__udivmodsi4_ep>
    568e:	a2 1b       	sub	r26, r18
    5690:	b3 0b       	sbc	r27, r19
    5692:	e4 0b       	sbc	r30, r20
    5694:	f5 0b       	sbc	r31, r21

00005696 <__udivmodsi4_ep>:
    5696:	66 1f       	adc	r22, r22
    5698:	77 1f       	adc	r23, r23
    569a:	88 1f       	adc	r24, r24
    569c:	99 1f       	adc	r25, r25
    569e:	1a 94       	dec	r1
    56a0:	69 f7       	brne	.-38     	; 0x567c <__udivmodsi4_loop>
    56a2:	60 95       	com	r22
    56a4:	70 95       	com	r23
    56a6:	80 95       	com	r24
    56a8:	90 95       	com	r25
    56aa:	9b 01       	movw	r18, r22
    56ac:	ac 01       	movw	r20, r24
    56ae:	bd 01       	movw	r22, r26
    56b0:	cf 01       	movw	r24, r30
    56b2:	08 95       	ret

000056b4 <__tablejump2__>:
    56b4:	ee 0f       	add	r30, r30
    56b6:	ff 1f       	adc	r31, r31
    56b8:	88 1f       	adc	r24, r24
    56ba:	8b bf       	out	0x3b, r24	; 59
    56bc:	07 90       	elpm	r0, Z+
    56be:	f6 91       	elpm	r31, Z
    56c0:	e0 2d       	mov	r30, r0
    56c2:	19 94       	eijmp

000056c4 <calloc>:
    56c4:	0f 93       	push	r16
    56c6:	1f 93       	push	r17
    56c8:	cf 93       	push	r28
    56ca:	df 93       	push	r29
    56cc:	86 9f       	mul	r24, r22
    56ce:	80 01       	movw	r16, r0
    56d0:	87 9f       	mul	r24, r23
    56d2:	10 0d       	add	r17, r0
    56d4:	96 9f       	mul	r25, r22
    56d6:	10 0d       	add	r17, r0
    56d8:	11 24       	eor	r1, r1
    56da:	c8 01       	movw	r24, r16
    56dc:	0d d0       	rcall	.+26     	; 0x56f8 <malloc>
    56de:	ec 01       	movw	r28, r24
    56e0:	00 97       	sbiw	r24, 0x00	; 0
    56e2:	21 f0       	breq	.+8      	; 0x56ec <calloc+0x28>
    56e4:	a8 01       	movw	r20, r16
    56e6:	60 e0       	ldi	r22, 0x00	; 0
    56e8:	70 e0       	ldi	r23, 0x00	; 0
    56ea:	34 d1       	rcall	.+616    	; 0x5954 <memset>
    56ec:	ce 01       	movw	r24, r28
    56ee:	df 91       	pop	r29
    56f0:	cf 91       	pop	r28
    56f2:	1f 91       	pop	r17
    56f4:	0f 91       	pop	r16
    56f6:	08 95       	ret

000056f8 <malloc>:
    56f8:	0f 93       	push	r16
    56fa:	1f 93       	push	r17
    56fc:	cf 93       	push	r28
    56fe:	df 93       	push	r29
    5700:	82 30       	cpi	r24, 0x02	; 2
    5702:	91 05       	cpc	r25, r1
    5704:	10 f4       	brcc	.+4      	; 0x570a <malloc+0x12>
    5706:	82 e0       	ldi	r24, 0x02	; 2
    5708:	90 e0       	ldi	r25, 0x00	; 0
    570a:	e0 91 ed 19 	lds	r30, 0x19ED	; 0x8019ed <__flp>
    570e:	f0 91 ee 19 	lds	r31, 0x19EE	; 0x8019ee <__flp+0x1>
    5712:	20 e0       	ldi	r18, 0x00	; 0
    5714:	30 e0       	ldi	r19, 0x00	; 0
    5716:	a0 e0       	ldi	r26, 0x00	; 0
    5718:	b0 e0       	ldi	r27, 0x00	; 0
    571a:	30 97       	sbiw	r30, 0x00	; 0
    571c:	19 f1       	breq	.+70     	; 0x5764 <malloc+0x6c>
    571e:	40 81       	ld	r20, Z
    5720:	51 81       	ldd	r21, Z+1	; 0x01
    5722:	02 81       	ldd	r16, Z+2	; 0x02
    5724:	13 81       	ldd	r17, Z+3	; 0x03
    5726:	48 17       	cp	r20, r24
    5728:	59 07       	cpc	r21, r25
    572a:	c8 f0       	brcs	.+50     	; 0x575e <malloc+0x66>
    572c:	84 17       	cp	r24, r20
    572e:	95 07       	cpc	r25, r21
    5730:	69 f4       	brne	.+26     	; 0x574c <malloc+0x54>
    5732:	10 97       	sbiw	r26, 0x00	; 0
    5734:	31 f0       	breq	.+12     	; 0x5742 <malloc+0x4a>
    5736:	12 96       	adiw	r26, 0x02	; 2
    5738:	0c 93       	st	X, r16
    573a:	12 97       	sbiw	r26, 0x02	; 2
    573c:	13 96       	adiw	r26, 0x03	; 3
    573e:	1c 93       	st	X, r17
    5740:	27 c0       	rjmp	.+78     	; 0x5790 <malloc+0x98>
    5742:	00 93 ed 19 	sts	0x19ED, r16	; 0x8019ed <__flp>
    5746:	10 93 ee 19 	sts	0x19EE, r17	; 0x8019ee <__flp+0x1>
    574a:	22 c0       	rjmp	.+68     	; 0x5790 <malloc+0x98>
    574c:	21 15       	cp	r18, r1
    574e:	31 05       	cpc	r19, r1
    5750:	19 f0       	breq	.+6      	; 0x5758 <malloc+0x60>
    5752:	42 17       	cp	r20, r18
    5754:	53 07       	cpc	r21, r19
    5756:	18 f4       	brcc	.+6      	; 0x575e <malloc+0x66>
    5758:	9a 01       	movw	r18, r20
    575a:	bd 01       	movw	r22, r26
    575c:	ef 01       	movw	r28, r30
    575e:	df 01       	movw	r26, r30
    5760:	f8 01       	movw	r30, r16
    5762:	db cf       	rjmp	.-74     	; 0x571a <malloc+0x22>
    5764:	21 15       	cp	r18, r1
    5766:	31 05       	cpc	r19, r1
    5768:	f9 f0       	breq	.+62     	; 0x57a8 <malloc+0xb0>
    576a:	28 1b       	sub	r18, r24
    576c:	39 0b       	sbc	r19, r25
    576e:	24 30       	cpi	r18, 0x04	; 4
    5770:	31 05       	cpc	r19, r1
    5772:	80 f4       	brcc	.+32     	; 0x5794 <malloc+0x9c>
    5774:	8a 81       	ldd	r24, Y+2	; 0x02
    5776:	9b 81       	ldd	r25, Y+3	; 0x03
    5778:	61 15       	cp	r22, r1
    577a:	71 05       	cpc	r23, r1
    577c:	21 f0       	breq	.+8      	; 0x5786 <malloc+0x8e>
    577e:	fb 01       	movw	r30, r22
    5780:	93 83       	std	Z+3, r25	; 0x03
    5782:	82 83       	std	Z+2, r24	; 0x02
    5784:	04 c0       	rjmp	.+8      	; 0x578e <malloc+0x96>
    5786:	90 93 ee 19 	sts	0x19EE, r25	; 0x8019ee <__flp+0x1>
    578a:	80 93 ed 19 	sts	0x19ED, r24	; 0x8019ed <__flp>
    578e:	fe 01       	movw	r30, r28
    5790:	32 96       	adiw	r30, 0x02	; 2
    5792:	44 c0       	rjmp	.+136    	; 0x581c <malloc+0x124>
    5794:	fe 01       	movw	r30, r28
    5796:	e2 0f       	add	r30, r18
    5798:	f3 1f       	adc	r31, r19
    579a:	81 93       	st	Z+, r24
    579c:	91 93       	st	Z+, r25
    579e:	22 50       	subi	r18, 0x02	; 2
    57a0:	31 09       	sbc	r19, r1
    57a2:	39 83       	std	Y+1, r19	; 0x01
    57a4:	28 83       	st	Y, r18
    57a6:	3a c0       	rjmp	.+116    	; 0x581c <malloc+0x124>
    57a8:	20 91 eb 19 	lds	r18, 0x19EB	; 0x8019eb <__brkval>
    57ac:	30 91 ec 19 	lds	r19, 0x19EC	; 0x8019ec <__brkval+0x1>
    57b0:	23 2b       	or	r18, r19
    57b2:	41 f4       	brne	.+16     	; 0x57c4 <malloc+0xcc>
    57b4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    57b8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    57bc:	30 93 ec 19 	sts	0x19EC, r19	; 0x8019ec <__brkval+0x1>
    57c0:	20 93 eb 19 	sts	0x19EB, r18	; 0x8019eb <__brkval>
    57c4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    57c8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    57cc:	21 15       	cp	r18, r1
    57ce:	31 05       	cpc	r19, r1
    57d0:	41 f4       	brne	.+16     	; 0x57e2 <malloc+0xea>
    57d2:	2d b7       	in	r18, 0x3d	; 61
    57d4:	3e b7       	in	r19, 0x3e	; 62
    57d6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    57da:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    57de:	24 1b       	sub	r18, r20
    57e0:	35 0b       	sbc	r19, r21
    57e2:	e0 91 eb 19 	lds	r30, 0x19EB	; 0x8019eb <__brkval>
    57e6:	f0 91 ec 19 	lds	r31, 0x19EC	; 0x8019ec <__brkval+0x1>
    57ea:	e2 17       	cp	r30, r18
    57ec:	f3 07       	cpc	r31, r19
    57ee:	a0 f4       	brcc	.+40     	; 0x5818 <malloc+0x120>
    57f0:	2e 1b       	sub	r18, r30
    57f2:	3f 0b       	sbc	r19, r31
    57f4:	28 17       	cp	r18, r24
    57f6:	39 07       	cpc	r19, r25
    57f8:	78 f0       	brcs	.+30     	; 0x5818 <malloc+0x120>
    57fa:	ac 01       	movw	r20, r24
    57fc:	4e 5f       	subi	r20, 0xFE	; 254
    57fe:	5f 4f       	sbci	r21, 0xFF	; 255
    5800:	24 17       	cp	r18, r20
    5802:	35 07       	cpc	r19, r21
    5804:	48 f0       	brcs	.+18     	; 0x5818 <malloc+0x120>
    5806:	4e 0f       	add	r20, r30
    5808:	5f 1f       	adc	r21, r31
    580a:	50 93 ec 19 	sts	0x19EC, r21	; 0x8019ec <__brkval+0x1>
    580e:	40 93 eb 19 	sts	0x19EB, r20	; 0x8019eb <__brkval>
    5812:	81 93       	st	Z+, r24
    5814:	91 93       	st	Z+, r25
    5816:	02 c0       	rjmp	.+4      	; 0x581c <malloc+0x124>
    5818:	e0 e0       	ldi	r30, 0x00	; 0
    581a:	f0 e0       	ldi	r31, 0x00	; 0
    581c:	cf 01       	movw	r24, r30
    581e:	df 91       	pop	r29
    5820:	cf 91       	pop	r28
    5822:	1f 91       	pop	r17
    5824:	0f 91       	pop	r16
    5826:	08 95       	ret

00005828 <free>:
    5828:	cf 93       	push	r28
    582a:	df 93       	push	r29
    582c:	00 97       	sbiw	r24, 0x00	; 0
    582e:	09 f4       	brne	.+2      	; 0x5832 <free+0xa>
    5830:	81 c0       	rjmp	.+258    	; 0x5934 <free+0x10c>
    5832:	fc 01       	movw	r30, r24
    5834:	32 97       	sbiw	r30, 0x02	; 2
    5836:	13 82       	std	Z+3, r1	; 0x03
    5838:	12 82       	std	Z+2, r1	; 0x02
    583a:	a0 91 ed 19 	lds	r26, 0x19ED	; 0x8019ed <__flp>
    583e:	b0 91 ee 19 	lds	r27, 0x19EE	; 0x8019ee <__flp+0x1>
    5842:	10 97       	sbiw	r26, 0x00	; 0
    5844:	81 f4       	brne	.+32     	; 0x5866 <free+0x3e>
    5846:	20 81       	ld	r18, Z
    5848:	31 81       	ldd	r19, Z+1	; 0x01
    584a:	82 0f       	add	r24, r18
    584c:	93 1f       	adc	r25, r19
    584e:	20 91 eb 19 	lds	r18, 0x19EB	; 0x8019eb <__brkval>
    5852:	30 91 ec 19 	lds	r19, 0x19EC	; 0x8019ec <__brkval+0x1>
    5856:	28 17       	cp	r18, r24
    5858:	39 07       	cpc	r19, r25
    585a:	51 f5       	brne	.+84     	; 0x58b0 <free+0x88>
    585c:	f0 93 ec 19 	sts	0x19EC, r31	; 0x8019ec <__brkval+0x1>
    5860:	e0 93 eb 19 	sts	0x19EB, r30	; 0x8019eb <__brkval>
    5864:	67 c0       	rjmp	.+206    	; 0x5934 <free+0x10c>
    5866:	ed 01       	movw	r28, r26
    5868:	20 e0       	ldi	r18, 0x00	; 0
    586a:	30 e0       	ldi	r19, 0x00	; 0
    586c:	ce 17       	cp	r28, r30
    586e:	df 07       	cpc	r29, r31
    5870:	40 f4       	brcc	.+16     	; 0x5882 <free+0x5a>
    5872:	4a 81       	ldd	r20, Y+2	; 0x02
    5874:	5b 81       	ldd	r21, Y+3	; 0x03
    5876:	9e 01       	movw	r18, r28
    5878:	41 15       	cp	r20, r1
    587a:	51 05       	cpc	r21, r1
    587c:	f1 f0       	breq	.+60     	; 0x58ba <free+0x92>
    587e:	ea 01       	movw	r28, r20
    5880:	f5 cf       	rjmp	.-22     	; 0x586c <free+0x44>
    5882:	d3 83       	std	Z+3, r29	; 0x03
    5884:	c2 83       	std	Z+2, r28	; 0x02
    5886:	40 81       	ld	r20, Z
    5888:	51 81       	ldd	r21, Z+1	; 0x01
    588a:	84 0f       	add	r24, r20
    588c:	95 1f       	adc	r25, r21
    588e:	c8 17       	cp	r28, r24
    5890:	d9 07       	cpc	r29, r25
    5892:	59 f4       	brne	.+22     	; 0x58aa <free+0x82>
    5894:	88 81       	ld	r24, Y
    5896:	99 81       	ldd	r25, Y+1	; 0x01
    5898:	84 0f       	add	r24, r20
    589a:	95 1f       	adc	r25, r21
    589c:	02 96       	adiw	r24, 0x02	; 2
    589e:	91 83       	std	Z+1, r25	; 0x01
    58a0:	80 83       	st	Z, r24
    58a2:	8a 81       	ldd	r24, Y+2	; 0x02
    58a4:	9b 81       	ldd	r25, Y+3	; 0x03
    58a6:	93 83       	std	Z+3, r25	; 0x03
    58a8:	82 83       	std	Z+2, r24	; 0x02
    58aa:	21 15       	cp	r18, r1
    58ac:	31 05       	cpc	r19, r1
    58ae:	29 f4       	brne	.+10     	; 0x58ba <free+0x92>
    58b0:	f0 93 ee 19 	sts	0x19EE, r31	; 0x8019ee <__flp+0x1>
    58b4:	e0 93 ed 19 	sts	0x19ED, r30	; 0x8019ed <__flp>
    58b8:	3d c0       	rjmp	.+122    	; 0x5934 <free+0x10c>
    58ba:	e9 01       	movw	r28, r18
    58bc:	fb 83       	std	Y+3, r31	; 0x03
    58be:	ea 83       	std	Y+2, r30	; 0x02
    58c0:	49 91       	ld	r20, Y+
    58c2:	59 91       	ld	r21, Y+
    58c4:	c4 0f       	add	r28, r20
    58c6:	d5 1f       	adc	r29, r21
    58c8:	ec 17       	cp	r30, r28
    58ca:	fd 07       	cpc	r31, r29
    58cc:	61 f4       	brne	.+24     	; 0x58e6 <free+0xbe>
    58ce:	80 81       	ld	r24, Z
    58d0:	91 81       	ldd	r25, Z+1	; 0x01
    58d2:	84 0f       	add	r24, r20
    58d4:	95 1f       	adc	r25, r21
    58d6:	02 96       	adiw	r24, 0x02	; 2
    58d8:	e9 01       	movw	r28, r18
    58da:	99 83       	std	Y+1, r25	; 0x01
    58dc:	88 83       	st	Y, r24
    58de:	82 81       	ldd	r24, Z+2	; 0x02
    58e0:	93 81       	ldd	r25, Z+3	; 0x03
    58e2:	9b 83       	std	Y+3, r25	; 0x03
    58e4:	8a 83       	std	Y+2, r24	; 0x02
    58e6:	e0 e0       	ldi	r30, 0x00	; 0
    58e8:	f0 e0       	ldi	r31, 0x00	; 0
    58ea:	12 96       	adiw	r26, 0x02	; 2
    58ec:	8d 91       	ld	r24, X+
    58ee:	9c 91       	ld	r25, X
    58f0:	13 97       	sbiw	r26, 0x03	; 3
    58f2:	00 97       	sbiw	r24, 0x00	; 0
    58f4:	19 f0       	breq	.+6      	; 0x58fc <free+0xd4>
    58f6:	fd 01       	movw	r30, r26
    58f8:	dc 01       	movw	r26, r24
    58fa:	f7 cf       	rjmp	.-18     	; 0x58ea <free+0xc2>
    58fc:	8d 91       	ld	r24, X+
    58fe:	9c 91       	ld	r25, X
    5900:	11 97       	sbiw	r26, 0x01	; 1
    5902:	9d 01       	movw	r18, r26
    5904:	2e 5f       	subi	r18, 0xFE	; 254
    5906:	3f 4f       	sbci	r19, 0xFF	; 255
    5908:	82 0f       	add	r24, r18
    590a:	93 1f       	adc	r25, r19
    590c:	20 91 eb 19 	lds	r18, 0x19EB	; 0x8019eb <__brkval>
    5910:	30 91 ec 19 	lds	r19, 0x19EC	; 0x8019ec <__brkval+0x1>
    5914:	28 17       	cp	r18, r24
    5916:	39 07       	cpc	r19, r25
    5918:	69 f4       	brne	.+26     	; 0x5934 <free+0x10c>
    591a:	30 97       	sbiw	r30, 0x00	; 0
    591c:	29 f4       	brne	.+10     	; 0x5928 <free+0x100>
    591e:	10 92 ee 19 	sts	0x19EE, r1	; 0x8019ee <__flp+0x1>
    5922:	10 92 ed 19 	sts	0x19ED, r1	; 0x8019ed <__flp>
    5926:	02 c0       	rjmp	.+4      	; 0x592c <free+0x104>
    5928:	13 82       	std	Z+3, r1	; 0x03
    592a:	12 82       	std	Z+2, r1	; 0x02
    592c:	b0 93 ec 19 	sts	0x19EC, r27	; 0x8019ec <__brkval+0x1>
    5930:	a0 93 eb 19 	sts	0x19EB, r26	; 0x8019eb <__brkval>
    5934:	df 91       	pop	r29
    5936:	cf 91       	pop	r28
    5938:	08 95       	ret

0000593a <abort>:
    593a:	81 e0       	ldi	r24, 0x01	; 1
    593c:	90 e0       	ldi	r25, 0x00	; 0
    593e:	f8 94       	cli
    5940:	7d c3       	rjmp	.+1786   	; 0x603c <_exit>

00005942 <memcpy>:
    5942:	fb 01       	movw	r30, r22
    5944:	dc 01       	movw	r26, r24
    5946:	02 c0       	rjmp	.+4      	; 0x594c <memcpy+0xa>
    5948:	01 90       	ld	r0, Z+
    594a:	0d 92       	st	X+, r0
    594c:	41 50       	subi	r20, 0x01	; 1
    594e:	50 40       	sbci	r21, 0x00	; 0
    5950:	d8 f7       	brcc	.-10     	; 0x5948 <memcpy+0x6>
    5952:	08 95       	ret

00005954 <memset>:
    5954:	dc 01       	movw	r26, r24
    5956:	01 c0       	rjmp	.+2      	; 0x595a <memset+0x6>
    5958:	6d 93       	st	X+, r22
    595a:	41 50       	subi	r20, 0x01	; 1
    595c:	50 40       	sbci	r21, 0x00	; 0
    595e:	e0 f7       	brcc	.-8      	; 0x5958 <memset+0x4>
    5960:	08 95       	ret

00005962 <strcasestr>:
    5962:	fb 01       	movw	r30, r22
    5964:	51 91       	ld	r21, Z+
    5966:	55 23       	and	r21, r21
    5968:	b1 f0       	breq	.+44     	; 0x5996 <strcasestr+0x34>
    596a:	bf 01       	movw	r22, r30
    596c:	dc 01       	movw	r26, r24
    596e:	05 2e       	mov	r0, r21
    5970:	4d 91       	ld	r20, X+
    5972:	44 23       	and	r20, r20
    5974:	69 f0       	breq	.+26     	; 0x5990 <strcasestr+0x2e>
    5976:	10 d0       	rcall	.+32     	; 0x5998 <strcasestr+0x36>
    5978:	d9 f7       	brne	.-10     	; 0x5970 <strcasestr+0xe>
    597a:	cd 01       	movw	r24, r26
    597c:	01 90       	ld	r0, Z+
    597e:	00 20       	and	r0, r0
    5980:	49 f0       	breq	.+18     	; 0x5994 <strcasestr+0x32>
    5982:	4d 91       	ld	r20, X+
    5984:	41 11       	cpse	r20, r1
    5986:	08 d0       	rcall	.+16     	; 0x5998 <strcasestr+0x36>
    5988:	c9 f3       	breq	.-14     	; 0x597c <strcasestr+0x1a>
    598a:	fb 01       	movw	r30, r22
    598c:	41 11       	cpse	r20, r1
    598e:	ee cf       	rjmp	.-36     	; 0x596c <strcasestr+0xa>
    5990:	81 e0       	ldi	r24, 0x01	; 1
    5992:	90 e0       	ldi	r25, 0x00	; 0
    5994:	01 97       	sbiw	r24, 0x01	; 1
    5996:	08 95       	ret
    5998:	40 25       	eor	r20, r0
    599a:	39 f0       	breq	.+14     	; 0x59aa <strcasestr+0x48>
    599c:	40 32       	cpi	r20, 0x20	; 32
    599e:	29 f4       	brne	.+10     	; 0x59aa <strcasestr+0x48>
    59a0:	40 29       	or	r20, r0
    59a2:	4b 57       	subi	r20, 0x7B	; 123
    59a4:	46 5e       	subi	r20, 0xE6	; 230
    59a6:	08 f0       	brcs	.+2      	; 0x59aa <strcasestr+0x48>
    59a8:	18 94       	sez
    59aa:	08 95       	ret

000059ac <strcat>:
    59ac:	fb 01       	movw	r30, r22
    59ae:	dc 01       	movw	r26, r24
    59b0:	0d 90       	ld	r0, X+
    59b2:	00 20       	and	r0, r0
    59b4:	e9 f7       	brne	.-6      	; 0x59b0 <strcat+0x4>
    59b6:	11 97       	sbiw	r26, 0x01	; 1
    59b8:	01 90       	ld	r0, Z+
    59ba:	0d 92       	st	X+, r0
    59bc:	00 20       	and	r0, r0
    59be:	e1 f7       	brne	.-8      	; 0x59b8 <strcat+0xc>
    59c0:	08 95       	ret

000059c2 <strcpy>:
    59c2:	fb 01       	movw	r30, r22
    59c4:	dc 01       	movw	r26, r24
    59c6:	01 90       	ld	r0, Z+
    59c8:	0d 92       	st	X+, r0
    59ca:	00 20       	and	r0, r0
    59cc:	e1 f7       	brne	.-8      	; 0x59c6 <strcpy+0x4>
    59ce:	08 95       	ret

000059d0 <strncasecmp>:
    59d0:	fb 01       	movw	r30, r22
    59d2:	dc 01       	movw	r26, r24
    59d4:	41 50       	subi	r20, 0x01	; 1
    59d6:	50 40       	sbci	r21, 0x00	; 0
    59d8:	88 f0       	brcs	.+34     	; 0x59fc <strncasecmp+0x2c>
    59da:	8d 91       	ld	r24, X+
    59dc:	81 34       	cpi	r24, 0x41	; 65
    59de:	1c f0       	brlt	.+6      	; 0x59e6 <strncasecmp+0x16>
    59e0:	8b 35       	cpi	r24, 0x5B	; 91
    59e2:	0c f4       	brge	.+2      	; 0x59e6 <strncasecmp+0x16>
    59e4:	80 5e       	subi	r24, 0xE0	; 224
    59e6:	61 91       	ld	r22, Z+
    59e8:	61 34       	cpi	r22, 0x41	; 65
    59ea:	1c f0       	brlt	.+6      	; 0x59f2 <strncasecmp+0x22>
    59ec:	6b 35       	cpi	r22, 0x5B	; 91
    59ee:	0c f4       	brge	.+2      	; 0x59f2 <strncasecmp+0x22>
    59f0:	60 5e       	subi	r22, 0xE0	; 224
    59f2:	86 1b       	sub	r24, r22
    59f4:	61 11       	cpse	r22, r1
    59f6:	71 f3       	breq	.-36     	; 0x59d4 <strncasecmp+0x4>
    59f8:	99 0b       	sbc	r25, r25
    59fa:	08 95       	ret
    59fc:	88 1b       	sub	r24, r24
    59fe:	fc cf       	rjmp	.-8      	; 0x59f8 <strncasecmp+0x28>

00005a00 <printf>:
    5a00:	cf 93       	push	r28
    5a02:	df 93       	push	r29
    5a04:	cd b7       	in	r28, 0x3d	; 61
    5a06:	de b7       	in	r29, 0x3e	; 62
    5a08:	ae 01       	movw	r20, r28
    5a0a:	4a 5f       	subi	r20, 0xFA	; 250
    5a0c:	5f 4f       	sbci	r21, 0xFF	; 255
    5a0e:	fa 01       	movw	r30, r20
    5a10:	61 91       	ld	r22, Z+
    5a12:	71 91       	ld	r23, Z+
    5a14:	af 01       	movw	r20, r30
    5a16:	80 91 f1 19 	lds	r24, 0x19F1	; 0x8019f1 <__iob+0x2>
    5a1a:	90 91 f2 19 	lds	r25, 0x19F2	; 0x8019f2 <__iob+0x3>
    5a1e:	61 d0       	rcall	.+194    	; 0x5ae2 <vfprintf>
    5a20:	df 91       	pop	r29
    5a22:	cf 91       	pop	r28
    5a24:	08 95       	ret

00005a26 <puts>:
    5a26:	0f 93       	push	r16
    5a28:	1f 93       	push	r17
    5a2a:	cf 93       	push	r28
    5a2c:	df 93       	push	r29
    5a2e:	e0 91 f1 19 	lds	r30, 0x19F1	; 0x8019f1 <__iob+0x2>
    5a32:	f0 91 f2 19 	lds	r31, 0x19F2	; 0x8019f2 <__iob+0x3>
    5a36:	23 81       	ldd	r18, Z+3	; 0x03
    5a38:	21 ff       	sbrs	r18, 1
    5a3a:	1b c0       	rjmp	.+54     	; 0x5a72 <puts+0x4c>
    5a3c:	8c 01       	movw	r16, r24
    5a3e:	d0 e0       	ldi	r29, 0x00	; 0
    5a40:	c0 e0       	ldi	r28, 0x00	; 0
    5a42:	f8 01       	movw	r30, r16
    5a44:	81 91       	ld	r24, Z+
    5a46:	8f 01       	movw	r16, r30
    5a48:	60 91 f1 19 	lds	r22, 0x19F1	; 0x8019f1 <__iob+0x2>
    5a4c:	70 91 f2 19 	lds	r23, 0x19F2	; 0x8019f2 <__iob+0x3>
    5a50:	db 01       	movw	r26, r22
    5a52:	18 96       	adiw	r26, 0x08	; 8
    5a54:	ed 91       	ld	r30, X+
    5a56:	fc 91       	ld	r31, X
    5a58:	19 97       	sbiw	r26, 0x09	; 9
    5a5a:	88 23       	and	r24, r24
    5a5c:	31 f0       	breq	.+12     	; 0x5a6a <puts+0x44>
    5a5e:	19 95       	eicall
    5a60:	89 2b       	or	r24, r25
    5a62:	79 f3       	breq	.-34     	; 0x5a42 <puts+0x1c>
    5a64:	df ef       	ldi	r29, 0xFF	; 255
    5a66:	cf ef       	ldi	r28, 0xFF	; 255
    5a68:	ec cf       	rjmp	.-40     	; 0x5a42 <puts+0x1c>
    5a6a:	8a e0       	ldi	r24, 0x0A	; 10
    5a6c:	19 95       	eicall
    5a6e:	89 2b       	or	r24, r25
    5a70:	19 f0       	breq	.+6      	; 0x5a78 <puts+0x52>
    5a72:	8f ef       	ldi	r24, 0xFF	; 255
    5a74:	9f ef       	ldi	r25, 0xFF	; 255
    5a76:	02 c0       	rjmp	.+4      	; 0x5a7c <puts+0x56>
    5a78:	8d 2f       	mov	r24, r29
    5a7a:	9c 2f       	mov	r25, r28
    5a7c:	df 91       	pop	r29
    5a7e:	cf 91       	pop	r28
    5a80:	1f 91       	pop	r17
    5a82:	0f 91       	pop	r16
    5a84:	08 95       	ret

00005a86 <sprintf>:
    5a86:	0f 93       	push	r16
    5a88:	1f 93       	push	r17
    5a8a:	cf 93       	push	r28
    5a8c:	df 93       	push	r29
    5a8e:	cd b7       	in	r28, 0x3d	; 61
    5a90:	de b7       	in	r29, 0x3e	; 62
    5a92:	2e 97       	sbiw	r28, 0x0e	; 14
    5a94:	0f b6       	in	r0, 0x3f	; 63
    5a96:	f8 94       	cli
    5a98:	de bf       	out	0x3e, r29	; 62
    5a9a:	0f be       	out	0x3f, r0	; 63
    5a9c:	cd bf       	out	0x3d, r28	; 61
    5a9e:	0e 89       	ldd	r16, Y+22	; 0x16
    5aa0:	1f 89       	ldd	r17, Y+23	; 0x17
    5aa2:	86 e0       	ldi	r24, 0x06	; 6
    5aa4:	8c 83       	std	Y+4, r24	; 0x04
    5aa6:	1a 83       	std	Y+2, r17	; 0x02
    5aa8:	09 83       	std	Y+1, r16	; 0x01
    5aaa:	8f ef       	ldi	r24, 0xFF	; 255
    5aac:	9f e7       	ldi	r25, 0x7F	; 127
    5aae:	9e 83       	std	Y+6, r25	; 0x06
    5ab0:	8d 83       	std	Y+5, r24	; 0x05
    5ab2:	ae 01       	movw	r20, r28
    5ab4:	46 5e       	subi	r20, 0xE6	; 230
    5ab6:	5f 4f       	sbci	r21, 0xFF	; 255
    5ab8:	68 8d       	ldd	r22, Y+24	; 0x18
    5aba:	79 8d       	ldd	r23, Y+25	; 0x19
    5abc:	ce 01       	movw	r24, r28
    5abe:	01 96       	adiw	r24, 0x01	; 1
    5ac0:	10 d0       	rcall	.+32     	; 0x5ae2 <vfprintf>
    5ac2:	ef 81       	ldd	r30, Y+7	; 0x07
    5ac4:	f8 85       	ldd	r31, Y+8	; 0x08
    5ac6:	e0 0f       	add	r30, r16
    5ac8:	f1 1f       	adc	r31, r17
    5aca:	10 82       	st	Z, r1
    5acc:	2e 96       	adiw	r28, 0x0e	; 14
    5ace:	0f b6       	in	r0, 0x3f	; 63
    5ad0:	f8 94       	cli
    5ad2:	de bf       	out	0x3e, r29	; 62
    5ad4:	0f be       	out	0x3f, r0	; 63
    5ad6:	cd bf       	out	0x3d, r28	; 61
    5ad8:	df 91       	pop	r29
    5ada:	cf 91       	pop	r28
    5adc:	1f 91       	pop	r17
    5ade:	0f 91       	pop	r16
    5ae0:	08 95       	ret

00005ae2 <vfprintf>:
    5ae2:	2f 92       	push	r2
    5ae4:	3f 92       	push	r3
    5ae6:	4f 92       	push	r4
    5ae8:	5f 92       	push	r5
    5aea:	6f 92       	push	r6
    5aec:	7f 92       	push	r7
    5aee:	8f 92       	push	r8
    5af0:	9f 92       	push	r9
    5af2:	af 92       	push	r10
    5af4:	bf 92       	push	r11
    5af6:	cf 92       	push	r12
    5af8:	df 92       	push	r13
    5afa:	ef 92       	push	r14
    5afc:	ff 92       	push	r15
    5afe:	0f 93       	push	r16
    5b00:	1f 93       	push	r17
    5b02:	cf 93       	push	r28
    5b04:	df 93       	push	r29
    5b06:	cd b7       	in	r28, 0x3d	; 61
    5b08:	de b7       	in	r29, 0x3e	; 62
    5b0a:	2b 97       	sbiw	r28, 0x0b	; 11
    5b0c:	0f b6       	in	r0, 0x3f	; 63
    5b0e:	f8 94       	cli
    5b10:	de bf       	out	0x3e, r29	; 62
    5b12:	0f be       	out	0x3f, r0	; 63
    5b14:	cd bf       	out	0x3d, r28	; 61
    5b16:	6c 01       	movw	r12, r24
    5b18:	7b 01       	movw	r14, r22
    5b1a:	8a 01       	movw	r16, r20
    5b1c:	fc 01       	movw	r30, r24
    5b1e:	17 82       	std	Z+7, r1	; 0x07
    5b20:	16 82       	std	Z+6, r1	; 0x06
    5b22:	83 81       	ldd	r24, Z+3	; 0x03
    5b24:	81 ff       	sbrs	r24, 1
    5b26:	bf c1       	rjmp	.+894    	; 0x5ea6 <vfprintf+0x3c4>
    5b28:	ce 01       	movw	r24, r28
    5b2a:	01 96       	adiw	r24, 0x01	; 1
    5b2c:	3c 01       	movw	r6, r24
    5b2e:	f6 01       	movw	r30, r12
    5b30:	93 81       	ldd	r25, Z+3	; 0x03
    5b32:	f7 01       	movw	r30, r14
    5b34:	93 fd       	sbrc	r25, 3
    5b36:	85 91       	lpm	r24, Z+
    5b38:	93 ff       	sbrs	r25, 3
    5b3a:	81 91       	ld	r24, Z+
    5b3c:	7f 01       	movw	r14, r30
    5b3e:	88 23       	and	r24, r24
    5b40:	09 f4       	brne	.+2      	; 0x5b44 <vfprintf+0x62>
    5b42:	ad c1       	rjmp	.+858    	; 0x5e9e <vfprintf+0x3bc>
    5b44:	85 32       	cpi	r24, 0x25	; 37
    5b46:	39 f4       	brne	.+14     	; 0x5b56 <vfprintf+0x74>
    5b48:	93 fd       	sbrc	r25, 3
    5b4a:	85 91       	lpm	r24, Z+
    5b4c:	93 ff       	sbrs	r25, 3
    5b4e:	81 91       	ld	r24, Z+
    5b50:	7f 01       	movw	r14, r30
    5b52:	85 32       	cpi	r24, 0x25	; 37
    5b54:	21 f4       	brne	.+8      	; 0x5b5e <vfprintf+0x7c>
    5b56:	b6 01       	movw	r22, r12
    5b58:	90 e0       	ldi	r25, 0x00	; 0
    5b5a:	d6 d1       	rcall	.+940    	; 0x5f08 <fputc>
    5b5c:	e8 cf       	rjmp	.-48     	; 0x5b2e <vfprintf+0x4c>
    5b5e:	91 2c       	mov	r9, r1
    5b60:	21 2c       	mov	r2, r1
    5b62:	31 2c       	mov	r3, r1
    5b64:	ff e1       	ldi	r31, 0x1F	; 31
    5b66:	f3 15       	cp	r31, r3
    5b68:	d8 f0       	brcs	.+54     	; 0x5ba0 <vfprintf+0xbe>
    5b6a:	8b 32       	cpi	r24, 0x2B	; 43
    5b6c:	79 f0       	breq	.+30     	; 0x5b8c <vfprintf+0xaa>
    5b6e:	38 f4       	brcc	.+14     	; 0x5b7e <vfprintf+0x9c>
    5b70:	80 32       	cpi	r24, 0x20	; 32
    5b72:	79 f0       	breq	.+30     	; 0x5b92 <vfprintf+0xb0>
    5b74:	83 32       	cpi	r24, 0x23	; 35
    5b76:	a1 f4       	brne	.+40     	; 0x5ba0 <vfprintf+0xbe>
    5b78:	23 2d       	mov	r18, r3
    5b7a:	20 61       	ori	r18, 0x10	; 16
    5b7c:	1d c0       	rjmp	.+58     	; 0x5bb8 <vfprintf+0xd6>
    5b7e:	8d 32       	cpi	r24, 0x2D	; 45
    5b80:	61 f0       	breq	.+24     	; 0x5b9a <vfprintf+0xb8>
    5b82:	80 33       	cpi	r24, 0x30	; 48
    5b84:	69 f4       	brne	.+26     	; 0x5ba0 <vfprintf+0xbe>
    5b86:	23 2d       	mov	r18, r3
    5b88:	21 60       	ori	r18, 0x01	; 1
    5b8a:	16 c0       	rjmp	.+44     	; 0x5bb8 <vfprintf+0xd6>
    5b8c:	83 2d       	mov	r24, r3
    5b8e:	82 60       	ori	r24, 0x02	; 2
    5b90:	38 2e       	mov	r3, r24
    5b92:	e3 2d       	mov	r30, r3
    5b94:	e4 60       	ori	r30, 0x04	; 4
    5b96:	3e 2e       	mov	r3, r30
    5b98:	2a c0       	rjmp	.+84     	; 0x5bee <vfprintf+0x10c>
    5b9a:	f3 2d       	mov	r31, r3
    5b9c:	f8 60       	ori	r31, 0x08	; 8
    5b9e:	1d c0       	rjmp	.+58     	; 0x5bda <vfprintf+0xf8>
    5ba0:	37 fc       	sbrc	r3, 7
    5ba2:	2d c0       	rjmp	.+90     	; 0x5bfe <vfprintf+0x11c>
    5ba4:	20 ed       	ldi	r18, 0xD0	; 208
    5ba6:	28 0f       	add	r18, r24
    5ba8:	2a 30       	cpi	r18, 0x0A	; 10
    5baa:	40 f0       	brcs	.+16     	; 0x5bbc <vfprintf+0xda>
    5bac:	8e 32       	cpi	r24, 0x2E	; 46
    5bae:	b9 f4       	brne	.+46     	; 0x5bde <vfprintf+0xfc>
    5bb0:	36 fc       	sbrc	r3, 6
    5bb2:	75 c1       	rjmp	.+746    	; 0x5e9e <vfprintf+0x3bc>
    5bb4:	23 2d       	mov	r18, r3
    5bb6:	20 64       	ori	r18, 0x40	; 64
    5bb8:	32 2e       	mov	r3, r18
    5bba:	19 c0       	rjmp	.+50     	; 0x5bee <vfprintf+0x10c>
    5bbc:	36 fe       	sbrs	r3, 6
    5bbe:	06 c0       	rjmp	.+12     	; 0x5bcc <vfprintf+0xea>
    5bc0:	8a e0       	ldi	r24, 0x0A	; 10
    5bc2:	98 9e       	mul	r9, r24
    5bc4:	20 0d       	add	r18, r0
    5bc6:	11 24       	eor	r1, r1
    5bc8:	92 2e       	mov	r9, r18
    5bca:	11 c0       	rjmp	.+34     	; 0x5bee <vfprintf+0x10c>
    5bcc:	ea e0       	ldi	r30, 0x0A	; 10
    5bce:	2e 9e       	mul	r2, r30
    5bd0:	20 0d       	add	r18, r0
    5bd2:	11 24       	eor	r1, r1
    5bd4:	22 2e       	mov	r2, r18
    5bd6:	f3 2d       	mov	r31, r3
    5bd8:	f0 62       	ori	r31, 0x20	; 32
    5bda:	3f 2e       	mov	r3, r31
    5bdc:	08 c0       	rjmp	.+16     	; 0x5bee <vfprintf+0x10c>
    5bde:	8c 36       	cpi	r24, 0x6C	; 108
    5be0:	21 f4       	brne	.+8      	; 0x5bea <vfprintf+0x108>
    5be2:	83 2d       	mov	r24, r3
    5be4:	80 68       	ori	r24, 0x80	; 128
    5be6:	38 2e       	mov	r3, r24
    5be8:	02 c0       	rjmp	.+4      	; 0x5bee <vfprintf+0x10c>
    5bea:	88 36       	cpi	r24, 0x68	; 104
    5bec:	41 f4       	brne	.+16     	; 0x5bfe <vfprintf+0x11c>
    5bee:	f7 01       	movw	r30, r14
    5bf0:	93 fd       	sbrc	r25, 3
    5bf2:	85 91       	lpm	r24, Z+
    5bf4:	93 ff       	sbrs	r25, 3
    5bf6:	81 91       	ld	r24, Z+
    5bf8:	7f 01       	movw	r14, r30
    5bfa:	81 11       	cpse	r24, r1
    5bfc:	b3 cf       	rjmp	.-154    	; 0x5b64 <vfprintf+0x82>
    5bfe:	98 2f       	mov	r25, r24
    5c00:	9f 7d       	andi	r25, 0xDF	; 223
    5c02:	95 54       	subi	r25, 0x45	; 69
    5c04:	93 30       	cpi	r25, 0x03	; 3
    5c06:	28 f4       	brcc	.+10     	; 0x5c12 <vfprintf+0x130>
    5c08:	0c 5f       	subi	r16, 0xFC	; 252
    5c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    5c0c:	9f e3       	ldi	r25, 0x3F	; 63
    5c0e:	99 83       	std	Y+1, r25	; 0x01
    5c10:	0d c0       	rjmp	.+26     	; 0x5c2c <vfprintf+0x14a>
    5c12:	83 36       	cpi	r24, 0x63	; 99
    5c14:	31 f0       	breq	.+12     	; 0x5c22 <vfprintf+0x140>
    5c16:	83 37       	cpi	r24, 0x73	; 115
    5c18:	71 f0       	breq	.+28     	; 0x5c36 <vfprintf+0x154>
    5c1a:	83 35       	cpi	r24, 0x53	; 83
    5c1c:	09 f0       	breq	.+2      	; 0x5c20 <vfprintf+0x13e>
    5c1e:	55 c0       	rjmp	.+170    	; 0x5cca <vfprintf+0x1e8>
    5c20:	20 c0       	rjmp	.+64     	; 0x5c62 <vfprintf+0x180>
    5c22:	f8 01       	movw	r30, r16
    5c24:	80 81       	ld	r24, Z
    5c26:	89 83       	std	Y+1, r24	; 0x01
    5c28:	0e 5f       	subi	r16, 0xFE	; 254
    5c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    5c2c:	88 24       	eor	r8, r8
    5c2e:	83 94       	inc	r8
    5c30:	91 2c       	mov	r9, r1
    5c32:	53 01       	movw	r10, r6
    5c34:	12 c0       	rjmp	.+36     	; 0x5c5a <vfprintf+0x178>
    5c36:	28 01       	movw	r4, r16
    5c38:	f2 e0       	ldi	r31, 0x02	; 2
    5c3a:	4f 0e       	add	r4, r31
    5c3c:	51 1c       	adc	r5, r1
    5c3e:	f8 01       	movw	r30, r16
    5c40:	a0 80       	ld	r10, Z
    5c42:	b1 80       	ldd	r11, Z+1	; 0x01
    5c44:	36 fe       	sbrs	r3, 6
    5c46:	03 c0       	rjmp	.+6      	; 0x5c4e <vfprintf+0x16c>
    5c48:	69 2d       	mov	r22, r9
    5c4a:	70 e0       	ldi	r23, 0x00	; 0
    5c4c:	02 c0       	rjmp	.+4      	; 0x5c52 <vfprintf+0x170>
    5c4e:	6f ef       	ldi	r22, 0xFF	; 255
    5c50:	7f ef       	ldi	r23, 0xFF	; 255
    5c52:	c5 01       	movw	r24, r10
    5c54:	4e d1       	rcall	.+668    	; 0x5ef2 <strnlen>
    5c56:	4c 01       	movw	r8, r24
    5c58:	82 01       	movw	r16, r4
    5c5a:	f3 2d       	mov	r31, r3
    5c5c:	ff 77       	andi	r31, 0x7F	; 127
    5c5e:	3f 2e       	mov	r3, r31
    5c60:	15 c0       	rjmp	.+42     	; 0x5c8c <vfprintf+0x1aa>
    5c62:	28 01       	movw	r4, r16
    5c64:	22 e0       	ldi	r18, 0x02	; 2
    5c66:	42 0e       	add	r4, r18
    5c68:	51 1c       	adc	r5, r1
    5c6a:	f8 01       	movw	r30, r16
    5c6c:	a0 80       	ld	r10, Z
    5c6e:	b1 80       	ldd	r11, Z+1	; 0x01
    5c70:	36 fe       	sbrs	r3, 6
    5c72:	03 c0       	rjmp	.+6      	; 0x5c7a <vfprintf+0x198>
    5c74:	69 2d       	mov	r22, r9
    5c76:	70 e0       	ldi	r23, 0x00	; 0
    5c78:	02 c0       	rjmp	.+4      	; 0x5c7e <vfprintf+0x19c>
    5c7a:	6f ef       	ldi	r22, 0xFF	; 255
    5c7c:	7f ef       	ldi	r23, 0xFF	; 255
    5c7e:	c5 01       	movw	r24, r10
    5c80:	2d d1       	rcall	.+602    	; 0x5edc <strnlen_P>
    5c82:	4c 01       	movw	r8, r24
    5c84:	f3 2d       	mov	r31, r3
    5c86:	f0 68       	ori	r31, 0x80	; 128
    5c88:	3f 2e       	mov	r3, r31
    5c8a:	82 01       	movw	r16, r4
    5c8c:	33 fc       	sbrc	r3, 3
    5c8e:	19 c0       	rjmp	.+50     	; 0x5cc2 <vfprintf+0x1e0>
    5c90:	82 2d       	mov	r24, r2
    5c92:	90 e0       	ldi	r25, 0x00	; 0
    5c94:	88 16       	cp	r8, r24
    5c96:	99 06       	cpc	r9, r25
    5c98:	a0 f4       	brcc	.+40     	; 0x5cc2 <vfprintf+0x1e0>
    5c9a:	b6 01       	movw	r22, r12
    5c9c:	80 e2       	ldi	r24, 0x20	; 32
    5c9e:	90 e0       	ldi	r25, 0x00	; 0
    5ca0:	33 d1       	rcall	.+614    	; 0x5f08 <fputc>
    5ca2:	2a 94       	dec	r2
    5ca4:	f5 cf       	rjmp	.-22     	; 0x5c90 <vfprintf+0x1ae>
    5ca6:	f5 01       	movw	r30, r10
    5ca8:	37 fc       	sbrc	r3, 7
    5caa:	85 91       	lpm	r24, Z+
    5cac:	37 fe       	sbrs	r3, 7
    5cae:	81 91       	ld	r24, Z+
    5cb0:	5f 01       	movw	r10, r30
    5cb2:	b6 01       	movw	r22, r12
    5cb4:	90 e0       	ldi	r25, 0x00	; 0
    5cb6:	28 d1       	rcall	.+592    	; 0x5f08 <fputc>
    5cb8:	21 10       	cpse	r2, r1
    5cba:	2a 94       	dec	r2
    5cbc:	21 e0       	ldi	r18, 0x01	; 1
    5cbe:	82 1a       	sub	r8, r18
    5cc0:	91 08       	sbc	r9, r1
    5cc2:	81 14       	cp	r8, r1
    5cc4:	91 04       	cpc	r9, r1
    5cc6:	79 f7       	brne	.-34     	; 0x5ca6 <vfprintf+0x1c4>
    5cc8:	e1 c0       	rjmp	.+450    	; 0x5e8c <vfprintf+0x3aa>
    5cca:	84 36       	cpi	r24, 0x64	; 100
    5ccc:	11 f0       	breq	.+4      	; 0x5cd2 <vfprintf+0x1f0>
    5cce:	89 36       	cpi	r24, 0x69	; 105
    5cd0:	39 f5       	brne	.+78     	; 0x5d20 <vfprintf+0x23e>
    5cd2:	f8 01       	movw	r30, r16
    5cd4:	37 fe       	sbrs	r3, 7
    5cd6:	07 c0       	rjmp	.+14     	; 0x5ce6 <vfprintf+0x204>
    5cd8:	60 81       	ld	r22, Z
    5cda:	71 81       	ldd	r23, Z+1	; 0x01
    5cdc:	82 81       	ldd	r24, Z+2	; 0x02
    5cde:	93 81       	ldd	r25, Z+3	; 0x03
    5ce0:	0c 5f       	subi	r16, 0xFC	; 252
    5ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ce4:	08 c0       	rjmp	.+16     	; 0x5cf6 <vfprintf+0x214>
    5ce6:	60 81       	ld	r22, Z
    5ce8:	71 81       	ldd	r23, Z+1	; 0x01
    5cea:	07 2e       	mov	r0, r23
    5cec:	00 0c       	add	r0, r0
    5cee:	88 0b       	sbc	r24, r24
    5cf0:	99 0b       	sbc	r25, r25
    5cf2:	0e 5f       	subi	r16, 0xFE	; 254
    5cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    5cf6:	f3 2d       	mov	r31, r3
    5cf8:	ff 76       	andi	r31, 0x6F	; 111
    5cfa:	3f 2e       	mov	r3, r31
    5cfc:	97 ff       	sbrs	r25, 7
    5cfe:	09 c0       	rjmp	.+18     	; 0x5d12 <vfprintf+0x230>
    5d00:	90 95       	com	r25
    5d02:	80 95       	com	r24
    5d04:	70 95       	com	r23
    5d06:	61 95       	neg	r22
    5d08:	7f 4f       	sbci	r23, 0xFF	; 255
    5d0a:	8f 4f       	sbci	r24, 0xFF	; 255
    5d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d0e:	f0 68       	ori	r31, 0x80	; 128
    5d10:	3f 2e       	mov	r3, r31
    5d12:	2a e0       	ldi	r18, 0x0A	; 10
    5d14:	30 e0       	ldi	r19, 0x00	; 0
    5d16:	a3 01       	movw	r20, r6
    5d18:	33 d1       	rcall	.+614    	; 0x5f80 <__ultoa_invert>
    5d1a:	88 2e       	mov	r8, r24
    5d1c:	86 18       	sub	r8, r6
    5d1e:	44 c0       	rjmp	.+136    	; 0x5da8 <vfprintf+0x2c6>
    5d20:	85 37       	cpi	r24, 0x75	; 117
    5d22:	31 f4       	brne	.+12     	; 0x5d30 <vfprintf+0x24e>
    5d24:	23 2d       	mov	r18, r3
    5d26:	2f 7e       	andi	r18, 0xEF	; 239
    5d28:	b2 2e       	mov	r11, r18
    5d2a:	2a e0       	ldi	r18, 0x0A	; 10
    5d2c:	30 e0       	ldi	r19, 0x00	; 0
    5d2e:	25 c0       	rjmp	.+74     	; 0x5d7a <vfprintf+0x298>
    5d30:	93 2d       	mov	r25, r3
    5d32:	99 7f       	andi	r25, 0xF9	; 249
    5d34:	b9 2e       	mov	r11, r25
    5d36:	8f 36       	cpi	r24, 0x6F	; 111
    5d38:	c1 f0       	breq	.+48     	; 0x5d6a <vfprintf+0x288>
    5d3a:	18 f4       	brcc	.+6      	; 0x5d42 <vfprintf+0x260>
    5d3c:	88 35       	cpi	r24, 0x58	; 88
    5d3e:	79 f0       	breq	.+30     	; 0x5d5e <vfprintf+0x27c>
    5d40:	ae c0       	rjmp	.+348    	; 0x5e9e <vfprintf+0x3bc>
    5d42:	80 37       	cpi	r24, 0x70	; 112
    5d44:	19 f0       	breq	.+6      	; 0x5d4c <vfprintf+0x26a>
    5d46:	88 37       	cpi	r24, 0x78	; 120
    5d48:	21 f0       	breq	.+8      	; 0x5d52 <vfprintf+0x270>
    5d4a:	a9 c0       	rjmp	.+338    	; 0x5e9e <vfprintf+0x3bc>
    5d4c:	e9 2f       	mov	r30, r25
    5d4e:	e0 61       	ori	r30, 0x10	; 16
    5d50:	be 2e       	mov	r11, r30
    5d52:	b4 fe       	sbrs	r11, 4
    5d54:	0d c0       	rjmp	.+26     	; 0x5d70 <vfprintf+0x28e>
    5d56:	fb 2d       	mov	r31, r11
    5d58:	f4 60       	ori	r31, 0x04	; 4
    5d5a:	bf 2e       	mov	r11, r31
    5d5c:	09 c0       	rjmp	.+18     	; 0x5d70 <vfprintf+0x28e>
    5d5e:	34 fe       	sbrs	r3, 4
    5d60:	0a c0       	rjmp	.+20     	; 0x5d76 <vfprintf+0x294>
    5d62:	29 2f       	mov	r18, r25
    5d64:	26 60       	ori	r18, 0x06	; 6
    5d66:	b2 2e       	mov	r11, r18
    5d68:	06 c0       	rjmp	.+12     	; 0x5d76 <vfprintf+0x294>
    5d6a:	28 e0       	ldi	r18, 0x08	; 8
    5d6c:	30 e0       	ldi	r19, 0x00	; 0
    5d6e:	05 c0       	rjmp	.+10     	; 0x5d7a <vfprintf+0x298>
    5d70:	20 e1       	ldi	r18, 0x10	; 16
    5d72:	30 e0       	ldi	r19, 0x00	; 0
    5d74:	02 c0       	rjmp	.+4      	; 0x5d7a <vfprintf+0x298>
    5d76:	20 e1       	ldi	r18, 0x10	; 16
    5d78:	32 e0       	ldi	r19, 0x02	; 2
    5d7a:	f8 01       	movw	r30, r16
    5d7c:	b7 fe       	sbrs	r11, 7
    5d7e:	07 c0       	rjmp	.+14     	; 0x5d8e <vfprintf+0x2ac>
    5d80:	60 81       	ld	r22, Z
    5d82:	71 81       	ldd	r23, Z+1	; 0x01
    5d84:	82 81       	ldd	r24, Z+2	; 0x02
    5d86:	93 81       	ldd	r25, Z+3	; 0x03
    5d88:	0c 5f       	subi	r16, 0xFC	; 252
    5d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    5d8c:	06 c0       	rjmp	.+12     	; 0x5d9a <vfprintf+0x2b8>
    5d8e:	60 81       	ld	r22, Z
    5d90:	71 81       	ldd	r23, Z+1	; 0x01
    5d92:	80 e0       	ldi	r24, 0x00	; 0
    5d94:	90 e0       	ldi	r25, 0x00	; 0
    5d96:	0e 5f       	subi	r16, 0xFE	; 254
    5d98:	1f 4f       	sbci	r17, 0xFF	; 255
    5d9a:	a3 01       	movw	r20, r6
    5d9c:	f1 d0       	rcall	.+482    	; 0x5f80 <__ultoa_invert>
    5d9e:	88 2e       	mov	r8, r24
    5da0:	86 18       	sub	r8, r6
    5da2:	fb 2d       	mov	r31, r11
    5da4:	ff 77       	andi	r31, 0x7F	; 127
    5da6:	3f 2e       	mov	r3, r31
    5da8:	36 fe       	sbrs	r3, 6
    5daa:	0d c0       	rjmp	.+26     	; 0x5dc6 <vfprintf+0x2e4>
    5dac:	23 2d       	mov	r18, r3
    5dae:	2e 7f       	andi	r18, 0xFE	; 254
    5db0:	a2 2e       	mov	r10, r18
    5db2:	89 14       	cp	r8, r9
    5db4:	58 f4       	brcc	.+22     	; 0x5dcc <vfprintf+0x2ea>
    5db6:	34 fe       	sbrs	r3, 4
    5db8:	0b c0       	rjmp	.+22     	; 0x5dd0 <vfprintf+0x2ee>
    5dba:	32 fc       	sbrc	r3, 2
    5dbc:	09 c0       	rjmp	.+18     	; 0x5dd0 <vfprintf+0x2ee>
    5dbe:	83 2d       	mov	r24, r3
    5dc0:	8e 7e       	andi	r24, 0xEE	; 238
    5dc2:	a8 2e       	mov	r10, r24
    5dc4:	05 c0       	rjmp	.+10     	; 0x5dd0 <vfprintf+0x2ee>
    5dc6:	b8 2c       	mov	r11, r8
    5dc8:	a3 2c       	mov	r10, r3
    5dca:	03 c0       	rjmp	.+6      	; 0x5dd2 <vfprintf+0x2f0>
    5dcc:	b8 2c       	mov	r11, r8
    5dce:	01 c0       	rjmp	.+2      	; 0x5dd2 <vfprintf+0x2f0>
    5dd0:	b9 2c       	mov	r11, r9
    5dd2:	a4 fe       	sbrs	r10, 4
    5dd4:	0f c0       	rjmp	.+30     	; 0x5df4 <vfprintf+0x312>
    5dd6:	fe 01       	movw	r30, r28
    5dd8:	e8 0d       	add	r30, r8
    5dda:	f1 1d       	adc	r31, r1
    5ddc:	80 81       	ld	r24, Z
    5dde:	80 33       	cpi	r24, 0x30	; 48
    5de0:	21 f4       	brne	.+8      	; 0x5dea <vfprintf+0x308>
    5de2:	9a 2d       	mov	r25, r10
    5de4:	99 7e       	andi	r25, 0xE9	; 233
    5de6:	a9 2e       	mov	r10, r25
    5de8:	09 c0       	rjmp	.+18     	; 0x5dfc <vfprintf+0x31a>
    5dea:	a2 fe       	sbrs	r10, 2
    5dec:	06 c0       	rjmp	.+12     	; 0x5dfa <vfprintf+0x318>
    5dee:	b3 94       	inc	r11
    5df0:	b3 94       	inc	r11
    5df2:	04 c0       	rjmp	.+8      	; 0x5dfc <vfprintf+0x31a>
    5df4:	8a 2d       	mov	r24, r10
    5df6:	86 78       	andi	r24, 0x86	; 134
    5df8:	09 f0       	breq	.+2      	; 0x5dfc <vfprintf+0x31a>
    5dfa:	b3 94       	inc	r11
    5dfc:	a3 fc       	sbrc	r10, 3
    5dfe:	10 c0       	rjmp	.+32     	; 0x5e20 <vfprintf+0x33e>
    5e00:	a0 fe       	sbrs	r10, 0
    5e02:	06 c0       	rjmp	.+12     	; 0x5e10 <vfprintf+0x32e>
    5e04:	b2 14       	cp	r11, r2
    5e06:	80 f4       	brcc	.+32     	; 0x5e28 <vfprintf+0x346>
    5e08:	28 0c       	add	r2, r8
    5e0a:	92 2c       	mov	r9, r2
    5e0c:	9b 18       	sub	r9, r11
    5e0e:	0d c0       	rjmp	.+26     	; 0x5e2a <vfprintf+0x348>
    5e10:	b2 14       	cp	r11, r2
    5e12:	58 f4       	brcc	.+22     	; 0x5e2a <vfprintf+0x348>
    5e14:	b6 01       	movw	r22, r12
    5e16:	80 e2       	ldi	r24, 0x20	; 32
    5e18:	90 e0       	ldi	r25, 0x00	; 0
    5e1a:	76 d0       	rcall	.+236    	; 0x5f08 <fputc>
    5e1c:	b3 94       	inc	r11
    5e1e:	f8 cf       	rjmp	.-16     	; 0x5e10 <vfprintf+0x32e>
    5e20:	b2 14       	cp	r11, r2
    5e22:	18 f4       	brcc	.+6      	; 0x5e2a <vfprintf+0x348>
    5e24:	2b 18       	sub	r2, r11
    5e26:	02 c0       	rjmp	.+4      	; 0x5e2c <vfprintf+0x34a>
    5e28:	98 2c       	mov	r9, r8
    5e2a:	21 2c       	mov	r2, r1
    5e2c:	a4 fe       	sbrs	r10, 4
    5e2e:	0f c0       	rjmp	.+30     	; 0x5e4e <vfprintf+0x36c>
    5e30:	b6 01       	movw	r22, r12
    5e32:	80 e3       	ldi	r24, 0x30	; 48
    5e34:	90 e0       	ldi	r25, 0x00	; 0
    5e36:	68 d0       	rcall	.+208    	; 0x5f08 <fputc>
    5e38:	a2 fe       	sbrs	r10, 2
    5e3a:	16 c0       	rjmp	.+44     	; 0x5e68 <vfprintf+0x386>
    5e3c:	a1 fc       	sbrc	r10, 1
    5e3e:	03 c0       	rjmp	.+6      	; 0x5e46 <vfprintf+0x364>
    5e40:	88 e7       	ldi	r24, 0x78	; 120
    5e42:	90 e0       	ldi	r25, 0x00	; 0
    5e44:	02 c0       	rjmp	.+4      	; 0x5e4a <vfprintf+0x368>
    5e46:	88 e5       	ldi	r24, 0x58	; 88
    5e48:	90 e0       	ldi	r25, 0x00	; 0
    5e4a:	b6 01       	movw	r22, r12
    5e4c:	0c c0       	rjmp	.+24     	; 0x5e66 <vfprintf+0x384>
    5e4e:	8a 2d       	mov	r24, r10
    5e50:	86 78       	andi	r24, 0x86	; 134
    5e52:	51 f0       	breq	.+20     	; 0x5e68 <vfprintf+0x386>
    5e54:	a1 fe       	sbrs	r10, 1
    5e56:	02 c0       	rjmp	.+4      	; 0x5e5c <vfprintf+0x37a>
    5e58:	8b e2       	ldi	r24, 0x2B	; 43
    5e5a:	01 c0       	rjmp	.+2      	; 0x5e5e <vfprintf+0x37c>
    5e5c:	80 e2       	ldi	r24, 0x20	; 32
    5e5e:	a7 fc       	sbrc	r10, 7
    5e60:	8d e2       	ldi	r24, 0x2D	; 45
    5e62:	b6 01       	movw	r22, r12
    5e64:	90 e0       	ldi	r25, 0x00	; 0
    5e66:	50 d0       	rcall	.+160    	; 0x5f08 <fputc>
    5e68:	89 14       	cp	r8, r9
    5e6a:	30 f4       	brcc	.+12     	; 0x5e78 <vfprintf+0x396>
    5e6c:	b6 01       	movw	r22, r12
    5e6e:	80 e3       	ldi	r24, 0x30	; 48
    5e70:	90 e0       	ldi	r25, 0x00	; 0
    5e72:	4a d0       	rcall	.+148    	; 0x5f08 <fputc>
    5e74:	9a 94       	dec	r9
    5e76:	f8 cf       	rjmp	.-16     	; 0x5e68 <vfprintf+0x386>
    5e78:	8a 94       	dec	r8
    5e7a:	f3 01       	movw	r30, r6
    5e7c:	e8 0d       	add	r30, r8
    5e7e:	f1 1d       	adc	r31, r1
    5e80:	80 81       	ld	r24, Z
    5e82:	b6 01       	movw	r22, r12
    5e84:	90 e0       	ldi	r25, 0x00	; 0
    5e86:	40 d0       	rcall	.+128    	; 0x5f08 <fputc>
    5e88:	81 10       	cpse	r8, r1
    5e8a:	f6 cf       	rjmp	.-20     	; 0x5e78 <vfprintf+0x396>
    5e8c:	22 20       	and	r2, r2
    5e8e:	09 f4       	brne	.+2      	; 0x5e92 <vfprintf+0x3b0>
    5e90:	4e ce       	rjmp	.-868    	; 0x5b2e <vfprintf+0x4c>
    5e92:	b6 01       	movw	r22, r12
    5e94:	80 e2       	ldi	r24, 0x20	; 32
    5e96:	90 e0       	ldi	r25, 0x00	; 0
    5e98:	37 d0       	rcall	.+110    	; 0x5f08 <fputc>
    5e9a:	2a 94       	dec	r2
    5e9c:	f7 cf       	rjmp	.-18     	; 0x5e8c <vfprintf+0x3aa>
    5e9e:	f6 01       	movw	r30, r12
    5ea0:	86 81       	ldd	r24, Z+6	; 0x06
    5ea2:	97 81       	ldd	r25, Z+7	; 0x07
    5ea4:	02 c0       	rjmp	.+4      	; 0x5eaa <vfprintf+0x3c8>
    5ea6:	8f ef       	ldi	r24, 0xFF	; 255
    5ea8:	9f ef       	ldi	r25, 0xFF	; 255
    5eaa:	2b 96       	adiw	r28, 0x0b	; 11
    5eac:	0f b6       	in	r0, 0x3f	; 63
    5eae:	f8 94       	cli
    5eb0:	de bf       	out	0x3e, r29	; 62
    5eb2:	0f be       	out	0x3f, r0	; 63
    5eb4:	cd bf       	out	0x3d, r28	; 61
    5eb6:	df 91       	pop	r29
    5eb8:	cf 91       	pop	r28
    5eba:	1f 91       	pop	r17
    5ebc:	0f 91       	pop	r16
    5ebe:	ff 90       	pop	r15
    5ec0:	ef 90       	pop	r14
    5ec2:	df 90       	pop	r13
    5ec4:	cf 90       	pop	r12
    5ec6:	bf 90       	pop	r11
    5ec8:	af 90       	pop	r10
    5eca:	9f 90       	pop	r9
    5ecc:	8f 90       	pop	r8
    5ece:	7f 90       	pop	r7
    5ed0:	6f 90       	pop	r6
    5ed2:	5f 90       	pop	r5
    5ed4:	4f 90       	pop	r4
    5ed6:	3f 90       	pop	r3
    5ed8:	2f 90       	pop	r2
    5eda:	08 95       	ret

00005edc <strnlen_P>:
    5edc:	fc 01       	movw	r30, r24
    5ede:	05 90       	lpm	r0, Z+
    5ee0:	61 50       	subi	r22, 0x01	; 1
    5ee2:	70 40       	sbci	r23, 0x00	; 0
    5ee4:	01 10       	cpse	r0, r1
    5ee6:	d8 f7       	brcc	.-10     	; 0x5ede <strnlen_P+0x2>
    5ee8:	80 95       	com	r24
    5eea:	90 95       	com	r25
    5eec:	8e 0f       	add	r24, r30
    5eee:	9f 1f       	adc	r25, r31
    5ef0:	08 95       	ret

00005ef2 <strnlen>:
    5ef2:	fc 01       	movw	r30, r24
    5ef4:	61 50       	subi	r22, 0x01	; 1
    5ef6:	70 40       	sbci	r23, 0x00	; 0
    5ef8:	01 90       	ld	r0, Z+
    5efa:	01 10       	cpse	r0, r1
    5efc:	d8 f7       	brcc	.-10     	; 0x5ef4 <strnlen+0x2>
    5efe:	80 95       	com	r24
    5f00:	90 95       	com	r25
    5f02:	8e 0f       	add	r24, r30
    5f04:	9f 1f       	adc	r25, r31
    5f06:	08 95       	ret

00005f08 <fputc>:
    5f08:	0f 93       	push	r16
    5f0a:	1f 93       	push	r17
    5f0c:	cf 93       	push	r28
    5f0e:	df 93       	push	r29
    5f10:	fb 01       	movw	r30, r22
    5f12:	23 81       	ldd	r18, Z+3	; 0x03
    5f14:	21 fd       	sbrc	r18, 1
    5f16:	03 c0       	rjmp	.+6      	; 0x5f1e <fputc+0x16>
    5f18:	8f ef       	ldi	r24, 0xFF	; 255
    5f1a:	9f ef       	ldi	r25, 0xFF	; 255
    5f1c:	2c c0       	rjmp	.+88     	; 0x5f76 <fputc+0x6e>
    5f1e:	22 ff       	sbrs	r18, 2
    5f20:	16 c0       	rjmp	.+44     	; 0x5f4e <fputc+0x46>
    5f22:	46 81       	ldd	r20, Z+6	; 0x06
    5f24:	57 81       	ldd	r21, Z+7	; 0x07
    5f26:	24 81       	ldd	r18, Z+4	; 0x04
    5f28:	35 81       	ldd	r19, Z+5	; 0x05
    5f2a:	42 17       	cp	r20, r18
    5f2c:	53 07       	cpc	r21, r19
    5f2e:	44 f4       	brge	.+16     	; 0x5f40 <fputc+0x38>
    5f30:	a0 81       	ld	r26, Z
    5f32:	b1 81       	ldd	r27, Z+1	; 0x01
    5f34:	9d 01       	movw	r18, r26
    5f36:	2f 5f       	subi	r18, 0xFF	; 255
    5f38:	3f 4f       	sbci	r19, 0xFF	; 255
    5f3a:	31 83       	std	Z+1, r19	; 0x01
    5f3c:	20 83       	st	Z, r18
    5f3e:	8c 93       	st	X, r24
    5f40:	26 81       	ldd	r18, Z+6	; 0x06
    5f42:	37 81       	ldd	r19, Z+7	; 0x07
    5f44:	2f 5f       	subi	r18, 0xFF	; 255
    5f46:	3f 4f       	sbci	r19, 0xFF	; 255
    5f48:	37 83       	std	Z+7, r19	; 0x07
    5f4a:	26 83       	std	Z+6, r18	; 0x06
    5f4c:	14 c0       	rjmp	.+40     	; 0x5f76 <fputc+0x6e>
    5f4e:	8b 01       	movw	r16, r22
    5f50:	ec 01       	movw	r28, r24
    5f52:	fb 01       	movw	r30, r22
    5f54:	00 84       	ldd	r0, Z+8	; 0x08
    5f56:	f1 85       	ldd	r31, Z+9	; 0x09
    5f58:	e0 2d       	mov	r30, r0
    5f5a:	19 95       	eicall
    5f5c:	89 2b       	or	r24, r25
    5f5e:	e1 f6       	brne	.-72     	; 0x5f18 <fputc+0x10>
    5f60:	d8 01       	movw	r26, r16
    5f62:	16 96       	adiw	r26, 0x06	; 6
    5f64:	8d 91       	ld	r24, X+
    5f66:	9c 91       	ld	r25, X
    5f68:	17 97       	sbiw	r26, 0x07	; 7
    5f6a:	01 96       	adiw	r24, 0x01	; 1
    5f6c:	17 96       	adiw	r26, 0x07	; 7
    5f6e:	9c 93       	st	X, r25
    5f70:	8e 93       	st	-X, r24
    5f72:	16 97       	sbiw	r26, 0x06	; 6
    5f74:	ce 01       	movw	r24, r28
    5f76:	df 91       	pop	r29
    5f78:	cf 91       	pop	r28
    5f7a:	1f 91       	pop	r17
    5f7c:	0f 91       	pop	r16
    5f7e:	08 95       	ret

00005f80 <__ultoa_invert>:
    5f80:	fa 01       	movw	r30, r20
    5f82:	aa 27       	eor	r26, r26
    5f84:	28 30       	cpi	r18, 0x08	; 8
    5f86:	51 f1       	breq	.+84     	; 0x5fdc <__ultoa_invert+0x5c>
    5f88:	20 31       	cpi	r18, 0x10	; 16
    5f8a:	81 f1       	breq	.+96     	; 0x5fec <__ultoa_invert+0x6c>
    5f8c:	e8 94       	clt
    5f8e:	6f 93       	push	r22
    5f90:	6e 7f       	andi	r22, 0xFE	; 254
    5f92:	6e 5f       	subi	r22, 0xFE	; 254
    5f94:	7f 4f       	sbci	r23, 0xFF	; 255
    5f96:	8f 4f       	sbci	r24, 0xFF	; 255
    5f98:	9f 4f       	sbci	r25, 0xFF	; 255
    5f9a:	af 4f       	sbci	r26, 0xFF	; 255
    5f9c:	b1 e0       	ldi	r27, 0x01	; 1
    5f9e:	3e d0       	rcall	.+124    	; 0x601c <__ultoa_invert+0x9c>
    5fa0:	b4 e0       	ldi	r27, 0x04	; 4
    5fa2:	3c d0       	rcall	.+120    	; 0x601c <__ultoa_invert+0x9c>
    5fa4:	67 0f       	add	r22, r23
    5fa6:	78 1f       	adc	r23, r24
    5fa8:	89 1f       	adc	r24, r25
    5faa:	9a 1f       	adc	r25, r26
    5fac:	a1 1d       	adc	r26, r1
    5fae:	68 0f       	add	r22, r24
    5fb0:	79 1f       	adc	r23, r25
    5fb2:	8a 1f       	adc	r24, r26
    5fb4:	91 1d       	adc	r25, r1
    5fb6:	a1 1d       	adc	r26, r1
    5fb8:	6a 0f       	add	r22, r26
    5fba:	71 1d       	adc	r23, r1
    5fbc:	81 1d       	adc	r24, r1
    5fbe:	91 1d       	adc	r25, r1
    5fc0:	a1 1d       	adc	r26, r1
    5fc2:	20 d0       	rcall	.+64     	; 0x6004 <__ultoa_invert+0x84>
    5fc4:	09 f4       	brne	.+2      	; 0x5fc8 <__ultoa_invert+0x48>
    5fc6:	68 94       	set
    5fc8:	3f 91       	pop	r19
    5fca:	2a e0       	ldi	r18, 0x0A	; 10
    5fcc:	26 9f       	mul	r18, r22
    5fce:	11 24       	eor	r1, r1
    5fd0:	30 19       	sub	r19, r0
    5fd2:	30 5d       	subi	r19, 0xD0	; 208
    5fd4:	31 93       	st	Z+, r19
    5fd6:	de f6       	brtc	.-74     	; 0x5f8e <__ultoa_invert+0xe>
    5fd8:	cf 01       	movw	r24, r30
    5fda:	08 95       	ret
    5fdc:	46 2f       	mov	r20, r22
    5fde:	47 70       	andi	r20, 0x07	; 7
    5fe0:	40 5d       	subi	r20, 0xD0	; 208
    5fe2:	41 93       	st	Z+, r20
    5fe4:	b3 e0       	ldi	r27, 0x03	; 3
    5fe6:	0f d0       	rcall	.+30     	; 0x6006 <__ultoa_invert+0x86>
    5fe8:	c9 f7       	brne	.-14     	; 0x5fdc <__ultoa_invert+0x5c>
    5fea:	f6 cf       	rjmp	.-20     	; 0x5fd8 <__ultoa_invert+0x58>
    5fec:	46 2f       	mov	r20, r22
    5fee:	4f 70       	andi	r20, 0x0F	; 15
    5ff0:	40 5d       	subi	r20, 0xD0	; 208
    5ff2:	4a 33       	cpi	r20, 0x3A	; 58
    5ff4:	18 f0       	brcs	.+6      	; 0x5ffc <__ultoa_invert+0x7c>
    5ff6:	49 5d       	subi	r20, 0xD9	; 217
    5ff8:	31 fd       	sbrc	r19, 1
    5ffa:	40 52       	subi	r20, 0x20	; 32
    5ffc:	41 93       	st	Z+, r20
    5ffe:	02 d0       	rcall	.+4      	; 0x6004 <__ultoa_invert+0x84>
    6000:	a9 f7       	brne	.-22     	; 0x5fec <__ultoa_invert+0x6c>
    6002:	ea cf       	rjmp	.-44     	; 0x5fd8 <__ultoa_invert+0x58>
    6004:	b4 e0       	ldi	r27, 0x04	; 4
    6006:	a6 95       	lsr	r26
    6008:	97 95       	ror	r25
    600a:	87 95       	ror	r24
    600c:	77 95       	ror	r23
    600e:	67 95       	ror	r22
    6010:	ba 95       	dec	r27
    6012:	c9 f7       	brne	.-14     	; 0x6006 <__ultoa_invert+0x86>
    6014:	00 97       	sbiw	r24, 0x00	; 0
    6016:	61 05       	cpc	r22, r1
    6018:	71 05       	cpc	r23, r1
    601a:	08 95       	ret
    601c:	9b 01       	movw	r18, r22
    601e:	ac 01       	movw	r20, r24
    6020:	0a 2e       	mov	r0, r26
    6022:	06 94       	lsr	r0
    6024:	57 95       	ror	r21
    6026:	47 95       	ror	r20
    6028:	37 95       	ror	r19
    602a:	27 95       	ror	r18
    602c:	ba 95       	dec	r27
    602e:	c9 f7       	brne	.-14     	; 0x6022 <__ultoa_invert+0xa2>
    6030:	62 0f       	add	r22, r18
    6032:	73 1f       	adc	r23, r19
    6034:	84 1f       	adc	r24, r20
    6036:	95 1f       	adc	r25, r21
    6038:	a0 1d       	adc	r26, r0
    603a:	08 95       	ret

0000603c <_exit>:
    603c:	f8 94       	cli

0000603e <__stop_program>:
    603e:	ff cf       	rjmp	.-2      	; 0x603e <__stop_program>
