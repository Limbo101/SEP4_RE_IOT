
IOT_test_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000658  00800200  00006068  000060fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006068  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001275  00800858  00800858  00006754  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006754  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000067b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b28  00000000  00000000  000067f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e5b5  00000000  00000000  00007318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003973  00000000  00000000  000158cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006b50  00000000  00000000  00019240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000026b4  00000000  00000000  0001fd90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000043e7  00000000  00000000  00022444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ce98  00000000  00000000  0002682b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b60  00000000  00000000  000336c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c2       	rjmp	.+1170   	; 0x494 <__ctors_end>
       2:	00 00       	nop
       4:	68 c2       	rjmp	.+1232   	; 0x4d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c2       	rjmp	.+1228   	; 0x4d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c2       	rjmp	.+1224   	; 0x4d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c2       	rjmp	.+1220   	; 0x4d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c2       	rjmp	.+1216   	; 0x4d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c2       	rjmp	.+1212   	; 0x4d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c2       	rjmp	.+1208   	; 0x4d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c2       	rjmp	.+1204   	; 0x4d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c2       	rjmp	.+1200   	; 0x4d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c2       	rjmp	.+1196   	; 0x4d6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c2       	rjmp	.+1192   	; 0x4d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__vector_12>
      34:	50 c2       	rjmp	.+1184   	; 0x4d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c2       	rjmp	.+1180   	; 0x4d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c2       	rjmp	.+1176   	; 0x4d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c2       	rjmp	.+1172   	; 0x4d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c2       	rjmp	.+1168   	; 0x4d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c2       	rjmp	.+1164   	; 0x4d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c2       	rjmp	.+1160   	; 0x4d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c2       	rjmp	.+1156   	; 0x4d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c2       	rjmp	.+1152   	; 0x4d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c2       	rjmp	.+1148   	; 0x4d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c2       	rjmp	.+1144   	; 0x4d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c2       	rjmp	.+1140   	; 0x4d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 56 25 	jmp	0x4aac	; 0x4aac <__vector_25>
      68:	0c 94 a8 25 	jmp	0x4b50	; 0x4b50 <__vector_26>
      6c:	34 c2       	rjmp	.+1128   	; 0x4d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c2       	rjmp	.+1124   	; 0x4d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c2       	rjmp	.+1120   	; 0x4d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c2       	rjmp	.+1116   	; 0x4d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c2       	rjmp	.+1112   	; 0x4d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c2       	rjmp	.+1108   	; 0x4d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c2       	rjmp	.+1104   	; 0x4d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c2       	rjmp	.+1100   	; 0x4d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c2       	rjmp	.+1096   	; 0x4d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ec 25 	jmp	0x4bd8	; 0x4bd8 <__vector_36>
      94:	0c 94 3e 26 	jmp	0x4c7c	; 0x4c7c <__vector_37>
      98:	1e c2       	rjmp	.+1084   	; 0x4d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 d6 28 	jmp	0x51ac	; 0x51ac <__vector_39>
      a0:	1a c2       	rjmp	.+1076   	; 0x4d6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	18 c2       	rjmp	.+1072   	; 0x4d6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	16 c2       	rjmp	.+1068   	; 0x4d6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	14 c2       	rjmp	.+1064   	; 0x4d6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	12 c2       	rjmp	.+1060   	; 0x4d6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	10 c2       	rjmp	.+1056   	; 0x4d6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0e c2       	rjmp	.+1052   	; 0x4d6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c c2       	rjmp	.+1048   	; 0x4d6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	0a c2       	rjmp	.+1044   	; 0x4d6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	08 c2       	rjmp	.+1040   	; 0x4d6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	06 c2       	rjmp	.+1036   	; 0x4d6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__vector_51>
      d0:	0c 94 d4 26 	jmp	0x4da8	; 0x4da8 <__vector_52>
      d4:	00 c2       	rjmp	.+1024   	; 0x4d6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__vector_54>
      dc:	0c 94 6a 27 	jmp	0x4ed4	; 0x4ed4 <__vector_55>
      e0:	fa c1       	rjmp	.+1012   	; 0x4d6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c0 01       	movw	r24, r0
      e6:	c0 01       	movw	r24, r0
      e8:	c0 01       	movw	r24, r0
      ea:	fa 01       	movw	r30, r20
      ec:	02 02       	muls	r16, r18
      ee:	18 02       	muls	r17, r24
      f0:	c0 01       	movw	r24, r0
      f2:	c0 01       	movw	r24, r0
      f4:	fa 01       	movw	r30, r20
      f6:	02 02       	muls	r16, r18
      f8:	f8 28       	or	r15, r8
      fa:	68 29       	or	r22, r8
      fc:	68 29       	or	r22, r8
      fe:	68 29       	or	r22, r8
     100:	68 29       	or	r22, r8
     102:	68 29       	or	r22, r8
     104:	68 29       	or	r22, r8
     106:	68 29       	or	r22, r8
     108:	f8 28       	or	r15, r8
     10a:	68 29       	or	r22, r8
     10c:	68 29       	or	r22, r8
     10e:	68 29       	or	r22, r8
     110:	68 29       	or	r22, r8
     112:	68 29       	or	r22, r8
     114:	68 29       	or	r22, r8
     116:	68 29       	or	r22, r8
     118:	fa 28       	or	r15, r10
     11a:	68 29       	or	r22, r8
     11c:	68 29       	or	r22, r8
     11e:	68 29       	or	r22, r8
     120:	68 29       	or	r22, r8
     122:	68 29       	or	r22, r8
     124:	68 29       	or	r22, r8
     126:	68 29       	or	r22, r8
     128:	68 29       	or	r22, r8
     12a:	68 29       	or	r22, r8
     12c:	68 29       	or	r22, r8
     12e:	68 29       	or	r22, r8
     130:	68 29       	or	r22, r8
     132:	68 29       	or	r22, r8
     134:	68 29       	or	r22, r8
     136:	68 29       	or	r22, r8
     138:	fa 28       	or	r15, r10
     13a:	68 29       	or	r22, r8
     13c:	68 29       	or	r22, r8
     13e:	68 29       	or	r22, r8
     140:	68 29       	or	r22, r8
     142:	68 29       	or	r22, r8
     144:	68 29       	or	r22, r8
     146:	68 29       	or	r22, r8
     148:	68 29       	or	r22, r8
     14a:	68 29       	or	r22, r8
     14c:	68 29       	or	r22, r8
     14e:	68 29       	or	r22, r8
     150:	68 29       	or	r22, r8
     152:	68 29       	or	r22, r8
     154:	68 29       	or	r22, r8
     156:	68 29       	or	r22, r8
     158:	64 29       	or	r22, r4
     15a:	68 29       	or	r22, r8
     15c:	68 29       	or	r22, r8
     15e:	68 29       	or	r22, r8
     160:	68 29       	or	r22, r8
     162:	68 29       	or	r22, r8
     164:	68 29       	or	r22, r8
     166:	68 29       	or	r22, r8
     168:	2f 29       	or	r18, r15
     16a:	68 29       	or	r22, r8
     16c:	68 29       	or	r22, r8
     16e:	68 29       	or	r22, r8
     170:	68 29       	or	r22, r8
     172:	68 29       	or	r22, r8
     174:	68 29       	or	r22, r8
     176:	68 29       	or	r22, r8
     178:	68 29       	or	r22, r8
     17a:	68 29       	or	r22, r8
     17c:	68 29       	or	r22, r8
     17e:	68 29       	or	r22, r8
     180:	68 29       	or	r22, r8
     182:	68 29       	or	r22, r8
     184:	68 29       	or	r22, r8
     186:	68 29       	or	r22, r8
     188:	23 29       	or	r18, r3
     18a:	68 29       	or	r22, r8
     18c:	68 29       	or	r22, r8
     18e:	68 29       	or	r22, r8
     190:	68 29       	or	r22, r8
     192:	68 29       	or	r22, r8
     194:	68 29       	or	r22, r8
     196:	68 29       	or	r22, r8
     198:	47 29       	or	r20, r7

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	00 ea       	ldi	r16, 0xA0	; 160
     19c:	18 e1       	ldi	r17, 0x18	; 24
     19e:	0f 2e       	mov	r0, r31
     1a0:	f0 ed       	ldi	r31, 0xD0	; 208
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	92 d7       	rcall	.+3876   	; 0x10f0 <uxListRemove>
     1cc:	80 91 93 18 	lds	r24, 0x1893	; 0x801893 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 93 18 	sts	0x1893, r24	; 0x801893 <uxCurrentNumberOfTasks>
     1d6:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 9f 18 	sts	0x189F, r24	; 0x80189f <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e8:	df d6       	rcall	.+3518   	; 0xfa8 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	dd d6       	rcall	.+3514   	; 0xfa8 <vPortFree>
     1ee:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	10 f0       	brcs	.+4      	; 0x202 <prvIdleTask+0x68>
     1fe:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
     202:	0e 94 c6 1a 	call	0x358c	; 0x358c <vApplicationIdleHook>
     206:	d1 cf       	rjmp	.-94     	; 0x1aa <prvIdleTask+0x10>

00000208 <prvTimerTask>:
     208:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20a:	df 93       	push	r29
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	60 97       	sbiw	r28, 0x10	; 16
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	de bf       	out	0x3e, r29	; 62
     218:	0f be       	out	0x3f, r0	; 63
     21a:	cd bf       	out	0x3d, r28	; 61
     21c:	ce 01       	movw	r24, r28
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	9a 87       	std	Y+10, r25	; 0x0a
     222:	89 87       	std	Y+9, r24	; 0x09
     224:	81 2c       	mov	r8, r1
     226:	91 2c       	mov	r9, r1
     228:	a1 2c       	mov	r10, r1
     22a:	b1 2c       	mov	r11, r1
     22c:	69 84       	ldd	r6, Y+9	; 0x09
     22e:	7a 84       	ldd	r7, Y+10	; 0x0a
     230:	e0 91 08 19 	lds	r30, 0x1908	; 0x801908 <pxCurrentTimerList>
     234:	f0 91 09 19 	lds	r31, 0x1909	; 0x801909 <pxCurrentTimerList+0x1>
     238:	80 81       	ld	r24, Z
     23a:	88 23       	and	r24, r24
     23c:	09 f4       	brne	.+2      	; 0x240 <prvTimerTask+0x38>
     23e:	10 c1       	rjmp	.+544    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     240:	07 80       	ldd	r0, Z+7	; 0x07
     242:	f0 85       	ldd	r31, Z+8	; 0x08
     244:	e0 2d       	mov	r30, r0
     246:	20 80       	ld	r2, Z
     248:	31 80       	ldd	r3, Z+1	; 0x01
     24a:	42 80       	ldd	r4, Z+2	; 0x02
     24c:	53 80       	ldd	r5, Z+3	; 0x03
     24e:	0e 94 ad 12 	call	0x255a	; 0x255a <vTaskSuspendAll>
     252:	ce 01       	movw	r24, r28
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	0e 94 30 1a 	call	0x3460	; 0x3460 <prvSampleTimeNow>
     25a:	6b 87       	std	Y+11, r22	; 0x0b
     25c:	7c 87       	std	Y+12, r23	; 0x0c
     25e:	8d 87       	std	Y+13, r24	; 0x0d
     260:	9e 87       	std	Y+14, r25	; 0x0e
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	81 11       	cpse	r24, r1
     266:	65 c0       	rjmp	.+202    	; 0x332 <prvTimerTask+0x12a>
     268:	8b 85       	ldd	r24, Y+11	; 0x0b
     26a:	9c 85       	ldd	r25, Y+12	; 0x0c
     26c:	ad 85       	ldd	r26, Y+13	; 0x0d
     26e:	be 85       	ldd	r27, Y+14	; 0x0e
     270:	82 15       	cp	r24, r2
     272:	93 05       	cpc	r25, r3
     274:	a4 05       	cpc	r26, r4
     276:	b5 05       	cpc	r27, r5
     278:	08 f4       	brcc	.+2      	; 0x27c <prvTimerTask+0x74>
     27a:	44 c0       	rjmp	.+136    	; 0x304 <prvTimerTask+0xfc>
     27c:	0e 94 96 13 	call	0x272c	; 0x272c <xTaskResumeAll>
     280:	e0 91 08 19 	lds	r30, 0x1908	; 0x801908 <pxCurrentTimerList>
     284:	f0 91 09 19 	lds	r31, 0x1909	; 0x801909 <pxCurrentTimerList+0x1>
     288:	07 80       	ldd	r0, Z+7	; 0x07
     28a:	f0 85       	ldd	r31, Z+8	; 0x08
     28c:	e0 2d       	mov	r30, r0
     28e:	a0 85       	ldd	r26, Z+8	; 0x08
     290:	b1 85       	ldd	r27, Z+9	; 0x09
     292:	b8 8b       	std	Y+16, r27	; 0x10
     294:	af 87       	std	Y+15, r26	; 0x0f
     296:	cd 01       	movw	r24, r26
     298:	02 96       	adiw	r24, 0x02	; 2
     29a:	2a d7       	rcall	.+3668   	; 0x10f0 <uxListRemove>
     29c:	ef 85       	ldd	r30, Y+15	; 0x0f
     29e:	f8 89       	ldd	r31, Y+16	; 0x10
     2a0:	87 89       	ldd	r24, Z+23	; 0x17
     2a2:	82 ff       	sbrs	r24, 2
     2a4:	21 c0       	rjmp	.+66     	; 0x2e8 <prvTimerTask+0xe0>
     2a6:	46 85       	ldd	r20, Z+14	; 0x0e
     2a8:	57 85       	ldd	r21, Z+15	; 0x0f
     2aa:	60 89       	ldd	r22, Z+16	; 0x10
     2ac:	71 89       	ldd	r23, Z+17	; 0x11
     2ae:	42 0d       	add	r20, r2
     2b0:	53 1d       	adc	r21, r3
     2b2:	64 1d       	adc	r22, r4
     2b4:	75 1d       	adc	r23, r5
     2b6:	72 01       	movw	r14, r4
     2b8:	61 01       	movw	r12, r2
     2ba:	0b 85       	ldd	r16, Y+11	; 0x0b
     2bc:	1c 85       	ldd	r17, Y+12	; 0x0c
     2be:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c0:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c2:	cf 01       	movw	r24, r30
     2c4:	0e 94 3f 19 	call	0x327e	; 0x327e <prvInsertTimerInActiveList>
     2c8:	88 23       	and	r24, r24
     2ca:	99 f0       	breq	.+38     	; 0x2f2 <prvTimerTask+0xea>
     2cc:	c8 2c       	mov	r12, r8
     2ce:	d9 2c       	mov	r13, r9
     2d0:	ea 2c       	mov	r14, r10
     2d2:	fb 2c       	mov	r15, r11
     2d4:	00 e0       	ldi	r16, 0x00	; 0
     2d6:	10 e0       	ldi	r17, 0x00	; 0
     2d8:	a2 01       	movw	r20, r4
     2da:	91 01       	movw	r18, r2
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e0:	98 89       	ldd	r25, Y+16	; 0x10
     2e2:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <xTimerGenericCommand>
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <prvTimerTask+0xea>
     2e8:	8e 7f       	andi	r24, 0xFE	; 254
     2ea:	af 85       	ldd	r26, Y+15	; 0x0f
     2ec:	b8 89       	ldd	r27, Y+16	; 0x10
     2ee:	57 96       	adiw	r26, 0x17	; 23
     2f0:	8c 93       	st	X, r24
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	54 96       	adiw	r26, 0x14	; 20
     2f8:	ed 91       	ld	r30, X+
     2fa:	fc 91       	ld	r31, X
     2fc:	55 97       	sbiw	r26, 0x15	; 21
     2fe:	cd 01       	movw	r24, r26
     300:	19 95       	eicall
     302:	9f c0       	rjmp	.+318    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	b2 01       	movw	r22, r4
     308:	a1 01       	movw	r20, r2
     30a:	8b 85       	ldd	r24, Y+11	; 0x0b
     30c:	9c 85       	ldd	r25, Y+12	; 0x0c
     30e:	ad 85       	ldd	r26, Y+13	; 0x0d
     310:	be 85       	ldd	r27, Y+14	; 0x0e
     312:	48 1b       	sub	r20, r24
     314:	59 0b       	sbc	r21, r25
     316:	6a 0b       	sbc	r22, r26
     318:	7b 0b       	sbc	r23, r27
     31a:	80 91 04 19 	lds	r24, 0x1904	; 0x801904 <xTimerQueue>
     31e:	90 91 05 19 	lds	r25, 0x1905	; 0x801905 <xTimerQueue+0x1>
     322:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <vQueueWaitForMessageRestricted>
     326:	0e 94 96 13 	call	0x272c	; 0x272c <xTaskResumeAll>
     32a:	81 11       	cpse	r24, r1
     32c:	8a c0       	rjmp	.+276    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     32e:	b5 d7       	rcall	.+3946   	; 0x129a <vPortYield>
     330:	88 c0       	rjmp	.+272    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     332:	0e 94 96 13 	call	0x272c	; 0x272c <xTaskResumeAll>
     336:	85 c0       	rjmp	.+266    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	88 23       	and	r24, r24
     33c:	0c f4       	brge	.+2      	; 0x340 <prvTimerTask+0x138>
     33e:	81 c0       	rjmp	.+258    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     340:	4e 80       	ldd	r4, Y+6	; 0x06
     342:	5f 80       	ldd	r5, Y+7	; 0x07
     344:	d2 01       	movw	r26, r4
     346:	1c 96       	adiw	r26, 0x0c	; 12
     348:	8d 91       	ld	r24, X+
     34a:	9c 91       	ld	r25, X
     34c:	1d 97       	sbiw	r26, 0x0d	; 13
     34e:	89 2b       	or	r24, r25
     350:	19 f0       	breq	.+6      	; 0x358 <prvTimerTask+0x150>
     352:	c2 01       	movw	r24, r4
     354:	02 96       	adiw	r24, 0x02	; 2
     356:	cc d6       	rcall	.+3480   	; 0x10f0 <uxListRemove>
     358:	ce 01       	movw	r24, r28
     35a:	08 96       	adiw	r24, 0x08	; 8
     35c:	0e 94 30 1a 	call	0x3460	; 0x3460 <prvSampleTimeNow>
     360:	8b 01       	movw	r16, r22
     362:	9c 01       	movw	r18, r24
     364:	e9 81       	ldd	r30, Y+1	; 0x01
     366:	0e 2e       	mov	r0, r30
     368:	00 0c       	add	r0, r0
     36a:	ff 0b       	sbc	r31, r31
     36c:	ea 30       	cpi	r30, 0x0A	; 10
     36e:	f1 05       	cpc	r31, r1
     370:	08 f0       	brcs	.+2      	; 0x374 <prvTimerTask+0x16c>
     372:	67 c0       	rjmp	.+206    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     374:	88 27       	eor	r24, r24
     376:	ee 58       	subi	r30, 0x8E	; 142
     378:	ff 4f       	sbci	r31, 0xFF	; 255
     37a:	8f 4f       	sbci	r24, 0xFF	; 255
     37c:	0c 94 6e 2b 	jmp	0x56dc	; 0x56dc <__tablejump2__>
     380:	f2 01       	movw	r30, r4
     382:	87 89       	ldd	r24, Z+23	; 0x17
     384:	81 60       	ori	r24, 0x01	; 1
     386:	87 8b       	std	Z+23, r24	; 0x17
     388:	ca 80       	ldd	r12, Y+2	; 0x02
     38a:	db 80       	ldd	r13, Y+3	; 0x03
     38c:	ec 80       	ldd	r14, Y+4	; 0x04
     38e:	fd 80       	ldd	r15, Y+5	; 0x05
     390:	46 85       	ldd	r20, Z+14	; 0x0e
     392:	57 85       	ldd	r21, Z+15	; 0x0f
     394:	60 89       	ldd	r22, Z+16	; 0x10
     396:	71 89       	ldd	r23, Z+17	; 0x11
     398:	4c 0d       	add	r20, r12
     39a:	5d 1d       	adc	r21, r13
     39c:	6e 1d       	adc	r22, r14
     39e:	7f 1d       	adc	r23, r15
     3a0:	c2 01       	movw	r24, r4
     3a2:	0e 94 3f 19 	call	0x327e	; 0x327e <prvInsertTimerInActiveList>
     3a6:	88 23       	and	r24, r24
     3a8:	09 f4       	brne	.+2      	; 0x3ac <prvTimerTask+0x1a4>
     3aa:	4b c0       	rjmp	.+150    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3ac:	d2 01       	movw	r26, r4
     3ae:	54 96       	adiw	r26, 0x14	; 20
     3b0:	ed 91       	ld	r30, X+
     3b2:	fc 91       	ld	r31, X
     3b4:	55 97       	sbiw	r26, 0x15	; 21
     3b6:	c2 01       	movw	r24, r4
     3b8:	19 95       	eicall
     3ba:	f2 01       	movw	r30, r4
     3bc:	87 89       	ldd	r24, Z+23	; 0x17
     3be:	82 ff       	sbrs	r24, 2
     3c0:	40 c0       	rjmp	.+128    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3c2:	4a 81       	ldd	r20, Y+2	; 0x02
     3c4:	5b 81       	ldd	r21, Y+3	; 0x03
     3c6:	6c 81       	ldd	r22, Y+4	; 0x04
     3c8:	7d 81       	ldd	r23, Y+5	; 0x05
     3ca:	86 85       	ldd	r24, Z+14	; 0x0e
     3cc:	97 85       	ldd	r25, Z+15	; 0x0f
     3ce:	a0 89       	ldd	r26, Z+16	; 0x10
     3d0:	b1 89       	ldd	r27, Z+17	; 0x11
     3d2:	9a 01       	movw	r18, r20
     3d4:	ab 01       	movw	r20, r22
     3d6:	28 0f       	add	r18, r24
     3d8:	39 1f       	adc	r19, r25
     3da:	4a 1f       	adc	r20, r26
     3dc:	5b 1f       	adc	r21, r27
     3de:	c8 2c       	mov	r12, r8
     3e0:	d9 2c       	mov	r13, r9
     3e2:	ea 2c       	mov	r14, r10
     3e4:	fb 2c       	mov	r15, r11
     3e6:	00 e0       	ldi	r16, 0x00	; 0
     3e8:	10 e0       	ldi	r17, 0x00	; 0
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	c2 01       	movw	r24, r4
     3ee:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <xTimerGenericCommand>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3f4:	d2 01       	movw	r26, r4
     3f6:	57 96       	adiw	r26, 0x17	; 23
     3f8:	8c 91       	ld	r24, X
     3fa:	57 97       	sbiw	r26, 0x17	; 23
     3fc:	8e 7f       	andi	r24, 0xFE	; 254
     3fe:	57 96       	adiw	r26, 0x17	; 23
     400:	8c 93       	st	X, r24
     402:	1f c0       	rjmp	.+62     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     404:	f2 01       	movw	r30, r4
     406:	87 89       	ldd	r24, Z+23	; 0x17
     408:	81 60       	ori	r24, 0x01	; 1
     40a:	87 8b       	std	Z+23, r24	; 0x17
     40c:	4a 81       	ldd	r20, Y+2	; 0x02
     40e:	5b 81       	ldd	r21, Y+3	; 0x03
     410:	6c 81       	ldd	r22, Y+4	; 0x04
     412:	7d 81       	ldd	r23, Y+5	; 0x05
     414:	46 87       	std	Z+14, r20	; 0x0e
     416:	57 87       	std	Z+15, r21	; 0x0f
     418:	60 8b       	std	Z+16, r22	; 0x10
     41a:	71 8b       	std	Z+17, r23	; 0x11
     41c:	40 0f       	add	r20, r16
     41e:	51 1f       	adc	r21, r17
     420:	62 1f       	adc	r22, r18
     422:	73 1f       	adc	r23, r19
     424:	68 01       	movw	r12, r16
     426:	79 01       	movw	r14, r18
     428:	c2 01       	movw	r24, r4
     42a:	0e 94 3f 19 	call	0x327e	; 0x327e <prvInsertTimerInActiveList>
     42e:	09 c0       	rjmp	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     430:	f2 01       	movw	r30, r4
     432:	87 89       	ldd	r24, Z+23	; 0x17
     434:	81 fd       	sbrc	r24, 1
     436:	03 c0       	rjmp	.+6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     438:	c2 01       	movw	r24, r4
     43a:	b6 d5       	rcall	.+2924   	; 0xfa8 <vPortFree>
     43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     43e:	8e 7f       	andi	r24, 0xFE	; 254
     440:	87 8b       	std	Z+23, r24	; 0x17
     442:	28 2d       	mov	r18, r8
     444:	39 2d       	mov	r19, r9
     446:	4a 2d       	mov	r20, r10
     448:	5b 2d       	mov	r21, r11
     44a:	66 2d       	mov	r22, r6
     44c:	77 2d       	mov	r23, r7
     44e:	80 91 04 19 	lds	r24, 0x1904	; 0x801904 <xTimerQueue>
     452:	90 91 05 19 	lds	r25, 0x1905	; 0x801905 <xTimerQueue+0x1>
     456:	0e 94 4b 0c 	call	0x1896	; 0x1896 <xQueueReceive>
     45a:	81 11       	cpse	r24, r1
     45c:	6d cf       	rjmp	.-294    	; 0x338 <prvTimerTask+0x130>
     45e:	e8 ce       	rjmp	.-560    	; 0x230 <prvTimerTask+0x28>
     460:	0e 94 ad 12 	call	0x255a	; 0x255a <vTaskSuspendAll>
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	0e 94 30 1a 	call	0x3460	; 0x3460 <prvSampleTimeNow>
     46c:	6b 87       	std	Y+11, r22	; 0x0b
     46e:	7c 87       	std	Y+12, r23	; 0x0c
     470:	8d 87       	std	Y+13, r24	; 0x0d
     472:	9e 87       	std	Y+14, r25	; 0x0e
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	81 11       	cpse	r24, r1
     478:	5c cf       	rjmp	.-328    	; 0x332 <prvTimerTask+0x12a>
     47a:	e0 91 06 19 	lds	r30, 0x1906	; 0x801906 <pxOverflowTimerList>
     47e:	f0 91 07 19 	lds	r31, 0x1907	; 0x801907 <pxOverflowTimerList+0x1>
     482:	80 81       	ld	r24, Z
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	81 11       	cpse	r24, r1
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	28 2c       	mov	r2, r8
     48c:	39 2c       	mov	r3, r9
     48e:	4a 2c       	mov	r4, r10
     490:	5b 2c       	mov	r5, r11
     492:	39 cf       	rjmp	.-398    	; 0x306 <prvTimerTask+0xfe>

00000494 <__ctors_end>:
     494:	11 24       	eor	r1, r1
     496:	1f be       	out	0x3f, r1	; 63
     498:	cf ef       	ldi	r28, 0xFF	; 255
     49a:	d1 e2       	ldi	r29, 0x21	; 33
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	00 e0       	ldi	r16, 0x00	; 0
     4a2:	0c bf       	out	0x3c, r16	; 60

000004a4 <__do_copy_data>:
     4a4:	18 e0       	ldi	r17, 0x08	; 8
     4a6:	a0 e0       	ldi	r26, 0x00	; 0
     4a8:	b2 e0       	ldi	r27, 0x02	; 2
     4aa:	e8 e6       	ldi	r30, 0x68	; 104
     4ac:	f0 e6       	ldi	r31, 0x60	; 96
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0b bf       	out	0x3b, r16	; 59
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__do_copy_data+0x14>
     4b4:	07 90       	elpm	r0, Z+
     4b6:	0d 92       	st	X+, r0
     4b8:	a8 35       	cpi	r26, 0x58	; 88
     4ba:	b1 07       	cpc	r27, r17
     4bc:	d9 f7       	brne	.-10     	; 0x4b4 <__do_copy_data+0x10>

000004be <__do_clear_bss>:
     4be:	2a e1       	ldi	r18, 0x1A	; 26
     4c0:	a8 e5       	ldi	r26, 0x58	; 88
     4c2:	b8 e0       	ldi	r27, 0x08	; 8
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <.do_clear_bss_start>

000004c6 <.do_clear_bss_loop>:
     4c6:	1d 92       	st	X+, r1

000004c8 <.do_clear_bss_start>:
     4c8:	ad 3c       	cpi	r26, 0xCD	; 205
     4ca:	b2 07       	cpc	r27, r18
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <.do_clear_bss_loop>
     4ce:	0e 94 37 1c 	call	0x386e	; 0x386e <main>
     4d2:	0c 94 32 30 	jmp	0x6064	; 0x6064 <_exit>

000004d6 <__bad_interrupt>:
     4d6:	94 cd       	rjmp	.-1240   	; 0x0 <__vectors>

000004d8 <CO2_handler_task>:
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, CO2_measure_bit, pdTRUE, pdTRUE, 500);
		if((measureBits & (CO2_measure_bit)) == (CO2_measure_bit))
		{
				return_code = mh_z19_take_meassuring();
				while(return_code != MHZ19_OK){
					printf("%s%i%s\n","Arduino CO2 measuring error! Return value: ",return_code," . Retrying..."); 
     4d8:	0f 2e       	mov	r0, r31
     4da:	fe e6       	ldi	r31, 0x6E	; 110
     4dc:	8f 2e       	mov	r8, r31
     4de:	f2 e0       	ldi	r31, 0x02	; 2
     4e0:	9f 2e       	mov	r9, r31
     4e2:	f0 2d       	mov	r31, r0
     4e4:	0f 2e       	mov	r0, r31
     4e6:	fd e7       	ldi	r31, 0x7D	; 125
     4e8:	af 2e       	mov	r10, r31
     4ea:	f2 e0       	ldi	r31, 0x02	; 2
     4ec:	bf 2e       	mov	r11, r31
     4ee:	f0 2d       	mov	r31, r0
     4f0:	c9 ea       	ldi	r28, 0xA9	; 169
     4f2:	d2 e0       	ldi	r29, 0x02	; 2
					vTaskDelay(50);
					return_code = mh_z19_take_meassuring();
				}
				vTaskDelay(100); // giving it some time to set the values
				printf("%s%i\n","Arduino measurement CO2: ", getCO2());	
     4f4:	0f 2e       	mov	r0, r31
     4f6:	f1 eb       	ldi	r31, 0xB1	; 177
     4f8:	6f 2e       	mov	r6, r31
     4fa:	f2 e0       	ldi	r31, 0x02	; 2
     4fc:	7f 2e       	mov	r7, r31
     4fe:	f0 2d       	mov	r31, r0
     500:	0f 2e       	mov	r0, r31
     502:	fb ec       	ldi	r31, 0xCB	; 203
     504:	4f 2e       	mov	r4, r31
     506:	f2 e0       	ldi	r31, 0x02	; 2
     508:	5f 2e       	mov	r5, r31
     50a:	f0 2d       	mov	r31, r0
{

	for (;;) 
	{
		
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, CO2_measure_bit, pdTRUE, pdTRUE, 500);
     50c:	0f 2e       	mov	r0, r31
     50e:	f4 ef       	ldi	r31, 0xF4	; 244
     510:	cf 2e       	mov	r12, r31
     512:	dd 24       	eor	r13, r13
     514:	d3 94       	inc	r13
     516:	e1 2c       	mov	r14, r1
     518:	f1 2c       	mov	r15, r1
     51a:	f0 2d       	mov	r31, r0
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	21 e0       	ldi	r18, 0x01	; 1
     520:	41 e0       	ldi	r20, 0x01	; 1
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	80 91 82 1a 	lds	r24, 0x1A82	; 0x801a82 <Measure_event_group>
     52c:	90 91 83 1a 	lds	r25, 0x1A83	; 0x801a83 <Measure_event_group+0x1>
     530:	dc d2       	rcall	.+1464   	; 0xaea <xEventGroupWaitBits>
		if((measureBits & (CO2_measure_bit)) == (CO2_measure_bit))
     532:	60 ff       	sbrs	r22, 0
     534:	eb cf       	rjmp	.-42     	; 0x50c <CO2_handler_task+0x34>
		{
				return_code = mh_z19_take_meassuring();
     536:	0e 94 ff 23 	call	0x47fe	; 0x47fe <mh_z19_take_meassuring>
     53a:	80 93 84 1a 	sts	0x1A84, r24	; 0x801a84 <return_code>
				while(return_code != MHZ19_OK){
     53e:	88 23       	and	r24, r24
     540:	f9 f0       	breq	.+62     	; 0x580 <CO2_handler_task+0xa8>
					printf("%s%i%s\n","Arduino CO2 measuring error! Return value: ",return_code," . Retrying..."); 
     542:	9f 92       	push	r9
     544:	8f 92       	push	r8
     546:	1f 92       	push	r1
     548:	8f 93       	push	r24
     54a:	bf 92       	push	r11
     54c:	af 92       	push	r10
     54e:	df 93       	push	r29
     550:	cf 93       	push	r28
     552:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <printf>
					vTaskDelay(50);
     556:	62 e3       	ldi	r22, 0x32	; 50
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 70 14 	call	0x28e0	; 0x28e0 <vTaskDelay>
					return_code = mh_z19_take_meassuring();
     562:	0e 94 ff 23 	call	0x47fe	; 0x47fe <mh_z19_take_meassuring>
     566:	80 93 84 1a 	sts	0x1A84, r24	; 0x801a84 <return_code>
		
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, CO2_measure_bit, pdTRUE, pdTRUE, 500);
		if((measureBits & (CO2_measure_bit)) == (CO2_measure_bit))
		{
				return_code = mh_z19_take_meassuring();
				while(return_code != MHZ19_OK){
     56a:	2d b7       	in	r18, 0x3d	; 61
     56c:	3e b7       	in	r19, 0x3e	; 62
     56e:	28 5f       	subi	r18, 0xF8	; 248
     570:	3f 4f       	sbci	r19, 0xFF	; 255
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	3e bf       	out	0x3e, r19	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	2d bf       	out	0x3d, r18	; 61
     57c:	81 11       	cpse	r24, r1
     57e:	e1 cf       	rjmp	.-62     	; 0x542 <CO2_handler_task+0x6a>
					printf("%s%i%s\n","Arduino CO2 measuring error! Return value: ",return_code," . Retrying..."); 
					vTaskDelay(50);
					return_code = mh_z19_take_meassuring();
				}
				vTaskDelay(100); // giving it some time to set the values
     580:	64 e6       	ldi	r22, 0x64	; 100
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 70 14 	call	0x28e0	; 0x28e0 <vTaskDelay>
				printf("%s%i\n","Arduino measurement CO2: ", getCO2());	
     58c:	af d1       	rcall	.+862    	; 0x8ec <getCO2>
     58e:	9f 93       	push	r25
     590:	8f 93       	push	r24
     592:	7f 92       	push	r7
     594:	6f 92       	push	r6
     596:	5f 92       	push	r5
     598:	4f 92       	push	r4
     59a:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <printf>
				xEventGroupSetBits(Data_event_group, CO2_data_bit);
     59e:	44 e0       	ldi	r20, 0x04	; 4
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	80 91 7e 1a 	lds	r24, 0x1A7E	; 0x801a7e <Data_event_group>
     5aa:	90 91 7f 1a 	lds	r25, 0x1A7F	; 0x801a7f <Data_event_group+0x1>
     5ae:	5d d3       	rcall	.+1722   	; 0xc6a <xEventGroupSetBits>
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	a7 cf       	rjmp	.-178    	; 0x50c <CO2_handler_task+0x34>

000005be <CO2Sensor_create>:
mh_z19_return_code_t return_code;
	
void CO2_handler_task( void *pvParameters );

void CO2Sensor_create()
{
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
	mh_z19_create(ser_USART3, setCO2);
     5c4:	69 e8       	ldi	r22, 0x89	; 137
     5c6:	74 e0       	ldi	r23, 0x04	; 4
     5c8:	83 e0       	ldi	r24, 0x03	; 3
     5ca:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <mh_z19_create>
	xTaskCreate(
     5ce:	e1 2c       	mov	r14, r1
     5d0:	f1 2c       	mov	r15, r1
     5d2:	02 e0       	ldi	r16, 0x02	; 2
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	48 e8       	ldi	r20, 0x88	; 136
     5da:	51 e0       	ldi	r21, 0x01	; 1
     5dc:	61 ed       	ldi	r22, 0xD1	; 209
     5de:	72 e0       	ldi	r23, 0x02	; 2
     5e0:	8c e6       	ldi	r24, 0x6C	; 108
     5e2:	92 e0       	ldi	r25, 0x02	; 2
     5e4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <xTaskCreate>
		configMINIMAL_STACK_SIZE+200,
		NULL,
		2,
		NULL 
	);
}
     5e8:	0f 91       	pop	r16
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	08 95       	ret

000005f0 <lora_send_task_create>:
extern QueueHandle_t CO2_Queue;

static lora_payload_t _uplink_payload;

void lora_send_task_create(UBaseType_t lora_handler_task_priority)
{
     5f0:	ef 92       	push	r14
     5f2:	ff 92       	push	r15
     5f4:	0f 93       	push	r16
     5f6:	08 2f       	mov	r16, r24
	CO2_Queue = xQueueCreate(10,sizeof(int));
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	62 e0       	ldi	r22, 0x02	; 2
     5fc:	8a e0       	ldi	r24, 0x0A	; 10
     5fe:	0e 94 29 0b 	call	0x1652	; 0x1652 <xQueueGenericCreate>
     602:	90 93 8a 1a 	sts	0x1A8A, r25	; 0x801a8a <CO2_Queue+0x1>
     606:	80 93 89 1a 	sts	0x1A89, r24	; 0x801a89 <CO2_Queue>
	//Humidity_Queue = xQueueCreate(10,sizeof(float));
	//Temperature_Queue = xQueueCreate(10,sizeof(float));
	
	xTaskCreate(
     60a:	e1 2c       	mov	r14, r1
     60c:	f1 2c       	mov	r15, r1
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	48 e8       	ldi	r20, 0x88	; 136
     614:	51 e0       	ldi	r21, 0x01	; 1
     616:	6d ed       	ldi	r22, 0xDD	; 221
     618:	72 e0       	ldi	r23, 0x02	; 2
     61a:	8f ed       	ldi	r24, 0xDF	; 223
     61c:	93 e0       	ldi	r25, 0x03	; 3
     61e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

}
     622:	0f 91       	pop	r16
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	08 95       	ret

0000062a <lora_setup>:
	,  NULL );
}
*/


bool lora_setup(){
     62a:	ef 92       	push	r14
     62c:	ff 92       	push	r15
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
	e_LoRa_return_code_t return_code;
	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     634:	0e 94 2b 20 	call	0x4056	; 0x4056 <lora_driver_rn2483_factory_reset>
     638:	0e 94 a8 22 	call	0x4550	; 0x4550 <lora_driver_map_return_code_to_text>
     63c:	9f 93       	push	r25
     63e:	8f 93       	push	r24
     640:	84 ee       	ldi	r24, 0xE4	; 228
     642:	92 e0       	ldi	r25, 0x02	; 2
     644:	9f 93       	push	r25
     646:	8f 93       	push	r24
     648:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <printf>
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     64c:	0e 94 a9 21 	call	0x4352	; 0x4352 <lora_driver_configure_to_eu868>
     650:	0e 94 a8 22 	call	0x4550	; 0x4550 <lora_driver_map_return_code_to_text>
     654:	9f 93       	push	r25
     656:	8f 93       	push	r24
     658:	87 ef       	ldi	r24, 0xF7	; 247
     65a:	92 e0       	ldi	r25, 0x02	; 2
     65c:	9f 93       	push	r25
     65e:	8f 93       	push	r24
     660:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <printf>
	// Get the transceivers HW EUI
	return_code = lora_driver_get_rn2483_hweui(_out_buf);
     664:	8f e6       	ldi	r24, 0x6F	; 111
     666:	98 e0       	ldi	r25, 0x08	; 8
     668:	0e 94 3d 20 	call	0x407a	; 0x407a <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(return_code), _out_buf);
     66c:	0e 94 a8 22 	call	0x4550	; 0x4550 <lora_driver_map_return_code_to_text>
     670:	cf e6       	ldi	r28, 0x6F	; 111
     672:	d8 e0       	ldi	r29, 0x08	; 8
     674:	df 93       	push	r29
     676:	cf 93       	push	r28
     678:	9f 93       	push	r25
     67a:	8f 93       	push	r24
     67c:	80 e1       	ldi	r24, 0x10	; 16
     67e:	93 e0       	ldi	r25, 0x03	; 3
     680:	9f 93       	push	r25
     682:	8f 93       	push	r24
     684:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <printf>
	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     688:	ce 01       	movw	r24, r28
     68a:	0e 94 59 20 	call	0x40b2	; 0x40b2 <lora_driver_set_device_identifier>
     68e:	0e 94 a8 22 	call	0x4550	; 0x4550 <lora_driver_map_return_code_to_text>
     692:	9f 93       	push	r25
     694:	8f 93       	push	r24
     696:	df 93       	push	r29
     698:	cf 93       	push	r28
     69a:	84 e2       	ldi	r24, 0x24	; 36
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	9f 93       	push	r25
     6a0:	8f 93       	push	r24
     6a2:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <printf>
	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     6a6:	ae 01       	movw	r20, r28
     6a8:	69 e3       	ldi	r22, 0x39	; 57
     6aa:	73 e0       	ldi	r23, 0x03	; 3
     6ac:	8a e5       	ldi	r24, 0x5A	; 90
     6ae:	93 e0       	ldi	r25, 0x03	; 3
     6b0:	0e 94 87 22 	call	0x450e	; 0x450e <lora_driver_set_otaa_identity>
     6b4:	0e 94 a8 22 	call	0x4550	; 0x4550 <lora_driver_map_return_code_to_text>
     6b8:	9f 93       	push	r25
     6ba:	8f 93       	push	r24
     6bc:	df 93       	push	r29
     6be:	cf 93       	push	r28
     6c0:	89 e3       	ldi	r24, 0x39	; 57
     6c2:	93 e0       	ldi	r25, 0x03	; 3
     6c4:	9f 93       	push	r25
     6c6:	8f 93       	push	r24
     6c8:	8a e5       	ldi	r24, 0x5A	; 90
     6ca:	93 e0       	ldi	r25, 0x03	; 3
     6cc:	9f 93       	push	r25
     6ce:	8f 93       	push	r24
     6d0:	8b e6       	ldi	r24, 0x6B	; 107
     6d2:	93 e0       	ldi	r25, 0x03	; 3
     6d4:	9f 93       	push	r25
     6d6:	8f 93       	push	r24
     6d8:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <printf>
	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     6dc:	0e 94 8c 20 	call	0x4118	; 0x4118 <lora_driver_save_mac>
     6e0:	0e 94 a8 22 	call	0x4550	; 0x4550 <lora_driver_map_return_code_to_text>
     6e4:	9f 93       	push	r25
     6e6:	8f 93       	push	r24
     6e8:	81 ea       	ldi	r24, 0xA1	; 161
     6ea:	93 e0       	ldi	r25, 0x03	; 3
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <printf>
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     6f4:	8d b7       	in	r24, 0x3d	; 61
     6f6:	9e b7       	in	r25, 0x3e	; 62
     6f8:	82 96       	adiw	r24, 0x22	; 34
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	f8 94       	cli
     6fe:	9e bf       	out	0x3e, r25	; 62
     700:	0f be       	out	0x3f, r0	; 63
     702:	8d bf       	out	0x3d, r24	; 61
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	0e 94 86 21 	call	0x430c	; 0x430c <lora_driver_set_adaptive_data_rate>
     70a:	0e 94 a8 22 	call	0x4550	; 0x4550 <lora_driver_map_return_code_to_text>
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	80 eb       	ldi	r24, 0xB0	; 176
     714:	93 e0       	ldi	r25, 0x03	; 3
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <printf>
	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     71e:	84 ef       	ldi	r24, 0xF4	; 244
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	0e 94 91 21 	call	0x4322	; 0x4322 <lora_driver_set_receive_delay>
     726:	0e 94 a8 22 	call	0x4550	; 0x4550 <lora_driver_map_return_code_to_text>
     72a:	9f 93       	push	r25
     72c:	8f 93       	push	r24
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	8f 93       	push	r24
     732:	84 ef       	ldi	r24, 0xF4	; 244
     734:	8f 93       	push	r24
     736:	81 ed       	ldi	r24, 0xD1	; 209
     738:	93 e0       	ldi	r25, 0x03	; 3
     73a:	9f 93       	push	r25
     73c:	8f 93       	push	r24
     73e:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <printf>
     742:	8d b7       	in	r24, 0x3d	; 61
     744:	9e b7       	in	r25, 0x3e	; 62
     746:	0a 96       	adiw	r24, 0x0a	; 10
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	9e bf       	out	0x3e, r25	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	8d bf       	out	0x3d, r24	; 61
     752:	c3 e0       	ldi	r28, 0x03	; 3
     754:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 3; // This is 3 because after 3rd connection attempt Loriot responds "no free channel"
	
		do {
			return_code = lora_driver_join(LoRa_OTAA);
			printf("Join Network TriesLeft: %d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(return_code));
     756:	0f 2e       	mov	r0, r31
     758:	f1 ef       	ldi	r31, 0xF1	; 241
     75a:	ef 2e       	mov	r14, r31
     75c:	f3 e0       	ldi	r31, 0x03	; 3
     75e:	ff 2e       	mov	r15, r31
     760:	f0 2d       	mov	r31, r0
	//xMessageBuffer = xMessageBufferCreate( 10 );
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 3; // This is 3 because after 3rd connection attempt Loriot responds "no free channel"
	
		do {
			return_code = lora_driver_join(LoRa_OTAA);
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	0e 94 92 20 	call	0x4124	; 0x4124 <lora_driver_join>
     768:	18 2f       	mov	r17, r24
			printf("Join Network TriesLeft: %d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(return_code));
     76a:	0e 94 a8 22 	call	0x4550	; 0x4550 <lora_driver_map_return_code_to_text>
     76e:	9f 93       	push	r25
     770:	8f 93       	push	r24
     772:	df 93       	push	r29
     774:	cf 93       	push	r28
     776:	ff 92       	push	r15
     778:	ef 92       	push	r14
     77a:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <printf>

			if(return_code == LoRa_NO_FREE_CH){
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	13 30       	cpi	r17, 0x03	; 3
     78c:	79 f0       	breq	.+30     	; 0x7ac <lora_setup+0x182>
				return 0;
			}

			else if ( return_code != LoRa_ACCEPTED && return_code != LoRa_NO_FREE_CH)
     78e:	18 30       	cpi	r17, 0x08	; 8
     790:	79 f0       	breq	.+30     	; 0x7b0 <lora_setup+0x186>
			{
				// Make the red led pulse to tell something went wrong
				led_long_puls(led_ST1); // OPTIONAL
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <led_long_puls>
				// Wait 5 sec and lets try again
				vTaskDelay(pdMS_TO_TICKS(5000UL));
     798:	66 e3       	ldi	r22, 0x36	; 54
     79a:	71 e0       	ldi	r23, 0x01	; 1
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 70 14 	call	0x28e0	; 0x28e0 <vTaskDelay>
     7a4:	21 97       	sbiw	r28, 0x01	; 1
			else if(return_code == LoRa_ACCEPTED)
			{
				return 1;
			}
			
		} while (--maxJoinTriesLeft);
     7a6:	e9 f6       	brne	.-70     	; 0x762 <lora_setup+0x138>
		
		
			return 0;
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <lora_setup+0x188>
		do {
			return_code = lora_driver_join(LoRa_OTAA);
			printf("Join Network TriesLeft: %d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(return_code));

			if(return_code == LoRa_NO_FREE_CH){
				return 0;
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <lora_setup+0x188>
				vTaskDelay(pdMS_TO_TICKS(5000UL));
			}
			
			else if(return_code == LoRa_ACCEPTED)
			{
				return 1;
     7b0:	81 e0       	ldi	r24, 0x01	; 1
			
		} while (--maxJoinTriesLeft);
		
		
			return 0;
}
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	ff 90       	pop	r15
     7ba:	ef 90       	pop	r14
     7bc:	08 95       	ret

000007be <lora_send_task>:

/*-----------------------------------------------------------*/
void lora_send_task( void *pvParameters ){
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <lora_send_task+0x6>
     7c4:	1f 92       	push	r1
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
			setup_value = lora_setup();	
		}
		
	

		_uplink_payload.len = 6;
     7ca:	0f 2e       	mov	r0, r31
     7cc:	f9 e5       	ldi	r31, 0x59	; 89
     7ce:	af 2e       	mov	r10, r31
     7d0:	f8 e0       	ldi	r31, 0x08	; 8
     7d2:	bf 2e       	mov	r11, r31
     7d4:	f0 2d       	mov	r31, r0
     7d6:	0f 2e       	mov	r0, r31
     7d8:	f6 e0       	ldi	r31, 0x06	; 6
     7da:	5f 2e       	mov	r5, r31
     7dc:	f0 2d       	mov	r31, r0
		_uplink_payload.port_no = 2;
     7de:	68 94       	set
     7e0:	66 24       	eor	r6, r6
     7e2:	61 f8       	bld	r6, 1
					_uplink_payload.bytes[2] = temp >> 8;
					_uplink_payload.bytes[3] = temp & 0xFF;
					_uplink_payload.bytes[4] = co2_ppm >> 8;
					_uplink_payload.bytes[5] = co2_ppm & 0xFF;
					rc = lora_driver_sent_upload_message(false, &_uplink_payload);
					printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(rc));
     7e4:	0f 2e       	mov	r0, r31
     7e6:	f2 e1       	ldi	r31, 0x12	; 18
     7e8:	8f 2e       	mov	r8, r31
     7ea:	f4 e0       	ldi	r31, 0x04	; 4
     7ec:	9f 2e       	mov	r9, r31
     7ee:	f0 2d       	mov	r31, r0
					//xQueueReceive(CO2_Queue, &co2_ppm, 0);
					//xQueueReceive(Temperature_Queue, &temp, 0);
					//xQueueReceive(Humidity_Queue, &hum, 0);
					

					_uplink_payload.bytes[0] = hum >> 8;
     7f0:	7a 2c       	mov	r7, r10
     7f2:	1b 2d       	mov	r17, r11
	while(1)
	{
		static e_LoRa_return_code_t rc;
		
		// Hardware reset of LoRaWAN transceiver
		lora_driver_reset_rn2483(1);
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	0e 94 17 20 	call	0x402e	; 0x402e <lora_driver_reset_rn2483>
		vTaskDelay(2);
     7fa:	62 e0       	ldi	r22, 0x02	; 2
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 70 14 	call	0x28e0	; 0x28e0 <vTaskDelay>
		lora_driver_reset_rn2483(0);
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	0e 94 17 20 	call	0x402e	; 0x402e <lora_driver_reset_rn2483>
		// Give it a chance to wakeup
		vTaskDelay(150);
     80c:	66 e9       	ldi	r22, 0x96	; 150
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 70 14 	call	0x28e0	; 0x28e0 <vTaskDelay>

		lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     818:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <lora_driver_flush_buffers>
	
		bool setup_value = 0;
	
		while(setup_value == 0){
			setup_value = lora_setup();	
     81c:	06 df       	rcall	.-500    	; 0x62a <lora_setup>

		lora_driver_flush_buffers(); // get rid of first version string from module after reset!
	
		bool setup_value = 0;
	
		while(setup_value == 0){
     81e:	88 23       	and	r24, r24
     820:	e9 f3       	breq	.-6      	; 0x81c <lora_send_task+0x5e>
			setup_value = lora_setup();	
		}
		
	

		_uplink_payload.len = 6;
     822:	f5 01       	movw	r30, r10
     824:	51 82       	std	Z+1, r5	; 0x01
		_uplink_payload.port_no = 2;
     826:	60 82       	st	Z, r6

		 TickType_t xLastWakeTime;
		 const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
		 xLastWakeTime = xTaskGetTickCount();
     828:	0e 94 b3 12 	call	0x2566	; 0x2566 <xTaskGetTickCount>
     82c:	69 83       	std	Y+1, r22	; 0x01
     82e:	7a 83       	std	Y+2, r23	; 0x02
     830:	8b 83       	std	Y+3, r24	; 0x03
     832:	9c 83       	std	Y+4, r25	; 0x04
		 while(1)
		 {
		//	EventBits_t sendBit	= xEventGroupWaitBits(Send_receive_event_group, Lora_send_bit, pdTRUE, pdTRUE, 500);
			
		//	if((sendBit & Lora_send_bit) == (Lora_send_bit)){
				vTaskDelayUntil( &xLastWakeTime, xFrequency ); 
     834:	44 e4       	ldi	r20, 0x44	; 68
     836:	57 e0       	ldi	r21, 0x07	; 7
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	ce 01       	movw	r24, r28
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	0e 94 12 14 	call	0x2824	; 0x2824 <vTaskDelayUntil>
				xEventGroupSetBits(Measure_event_group, CO2_measure_bit|Hum_temp_measure_bit);
     844:	43 e0       	ldi	r20, 0x03	; 3
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	80 91 82 1a 	lds	r24, 0x1A82	; 0x801a82 <Measure_event_group>
     850:	90 91 83 1a 	lds	r25, 0x1A83	; 0x801a83 <Measure_event_group+0x1>
     854:	0a d2       	rcall	.+1044   	; 0xc6a <xEventGroupSetBits>
		
		
				EventBits_t dataBits = xEventGroupWaitBits(Data_event_group, CO2_data_bit|Hum_temp_data_bit, pdTRUE, pdTRUE, 500);
     856:	0f 2e       	mov	r0, r31
     858:	f4 ef       	ldi	r31, 0xF4	; 244
     85a:	cf 2e       	mov	r12, r31
     85c:	dd 24       	eor	r13, r13
     85e:	d3 94       	inc	r13
     860:	e1 2c       	mov	r14, r1
     862:	f1 2c       	mov	r15, r1
     864:	f0 2d       	mov	r31, r0
     866:	01 e0       	ldi	r16, 0x01	; 1
     868:	21 e0       	ldi	r18, 0x01	; 1
     86a:	4c e0       	ldi	r20, 0x0C	; 12
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	80 91 7e 1a 	lds	r24, 0x1A7E	; 0x801a7e <Data_event_group>
     876:	90 91 7f 1a 	lds	r25, 0x1A7F	; 0x801a7f <Data_event_group+0x1>
     87a:	37 d1       	rcall	.+622    	; 0xaea <xEventGroupWaitBits>
		
				if((dataBits & (CO2_data_bit|Hum_temp_data_bit)) == (CO2_data_bit|Hum_temp_data_bit)){
     87c:	dc 01       	movw	r26, r24
     87e:	cb 01       	movw	r24, r22
     880:	8c 70       	andi	r24, 0x0C	; 12
     882:	99 27       	eor	r25, r25
     884:	aa 27       	eor	r26, r26
     886:	bb 27       	eor	r27, r27
     888:	0c 97       	sbiw	r24, 0x0c	; 12
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
					
					
					uint16_t hum = (int) getHumidity();
     88e:	91 f6       	brne	.-92     	; 0x834 <lora_send_task+0x76>
     890:	70 d0       	rcall	.+224    	; 0x972 <getHumidity>
     892:	0e 94 47 1c 	call	0x388e	; 0x388e <__fixsfsi>
     896:	e6 2e       	mov	r14, r22
					int16_t temp = (int) getTemperature();
     898:	d7 2e       	mov	r13, r23
     89a:	b1 d0       	rcall	.+354    	; 0x9fe <getTemperature>
     89c:	0e 94 47 1c 	call	0x388e	; 0x388e <__fixsfsi>
     8a0:	06 2f       	mov	r16, r22
					uint16_t co2_ppm = getCO2();
     8a2:	f7 2e       	mov	r15, r23
     8a4:	23 d0       	rcall	.+70     	; 0x8ec <getCO2>
					//xQueueReceive(CO2_Queue, &co2_ppm, 0);
					//xQueueReceive(Temperature_Queue, &temp, 0);
					//xQueueReceive(Humidity_Queue, &hum, 0);
					

					_uplink_payload.bytes[0] = hum >> 8;
     8a6:	f5 01       	movw	r30, r10
     8a8:	d2 82       	std	Z+2, r13	; 0x02
					_uplink_payload.bytes[1] = hum & 0xFF;
     8aa:	e3 82       	std	Z+3, r14	; 0x03
					_uplink_payload.bytes[2] = temp >> 8;
     8ac:	f4 82       	std	Z+4, r15	; 0x04
					_uplink_payload.bytes[3] = temp & 0xFF;
     8ae:	05 83       	std	Z+5, r16	; 0x05
					_uplink_payload.bytes[4] = co2_ppm >> 8;
     8b0:	96 83       	std	Z+6, r25	; 0x06
					_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     8b2:	87 83       	std	Z+7, r24	; 0x07
					rc = lora_driver_sent_upload_message(false, &_uplink_payload);
     8b4:	67 2d       	mov	r22, r7
     8b6:	71 2f       	mov	r23, r17
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	0e 94 bb 20 	call	0x4176	; 0x4176 <lora_driver_sent_upload_message>
     8be:	80 93 58 08 	sts	0x0858, r24	; 0x800858 <__data_end>
					printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(rc));
     8c2:	0e 94 a8 22 	call	0x4550	; 0x4550 <lora_driver_map_return_code_to_text>
     8c6:	9f 93       	push	r25
     8c8:	8f 93       	push	r24
     8ca:	9f 92       	push	r9
     8cc:	8f 92       	push	r8
     8ce:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <printf>
					if(rc == LoRa_NO_FREE_CH){
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <__data_end>
     8de:	83 30       	cpi	r24, 0x03	; 3
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <lora_send_task+0x126>
     8e2:	88 cf       	rjmp	.-240    	; 0x7f4 <lora_send_task+0x36>
						break;
					}
					led_short_puls(led_ST4);
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <led_short_puls>
     8ea:	a4 cf       	rjmp	.-184    	; 0x834 <lora_send_task+0x76>

000008ec <getCO2>:
//extern QueueHandle_t Temperature_Queue;
//extern QueueHandle_t Humidity_Queue;


uint16_t getCO2(){
	while(isTaken_CO2){	
     8ec:	80 91 d5 08 	lds	r24, 0x08D5	; 0x8008d5 <isTaken_CO2>
     8f0:	88 23       	and	r24, r24
     8f2:	51 f0       	breq	.+20     	; 0x908 <getCO2+0x1c>
		vTaskDelay(50);
     8f4:	62 e3       	ldi	r22, 0x32	; 50
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 70 14 	call	0x28e0	; 0x28e0 <vTaskDelay>
//extern QueueHandle_t Temperature_Queue;
//extern QueueHandle_t Humidity_Queue;


uint16_t getCO2(){
	while(isTaken_CO2){	
     900:	80 91 d5 08 	lds	r24, 0x08D5	; 0x8008d5 <isTaken_CO2>
     904:	81 11       	cpse	r24, r1
     906:	f6 cf       	rjmp	.-20     	; 0x8f4 <getCO2+0x8>
		vTaskDelay(50);
	}
	return local_CO2;

}
     908:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <local_CO2>
     90c:	90 91 a6 1a 	lds	r25, 0x1AA6	; 0x801aa6 <local_CO2+0x1>
     910:	08 95       	ret

00000912 <setCO2>:

void setCO2(uint16_t CO2){
     912:	0f 93       	push	r16
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	ec 01       	movw	r28, r24
	xSemaphoreTake(Mutex_CO2,1000);
     91a:	48 ee       	ldi	r20, 0xE8	; 232
     91c:	53 e0       	ldi	r21, 0x03	; 3
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <Mutex_CO2>
     926:	90 91 88 1a 	lds	r25, 0x1A88	; 0x801a88 <Mutex_CO2+0x1>
     92a:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <xQueueSemaphoreTake>
	isTaken_CO2 = 1;
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	80 93 d5 08 	sts	0x08D5, r24	; 0x8008d5 <isTaken_CO2>
	local_CO2 = CO2;
     934:	d0 93 a6 1a 	sts	0x1AA6, r29	; 0x801aa6 <local_CO2+0x1>
     938:	c0 93 a5 1a 	sts	0x1AA5, r28	; 0x801aa5 <local_CO2>
	xQueueSend(CO2_Queue, &local_CO2,portMAX_DELAY); // enqueue it
     93c:	00 e0       	ldi	r16, 0x00	; 0
     93e:	2f ef       	ldi	r18, 0xFF	; 255
     940:	3f ef       	ldi	r19, 0xFF	; 255
     942:	a9 01       	movw	r20, r18
     944:	65 ea       	ldi	r22, 0xA5	; 165
     946:	7a e1       	ldi	r23, 0x1A	; 26
     948:	80 91 89 1a 	lds	r24, 0x1A89	; 0x801a89 <CO2_Queue>
     94c:	90 91 8a 1a 	lds	r25, 0x1A8A	; 0x801a8a <CO2_Queue+0x1>
     950:	ae d6       	rcall	.+3420   	; 0x16ae <xQueueGenericSend>
	xSemaphoreGive(Mutex_CO2);
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	a9 01       	movw	r20, r18
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <Mutex_CO2>
     960:	90 91 88 1a 	lds	r25, 0x1A88	; 0x801a88 <Mutex_CO2+0x1>
     964:	a4 d6       	rcall	.+3400   	; 0x16ae <xQueueGenericSend>
	isTaken_CO2 = 0;
     966:	10 92 d5 08 	sts	0x08D5, r1	; 0x8008d5 <isTaken_CO2>
}
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	0f 91       	pop	r16
     970:	08 95       	ret

00000972 <getHumidity>:

float getHumidity(){
	while(isTaken_humidity){
     972:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <isTaken_humidity>
     976:	88 23       	and	r24, r24
     978:	51 f0       	breq	.+20     	; 0x98e <getHumidity+0x1c>
		vTaskDelay(50);
     97a:	62 e3       	ldi	r22, 0x32	; 50
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 70 14 	call	0x28e0	; 0x28e0 <vTaskDelay>
	xSemaphoreGive(Mutex_CO2);
	isTaken_CO2 = 0;
}

float getHumidity(){
	while(isTaken_humidity){
     986:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <isTaken_humidity>
     98a:	81 11       	cpse	r24, r1
     98c:	f6 cf       	rjmp	.-20     	; 0x97a <getHumidity+0x8>
		vTaskDelay(50);
	}
	return local_humidity;
     98e:	60 91 a7 1a 	lds	r22, 0x1AA7	; 0x801aa7 <local_humidity>
     992:	70 91 a8 1a 	lds	r23, 0x1AA8	; 0x801aa8 <local_humidity+0x1>
     996:	80 91 a9 1a 	lds	r24, 0x1AA9	; 0x801aa9 <local_humidity+0x2>
     99a:	90 91 aa 1a 	lds	r25, 0x1AAA	; 0x801aaa <local_humidity+0x3>
}
     99e:	08 95       	ret

000009a0 <setHumidity>:
void setHumidity(float humidity_level){
     9a0:	cf 92       	push	r12
     9a2:	df 92       	push	r13
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	6b 01       	movw	r12, r22
     9ac:	7c 01       	movw	r14, r24
	xSemaphoreTake(Mutex_humidity,1000);
     9ae:	48 ee       	ldi	r20, 0xE8	; 232
     9b0:	53 e0       	ldi	r21, 0x03	; 3
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <Mutex_humidity>
     9ba:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <Mutex_humidity+0x1>
     9be:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <xQueueSemaphoreTake>
	isTaken_humidity = 1;
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	80 93 d4 08 	sts	0x08D4, r24	; 0x8008d4 <isTaken_humidity>
	local_humidity = humidity_level;
     9c8:	c0 92 a7 1a 	sts	0x1AA7, r12	; 0x801aa7 <local_humidity>
     9cc:	d0 92 a8 1a 	sts	0x1AA8, r13	; 0x801aa8 <local_humidity+0x1>
     9d0:	e0 92 a9 1a 	sts	0x1AA9, r14	; 0x801aa9 <local_humidity+0x2>
     9d4:	f0 92 aa 1a 	sts	0x1AAA, r15	; 0x801aaa <local_humidity+0x3>
	//xQueueSend(Humidity_Queue, &local_humidity,portMAX_DELAY);
	xSemaphoreGive(Mutex_humidity);
     9d8:	00 e0       	ldi	r16, 0x00	; 0
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	a9 01       	movw	r20, r18
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <Mutex_humidity>
     9e8:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <Mutex_humidity+0x1>
     9ec:	60 d6       	rcall	.+3264   	; 0x16ae <xQueueGenericSend>
	isTaken_humidity = 0;
     9ee:	10 92 d4 08 	sts	0x08D4, r1	; 0x8008d4 <isTaken_humidity>
}
     9f2:	0f 91       	pop	r16
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	df 90       	pop	r13
     9fa:	cf 90       	pop	r12
     9fc:	08 95       	ret

000009fe <getTemperature>:

float getTemperature(){
	while(isTaken_temperature){
     9fe:	80 91 d3 08 	lds	r24, 0x08D3	; 0x8008d3 <isTaken_temperature>
     a02:	88 23       	and	r24, r24
     a04:	51 f0       	breq	.+20     	; 0xa1a <getTemperature+0x1c>
		vTaskDelay(50);
     a06:	62 e3       	ldi	r22, 0x32	; 50
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 70 14 	call	0x28e0	; 0x28e0 <vTaskDelay>
	xSemaphoreGive(Mutex_humidity);
	isTaken_humidity = 0;
}

float getTemperature(){
	while(isTaken_temperature){
     a12:	80 91 d3 08 	lds	r24, 0x08D3	; 0x8008d3 <isTaken_temperature>
     a16:	81 11       	cpse	r24, r1
     a18:	f6 cf       	rjmp	.-20     	; 0xa06 <getTemperature+0x8>
		vTaskDelay(50);
	}
	return local_temperature;
     a1a:	60 91 a1 1a 	lds	r22, 0x1AA1	; 0x801aa1 <local_temperature>
     a1e:	70 91 a2 1a 	lds	r23, 0x1AA2	; 0x801aa2 <local_temperature+0x1>
     a22:	80 91 a3 1a 	lds	r24, 0x1AA3	; 0x801aa3 <local_temperature+0x2>
     a26:	90 91 a4 1a 	lds	r25, 0x1AA4	; 0x801aa4 <local_temperature+0x3>
}
     a2a:	08 95       	ret

00000a2c <setTemperature>:
void setTemperature(float temperature_level){
     a2c:	cf 92       	push	r12
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	6b 01       	movw	r12, r22
     a38:	7c 01       	movw	r14, r24
	xSemaphoreTake(Mutex_temperature,1000);
     a3a:	48 ee       	ldi	r20, 0xE8	; 232
     a3c:	53 e0       	ldi	r21, 0x03	; 3
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	80 91 85 1a 	lds	r24, 0x1A85	; 0x801a85 <Mutex_temperature>
     a46:	90 91 86 1a 	lds	r25, 0x1A86	; 0x801a86 <Mutex_temperature+0x1>
     a4a:	be d7       	rcall	.+3964   	; 0x19c8 <xQueueSemaphoreTake>
	isTaken_temperature = 1;
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	80 93 d3 08 	sts	0x08D3, r24	; 0x8008d3 <isTaken_temperature>
	local_temperature = temperature_level;
     a52:	c0 92 a1 1a 	sts	0x1AA1, r12	; 0x801aa1 <local_temperature>
     a56:	d0 92 a2 1a 	sts	0x1AA2, r13	; 0x801aa2 <local_temperature+0x1>
     a5a:	e0 92 a3 1a 	sts	0x1AA3, r14	; 0x801aa3 <local_temperature+0x2>
     a5e:	f0 92 a4 1a 	sts	0x1AA4, r15	; 0x801aa4 <local_temperature+0x3>
//	xQueueSend(Temperature_Queue, &temperature_level,portMAX_DELAY);
	xSemaphoreGive(Mutex_temperature);
     a62:	00 e0       	ldi	r16, 0x00	; 0
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	a9 01       	movw	r20, r18
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	80 91 85 1a 	lds	r24, 0x1A85	; 0x801a85 <Mutex_temperature>
     a72:	90 91 86 1a 	lds	r25, 0x1A86	; 0x801a86 <Mutex_temperature+0x1>
     a76:	1b d6       	rcall	.+3126   	; 0x16ae <xQueueGenericSend>
	isTaken_temperature = 0;
     a78:	10 92 d3 08 	sts	0x08D3, r1	; 0x8008d3 <isTaken_temperature>
}
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	08 95       	ret

00000a88 <init_resources>:



void init_resources(){
	
	 local_CO2 = (uint16_t)pvPortMalloc(sizeof(uint16_t));
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	d4 d1       	rcall	.+936    	; 0xe36 <pvPortMalloc>
     a8e:	90 93 a6 1a 	sts	0x1AA6, r25	; 0x801aa6 <local_CO2+0x1>
     a92:	80 93 a5 1a 	sts	0x1AA5, r24	; 0x801aa5 <local_CO2>
     a96:	08 95       	ret

00000a98 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     a98:	e7 e0       	ldi	r30, 0x07	; 7
     a9a:	f1 e0       	ldi	r31, 0x01	; 1
     a9c:	80 81       	ld	r24, Z
     a9e:	8f 60       	ori	r24, 0x0F	; 15
     aa0:	80 83       	st	Z, r24
     aa2:	08 95       	ret

00000aa4 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     aa4:	e8 e0       	ldi	r30, 0x08	; 8
     aa6:	f1 e0       	ldi	r31, 0x01	; 1
     aa8:	90 81       	ld	r25, Z
     aaa:	90 7f       	andi	r25, 0xF0	; 240
     aac:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     aae:	90 81       	ld	r25, Z
     ab0:	8f 70       	andi	r24, 0x0F	; 15
     ab2:	98 2b       	or	r25, r24
     ab4:	90 83       	st	Z, r25
     ab6:	08 95       	ret

00000ab8 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     ab8:	e8 e0       	ldi	r30, 0x08	; 8
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	80 81       	ld	r24, Z
     abe:	80 7f       	andi	r24, 0xF0	; 240
     ac0:	80 83       	st	Z, r24
     ac2:	08 95       	ret

00000ac4 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	80 e1       	ldi	r24, 0x10	; 16
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	b4 d1       	rcall	.+872    	; 0xe36 <pvPortMalloc>
     ace:	ec 01       	movw	r28, r24
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	39 f0       	breq	.+14     	; 0xae2 <xEventGroupCreate+0x1e>
     ad4:	fc 01       	movw	r30, r24
     ad6:	11 92       	st	Z+, r1
     ad8:	11 92       	st	Z+, r1
     ada:	11 92       	st	Z+, r1
     adc:	11 92       	st	Z+, r1
     ade:	cf 01       	movw	r24, r30
     ae0:	94 d2       	rcall	.+1320   	; 0x100a <vListInitialise>
     ae2:	ce 01       	movw	r24, r28
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <xEventGroupWaitBits>:
     aea:	2f 92       	push	r2
     aec:	3f 92       	push	r3
     aee:	4f 92       	push	r4
     af0:	5f 92       	push	r5
     af2:	6f 92       	push	r6
     af4:	7f 92       	push	r7
     af6:	8f 92       	push	r8
     af8:	9f 92       	push	r9
     afa:	af 92       	push	r10
     afc:	bf 92       	push	r11
     afe:	cf 92       	push	r12
     b00:	df 92       	push	r13
     b02:	ef 92       	push	r14
     b04:	ff 92       	push	r15
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	ec 01       	movw	r28, r24
     b10:	4a 01       	movw	r8, r20
     b12:	5b 01       	movw	r10, r22
     b14:	62 2e       	mov	r6, r18
     b16:	70 2e       	mov	r7, r16
     b18:	0e 94 ad 12 	call	0x255a	; 0x255a <vTaskSuspendAll>
     b1c:	28 80       	ld	r2, Y
     b1e:	39 80       	ldd	r3, Y+1	; 0x01
     b20:	4a 80       	ldd	r4, Y+2	; 0x02
     b22:	5b 80       	ldd	r5, Y+3	; 0x03
     b24:	01 11       	cpse	r16, r1
     b26:	0d c0       	rjmp	.+26     	; 0xb42 <xEventGroupWaitBits+0x58>
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	b2 01       	movw	r22, r4
     b2c:	a1 01       	movw	r20, r2
     b2e:	48 21       	and	r20, r8
     b30:	59 21       	and	r21, r9
     b32:	6a 21       	and	r22, r10
     b34:	7b 21       	and	r23, r11
     b36:	45 2b       	or	r20, r21
     b38:	46 2b       	or	r20, r22
     b3a:	47 2b       	or	r20, r23
     b3c:	79 f4       	brne	.+30     	; 0xb5c <xEventGroupWaitBits+0x72>
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	0d c0       	rjmp	.+26     	; 0xb5c <xEventGroupWaitBits+0x72>
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	b2 01       	movw	r22, r4
     b46:	a1 01       	movw	r20, r2
     b48:	48 21       	and	r20, r8
     b4a:	59 21       	and	r21, r9
     b4c:	6a 21       	and	r22, r10
     b4e:	7b 21       	and	r23, r11
     b50:	48 15       	cp	r20, r8
     b52:	59 05       	cpc	r21, r9
     b54:	6a 05       	cpc	r22, r10
     b56:	7b 05       	cpc	r23, r11
     b58:	09 f0       	breq	.+2      	; 0xb5c <xEventGroupWaitBits+0x72>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	88 23       	and	r24, r24
     b5e:	81 f0       	breq	.+32     	; 0xb80 <xEventGroupWaitBits+0x96>
     b60:	66 20       	and	r6, r6
     b62:	09 f4       	brne	.+2      	; 0xb66 <xEventGroupWaitBits+0x7c>
     b64:	6b c0       	rjmp	.+214    	; 0xc3c <xEventGroupWaitBits+0x152>
     b66:	80 94       	com	r8
     b68:	90 94       	com	r9
     b6a:	a0 94       	com	r10
     b6c:	b0 94       	com	r11
     b6e:	82 20       	and	r8, r2
     b70:	93 20       	and	r9, r3
     b72:	a4 20       	and	r10, r4
     b74:	b5 20       	and	r11, r5
     b76:	88 82       	st	Y, r8
     b78:	99 82       	std	Y+1, r9	; 0x01
     b7a:	aa 82       	std	Y+2, r10	; 0x02
     b7c:	bb 82       	std	Y+3, r11	; 0x03
     b7e:	5e c0       	rjmp	.+188    	; 0xc3c <xEventGroupWaitBits+0x152>
     b80:	c1 14       	cp	r12, r1
     b82:	d1 04       	cpc	r13, r1
     b84:	e1 04       	cpc	r14, r1
     b86:	f1 04       	cpc	r15, r1
     b88:	09 f4       	brne	.+2      	; 0xb8c <xEventGroupWaitBits+0xa2>
     b8a:	58 c0       	rjmp	.+176    	; 0xc3c <xEventGroupWaitBits+0x152>
     b8c:	66 20       	and	r6, r6
     b8e:	29 f0       	breq	.+10     	; 0xb9a <xEventGroupWaitBits+0xb0>
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	50 e0       	ldi	r21, 0x00	; 0
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	71 e0       	ldi	r23, 0x01	; 1
     b98:	03 c0       	rjmp	.+6      	; 0xba0 <xEventGroupWaitBits+0xb6>
     b9a:	40 e0       	ldi	r20, 0x00	; 0
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	ba 01       	movw	r22, r20
     ba0:	71 10       	cpse	r7, r1
     ba2:	74 60       	ori	r23, 0x04	; 4
     ba4:	48 29       	or	r20, r8
     ba6:	59 29       	or	r21, r9
     ba8:	6a 29       	or	r22, r10
     baa:	7b 29       	or	r23, r11
     bac:	97 01       	movw	r18, r14
     bae:	86 01       	movw	r16, r12
     bb0:	ce 01       	movw	r24, r28
     bb2:	04 96       	adiw	r24, 0x04	; 4
     bb4:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <vTaskPlaceOnUnorderedEventList>
     bb8:	0e 94 96 13 	call	0x272c	; 0x272c <xTaskResumeAll>
     bbc:	81 11       	cpse	r24, r1
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <xEventGroupWaitBits+0xd8>
     bc0:	6c d3       	rcall	.+1752   	; 0x129a <vPortYield>
     bc2:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <uxTaskResetEventItemValue>
     bc6:	91 fd       	sbrc	r25, 1
     bc8:	35 c0       	rjmp	.+106    	; 0xc34 <xEventGroupWaitBits+0x14a>
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	0f 92       	push	r0
     bd0:	68 81       	ld	r22, Y
     bd2:	79 81       	ldd	r23, Y+1	; 0x01
     bd4:	8a 81       	ldd	r24, Y+2	; 0x02
     bd6:	9b 81       	ldd	r25, Y+3	; 0x03
     bd8:	71 10       	cpse	r7, r1
     bda:	0d c0       	rjmp	.+26     	; 0xbf6 <xEventGroupWaitBits+0x10c>
     bdc:	21 e0       	ldi	r18, 0x01	; 1
     bde:	75 01       	movw	r14, r10
     be0:	64 01       	movw	r12, r8
     be2:	c6 22       	and	r12, r22
     be4:	d7 22       	and	r13, r23
     be6:	e8 22       	and	r14, r24
     be8:	f9 22       	and	r15, r25
     bea:	cd 28       	or	r12, r13
     bec:	ce 28       	or	r12, r14
     bee:	cf 28       	or	r12, r15
     bf0:	79 f4       	brne	.+30     	; 0xc10 <xEventGroupWaitBits+0x126>
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	0d c0       	rjmp	.+26     	; 0xc10 <xEventGroupWaitBits+0x126>
     bf6:	21 e0       	ldi	r18, 0x01	; 1
     bf8:	75 01       	movw	r14, r10
     bfa:	64 01       	movw	r12, r8
     bfc:	c6 22       	and	r12, r22
     bfe:	d7 22       	and	r13, r23
     c00:	e8 22       	and	r14, r24
     c02:	f9 22       	and	r15, r25
     c04:	c8 14       	cp	r12, r8
     c06:	d9 04       	cpc	r13, r9
     c08:	ea 04       	cpc	r14, r10
     c0a:	fb 04       	cpc	r15, r11
     c0c:	09 f0       	breq	.+2      	; 0xc10 <xEventGroupWaitBits+0x126>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	22 23       	and	r18, r18
     c12:	71 f0       	breq	.+28     	; 0xc30 <xEventGroupWaitBits+0x146>
     c14:	66 20       	and	r6, r6
     c16:	61 f0       	breq	.+24     	; 0xc30 <xEventGroupWaitBits+0x146>
     c18:	80 94       	com	r8
     c1a:	90 94       	com	r9
     c1c:	a0 94       	com	r10
     c1e:	b0 94       	com	r11
     c20:	86 22       	and	r8, r22
     c22:	97 22       	and	r9, r23
     c24:	a8 22       	and	r10, r24
     c26:	b9 22       	and	r11, r25
     c28:	88 82       	st	Y, r8
     c2a:	99 82       	std	Y+1, r9	; 0x01
     c2c:	aa 82       	std	Y+2, r10	; 0x02
     c2e:	bb 82       	std	Y+3, r11	; 0x03
     c30:	0f 90       	pop	r0
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	1b 01       	movw	r2, r22
     c36:	2c 01       	movw	r4, r24
     c38:	55 24       	eor	r5, r5
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <xEventGroupWaitBits+0x156>
     c3c:	0e 94 96 13 	call	0x272c	; 0x272c <xTaskResumeAll>
     c40:	c2 01       	movw	r24, r4
     c42:	b1 01       	movw	r22, r2
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	cf 90       	pop	r12
     c54:	bf 90       	pop	r11
     c56:	af 90       	pop	r10
     c58:	9f 90       	pop	r9
     c5a:	8f 90       	pop	r8
     c5c:	7f 90       	pop	r7
     c5e:	6f 90       	pop	r6
     c60:	5f 90       	pop	r5
     c62:	4f 90       	pop	r4
     c64:	3f 90       	pop	r3
     c66:	2f 90       	pop	r2
     c68:	08 95       	ret

00000c6a <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     c6a:	4f 92       	push	r4
     c6c:	5f 92       	push	r5
     c6e:	6f 92       	push	r6
     c70:	7f 92       	push	r7
     c72:	8f 92       	push	r8
     c74:	9f 92       	push	r9
     c76:	af 92       	push	r10
     c78:	bf 92       	push	r11
     c7a:	cf 92       	push	r12
     c7c:	df 92       	push	r13
     c7e:	ef 92       	push	r14
     c80:	ff 92       	push	r15
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	ec 01       	movw	r28, r24
     c8c:	6a 01       	movw	r12, r20
     c8e:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c90:	8c 01       	movw	r16, r24
     c92:	09 5f       	subi	r16, 0xF9	; 249
     c94:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     c96:	0e 94 ad 12 	call	0x255a	; 0x255a <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     c9a:	eb 85       	ldd	r30, Y+11	; 0x0b
     c9c:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     c9e:	88 81       	ld	r24, Y
     ca0:	99 81       	ldd	r25, Y+1	; 0x01
     ca2:	aa 81       	ldd	r26, Y+2	; 0x02
     ca4:	bb 81       	ldd	r27, Y+3	; 0x03
     ca6:	c8 2a       	or	r12, r24
     ca8:	d9 2a       	or	r13, r25
     caa:	ea 2a       	or	r14, r26
     cac:	fb 2a       	or	r15, r27
     cae:	c8 82       	st	Y, r12
     cb0:	d9 82       	std	Y+1, r13	; 0x01
     cb2:	ea 82       	std	Y+2, r14	; 0x02
     cb4:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     cb6:	0e 17       	cp	r16, r30
     cb8:	1f 07       	cpc	r17, r31
     cba:	09 f4       	brne	.+2      	; 0xcbe <xEventGroupSetBits+0x54>
     cbc:	45 c0       	rjmp	.+138    	; 0xd48 <xEventGroupSetBits+0xde>
     cbe:	c1 2c       	mov	r12, r1
     cc0:	d1 2c       	mov	r13, r1
     cc2:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     cc4:	99 24       	eor	r9, r9
     cc6:	93 94       	inc	r9
     cc8:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
     cca:	a4 80       	ldd	r10, Z+4	; 0x04
     ccc:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     cce:	80 81       	ld	r24, Z
     cd0:	91 81       	ldd	r25, Z+1	; 0x01
     cd2:	a2 81       	ldd	r26, Z+2	; 0x02
     cd4:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     cd6:	ac 01       	movw	r20, r24
     cd8:	bd 01       	movw	r22, r26
     cda:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     cdc:	b2 fd       	sbrc	r27, 2
     cde:	0f c0       	rjmp	.+30     	; 0xcfe <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     ce0:	48 80       	ld	r4, Y
     ce2:	59 80       	ldd	r5, Y+1	; 0x01
     ce4:	6a 80       	ldd	r6, Y+2	; 0x02
     ce6:	7b 80       	ldd	r7, Y+3	; 0x03
     ce8:	44 22       	and	r4, r20
     cea:	55 22       	and	r5, r21
     cec:	66 22       	and	r6, r22
     cee:	77 22       	and	r7, r23
     cf0:	29 2d       	mov	r18, r9
     cf2:	45 28       	or	r4, r5
     cf4:	46 28       	or	r4, r6
     cf6:	47 28       	or	r4, r7
     cf8:	89 f4       	brne	.+34     	; 0xd1c <xEventGroupSetBits+0xb2>
     cfa:	28 2d       	mov	r18, r8
     cfc:	0f c0       	rjmp	.+30     	; 0xd1c <xEventGroupSetBits+0xb2>
     cfe:	48 80       	ld	r4, Y
     d00:	59 80       	ldd	r5, Y+1	; 0x01
     d02:	6a 80       	ldd	r6, Y+2	; 0x02
     d04:	7b 80       	ldd	r7, Y+3	; 0x03
     d06:	44 22       	and	r4, r20
     d08:	55 22       	and	r5, r21
     d0a:	66 22       	and	r6, r22
     d0c:	77 22       	and	r7, r23
     d0e:	29 2d       	mov	r18, r9
     d10:	44 16       	cp	r4, r20
     d12:	55 06       	cpc	r5, r21
     d14:	66 06       	cpc	r6, r22
     d16:	77 06       	cpc	r7, r23
     d18:	09 f0       	breq	.+2      	; 0xd1c <xEventGroupSetBits+0xb2>
     d1a:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     d1c:	22 23       	and	r18, r18
     d1e:	71 f0       	breq	.+28     	; 0xd3c <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     d20:	b0 ff       	sbrs	r27, 0
     d22:	04 c0       	rjmp	.+8      	; 0xd2c <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     d24:	c4 2a       	or	r12, r20
     d26:	d5 2a       	or	r13, r21
     d28:	e6 2a       	or	r14, r22
     d2a:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     d2c:	48 81       	ld	r20, Y
     d2e:	59 81       	ldd	r21, Y+1	; 0x01
     d30:	6a 81       	ldd	r22, Y+2	; 0x02
     d32:	7b 81       	ldd	r23, Y+3	; 0x03
     d34:	72 60       	ori	r23, 0x02	; 2
     d36:	cf 01       	movw	r24, r30
     d38:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <vTaskRemoveFromUnorderedEventList>
     d3c:	ea 2d       	mov	r30, r10
     d3e:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     d40:	0e 17       	cp	r16, r30
     d42:	1f 07       	cpc	r17, r31
     d44:	11 f6       	brne	.-124    	; 0xcca <xEventGroupSetBits+0x60>
     d46:	03 c0       	rjmp	.+6      	; 0xd4e <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     d48:	c1 2c       	mov	r12, r1
     d4a:	d1 2c       	mov	r13, r1
     d4c:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     d4e:	c0 94       	com	r12
     d50:	d0 94       	com	r13
     d52:	e0 94       	com	r14
     d54:	f0 94       	com	r15
     d56:	88 81       	ld	r24, Y
     d58:	99 81       	ldd	r25, Y+1	; 0x01
     d5a:	aa 81       	ldd	r26, Y+2	; 0x02
     d5c:	bb 81       	ldd	r27, Y+3	; 0x03
     d5e:	c8 22       	and	r12, r24
     d60:	d9 22       	and	r13, r25
     d62:	ea 22       	and	r14, r26
     d64:	fb 22       	and	r15, r27
     d66:	c8 82       	st	Y, r12
     d68:	d9 82       	std	Y+1, r13	; 0x01
     d6a:	ea 82       	std	Y+2, r14	; 0x02
     d6c:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     d6e:	0e 94 96 13 	call	0x272c	; 0x272c <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     d72:	68 81       	ld	r22, Y
     d74:	79 81       	ldd	r23, Y+1	; 0x01
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	9b 81       	ldd	r25, Y+3	; 0x03
}
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	ff 90       	pop	r15
     d84:	ef 90       	pop	r14
     d86:	df 90       	pop	r13
     d88:	cf 90       	pop	r12
     d8a:	bf 90       	pop	r11
     d8c:	af 90       	pop	r10
     d8e:	9f 90       	pop	r9
     d90:	8f 90       	pop	r8
     d92:	7f 90       	pop	r7
     d94:	6f 90       	pop	r6
     d96:	5f 90       	pop	r5
     d98:	4f 90       	pop	r4
     d9a:	08 95       	ret

00000d9c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     da2:	ee ed       	ldi	r30, 0xDE	; 222
     da4:	f8 e0       	ldi	r31, 0x08	; 8
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <prvInsertBlockIntoFreeList+0xe>
     da8:	f9 01       	movw	r30, r18
     daa:	20 81       	ld	r18, Z
     dac:	31 81       	ldd	r19, Z+1	; 0x01
     dae:	2a 17       	cp	r18, r26
     db0:	3b 07       	cpc	r19, r27
     db2:	d0 f3       	brcs	.-12     	; 0xda8 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     db4:	82 81       	ldd	r24, Z+2	; 0x02
     db6:	93 81       	ldd	r25, Z+3	; 0x03
     db8:	af 01       	movw	r20, r30
     dba:	48 0f       	add	r20, r24
     dbc:	59 1f       	adc	r21, r25
     dbe:	a4 17       	cp	r26, r20
     dc0:	b5 07       	cpc	r27, r21
     dc2:	49 f4       	brne	.+18     	; 0xdd6 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     dc4:	12 96       	adiw	r26, 0x02	; 2
     dc6:	4d 91       	ld	r20, X+
     dc8:	5c 91       	ld	r21, X
     dca:	13 97       	sbiw	r26, 0x03	; 3
     dcc:	84 0f       	add	r24, r20
     dce:	95 1f       	adc	r25, r21
     dd0:	93 83       	std	Z+3, r25	; 0x03
     dd2:	82 83       	std	Z+2, r24	; 0x02
     dd4:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     dd6:	12 96       	adiw	r26, 0x02	; 2
     dd8:	8d 91       	ld	r24, X+
     dda:	9c 91       	ld	r25, X
     ddc:	13 97       	sbiw	r26, 0x03	; 3
     dde:	ed 01       	movw	r28, r26
     de0:	c8 0f       	add	r28, r24
     de2:	d9 1f       	adc	r29, r25
     de4:	2c 17       	cp	r18, r28
     de6:	3d 07       	cpc	r19, r29
     de8:	d9 f4       	brne	.+54     	; 0xe20 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     dea:	20 91 dc 08 	lds	r18, 0x08DC	; 0x8008dc <pxEnd>
     dee:	30 91 dd 08 	lds	r19, 0x08DD	; 0x8008dd <pxEnd+0x1>
     df2:	c2 17       	cp	r28, r18
     df4:	d3 07       	cpc	r29, r19
     df6:	81 f0       	breq	.+32     	; 0xe18 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     df8:	2a 81       	ldd	r18, Y+2	; 0x02
     dfa:	3b 81       	ldd	r19, Y+3	; 0x03
     dfc:	82 0f       	add	r24, r18
     dfe:	93 1f       	adc	r25, r19
     e00:	13 96       	adiw	r26, 0x03	; 3
     e02:	9c 93       	st	X, r25
     e04:	8e 93       	st	-X, r24
     e06:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     e08:	c0 81       	ld	r28, Z
     e0a:	d1 81       	ldd	r29, Z+1	; 0x01
     e0c:	88 81       	ld	r24, Y
     e0e:	99 81       	ldd	r25, Y+1	; 0x01
     e10:	11 96       	adiw	r26, 0x01	; 1
     e12:	9c 93       	st	X, r25
     e14:	8e 93       	st	-X, r24
     e16:	07 c0       	rjmp	.+14     	; 0xe26 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     e18:	11 96       	adiw	r26, 0x01	; 1
     e1a:	dc 93       	st	X, r29
     e1c:	ce 93       	st	-X, r28
     e1e:	03 c0       	rjmp	.+6      	; 0xe26 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     e20:	11 96       	adiw	r26, 0x01	; 1
     e22:	3c 93       	st	X, r19
     e24:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     e26:	ae 17       	cp	r26, r30
     e28:	bf 07       	cpc	r27, r31
     e2a:	11 f0       	breq	.+4      	; 0xe30 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     e2c:	b1 83       	std	Z+1, r27	; 0x01
     e2e:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     e36:	cf 92       	push	r12
     e38:	df 92       	push	r13
     e3a:	ef 92       	push	r14
     e3c:	ff 92       	push	r15
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
     e48:	0e 94 ad 12 	call	0x255a	; 0x255a <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     e4c:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <pxEnd>
     e50:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <pxEnd+0x1>
     e54:	89 2b       	or	r24, r25
     e56:	41 f5       	brne	.+80     	; 0xea8 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     e58:	ee ed       	ldi	r30, 0xDE	; 222
     e5a:	f8 e0       	ldi	r31, 0x08	; 8
     e5c:	a2 ee       	ldi	r26, 0xE2	; 226
     e5e:	b8 e0       	ldi	r27, 0x08	; 8
     e60:	b1 83       	std	Z+1, r27	; 0x01
     e62:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
     e64:	13 82       	std	Z+3, r1	; 0x03
     e66:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     e68:	ee e7       	ldi	r30, 0x7E	; 126
     e6a:	f8 e1       	ldi	r31, 0x18	; 24
     e6c:	f0 93 dd 08 	sts	0x08DD, r31	; 0x8008dd <pxEnd+0x1>
     e70:	e0 93 dc 08 	sts	0x08DC, r30	; 0x8008dc <pxEnd>
	pxEnd->xBlockSize = 0;
     e74:	13 82       	std	Z+3, r1	; 0x03
     e76:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     e78:	11 82       	std	Z+1, r1	; 0x01
     e7a:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     e7c:	8c e9       	ldi	r24, 0x9C	; 156
     e7e:	9f e0       	ldi	r25, 0x0F	; 15
     e80:	13 96       	adiw	r26, 0x03	; 3
     e82:	9c 93       	st	X, r25
     e84:	8e 93       	st	-X, r24
     e86:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     e88:	ed 93       	st	X+, r30
     e8a:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     e8c:	90 93 d9 08 	sts	0x08D9, r25	; 0x8008d9 <xMinimumEverFreeBytesRemaining+0x1>
     e90:	80 93 d8 08 	sts	0x08D8, r24	; 0x8008d8 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     e94:	90 93 db 08 	sts	0x08DB, r25	; 0x8008db <xFreeBytesRemaining+0x1>
     e98:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e8       	ldi	r25, 0x80	; 128
     ea0:	90 93 d7 08 	sts	0x08D7, r25	; 0x8008d7 <xBlockAllocatedBit+0x1>
     ea4:	80 93 d6 08 	sts	0x08D6, r24	; 0x8008d6 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     ea8:	e0 90 d6 08 	lds	r14, 0x08D6	; 0x8008d6 <xBlockAllocatedBit>
     eac:	f0 90 d7 08 	lds	r15, 0x08D7	; 0x8008d7 <xBlockAllocatedBit+0x1>
     eb0:	c7 01       	movw	r24, r14
     eb2:	8c 23       	and	r24, r28
     eb4:	9d 23       	and	r25, r29
     eb6:	89 2b       	or	r24, r25
     eb8:	09 f0       	breq	.+2      	; 0xebc <pvPortMalloc+0x86>
     eba:	66 c0       	rjmp	.+204    	; 0xf88 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     ebc:	20 97       	sbiw	r28, 0x00	; 0
     ebe:	09 f4       	brne	.+2      	; 0xec2 <pvPortMalloc+0x8c>
     ec0:	66 c0       	rjmp	.+204    	; 0xf8e <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
     ec2:	ae 01       	movw	r20, r28
     ec4:	4c 5f       	subi	r20, 0xFC	; 252
     ec6:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     ec8:	09 f4       	brne	.+2      	; 0xecc <pvPortMalloc+0x96>
     eca:	5e c0       	rjmp	.+188    	; 0xf88 <pvPortMalloc+0x152>
     ecc:	00 91 da 08 	lds	r16, 0x08DA	; 0x8008da <xFreeBytesRemaining>
     ed0:	10 91 db 08 	lds	r17, 0x08DB	; 0x8008db <xFreeBytesRemaining+0x1>
     ed4:	04 17       	cp	r16, r20
     ed6:	15 07       	cpc	r17, r21
     ed8:	08 f4       	brcc	.+2      	; 0xedc <pvPortMalloc+0xa6>
     eda:	56 c0       	rjmp	.+172    	; 0xf88 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
     edc:	c0 91 de 08 	lds	r28, 0x08DE	; 0x8008de <xStart>
     ee0:	d0 91 df 08 	lds	r29, 0x08DF	; 0x8008df <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     ee4:	ee ed       	ldi	r30, 0xDE	; 222
     ee6:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <pvPortMalloc+0xb8>
     eea:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
     eec:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     eee:	2a 81       	ldd	r18, Y+2	; 0x02
     ef0:	3b 81       	ldd	r19, Y+3	; 0x03
     ef2:	24 17       	cp	r18, r20
     ef4:	35 07       	cpc	r19, r21
     ef6:	28 f4       	brcc	.+10     	; 0xf02 <pvPortMalloc+0xcc>
     ef8:	28 81       	ld	r18, Y
     efa:	39 81       	ldd	r19, Y+1	; 0x01
     efc:	21 15       	cp	r18, r1
     efe:	31 05       	cpc	r19, r1
     f00:	a1 f7       	brne	.-24     	; 0xeea <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     f02:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <pxEnd>
     f06:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <pxEnd+0x1>
     f0a:	c8 17       	cp	r28, r24
     f0c:	d9 07       	cpc	r29, r25
     f0e:	e1 f1       	breq	.+120    	; 0xf88 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     f10:	c0 80       	ld	r12, Z
     f12:	d1 80       	ldd	r13, Z+1	; 0x01
     f14:	84 e0       	ldi	r24, 0x04	; 4
     f16:	c8 0e       	add	r12, r24
     f18:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     f1a:	88 81       	ld	r24, Y
     f1c:	99 81       	ldd	r25, Y+1	; 0x01
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     f22:	2a 81       	ldd	r18, Y+2	; 0x02
     f24:	3b 81       	ldd	r19, Y+3	; 0x03
     f26:	24 1b       	sub	r18, r20
     f28:	35 0b       	sbc	r19, r21
     f2a:	29 30       	cpi	r18, 0x09	; 9
     f2c:	31 05       	cpc	r19, r1
     f2e:	48 f0       	brcs	.+18     	; 0xf42 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     f30:	ce 01       	movw	r24, r28
     f32:	84 0f       	add	r24, r20
     f34:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     f36:	fc 01       	movw	r30, r24
     f38:	33 83       	std	Z+3, r19	; 0x03
     f3a:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
     f3c:	5b 83       	std	Y+3, r21	; 0x03
     f3e:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     f40:	2d df       	rcall	.-422    	; 0xd9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	9b 81       	ldd	r25, Y+3	; 0x03
     f46:	08 1b       	sub	r16, r24
     f48:	19 0b       	sbc	r17, r25
     f4a:	10 93 db 08 	sts	0x08DB, r17	; 0x8008db <xFreeBytesRemaining+0x1>
     f4e:	00 93 da 08 	sts	0x08DA, r16	; 0x8008da <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     f52:	20 91 d8 08 	lds	r18, 0x08D8	; 0x8008d8 <xMinimumEverFreeBytesRemaining>
     f56:	30 91 d9 08 	lds	r19, 0x08D9	; 0x8008d9 <xMinimumEverFreeBytesRemaining+0x1>
     f5a:	02 17       	cp	r16, r18
     f5c:	13 07       	cpc	r17, r19
     f5e:	20 f4       	brcc	.+8      	; 0xf68 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     f60:	10 93 d9 08 	sts	0x08D9, r17	; 0x8008d9 <xMinimumEverFreeBytesRemaining+0x1>
     f64:	00 93 d8 08 	sts	0x08D8, r16	; 0x8008d8 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     f68:	e8 2a       	or	r14, r24
     f6a:	f9 2a       	or	r15, r25
     f6c:	fb 82       	std	Y+3, r15	; 0x03
     f6e:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
     f70:	19 82       	std	Y+1, r1	; 0x01
     f72:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     f74:	0e 94 96 13 	call	0x272c	; 0x272c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     f78:	c1 14       	cp	r12, r1
     f7a:	d1 04       	cpc	r13, r1
     f7c:	59 f4       	brne	.+22     	; 0xf94 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     f7e:	0e 94 c7 1a 	call	0x358e	; 0x358e <vApplicationMallocFailedHook>
     f82:	c1 2c       	mov	r12, r1
     f84:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
     f86:	06 c0       	rjmp	.+12     	; 0xf94 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     f88:	0e 94 96 13 	call	0x272c	; 0x272c <xTaskResumeAll>
     f8c:	f8 cf       	rjmp	.-16     	; 0xf7e <pvPortMalloc+0x148>
     f8e:	0e 94 96 13 	call	0x272c	; 0x272c <xTaskResumeAll>
     f92:	f5 cf       	rjmp	.-22     	; 0xf7e <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
     f94:	c6 01       	movw	r24, r12
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	08 95       	ret

00000fa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	51 f1       	breq	.+84     	; 0x1004 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     fb0:	fc 01       	movw	r30, r24
     fb2:	34 97       	sbiw	r30, 0x04	; 4
     fb4:	22 81       	ldd	r18, Z+2	; 0x02
     fb6:	33 81       	ldd	r19, Z+3	; 0x03
     fb8:	40 91 d6 08 	lds	r20, 0x08D6	; 0x8008d6 <xBlockAllocatedBit>
     fbc:	50 91 d7 08 	lds	r21, 0x08D7	; 0x8008d7 <xBlockAllocatedBit+0x1>
     fc0:	b9 01       	movw	r22, r18
     fc2:	64 23       	and	r22, r20
     fc4:	75 23       	and	r23, r21
     fc6:	67 2b       	or	r22, r23
     fc8:	e9 f0       	breq	.+58     	; 0x1004 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
     fca:	60 81       	ld	r22, Z
     fcc:	71 81       	ldd	r23, Z+1	; 0x01
     fce:	67 2b       	or	r22, r23
     fd0:	c9 f4       	brne	.+50     	; 0x1004 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
     fd2:	ef 01       	movw	r28, r30
     fd4:	40 95       	com	r20
     fd6:	50 95       	com	r21
     fd8:	24 23       	and	r18, r20
     fda:	35 23       	and	r19, r21
     fdc:	33 83       	std	Z+3, r19	; 0x03
     fde:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
     fe0:	0e 94 ad 12 	call	0x255a	; 0x255a <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
     fe4:	20 91 da 08 	lds	r18, 0x08DA	; 0x8008da <xFreeBytesRemaining>
     fe8:	30 91 db 08 	lds	r19, 0x08DB	; 0x8008db <xFreeBytesRemaining+0x1>
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	9b 81       	ldd	r25, Y+3	; 0x03
     ff0:	82 0f       	add	r24, r18
     ff2:	93 1f       	adc	r25, r19
     ff4:	90 93 db 08 	sts	0x08DB, r25	; 0x8008db <xFreeBytesRemaining+0x1>
     ff8:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     ffc:	ce 01       	movw	r24, r28
     ffe:	ce de       	rcall	.-612    	; 0xd9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    1000:	0e 94 96 13 	call	0x272c	; 0x272c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	08 95       	ret

0000100a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    100a:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    100c:	03 96       	adiw	r24, 0x03	; 3
    100e:	92 83       	std	Z+2, r25	; 0x02
    1010:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1012:	4f ef       	ldi	r20, 0xFF	; 255
    1014:	5f ef       	ldi	r21, 0xFF	; 255
    1016:	ba 01       	movw	r22, r20
    1018:	43 83       	std	Z+3, r20	; 0x03
    101a:	54 83       	std	Z+4, r21	; 0x04
    101c:	65 83       	std	Z+5, r22	; 0x05
    101e:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1020:	90 87       	std	Z+8, r25	; 0x08
    1022:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1024:	92 87       	std	Z+10, r25	; 0x0a
    1026:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1028:	10 82       	st	Z, r1
    102a:	08 95       	ret

0000102c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    102c:	fc 01       	movw	r30, r24
    102e:	13 86       	std	Z+11, r1	; 0x0b
    1030:	12 86       	std	Z+10, r1	; 0x0a
    1032:	08 95       	ret

00001034 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	9c 01       	movw	r18, r24
    103a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    103c:	dc 01       	movw	r26, r24
    103e:	11 96       	adiw	r26, 0x01	; 1
    1040:	cd 91       	ld	r28, X+
    1042:	dc 91       	ld	r29, X
    1044:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1046:	d5 83       	std	Z+5, r29	; 0x05
    1048:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    104a:	8e 81       	ldd	r24, Y+6	; 0x06
    104c:	9f 81       	ldd	r25, Y+7	; 0x07
    104e:	97 83       	std	Z+7, r25	; 0x07
    1050:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1052:	8e 81       	ldd	r24, Y+6	; 0x06
    1054:	9f 81       	ldd	r25, Y+7	; 0x07
    1056:	dc 01       	movw	r26, r24
    1058:	15 96       	adiw	r26, 0x05	; 5
    105a:	7c 93       	st	X, r23
    105c:	6e 93       	st	-X, r22
    105e:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    1060:	7f 83       	std	Y+7, r23	; 0x07
    1062:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1064:	33 87       	std	Z+11, r19	; 0x0b
    1066:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1068:	f9 01       	movw	r30, r18
    106a:	80 81       	ld	r24, Z
    106c:	8f 5f       	subi	r24, 0xFF	; 255
    106e:	80 83       	st	Z, r24
}
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	08 95       	ret

00001076 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1080:	08 81       	ld	r16, Y
    1082:	19 81       	ldd	r17, Y+1	; 0x01
    1084:	2a 81       	ldd	r18, Y+2	; 0x02
    1086:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1088:	0f 3f       	cpi	r16, 0xFF	; 255
    108a:	4f ef       	ldi	r20, 0xFF	; 255
    108c:	14 07       	cpc	r17, r20
    108e:	24 07       	cpc	r18, r20
    1090:	34 07       	cpc	r19, r20
    1092:	21 f4       	brne	.+8      	; 0x109c <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1094:	fc 01       	movw	r30, r24
    1096:	a1 85       	ldd	r26, Z+9	; 0x09
    1098:	b2 85       	ldd	r27, Z+10	; 0x0a
    109a:	11 c0       	rjmp	.+34     	; 0x10be <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    109c:	dc 01       	movw	r26, r24
    109e:	13 96       	adiw	r26, 0x03	; 3
    10a0:	01 c0       	rjmp	.+2      	; 0x10a4 <vListInsert+0x2e>
    10a2:	df 01       	movw	r26, r30
    10a4:	14 96       	adiw	r26, 0x04	; 4
    10a6:	ed 91       	ld	r30, X+
    10a8:	fc 91       	ld	r31, X
    10aa:	15 97       	sbiw	r26, 0x05	; 5
    10ac:	40 81       	ld	r20, Z
    10ae:	51 81       	ldd	r21, Z+1	; 0x01
    10b0:	62 81       	ldd	r22, Z+2	; 0x02
    10b2:	73 81       	ldd	r23, Z+3	; 0x03
    10b4:	04 17       	cp	r16, r20
    10b6:	15 07       	cpc	r17, r21
    10b8:	26 07       	cpc	r18, r22
    10ba:	37 07       	cpc	r19, r23
    10bc:	90 f7       	brcc	.-28     	; 0x10a2 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    10be:	14 96       	adiw	r26, 0x04	; 4
    10c0:	ed 91       	ld	r30, X+
    10c2:	fc 91       	ld	r31, X
    10c4:	15 97       	sbiw	r26, 0x05	; 5
    10c6:	fd 83       	std	Y+5, r31	; 0x05
    10c8:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    10ca:	d7 83       	std	Z+7, r29	; 0x07
    10cc:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    10ce:	bf 83       	std	Y+7, r27	; 0x07
    10d0:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    10d2:	15 96       	adiw	r26, 0x05	; 5
    10d4:	dc 93       	st	X, r29
    10d6:	ce 93       	st	-X, r28
    10d8:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    10da:	9b 87       	std	Y+11, r25	; 0x0b
    10dc:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    10de:	fc 01       	movw	r30, r24
    10e0:	20 81       	ld	r18, Z
    10e2:	2f 5f       	subi	r18, 0xFF	; 255
    10e4:	20 83       	st	Z, r18
}
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	08 95       	ret

000010f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    10f6:	a2 85       	ldd	r26, Z+10	; 0x0a
    10f8:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    10fa:	c4 81       	ldd	r28, Z+4	; 0x04
    10fc:	d5 81       	ldd	r29, Z+5	; 0x05
    10fe:	86 81       	ldd	r24, Z+6	; 0x06
    1100:	97 81       	ldd	r25, Z+7	; 0x07
    1102:	9f 83       	std	Y+7, r25	; 0x07
    1104:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1106:	c6 81       	ldd	r28, Z+6	; 0x06
    1108:	d7 81       	ldd	r29, Z+7	; 0x07
    110a:	84 81       	ldd	r24, Z+4	; 0x04
    110c:	95 81       	ldd	r25, Z+5	; 0x05
    110e:	9d 83       	std	Y+5, r25	; 0x05
    1110:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1112:	11 96       	adiw	r26, 0x01	; 1
    1114:	8d 91       	ld	r24, X+
    1116:	9c 91       	ld	r25, X
    1118:	12 97       	sbiw	r26, 0x02	; 2
    111a:	e8 17       	cp	r30, r24
    111c:	f9 07       	cpc	r31, r25
    111e:	31 f4       	brne	.+12     	; 0x112c <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1120:	86 81       	ldd	r24, Z+6	; 0x06
    1122:	97 81       	ldd	r25, Z+7	; 0x07
    1124:	12 96       	adiw	r26, 0x02	; 2
    1126:	9c 93       	st	X, r25
    1128:	8e 93       	st	-X, r24
    112a:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    112c:	13 86       	std	Z+11, r1	; 0x0b
    112e:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1130:	8c 91       	ld	r24, X
    1132:	81 50       	subi	r24, 0x01	; 1
    1134:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1136:	8c 91       	ld	r24, X
}
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    113e:	31 e1       	ldi	r19, 0x11	; 17
    1140:	fc 01       	movw	r30, r24
    1142:	30 83       	st	Z, r19
    1144:	31 97       	sbiw	r30, 0x01	; 1
    1146:	22 e2       	ldi	r18, 0x22	; 34
    1148:	20 83       	st	Z, r18
    114a:	31 97       	sbiw	r30, 0x01	; 1
    114c:	a3 e3       	ldi	r26, 0x33	; 51
    114e:	a0 83       	st	Z, r26
    1150:	31 97       	sbiw	r30, 0x01	; 1
    1152:	60 83       	st	Z, r22
    1154:	31 97       	sbiw	r30, 0x01	; 1
    1156:	70 83       	st	Z, r23
    1158:	31 97       	sbiw	r30, 0x01	; 1
    115a:	10 82       	st	Z, r1
    115c:	31 97       	sbiw	r30, 0x01	; 1
    115e:	10 82       	st	Z, r1
    1160:	31 97       	sbiw	r30, 0x01	; 1
    1162:	60 e8       	ldi	r22, 0x80	; 128
    1164:	60 83       	st	Z, r22
    1166:	31 97       	sbiw	r30, 0x01	; 1
    1168:	10 82       	st	Z, r1
    116a:	31 97       	sbiw	r30, 0x01	; 1
    116c:	10 82       	st	Z, r1
    116e:	31 97       	sbiw	r30, 0x01	; 1
    1170:	10 82       	st	Z, r1
    1172:	31 97       	sbiw	r30, 0x01	; 1
    1174:	62 e0       	ldi	r22, 0x02	; 2
    1176:	60 83       	st	Z, r22
    1178:	31 97       	sbiw	r30, 0x01	; 1
    117a:	63 e0       	ldi	r22, 0x03	; 3
    117c:	60 83       	st	Z, r22
    117e:	31 97       	sbiw	r30, 0x01	; 1
    1180:	64 e0       	ldi	r22, 0x04	; 4
    1182:	60 83       	st	Z, r22
    1184:	31 97       	sbiw	r30, 0x01	; 1
    1186:	65 e0       	ldi	r22, 0x05	; 5
    1188:	60 83       	st	Z, r22
    118a:	31 97       	sbiw	r30, 0x01	; 1
    118c:	66 e0       	ldi	r22, 0x06	; 6
    118e:	60 83       	st	Z, r22
    1190:	31 97       	sbiw	r30, 0x01	; 1
    1192:	67 e0       	ldi	r22, 0x07	; 7
    1194:	60 83       	st	Z, r22
    1196:	31 97       	sbiw	r30, 0x01	; 1
    1198:	68 e0       	ldi	r22, 0x08	; 8
    119a:	60 83       	st	Z, r22
    119c:	31 97       	sbiw	r30, 0x01	; 1
    119e:	69 e0       	ldi	r22, 0x09	; 9
    11a0:	60 83       	st	Z, r22
    11a2:	31 97       	sbiw	r30, 0x01	; 1
    11a4:	60 e1       	ldi	r22, 0x10	; 16
    11a6:	60 83       	st	Z, r22
    11a8:	31 97       	sbiw	r30, 0x01	; 1
    11aa:	30 83       	st	Z, r19
    11ac:	31 97       	sbiw	r30, 0x01	; 1
    11ae:	32 e1       	ldi	r19, 0x12	; 18
    11b0:	30 83       	st	Z, r19
    11b2:	31 97       	sbiw	r30, 0x01	; 1
    11b4:	33 e1       	ldi	r19, 0x13	; 19
    11b6:	30 83       	st	Z, r19
    11b8:	31 97       	sbiw	r30, 0x01	; 1
    11ba:	34 e1       	ldi	r19, 0x14	; 20
    11bc:	30 83       	st	Z, r19
    11be:	31 97       	sbiw	r30, 0x01	; 1
    11c0:	35 e1       	ldi	r19, 0x15	; 21
    11c2:	30 83       	st	Z, r19
    11c4:	31 97       	sbiw	r30, 0x01	; 1
    11c6:	36 e1       	ldi	r19, 0x16	; 22
    11c8:	30 83       	st	Z, r19
    11ca:	31 97       	sbiw	r30, 0x01	; 1
    11cc:	37 e1       	ldi	r19, 0x17	; 23
    11ce:	30 83       	st	Z, r19
    11d0:	31 97       	sbiw	r30, 0x01	; 1
    11d2:	38 e1       	ldi	r19, 0x18	; 24
    11d4:	30 83       	st	Z, r19
    11d6:	31 97       	sbiw	r30, 0x01	; 1
    11d8:	39 e1       	ldi	r19, 0x19	; 25
    11da:	30 83       	st	Z, r19
    11dc:	31 97       	sbiw	r30, 0x01	; 1
    11de:	30 e2       	ldi	r19, 0x20	; 32
    11e0:	30 83       	st	Z, r19
    11e2:	31 97       	sbiw	r30, 0x01	; 1
    11e4:	31 e2       	ldi	r19, 0x21	; 33
    11e6:	30 83       	st	Z, r19
    11e8:	31 97       	sbiw	r30, 0x01	; 1
    11ea:	20 83       	st	Z, r18
    11ec:	31 97       	sbiw	r30, 0x01	; 1
    11ee:	23 e2       	ldi	r18, 0x23	; 35
    11f0:	20 83       	st	Z, r18
    11f2:	31 97       	sbiw	r30, 0x01	; 1
    11f4:	40 83       	st	Z, r20
    11f6:	31 97       	sbiw	r30, 0x01	; 1
    11f8:	50 83       	st	Z, r21
    11fa:	31 97       	sbiw	r30, 0x01	; 1
    11fc:	26 e2       	ldi	r18, 0x26	; 38
    11fe:	20 83       	st	Z, r18
    1200:	31 97       	sbiw	r30, 0x01	; 1
    1202:	27 e2       	ldi	r18, 0x27	; 39
    1204:	20 83       	st	Z, r18
    1206:	31 97       	sbiw	r30, 0x01	; 1
    1208:	28 e2       	ldi	r18, 0x28	; 40
    120a:	20 83       	st	Z, r18
    120c:	31 97       	sbiw	r30, 0x01	; 1
    120e:	29 e2       	ldi	r18, 0x29	; 41
    1210:	20 83       	st	Z, r18
    1212:	31 97       	sbiw	r30, 0x01	; 1
    1214:	20 e3       	ldi	r18, 0x30	; 48
    1216:	20 83       	st	Z, r18
    1218:	31 97       	sbiw	r30, 0x01	; 1
    121a:	21 e3       	ldi	r18, 0x31	; 49
    121c:	20 83       	st	Z, r18
    121e:	89 97       	sbiw	r24, 0x29	; 41
    1220:	08 95       	ret

00001222 <xPortStartScheduler>:
    1222:	a8 95       	wdr
    1224:	90 ec       	ldi	r25, 0xC0	; 192
    1226:	88 e1       	ldi	r24, 0x18	; 24
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	a8 95       	wdr
    122e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1238:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    123c:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    1240:	cd 91       	ld	r28, X+
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	dd 91       	ld	r29, X+
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	ff 91       	pop	r31
    124a:	ef 91       	pop	r30
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	bf 91       	pop	r27
    1252:	af 91       	pop	r26
    1254:	9f 91       	pop	r25
    1256:	8f 91       	pop	r24
    1258:	7f 91       	pop	r23
    125a:	6f 91       	pop	r22
    125c:	5f 91       	pop	r21
    125e:	4f 91       	pop	r20
    1260:	3f 91       	pop	r19
    1262:	2f 91       	pop	r18
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	bf 90       	pop	r11
    1272:	af 90       	pop	r10
    1274:	9f 90       	pop	r9
    1276:	8f 90       	pop	r8
    1278:	7f 90       	pop	r7
    127a:	6f 90       	pop	r6
    127c:	5f 90       	pop	r5
    127e:	4f 90       	pop	r4
    1280:	3f 90       	pop	r3
    1282:	2f 90       	pop	r2
    1284:	1f 90       	pop	r1
    1286:	0f 90       	pop	r0
    1288:	0c be       	out	0x3c, r0	; 60
    128a:	0f 90       	pop	r0
    128c:	0b be       	out	0x3b, r0	; 59
    128e:	0f 90       	pop	r0
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	0f 90       	pop	r0
    1294:	08 95       	ret
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	08 95       	ret

0000129a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    129a:	0f 92       	push	r0
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	0f 92       	push	r0
    12a2:	0b b6       	in	r0, 0x3b	; 59
    12a4:	0f 92       	push	r0
    12a6:	0c b6       	in	r0, 0x3c	; 60
    12a8:	0f 92       	push	r0
    12aa:	1f 92       	push	r1
    12ac:	11 24       	eor	r1, r1
    12ae:	2f 92       	push	r2
    12b0:	3f 92       	push	r3
    12b2:	4f 92       	push	r4
    12b4:	5f 92       	push	r5
    12b6:	6f 92       	push	r6
    12b8:	7f 92       	push	r7
    12ba:	8f 92       	push	r8
    12bc:	9f 92       	push	r9
    12be:	af 92       	push	r10
    12c0:	bf 92       	push	r11
    12c2:	cf 92       	push	r12
    12c4:	df 92       	push	r13
    12c6:	ef 92       	push	r14
    12c8:	ff 92       	push	r15
    12ca:	0f 93       	push	r16
    12cc:	1f 93       	push	r17
    12ce:	2f 93       	push	r18
    12d0:	3f 93       	push	r19
    12d2:	4f 93       	push	r20
    12d4:	5f 93       	push	r21
    12d6:	6f 93       	push	r22
    12d8:	7f 93       	push	r23
    12da:	8f 93       	push	r24
    12dc:	9f 93       	push	r25
    12de:	af 93       	push	r26
    12e0:	bf 93       	push	r27
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	ef 93       	push	r30
    12e8:	ff 93       	push	r31
    12ea:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    12ee:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    12f2:	0d b6       	in	r0, 0x3d	; 61
    12f4:	0d 92       	st	X+, r0
    12f6:	0e b6       	in	r0, 0x3e	; 62
    12f8:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    12fa:	0e 94 89 14 	call	0x2912	; 0x2912 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    12fe:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    1302:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    1306:	cd 91       	ld	r28, X+
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	dd 91       	ld	r29, X+
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	ff 91       	pop	r31
    1310:	ef 91       	pop	r30
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	bf 91       	pop	r27
    1318:	af 91       	pop	r26
    131a:	9f 91       	pop	r25
    131c:	8f 91       	pop	r24
    131e:	7f 91       	pop	r23
    1320:	6f 91       	pop	r22
    1322:	5f 91       	pop	r21
    1324:	4f 91       	pop	r20
    1326:	3f 91       	pop	r19
    1328:	2f 91       	pop	r18
    132a:	1f 91       	pop	r17
    132c:	0f 91       	pop	r16
    132e:	ff 90       	pop	r15
    1330:	ef 90       	pop	r14
    1332:	df 90       	pop	r13
    1334:	cf 90       	pop	r12
    1336:	bf 90       	pop	r11
    1338:	af 90       	pop	r10
    133a:	9f 90       	pop	r9
    133c:	8f 90       	pop	r8
    133e:	7f 90       	pop	r7
    1340:	6f 90       	pop	r6
    1342:	5f 90       	pop	r5
    1344:	4f 90       	pop	r4
    1346:	3f 90       	pop	r3
    1348:	2f 90       	pop	r2
    134a:	1f 90       	pop	r1
    134c:	0f 90       	pop	r0
    134e:	0c be       	out	0x3c, r0	; 60
    1350:	0f 90       	pop	r0
    1352:	0b be       	out	0x3b, r0	; 59
    1354:	0f 90       	pop	r0
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    135a:	08 95       	ret

0000135c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    135c:	0f 92       	push	r0
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	0f 92       	push	r0
    1364:	0b b6       	in	r0, 0x3b	; 59
    1366:	0f 92       	push	r0
    1368:	0c b6       	in	r0, 0x3c	; 60
    136a:	0f 92       	push	r0
    136c:	1f 92       	push	r1
    136e:	11 24       	eor	r1, r1
    1370:	2f 92       	push	r2
    1372:	3f 92       	push	r3
    1374:	4f 92       	push	r4
    1376:	5f 92       	push	r5
    1378:	6f 92       	push	r6
    137a:	7f 92       	push	r7
    137c:	8f 92       	push	r8
    137e:	9f 92       	push	r9
    1380:	af 92       	push	r10
    1382:	bf 92       	push	r11
    1384:	cf 92       	push	r12
    1386:	df 92       	push	r13
    1388:	ef 92       	push	r14
    138a:	ff 92       	push	r15
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	2f 93       	push	r18
    1392:	3f 93       	push	r19
    1394:	4f 93       	push	r20
    1396:	5f 93       	push	r21
    1398:	6f 93       	push	r22
    139a:	7f 93       	push	r23
    139c:	8f 93       	push	r24
    139e:	9f 93       	push	r25
    13a0:	af 93       	push	r26
    13a2:	bf 93       	push	r27
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	ef 93       	push	r30
    13aa:	ff 93       	push	r31
    13ac:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    13b0:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    13b4:	0d b6       	in	r0, 0x3d	; 61
    13b6:	0d 92       	st	X+, r0
    13b8:	0e b6       	in	r0, 0x3e	; 62
    13ba:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    13bc:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    13be:	0e 94 c1 12 	call	0x2582	; 0x2582 <xTaskIncrementTick>
    13c2:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    13c4:	0e 94 89 14 	call	0x2912	; 0x2912 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    13c8:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    13cc:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    13d0:	cd 91       	ld	r28, X+
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	dd 91       	ld	r29, X+
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	ff 91       	pop	r31
    13da:	ef 91       	pop	r30
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	bf 91       	pop	r27
    13e2:	af 91       	pop	r26
    13e4:	9f 91       	pop	r25
    13e6:	8f 91       	pop	r24
    13e8:	7f 91       	pop	r23
    13ea:	6f 91       	pop	r22
    13ec:	5f 91       	pop	r21
    13ee:	4f 91       	pop	r20
    13f0:	3f 91       	pop	r19
    13f2:	2f 91       	pop	r18
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	ff 90       	pop	r15
    13fa:	ef 90       	pop	r14
    13fc:	df 90       	pop	r13
    13fe:	cf 90       	pop	r12
    1400:	bf 90       	pop	r11
    1402:	af 90       	pop	r10
    1404:	9f 90       	pop	r9
    1406:	8f 90       	pop	r8
    1408:	7f 90       	pop	r7
    140a:	6f 90       	pop	r6
    140c:	5f 90       	pop	r5
    140e:	4f 90       	pop	r4
    1410:	3f 90       	pop	r3
    1412:	2f 90       	pop	r2
    1414:	1f 90       	pop	r1
    1416:	0f 90       	pop	r0
    1418:	0c be       	out	0x3c, r0	; 60
    141a:	0f 90       	pop	r0
    141c:	0b be       	out	0x3b, r0	; 59
    141e:	0f 90       	pop	r0
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1424:	08 95       	ret

00001426 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1426:	9a df       	rcall	.-204    	; 0x135c <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1428:	18 95       	reti

0000142a <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	0f 92       	push	r0
    1430:	fc 01       	movw	r30, r24
    1432:	96 8d       	ldd	r25, Z+30	; 0x1e
    1434:	0f 90       	pop	r0
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	91 11       	cpse	r25, r1
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	08 95       	ret

00001440 <prvCopyDataToQueue>:
    1440:	0f 93       	push	r16
    1442:	1f 93       	push	r17
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	ec 01       	movw	r28, r24
    144a:	04 2f       	mov	r16, r20
    144c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    144e:	48 a1       	ldd	r20, Y+32	; 0x20
    1450:	41 11       	cpse	r20, r1
    1452:	0c c0       	rjmp	.+24     	; 0x146c <prvCopyDataToQueue+0x2c>
    1454:	88 81       	ld	r24, Y
    1456:	99 81       	ldd	r25, Y+1	; 0x01
    1458:	89 2b       	or	r24, r25
    145a:	09 f0       	breq	.+2      	; 0x145e <prvCopyDataToQueue+0x1e>
    145c:	42 c0       	rjmp	.+132    	; 0x14e2 <prvCopyDataToQueue+0xa2>
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	0e 94 da 16 	call	0x2db4	; 0x2db4 <xTaskPriorityDisinherit>
    1466:	1d 82       	std	Y+5, r1	; 0x05
    1468:	1c 82       	std	Y+4, r1	; 0x04
    146a:	42 c0       	rjmp	.+132    	; 0x14f0 <prvCopyDataToQueue+0xb0>
    146c:	01 11       	cpse	r16, r1
    146e:	17 c0       	rjmp	.+46     	; 0x149e <prvCopyDataToQueue+0x5e>
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	9b 81       	ldd	r25, Y+3	; 0x03
    1476:	0e 94 b5 2c 	call	0x596a	; 0x596a <memcpy>
    147a:	28 a1       	ldd	r18, Y+32	; 0x20
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	9b 81       	ldd	r25, Y+3	; 0x03
    1480:	82 0f       	add	r24, r18
    1482:	91 1d       	adc	r25, r1
    1484:	9b 83       	std	Y+3, r25	; 0x03
    1486:	8a 83       	std	Y+2, r24	; 0x02
    1488:	2c 81       	ldd	r18, Y+4	; 0x04
    148a:	3d 81       	ldd	r19, Y+5	; 0x05
    148c:	82 17       	cp	r24, r18
    148e:	93 07       	cpc	r25, r19
    1490:	50 f1       	brcs	.+84     	; 0x14e6 <prvCopyDataToQueue+0xa6>
    1492:	88 81       	ld	r24, Y
    1494:	99 81       	ldd	r25, Y+1	; 0x01
    1496:	9b 83       	std	Y+3, r25	; 0x03
    1498:	8a 83       	std	Y+2, r24	; 0x02
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	29 c0       	rjmp	.+82     	; 0x14f0 <prvCopyDataToQueue+0xb0>
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	8e 81       	ldd	r24, Y+6	; 0x06
    14a2:	9f 81       	ldd	r25, Y+7	; 0x07
    14a4:	0e 94 b5 2c 	call	0x596a	; 0x596a <memcpy>
    14a8:	88 a1       	ldd	r24, Y+32	; 0x20
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	91 95       	neg	r25
    14ae:	81 95       	neg	r24
    14b0:	91 09       	sbc	r25, r1
    14b2:	2e 81       	ldd	r18, Y+6	; 0x06
    14b4:	3f 81       	ldd	r19, Y+7	; 0x07
    14b6:	28 0f       	add	r18, r24
    14b8:	39 1f       	adc	r19, r25
    14ba:	3f 83       	std	Y+7, r19	; 0x07
    14bc:	2e 83       	std	Y+6, r18	; 0x06
    14be:	48 81       	ld	r20, Y
    14c0:	59 81       	ldd	r21, Y+1	; 0x01
    14c2:	24 17       	cp	r18, r20
    14c4:	35 07       	cpc	r19, r21
    14c6:	30 f4       	brcc	.+12     	; 0x14d4 <prvCopyDataToQueue+0x94>
    14c8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ca:	3d 81       	ldd	r19, Y+5	; 0x05
    14cc:	82 0f       	add	r24, r18
    14ce:	93 1f       	adc	r25, r19
    14d0:	9f 83       	std	Y+7, r25	; 0x07
    14d2:	8e 83       	std	Y+6, r24	; 0x06
    14d4:	02 30       	cpi	r16, 0x02	; 2
    14d6:	49 f4       	brne	.+18     	; 0x14ea <prvCopyDataToQueue+0xaa>
    14d8:	11 23       	and	r17, r17
    14da:	49 f0       	breq	.+18     	; 0x14ee <prvCopyDataToQueue+0xae>
    14dc:	11 50       	subi	r17, 0x01	; 1
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	07 c0       	rjmp	.+14     	; 0x14f0 <prvCopyDataToQueue+0xb0>
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	05 c0       	rjmp	.+10     	; 0x14f0 <prvCopyDataToQueue+0xb0>
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	03 c0       	rjmp	.+6      	; 0x14f0 <prvCopyDataToQueue+0xb0>
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	01 c0       	rjmp	.+2      	; 0x14f0 <prvCopyDataToQueue+0xb0>
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	1f 5f       	subi	r17, 0xFF	; 255
    14f2:	1e 8f       	std	Y+30, r17	; 0x1e
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	1f 91       	pop	r17
    14fa:	0f 91       	pop	r16
    14fc:	08 95       	ret

000014fe <prvCopyDataFromQueue>:
    14fe:	fc 01       	movw	r30, r24
    1500:	40 a1       	ldd	r20, Z+32	; 0x20
    1502:	44 23       	and	r20, r20
    1504:	a9 f0       	breq	.+42     	; 0x1530 <prvCopyDataFromQueue+0x32>
    1506:	50 e0       	ldi	r21, 0x00	; 0
    1508:	26 81       	ldd	r18, Z+6	; 0x06
    150a:	37 81       	ldd	r19, Z+7	; 0x07
    150c:	24 0f       	add	r18, r20
    150e:	35 1f       	adc	r19, r21
    1510:	37 83       	std	Z+7, r19	; 0x07
    1512:	26 83       	std	Z+6, r18	; 0x06
    1514:	84 81       	ldd	r24, Z+4	; 0x04
    1516:	95 81       	ldd	r25, Z+5	; 0x05
    1518:	28 17       	cp	r18, r24
    151a:	39 07       	cpc	r19, r25
    151c:	20 f0       	brcs	.+8      	; 0x1526 <prvCopyDataFromQueue+0x28>
    151e:	80 81       	ld	r24, Z
    1520:	91 81       	ldd	r25, Z+1	; 0x01
    1522:	97 83       	std	Z+7, r25	; 0x07
    1524:	86 83       	std	Z+6, r24	; 0x06
    1526:	cb 01       	movw	r24, r22
    1528:	66 81       	ldd	r22, Z+6	; 0x06
    152a:	77 81       	ldd	r23, Z+7	; 0x07
    152c:	0c 94 b5 2c 	jmp	0x596a	; 0x596a <memcpy>
    1530:	08 95       	ret

00001532 <prvUnlockQueue>:
    1532:	ef 92       	push	r14
    1534:	ff 92       	push	r15
    1536:	0f 93       	push	r16
    1538:	1f 93       	push	r17
    153a:	cf 93       	push	r28
    153c:	8c 01       	movw	r16, r24
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	0f 92       	push	r0
    1544:	fc 01       	movw	r30, r24
    1546:	c2 a1       	ldd	r28, Z+34	; 0x22
    1548:	1c 16       	cp	r1, r28
    154a:	ac f4       	brge	.+42     	; 0x1576 <prvUnlockQueue+0x44>
    154c:	83 89       	ldd	r24, Z+19	; 0x13
    154e:	81 11       	cpse	r24, r1
    1550:	06 c0       	rjmp	.+12     	; 0x155e <prvUnlockQueue+0x2c>
    1552:	11 c0       	rjmp	.+34     	; 0x1576 <prvUnlockQueue+0x44>
    1554:	f8 01       	movw	r30, r16
    1556:	83 89       	ldd	r24, Z+19	; 0x13
    1558:	81 11       	cpse	r24, r1
    155a:	05 c0       	rjmp	.+10     	; 0x1566 <prvUnlockQueue+0x34>
    155c:	0c c0       	rjmp	.+24     	; 0x1576 <prvUnlockQueue+0x44>
    155e:	78 01       	movw	r14, r16
    1560:	f3 e1       	ldi	r31, 0x13	; 19
    1562:	ef 0e       	add	r14, r31
    1564:	f1 1c       	adc	r15, r1
    1566:	c7 01       	movw	r24, r14
    1568:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <xTaskRemoveFromEventList>
    156c:	81 11       	cpse	r24, r1
    156e:	0e 94 55 16 	call	0x2caa	; 0x2caa <vTaskMissedYield>
    1572:	c1 50       	subi	r28, 0x01	; 1
    1574:	79 f7       	brne	.-34     	; 0x1554 <prvUnlockQueue+0x22>
    1576:	8f ef       	ldi	r24, 0xFF	; 255
    1578:	f8 01       	movw	r30, r16
    157a:	82 a3       	std	Z+34, r24	; 0x22
    157c:	0f 90       	pop	r0
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	0f 92       	push	r0
    1586:	c1 a1       	ldd	r28, Z+33	; 0x21
    1588:	1c 16       	cp	r1, r28
    158a:	ac f4       	brge	.+42     	; 0x15b6 <prvUnlockQueue+0x84>
    158c:	80 85       	ldd	r24, Z+8	; 0x08
    158e:	81 11       	cpse	r24, r1
    1590:	06 c0       	rjmp	.+12     	; 0x159e <prvUnlockQueue+0x6c>
    1592:	11 c0       	rjmp	.+34     	; 0x15b6 <prvUnlockQueue+0x84>
    1594:	f8 01       	movw	r30, r16
    1596:	80 85       	ldd	r24, Z+8	; 0x08
    1598:	81 11       	cpse	r24, r1
    159a:	05 c0       	rjmp	.+10     	; 0x15a6 <prvUnlockQueue+0x74>
    159c:	0c c0       	rjmp	.+24     	; 0x15b6 <prvUnlockQueue+0x84>
    159e:	78 01       	movw	r14, r16
    15a0:	f8 e0       	ldi	r31, 0x08	; 8
    15a2:	ef 0e       	add	r14, r31
    15a4:	f1 1c       	adc	r15, r1
    15a6:	c7 01       	movw	r24, r14
    15a8:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <xTaskRemoveFromEventList>
    15ac:	81 11       	cpse	r24, r1
    15ae:	0e 94 55 16 	call	0x2caa	; 0x2caa <vTaskMissedYield>
    15b2:	c1 50       	subi	r28, 0x01	; 1
    15b4:	79 f7       	brne	.-34     	; 0x1594 <prvUnlockQueue+0x62>
    15b6:	8f ef       	ldi	r24, 0xFF	; 255
    15b8:	f8 01       	movw	r30, r16
    15ba:	81 a3       	std	Z+33, r24	; 0x21
    15bc:	0f 90       	pop	r0
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cf 91       	pop	r28
    15c2:	1f 91       	pop	r17
    15c4:	0f 91       	pop	r16
    15c6:	ff 90       	pop	r15
    15c8:	ef 90       	pop	r14
    15ca:	08 95       	ret

000015cc <xQueueGenericReset>:
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	ec 01       	movw	r28, r24
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	0f 92       	push	r0
    15d8:	e8 81       	ld	r30, Y
    15da:	f9 81       	ldd	r31, Y+1	; 0x01
    15dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15de:	28 a1       	ldd	r18, Y+32	; 0x20
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	82 9f       	mul	r24, r18
    15e6:	a0 01       	movw	r20, r0
    15e8:	83 9f       	mul	r24, r19
    15ea:	50 0d       	add	r21, r0
    15ec:	92 9f       	mul	r25, r18
    15ee:	50 0d       	add	r21, r0
    15f0:	11 24       	eor	r1, r1
    15f2:	4e 0f       	add	r20, r30
    15f4:	5f 1f       	adc	r21, r31
    15f6:	5d 83       	std	Y+5, r21	; 0x05
    15f8:	4c 83       	std	Y+4, r20	; 0x04
    15fa:	1e 8e       	std	Y+30, r1	; 0x1e
    15fc:	fb 83       	std	Y+3, r31	; 0x03
    15fe:	ea 83       	std	Y+2, r30	; 0x02
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	82 9f       	mul	r24, r18
    1604:	a0 01       	movw	r20, r0
    1606:	83 9f       	mul	r24, r19
    1608:	50 0d       	add	r21, r0
    160a:	92 9f       	mul	r25, r18
    160c:	50 0d       	add	r21, r0
    160e:	11 24       	eor	r1, r1
    1610:	cf 01       	movw	r24, r30
    1612:	84 0f       	add	r24, r20
    1614:	95 1f       	adc	r25, r21
    1616:	9f 83       	std	Y+7, r25	; 0x07
    1618:	8e 83       	std	Y+6, r24	; 0x06
    161a:	8f ef       	ldi	r24, 0xFF	; 255
    161c:	89 a3       	std	Y+33, r24	; 0x21
    161e:	8a a3       	std	Y+34, r24	; 0x22
    1620:	61 11       	cpse	r22, r1
    1622:	0b c0       	rjmp	.+22     	; 0x163a <xQueueGenericReset+0x6e>
    1624:	88 85       	ldd	r24, Y+8	; 0x08
    1626:	88 23       	and	r24, r24
    1628:	71 f0       	breq	.+28     	; 0x1646 <xQueueGenericReset+0x7a>
    162a:	ce 01       	movw	r24, r28
    162c:	08 96       	adiw	r24, 0x08	; 8
    162e:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <xTaskRemoveFromEventList>
    1632:	88 23       	and	r24, r24
    1634:	41 f0       	breq	.+16     	; 0x1646 <xQueueGenericReset+0x7a>
    1636:	31 de       	rcall	.-926    	; 0x129a <vPortYield>
    1638:	06 c0       	rjmp	.+12     	; 0x1646 <xQueueGenericReset+0x7a>
    163a:	ce 01       	movw	r24, r28
    163c:	08 96       	adiw	r24, 0x08	; 8
    163e:	e5 dc       	rcall	.-1590   	; 0x100a <vListInitialise>
    1640:	ce 01       	movw	r24, r28
    1642:	43 96       	adiw	r24, 0x13	; 19
    1644:	e2 dc       	rcall	.-1596   	; 0x100a <vListInitialise>
    1646:	0f 90       	pop	r0
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	08 95       	ret

00001652 <xQueueGenericCreate>:
    1652:	ff 92       	push	r15
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	08 2f       	mov	r16, r24
    165e:	16 2f       	mov	r17, r22
    1660:	f4 2e       	mov	r15, r20
    1662:	66 23       	and	r22, r22
    1664:	b9 f0       	breq	.+46     	; 0x1694 <xQueueGenericCreate+0x42>
    1666:	86 9f       	mul	r24, r22
    1668:	c0 01       	movw	r24, r0
    166a:	11 24       	eor	r1, r1
    166c:	85 96       	adiw	r24, 0x25	; 37
    166e:	e3 db       	rcall	.-2106   	; 0xe36 <pvPortMalloc>
    1670:	ec 01       	movw	r28, r24
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	41 f4       	brne	.+16     	; 0x1686 <xQueueGenericCreate+0x34>
    1676:	14 c0       	rjmp	.+40     	; 0x16a0 <xQueueGenericCreate+0x4e>
    1678:	0f 8f       	std	Y+31, r16	; 0x1f
    167a:	18 a3       	std	Y+32, r17	; 0x20
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	ce 01       	movw	r24, r28
    1680:	a5 df       	rcall	.-182    	; 0x15cc <xQueueGenericReset>
    1682:	fc a2       	std	Y+36, r15	; 0x24
    1684:	0d c0       	rjmp	.+26     	; 0x16a0 <xQueueGenericCreate+0x4e>
    1686:	85 96       	adiw	r24, 0x25	; 37
    1688:	99 83       	std	Y+1, r25	; 0x01
    168a:	88 83       	st	Y, r24
    168c:	f5 cf       	rjmp	.-22     	; 0x1678 <xQueueGenericCreate+0x26>
    168e:	d9 83       	std	Y+1, r29	; 0x01
    1690:	c8 83       	st	Y, r28
    1692:	f2 cf       	rjmp	.-28     	; 0x1678 <xQueueGenericCreate+0x26>
    1694:	85 e2       	ldi	r24, 0x25	; 37
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	ce db       	rcall	.-2148   	; 0xe36 <pvPortMalloc>
    169a:	ec 01       	movw	r28, r24
    169c:	89 2b       	or	r24, r25
    169e:	b9 f7       	brne	.-18     	; 0x168e <xQueueGenericCreate+0x3c>
    16a0:	ce 01       	movw	r24, r28
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	ff 90       	pop	r15
    16ac:	08 95       	ret

000016ae <xQueueGenericSend>:
    16ae:	9f 92       	push	r9
    16b0:	af 92       	push	r10
    16b2:	bf 92       	push	r11
    16b4:	cf 92       	push	r12
    16b6:	df 92       	push	r13
    16b8:	ef 92       	push	r14
    16ba:	ff 92       	push	r15
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	29 97       	sbiw	r28, 0x09	; 9
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	7c 01       	movw	r14, r24
    16d6:	5b 01       	movw	r10, r22
    16d8:	2e 83       	std	Y+6, r18	; 0x06
    16da:	3f 83       	std	Y+7, r19	; 0x07
    16dc:	48 87       	std	Y+8, r20	; 0x08
    16de:	59 87       	std	Y+9, r21	; 0x09
    16e0:	10 e0       	ldi	r17, 0x00	; 0
    16e2:	99 24       	eor	r9, r9
    16e4:	93 94       	inc	r9
    16e6:	6c 01       	movw	r12, r24
    16e8:	88 e0       	ldi	r24, 0x08	; 8
    16ea:	c8 0e       	add	r12, r24
    16ec:	d1 1c       	adc	r13, r1
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	0f 92       	push	r0
    16f4:	f7 01       	movw	r30, r14
    16f6:	96 8d       	ldd	r25, Z+30	; 0x1e
    16f8:	87 8d       	ldd	r24, Z+31	; 0x1f
    16fa:	98 17       	cp	r25, r24
    16fc:	10 f0       	brcs	.+4      	; 0x1702 <xQueueGenericSend+0x54>
    16fe:	02 30       	cpi	r16, 0x02	; 2
    1700:	b1 f4       	brne	.+44     	; 0x172e <xQueueGenericSend+0x80>
    1702:	40 2f       	mov	r20, r16
    1704:	b5 01       	movw	r22, r10
    1706:	c7 01       	movw	r24, r14
    1708:	9b de       	rcall	.-714    	; 0x1440 <prvCopyDataToQueue>
    170a:	f7 01       	movw	r30, r14
    170c:	93 89       	ldd	r25, Z+19	; 0x13
    170e:	99 23       	and	r25, r25
    1710:	41 f0       	breq	.+16     	; 0x1722 <xQueueGenericSend+0x74>
    1712:	c7 01       	movw	r24, r14
    1714:	43 96       	adiw	r24, 0x13	; 19
    1716:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <xTaskRemoveFromEventList>
    171a:	88 23       	and	r24, r24
    171c:	21 f0       	breq	.+8      	; 0x1726 <xQueueGenericSend+0x78>
    171e:	bd dd       	rcall	.-1158   	; 0x129a <vPortYield>
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <xQueueGenericSend+0x78>
    1722:	81 11       	cpse	r24, r1
    1724:	ba dd       	rcall	.-1164   	; 0x129a <vPortYield>
    1726:	0f 90       	pop	r0
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	4e c0       	rjmp	.+156    	; 0x17ca <xQueueGenericSend+0x11c>
    172e:	8e 81       	ldd	r24, Y+6	; 0x06
    1730:	9f 81       	ldd	r25, Y+7	; 0x07
    1732:	a8 85       	ldd	r26, Y+8	; 0x08
    1734:	b9 85       	ldd	r27, Y+9	; 0x09
    1736:	89 2b       	or	r24, r25
    1738:	8a 2b       	or	r24, r26
    173a:	8b 2b       	or	r24, r27
    173c:	21 f4       	brne	.+8      	; 0x1746 <xQueueGenericSend+0x98>
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	42 c0       	rjmp	.+132    	; 0x17ca <xQueueGenericSend+0x11c>
    1746:	11 11       	cpse	r17, r1
    1748:	05 c0       	rjmp	.+10     	; 0x1754 <xQueueGenericSend+0xa6>
    174a:	ce 01       	movw	r24, r28
    174c:	01 96       	adiw	r24, 0x01	; 1
    174e:	0e 94 ef 15 	call	0x2bde	; 0x2bde <vTaskInternalSetTimeOutState>
    1752:	19 2d       	mov	r17, r9
    1754:	0f 90       	pop	r0
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	00 d7       	rcall	.+3584   	; 0x255a <vTaskSuspendAll>
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	0f 92       	push	r0
    1760:	f7 01       	movw	r30, r14
    1762:	81 a1       	ldd	r24, Z+33	; 0x21
    1764:	8f 3f       	cpi	r24, 0xFF	; 255
    1766:	09 f4       	brne	.+2      	; 0x176a <xQueueGenericSend+0xbc>
    1768:	11 a2       	std	Z+33, r1	; 0x21
    176a:	f7 01       	movw	r30, r14
    176c:	82 a1       	ldd	r24, Z+34	; 0x22
    176e:	8f 3f       	cpi	r24, 0xFF	; 255
    1770:	09 f4       	brne	.+2      	; 0x1774 <xQueueGenericSend+0xc6>
    1772:	12 a2       	std	Z+34, r1	; 0x22
    1774:	0f 90       	pop	r0
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	be 01       	movw	r22, r28
    177a:	6a 5f       	subi	r22, 0xFA	; 250
    177c:	7f 4f       	sbci	r23, 0xFF	; 255
    177e:	ce 01       	movw	r24, r28
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	0e 94 00 16 	call	0x2c00	; 0x2c00 <xTaskCheckForTimeOut>
    1786:	81 11       	cpse	r24, r1
    1788:	1c c0       	rjmp	.+56     	; 0x17c2 <xQueueGenericSend+0x114>
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	0f 92       	push	r0
    1790:	f7 01       	movw	r30, r14
    1792:	96 8d       	ldd	r25, Z+30	; 0x1e
    1794:	87 8d       	ldd	r24, Z+31	; 0x1f
    1796:	0f 90       	pop	r0
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	98 13       	cpse	r25, r24
    179c:	0e c0       	rjmp	.+28     	; 0x17ba <xQueueGenericSend+0x10c>
    179e:	4e 81       	ldd	r20, Y+6	; 0x06
    17a0:	5f 81       	ldd	r21, Y+7	; 0x07
    17a2:	68 85       	ldd	r22, Y+8	; 0x08
    17a4:	79 85       	ldd	r23, Y+9	; 0x09
    17a6:	c6 01       	movw	r24, r12
    17a8:	0e 94 08 15 	call	0x2a10	; 0x2a10 <vTaskPlaceOnEventList>
    17ac:	c7 01       	movw	r24, r14
    17ae:	c1 de       	rcall	.-638    	; 0x1532 <prvUnlockQueue>
    17b0:	bd d7       	rcall	.+3962   	; 0x272c <xTaskResumeAll>
    17b2:	81 11       	cpse	r24, r1
    17b4:	9c cf       	rjmp	.-200    	; 0x16ee <xQueueGenericSend+0x40>
    17b6:	71 dd       	rcall	.-1310   	; 0x129a <vPortYield>
    17b8:	9a cf       	rjmp	.-204    	; 0x16ee <xQueueGenericSend+0x40>
    17ba:	c7 01       	movw	r24, r14
    17bc:	ba de       	rcall	.-652    	; 0x1532 <prvUnlockQueue>
    17be:	b6 d7       	rcall	.+3948   	; 0x272c <xTaskResumeAll>
    17c0:	96 cf       	rjmp	.-212    	; 0x16ee <xQueueGenericSend+0x40>
    17c2:	c7 01       	movw	r24, r14
    17c4:	b6 de       	rcall	.-660    	; 0x1532 <prvUnlockQueue>
    17c6:	b2 d7       	rcall	.+3940   	; 0x272c <xTaskResumeAll>
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	29 96       	adiw	r28, 0x09	; 9
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	1f 91       	pop	r17
    17dc:	0f 91       	pop	r16
    17de:	ff 90       	pop	r15
    17e0:	ef 90       	pop	r14
    17e2:	df 90       	pop	r13
    17e4:	cf 90       	pop	r12
    17e6:	bf 90       	pop	r11
    17e8:	af 90       	pop	r10
    17ea:	9f 90       	pop	r9
    17ec:	08 95       	ret

000017ee <xQueueCreateMutex>:
    17ee:	0f 93       	push	r16
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	48 2f       	mov	r20, r24
    17f6:	60 e0       	ldi	r22, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	2b df       	rcall	.-426    	; 0x1652 <xQueueGenericCreate>
    17fc:	ec 01       	movw	r28, r24
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	61 f0       	breq	.+24     	; 0x181a <xQueueCreateMutex+0x2c>
    1802:	1d 82       	std	Y+5, r1	; 0x05
    1804:	1c 82       	std	Y+4, r1	; 0x04
    1806:	19 82       	std	Y+1, r1	; 0x01
    1808:	18 82       	st	Y, r1
    180a:	1e 82       	std	Y+6, r1	; 0x06
    180c:	00 e0       	ldi	r16, 0x00	; 0
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	a9 01       	movw	r20, r18
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	4a df       	rcall	.-364    	; 0x16ae <xQueueGenericSend>
    181a:	ce 01       	movw	r24, r28
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	0f 91       	pop	r16
    1822:	08 95       	ret

00001824 <xQueueGenericSendFromISR>:
    1824:	ef 92       	push	r14
    1826:	ff 92       	push	r15
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	8a 01       	movw	r16, r20
    1832:	fc 01       	movw	r30, r24
    1834:	56 8d       	ldd	r21, Z+30	; 0x1e
    1836:	37 8d       	ldd	r19, Z+31	; 0x1f
    1838:	53 17       	cp	r21, r19
    183a:	10 f0       	brcs	.+4      	; 0x1840 <xQueueGenericSendFromISR+0x1c>
    183c:	22 30       	cpi	r18, 0x02	; 2
    183e:	e9 f4       	brne	.+58     	; 0x187a <xQueueGenericSendFromISR+0x56>
    1840:	42 2f       	mov	r20, r18
    1842:	78 01       	movw	r14, r16
    1844:	ec 01       	movw	r28, r24
    1846:	1a a1       	ldd	r17, Y+34	; 0x22
    1848:	fb dd       	rcall	.-1034   	; 0x1440 <prvCopyDataToQueue>
    184a:	1f 3f       	cpi	r17, 0xFF	; 255
    184c:	81 f4       	brne	.+32     	; 0x186e <xQueueGenericSendFromISR+0x4a>
    184e:	8b 89       	ldd	r24, Y+19	; 0x13
    1850:	88 23       	and	r24, r24
    1852:	a9 f0       	breq	.+42     	; 0x187e <xQueueGenericSendFromISR+0x5a>
    1854:	ce 01       	movw	r24, r28
    1856:	43 96       	adiw	r24, 0x13	; 19
    1858:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <xTaskRemoveFromEventList>
    185c:	88 23       	and	r24, r24
    185e:	89 f0       	breq	.+34     	; 0x1882 <xQueueGenericSendFromISR+0x5e>
    1860:	e1 14       	cp	r14, r1
    1862:	f1 04       	cpc	r15, r1
    1864:	81 f0       	breq	.+32     	; 0x1886 <xQueueGenericSendFromISR+0x62>
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	f7 01       	movw	r30, r14
    186a:	80 83       	st	Z, r24
    186c:	0d c0       	rjmp	.+26     	; 0x1888 <xQueueGenericSendFromISR+0x64>
    186e:	ff 24       	eor	r15, r15
    1870:	f3 94       	inc	r15
    1872:	f1 0e       	add	r15, r17
    1874:	fa a2       	std	Y+34, r15	; 0x22
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	07 c0       	rjmp	.+14     	; 0x1888 <xQueueGenericSendFromISR+0x64>
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	05 c0       	rjmp	.+10     	; 0x1888 <xQueueGenericSendFromISR+0x64>
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	03 c0       	rjmp	.+6      	; 0x1888 <xQueueGenericSendFromISR+0x64>
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <xQueueGenericSendFromISR+0x64>
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	1f 91       	pop	r17
    188e:	0f 91       	pop	r16
    1890:	ff 90       	pop	r15
    1892:	ef 90       	pop	r14
    1894:	08 95       	ret

00001896 <xQueueReceive>:
    1896:	9f 92       	push	r9
    1898:	af 92       	push	r10
    189a:	bf 92       	push	r11
    189c:	cf 92       	push	r12
    189e:	df 92       	push	r13
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	29 97       	sbiw	r28, 0x09	; 9
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	8c 01       	movw	r16, r24
    18be:	5b 01       	movw	r10, r22
    18c0:	2e 83       	std	Y+6, r18	; 0x06
    18c2:	3f 83       	std	Y+7, r19	; 0x07
    18c4:	48 87       	std	Y+8, r20	; 0x08
    18c6:	59 87       	std	Y+9, r21	; 0x09
    18c8:	e1 2c       	mov	r14, r1
    18ca:	99 24       	eor	r9, r9
    18cc:	93 94       	inc	r9
    18ce:	6c 01       	movw	r12, r24
    18d0:	83 e1       	ldi	r24, 0x13	; 19
    18d2:	c8 0e       	add	r12, r24
    18d4:	d1 1c       	adc	r13, r1
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	0f 92       	push	r0
    18dc:	f8 01       	movw	r30, r16
    18de:	f6 8c       	ldd	r15, Z+30	; 0x1e
    18e0:	ff 20       	and	r15, r15
    18e2:	99 f0       	breq	.+38     	; 0x190a <xQueueReceive+0x74>
    18e4:	b5 01       	movw	r22, r10
    18e6:	c8 01       	movw	r24, r16
    18e8:	0a de       	rcall	.-1004   	; 0x14fe <prvCopyDataFromQueue>
    18ea:	fa 94       	dec	r15
    18ec:	f8 01       	movw	r30, r16
    18ee:	f6 8e       	std	Z+30, r15	; 0x1e
    18f0:	80 85       	ldd	r24, Z+8	; 0x08
    18f2:	88 23       	and	r24, r24
    18f4:	31 f0       	breq	.+12     	; 0x1902 <xQueueReceive+0x6c>
    18f6:	c8 01       	movw	r24, r16
    18f8:	08 96       	adiw	r24, 0x08	; 8
    18fa:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <xTaskRemoveFromEventList>
    18fe:	81 11       	cpse	r24, r1
    1900:	cc dc       	rcall	.-1640   	; 0x129a <vPortYield>
    1902:	0f 90       	pop	r0
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	4d c0       	rjmp	.+154    	; 0x19a4 <xQueueReceive+0x10e>
    190a:	8e 81       	ldd	r24, Y+6	; 0x06
    190c:	9f 81       	ldd	r25, Y+7	; 0x07
    190e:	a8 85       	ldd	r26, Y+8	; 0x08
    1910:	b9 85       	ldd	r27, Y+9	; 0x09
    1912:	89 2b       	or	r24, r25
    1914:	8a 2b       	or	r24, r26
    1916:	8b 2b       	or	r24, r27
    1918:	21 f4       	brne	.+8      	; 0x1922 <xQueueReceive+0x8c>
    191a:	0f 90       	pop	r0
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	41 c0       	rjmp	.+130    	; 0x19a4 <xQueueReceive+0x10e>
    1922:	e1 10       	cpse	r14, r1
    1924:	05 c0       	rjmp	.+10     	; 0x1930 <xQueueReceive+0x9a>
    1926:	ce 01       	movw	r24, r28
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	0e 94 ef 15 	call	0x2bde	; 0x2bde <vTaskInternalSetTimeOutState>
    192e:	e9 2c       	mov	r14, r9
    1930:	0f 90       	pop	r0
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	12 d6       	rcall	.+3108   	; 0x255a <vTaskSuspendAll>
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	0f 92       	push	r0
    193c:	f8 01       	movw	r30, r16
    193e:	81 a1       	ldd	r24, Z+33	; 0x21
    1940:	8f 3f       	cpi	r24, 0xFF	; 255
    1942:	09 f4       	brne	.+2      	; 0x1946 <xQueueReceive+0xb0>
    1944:	11 a2       	std	Z+33, r1	; 0x21
    1946:	f8 01       	movw	r30, r16
    1948:	82 a1       	ldd	r24, Z+34	; 0x22
    194a:	8f 3f       	cpi	r24, 0xFF	; 255
    194c:	09 f4       	brne	.+2      	; 0x1950 <xQueueReceive+0xba>
    194e:	12 a2       	std	Z+34, r1	; 0x22
    1950:	0f 90       	pop	r0
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	be 01       	movw	r22, r28
    1956:	6a 5f       	subi	r22, 0xFA	; 250
    1958:	7f 4f       	sbci	r23, 0xFF	; 255
    195a:	ce 01       	movw	r24, r28
    195c:	01 96       	adiw	r24, 0x01	; 1
    195e:	0e 94 00 16 	call	0x2c00	; 0x2c00 <xTaskCheckForTimeOut>
    1962:	81 11       	cpse	r24, r1
    1964:	16 c0       	rjmp	.+44     	; 0x1992 <xQueueReceive+0xfc>
    1966:	c8 01       	movw	r24, r16
    1968:	60 dd       	rcall	.-1344   	; 0x142a <prvIsQueueEmpty>
    196a:	88 23       	and	r24, r24
    196c:	71 f0       	breq	.+28     	; 0x198a <xQueueReceive+0xf4>
    196e:	4e 81       	ldd	r20, Y+6	; 0x06
    1970:	5f 81       	ldd	r21, Y+7	; 0x07
    1972:	68 85       	ldd	r22, Y+8	; 0x08
    1974:	79 85       	ldd	r23, Y+9	; 0x09
    1976:	c6 01       	movw	r24, r12
    1978:	0e 94 08 15 	call	0x2a10	; 0x2a10 <vTaskPlaceOnEventList>
    197c:	c8 01       	movw	r24, r16
    197e:	d9 dd       	rcall	.-1102   	; 0x1532 <prvUnlockQueue>
    1980:	d5 d6       	rcall	.+3498   	; 0x272c <xTaskResumeAll>
    1982:	81 11       	cpse	r24, r1
    1984:	a8 cf       	rjmp	.-176    	; 0x18d6 <xQueueReceive+0x40>
    1986:	89 dc       	rcall	.-1774   	; 0x129a <vPortYield>
    1988:	a6 cf       	rjmp	.-180    	; 0x18d6 <xQueueReceive+0x40>
    198a:	c8 01       	movw	r24, r16
    198c:	d2 dd       	rcall	.-1116   	; 0x1532 <prvUnlockQueue>
    198e:	ce d6       	rcall	.+3484   	; 0x272c <xTaskResumeAll>
    1990:	a2 cf       	rjmp	.-188    	; 0x18d6 <xQueueReceive+0x40>
    1992:	c8 01       	movw	r24, r16
    1994:	ce dd       	rcall	.-1124   	; 0x1532 <prvUnlockQueue>
    1996:	ca d6       	rcall	.+3476   	; 0x272c <xTaskResumeAll>
    1998:	c8 01       	movw	r24, r16
    199a:	47 dd       	rcall	.-1394   	; 0x142a <prvIsQueueEmpty>
    199c:	88 23       	and	r24, r24
    199e:	09 f4       	brne	.+2      	; 0x19a2 <xQueueReceive+0x10c>
    19a0:	9a cf       	rjmp	.-204    	; 0x18d6 <xQueueReceive+0x40>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	29 96       	adiw	r28, 0x09	; 9
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	ff 90       	pop	r15
    19ba:	ef 90       	pop	r14
    19bc:	df 90       	pop	r13
    19be:	cf 90       	pop	r12
    19c0:	bf 90       	pop	r11
    19c2:	af 90       	pop	r10
    19c4:	9f 90       	pop	r9
    19c6:	08 95       	ret

000019c8 <xQueueSemaphoreTake>:
    19c8:	bf 92       	push	r11
    19ca:	cf 92       	push	r12
    19cc:	df 92       	push	r13
    19ce:	ef 92       	push	r14
    19d0:	ff 92       	push	r15
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	29 97       	sbiw	r28, 0x09	; 9
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	8c 01       	movw	r16, r24
    19ec:	4e 83       	std	Y+6, r20	; 0x06
    19ee:	5f 83       	std	Y+7, r21	; 0x07
    19f0:	68 87       	std	Y+8, r22	; 0x08
    19f2:	79 87       	std	Y+9, r23	; 0x09
    19f4:	b1 2c       	mov	r11, r1
    19f6:	d1 2c       	mov	r13, r1
    19f8:	cc 24       	eor	r12, r12
    19fa:	c3 94       	inc	r12
    19fc:	7c 01       	movw	r14, r24
    19fe:	83 e1       	ldi	r24, 0x13	; 19
    1a00:	e8 0e       	add	r14, r24
    1a02:	f1 1c       	adc	r15, r1
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	0f 92       	push	r0
    1a0a:	d8 01       	movw	r26, r16
    1a0c:	5e 96       	adiw	r26, 0x1e	; 30
    1a0e:	8c 91       	ld	r24, X
    1a10:	5e 97       	sbiw	r26, 0x1e	; 30
    1a12:	88 23       	and	r24, r24
    1a14:	e1 f0       	breq	.+56     	; 0x1a4e <xQueueSemaphoreTake+0x86>
    1a16:	81 50       	subi	r24, 0x01	; 1
    1a18:	5e 96       	adiw	r26, 0x1e	; 30
    1a1a:	8c 93       	st	X, r24
    1a1c:	5e 97       	sbiw	r26, 0x1e	; 30
    1a1e:	8d 91       	ld	r24, X+
    1a20:	9c 91       	ld	r25, X
    1a22:	89 2b       	or	r24, r25
    1a24:	29 f4       	brne	.+10     	; 0x1a30 <xQueueSemaphoreTake+0x68>
    1a26:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <pvTaskIncrementMutexHeldCount>
    1a2a:	f8 01       	movw	r30, r16
    1a2c:	95 83       	std	Z+5, r25	; 0x05
    1a2e:	84 83       	std	Z+4, r24	; 0x04
    1a30:	d8 01       	movw	r26, r16
    1a32:	18 96       	adiw	r26, 0x08	; 8
    1a34:	8c 91       	ld	r24, X
    1a36:	88 23       	and	r24, r24
    1a38:	31 f0       	breq	.+12     	; 0x1a46 <xQueueSemaphoreTake+0x7e>
    1a3a:	c8 01       	movw	r24, r16
    1a3c:	08 96       	adiw	r24, 0x08	; 8
    1a3e:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <xTaskRemoveFromEventList>
    1a42:	81 11       	cpse	r24, r1
    1a44:	2a dc       	rcall	.-1964   	; 0x129a <vPortYield>
    1a46:	0f 90       	pop	r0
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	7a c0       	rjmp	.+244    	; 0x1b42 <xQueueSemaphoreTake+0x17a>
    1a4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a50:	9f 81       	ldd	r25, Y+7	; 0x07
    1a52:	a8 85       	ldd	r26, Y+8	; 0x08
    1a54:	b9 85       	ldd	r27, Y+9	; 0x09
    1a56:	89 2b       	or	r24, r25
    1a58:	8a 2b       	or	r24, r26
    1a5a:	8b 2b       	or	r24, r27
    1a5c:	21 f4       	brne	.+8      	; 0x1a66 <xQueueSemaphoreTake+0x9e>
    1a5e:	0f 90       	pop	r0
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	6e c0       	rjmp	.+220    	; 0x1b42 <xQueueSemaphoreTake+0x17a>
    1a66:	d1 10       	cpse	r13, r1
    1a68:	05 c0       	rjmp	.+10     	; 0x1a74 <xQueueSemaphoreTake+0xac>
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	0e 94 ef 15 	call	0x2bde	; 0x2bde <vTaskInternalSetTimeOutState>
    1a72:	dc 2c       	mov	r13, r12
    1a74:	0f 90       	pop	r0
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	70 d5       	rcall	.+2784   	; 0x255a <vTaskSuspendAll>
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	0f 92       	push	r0
    1a80:	f8 01       	movw	r30, r16
    1a82:	81 a1       	ldd	r24, Z+33	; 0x21
    1a84:	8f 3f       	cpi	r24, 0xFF	; 255
    1a86:	09 f4       	brne	.+2      	; 0x1a8a <xQueueSemaphoreTake+0xc2>
    1a88:	11 a2       	std	Z+33, r1	; 0x21
    1a8a:	d8 01       	movw	r26, r16
    1a8c:	92 96       	adiw	r26, 0x22	; 34
    1a8e:	8c 91       	ld	r24, X
    1a90:	92 97       	sbiw	r26, 0x22	; 34
    1a92:	8f 3f       	cpi	r24, 0xFF	; 255
    1a94:	11 f4       	brne	.+4      	; 0x1a9a <xQueueSemaphoreTake+0xd2>
    1a96:	92 96       	adiw	r26, 0x22	; 34
    1a98:	1c 92       	st	X, r1
    1a9a:	0f 90       	pop	r0
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	be 01       	movw	r22, r28
    1aa0:	6a 5f       	subi	r22, 0xFA	; 250
    1aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	0e 94 00 16 	call	0x2c00	; 0x2c00 <xTaskCheckForTimeOut>
    1aac:	81 11       	cpse	r24, r1
    1aae:	24 c0       	rjmp	.+72     	; 0x1af8 <xQueueSemaphoreTake+0x130>
    1ab0:	c8 01       	movw	r24, r16
    1ab2:	bb dc       	rcall	.-1674   	; 0x142a <prvIsQueueEmpty>
    1ab4:	88 23       	and	r24, r24
    1ab6:	e1 f0       	breq	.+56     	; 0x1af0 <xQueueSemaphoreTake+0x128>
    1ab8:	f8 01       	movw	r30, r16
    1aba:	80 81       	ld	r24, Z
    1abc:	91 81       	ldd	r25, Z+1	; 0x01
    1abe:	89 2b       	or	r24, r25
    1ac0:	51 f4       	brne	.+20     	; 0x1ad6 <xQueueSemaphoreTake+0x10e>
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	0f 92       	push	r0
    1ac8:	84 81       	ldd	r24, Z+4	; 0x04
    1aca:	95 81       	ldd	r25, Z+5	; 0x05
    1acc:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <xTaskPriorityInherit>
    1ad0:	b8 2e       	mov	r11, r24
    1ad2:	0f 90       	pop	r0
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	4e 81       	ldd	r20, Y+6	; 0x06
    1ad8:	5f 81       	ldd	r21, Y+7	; 0x07
    1ada:	68 85       	ldd	r22, Y+8	; 0x08
    1adc:	79 85       	ldd	r23, Y+9	; 0x09
    1ade:	c7 01       	movw	r24, r14
    1ae0:	97 d7       	rcall	.+3886   	; 0x2a10 <vTaskPlaceOnEventList>
    1ae2:	c8 01       	movw	r24, r16
    1ae4:	26 dd       	rcall	.-1460   	; 0x1532 <prvUnlockQueue>
    1ae6:	22 d6       	rcall	.+3140   	; 0x272c <xTaskResumeAll>
    1ae8:	81 11       	cpse	r24, r1
    1aea:	8c cf       	rjmp	.-232    	; 0x1a04 <xQueueSemaphoreTake+0x3c>
    1aec:	d6 db       	rcall	.-2132   	; 0x129a <vPortYield>
    1aee:	8a cf       	rjmp	.-236    	; 0x1a04 <xQueueSemaphoreTake+0x3c>
    1af0:	c8 01       	movw	r24, r16
    1af2:	1f dd       	rcall	.-1474   	; 0x1532 <prvUnlockQueue>
    1af4:	1b d6       	rcall	.+3126   	; 0x272c <xTaskResumeAll>
    1af6:	86 cf       	rjmp	.-244    	; 0x1a04 <xQueueSemaphoreTake+0x3c>
    1af8:	c8 01       	movw	r24, r16
    1afa:	1b dd       	rcall	.-1482   	; 0x1532 <prvUnlockQueue>
    1afc:	17 d6       	rcall	.+3118   	; 0x272c <xTaskResumeAll>
    1afe:	c8 01       	movw	r24, r16
    1b00:	94 dc       	rcall	.-1752   	; 0x142a <prvIsQueueEmpty>
    1b02:	88 23       	and	r24, r24
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <xQueueSemaphoreTake+0x140>
    1b06:	7e cf       	rjmp	.-260    	; 0x1a04 <xQueueSemaphoreTake+0x3c>
    1b08:	bb 20       	and	r11, r11
    1b0a:	d1 f0       	breq	.+52     	; 0x1b40 <xQueueSemaphoreTake+0x178>
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	0f 92       	push	r0
    1b12:	f8 01       	movw	r30, r16
    1b14:	83 89       	ldd	r24, Z+19	; 0x13
    1b16:	88 23       	and	r24, r24
    1b18:	39 f0       	breq	.+14     	; 0x1b28 <xQueueSemaphoreTake+0x160>
    1b1a:	02 8c       	ldd	r0, Z+26	; 0x1a
    1b1c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1b1e:	e0 2d       	mov	r30, r0
    1b20:	80 81       	ld	r24, Z
    1b22:	64 e0       	ldi	r22, 0x04	; 4
    1b24:	68 1b       	sub	r22, r24
    1b26:	01 c0       	rjmp	.+2      	; 0x1b2a <xQueueSemaphoreTake+0x162>
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	d8 01       	movw	r26, r16
    1b2c:	14 96       	adiw	r26, 0x04	; 4
    1b2e:	8d 91       	ld	r24, X+
    1b30:	9c 91       	ld	r25, X
    1b32:	15 97       	sbiw	r26, 0x05	; 5
    1b34:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <vTaskPriorityDisinheritAfterTimeout>
    1b38:	0f 90       	pop	r0
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	01 c0       	rjmp	.+2      	; 0x1b42 <xQueueSemaphoreTake+0x17a>
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	29 96       	adiw	r28, 0x09	; 9
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	ff 90       	pop	r15
    1b58:	ef 90       	pop	r14
    1b5a:	df 90       	pop	r13
    1b5c:	cf 90       	pop	r12
    1b5e:	bf 90       	pop	r11
    1b60:	08 95       	ret

00001b62 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1b62:	cf 93       	push	r28
    1b64:	df 93       	push	r29
    1b66:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	0f 92       	push	r0
    1b6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b70:	8f 3f       	cpi	r24, 0xFF	; 255
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <vQueueWaitForMessageRestricted+0x14>
    1b74:	19 a2       	std	Y+33, r1	; 0x21
    1b76:	8a a1       	ldd	r24, Y+34	; 0x22
    1b78:	8f 3f       	cpi	r24, 0xFF	; 255
    1b7a:	09 f4       	brne	.+2      	; 0x1b7e <vQueueWaitForMessageRestricted+0x1c>
    1b7c:	1a a2       	std	Y+34, r1	; 0x22
    1b7e:	0f 90       	pop	r0
    1b80:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1b82:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b84:	81 11       	cpse	r24, r1
    1b86:	03 c0       	rjmp	.+6      	; 0x1b8e <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1b88:	ce 01       	movw	r24, r28
    1b8a:	43 96       	adiw	r24, 0x13	; 19
    1b8c:	7c d7       	rcall	.+3832   	; 0x2a86 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1b8e:	ce 01       	movw	r24, r28
    1b90:	d0 dc       	rcall	.-1632   	; 0x1532 <prvUnlockQueue>
    }
    1b92:	df 91       	pop	r29
    1b94:	cf 91       	pop	r28
    1b96:	08 95       	ret

00001b98 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1b98:	fc 01       	movw	r30, r24
    1b9a:	44 81       	ldd	r20, Z+4	; 0x04
    1b9c:	55 81       	ldd	r21, Z+5	; 0x05
    1b9e:	22 81       	ldd	r18, Z+2	; 0x02
    1ba0:	33 81       	ldd	r19, Z+3	; 0x03
    1ba2:	24 0f       	add	r18, r20
    1ba4:	35 1f       	adc	r19, r21
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	b9 01       	movw	r22, r18
    1bac:	68 1b       	sub	r22, r24
    1bae:	79 0b       	sbc	r23, r25
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	64 17       	cp	r22, r20
    1bb4:	75 07       	cpc	r23, r21
    1bb6:	10 f0       	brcs	.+4      	; 0x1bbc <prvBytesInBuffer+0x24>
    1bb8:	84 1b       	sub	r24, r20
    1bba:	95 0b       	sbc	r25, r21
    1bbc:	08 95       	ret

00001bbe <prvWriteBytesToBuffer>:
    1bbe:	af 92       	push	r10
    1bc0:	bf 92       	push	r11
    1bc2:	cf 92       	push	r12
    1bc4:	df 92       	push	r13
    1bc6:	ef 92       	push	r14
    1bc8:	ff 92       	push	r15
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	6c 01       	movw	r12, r24
    1bd4:	5b 01       	movw	r10, r22
    1bd6:	7a 01       	movw	r14, r20
    1bd8:	fc 01       	movw	r30, r24
    1bda:	c2 81       	ldd	r28, Z+2	; 0x02
    1bdc:	d3 81       	ldd	r29, Z+3	; 0x03
    1bde:	04 81       	ldd	r16, Z+4	; 0x04
    1be0:	15 81       	ldd	r17, Z+5	; 0x05
    1be2:	0c 1b       	sub	r16, r28
    1be4:	1d 0b       	sbc	r17, r29
    1be6:	40 17       	cp	r20, r16
    1be8:	51 07       	cpc	r21, r17
    1bea:	08 f4       	brcc	.+2      	; 0x1bee <prvWriteBytesToBuffer+0x30>
    1bec:	8a 01       	movw	r16, r20
    1bee:	f6 01       	movw	r30, r12
    1bf0:	84 85       	ldd	r24, Z+12	; 0x0c
    1bf2:	95 85       	ldd	r25, Z+13	; 0x0d
    1bf4:	a8 01       	movw	r20, r16
    1bf6:	b5 01       	movw	r22, r10
    1bf8:	8c 0f       	add	r24, r28
    1bfa:	9d 1f       	adc	r25, r29
    1bfc:	0e 94 b5 2c 	call	0x596a	; 0x596a <memcpy>
    1c00:	0e 15       	cp	r16, r14
    1c02:	1f 05       	cpc	r17, r15
    1c04:	58 f4       	brcc	.+22     	; 0x1c1c <prvWriteBytesToBuffer+0x5e>
    1c06:	a7 01       	movw	r20, r14
    1c08:	40 1b       	sub	r20, r16
    1c0a:	51 0b       	sbc	r21, r17
    1c0c:	b5 01       	movw	r22, r10
    1c0e:	60 0f       	add	r22, r16
    1c10:	71 1f       	adc	r23, r17
    1c12:	f6 01       	movw	r30, r12
    1c14:	84 85       	ldd	r24, Z+12	; 0x0c
    1c16:	95 85       	ldd	r25, Z+13	; 0x0d
    1c18:	0e 94 b5 2c 	call	0x596a	; 0x596a <memcpy>
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	8e 0d       	add	r24, r14
    1c20:	9f 1d       	adc	r25, r15
    1c22:	f6 01       	movw	r30, r12
    1c24:	24 81       	ldd	r18, Z+4	; 0x04
    1c26:	35 81       	ldd	r19, Z+5	; 0x05
    1c28:	82 17       	cp	r24, r18
    1c2a:	93 07       	cpc	r25, r19
    1c2c:	10 f0       	brcs	.+4      	; 0x1c32 <prvWriteBytesToBuffer+0x74>
    1c2e:	82 1b       	sub	r24, r18
    1c30:	93 0b       	sbc	r25, r19
    1c32:	f6 01       	movw	r30, r12
    1c34:	93 83       	std	Z+3, r25	; 0x03
    1c36:	82 83       	std	Z+2, r24	; 0x02
    1c38:	c7 01       	movw	r24, r14
    1c3a:	df 91       	pop	r29
    1c3c:	cf 91       	pop	r28
    1c3e:	1f 91       	pop	r17
    1c40:	0f 91       	pop	r16
    1c42:	ff 90       	pop	r15
    1c44:	ef 90       	pop	r14
    1c46:	df 90       	pop	r13
    1c48:	cf 90       	pop	r12
    1c4a:	bf 90       	pop	r11
    1c4c:	af 90       	pop	r10
    1c4e:	08 95       	ret

00001c50 <prvWriteMessageToBuffer>:
    1c50:	cf 92       	push	r12
    1c52:	df 92       	push	r13
    1c54:	ef 92       	push	r14
    1c56:	ff 92       	push	r15
    1c58:	0f 93       	push	r16
    1c5a:	1f 93       	push	r17
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	1f 92       	push	r1
    1c62:	1f 92       	push	r1
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	5a 83       	std	Y+2, r21	; 0x02
    1c6a:	49 83       	std	Y+1, r20	; 0x01
    1c6c:	21 15       	cp	r18, r1
    1c6e:	31 05       	cpc	r19, r1
    1c70:	c9 f0       	breq	.+50     	; 0x1ca4 <prvWriteMessageToBuffer+0x54>
    1c72:	6b 01       	movw	r12, r22
    1c74:	7c 01       	movw	r14, r24
    1c76:	fc 01       	movw	r30, r24
    1c78:	86 85       	ldd	r24, Z+14	; 0x0e
    1c7a:	80 fd       	sbrc	r24, 0
    1c7c:	08 c0       	rjmp	.+16     	; 0x1c8e <prvWriteMessageToBuffer+0x3e>
    1c7e:	ca 01       	movw	r24, r20
    1c80:	24 17       	cp	r18, r20
    1c82:	35 07       	cpc	r19, r21
    1c84:	08 f4       	brcc	.+2      	; 0x1c88 <prvWriteMessageToBuffer+0x38>
    1c86:	c9 01       	movw	r24, r18
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	89 83       	std	Y+1, r24	; 0x01
    1c8c:	11 c0       	rjmp	.+34     	; 0x1cb0 <prvWriteMessageToBuffer+0x60>
    1c8e:	20 17       	cp	r18, r16
    1c90:	31 07       	cpc	r19, r17
    1c92:	58 f0       	brcs	.+22     	; 0x1caa <prvWriteMessageToBuffer+0x5a>
    1c94:	42 e0       	ldi	r20, 0x02	; 2
    1c96:	50 e0       	ldi	r21, 0x00	; 0
    1c98:	be 01       	movw	r22, r28
    1c9a:	6f 5f       	subi	r22, 0xFF	; 255
    1c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9e:	c7 01       	movw	r24, r14
    1ca0:	8e df       	rcall	.-228    	; 0x1bbe <prvWriteBytesToBuffer>
    1ca2:	06 c0       	rjmp	.+12     	; 0x1cb0 <prvWriteMessageToBuffer+0x60>
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	08 c0       	rjmp	.+16     	; 0x1cba <prvWriteMessageToBuffer+0x6a>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	05 c0       	rjmp	.+10     	; 0x1cba <prvWriteMessageToBuffer+0x6a>
    1cb0:	49 81       	ldd	r20, Y+1	; 0x01
    1cb2:	5a 81       	ldd	r21, Y+2	; 0x02
    1cb4:	b6 01       	movw	r22, r12
    1cb6:	c7 01       	movw	r24, r14
    1cb8:	82 df       	rcall	.-252    	; 0x1bbe <prvWriteBytesToBuffer>
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	1f 91       	pop	r17
    1cc4:	0f 91       	pop	r16
    1cc6:	ff 90       	pop	r15
    1cc8:	ef 90       	pop	r14
    1cca:	df 90       	pop	r13
    1ccc:	cf 90       	pop	r12
    1cce:	08 95       	ret

00001cd0 <prvReadBytesFromBuffer>:
    1cd0:	af 92       	push	r10
    1cd2:	bf 92       	push	r11
    1cd4:	cf 92       	push	r12
    1cd6:	df 92       	push	r13
    1cd8:	ef 92       	push	r14
    1cda:	ff 92       	push	r15
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	7c 01       	movw	r14, r24
    1ce6:	5b 01       	movw	r10, r22
    1ce8:	e9 01       	movw	r28, r18
    1cea:	42 17       	cp	r20, r18
    1cec:	53 07       	cpc	r21, r19
    1cee:	08 f4       	brcc	.+2      	; 0x1cf2 <prvReadBytesFromBuffer+0x22>
    1cf0:	ea 01       	movw	r28, r20
    1cf2:	20 97       	sbiw	r28, 0x00	; 0
    1cf4:	79 f1       	breq	.+94     	; 0x1d54 <prvReadBytesFromBuffer+0x84>
    1cf6:	f7 01       	movw	r30, r14
    1cf8:	00 81       	ld	r16, Z
    1cfa:	11 81       	ldd	r17, Z+1	; 0x01
    1cfc:	c4 80       	ldd	r12, Z+4	; 0x04
    1cfe:	d5 80       	ldd	r13, Z+5	; 0x05
    1d00:	c0 1a       	sub	r12, r16
    1d02:	d1 0a       	sbc	r13, r17
    1d04:	cc 15       	cp	r28, r12
    1d06:	dd 05       	cpc	r29, r13
    1d08:	08 f4       	brcc	.+2      	; 0x1d0c <prvReadBytesFromBuffer+0x3c>
    1d0a:	6e 01       	movw	r12, r28
    1d0c:	f7 01       	movw	r30, r14
    1d0e:	64 85       	ldd	r22, Z+12	; 0x0c
    1d10:	75 85       	ldd	r23, Z+13	; 0x0d
    1d12:	60 0f       	add	r22, r16
    1d14:	71 1f       	adc	r23, r17
    1d16:	a6 01       	movw	r20, r12
    1d18:	c5 01       	movw	r24, r10
    1d1a:	0e 94 b5 2c 	call	0x596a	; 0x596a <memcpy>
    1d1e:	cc 16       	cp	r12, r28
    1d20:	dd 06       	cpc	r13, r29
    1d22:	58 f4       	brcc	.+22     	; 0x1d3a <prvReadBytesFromBuffer+0x6a>
    1d24:	ae 01       	movw	r20, r28
    1d26:	4c 19       	sub	r20, r12
    1d28:	5d 09       	sbc	r21, r13
    1d2a:	f7 01       	movw	r30, r14
    1d2c:	64 85       	ldd	r22, Z+12	; 0x0c
    1d2e:	75 85       	ldd	r23, Z+13	; 0x0d
    1d30:	c5 01       	movw	r24, r10
    1d32:	8c 0d       	add	r24, r12
    1d34:	9d 1d       	adc	r25, r13
    1d36:	0e 94 b5 2c 	call	0x596a	; 0x596a <memcpy>
    1d3a:	0c 0f       	add	r16, r28
    1d3c:	1d 1f       	adc	r17, r29
    1d3e:	f7 01       	movw	r30, r14
    1d40:	84 81       	ldd	r24, Z+4	; 0x04
    1d42:	95 81       	ldd	r25, Z+5	; 0x05
    1d44:	08 17       	cp	r16, r24
    1d46:	19 07       	cpc	r17, r25
    1d48:	10 f0       	brcs	.+4      	; 0x1d4e <prvReadBytesFromBuffer+0x7e>
    1d4a:	08 1b       	sub	r16, r24
    1d4c:	19 0b       	sbc	r17, r25
    1d4e:	f7 01       	movw	r30, r14
    1d50:	11 83       	std	Z+1, r17	; 0x01
    1d52:	00 83       	st	Z, r16
    1d54:	ce 01       	movw	r24, r28
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	1f 91       	pop	r17
    1d5c:	0f 91       	pop	r16
    1d5e:	ff 90       	pop	r15
    1d60:	ef 90       	pop	r14
    1d62:	df 90       	pop	r13
    1d64:	cf 90       	pop	r12
    1d66:	bf 90       	pop	r11
    1d68:	af 90       	pop	r10
    1d6a:	08 95       	ret

00001d6c <xStreamBufferGenericCreate>:
    1d6c:	ef 92       	push	r14
    1d6e:	ff 92       	push	r15
    1d70:	1f 93       	push	r17
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	eb 01       	movw	r28, r22
    1d78:	11 e0       	ldi	r17, 0x01	; 1
    1d7a:	41 30       	cpi	r20, 0x01	; 1
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <xStreamBufferGenericCreate+0x14>
    1d7e:	10 e0       	ldi	r17, 0x00	; 0
    1d80:	20 97       	sbiw	r28, 0x00	; 0
    1d82:	11 f4       	brne	.+4      	; 0x1d88 <xStreamBufferGenericCreate+0x1c>
    1d84:	c1 e0       	ldi	r28, 0x01	; 1
    1d86:	d0 e0       	ldi	r29, 0x00	; 0
    1d88:	7c 01       	movw	r14, r24
    1d8a:	2f ef       	ldi	r18, 0xFF	; 255
    1d8c:	e2 1a       	sub	r14, r18
    1d8e:	f2 0a       	sbc	r15, r18
    1d90:	41 96       	adiw	r24, 0x11	; 17
    1d92:	51 d8       	rcall	.-3934   	; 0xe36 <pvPortMalloc>
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	81 f0       	breq	.+32     	; 0x1db8 <xStreamBufferGenericCreate+0x4c>
    1d98:	20 e1       	ldi	r18, 0x10	; 16
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	11 92       	st	Z+, r1
    1d9e:	2a 95       	dec	r18
    1da0:	e9 f7       	brne	.-6      	; 0x1d9c <xStreamBufferGenericCreate+0x30>
    1da2:	9c 01       	movw	r18, r24
    1da4:	20 5f       	subi	r18, 0xF0	; 240
    1da6:	3f 4f       	sbci	r19, 0xFF	; 255
    1da8:	fc 01       	movw	r30, r24
    1daa:	35 87       	std	Z+13, r19	; 0x0d
    1dac:	24 87       	std	Z+12, r18	; 0x0c
    1dae:	f5 82       	std	Z+5, r15	; 0x05
    1db0:	e4 82       	std	Z+4, r14	; 0x04
    1db2:	d7 83       	std	Z+7, r29	; 0x07
    1db4:	c6 83       	std	Z+6, r28	; 0x06
    1db6:	16 87       	std	Z+14, r17	; 0x0e
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	1f 91       	pop	r17
    1dbe:	ff 90       	pop	r15
    1dc0:	ef 90       	pop	r14
    1dc2:	08 95       	ret

00001dc4 <xStreamBufferReset>:
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	fc 01       	movw	r30, r24
    1dca:	27 85       	ldd	r18, Z+15	; 0x0f
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	0f 92       	push	r0
    1dd2:	80 85       	ldd	r24, Z+8	; 0x08
    1dd4:	91 85       	ldd	r25, Z+9	; 0x09
    1dd6:	89 2b       	or	r24, r25
    1dd8:	d1 f4       	brne	.+52     	; 0x1e0e <xStreamBufferReset+0x4a>
    1dda:	82 85       	ldd	r24, Z+10	; 0x0a
    1ddc:	93 85       	ldd	r25, Z+11	; 0x0b
    1dde:	89 2b       	or	r24, r25
    1de0:	c1 f4       	brne	.+48     	; 0x1e12 <xStreamBufferReset+0x4e>
    1de2:	86 85       	ldd	r24, Z+14	; 0x0e
    1de4:	46 81       	ldd	r20, Z+6	; 0x06
    1de6:	57 81       	ldd	r21, Z+7	; 0x07
    1de8:	64 81       	ldd	r22, Z+4	; 0x04
    1dea:	75 81       	ldd	r23, Z+5	; 0x05
    1dec:	a4 85       	ldd	r26, Z+12	; 0x0c
    1dee:	b5 85       	ldd	r27, Z+13	; 0x0d
    1df0:	90 e1       	ldi	r25, 0x10	; 16
    1df2:	ef 01       	movw	r28, r30
    1df4:	19 92       	st	Y+, r1
    1df6:	9a 95       	dec	r25
    1df8:	e9 f7       	brne	.-6      	; 0x1df4 <xStreamBufferReset+0x30>
    1dfa:	b5 87       	std	Z+13, r27	; 0x0d
    1dfc:	a4 87       	std	Z+12, r26	; 0x0c
    1dfe:	75 83       	std	Z+5, r23	; 0x05
    1e00:	64 83       	std	Z+4, r22	; 0x04
    1e02:	57 83       	std	Z+7, r21	; 0x07
    1e04:	46 83       	std	Z+6, r20	; 0x06
    1e06:	86 87       	std	Z+14, r24	; 0x0e
    1e08:	27 87       	std	Z+15, r18	; 0x0f
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	03 c0       	rjmp	.+6      	; 0x1e14 <xStreamBufferReset+0x50>
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	01 c0       	rjmp	.+2      	; 0x1e14 <xStreamBufferReset+0x50>
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	0f 90       	pop	r0
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	08 95       	ret

00001e1e <xStreamBufferSpacesAvailable>:
    1e1e:	fc 01       	movw	r30, r24
    1e20:	24 81       	ldd	r18, Z+4	; 0x04
    1e22:	35 81       	ldd	r19, Z+5	; 0x05
    1e24:	80 81       	ld	r24, Z
    1e26:	91 81       	ldd	r25, Z+1	; 0x01
    1e28:	42 81       	ldd	r20, Z+2	; 0x02
    1e2a:	53 81       	ldd	r21, Z+3	; 0x03
    1e2c:	82 0f       	add	r24, r18
    1e2e:	93 1f       	adc	r25, r19
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	84 1b       	sub	r24, r20
    1e34:	95 0b       	sbc	r25, r21
    1e36:	82 17       	cp	r24, r18
    1e38:	93 07       	cpc	r25, r19
    1e3a:	10 f0       	brcs	.+4      	; 0x1e40 <xStreamBufferSpacesAvailable+0x22>
    1e3c:	82 1b       	sub	r24, r18
    1e3e:	93 0b       	sbc	r25, r19
    1e40:	08 95       	ret

00001e42 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1e42:	2f 92       	push	r2
    1e44:	3f 92       	push	r3
    1e46:	4f 92       	push	r4
    1e48:	5f 92       	push	r5
    1e4a:	6f 92       	push	r6
    1e4c:	7f 92       	push	r7
    1e4e:	8f 92       	push	r8
    1e50:	9f 92       	push	r9
    1e52:	af 92       	push	r10
    1e54:	bf 92       	push	r11
    1e56:	cf 92       	push	r12
    1e58:	df 92       	push	r13
    1e5a:	ef 92       	push	r14
    1e5c:	ff 92       	push	r15
    1e5e:	0f 93       	push	r16
    1e60:	1f 93       	push	r17
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	29 97       	sbiw	r28, 0x09	; 9
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	5c 01       	movw	r10, r24
    1e78:	1b 01       	movw	r2, r22
    1e7a:	2a 01       	movw	r4, r20
    1e7c:	0e 83       	std	Y+6, r16	; 0x06
    1e7e:	1f 83       	std	Y+7, r17	; 0x07
    1e80:	28 87       	std	Y+8, r18	; 0x08
    1e82:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1e84:	fc 01       	movw	r30, r24
    1e86:	86 85       	ldd	r24, Z+14	; 0x0e
    1e88:	80 ff       	sbrs	r24, 0
    1e8a:	05 c0       	rjmp	.+10     	; 0x1e96 <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1e8c:	3a 01       	movw	r6, r20
    1e8e:	f2 e0       	ldi	r31, 0x02	; 2
    1e90:	6f 0e       	add	r6, r31
    1e92:	71 1c       	adc	r7, r1
    1e94:	01 c0       	rjmp	.+2      	; 0x1e98 <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    1e96:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1e98:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e9c:	a8 85       	ldd	r26, Y+8	; 0x08
    1e9e:	b9 85       	ldd	r27, Y+9	; 0x09
    1ea0:	89 2b       	or	r24, r25
    1ea2:	8a 2b       	or	r24, r26
    1ea4:	8b 2b       	or	r24, r27
    1ea6:	09 f4       	brne	.+2      	; 0x1eaa <xStreamBufferSend+0x68>
    1ea8:	35 c0       	rjmp	.+106    	; 0x1f14 <xStreamBufferSend+0xd2>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1eaa:	ce 01       	movw	r24, r28
    1eac:	01 96       	adiw	r24, 0x01	; 1
    1eae:	81 d6       	rcall	.+3330   	; 0x2bb2 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1eb6:	c5 01       	movw	r24, r10
    1eb8:	b2 df       	rcall	.-156    	; 0x1e1e <xStreamBufferSpacesAvailable>
    1eba:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    1ebc:	86 15       	cp	r24, r6
    1ebe:	97 05       	cpc	r25, r7
    1ec0:	20 f5       	brcc	.+72     	; 0x1f0a <xStreamBufferSend+0xc8>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	0e 94 2b 19 	call	0x3256	; 0x3256 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1eca:	f3 d6       	rcall	.+3558   	; 0x2cb2 <xTaskGetCurrentTaskHandle>
    1ecc:	f5 01       	movw	r30, r10
    1ece:	93 87       	std	Z+11, r25	; 0x0b
    1ed0:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1ed2:	0f 90       	pop	r0
    1ed4:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1ed6:	ce 80       	ldd	r12, Y+6	; 0x06
    1ed8:	df 80       	ldd	r13, Y+7	; 0x07
    1eda:	e8 84       	ldd	r14, Y+8	; 0x08
    1edc:	f9 84       	ldd	r15, Y+9	; 0x09
    1ede:	00 e0       	ldi	r16, 0x00	; 0
    1ee0:	10 e0       	ldi	r17, 0x00	; 0
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	a9 01       	movw	r20, r18
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	70 e0       	ldi	r23, 0x00	; 0
    1eec:	cb 01       	movw	r24, r22
    1eee:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1ef2:	f5 01       	movw	r30, r10
    1ef4:	13 86       	std	Z+11, r1	; 0x0b
    1ef6:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1ef8:	be 01       	movw	r22, r28
    1efa:	6a 5f       	subi	r22, 0xFA	; 250
    1efc:	7f 4f       	sbci	r23, 0xFF	; 255
    1efe:	ce 01       	movw	r24, r28
    1f00:	01 96       	adiw	r24, 0x01	; 1
    1f02:	7e d6       	rcall	.+3324   	; 0x2c00 <xTaskCheckForTimeOut>
    1f04:	88 23       	and	r24, r24
    1f06:	a1 f2       	breq	.-88     	; 0x1eb0 <xStreamBufferSend+0x6e>
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <xStreamBufferSend+0xcc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1f0a:	0f 90       	pop	r0
    1f0c:	0f be       	out	0x3f, r0	; 63
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1f0e:	81 14       	cp	r8, r1
    1f10:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1f12:	19 f4       	brne	.+6      	; 0x1f1a <xStreamBufferSend+0xd8>
    1f14:	c5 01       	movw	r24, r10
    1f16:	83 df       	rcall	.-250    	; 0x1e1e <xStreamBufferSpacesAvailable>
    1f18:	4c 01       	movw	r8, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1f1a:	83 01       	movw	r16, r6
    1f1c:	94 01       	movw	r18, r8
    1f1e:	a2 01       	movw	r20, r4
    1f20:	b1 01       	movw	r22, r2
    1f22:	c5 01       	movw	r24, r10
    1f24:	95 de       	rcall	.-726    	; 0x1c50 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    1f26:	7c 01       	movw	r14, r24
    1f28:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1f2a:	e1 f0       	breq	.+56     	; 0x1f64 <xStreamBufferSend+0x122>
    1f2c:	c5 01       	movw	r24, r10
    1f2e:	34 de       	rcall	.-920    	; 0x1b98 <prvBytesInBuffer>
    1f30:	f5 01       	movw	r30, r10
    1f32:	26 81       	ldd	r18, Z+6	; 0x06
    1f34:	37 81       	ldd	r19, Z+7	; 0x07
    1f36:	82 17       	cp	r24, r18
    1f38:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1f3a:	a0 f0       	brcs	.+40     	; 0x1f64 <xStreamBufferSend+0x122>
    1f3c:	0e d3       	rcall	.+1564   	; 0x255a <vTaskSuspendAll>
    1f3e:	f5 01       	movw	r30, r10
    1f40:	80 85       	ldd	r24, Z+8	; 0x08
    1f42:	91 85       	ldd	r25, Z+9	; 0x09
    1f44:	89 2b       	or	r24, r25
    1f46:	69 f0       	breq	.+26     	; 0x1f62 <xStreamBufferSend+0x120>
    1f48:	80 85       	ldd	r24, Z+8	; 0x08
    1f4a:	91 85       	ldd	r25, Z+9	; 0x09
    1f4c:	00 e0       	ldi	r16, 0x00	; 0
    1f4e:	10 e0       	ldi	r17, 0x00	; 0
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	40 e0       	ldi	r20, 0x00	; 0
    1f54:	50 e0       	ldi	r21, 0x00	; 0
    1f56:	ba 01       	movw	r22, r20
    1f58:	0e 94 2a 18 	call	0x3054	; 0x3054 <xTaskGenericNotify>
    1f5c:	f5 01       	movw	r30, r10
    1f5e:	11 86       	std	Z+9, r1	; 0x09
    1f60:	10 86       	std	Z+8, r1	; 0x08
    1f62:	e4 d3       	rcall	.+1992   	; 0x272c <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1f64:	c7 01       	movw	r24, r14
    1f66:	29 96       	adiw	r28, 0x09	; 9
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
    1f76:	1f 91       	pop	r17
    1f78:	0f 91       	pop	r16
    1f7a:	ff 90       	pop	r15
    1f7c:	ef 90       	pop	r14
    1f7e:	df 90       	pop	r13
    1f80:	cf 90       	pop	r12
    1f82:	bf 90       	pop	r11
    1f84:	af 90       	pop	r10
    1f86:	9f 90       	pop	r9
    1f88:	8f 90       	pop	r8
    1f8a:	7f 90       	pop	r7
    1f8c:	6f 90       	pop	r6
    1f8e:	5f 90       	pop	r5
    1f90:	4f 90       	pop	r4
    1f92:	3f 90       	pop	r3
    1f94:	2f 90       	pop	r2
    1f96:	08 95       	ret

00001f98 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1f98:	af 92       	push	r10
    1f9a:	bf 92       	push	r11
    1f9c:	cf 92       	push	r12
    1f9e:	df 92       	push	r13
    1fa0:	ef 92       	push	r14
    1fa2:	ff 92       	push	r15
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	ec 01       	movw	r28, r24
    1fae:	5b 01       	movw	r10, r22
    1fb0:	6a 01       	movw	r12, r20
    1fb2:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1fb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fb6:	80 ff       	sbrs	r24, 0
    1fb8:	04 c0       	rjmp	.+8      	; 0x1fc2 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1fba:	8a 01       	movw	r16, r20
    1fbc:	0e 5f       	subi	r16, 0xFE	; 254
    1fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc0:	01 c0       	rjmp	.+2      	; 0x1fc4 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    1fc2:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	2b df       	rcall	.-426    	; 0x1e1e <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1fc8:	9c 01       	movw	r18, r24
    1fca:	a6 01       	movw	r20, r12
    1fcc:	b5 01       	movw	r22, r10
    1fce:	ce 01       	movw	r24, r28
    1fd0:	3f de       	rcall	.-898    	; 0x1c50 <prvWriteMessageToBuffer>
    1fd2:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1fd4:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1fd6:	b9 f0       	breq	.+46     	; 0x2006 <xStreamBufferSendFromISR+0x6e>
    1fd8:	ce 01       	movw	r24, r28
    1fda:	de dd       	rcall	.-1092   	; 0x1b98 <prvBytesInBuffer>
    1fdc:	2e 81       	ldd	r18, Y+6	; 0x06
    1fde:	3f 81       	ldd	r19, Y+7	; 0x07
    1fe0:	82 17       	cp	r24, r18
    1fe2:	93 07       	cpc	r25, r19
    1fe4:	80 f0       	brcs	.+32     	; 0x2006 <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1fe6:	88 85       	ldd	r24, Y+8	; 0x08
    1fe8:	99 85       	ldd	r25, Y+9	; 0x09
    1fea:	89 2b       	or	r24, r25
    1fec:	61 f0       	breq	.+24     	; 0x2006 <xStreamBufferSendFromISR+0x6e>
    1fee:	88 85       	ldd	r24, Y+8	; 0x08
    1ff0:	99 85       	ldd	r25, Y+9	; 0x09
    1ff2:	00 e0       	ldi	r16, 0x00	; 0
    1ff4:	10 e0       	ldi	r17, 0x00	; 0
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	40 e0       	ldi	r20, 0x00	; 0
    1ffa:	50 e0       	ldi	r21, 0x00	; 0
    1ffc:	ba 01       	movw	r22, r20
    1ffe:	0e 94 a2 18 	call	0x3144	; 0x3144 <xTaskGenericNotifyFromISR>
    2002:	19 86       	std	Y+9, r1	; 0x09
    2004:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    2006:	c6 01       	movw	r24, r12
    2008:	df 91       	pop	r29
    200a:	cf 91       	pop	r28
    200c:	1f 91       	pop	r17
    200e:	0f 91       	pop	r16
    2010:	ff 90       	pop	r15
    2012:	ef 90       	pop	r14
    2014:	df 90       	pop	r13
    2016:	cf 90       	pop	r12
    2018:	bf 90       	pop	r11
    201a:	af 90       	pop	r10
    201c:	08 95       	ret

0000201e <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    201e:	4f 92       	push	r4
    2020:	5f 92       	push	r5
    2022:	6f 92       	push	r6
    2024:	7f 92       	push	r7
    2026:	8f 92       	push	r8
    2028:	9f 92       	push	r9
    202a:	af 92       	push	r10
    202c:	bf 92       	push	r11
    202e:	cf 92       	push	r12
    2030:	df 92       	push	r13
    2032:	ef 92       	push	r14
    2034:	ff 92       	push	r15
    2036:	0f 93       	push	r16
    2038:	1f 93       	push	r17
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	1f 92       	push	r1
    2040:	1f 92       	push	r1
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	5c 01       	movw	r10, r24
    2048:	2b 01       	movw	r4, r22
    204a:	3a 01       	movw	r6, r20
    204c:	68 01       	movw	r12, r16
    204e:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2050:	fc 01       	movw	r30, r24
    2052:	86 85       	ldd	r24, Z+14	; 0x0e
    2054:	80 fd       	sbrc	r24, 0
    2056:	03 c0       	rjmp	.+6      	; 0x205e <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2058:	81 2c       	mov	r8, r1
    205a:	91 2c       	mov	r9, r1
    205c:	04 c0       	rjmp	.+8      	; 0x2066 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    205e:	68 94       	set
    2060:	88 24       	eor	r8, r8
    2062:	81 f8       	bld	r8, 1
    2064:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2066:	c1 14       	cp	r12, r1
    2068:	d1 04       	cpc	r13, r1
    206a:	e1 04       	cpc	r14, r1
    206c:	f1 04       	cpc	r15, r1
    206e:	31 f1       	breq	.+76     	; 0x20bc <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2076:	c5 01       	movw	r24, r10
    2078:	8f dd       	rcall	.-1250   	; 0x1b98 <prvBytesInBuffer>
    207a:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    207c:	88 16       	cp	r8, r24
    207e:	99 06       	cpc	r9, r25
    2080:	40 f0       	brcs	.+16     	; 0x2092 <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 2b 19 	call	0x3256	; 0x3256 <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    208a:	13 d6       	rcall	.+3110   	; 0x2cb2 <xTaskGetCurrentTaskHandle>
    208c:	f5 01       	movw	r30, r10
    208e:	91 87       	std	Z+9, r25	; 0x09
    2090:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2092:	0f 90       	pop	r0
    2094:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2096:	80 16       	cp	r8, r16
    2098:	91 06       	cpc	r9, r17
    209a:	b0 f0       	brcs	.+44     	; 0x20c8 <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    209c:	00 e0       	ldi	r16, 0x00	; 0
    209e:	10 e0       	ldi	r17, 0x00	; 0
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	a9 01       	movw	r20, r18
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	70 e0       	ldi	r23, 0x00	; 0
    20aa:	cb 01       	movw	r24, r22
    20ac:	49 d7       	rcall	.+3730   	; 0x2f40 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    20ae:	f5 01       	movw	r30, r10
    20b0:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    20b2:	10 86       	std	Z+8, r1	; 0x08
    20b4:	c5 01       	movw	r24, r10
    20b6:	70 dd       	rcall	.-1312   	; 0x1b98 <prvBytesInBuffer>
    20b8:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    20ba:	03 c0       	rjmp	.+6      	; 0x20c2 <xStreamBufferReceive+0xa4>
    20bc:	c5 01       	movw	r24, r10
    20be:	6c dd       	rcall	.-1320   	; 0x1b98 <prvBytesInBuffer>
    20c0:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    20c2:	80 16       	cp	r8, r16
    20c4:	91 06       	cpc	r9, r17
    20c6:	b8 f5       	brcc	.+110    	; 0x2136 <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    20c8:	81 14       	cp	r8, r1
    20ca:	91 04       	cpc	r9, r1
    20cc:	c1 f0       	breq	.+48     	; 0x20fe <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    20ce:	f5 01       	movw	r30, r10
    20d0:	e0 80       	ld	r14, Z
    20d2:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    20d4:	98 01       	movw	r18, r16
    20d6:	a4 01       	movw	r20, r8
    20d8:	be 01       	movw	r22, r28
    20da:	6f 5f       	subi	r22, 0xFF	; 255
    20dc:	7f 4f       	sbci	r23, 0xFF	; 255
    20de:	c5 01       	movw	r24, r10
    20e0:	f7 dd       	rcall	.-1042   	; 0x1cd0 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    20e6:	08 19       	sub	r16, r8
    20e8:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    20ea:	68 16       	cp	r6, r24
    20ec:	79 06       	cpc	r7, r25
    20ee:	30 f4       	brcc	.+12     	; 0x20fc <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    20f0:	f5 01       	movw	r30, r10
    20f2:	f1 82       	std	Z+1, r15	; 0x01
    20f4:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    20f6:	61 2c       	mov	r6, r1
    20f8:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    20fa:	01 c0       	rjmp	.+2      	; 0x20fe <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    20fc:	3c 01       	movw	r6, r24
    20fe:	98 01       	movw	r18, r16
    2100:	a3 01       	movw	r20, r6
    2102:	b2 01       	movw	r22, r4
    2104:	c5 01       	movw	r24, r10
    2106:	e4 dd       	rcall	.-1080   	; 0x1cd0 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2108:	7c 01       	movw	r14, r24
    210a:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    210c:	b1 f0       	breq	.+44     	; 0x213a <xStreamBufferReceive+0x11c>
    210e:	25 d2       	rcall	.+1098   	; 0x255a <vTaskSuspendAll>
    2110:	f5 01       	movw	r30, r10
    2112:	82 85       	ldd	r24, Z+10	; 0x0a
    2114:	93 85       	ldd	r25, Z+11	; 0x0b
    2116:	89 2b       	or	r24, r25
    2118:	61 f0       	breq	.+24     	; 0x2132 <xStreamBufferReceive+0x114>
    211a:	82 85       	ldd	r24, Z+10	; 0x0a
    211c:	93 85       	ldd	r25, Z+11	; 0x0b
    211e:	00 e0       	ldi	r16, 0x00	; 0
    2120:	10 e0       	ldi	r17, 0x00	; 0
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	ba 01       	movw	r22, r20
    212a:	94 d7       	rcall	.+3880   	; 0x3054 <xTaskGenericNotify>
    212c:	f5 01       	movw	r30, r10
    212e:	13 86       	std	Z+11, r1	; 0x0b
    2130:	12 86       	std	Z+10, r1	; 0x0a
    2132:	fc d2       	rcall	.+1528   	; 0x272c <xTaskResumeAll>
    2134:	02 c0       	rjmp	.+4      	; 0x213a <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2136:	e1 2c       	mov	r14, r1
    2138:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    213a:	c7 01       	movw	r24, r14
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	df 91       	pop	r29
    2142:	cf 91       	pop	r28
    2144:	1f 91       	pop	r17
    2146:	0f 91       	pop	r16
    2148:	ff 90       	pop	r15
    214a:	ef 90       	pop	r14
    214c:	df 90       	pop	r13
    214e:	cf 90       	pop	r12
    2150:	bf 90       	pop	r11
    2152:	af 90       	pop	r10
    2154:	9f 90       	pop	r9
    2156:	8f 90       	pop	r8
    2158:	7f 90       	pop	r7
    215a:	6f 90       	pop	r6
    215c:	5f 90       	pop	r5
    215e:	4f 90       	pop	r4
    2160:	08 95       	ret

00002162 <prvResetNextTaskUnblockTime>:
    2162:	e0 91 b8 18 	lds	r30, 0x18B8	; 0x8018b8 <pxDelayedTaskList>
    2166:	f0 91 b9 18 	lds	r31, 0x18B9	; 0x8018b9 <pxDelayedTaskList+0x1>
    216a:	80 81       	ld	r24, Z
    216c:	81 11       	cpse	r24, r1
    216e:	0c c0       	rjmp	.+24     	; 0x2188 <prvResetNextTaskUnblockTime+0x26>
    2170:	8f ef       	ldi	r24, 0xFF	; 255
    2172:	9f ef       	ldi	r25, 0xFF	; 255
    2174:	dc 01       	movw	r26, r24
    2176:	80 93 85 18 	sts	0x1885, r24	; 0x801885 <xNextTaskUnblockTime>
    217a:	90 93 86 18 	sts	0x1886, r25	; 0x801886 <xNextTaskUnblockTime+0x1>
    217e:	a0 93 87 18 	sts	0x1887, r26	; 0x801887 <xNextTaskUnblockTime+0x2>
    2182:	b0 93 88 18 	sts	0x1888, r27	; 0x801888 <xNextTaskUnblockTime+0x3>
    2186:	08 95       	ret
    2188:	e0 91 b8 18 	lds	r30, 0x18B8	; 0x8018b8 <pxDelayedTaskList>
    218c:	f0 91 b9 18 	lds	r31, 0x18B9	; 0x8018b9 <pxDelayedTaskList+0x1>
    2190:	07 80       	ldd	r0, Z+7	; 0x07
    2192:	f0 85       	ldd	r31, Z+8	; 0x08
    2194:	e0 2d       	mov	r30, r0
    2196:	00 84       	ldd	r0, Z+8	; 0x08
    2198:	f1 85       	ldd	r31, Z+9	; 0x09
    219a:	e0 2d       	mov	r30, r0
    219c:	82 81       	ldd	r24, Z+2	; 0x02
    219e:	93 81       	ldd	r25, Z+3	; 0x03
    21a0:	a4 81       	ldd	r26, Z+4	; 0x04
    21a2:	b5 81       	ldd	r27, Z+5	; 0x05
    21a4:	80 93 85 18 	sts	0x1885, r24	; 0x801885 <xNextTaskUnblockTime>
    21a8:	90 93 86 18 	sts	0x1886, r25	; 0x801886 <xNextTaskUnblockTime+0x1>
    21ac:	a0 93 87 18 	sts	0x1887, r26	; 0x801887 <xNextTaskUnblockTime+0x2>
    21b0:	b0 93 88 18 	sts	0x1888, r27	; 0x801888 <xNextTaskUnblockTime+0x3>
    21b4:	08 95       	ret

000021b6 <prvAddCurrentTaskToDelayedList>:
    21b6:	8f 92       	push	r8
    21b8:	9f 92       	push	r9
    21ba:	af 92       	push	r10
    21bc:	bf 92       	push	r11
    21be:	cf 92       	push	r12
    21c0:	df 92       	push	r13
    21c2:	ef 92       	push	r14
    21c4:	ff 92       	push	r15
    21c6:	cf 93       	push	r28
    21c8:	6b 01       	movw	r12, r22
    21ca:	7c 01       	movw	r14, r24
    21cc:	c4 2f       	mov	r28, r20
    21ce:	80 90 8f 18 	lds	r8, 0x188F	; 0x80188f <xTickCount>
    21d2:	90 90 90 18 	lds	r9, 0x1890	; 0x801890 <xTickCount+0x1>
    21d6:	a0 90 91 18 	lds	r10, 0x1891	; 0x801891 <xTickCount+0x2>
    21da:	b0 90 92 18 	lds	r11, 0x1892	; 0x801892 <xTickCount+0x3>
    21de:	80 91 fc 18 	lds	r24, 0x18FC	; 0x8018fc <pxCurrentTCB>
    21e2:	90 91 fd 18 	lds	r25, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    21e6:	02 96       	adiw	r24, 0x02	; 2
    21e8:	0e 94 78 08 	call	0x10f0	; 0x10f0 <uxListRemove>
    21ec:	8f ef       	ldi	r24, 0xFF	; 255
    21ee:	c8 16       	cp	r12, r24
    21f0:	d8 06       	cpc	r13, r24
    21f2:	e8 06       	cpc	r14, r24
    21f4:	f8 06       	cpc	r15, r24
    21f6:	69 f4       	brne	.+26     	; 0x2212 <__stack+0x13>
    21f8:	cc 23       	and	r28, r28
    21fa:	59 f0       	breq	.+22     	; 0x2212 <__stack+0x13>
    21fc:	60 91 fc 18 	lds	r22, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2200:	70 91 fd 18 	lds	r23, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2204:	6e 5f       	subi	r22, 0xFE	; 254
    2206:	7f 4f       	sbci	r23, 0xFF	; 255
    2208:	84 e9       	ldi	r24, 0x94	; 148
    220a:	98 e1       	ldi	r25, 0x18	; 24
    220c:	0e 94 1a 08 	call	0x1034	; 0x1034 <vListInsertEnd>
    2210:	3f c0       	rjmp	.+126    	; 0x2290 <__stack+0x91>
    2212:	c8 0c       	add	r12, r8
    2214:	d9 1c       	adc	r13, r9
    2216:	ea 1c       	adc	r14, r10
    2218:	fb 1c       	adc	r15, r11
    221a:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    221e:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2222:	c2 82       	std	Z+2, r12	; 0x02
    2224:	d3 82       	std	Z+3, r13	; 0x03
    2226:	e4 82       	std	Z+4, r14	; 0x04
    2228:	f5 82       	std	Z+5, r15	; 0x05
    222a:	c8 14       	cp	r12, r8
    222c:	d9 04       	cpc	r13, r9
    222e:	ea 04       	cpc	r14, r10
    2230:	fb 04       	cpc	r15, r11
    2232:	68 f4       	brcc	.+26     	; 0x224e <__stack+0x4f>
    2234:	60 91 fc 18 	lds	r22, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2238:	70 91 fd 18 	lds	r23, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    223c:	80 91 b6 18 	lds	r24, 0x18B6	; 0x8018b6 <pxOverflowDelayedTaskList>
    2240:	90 91 b7 18 	lds	r25, 0x18B7	; 0x8018b7 <pxOverflowDelayedTaskList+0x1>
    2244:	6e 5f       	subi	r22, 0xFE	; 254
    2246:	7f 4f       	sbci	r23, 0xFF	; 255
    2248:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsert>
    224c:	21 c0       	rjmp	.+66     	; 0x2290 <__stack+0x91>
    224e:	60 91 fc 18 	lds	r22, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2252:	70 91 fd 18 	lds	r23, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2256:	80 91 b8 18 	lds	r24, 0x18B8	; 0x8018b8 <pxDelayedTaskList>
    225a:	90 91 b9 18 	lds	r25, 0x18B9	; 0x8018b9 <pxDelayedTaskList+0x1>
    225e:	6e 5f       	subi	r22, 0xFE	; 254
    2260:	7f 4f       	sbci	r23, 0xFF	; 255
    2262:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsert>
    2266:	80 91 85 18 	lds	r24, 0x1885	; 0x801885 <xNextTaskUnblockTime>
    226a:	90 91 86 18 	lds	r25, 0x1886	; 0x801886 <xNextTaskUnblockTime+0x1>
    226e:	a0 91 87 18 	lds	r26, 0x1887	; 0x801887 <xNextTaskUnblockTime+0x2>
    2272:	b0 91 88 18 	lds	r27, 0x1888	; 0x801888 <xNextTaskUnblockTime+0x3>
    2276:	c8 16       	cp	r12, r24
    2278:	d9 06       	cpc	r13, r25
    227a:	ea 06       	cpc	r14, r26
    227c:	fb 06       	cpc	r15, r27
    227e:	40 f4       	brcc	.+16     	; 0x2290 <__stack+0x91>
    2280:	c0 92 85 18 	sts	0x1885, r12	; 0x801885 <xNextTaskUnblockTime>
    2284:	d0 92 86 18 	sts	0x1886, r13	; 0x801886 <xNextTaskUnblockTime+0x1>
    2288:	e0 92 87 18 	sts	0x1887, r14	; 0x801887 <xNextTaskUnblockTime+0x2>
    228c:	f0 92 88 18 	sts	0x1888, r15	; 0x801888 <xNextTaskUnblockTime+0x3>
    2290:	cf 91       	pop	r28
    2292:	ff 90       	pop	r15
    2294:	ef 90       	pop	r14
    2296:	df 90       	pop	r13
    2298:	cf 90       	pop	r12
    229a:	bf 90       	pop	r11
    229c:	af 90       	pop	r10
    229e:	9f 90       	pop	r9
    22a0:	8f 90       	pop	r8
    22a2:	08 95       	ret

000022a4 <xTaskCreate>:
    22a4:	4f 92       	push	r4
    22a6:	5f 92       	push	r5
    22a8:	6f 92       	push	r6
    22aa:	7f 92       	push	r7
    22ac:	8f 92       	push	r8
    22ae:	9f 92       	push	r9
    22b0:	af 92       	push	r10
    22b2:	bf 92       	push	r11
    22b4:	cf 92       	push	r12
    22b6:	df 92       	push	r13
    22b8:	ef 92       	push	r14
    22ba:	ff 92       	push	r15
    22bc:	0f 93       	push	r16
    22be:	cf 93       	push	r28
    22c0:	df 93       	push	r29
    22c2:	4c 01       	movw	r8, r24
    22c4:	6b 01       	movw	r12, r22
    22c6:	5a 01       	movw	r10, r20
    22c8:	29 01       	movw	r4, r18
    22ca:	ca 01       	movw	r24, r20
    22cc:	0e 94 1b 07 	call	0xe36	; 0xe36 <pvPortMalloc>
    22d0:	3c 01       	movw	r6, r24
    22d2:	89 2b       	or	r24, r25
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <xTaskCreate+0x34>
    22d6:	f4 c0       	rjmp	.+488    	; 0x24c0 <xTaskCreate+0x21c>
    22d8:	80 e3       	ldi	r24, 0x30	; 48
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 1b 07 	call	0xe36	; 0xe36 <pvPortMalloc>
    22e0:	ec 01       	movw	r28, r24
    22e2:	89 2b       	or	r24, r25
    22e4:	99 f0       	breq	.+38     	; 0x230c <xTaskCreate+0x68>
    22e6:	7c 8e       	std	Y+28, r7	; 0x1c
    22e8:	6b 8e       	std	Y+27, r6	; 0x1b
    22ea:	a5 01       	movw	r20, r10
    22ec:	65 ea       	ldi	r22, 0xA5	; 165
    22ee:	70 e0       	ldi	r23, 0x00	; 0
    22f0:	c3 01       	movw	r24, r6
    22f2:	0e 94 be 2c 	call	0x597c	; 0x597c <memset>
    22f6:	21 e0       	ldi	r18, 0x01	; 1
    22f8:	a2 1a       	sub	r10, r18
    22fa:	b1 08       	sbc	r11, r1
    22fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2300:	a8 0e       	add	r10, r24
    2302:	b9 1e       	adc	r11, r25
    2304:	c1 14       	cp	r12, r1
    2306:	d1 04       	cpc	r13, r1
    2308:	29 f4       	brne	.+10     	; 0x2314 <xTaskCreate+0x70>
    230a:	20 c0       	rjmp	.+64     	; 0x234c <xTaskCreate+0xa8>
    230c:	c3 01       	movw	r24, r6
    230e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <vPortFree>
    2312:	d6 c0       	rjmp	.+428    	; 0x24c0 <xTaskCreate+0x21c>
    2314:	d6 01       	movw	r26, r12
    2316:	8c 91       	ld	r24, X
    2318:	8d 8f       	std	Y+29, r24	; 0x1d
    231a:	8c 91       	ld	r24, X
    231c:	88 23       	and	r24, r24
    231e:	a1 f0       	breq	.+40     	; 0x2348 <xTaskCreate+0xa4>
    2320:	ae 01       	movw	r20, r28
    2322:	42 5e       	subi	r20, 0xE2	; 226
    2324:	5f 4f       	sbci	r21, 0xFF	; 255
    2326:	f6 01       	movw	r30, r12
    2328:	31 96       	adiw	r30, 0x01	; 1
    232a:	b8 e0       	ldi	r27, 0x08	; 8
    232c:	cb 0e       	add	r12, r27
    232e:	d1 1c       	adc	r13, r1
    2330:	cf 01       	movw	r24, r30
    2332:	21 91       	ld	r18, Z+
    2334:	da 01       	movw	r26, r20
    2336:	2d 93       	st	X+, r18
    2338:	ad 01       	movw	r20, r26
    233a:	dc 01       	movw	r26, r24
    233c:	8c 91       	ld	r24, X
    233e:	88 23       	and	r24, r24
    2340:	19 f0       	breq	.+6      	; 0x2348 <xTaskCreate+0xa4>
    2342:	ec 15       	cp	r30, r12
    2344:	fd 05       	cpc	r31, r13
    2346:	a1 f7       	brne	.-24     	; 0x2330 <xTaskCreate+0x8c>
    2348:	1c a2       	std	Y+36, r1	; 0x24
    234a:	01 c0       	rjmp	.+2      	; 0x234e <xTaskCreate+0xaa>
    234c:	1d 8e       	std	Y+29, r1	; 0x1d
    234e:	04 30       	cpi	r16, 0x04	; 4
    2350:	08 f0       	brcs	.+2      	; 0x2354 <xTaskCreate+0xb0>
    2352:	03 e0       	ldi	r16, 0x03	; 3
    2354:	0a 8f       	std	Y+26, r16	; 0x1a
    2356:	0f a3       	std	Y+39, r16	; 0x27
    2358:	18 a6       	std	Y+40, r1	; 0x28
    235a:	6e 01       	movw	r12, r28
    235c:	b2 e0       	ldi	r27, 0x02	; 2
    235e:	cb 0e       	add	r12, r27
    2360:	d1 1c       	adc	r13, r1
    2362:	c6 01       	movw	r24, r12
    2364:	0e 94 16 08 	call	0x102c	; 0x102c <vListInitialiseItem>
    2368:	ce 01       	movw	r24, r28
    236a:	0e 96       	adiw	r24, 0x0e	; 14
    236c:	0e 94 16 08 	call	0x102c	; 0x102c <vListInitialiseItem>
    2370:	db 87       	std	Y+11, r29	; 0x0b
    2372:	ca 87       	std	Y+10, r28	; 0x0a
    2374:	84 e0       	ldi	r24, 0x04	; 4
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	a0 e0       	ldi	r26, 0x00	; 0
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	80 1b       	sub	r24, r16
    237e:	91 09       	sbc	r25, r1
    2380:	a1 09       	sbc	r26, r1
    2382:	b1 09       	sbc	r27, r1
    2384:	8e 87       	std	Y+14, r24	; 0x0e
    2386:	9f 87       	std	Y+15, r25	; 0x0f
    2388:	a8 8b       	std	Y+16, r26	; 0x10
    238a:	b9 8b       	std	Y+17, r27	; 0x11
    238c:	df 8b       	std	Y+23, r29	; 0x17
    238e:	ce 8b       	std	Y+22, r28	; 0x16
    2390:	1a a6       	std	Y+42, r1	; 0x2a
    2392:	19 a6       	std	Y+41, r1	; 0x29
    2394:	1b a6       	std	Y+43, r1	; 0x2b
    2396:	1c a6       	std	Y+44, r1	; 0x2c
    2398:	1d a6       	std	Y+45, r1	; 0x2d
    239a:	1e a6       	std	Y+46, r1	; 0x2e
    239c:	1f a6       	std	Y+47, r1	; 0x2f
    239e:	a2 01       	movw	r20, r4
    23a0:	b4 01       	movw	r22, r8
    23a2:	c5 01       	movw	r24, r10
    23a4:	0e 94 9f 08 	call	0x113e	; 0x113e <pxPortInitialiseStack>
    23a8:	99 83       	std	Y+1, r25	; 0x01
    23aa:	88 83       	st	Y, r24
    23ac:	e1 14       	cp	r14, r1
    23ae:	f1 04       	cpc	r15, r1
    23b0:	19 f0       	breq	.+6      	; 0x23b8 <xTaskCreate+0x114>
    23b2:	f7 01       	movw	r30, r14
    23b4:	d1 83       	std	Z+1, r29	; 0x01
    23b6:	c0 83       	st	Z, r28
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	0f 92       	push	r0
    23be:	80 91 93 18 	lds	r24, 0x1893	; 0x801893 <uxCurrentNumberOfTasks>
    23c2:	8f 5f       	subi	r24, 0xFF	; 255
    23c4:	80 93 93 18 	sts	0x1893, r24	; 0x801893 <uxCurrentNumberOfTasks>
    23c8:	80 91 fc 18 	lds	r24, 0x18FC	; 0x8018fc <pxCurrentTCB>
    23cc:	90 91 fd 18 	lds	r25, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    23d0:	89 2b       	or	r24, r25
    23d2:	d1 f5       	brne	.+116    	; 0x2448 <xTaskCreate+0x1a4>
    23d4:	d0 93 fd 18 	sts	0x18FD, r29	; 0x8018fd <pxCurrentTCB+0x1>
    23d8:	c0 93 fc 18 	sts	0x18FC, r28	; 0x8018fc <pxCurrentTCB>
    23dc:	80 91 93 18 	lds	r24, 0x1893	; 0x801893 <uxCurrentNumberOfTasks>
    23e0:	81 30       	cpi	r24, 0x01	; 1
    23e2:	09 f0       	breq	.+2      	; 0x23e6 <xTaskCreate+0x142>
    23e4:	41 c0       	rjmp	.+130    	; 0x2468 <xTaskCreate+0x1c4>
    23e6:	80 ed       	ldi	r24, 0xD0	; 208
    23e8:	98 e1       	ldi	r25, 0x18	; 24
    23ea:	0e 94 05 08 	call	0x100a	; 0x100a <vListInitialise>
    23ee:	8b ed       	ldi	r24, 0xDB	; 219
    23f0:	98 e1       	ldi	r25, 0x18	; 24
    23f2:	0e 94 05 08 	call	0x100a	; 0x100a <vListInitialise>
    23f6:	86 ee       	ldi	r24, 0xE6	; 230
    23f8:	98 e1       	ldi	r25, 0x18	; 24
    23fa:	0e 94 05 08 	call	0x100a	; 0x100a <vListInitialise>
    23fe:	81 ef       	ldi	r24, 0xF1	; 241
    2400:	98 e1       	ldi	r25, 0x18	; 24
    2402:	0e 94 05 08 	call	0x100a	; 0x100a <vListInitialise>
    2406:	85 ec       	ldi	r24, 0xC5	; 197
    2408:	98 e1       	ldi	r25, 0x18	; 24
    240a:	0e 94 05 08 	call	0x100a	; 0x100a <vListInitialise>
    240e:	8a eb       	ldi	r24, 0xBA	; 186
    2410:	98 e1       	ldi	r25, 0x18	; 24
    2412:	0e 94 05 08 	call	0x100a	; 0x100a <vListInitialise>
    2416:	8b ea       	ldi	r24, 0xAB	; 171
    2418:	98 e1       	ldi	r25, 0x18	; 24
    241a:	0e 94 05 08 	call	0x100a	; 0x100a <vListInitialise>
    241e:	80 ea       	ldi	r24, 0xA0	; 160
    2420:	98 e1       	ldi	r25, 0x18	; 24
    2422:	0e 94 05 08 	call	0x100a	; 0x100a <vListInitialise>
    2426:	84 e9       	ldi	r24, 0x94	; 148
    2428:	98 e1       	ldi	r25, 0x18	; 24
    242a:	0e 94 05 08 	call	0x100a	; 0x100a <vListInitialise>
    242e:	85 ec       	ldi	r24, 0xC5	; 197
    2430:	98 e1       	ldi	r25, 0x18	; 24
    2432:	90 93 b9 18 	sts	0x18B9, r25	; 0x8018b9 <pxDelayedTaskList+0x1>
    2436:	80 93 b8 18 	sts	0x18B8, r24	; 0x8018b8 <pxDelayedTaskList>
    243a:	8a eb       	ldi	r24, 0xBA	; 186
    243c:	98 e1       	ldi	r25, 0x18	; 24
    243e:	90 93 b7 18 	sts	0x18B7, r25	; 0x8018b7 <pxOverflowDelayedTaskList+0x1>
    2442:	80 93 b6 18 	sts	0x18B6, r24	; 0x8018b6 <pxOverflowDelayedTaskList>
    2446:	10 c0       	rjmp	.+32     	; 0x2468 <xTaskCreate+0x1c4>
    2448:	80 91 8d 18 	lds	r24, 0x188D	; 0x80188d <xSchedulerRunning>
    244c:	81 11       	cpse	r24, r1
    244e:	0c c0       	rjmp	.+24     	; 0x2468 <xTaskCreate+0x1c4>
    2450:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2454:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2458:	92 8d       	ldd	r25, Z+26	; 0x1a
    245a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    245c:	89 17       	cp	r24, r25
    245e:	20 f0       	brcs	.+8      	; 0x2468 <xTaskCreate+0x1c4>
    2460:	d0 93 fd 18 	sts	0x18FD, r29	; 0x8018fd <pxCurrentTCB+0x1>
    2464:	c0 93 fc 18 	sts	0x18FC, r28	; 0x8018fc <pxCurrentTCB>
    2468:	80 91 89 18 	lds	r24, 0x1889	; 0x801889 <uxTaskNumber>
    246c:	8f 5f       	subi	r24, 0xFF	; 255
    246e:	80 93 89 18 	sts	0x1889, r24	; 0x801889 <uxTaskNumber>
    2472:	8d a3       	std	Y+37, r24	; 0x25
    2474:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2476:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    247a:	98 17       	cp	r25, r24
    247c:	10 f4       	brcc	.+4      	; 0x2482 <xTaskCreate+0x1de>
    247e:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    2482:	fb e0       	ldi	r31, 0x0B	; 11
    2484:	8f 9f       	mul	r24, r31
    2486:	c0 01       	movw	r24, r0
    2488:	11 24       	eor	r1, r1
    248a:	b6 01       	movw	r22, r12
    248c:	80 53       	subi	r24, 0x30	; 48
    248e:	97 4e       	sbci	r25, 0xE7	; 231
    2490:	0e 94 1a 08 	call	0x1034	; 0x1034 <vListInsertEnd>
    2494:	0f 90       	pop	r0
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	80 91 8d 18 	lds	r24, 0x188D	; 0x80188d <xSchedulerRunning>
    249c:	88 23       	and	r24, r24
    249e:	61 f0       	breq	.+24     	; 0x24b8 <xTaskCreate+0x214>
    24a0:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    24a4:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    24a8:	92 8d       	ldd	r25, Z+26	; 0x1a
    24aa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    24ac:	98 17       	cp	r25, r24
    24ae:	30 f4       	brcc	.+12     	; 0x24bc <xTaskCreate+0x218>
    24b0:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	05 c0       	rjmp	.+10     	; 0x24c2 <xTaskCreate+0x21e>
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	03 c0       	rjmp	.+6      	; 0x24c2 <xTaskCreate+0x21e>
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	01 c0       	rjmp	.+2      	; 0x24c2 <xTaskCreate+0x21e>
    24c0:	8f ef       	ldi	r24, 0xFF	; 255
    24c2:	df 91       	pop	r29
    24c4:	cf 91       	pop	r28
    24c6:	0f 91       	pop	r16
    24c8:	ff 90       	pop	r15
    24ca:	ef 90       	pop	r14
    24cc:	df 90       	pop	r13
    24ce:	cf 90       	pop	r12
    24d0:	bf 90       	pop	r11
    24d2:	af 90       	pop	r10
    24d4:	9f 90       	pop	r9
    24d6:	8f 90       	pop	r8
    24d8:	7f 90       	pop	r7
    24da:	6f 90       	pop	r6
    24dc:	5f 90       	pop	r5
    24de:	4f 90       	pop	r4
    24e0:	08 95       	ret

000024e2 <vTaskStartScheduler>:
    24e2:	ef 92       	push	r14
    24e4:	ff 92       	push	r15
    24e6:	0f 93       	push	r16
    24e8:	0f 2e       	mov	r0, r31
    24ea:	f3 e8       	ldi	r31, 0x83	; 131
    24ec:	ef 2e       	mov	r14, r31
    24ee:	f8 e1       	ldi	r31, 0x18	; 24
    24f0:	ff 2e       	mov	r15, r31
    24f2:	f0 2d       	mov	r31, r0
    24f4:	00 e0       	ldi	r16, 0x00	; 0
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 ec       	ldi	r20, 0xC0	; 192
    24fc:	50 e0       	ldi	r21, 0x00	; 0
    24fe:	67 e2       	ldi	r22, 0x27	; 39
    2500:	74 e0       	ldi	r23, 0x04	; 4
    2502:	8d ec       	ldi	r24, 0xCD	; 205
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	ce de       	rcall	.-612    	; 0x22a4 <xTaskCreate>
    2508:	81 30       	cpi	r24, 0x01	; 1
    250a:	19 f5       	brne	.+70     	; 0x2552 <vTaskStartScheduler+0x70>
    250c:	2a d7       	rcall	.+3668   	; 0x3362 <xTimerCreateTimerTask>
    250e:	81 30       	cpi	r24, 0x01	; 1
    2510:	01 f5       	brne	.+64     	; 0x2552 <vTaskStartScheduler+0x70>
    2512:	f8 94       	cli
    2514:	8f ef       	ldi	r24, 0xFF	; 255
    2516:	9f ef       	ldi	r25, 0xFF	; 255
    2518:	dc 01       	movw	r26, r24
    251a:	80 93 85 18 	sts	0x1885, r24	; 0x801885 <xNextTaskUnblockTime>
    251e:	90 93 86 18 	sts	0x1886, r25	; 0x801886 <xNextTaskUnblockTime+0x1>
    2522:	a0 93 87 18 	sts	0x1887, r26	; 0x801887 <xNextTaskUnblockTime+0x2>
    2526:	b0 93 88 18 	sts	0x1888, r27	; 0x801888 <xNextTaskUnblockTime+0x3>
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	80 93 8d 18 	sts	0x188D, r24	; 0x80188d <xSchedulerRunning>
    2530:	10 92 8f 18 	sts	0x188F, r1	; 0x80188f <xTickCount>
    2534:	10 92 90 18 	sts	0x1890, r1	; 0x801890 <xTickCount+0x1>
    2538:	10 92 91 18 	sts	0x1891, r1	; 0x801891 <xTickCount+0x2>
    253c:	10 92 92 18 	sts	0x1892, r1	; 0x801892 <xTickCount+0x3>
    2540:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2544:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2548:	81 a5       	ldd	r24, Z+41	; 0x29
    254a:	0e 94 52 05 	call	0xaa4	; 0xaa4 <task_switch_in>
    254e:	0e 94 11 09 	call	0x1222	; 0x1222 <xPortStartScheduler>
    2552:	0f 91       	pop	r16
    2554:	ff 90       	pop	r15
    2556:	ef 90       	pop	r14
    2558:	08 95       	ret

0000255a <vTaskSuspendAll>:
    255a:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxSchedulerSuspended>
    255e:	8f 5f       	subi	r24, 0xFF	; 255
    2560:	80 93 82 18 	sts	0x1882, r24	; 0x801882 <uxSchedulerSuspended>
    2564:	08 95       	ret

00002566 <xTaskGetTickCount>:
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	0f 92       	push	r0
    256c:	60 91 8f 18 	lds	r22, 0x188F	; 0x80188f <xTickCount>
    2570:	70 91 90 18 	lds	r23, 0x1890	; 0x801890 <xTickCount+0x1>
    2574:	80 91 91 18 	lds	r24, 0x1891	; 0x801891 <xTickCount+0x2>
    2578:	90 91 92 18 	lds	r25, 0x1892	; 0x801892 <xTickCount+0x3>
    257c:	0f 90       	pop	r0
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	08 95       	ret

00002582 <xTaskIncrementTick>:
    2582:	9f 92       	push	r9
    2584:	af 92       	push	r10
    2586:	bf 92       	push	r11
    2588:	cf 92       	push	r12
    258a:	df 92       	push	r13
    258c:	ef 92       	push	r14
    258e:	ff 92       	push	r15
    2590:	0f 93       	push	r16
    2592:	1f 93       	push	r17
    2594:	cf 93       	push	r28
    2596:	df 93       	push	r29
    2598:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxSchedulerSuspended>
    259c:	81 11       	cpse	r24, r1
    259e:	ad c0       	rjmp	.+346    	; 0x26fa <xTaskIncrementTick+0x178>
    25a0:	c0 90 8f 18 	lds	r12, 0x188F	; 0x80188f <xTickCount>
    25a4:	d0 90 90 18 	lds	r13, 0x1890	; 0x801890 <xTickCount+0x1>
    25a8:	e0 90 91 18 	lds	r14, 0x1891	; 0x801891 <xTickCount+0x2>
    25ac:	f0 90 92 18 	lds	r15, 0x1892	; 0x801892 <xTickCount+0x3>
    25b0:	8f ef       	ldi	r24, 0xFF	; 255
    25b2:	c8 1a       	sub	r12, r24
    25b4:	d8 0a       	sbc	r13, r24
    25b6:	e8 0a       	sbc	r14, r24
    25b8:	f8 0a       	sbc	r15, r24
    25ba:	c0 92 8f 18 	sts	0x188F, r12	; 0x80188f <xTickCount>
    25be:	d0 92 90 18 	sts	0x1890, r13	; 0x801890 <xTickCount+0x1>
    25c2:	e0 92 91 18 	sts	0x1891, r14	; 0x801891 <xTickCount+0x2>
    25c6:	f0 92 92 18 	sts	0x1892, r15	; 0x801892 <xTickCount+0x3>
    25ca:	c1 14       	cp	r12, r1
    25cc:	d1 04       	cpc	r13, r1
    25ce:	e1 04       	cpc	r14, r1
    25d0:	f1 04       	cpc	r15, r1
    25d2:	b1 f4       	brne	.+44     	; 0x2600 <xTaskIncrementTick+0x7e>
    25d4:	80 91 b8 18 	lds	r24, 0x18B8	; 0x8018b8 <pxDelayedTaskList>
    25d8:	90 91 b9 18 	lds	r25, 0x18B9	; 0x8018b9 <pxDelayedTaskList+0x1>
    25dc:	20 91 b6 18 	lds	r18, 0x18B6	; 0x8018b6 <pxOverflowDelayedTaskList>
    25e0:	30 91 b7 18 	lds	r19, 0x18B7	; 0x8018b7 <pxOverflowDelayedTaskList+0x1>
    25e4:	30 93 b9 18 	sts	0x18B9, r19	; 0x8018b9 <pxDelayedTaskList+0x1>
    25e8:	20 93 b8 18 	sts	0x18B8, r18	; 0x8018b8 <pxDelayedTaskList>
    25ec:	90 93 b7 18 	sts	0x18B7, r25	; 0x8018b7 <pxOverflowDelayedTaskList+0x1>
    25f0:	80 93 b6 18 	sts	0x18B6, r24	; 0x8018b6 <pxOverflowDelayedTaskList>
    25f4:	80 91 8a 18 	lds	r24, 0x188A	; 0x80188a <xNumOfOverflows>
    25f8:	8f 5f       	subi	r24, 0xFF	; 255
    25fa:	80 93 8a 18 	sts	0x188A, r24	; 0x80188a <xNumOfOverflows>
    25fe:	b1 dd       	rcall	.-1182   	; 0x2162 <prvResetNextTaskUnblockTime>
    2600:	80 91 85 18 	lds	r24, 0x1885	; 0x801885 <xNextTaskUnblockTime>
    2604:	90 91 86 18 	lds	r25, 0x1886	; 0x801886 <xNextTaskUnblockTime+0x1>
    2608:	a0 91 87 18 	lds	r26, 0x1887	; 0x801887 <xNextTaskUnblockTime+0x2>
    260c:	b0 91 88 18 	lds	r27, 0x1888	; 0x801888 <xNextTaskUnblockTime+0x3>
    2610:	c8 16       	cp	r12, r24
    2612:	d9 06       	cpc	r13, r25
    2614:	ea 06       	cpc	r14, r26
    2616:	fb 06       	cpc	r15, r27
    2618:	10 f4       	brcc	.+4      	; 0x261e <xTaskIncrementTick+0x9c>
    261a:	b1 2c       	mov	r11, r1
    261c:	5d c0       	rjmp	.+186    	; 0x26d8 <xTaskIncrementTick+0x156>
    261e:	b1 2c       	mov	r11, r1
    2620:	0f 2e       	mov	r0, r31
    2622:	fb e0       	ldi	r31, 0x0B	; 11
    2624:	af 2e       	mov	r10, r31
    2626:	f0 2d       	mov	r31, r0
    2628:	99 24       	eor	r9, r9
    262a:	93 94       	inc	r9
    262c:	e0 91 b8 18 	lds	r30, 0x18B8	; 0x8018b8 <pxDelayedTaskList>
    2630:	f0 91 b9 18 	lds	r31, 0x18B9	; 0x8018b9 <pxDelayedTaskList+0x1>
    2634:	80 81       	ld	r24, Z
    2636:	81 11       	cpse	r24, r1
    2638:	0c c0       	rjmp	.+24     	; 0x2652 <xTaskIncrementTick+0xd0>
    263a:	8f ef       	ldi	r24, 0xFF	; 255
    263c:	9f ef       	ldi	r25, 0xFF	; 255
    263e:	dc 01       	movw	r26, r24
    2640:	80 93 85 18 	sts	0x1885, r24	; 0x801885 <xNextTaskUnblockTime>
    2644:	90 93 86 18 	sts	0x1886, r25	; 0x801886 <xNextTaskUnblockTime+0x1>
    2648:	a0 93 87 18 	sts	0x1887, r26	; 0x801887 <xNextTaskUnblockTime+0x2>
    264c:	b0 93 88 18 	sts	0x1888, r27	; 0x801888 <xNextTaskUnblockTime+0x3>
    2650:	43 c0       	rjmp	.+134    	; 0x26d8 <xTaskIncrementTick+0x156>
    2652:	e0 91 b8 18 	lds	r30, 0x18B8	; 0x8018b8 <pxDelayedTaskList>
    2656:	f0 91 b9 18 	lds	r31, 0x18B9	; 0x8018b9 <pxDelayedTaskList+0x1>
    265a:	07 80       	ldd	r0, Z+7	; 0x07
    265c:	f0 85       	ldd	r31, Z+8	; 0x08
    265e:	e0 2d       	mov	r30, r0
    2660:	c0 85       	ldd	r28, Z+8	; 0x08
    2662:	d1 85       	ldd	r29, Z+9	; 0x09
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	9b 81       	ldd	r25, Y+3	; 0x03
    2668:	ac 81       	ldd	r26, Y+4	; 0x04
    266a:	bd 81       	ldd	r27, Y+5	; 0x05
    266c:	c8 16       	cp	r12, r24
    266e:	d9 06       	cpc	r13, r25
    2670:	ea 06       	cpc	r14, r26
    2672:	fb 06       	cpc	r15, r27
    2674:	48 f4       	brcc	.+18     	; 0x2688 <xTaskIncrementTick+0x106>
    2676:	80 93 85 18 	sts	0x1885, r24	; 0x801885 <xNextTaskUnblockTime>
    267a:	90 93 86 18 	sts	0x1886, r25	; 0x801886 <xNextTaskUnblockTime+0x1>
    267e:	a0 93 87 18 	sts	0x1887, r26	; 0x801887 <xNextTaskUnblockTime+0x2>
    2682:	b0 93 88 18 	sts	0x1888, r27	; 0x801888 <xNextTaskUnblockTime+0x3>
    2686:	28 c0       	rjmp	.+80     	; 0x26d8 <xTaskIncrementTick+0x156>
    2688:	8e 01       	movw	r16, r28
    268a:	0e 5f       	subi	r16, 0xFE	; 254
    268c:	1f 4f       	sbci	r17, 0xFF	; 255
    268e:	c8 01       	movw	r24, r16
    2690:	0e 94 78 08 	call	0x10f0	; 0x10f0 <uxListRemove>
    2694:	88 8d       	ldd	r24, Y+24	; 0x18
    2696:	99 8d       	ldd	r25, Y+25	; 0x19
    2698:	89 2b       	or	r24, r25
    269a:	21 f0       	breq	.+8      	; 0x26a4 <xTaskIncrementTick+0x122>
    269c:	ce 01       	movw	r24, r28
    269e:	0e 96       	adiw	r24, 0x0e	; 14
    26a0:	0e 94 78 08 	call	0x10f0	; 0x10f0 <uxListRemove>
    26a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26a6:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    26aa:	98 17       	cp	r25, r24
    26ac:	10 f4       	brcc	.+4      	; 0x26b2 <xTaskIncrementTick+0x130>
    26ae:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    26b2:	a8 9e       	mul	r10, r24
    26b4:	c0 01       	movw	r24, r0
    26b6:	11 24       	eor	r1, r1
    26b8:	b8 01       	movw	r22, r16
    26ba:	80 53       	subi	r24, 0x30	; 48
    26bc:	97 4e       	sbci	r25, 0xE7	; 231
    26be:	0e 94 1a 08 	call	0x1034	; 0x1034 <vListInsertEnd>
    26c2:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    26c6:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    26ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    26cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    26ce:	98 17       	cp	r25, r24
    26d0:	08 f4       	brcc	.+2      	; 0x26d4 <xTaskIncrementTick+0x152>
    26d2:	ac cf       	rjmp	.-168    	; 0x262c <xTaskIncrementTick+0xaa>
    26d4:	b9 2c       	mov	r11, r9
    26d6:	aa cf       	rjmp	.-172    	; 0x262c <xTaskIncrementTick+0xaa>
    26d8:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    26dc:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    26e0:	e2 8d       	ldd	r30, Z+26	; 0x1a
    26e2:	8b e0       	ldi	r24, 0x0B	; 11
    26e4:	e8 9f       	mul	r30, r24
    26e6:	f0 01       	movw	r30, r0
    26e8:	11 24       	eor	r1, r1
    26ea:	e0 53       	subi	r30, 0x30	; 48
    26ec:	f7 4e       	sbci	r31, 0xE7	; 231
    26ee:	80 81       	ld	r24, Z
    26f0:	82 30       	cpi	r24, 0x02	; 2
    26f2:	48 f0       	brcs	.+18     	; 0x2706 <xTaskIncrementTick+0x184>
    26f4:	bb 24       	eor	r11, r11
    26f6:	b3 94       	inc	r11
    26f8:	06 c0       	rjmp	.+12     	; 0x2706 <xTaskIncrementTick+0x184>
    26fa:	80 91 8c 18 	lds	r24, 0x188C	; 0x80188c <uxPendedTicks>
    26fe:	8f 5f       	subi	r24, 0xFF	; 255
    2700:	80 93 8c 18 	sts	0x188C, r24	; 0x80188c <uxPendedTicks>
    2704:	b1 2c       	mov	r11, r1
    2706:	80 91 8b 18 	lds	r24, 0x188B	; 0x80188b <xYieldPending>
    270a:	88 23       	and	r24, r24
    270c:	11 f0       	breq	.+4      	; 0x2712 <xTaskIncrementTick+0x190>
    270e:	bb 24       	eor	r11, r11
    2710:	b3 94       	inc	r11
    2712:	8b 2d       	mov	r24, r11
    2714:	df 91       	pop	r29
    2716:	cf 91       	pop	r28
    2718:	1f 91       	pop	r17
    271a:	0f 91       	pop	r16
    271c:	ff 90       	pop	r15
    271e:	ef 90       	pop	r14
    2720:	df 90       	pop	r13
    2722:	cf 90       	pop	r12
    2724:	bf 90       	pop	r11
    2726:	af 90       	pop	r10
    2728:	9f 90       	pop	r9
    272a:	08 95       	ret

0000272c <xTaskResumeAll>:
    272c:	cf 92       	push	r12
    272e:	df 92       	push	r13
    2730:	ef 92       	push	r14
    2732:	ff 92       	push	r15
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	0f b6       	in	r0, 0x3f	; 63
    273e:	f8 94       	cli
    2740:	0f 92       	push	r0
    2742:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxSchedulerSuspended>
    2746:	81 50       	subi	r24, 0x01	; 1
    2748:	80 93 82 18 	sts	0x1882, r24	; 0x801882 <uxSchedulerSuspended>
    274c:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxSchedulerSuspended>
    2750:	81 11       	cpse	r24, r1
    2752:	5a c0       	rjmp	.+180    	; 0x2808 <xTaskResumeAll+0xdc>
    2754:	80 91 93 18 	lds	r24, 0x1893	; 0x801893 <uxCurrentNumberOfTasks>
    2758:	81 11       	cpse	r24, r1
    275a:	2c c0       	rjmp	.+88     	; 0x27b4 <xTaskResumeAll+0x88>
    275c:	58 c0       	rjmp	.+176    	; 0x280e <xTaskResumeAll+0xe2>
    275e:	d7 01       	movw	r26, r14
    2760:	17 96       	adiw	r26, 0x07	; 7
    2762:	ed 91       	ld	r30, X+
    2764:	fc 91       	ld	r31, X
    2766:	18 97       	sbiw	r26, 0x08	; 8
    2768:	c0 85       	ldd	r28, Z+8	; 0x08
    276a:	d1 85       	ldd	r29, Z+9	; 0x09
    276c:	ce 01       	movw	r24, r28
    276e:	0e 96       	adiw	r24, 0x0e	; 14
    2770:	0e 94 78 08 	call	0x10f0	; 0x10f0 <uxListRemove>
    2774:	8e 01       	movw	r16, r28
    2776:	0e 5f       	subi	r16, 0xFE	; 254
    2778:	1f 4f       	sbci	r17, 0xFF	; 255
    277a:	c8 01       	movw	r24, r16
    277c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <uxListRemove>
    2780:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2782:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    2786:	98 17       	cp	r25, r24
    2788:	10 f4       	brcc	.+4      	; 0x278e <xTaskResumeAll+0x62>
    278a:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    278e:	d8 9e       	mul	r13, r24
    2790:	c0 01       	movw	r24, r0
    2792:	11 24       	eor	r1, r1
    2794:	b8 01       	movw	r22, r16
    2796:	80 53       	subi	r24, 0x30	; 48
    2798:	97 4e       	sbci	r25, 0xE7	; 231
    279a:	0e 94 1a 08 	call	0x1034	; 0x1034 <vListInsertEnd>
    279e:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    27a2:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    27a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    27aa:	98 17       	cp	r25, r24
    27ac:	88 f0       	brcs	.+34     	; 0x27d0 <xTaskResumeAll+0xa4>
    27ae:	c0 92 8b 18 	sts	0x188B, r12	; 0x80188b <xYieldPending>
    27b2:	0e c0       	rjmp	.+28     	; 0x27d0 <xTaskResumeAll+0xa4>
    27b4:	c0 e0       	ldi	r28, 0x00	; 0
    27b6:	d0 e0       	ldi	r29, 0x00	; 0
    27b8:	0f 2e       	mov	r0, r31
    27ba:	fb ea       	ldi	r31, 0xAB	; 171
    27bc:	ef 2e       	mov	r14, r31
    27be:	f8 e1       	ldi	r31, 0x18	; 24
    27c0:	ff 2e       	mov	r15, r31
    27c2:	f0 2d       	mov	r31, r0
    27c4:	0f 2e       	mov	r0, r31
    27c6:	fb e0       	ldi	r31, 0x0B	; 11
    27c8:	df 2e       	mov	r13, r31
    27ca:	f0 2d       	mov	r31, r0
    27cc:	cc 24       	eor	r12, r12
    27ce:	c3 94       	inc	r12
    27d0:	f7 01       	movw	r30, r14
    27d2:	80 81       	ld	r24, Z
    27d4:	81 11       	cpse	r24, r1
    27d6:	c3 cf       	rjmp	.-122    	; 0x275e <xTaskResumeAll+0x32>
    27d8:	cd 2b       	or	r28, r29
    27da:	09 f0       	breq	.+2      	; 0x27de <xTaskResumeAll+0xb2>
    27dc:	c2 dc       	rcall	.-1660   	; 0x2162 <prvResetNextTaskUnblockTime>
    27de:	c0 91 8c 18 	lds	r28, 0x188C	; 0x80188c <uxPendedTicks>
    27e2:	cc 23       	and	r28, r28
    27e4:	49 f0       	breq	.+18     	; 0x27f8 <xTaskResumeAll+0xcc>
    27e6:	d1 e0       	ldi	r29, 0x01	; 1
    27e8:	cc de       	rcall	.-616    	; 0x2582 <xTaskIncrementTick>
    27ea:	81 11       	cpse	r24, r1
    27ec:	d0 93 8b 18 	sts	0x188B, r29	; 0x80188b <xYieldPending>
    27f0:	c1 50       	subi	r28, 0x01	; 1
    27f2:	d1 f7       	brne	.-12     	; 0x27e8 <xTaskResumeAll+0xbc>
    27f4:	10 92 8c 18 	sts	0x188C, r1	; 0x80188c <uxPendedTicks>
    27f8:	80 91 8b 18 	lds	r24, 0x188B	; 0x80188b <xYieldPending>
    27fc:	88 23       	and	r24, r24
    27fe:	31 f0       	breq	.+12     	; 0x280c <xTaskResumeAll+0xe0>
    2800:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	03 c0       	rjmp	.+6      	; 0x280e <xTaskResumeAll+0xe2>
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	01 c0       	rjmp	.+2      	; 0x280e <xTaskResumeAll+0xe2>
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	0f 90       	pop	r0
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	1f 91       	pop	r17
    2818:	0f 91       	pop	r16
    281a:	ff 90       	pop	r15
    281c:	ef 90       	pop	r14
    281e:	df 90       	pop	r13
    2820:	cf 90       	pop	r12
    2822:	08 95       	ret

00002824 <vTaskDelayUntil>:
    2824:	cf 92       	push	r12
    2826:	df 92       	push	r13
    2828:	ef 92       	push	r14
    282a:	ff 92       	push	r15
    282c:	0f 93       	push	r16
    282e:	1f 93       	push	r17
    2830:	cf 93       	push	r28
    2832:	df 93       	push	r29
    2834:	ec 01       	movw	r28, r24
    2836:	6a 01       	movw	r12, r20
    2838:	7b 01       	movw	r14, r22
    283a:	8f de       	rcall	.-738    	; 0x255a <vTaskSuspendAll>
    283c:	00 91 8f 18 	lds	r16, 0x188F	; 0x80188f <xTickCount>
    2840:	10 91 90 18 	lds	r17, 0x1890	; 0x801890 <xTickCount+0x1>
    2844:	20 91 91 18 	lds	r18, 0x1891	; 0x801891 <xTickCount+0x2>
    2848:	30 91 92 18 	lds	r19, 0x1892	; 0x801892 <xTickCount+0x3>
    284c:	88 81       	ld	r24, Y
    284e:	99 81       	ldd	r25, Y+1	; 0x01
    2850:	aa 81       	ldd	r26, Y+2	; 0x02
    2852:	bb 81       	ldd	r27, Y+3	; 0x03
    2854:	ac 01       	movw	r20, r24
    2856:	bd 01       	movw	r22, r26
    2858:	4c 0d       	add	r20, r12
    285a:	5d 1d       	adc	r21, r13
    285c:	6e 1d       	adc	r22, r14
    285e:	7f 1d       	adc	r23, r15
    2860:	08 17       	cp	r16, r24
    2862:	19 07       	cpc	r17, r25
    2864:	2a 07       	cpc	r18, r26
    2866:	3b 07       	cpc	r19, r27
    2868:	78 f4       	brcc	.+30     	; 0x2888 <vTaskDelayUntil+0x64>
    286a:	48 17       	cp	r20, r24
    286c:	59 07       	cpc	r21, r25
    286e:	6a 07       	cpc	r22, r26
    2870:	7b 07       	cpc	r23, r27
    2872:	40 f5       	brcc	.+80     	; 0x28c4 <vTaskDelayUntil+0xa0>
    2874:	48 83       	st	Y, r20
    2876:	59 83       	std	Y+1, r21	; 0x01
    2878:	6a 83       	std	Y+2, r22	; 0x02
    287a:	7b 83       	std	Y+3, r23	; 0x03
    287c:	04 17       	cp	r16, r20
    287e:	15 07       	cpc	r17, r21
    2880:	26 07       	cpc	r18, r22
    2882:	37 07       	cpc	r19, r23
    2884:	a0 f4       	brcc	.+40     	; 0x28ae <vTaskDelayUntil+0x8a>
    2886:	0b c0       	rjmp	.+22     	; 0x289e <vTaskDelayUntil+0x7a>
    2888:	48 17       	cp	r20, r24
    288a:	59 07       	cpc	r21, r25
    288c:	6a 07       	cpc	r22, r26
    288e:	7b 07       	cpc	r23, r27
    2890:	a0 f0       	brcs	.+40     	; 0x28ba <vTaskDelayUntil+0x96>
    2892:	04 17       	cp	r16, r20
    2894:	15 07       	cpc	r17, r21
    2896:	26 07       	cpc	r18, r22
    2898:	37 07       	cpc	r19, r23
    289a:	78 f0       	brcs	.+30     	; 0x28ba <vTaskDelayUntil+0x96>
    289c:	13 c0       	rjmp	.+38     	; 0x28c4 <vTaskDelayUntil+0xa0>
    289e:	cb 01       	movw	r24, r22
    28a0:	ba 01       	movw	r22, r20
    28a2:	60 1b       	sub	r22, r16
    28a4:	71 0b       	sbc	r23, r17
    28a6:	82 0b       	sbc	r24, r18
    28a8:	93 0b       	sbc	r25, r19
    28aa:	40 e0       	ldi	r20, 0x00	; 0
    28ac:	84 dc       	rcall	.-1784   	; 0x21b6 <prvAddCurrentTaskToDelayedList>
    28ae:	3e df       	rcall	.-388    	; 0x272c <xTaskResumeAll>
    28b0:	81 11       	cpse	r24, r1
    28b2:	0d c0       	rjmp	.+26     	; 0x28ce <vTaskDelayUntil+0xaa>
    28b4:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
    28b8:	0a c0       	rjmp	.+20     	; 0x28ce <vTaskDelayUntil+0xaa>
    28ba:	48 83       	st	Y, r20
    28bc:	59 83       	std	Y+1, r21	; 0x01
    28be:	6a 83       	std	Y+2, r22	; 0x02
    28c0:	7b 83       	std	Y+3, r23	; 0x03
    28c2:	ed cf       	rjmp	.-38     	; 0x289e <vTaskDelayUntil+0x7a>
    28c4:	48 83       	st	Y, r20
    28c6:	59 83       	std	Y+1, r21	; 0x01
    28c8:	6a 83       	std	Y+2, r22	; 0x02
    28ca:	7b 83       	std	Y+3, r23	; 0x03
    28cc:	f0 cf       	rjmp	.-32     	; 0x28ae <vTaskDelayUntil+0x8a>
    28ce:	df 91       	pop	r29
    28d0:	cf 91       	pop	r28
    28d2:	1f 91       	pop	r17
    28d4:	0f 91       	pop	r16
    28d6:	ff 90       	pop	r15
    28d8:	ef 90       	pop	r14
    28da:	df 90       	pop	r13
    28dc:	cf 90       	pop	r12
    28de:	08 95       	ret

000028e0 <vTaskDelay>:
    28e0:	cf 92       	push	r12
    28e2:	df 92       	push	r13
    28e4:	ef 92       	push	r14
    28e6:	ff 92       	push	r15
    28e8:	6b 01       	movw	r12, r22
    28ea:	7c 01       	movw	r14, r24
    28ec:	67 2b       	or	r22, r23
    28ee:	68 2b       	or	r22, r24
    28f0:	69 2b       	or	r22, r25
    28f2:	41 f0       	breq	.+16     	; 0x2904 <vTaskDelay+0x24>
    28f4:	32 de       	rcall	.-924    	; 0x255a <vTaskSuspendAll>
    28f6:	40 e0       	ldi	r20, 0x00	; 0
    28f8:	c7 01       	movw	r24, r14
    28fa:	b6 01       	movw	r22, r12
    28fc:	5c dc       	rcall	.-1864   	; 0x21b6 <prvAddCurrentTaskToDelayedList>
    28fe:	16 df       	rcall	.-468    	; 0x272c <xTaskResumeAll>
    2900:	81 11       	cpse	r24, r1
    2902:	02 c0       	rjmp	.+4      	; 0x2908 <vTaskDelay+0x28>
    2904:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
    2908:	ff 90       	pop	r15
    290a:	ef 90       	pop	r14
    290c:	df 90       	pop	r13
    290e:	cf 90       	pop	r12
    2910:	08 95       	ret

00002912 <vTaskSwitchContext>:
    2912:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxSchedulerSuspended>
    2916:	88 23       	and	r24, r24
    2918:	21 f0       	breq	.+8      	; 0x2922 <vTaskSwitchContext+0x10>
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <xYieldPending>
    2920:	08 95       	ret
    2922:	10 92 8b 18 	sts	0x188B, r1	; 0x80188b <xYieldPending>
    2926:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    292a:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    292e:	81 a5       	ldd	r24, Z+41	; 0x29
    2930:	0e 94 5c 05 	call	0xab8	; 0xab8 <task_switch_out>
    2934:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2938:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    293c:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2940:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2944:	2d 91       	ld	r18, X+
    2946:	3c 91       	ld	r19, X
    2948:	83 8d       	ldd	r24, Z+27	; 0x1b
    294a:	94 8d       	ldd	r25, Z+28	; 0x1c
    294c:	82 17       	cp	r24, r18
    294e:	93 07       	cpc	r25, r19
    2950:	58 f0       	brcs	.+22     	; 0x2968 <vTaskSwitchContext+0x56>
    2952:	60 91 fc 18 	lds	r22, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2956:	70 91 fd 18 	lds	r23, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    295a:	80 91 fc 18 	lds	r24, 0x18FC	; 0x8018fc <pxCurrentTCB>
    295e:	90 91 fd 18 	lds	r25, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2962:	63 5e       	subi	r22, 0xE3	; 227
    2964:	7f 4f       	sbci	r23, 0xFF	; 255
    2966:	20 d6       	rcall	.+3136   	; 0x35a8 <vApplicationStackOverflowHook>
    2968:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <uxTopReadyPriority>
    296c:	28 2f       	mov	r18, r24
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	9b e0       	ldi	r25, 0x0B	; 11
    2972:	89 9f       	mul	r24, r25
    2974:	f0 01       	movw	r30, r0
    2976:	11 24       	eor	r1, r1
    2978:	e0 53       	subi	r30, 0x30	; 48
    297a:	f7 4e       	sbci	r31, 0xE7	; 231
    297c:	90 81       	ld	r25, Z
    297e:	91 11       	cpse	r25, r1
    2980:	0e c0       	rjmp	.+28     	; 0x299e <vTaskSwitchContext+0x8c>
    2982:	4b e0       	ldi	r20, 0x0B	; 11
    2984:	81 50       	subi	r24, 0x01	; 1
    2986:	28 2f       	mov	r18, r24
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	42 9f       	mul	r20, r18
    298c:	f0 01       	movw	r30, r0
    298e:	43 9f       	mul	r20, r19
    2990:	f0 0d       	add	r31, r0
    2992:	11 24       	eor	r1, r1
    2994:	e0 53       	subi	r30, 0x30	; 48
    2996:	f7 4e       	sbci	r31, 0xE7	; 231
    2998:	90 81       	ld	r25, Z
    299a:	99 23       	and	r25, r25
    299c:	99 f3       	breq	.-26     	; 0x2984 <vTaskSwitchContext+0x72>
    299e:	9b e0       	ldi	r25, 0x0B	; 11
    29a0:	92 9f       	mul	r25, r18
    29a2:	a0 01       	movw	r20, r0
    29a4:	93 9f       	mul	r25, r19
    29a6:	50 0d       	add	r21, r0
    29a8:	11 24       	eor	r1, r1
    29aa:	da 01       	movw	r26, r20
    29ac:	a0 53       	subi	r26, 0x30	; 48
    29ae:	b7 4e       	sbci	r27, 0xE7	; 231
    29b0:	11 96       	adiw	r26, 0x01	; 1
    29b2:	ed 91       	ld	r30, X+
    29b4:	fc 91       	ld	r31, X
    29b6:	12 97       	sbiw	r26, 0x02	; 2
    29b8:	04 80       	ldd	r0, Z+4	; 0x04
    29ba:	f5 81       	ldd	r31, Z+5	; 0x05
    29bc:	e0 2d       	mov	r30, r0
    29be:	12 96       	adiw	r26, 0x02	; 2
    29c0:	fc 93       	st	X, r31
    29c2:	ee 93       	st	-X, r30
    29c4:	11 97       	sbiw	r26, 0x01	; 1
    29c6:	4d 52       	subi	r20, 0x2D	; 45
    29c8:	57 4e       	sbci	r21, 0xE7	; 231
    29ca:	e4 17       	cp	r30, r20
    29cc:	f5 07       	cpc	r31, r21
    29ce:	29 f4       	brne	.+10     	; 0x29da <vTaskSwitchContext+0xc8>
    29d0:	44 81       	ldd	r20, Z+4	; 0x04
    29d2:	55 81       	ldd	r21, Z+5	; 0x05
    29d4:	fd 01       	movw	r30, r26
    29d6:	52 83       	std	Z+2, r21	; 0x02
    29d8:	41 83       	std	Z+1, r20	; 0x01
    29da:	9b e0       	ldi	r25, 0x0B	; 11
    29dc:	92 9f       	mul	r25, r18
    29de:	f0 01       	movw	r30, r0
    29e0:	93 9f       	mul	r25, r19
    29e2:	f0 0d       	add	r31, r0
    29e4:	11 24       	eor	r1, r1
    29e6:	e0 53       	subi	r30, 0x30	; 48
    29e8:	f7 4e       	sbci	r31, 0xE7	; 231
    29ea:	01 80       	ldd	r0, Z+1	; 0x01
    29ec:	f2 81       	ldd	r31, Z+2	; 0x02
    29ee:	e0 2d       	mov	r30, r0
    29f0:	20 85       	ldd	r18, Z+8	; 0x08
    29f2:	31 85       	ldd	r19, Z+9	; 0x09
    29f4:	30 93 fd 18 	sts	0x18FD, r19	; 0x8018fd <pxCurrentTCB+0x1>
    29f8:	20 93 fc 18 	sts	0x18FC, r18	; 0x8018fc <pxCurrentTCB>
    29fc:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    2a00:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2a04:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2a08:	81 a5       	ldd	r24, Z+41	; 0x29
    2a0a:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <task_switch_in>
    2a0e:	08 95       	ret

00002a10 <vTaskPlaceOnEventList>:
    2a10:	cf 92       	push	r12
    2a12:	df 92       	push	r13
    2a14:	ef 92       	push	r14
    2a16:	ff 92       	push	r15
    2a18:	6a 01       	movw	r12, r20
    2a1a:	7b 01       	movw	r14, r22
    2a1c:	60 91 fc 18 	lds	r22, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2a20:	70 91 fd 18 	lds	r23, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2a24:	62 5f       	subi	r22, 0xF2	; 242
    2a26:	7f 4f       	sbci	r23, 0xFF	; 255
    2a28:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsert>
    2a2c:	41 e0       	ldi	r20, 0x01	; 1
    2a2e:	c7 01       	movw	r24, r14
    2a30:	b6 01       	movw	r22, r12
    2a32:	c1 db       	rcall	.-2174   	; 0x21b6 <prvAddCurrentTaskToDelayedList>
    2a34:	ff 90       	pop	r15
    2a36:	ef 90       	pop	r14
    2a38:	df 90       	pop	r13
    2a3a:	cf 90       	pop	r12
    2a3c:	08 95       	ret

00002a3e <vTaskPlaceOnUnorderedEventList>:
    2a3e:	cf 92       	push	r12
    2a40:	df 92       	push	r13
    2a42:	ef 92       	push	r14
    2a44:	ff 92       	push	r15
    2a46:	0f 93       	push	r16
    2a48:	1f 93       	push	r17
    2a4a:	68 01       	movw	r12, r16
    2a4c:	79 01       	movw	r14, r18
    2a4e:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2a52:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2a56:	70 68       	ori	r23, 0x80	; 128
    2a58:	46 87       	std	Z+14, r20	; 0x0e
    2a5a:	57 87       	std	Z+15, r21	; 0x0f
    2a5c:	60 8b       	std	Z+16, r22	; 0x10
    2a5e:	71 8b       	std	Z+17, r23	; 0x11
    2a60:	60 91 fc 18 	lds	r22, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2a64:	70 91 fd 18 	lds	r23, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2a68:	62 5f       	subi	r22, 0xF2	; 242
    2a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6c:	0e 94 1a 08 	call	0x1034	; 0x1034 <vListInsertEnd>
    2a70:	41 e0       	ldi	r20, 0x01	; 1
    2a72:	c7 01       	movw	r24, r14
    2a74:	b6 01       	movw	r22, r12
    2a76:	9f db       	rcall	.-2242   	; 0x21b6 <prvAddCurrentTaskToDelayedList>
    2a78:	1f 91       	pop	r17
    2a7a:	0f 91       	pop	r16
    2a7c:	ff 90       	pop	r15
    2a7e:	ef 90       	pop	r14
    2a80:	df 90       	pop	r13
    2a82:	cf 90       	pop	r12
    2a84:	08 95       	ret

00002a86 <vTaskPlaceOnEventListRestricted>:
    2a86:	cf 92       	push	r12
    2a88:	df 92       	push	r13
    2a8a:	ef 92       	push	r14
    2a8c:	ff 92       	push	r15
    2a8e:	cf 93       	push	r28
    2a90:	6a 01       	movw	r12, r20
    2a92:	7b 01       	movw	r14, r22
    2a94:	c2 2f       	mov	r28, r18
    2a96:	60 91 fc 18 	lds	r22, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2a9a:	70 91 fd 18 	lds	r23, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2a9e:	62 5f       	subi	r22, 0xF2	; 242
    2aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa2:	0e 94 1a 08 	call	0x1034	; 0x1034 <vListInsertEnd>
    2aa6:	cc 23       	and	r28, r28
    2aa8:	21 f0       	breq	.+8      	; 0x2ab2 <vTaskPlaceOnEventListRestricted+0x2c>
    2aaa:	cc 24       	eor	r12, r12
    2aac:	ca 94       	dec	r12
    2aae:	dc 2c       	mov	r13, r12
    2ab0:	76 01       	movw	r14, r12
    2ab2:	4c 2f       	mov	r20, r28
    2ab4:	c7 01       	movw	r24, r14
    2ab6:	b6 01       	movw	r22, r12
    2ab8:	7e db       	rcall	.-2308   	; 0x21b6 <prvAddCurrentTaskToDelayedList>
    2aba:	cf 91       	pop	r28
    2abc:	ff 90       	pop	r15
    2abe:	ef 90       	pop	r14
    2ac0:	df 90       	pop	r13
    2ac2:	cf 90       	pop	r12
    2ac4:	08 95       	ret

00002ac6 <xTaskRemoveFromEventList>:
    2ac6:	0f 93       	push	r16
    2ac8:	1f 93       	push	r17
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29
    2ace:	dc 01       	movw	r26, r24
    2ad0:	17 96       	adiw	r26, 0x07	; 7
    2ad2:	ed 91       	ld	r30, X+
    2ad4:	fc 91       	ld	r31, X
    2ad6:	18 97       	sbiw	r26, 0x08	; 8
    2ad8:	c0 85       	ldd	r28, Z+8	; 0x08
    2ada:	d1 85       	ldd	r29, Z+9	; 0x09
    2adc:	8e 01       	movw	r16, r28
    2ade:	02 5f       	subi	r16, 0xF2	; 242
    2ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae2:	c8 01       	movw	r24, r16
    2ae4:	0e 94 78 08 	call	0x10f0	; 0x10f0 <uxListRemove>
    2ae8:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxSchedulerSuspended>
    2aec:	81 11       	cpse	r24, r1
    2aee:	16 c0       	rjmp	.+44     	; 0x2b1c <xTaskRemoveFromEventList+0x56>
    2af0:	0c 50       	subi	r16, 0x0C	; 12
    2af2:	11 09       	sbc	r17, r1
    2af4:	c8 01       	movw	r24, r16
    2af6:	0e 94 78 08 	call	0x10f0	; 0x10f0 <uxListRemove>
    2afa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2afc:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    2b00:	98 17       	cp	r25, r24
    2b02:	10 f4       	brcc	.+4      	; 0x2b08 <xTaskRemoveFromEventList+0x42>
    2b04:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    2b08:	bb e0       	ldi	r27, 0x0B	; 11
    2b0a:	8b 9f       	mul	r24, r27
    2b0c:	c0 01       	movw	r24, r0
    2b0e:	11 24       	eor	r1, r1
    2b10:	b8 01       	movw	r22, r16
    2b12:	80 53       	subi	r24, 0x30	; 48
    2b14:	97 4e       	sbci	r25, 0xE7	; 231
    2b16:	0e 94 1a 08 	call	0x1034	; 0x1034 <vListInsertEnd>
    2b1a:	05 c0       	rjmp	.+10     	; 0x2b26 <xTaskRemoveFromEventList+0x60>
    2b1c:	b8 01       	movw	r22, r16
    2b1e:	8b ea       	ldi	r24, 0xAB	; 171
    2b20:	98 e1       	ldi	r25, 0x18	; 24
    2b22:	0e 94 1a 08 	call	0x1034	; 0x1034 <vListInsertEnd>
    2b26:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2b2a:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2b2e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b30:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b32:	89 17       	cp	r24, r25
    2b34:	20 f4       	brcc	.+8      	; 0x2b3e <xTaskRemoveFromEventList+0x78>
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <xYieldPending>
    2b3c:	01 c0       	rjmp	.+2      	; 0x2b40 <xTaskRemoveFromEventList+0x7a>
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	df 91       	pop	r29
    2b42:	cf 91       	pop	r28
    2b44:	1f 91       	pop	r17
    2b46:	0f 91       	pop	r16
    2b48:	08 95       	ret

00002b4a <vTaskRemoveFromUnorderedEventList>:
    2b4a:	0f 93       	push	r16
    2b4c:	1f 93       	push	r17
    2b4e:	cf 93       	push	r28
    2b50:	df 93       	push	r29
    2b52:	70 68       	ori	r23, 0x80	; 128
    2b54:	fc 01       	movw	r30, r24
    2b56:	40 83       	st	Z, r20
    2b58:	51 83       	std	Z+1, r21	; 0x01
    2b5a:	62 83       	std	Z+2, r22	; 0x02
    2b5c:	73 83       	std	Z+3, r23	; 0x03
    2b5e:	c0 85       	ldd	r28, Z+8	; 0x08
    2b60:	d1 85       	ldd	r29, Z+9	; 0x09
    2b62:	0e 94 78 08 	call	0x10f0	; 0x10f0 <uxListRemove>
    2b66:	8e 01       	movw	r16, r28
    2b68:	0e 5f       	subi	r16, 0xFE	; 254
    2b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6c:	c8 01       	movw	r24, r16
    2b6e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <uxListRemove>
    2b72:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b74:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    2b78:	98 17       	cp	r25, r24
    2b7a:	10 f4       	brcc	.+4      	; 0x2b80 <vTaskRemoveFromUnorderedEventList+0x36>
    2b7c:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    2b80:	fb e0       	ldi	r31, 0x0B	; 11
    2b82:	8f 9f       	mul	r24, r31
    2b84:	c0 01       	movw	r24, r0
    2b86:	11 24       	eor	r1, r1
    2b88:	b8 01       	movw	r22, r16
    2b8a:	80 53       	subi	r24, 0x30	; 48
    2b8c:	97 4e       	sbci	r25, 0xE7	; 231
    2b8e:	0e 94 1a 08 	call	0x1034	; 0x1034 <vListInsertEnd>
    2b92:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2b96:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2b9a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b9c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b9e:	89 17       	cp	r24, r25
    2ba0:	18 f4       	brcc	.+6      	; 0x2ba8 <vTaskRemoveFromUnorderedEventList+0x5e>
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <xYieldPending>
    2ba8:	df 91       	pop	r29
    2baa:	cf 91       	pop	r28
    2bac:	1f 91       	pop	r17
    2bae:	0f 91       	pop	r16
    2bb0:	08 95       	ret

00002bb2 <vTaskSetTimeOutState>:
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	0f 92       	push	r0
    2bb8:	20 91 8a 18 	lds	r18, 0x188A	; 0x80188a <xNumOfOverflows>
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	20 83       	st	Z, r18
    2bc0:	40 91 8f 18 	lds	r20, 0x188F	; 0x80188f <xTickCount>
    2bc4:	50 91 90 18 	lds	r21, 0x1890	; 0x801890 <xTickCount+0x1>
    2bc8:	60 91 91 18 	lds	r22, 0x1891	; 0x801891 <xTickCount+0x2>
    2bcc:	70 91 92 18 	lds	r23, 0x1892	; 0x801892 <xTickCount+0x3>
    2bd0:	41 83       	std	Z+1, r20	; 0x01
    2bd2:	52 83       	std	Z+2, r21	; 0x02
    2bd4:	63 83       	std	Z+3, r22	; 0x03
    2bd6:	74 83       	std	Z+4, r23	; 0x04
    2bd8:	0f 90       	pop	r0
    2bda:	0f be       	out	0x3f, r0	; 63
    2bdc:	08 95       	ret

00002bde <vTaskInternalSetTimeOutState>:
    2bde:	20 91 8a 18 	lds	r18, 0x188A	; 0x80188a <xNumOfOverflows>
    2be2:	fc 01       	movw	r30, r24
    2be4:	20 83       	st	Z, r18
    2be6:	40 91 8f 18 	lds	r20, 0x188F	; 0x80188f <xTickCount>
    2bea:	50 91 90 18 	lds	r21, 0x1890	; 0x801890 <xTickCount+0x1>
    2bee:	60 91 91 18 	lds	r22, 0x1891	; 0x801891 <xTickCount+0x2>
    2bf2:	70 91 92 18 	lds	r23, 0x1892	; 0x801892 <xTickCount+0x3>
    2bf6:	41 83       	std	Z+1, r20	; 0x01
    2bf8:	52 83       	std	Z+2, r21	; 0x02
    2bfa:	63 83       	std	Z+3, r22	; 0x03
    2bfc:	74 83       	std	Z+4, r23	; 0x04
    2bfe:	08 95       	ret

00002c00 <xTaskCheckForTimeOut>:
    2c00:	cf 92       	push	r12
    2c02:	df 92       	push	r13
    2c04:	ef 92       	push	r14
    2c06:	ff 92       	push	r15
    2c08:	0f 93       	push	r16
    2c0a:	1f 93       	push	r17
    2c0c:	cf 93       	push	r28
    2c0e:	df 93       	push	r29
    2c10:	fb 01       	movw	r30, r22
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	f8 94       	cli
    2c16:	0f 92       	push	r0
    2c18:	40 91 8f 18 	lds	r20, 0x188F	; 0x80188f <xTickCount>
    2c1c:	50 91 90 18 	lds	r21, 0x1890	; 0x801890 <xTickCount+0x1>
    2c20:	60 91 91 18 	lds	r22, 0x1891	; 0x801891 <xTickCount+0x2>
    2c24:	70 91 92 18 	lds	r23, 0x1892	; 0x801892 <xTickCount+0x3>
    2c28:	00 81       	ld	r16, Z
    2c2a:	11 81       	ldd	r17, Z+1	; 0x01
    2c2c:	22 81       	ldd	r18, Z+2	; 0x02
    2c2e:	33 81       	ldd	r19, Z+3	; 0x03
    2c30:	0f 3f       	cpi	r16, 0xFF	; 255
    2c32:	af ef       	ldi	r26, 0xFF	; 255
    2c34:	1a 07       	cpc	r17, r26
    2c36:	2a 07       	cpc	r18, r26
    2c38:	3a 07       	cpc	r19, r26
    2c3a:	49 f1       	breq	.+82     	; 0x2c8e <xTaskCheckForTimeOut+0x8e>
    2c3c:	ec 01       	movw	r28, r24
    2c3e:	c9 80       	ldd	r12, Y+1	; 0x01
    2c40:	da 80       	ldd	r13, Y+2	; 0x02
    2c42:	eb 80       	ldd	r14, Y+3	; 0x03
    2c44:	fc 80       	ldd	r15, Y+4	; 0x04
    2c46:	a0 91 8a 18 	lds	r26, 0x188A	; 0x80188a <xNumOfOverflows>
    2c4a:	b8 81       	ld	r27, Y
    2c4c:	ba 17       	cp	r27, r26
    2c4e:	29 f0       	breq	.+10     	; 0x2c5a <xTaskCheckForTimeOut+0x5a>
    2c50:	4c 15       	cp	r20, r12
    2c52:	5d 05       	cpc	r21, r13
    2c54:	6e 05       	cpc	r22, r14
    2c56:	7f 05       	cpc	r23, r15
    2c58:	e0 f4       	brcc	.+56     	; 0x2c92 <xTaskCheckForTimeOut+0x92>
    2c5a:	4c 19       	sub	r20, r12
    2c5c:	5d 09       	sbc	r21, r13
    2c5e:	6e 09       	sbc	r22, r14
    2c60:	7f 09       	sbc	r23, r15
    2c62:	40 17       	cp	r20, r16
    2c64:	51 07       	cpc	r21, r17
    2c66:	62 07       	cpc	r22, r18
    2c68:	73 07       	cpc	r23, r19
    2c6a:	58 f4       	brcc	.+22     	; 0x2c82 <xTaskCheckForTimeOut+0x82>
    2c6c:	04 1b       	sub	r16, r20
    2c6e:	15 0b       	sbc	r17, r21
    2c70:	26 0b       	sbc	r18, r22
    2c72:	37 0b       	sbc	r19, r23
    2c74:	00 83       	st	Z, r16
    2c76:	11 83       	std	Z+1, r17	; 0x01
    2c78:	22 83       	std	Z+2, r18	; 0x02
    2c7a:	33 83       	std	Z+3, r19	; 0x03
    2c7c:	b0 df       	rcall	.-160    	; 0x2bde <vTaskInternalSetTimeOutState>
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	09 c0       	rjmp	.+18     	; 0x2c94 <xTaskCheckForTimeOut+0x94>
    2c82:	10 82       	st	Z, r1
    2c84:	11 82       	std	Z+1, r1	; 0x01
    2c86:	12 82       	std	Z+2, r1	; 0x02
    2c88:	13 82       	std	Z+3, r1	; 0x03
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	03 c0       	rjmp	.+6      	; 0x2c94 <xTaskCheckForTimeOut+0x94>
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	01 c0       	rjmp	.+2      	; 0x2c94 <xTaskCheckForTimeOut+0x94>
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	0f 90       	pop	r0
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	df 91       	pop	r29
    2c9a:	cf 91       	pop	r28
    2c9c:	1f 91       	pop	r17
    2c9e:	0f 91       	pop	r16
    2ca0:	ff 90       	pop	r15
    2ca2:	ef 90       	pop	r14
    2ca4:	df 90       	pop	r13
    2ca6:	cf 90       	pop	r12
    2ca8:	08 95       	ret

00002caa <vTaskMissedYield>:
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <xYieldPending>
    2cb0:	08 95       	ret

00002cb2 <xTaskGetCurrentTaskHandle>:
    2cb2:	80 91 fc 18 	lds	r24, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2cb6:	90 91 fd 18 	lds	r25, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2cba:	08 95       	ret

00002cbc <xTaskGetSchedulerState>:
    2cbc:	80 91 8d 18 	lds	r24, 0x188D	; 0x80188d <xSchedulerRunning>
    2cc0:	88 23       	and	r24, r24
    2cc2:	31 f0       	breq	.+12     	; 0x2cd0 <xTaskGetSchedulerState+0x14>
    2cc4:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxSchedulerSuspended>
    2cc8:	88 23       	and	r24, r24
    2cca:	21 f0       	breq	.+8      	; 0x2cd4 <xTaskGetSchedulerState+0x18>
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	08 95       	ret
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	08 95       	ret
    2cd4:	82 e0       	ldi	r24, 0x02	; 2
    2cd6:	08 95       	ret

00002cd8 <xTaskPriorityInherit>:
    2cd8:	0f 93       	push	r16
    2cda:	1f 93       	push	r17
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	89 2b       	or	r24, r25
    2ce4:	09 f4       	brne	.+2      	; 0x2ce8 <xTaskPriorityInherit+0x10>
    2ce6:	60 c0       	rjmp	.+192    	; 0x2da8 <xTaskPriorityInherit+0xd0>
    2ce8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cea:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2cee:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2cf2:	5a 96       	adiw	r26, 0x1a	; 26
    2cf4:	9c 91       	ld	r25, X
    2cf6:	89 17       	cp	r24, r25
    2cf8:	08 f0       	brcs	.+2      	; 0x2cfc <xTaskPriorityInherit+0x24>
    2cfa:	4a c0       	rjmp	.+148    	; 0x2d90 <xTaskPriorityInherit+0xb8>
    2cfc:	46 85       	ldd	r20, Z+14	; 0x0e
    2cfe:	57 85       	ldd	r21, Z+15	; 0x0f
    2d00:	60 89       	ldd	r22, Z+16	; 0x10
    2d02:	71 89       	ldd	r23, Z+17	; 0x11
    2d04:	77 23       	and	r23, r23
    2d06:	94 f0       	brlt	.+36     	; 0x2d2c <xTaskPriorityInherit+0x54>
    2d08:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2d0c:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2d10:	5a 96       	adiw	r26, 0x1a	; 26
    2d12:	9c 91       	ld	r25, X
    2d14:	44 e0       	ldi	r20, 0x04	; 4
    2d16:	50 e0       	ldi	r21, 0x00	; 0
    2d18:	60 e0       	ldi	r22, 0x00	; 0
    2d1a:	70 e0       	ldi	r23, 0x00	; 0
    2d1c:	49 1b       	sub	r20, r25
    2d1e:	51 09       	sbc	r21, r1
    2d20:	61 09       	sbc	r22, r1
    2d22:	71 09       	sbc	r23, r1
    2d24:	46 87       	std	Z+14, r20	; 0x0e
    2d26:	57 87       	std	Z+15, r21	; 0x0f
    2d28:	60 8b       	std	Z+16, r22	; 0x10
    2d2a:	71 8b       	std	Z+17, r23	; 0x11
    2d2c:	2b e0       	ldi	r18, 0x0B	; 11
    2d2e:	82 9f       	mul	r24, r18
    2d30:	c0 01       	movw	r24, r0
    2d32:	11 24       	eor	r1, r1
    2d34:	80 53       	subi	r24, 0x30	; 48
    2d36:	97 4e       	sbci	r25, 0xE7	; 231
    2d38:	24 85       	ldd	r18, Z+12	; 0x0c
    2d3a:	35 85       	ldd	r19, Z+13	; 0x0d
    2d3c:	28 17       	cp	r18, r24
    2d3e:	39 07       	cpc	r19, r25
    2d40:	f1 f4       	brne	.+60     	; 0x2d7e <xTaskPriorityInherit+0xa6>
    2d42:	8f 01       	movw	r16, r30
    2d44:	ef 01       	movw	r28, r30
    2d46:	22 96       	adiw	r28, 0x02	; 2
    2d48:	ce 01       	movw	r24, r28
    2d4a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <uxListRemove>
    2d4e:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2d52:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2d56:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d58:	f8 01       	movw	r30, r16
    2d5a:	82 8f       	std	Z+26, r24	; 0x1a
    2d5c:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    2d60:	98 17       	cp	r25, r24
    2d62:	10 f4       	brcc	.+4      	; 0x2d68 <xTaskPriorityInherit+0x90>
    2d64:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    2d68:	fb e0       	ldi	r31, 0x0B	; 11
    2d6a:	8f 9f       	mul	r24, r31
    2d6c:	c0 01       	movw	r24, r0
    2d6e:	11 24       	eor	r1, r1
    2d70:	be 01       	movw	r22, r28
    2d72:	80 53       	subi	r24, 0x30	; 48
    2d74:	97 4e       	sbci	r25, 0xE7	; 231
    2d76:	0e 94 1a 08 	call	0x1034	; 0x1034 <vListInsertEnd>
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	16 c0       	rjmp	.+44     	; 0x2daa <xTaskPriorityInherit+0xd2>
    2d7e:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2d82:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2d86:	5a 96       	adiw	r26, 0x1a	; 26
    2d88:	8c 91       	ld	r24, X
    2d8a:	82 8f       	std	Z+26, r24	; 0x1a
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	0d c0       	rjmp	.+26     	; 0x2daa <xTaskPriorityInherit+0xd2>
    2d90:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2d94:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	27 a1       	ldd	r18, Z+39	; 0x27
    2d9c:	5a 96       	adiw	r26, 0x1a	; 26
    2d9e:	9c 91       	ld	r25, X
    2da0:	29 17       	cp	r18, r25
    2da2:	18 f0       	brcs	.+6      	; 0x2daa <xTaskPriorityInherit+0xd2>
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	01 c0       	rjmp	.+2      	; 0x2daa <xTaskPriorityInherit+0xd2>
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	df 91       	pop	r29
    2dac:	cf 91       	pop	r28
    2dae:	1f 91       	pop	r17
    2db0:	0f 91       	pop	r16
    2db2:	08 95       	ret

00002db4 <xTaskPriorityDisinherit>:
    2db4:	0f 93       	push	r16
    2db6:	1f 93       	push	r17
    2db8:	cf 93       	push	r28
    2dba:	df 93       	push	r29
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	89 2b       	or	r24, r25
    2dc0:	79 f1       	breq	.+94     	; 0x2e20 <xTaskPriorityDisinherit+0x6c>
    2dc2:	80 a5       	ldd	r24, Z+40	; 0x28
    2dc4:	81 50       	subi	r24, 0x01	; 1
    2dc6:	80 a7       	std	Z+40, r24	; 0x28
    2dc8:	22 8d       	ldd	r18, Z+26	; 0x1a
    2dca:	97 a1       	ldd	r25, Z+39	; 0x27
    2dcc:	29 17       	cp	r18, r25
    2dce:	51 f1       	breq	.+84     	; 0x2e24 <xTaskPriorityDisinherit+0x70>
    2dd0:	81 11       	cpse	r24, r1
    2dd2:	2a c0       	rjmp	.+84     	; 0x2e28 <xTaskPriorityDisinherit+0x74>
    2dd4:	ef 01       	movw	r28, r30
    2dd6:	8f 01       	movw	r16, r30
    2dd8:	0e 5f       	subi	r16, 0xFE	; 254
    2dda:	1f 4f       	sbci	r17, 0xFF	; 255
    2ddc:	c8 01       	movw	r24, r16
    2dde:	0e 94 78 08 	call	0x10f0	; 0x10f0 <uxListRemove>
    2de2:	8f a1       	ldd	r24, Y+39	; 0x27
    2de4:	8a 8f       	std	Y+26, r24	; 0x1a
    2de6:	44 e0       	ldi	r20, 0x04	; 4
    2de8:	50 e0       	ldi	r21, 0x00	; 0
    2dea:	60 e0       	ldi	r22, 0x00	; 0
    2dec:	70 e0       	ldi	r23, 0x00	; 0
    2dee:	48 1b       	sub	r20, r24
    2df0:	51 09       	sbc	r21, r1
    2df2:	61 09       	sbc	r22, r1
    2df4:	71 09       	sbc	r23, r1
    2df6:	4e 87       	std	Y+14, r20	; 0x0e
    2df8:	5f 87       	std	Y+15, r21	; 0x0f
    2dfa:	68 8b       	std	Y+16, r22	; 0x10
    2dfc:	79 8b       	std	Y+17, r23	; 0x11
    2dfe:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    2e02:	98 17       	cp	r25, r24
    2e04:	10 f4       	brcc	.+4      	; 0x2e0a <xTaskPriorityDisinherit+0x56>
    2e06:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    2e0a:	2b e0       	ldi	r18, 0x0B	; 11
    2e0c:	82 9f       	mul	r24, r18
    2e0e:	c0 01       	movw	r24, r0
    2e10:	11 24       	eor	r1, r1
    2e12:	b8 01       	movw	r22, r16
    2e14:	80 53       	subi	r24, 0x30	; 48
    2e16:	97 4e       	sbci	r25, 0xE7	; 231
    2e18:	0e 94 1a 08 	call	0x1034	; 0x1034 <vListInsertEnd>
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	05 c0       	rjmp	.+10     	; 0x2e2a <xTaskPriorityDisinherit+0x76>
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	03 c0       	rjmp	.+6      	; 0x2e2a <xTaskPriorityDisinherit+0x76>
    2e24:	80 e0       	ldi	r24, 0x00	; 0
    2e26:	01 c0       	rjmp	.+2      	; 0x2e2a <xTaskPriorityDisinherit+0x76>
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	1f 91       	pop	r17
    2e30:	0f 91       	pop	r16
    2e32:	08 95       	ret

00002e34 <vTaskPriorityDisinheritAfterTimeout>:
    2e34:	0f 93       	push	r16
    2e36:	1f 93       	push	r17
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	fc 01       	movw	r30, r24
    2e3e:	89 2b       	or	r24, r25
    2e40:	09 f4       	brne	.+2      	; 0x2e44 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2e42:	3f c0       	rjmp	.+126    	; 0x2ec2 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2e44:	87 a1       	ldd	r24, Z+39	; 0x27
    2e46:	86 17       	cp	r24, r22
    2e48:	08 f4       	brcc	.+2      	; 0x2e4c <vTaskPriorityDisinheritAfterTimeout+0x18>
    2e4a:	86 2f       	mov	r24, r22
    2e4c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e4e:	98 17       	cp	r25, r24
    2e50:	c1 f1       	breq	.+112    	; 0x2ec2 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2e52:	20 a5       	ldd	r18, Z+40	; 0x28
    2e54:	21 30       	cpi	r18, 0x01	; 1
    2e56:	a9 f5       	brne	.+106    	; 0x2ec2 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2e58:	82 8f       	std	Z+26, r24	; 0x1a
    2e5a:	46 85       	ldd	r20, Z+14	; 0x0e
    2e5c:	57 85       	ldd	r21, Z+15	; 0x0f
    2e5e:	60 89       	ldd	r22, Z+16	; 0x10
    2e60:	71 89       	ldd	r23, Z+17	; 0x11
    2e62:	77 23       	and	r23, r23
    2e64:	64 f0       	brlt	.+24     	; 0x2e7e <vTaskPriorityDisinheritAfterTimeout+0x4a>
    2e66:	44 e0       	ldi	r20, 0x04	; 4
    2e68:	50 e0       	ldi	r21, 0x00	; 0
    2e6a:	60 e0       	ldi	r22, 0x00	; 0
    2e6c:	70 e0       	ldi	r23, 0x00	; 0
    2e6e:	48 1b       	sub	r20, r24
    2e70:	51 09       	sbc	r21, r1
    2e72:	61 09       	sbc	r22, r1
    2e74:	71 09       	sbc	r23, r1
    2e76:	46 87       	std	Z+14, r20	; 0x0e
    2e78:	57 87       	std	Z+15, r21	; 0x0f
    2e7a:	60 8b       	std	Z+16, r22	; 0x10
    2e7c:	71 8b       	std	Z+17, r23	; 0x11
    2e7e:	2b e0       	ldi	r18, 0x0B	; 11
    2e80:	92 9f       	mul	r25, r18
    2e82:	c0 01       	movw	r24, r0
    2e84:	11 24       	eor	r1, r1
    2e86:	80 53       	subi	r24, 0x30	; 48
    2e88:	97 4e       	sbci	r25, 0xE7	; 231
    2e8a:	24 85       	ldd	r18, Z+12	; 0x0c
    2e8c:	35 85       	ldd	r19, Z+13	; 0x0d
    2e8e:	28 17       	cp	r18, r24
    2e90:	39 07       	cpc	r19, r25
    2e92:	b9 f4       	brne	.+46     	; 0x2ec2 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2e94:	ef 01       	movw	r28, r30
    2e96:	8f 01       	movw	r16, r30
    2e98:	0e 5f       	subi	r16, 0xFE	; 254
    2e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9c:	c8 01       	movw	r24, r16
    2e9e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <uxListRemove>
    2ea2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ea4:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    2ea8:	98 17       	cp	r25, r24
    2eaa:	10 f4       	brcc	.+4      	; 0x2eb0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    2eac:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    2eb0:	2b e0       	ldi	r18, 0x0B	; 11
    2eb2:	82 9f       	mul	r24, r18
    2eb4:	c0 01       	movw	r24, r0
    2eb6:	11 24       	eor	r1, r1
    2eb8:	b8 01       	movw	r22, r16
    2eba:	80 53       	subi	r24, 0x30	; 48
    2ebc:	97 4e       	sbci	r25, 0xE7	; 231
    2ebe:	0e 94 1a 08 	call	0x1034	; 0x1034 <vListInsertEnd>
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	1f 91       	pop	r17
    2ec8:	0f 91       	pop	r16
    2eca:	08 95       	ret

00002ecc <uxTaskResetEventItemValue>:
    2ecc:	cf 92       	push	r12
    2ece:	df 92       	push	r13
    2ed0:	ef 92       	push	r14
    2ed2:	ff 92       	push	r15
    2ed4:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2ed8:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2edc:	66 85       	ldd	r22, Z+14	; 0x0e
    2ede:	77 85       	ldd	r23, Z+15	; 0x0f
    2ee0:	80 89       	ldd	r24, Z+16	; 0x10
    2ee2:	91 89       	ldd	r25, Z+17	; 0x11
    2ee4:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2ee8:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2eec:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2ef0:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2ef4:	5a 96       	adiw	r26, 0x1a	; 26
    2ef6:	2c 91       	ld	r18, X
    2ef8:	c1 2c       	mov	r12, r1
    2efa:	d1 2c       	mov	r13, r1
    2efc:	76 01       	movw	r14, r12
    2efe:	68 94       	set
    2f00:	c2 f8       	bld	r12, 2
    2f02:	c2 1a       	sub	r12, r18
    2f04:	d1 08       	sbc	r13, r1
    2f06:	e1 08       	sbc	r14, r1
    2f08:	f1 08       	sbc	r15, r1
    2f0a:	c6 86       	std	Z+14, r12	; 0x0e
    2f0c:	d7 86       	std	Z+15, r13	; 0x0f
    2f0e:	e0 8a       	std	Z+16, r14	; 0x10
    2f10:	f1 8a       	std	Z+17, r15	; 0x11
    2f12:	ff 90       	pop	r15
    2f14:	ef 90       	pop	r14
    2f16:	df 90       	pop	r13
    2f18:	cf 90       	pop	r12
    2f1a:	08 95       	ret

00002f1c <pvTaskIncrementMutexHeldCount>:
    2f1c:	80 91 fc 18 	lds	r24, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2f20:	90 91 fd 18 	lds	r25, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2f24:	89 2b       	or	r24, r25
    2f26:	39 f0       	breq	.+14     	; 0x2f36 <pvTaskIncrementMutexHeldCount+0x1a>
    2f28:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2f2c:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2f30:	80 a5       	ldd	r24, Z+40	; 0x28
    2f32:	8f 5f       	subi	r24, 0xFF	; 255
    2f34:	80 a7       	std	Z+40, r24	; 0x28
    2f36:	80 91 fc 18 	lds	r24, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2f3a:	90 91 fd 18 	lds	r25, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2f3e:	08 95       	ret

00002f40 <xTaskNotifyWait>:
    2f40:	4f 92       	push	r4
    2f42:	5f 92       	push	r5
    2f44:	6f 92       	push	r6
    2f46:	7f 92       	push	r7
    2f48:	8f 92       	push	r8
    2f4a:	9f 92       	push	r9
    2f4c:	af 92       	push	r10
    2f4e:	bf 92       	push	r11
    2f50:	cf 92       	push	r12
    2f52:	df 92       	push	r13
    2f54:	ef 92       	push	r14
    2f56:	ff 92       	push	r15
    2f58:	0f 93       	push	r16
    2f5a:	1f 93       	push	r17
    2f5c:	49 01       	movw	r8, r18
    2f5e:	5a 01       	movw	r10, r20
    2f60:	0f b6       	in	r0, 0x3f	; 63
    2f62:	f8 94       	cli
    2f64:	0f 92       	push	r0
    2f66:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2f6a:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2f6e:	27 a5       	ldd	r18, Z+47	; 0x2f
    2f70:	22 30       	cpi	r18, 0x02	; 2
    2f72:	39 f1       	breq	.+78     	; 0x2fc2 <xTaskNotifyWait+0x82>
    2f74:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2f78:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2f7c:	43 a4       	ldd	r4, Z+43	; 0x2b
    2f7e:	54 a4       	ldd	r5, Z+44	; 0x2c
    2f80:	65 a4       	ldd	r6, Z+45	; 0x2d
    2f82:	76 a4       	ldd	r7, Z+46	; 0x2e
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	80 95       	com	r24
    2f8a:	90 95       	com	r25
    2f8c:	a0 95       	com	r26
    2f8e:	b0 95       	com	r27
    2f90:	84 21       	and	r24, r4
    2f92:	95 21       	and	r25, r5
    2f94:	a6 21       	and	r26, r6
    2f96:	b7 21       	and	r27, r7
    2f98:	83 a7       	std	Z+43, r24	; 0x2b
    2f9a:	94 a7       	std	Z+44, r25	; 0x2c
    2f9c:	a5 a7       	std	Z+45, r26	; 0x2d
    2f9e:	b6 a7       	std	Z+46, r27	; 0x2e
    2fa0:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2fa4:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	87 a7       	std	Z+47, r24	; 0x2f
    2fac:	c1 14       	cp	r12, r1
    2fae:	d1 04       	cpc	r13, r1
    2fb0:	e1 04       	cpc	r14, r1
    2fb2:	f1 04       	cpc	r15, r1
    2fb4:	31 f0       	breq	.+12     	; 0x2fc2 <xTaskNotifyWait+0x82>
    2fb6:	41 e0       	ldi	r20, 0x01	; 1
    2fb8:	c7 01       	movw	r24, r14
    2fba:	b6 01       	movw	r22, r12
    2fbc:	fc d8       	rcall	.-3592   	; 0x21b6 <prvAddCurrentTaskToDelayedList>
    2fbe:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
    2fc2:	0f 90       	pop	r0
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	0f 92       	push	r0
    2fcc:	01 15       	cp	r16, r1
    2fce:	11 05       	cpc	r17, r1
    2fd0:	69 f0       	breq	.+26     	; 0x2fec <xTaskNotifyWait+0xac>
    2fd2:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2fd6:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2fda:	83 a5       	ldd	r24, Z+43	; 0x2b
    2fdc:	94 a5       	ldd	r25, Z+44	; 0x2c
    2fde:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2fe0:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2fe2:	f8 01       	movw	r30, r16
    2fe4:	80 83       	st	Z, r24
    2fe6:	91 83       	std	Z+1, r25	; 0x01
    2fe8:	a2 83       	std	Z+2, r26	; 0x02
    2fea:	b3 83       	std	Z+3, r27	; 0x03
    2fec:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2ff0:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2ff4:	87 a5       	ldd	r24, Z+47	; 0x2f
    2ff6:	82 30       	cpi	r24, 0x02	; 2
    2ff8:	b1 f4       	brne	.+44     	; 0x3026 <xTaskNotifyWait+0xe6>
    2ffa:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2ffe:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    3002:	83 a5       	ldd	r24, Z+43	; 0x2b
    3004:	94 a5       	ldd	r25, Z+44	; 0x2c
    3006:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3008:	b6 a5       	ldd	r27, Z+46	; 0x2e
    300a:	80 94       	com	r8
    300c:	90 94       	com	r9
    300e:	a0 94       	com	r10
    3010:	b0 94       	com	r11
    3012:	88 22       	and	r8, r24
    3014:	99 22       	and	r9, r25
    3016:	aa 22       	and	r10, r26
    3018:	bb 22       	and	r11, r27
    301a:	83 a6       	std	Z+43, r8	; 0x2b
    301c:	94 a6       	std	Z+44, r9	; 0x2c
    301e:	a5 a6       	std	Z+45, r10	; 0x2d
    3020:	b6 a6       	std	Z+46, r11	; 0x2e
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	01 c0       	rjmp	.+2      	; 0x3028 <xTaskNotifyWait+0xe8>
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    302c:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    3030:	17 a6       	std	Z+47, r1	; 0x2f
    3032:	0f 90       	pop	r0
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	1f 91       	pop	r17
    3038:	0f 91       	pop	r16
    303a:	ff 90       	pop	r15
    303c:	ef 90       	pop	r14
    303e:	df 90       	pop	r13
    3040:	cf 90       	pop	r12
    3042:	bf 90       	pop	r11
    3044:	af 90       	pop	r10
    3046:	9f 90       	pop	r9
    3048:	8f 90       	pop	r8
    304a:	7f 90       	pop	r7
    304c:	6f 90       	pop	r6
    304e:	5f 90       	pop	r5
    3050:	4f 90       	pop	r4
    3052:	08 95       	ret

00003054 <xTaskGenericNotify>:
    3054:	0f 93       	push	r16
    3056:	1f 93       	push	r17
    3058:	cf 93       	push	r28
    305a:	df 93       	push	r29
    305c:	fc 01       	movw	r30, r24
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	0f 92       	push	r0
    3064:	01 15       	cp	r16, r1
    3066:	11 05       	cpc	r17, r1
    3068:	49 f0       	breq	.+18     	; 0x307c <xTaskGenericNotify+0x28>
    306a:	83 a5       	ldd	r24, Z+43	; 0x2b
    306c:	94 a5       	ldd	r25, Z+44	; 0x2c
    306e:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3070:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3072:	e8 01       	movw	r28, r16
    3074:	88 83       	st	Y, r24
    3076:	99 83       	std	Y+1, r25	; 0x01
    3078:	aa 83       	std	Y+2, r26	; 0x02
    307a:	bb 83       	std	Y+3, r27	; 0x03
    307c:	87 a5       	ldd	r24, Z+47	; 0x2f
    307e:	92 e0       	ldi	r25, 0x02	; 2
    3080:	97 a7       	std	Z+47, r25	; 0x2f
    3082:	22 30       	cpi	r18, 0x02	; 2
    3084:	b1 f0       	breq	.+44     	; 0x30b2 <xTaskGenericNotify+0x5e>
    3086:	18 f4       	brcc	.+6      	; 0x308e <xTaskGenericNotify+0x3a>
    3088:	21 30       	cpi	r18, 0x01	; 1
    308a:	31 f0       	breq	.+12     	; 0x3098 <xTaskGenericNotify+0x44>
    308c:	2a c0       	rjmp	.+84     	; 0x30e2 <xTaskGenericNotify+0x8e>
    308e:	23 30       	cpi	r18, 0x03	; 3
    3090:	e9 f0       	breq	.+58     	; 0x30cc <xTaskGenericNotify+0x78>
    3092:	24 30       	cpi	r18, 0x04	; 4
    3094:	01 f1       	breq	.+64     	; 0x30d6 <xTaskGenericNotify+0x82>
    3096:	25 c0       	rjmp	.+74     	; 0x30e2 <xTaskGenericNotify+0x8e>
    3098:	03 a5       	ldd	r16, Z+43	; 0x2b
    309a:	14 a5       	ldd	r17, Z+44	; 0x2c
    309c:	25 a5       	ldd	r18, Z+45	; 0x2d
    309e:	36 a5       	ldd	r19, Z+46	; 0x2e
    30a0:	40 2b       	or	r20, r16
    30a2:	51 2b       	or	r21, r17
    30a4:	62 2b       	or	r22, r18
    30a6:	73 2b       	or	r23, r19
    30a8:	43 a7       	std	Z+43, r20	; 0x2b
    30aa:	54 a7       	std	Z+44, r21	; 0x2c
    30ac:	65 a7       	std	Z+45, r22	; 0x2d
    30ae:	76 a7       	std	Z+46, r23	; 0x2e
    30b0:	18 c0       	rjmp	.+48     	; 0x30e2 <xTaskGenericNotify+0x8e>
    30b2:	43 a5       	ldd	r20, Z+43	; 0x2b
    30b4:	54 a5       	ldd	r21, Z+44	; 0x2c
    30b6:	65 a5       	ldd	r22, Z+45	; 0x2d
    30b8:	76 a5       	ldd	r23, Z+46	; 0x2e
    30ba:	4f 5f       	subi	r20, 0xFF	; 255
    30bc:	5f 4f       	sbci	r21, 0xFF	; 255
    30be:	6f 4f       	sbci	r22, 0xFF	; 255
    30c0:	7f 4f       	sbci	r23, 0xFF	; 255
    30c2:	43 a7       	std	Z+43, r20	; 0x2b
    30c4:	54 a7       	std	Z+44, r21	; 0x2c
    30c6:	65 a7       	std	Z+45, r22	; 0x2d
    30c8:	76 a7       	std	Z+46, r23	; 0x2e
    30ca:	0b c0       	rjmp	.+22     	; 0x30e2 <xTaskGenericNotify+0x8e>
    30cc:	43 a7       	std	Z+43, r20	; 0x2b
    30ce:	54 a7       	std	Z+44, r21	; 0x2c
    30d0:	65 a7       	std	Z+45, r22	; 0x2d
    30d2:	76 a7       	std	Z+46, r23	; 0x2e
    30d4:	06 c0       	rjmp	.+12     	; 0x30e2 <xTaskGenericNotify+0x8e>
    30d6:	82 30       	cpi	r24, 0x02	; 2
    30d8:	49 f1       	breq	.+82     	; 0x312c <xTaskGenericNotify+0xd8>
    30da:	43 a7       	std	Z+43, r20	; 0x2b
    30dc:	54 a7       	std	Z+44, r21	; 0x2c
    30de:	65 a7       	std	Z+45, r22	; 0x2d
    30e0:	76 a7       	std	Z+46, r23	; 0x2e
    30e2:	81 30       	cpi	r24, 0x01	; 1
    30e4:	29 f5       	brne	.+74     	; 0x3130 <xTaskGenericNotify+0xdc>
    30e6:	ef 01       	movw	r28, r30
    30e8:	8f 01       	movw	r16, r30
    30ea:	0e 5f       	subi	r16, 0xFE	; 254
    30ec:	1f 4f       	sbci	r17, 0xFF	; 255
    30ee:	c8 01       	movw	r24, r16
    30f0:	0e 94 78 08 	call	0x10f0	; 0x10f0 <uxListRemove>
    30f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30f6:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    30fa:	98 17       	cp	r25, r24
    30fc:	10 f4       	brcc	.+4      	; 0x3102 <xTaskGenericNotify+0xae>
    30fe:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    3102:	2b e0       	ldi	r18, 0x0B	; 11
    3104:	82 9f       	mul	r24, r18
    3106:	c0 01       	movw	r24, r0
    3108:	11 24       	eor	r1, r1
    310a:	b8 01       	movw	r22, r16
    310c:	80 53       	subi	r24, 0x30	; 48
    310e:	97 4e       	sbci	r25, 0xE7	; 231
    3110:	0e 94 1a 08 	call	0x1034	; 0x1034 <vListInsertEnd>
    3114:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    3118:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    311c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    311e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3120:	89 17       	cp	r24, r25
    3122:	40 f4       	brcc	.+16     	; 0x3134 <xTaskGenericNotify+0xe0>
    3124:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	05 c0       	rjmp	.+10     	; 0x3136 <xTaskGenericNotify+0xe2>
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	03 c0       	rjmp	.+6      	; 0x3136 <xTaskGenericNotify+0xe2>
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	01 c0       	rjmp	.+2      	; 0x3136 <xTaskGenericNotify+0xe2>
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	0f 90       	pop	r0
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	df 91       	pop	r29
    313c:	cf 91       	pop	r28
    313e:	1f 91       	pop	r17
    3140:	0f 91       	pop	r16
    3142:	08 95       	ret

00003144 <xTaskGenericNotifyFromISR>:
    3144:	ef 92       	push	r14
    3146:	ff 92       	push	r15
    3148:	0f 93       	push	r16
    314a:	1f 93       	push	r17
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29
    3150:	fc 01       	movw	r30, r24
    3152:	01 15       	cp	r16, r1
    3154:	11 05       	cpc	r17, r1
    3156:	49 f0       	breq	.+18     	; 0x316a <xTaskGenericNotifyFromISR+0x26>
    3158:	83 a5       	ldd	r24, Z+43	; 0x2b
    315a:	94 a5       	ldd	r25, Z+44	; 0x2c
    315c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    315e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3160:	e8 01       	movw	r28, r16
    3162:	88 83       	st	Y, r24
    3164:	99 83       	std	Y+1, r25	; 0x01
    3166:	aa 83       	std	Y+2, r26	; 0x02
    3168:	bb 83       	std	Y+3, r27	; 0x03
    316a:	87 a5       	ldd	r24, Z+47	; 0x2f
    316c:	92 e0       	ldi	r25, 0x02	; 2
    316e:	97 a7       	std	Z+47, r25	; 0x2f
    3170:	22 30       	cpi	r18, 0x02	; 2
    3172:	b1 f0       	breq	.+44     	; 0x31a0 <xTaskGenericNotifyFromISR+0x5c>
    3174:	18 f4       	brcc	.+6      	; 0x317c <xTaskGenericNotifyFromISR+0x38>
    3176:	21 30       	cpi	r18, 0x01	; 1
    3178:	31 f0       	breq	.+12     	; 0x3186 <xTaskGenericNotifyFromISR+0x42>
    317a:	2a c0       	rjmp	.+84     	; 0x31d0 <xTaskGenericNotifyFromISR+0x8c>
    317c:	23 30       	cpi	r18, 0x03	; 3
    317e:	e9 f0       	breq	.+58     	; 0x31ba <xTaskGenericNotifyFromISR+0x76>
    3180:	24 30       	cpi	r18, 0x04	; 4
    3182:	01 f1       	breq	.+64     	; 0x31c4 <xTaskGenericNotifyFromISR+0x80>
    3184:	25 c0       	rjmp	.+74     	; 0x31d0 <xTaskGenericNotifyFromISR+0x8c>
    3186:	03 a5       	ldd	r16, Z+43	; 0x2b
    3188:	14 a5       	ldd	r17, Z+44	; 0x2c
    318a:	25 a5       	ldd	r18, Z+45	; 0x2d
    318c:	36 a5       	ldd	r19, Z+46	; 0x2e
    318e:	40 2b       	or	r20, r16
    3190:	51 2b       	or	r21, r17
    3192:	62 2b       	or	r22, r18
    3194:	73 2b       	or	r23, r19
    3196:	43 a7       	std	Z+43, r20	; 0x2b
    3198:	54 a7       	std	Z+44, r21	; 0x2c
    319a:	65 a7       	std	Z+45, r22	; 0x2d
    319c:	76 a7       	std	Z+46, r23	; 0x2e
    319e:	18 c0       	rjmp	.+48     	; 0x31d0 <xTaskGenericNotifyFromISR+0x8c>
    31a0:	43 a5       	ldd	r20, Z+43	; 0x2b
    31a2:	54 a5       	ldd	r21, Z+44	; 0x2c
    31a4:	65 a5       	ldd	r22, Z+45	; 0x2d
    31a6:	76 a5       	ldd	r23, Z+46	; 0x2e
    31a8:	4f 5f       	subi	r20, 0xFF	; 255
    31aa:	5f 4f       	sbci	r21, 0xFF	; 255
    31ac:	6f 4f       	sbci	r22, 0xFF	; 255
    31ae:	7f 4f       	sbci	r23, 0xFF	; 255
    31b0:	43 a7       	std	Z+43, r20	; 0x2b
    31b2:	54 a7       	std	Z+44, r21	; 0x2c
    31b4:	65 a7       	std	Z+45, r22	; 0x2d
    31b6:	76 a7       	std	Z+46, r23	; 0x2e
    31b8:	0b c0       	rjmp	.+22     	; 0x31d0 <xTaskGenericNotifyFromISR+0x8c>
    31ba:	43 a7       	std	Z+43, r20	; 0x2b
    31bc:	54 a7       	std	Z+44, r21	; 0x2c
    31be:	65 a7       	std	Z+45, r22	; 0x2d
    31c0:	76 a7       	std	Z+46, r23	; 0x2e
    31c2:	06 c0       	rjmp	.+12     	; 0x31d0 <xTaskGenericNotifyFromISR+0x8c>
    31c4:	82 30       	cpi	r24, 0x02	; 2
    31c6:	d9 f1       	breq	.+118    	; 0x323e <xTaskGenericNotifyFromISR+0xfa>
    31c8:	43 a7       	std	Z+43, r20	; 0x2b
    31ca:	54 a7       	std	Z+44, r21	; 0x2c
    31cc:	65 a7       	std	Z+45, r22	; 0x2d
    31ce:	76 a7       	std	Z+46, r23	; 0x2e
    31d0:	81 30       	cpi	r24, 0x01	; 1
    31d2:	b9 f5       	brne	.+110    	; 0x3242 <xTaskGenericNotifyFromISR+0xfe>
    31d4:	ef 01       	movw	r28, r30
    31d6:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxSchedulerSuspended>
    31da:	81 11       	cpse	r24, r1
    31dc:	17 c0       	rjmp	.+46     	; 0x320c <xTaskGenericNotifyFromISR+0xc8>
    31de:	8f 01       	movw	r16, r30
    31e0:	0e 5f       	subi	r16, 0xFE	; 254
    31e2:	1f 4f       	sbci	r17, 0xFF	; 255
    31e4:	c8 01       	movw	r24, r16
    31e6:	0e 94 78 08 	call	0x10f0	; 0x10f0 <uxListRemove>
    31ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31ec:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    31f0:	98 17       	cp	r25, r24
    31f2:	10 f4       	brcc	.+4      	; 0x31f8 <xTaskGenericNotifyFromISR+0xb4>
    31f4:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    31f8:	eb e0       	ldi	r30, 0x0B	; 11
    31fa:	8e 9f       	mul	r24, r30
    31fc:	c0 01       	movw	r24, r0
    31fe:	11 24       	eor	r1, r1
    3200:	b8 01       	movw	r22, r16
    3202:	80 53       	subi	r24, 0x30	; 48
    3204:	97 4e       	sbci	r25, 0xE7	; 231
    3206:	0e 94 1a 08 	call	0x1034	; 0x1034 <vListInsertEnd>
    320a:	07 c0       	rjmp	.+14     	; 0x321a <xTaskGenericNotifyFromISR+0xd6>
    320c:	bf 01       	movw	r22, r30
    320e:	62 5f       	subi	r22, 0xF2	; 242
    3210:	7f 4f       	sbci	r23, 0xFF	; 255
    3212:	8b ea       	ldi	r24, 0xAB	; 171
    3214:	98 e1       	ldi	r25, 0x18	; 24
    3216:	0e 94 1a 08 	call	0x1034	; 0x1034 <vListInsertEnd>
    321a:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    321e:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    3222:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3224:	82 8d       	ldd	r24, Z+26	; 0x1a
    3226:	89 17       	cp	r24, r25
    3228:	70 f4       	brcc	.+28     	; 0x3246 <xTaskGenericNotifyFromISR+0x102>
    322a:	e1 14       	cp	r14, r1
    322c:	f1 04       	cpc	r15, r1
    322e:	19 f0       	breq	.+6      	; 0x3236 <xTaskGenericNotifyFromISR+0xf2>
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	e7 01       	movw	r28, r14
    3234:	88 83       	st	Y, r24
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <xYieldPending>
    323c:	05 c0       	rjmp	.+10     	; 0x3248 <xTaskGenericNotifyFromISR+0x104>
    323e:	80 e0       	ldi	r24, 0x00	; 0
    3240:	03 c0       	rjmp	.+6      	; 0x3248 <xTaskGenericNotifyFromISR+0x104>
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	01 c0       	rjmp	.+2      	; 0x3248 <xTaskGenericNotifyFromISR+0x104>
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	df 91       	pop	r29
    324a:	cf 91       	pop	r28
    324c:	1f 91       	pop	r17
    324e:	0f 91       	pop	r16
    3250:	ff 90       	pop	r15
    3252:	ef 90       	pop	r14
    3254:	08 95       	ret

00003256 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3256:	00 97       	sbiw	r24, 0x00	; 0
    3258:	21 f4       	brne	.+8      	; 0x3262 <xTaskNotifyStateClear+0xc>
    325a:	80 91 fc 18 	lds	r24, 0x18FC	; 0x8018fc <pxCurrentTCB>
    325e:	90 91 fd 18 	lds	r25, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3262:	0f b6       	in	r0, 0x3f	; 63
    3264:	f8 94       	cli
    3266:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    3268:	fc 01       	movw	r30, r24
    326a:	27 a5       	ldd	r18, Z+47	; 0x2f
    326c:	22 30       	cpi	r18, 0x02	; 2
    326e:	19 f4       	brne	.+6      	; 0x3276 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3270:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	01 c0       	rjmp	.+2      	; 0x3278 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    3276:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3278:	0f 90       	pop	r0
    327a:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    327c:	08 95       	ret

0000327e <prvInsertTimerInActiveList>:
    327e:	cf 92       	push	r12
    3280:	df 92       	push	r13
    3282:	ef 92       	push	r14
    3284:	ff 92       	push	r15
    3286:	0f 93       	push	r16
    3288:	1f 93       	push	r17
    328a:	fc 01       	movw	r30, r24
    328c:	42 83       	std	Z+2, r20	; 0x02
    328e:	53 83       	std	Z+3, r21	; 0x03
    3290:	64 83       	std	Z+4, r22	; 0x04
    3292:	75 83       	std	Z+5, r23	; 0x05
    3294:	93 87       	std	Z+11, r25	; 0x0b
    3296:	82 87       	std	Z+10, r24	; 0x0a
    3298:	04 17       	cp	r16, r20
    329a:	15 07       	cpc	r17, r21
    329c:	26 07       	cpc	r18, r22
    329e:	37 07       	cpc	r19, r23
    32a0:	c0 f0       	brcs	.+48     	; 0x32d2 <prvInsertTimerInActiveList+0x54>
    32a2:	0c 19       	sub	r16, r12
    32a4:	1d 09       	sbc	r17, r13
    32a6:	2e 09       	sbc	r18, r14
    32a8:	3f 09       	sbc	r19, r15
    32aa:	86 85       	ldd	r24, Z+14	; 0x0e
    32ac:	97 85       	ldd	r25, Z+15	; 0x0f
    32ae:	a0 89       	ldd	r26, Z+16	; 0x10
    32b0:	b1 89       	ldd	r27, Z+17	; 0x11
    32b2:	08 17       	cp	r16, r24
    32b4:	19 07       	cpc	r17, r25
    32b6:	2a 07       	cpc	r18, r26
    32b8:	3b 07       	cpc	r19, r27
    32ba:	00 f5       	brcc	.+64     	; 0x32fc <prvInsertTimerInActiveList+0x7e>
    32bc:	bf 01       	movw	r22, r30
    32be:	6e 5f       	subi	r22, 0xFE	; 254
    32c0:	7f 4f       	sbci	r23, 0xFF	; 255
    32c2:	80 91 06 19 	lds	r24, 0x1906	; 0x801906 <pxOverflowTimerList>
    32c6:	90 91 07 19 	lds	r25, 0x1907	; 0x801907 <pxOverflowTimerList+0x1>
    32ca:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsert>
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	18 c0       	rjmp	.+48     	; 0x3302 <prvInsertTimerInActiveList+0x84>
    32d2:	0c 15       	cp	r16, r12
    32d4:	1d 05       	cpc	r17, r13
    32d6:	2e 05       	cpc	r18, r14
    32d8:	3f 05       	cpc	r19, r15
    32da:	28 f4       	brcc	.+10     	; 0x32e6 <prvInsertTimerInActiveList+0x68>
    32dc:	4c 15       	cp	r20, r12
    32de:	5d 05       	cpc	r21, r13
    32e0:	6e 05       	cpc	r22, r14
    32e2:	7f 05       	cpc	r23, r15
    32e4:	68 f4       	brcc	.+26     	; 0x3300 <prvInsertTimerInActiveList+0x82>
    32e6:	bf 01       	movw	r22, r30
    32e8:	6e 5f       	subi	r22, 0xFE	; 254
    32ea:	7f 4f       	sbci	r23, 0xFF	; 255
    32ec:	80 91 08 19 	lds	r24, 0x1908	; 0x801908 <pxCurrentTimerList>
    32f0:	90 91 09 19 	lds	r25, 0x1909	; 0x801909 <pxCurrentTimerList+0x1>
    32f4:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsert>
    32f8:	80 e0       	ldi	r24, 0x00	; 0
    32fa:	03 c0       	rjmp	.+6      	; 0x3302 <prvInsertTimerInActiveList+0x84>
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	01 c0       	rjmp	.+2      	; 0x3302 <prvInsertTimerInActiveList+0x84>
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	1f 91       	pop	r17
    3304:	0f 91       	pop	r16
    3306:	ff 90       	pop	r15
    3308:	ef 90       	pop	r14
    330a:	df 90       	pop	r13
    330c:	cf 90       	pop	r12
    330e:	08 95       	ret

00003310 <prvCheckForValidListAndQueue>:
    3310:	0f b6       	in	r0, 0x3f	; 63
    3312:	f8 94       	cli
    3314:	0f 92       	push	r0
    3316:	80 91 04 19 	lds	r24, 0x1904	; 0x801904 <xTimerQueue>
    331a:	90 91 05 19 	lds	r25, 0x1905	; 0x801905 <xTimerQueue+0x1>
    331e:	89 2b       	or	r24, r25
    3320:	e9 f4       	brne	.+58     	; 0x335c <prvCheckForValidListAndQueue+0x4c>
    3322:	85 e1       	ldi	r24, 0x15	; 21
    3324:	99 e1       	ldi	r25, 0x19	; 25
    3326:	0e 94 05 08 	call	0x100a	; 0x100a <vListInitialise>
    332a:	8a e0       	ldi	r24, 0x0A	; 10
    332c:	99 e1       	ldi	r25, 0x19	; 25
    332e:	0e 94 05 08 	call	0x100a	; 0x100a <vListInitialise>
    3332:	85 e1       	ldi	r24, 0x15	; 21
    3334:	99 e1       	ldi	r25, 0x19	; 25
    3336:	90 93 09 19 	sts	0x1909, r25	; 0x801909 <pxCurrentTimerList+0x1>
    333a:	80 93 08 19 	sts	0x1908, r24	; 0x801908 <pxCurrentTimerList>
    333e:	8a e0       	ldi	r24, 0x0A	; 10
    3340:	99 e1       	ldi	r25, 0x19	; 25
    3342:	90 93 07 19 	sts	0x1907, r25	; 0x801907 <pxOverflowTimerList+0x1>
    3346:	80 93 06 19 	sts	0x1906, r24	; 0x801906 <pxOverflowTimerList>
    334a:	40 e0       	ldi	r20, 0x00	; 0
    334c:	67 e0       	ldi	r22, 0x07	; 7
    334e:	8a e0       	ldi	r24, 0x0A	; 10
    3350:	0e 94 29 0b 	call	0x1652	; 0x1652 <xQueueGenericCreate>
    3354:	90 93 05 19 	sts	0x1905, r25	; 0x801905 <xTimerQueue+0x1>
    3358:	80 93 04 19 	sts	0x1904, r24	; 0x801904 <xTimerQueue>
    335c:	0f 90       	pop	r0
    335e:	0f be       	out	0x3f, r0	; 63
    3360:	08 95       	ret

00003362 <xTimerCreateTimerTask>:
    3362:	ef 92       	push	r14
    3364:	ff 92       	push	r15
    3366:	0f 93       	push	r16
    3368:	d3 df       	rcall	.-90     	; 0x3310 <prvCheckForValidListAndQueue>
    336a:	80 91 04 19 	lds	r24, 0x1904	; 0x801904 <xTimerQueue>
    336e:	90 91 05 19 	lds	r25, 0x1905	; 0x801905 <xTimerQueue+0x1>
    3372:	89 2b       	or	r24, r25
    3374:	91 f0       	breq	.+36     	; 0x339a <xTimerCreateTimerTask+0x38>
    3376:	0f 2e       	mov	r0, r31
    3378:	f2 e0       	ldi	r31, 0x02	; 2
    337a:	ef 2e       	mov	r14, r31
    337c:	f9 e1       	ldi	r31, 0x19	; 25
    337e:	ff 2e       	mov	r15, r31
    3380:	f0 2d       	mov	r31, r0
    3382:	03 e0       	ldi	r16, 0x03	; 3
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	45 e5       	ldi	r20, 0x55	; 85
    338a:	50 e0       	ldi	r21, 0x00	; 0
    338c:	6c e2       	ldi	r22, 0x2C	; 44
    338e:	74 e0       	ldi	r23, 0x04	; 4
    3390:	84 e0       	ldi	r24, 0x04	; 4
    3392:	91 e0       	ldi	r25, 0x01	; 1
    3394:	0e 94 52 11 	call	0x22a4	; 0x22a4 <xTaskCreate>
    3398:	01 c0       	rjmp	.+2      	; 0x339c <xTimerCreateTimerTask+0x3a>
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	0f 91       	pop	r16
    339e:	ff 90       	pop	r15
    33a0:	ef 90       	pop	r14
    33a2:	08 95       	ret

000033a4 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    33a4:	8f 92       	push	r8
    33a6:	9f 92       	push	r9
    33a8:	af 92       	push	r10
    33aa:	bf 92       	push	r11
    33ac:	cf 92       	push	r12
    33ae:	df 92       	push	r13
    33b0:	ef 92       	push	r14
    33b2:	ff 92       	push	r15
    33b4:	0f 93       	push	r16
    33b6:	1f 93       	push	r17
    33b8:	cf 93       	push	r28
    33ba:	df 93       	push	r29
    33bc:	cd b7       	in	r28, 0x3d	; 61
    33be:	de b7       	in	r29, 0x3e	; 62
    33c0:	27 97       	sbiw	r28, 0x07	; 7
    33c2:	0f b6       	in	r0, 0x3f	; 63
    33c4:	f8 94       	cli
    33c6:	de bf       	out	0x3e, r29	; 62
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    33cc:	e0 91 04 19 	lds	r30, 0x1904	; 0x801904 <xTimerQueue>
    33d0:	f0 91 05 19 	lds	r31, 0x1905	; 0x801905 <xTimerQueue+0x1>
    33d4:	30 97       	sbiw	r30, 0x00	; 0
    33d6:	81 f1       	breq	.+96     	; 0x3438 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    33d8:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    33da:	2a 83       	std	Y+2, r18	; 0x02
    33dc:	3b 83       	std	Y+3, r19	; 0x03
    33de:	4c 83       	std	Y+4, r20	; 0x04
    33e0:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    33e2:	9f 83       	std	Y+7, r25	; 0x07
    33e4:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    33e6:	66 30       	cpi	r22, 0x06	; 6
    33e8:	f4 f4       	brge	.+60     	; 0x3426 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    33ea:	68 dc       	rcall	.-1840   	; 0x2cbc <xTaskGetSchedulerState>
    33ec:	82 30       	cpi	r24, 0x02	; 2
    33ee:	69 f4       	brne	.+26     	; 0x340a <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    33f0:	00 e0       	ldi	r16, 0x00	; 0
    33f2:	a7 01       	movw	r20, r14
    33f4:	96 01       	movw	r18, r12
    33f6:	be 01       	movw	r22, r28
    33f8:	6f 5f       	subi	r22, 0xFF	; 255
    33fa:	7f 4f       	sbci	r23, 0xFF	; 255
    33fc:	80 91 04 19 	lds	r24, 0x1904	; 0x801904 <xTimerQueue>
    3400:	90 91 05 19 	lds	r25, 0x1905	; 0x801905 <xTimerQueue+0x1>
    3404:	0e 94 57 0b 	call	0x16ae	; 0x16ae <xQueueGenericSend>
    3408:	18 c0       	rjmp	.+48     	; 0x343a <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    340a:	00 e0       	ldi	r16, 0x00	; 0
    340c:	20 e0       	ldi	r18, 0x00	; 0
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	a9 01       	movw	r20, r18
    3412:	be 01       	movw	r22, r28
    3414:	6f 5f       	subi	r22, 0xFF	; 255
    3416:	7f 4f       	sbci	r23, 0xFF	; 255
    3418:	80 91 04 19 	lds	r24, 0x1904	; 0x801904 <xTimerQueue>
    341c:	90 91 05 19 	lds	r25, 0x1905	; 0x801905 <xTimerQueue+0x1>
    3420:	0e 94 57 0b 	call	0x16ae	; 0x16ae <xQueueGenericSend>
    3424:	0a c0       	rjmp	.+20     	; 0x343a <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	a8 01       	movw	r20, r16
    342a:	be 01       	movw	r22, r28
    342c:	6f 5f       	subi	r22, 0xFF	; 255
    342e:	7f 4f       	sbci	r23, 0xFF	; 255
    3430:	cf 01       	movw	r24, r30
    3432:	0e 94 12 0c 	call	0x1824	; 0x1824 <xQueueGenericSendFromISR>
    3436:	01 c0       	rjmp	.+2      	; 0x343a <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3438:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    343a:	27 96       	adiw	r28, 0x07	; 7
    343c:	0f b6       	in	r0, 0x3f	; 63
    343e:	f8 94       	cli
    3440:	de bf       	out	0x3e, r29	; 62
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	cd bf       	out	0x3d, r28	; 61
    3446:	df 91       	pop	r29
    3448:	cf 91       	pop	r28
    344a:	1f 91       	pop	r17
    344c:	0f 91       	pop	r16
    344e:	ff 90       	pop	r15
    3450:	ef 90       	pop	r14
    3452:	df 90       	pop	r13
    3454:	cf 90       	pop	r12
    3456:	bf 90       	pop	r11
    3458:	af 90       	pop	r10
    345a:	9f 90       	pop	r9
    345c:	8f 90       	pop	r8
    345e:	08 95       	ret

00003460 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3460:	2f 92       	push	r2
    3462:	3f 92       	push	r3
    3464:	4f 92       	push	r4
    3466:	5f 92       	push	r5
    3468:	6f 92       	push	r6
    346a:	7f 92       	push	r7
    346c:	8f 92       	push	r8
    346e:	9f 92       	push	r9
    3470:	af 92       	push	r10
    3472:	bf 92       	push	r11
    3474:	cf 92       	push	r12
    3476:	df 92       	push	r13
    3478:	ef 92       	push	r14
    347a:	ff 92       	push	r15
    347c:	0f 93       	push	r16
    347e:	1f 93       	push	r17
    3480:	cf 93       	push	r28
    3482:	df 93       	push	r29
    3484:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3486:	6f d8       	rcall	.-3874   	; 0x2566 <xTaskGetTickCount>
    3488:	2b 01       	movw	r4, r22
    348a:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    348c:	80 91 fe 18 	lds	r24, 0x18FE	; 0x8018fe <xLastTime.2432>
    3490:	90 91 ff 18 	lds	r25, 0x18FF	; 0x8018ff <xLastTime.2432+0x1>
    3494:	a0 91 00 19 	lds	r26, 0x1900	; 0x801900 <xLastTime.2432+0x2>
    3498:	b0 91 01 19 	lds	r27, 0x1901	; 0x801901 <xLastTime.2432+0x3>
    349c:	48 16       	cp	r4, r24
    349e:	59 06       	cpc	r5, r25
    34a0:	6a 06       	cpc	r6, r26
    34a2:	7b 06       	cpc	r7, r27
    34a4:	08 f0       	brcs	.+2      	; 0x34a8 <prvSampleTimeNow+0x48>
    34a6:	53 c0       	rjmp	.+166    	; 0x354e <prvSampleTimeNow+0xee>
    34a8:	3b c0       	rjmp	.+118    	; 0x3520 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    34aa:	07 80       	ldd	r0, Z+7	; 0x07
    34ac:	f0 85       	ldd	r31, Z+8	; 0x08
    34ae:	e0 2d       	mov	r30, r0
    34b0:	80 80       	ld	r8, Z
    34b2:	91 80       	ldd	r9, Z+1	; 0x01
    34b4:	a2 80       	ldd	r10, Z+2	; 0x02
    34b6:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    34b8:	c0 85       	ldd	r28, Z+8	; 0x08
    34ba:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    34bc:	8e 01       	movw	r16, r28
    34be:	0e 5f       	subi	r16, 0xFE	; 254
    34c0:	1f 4f       	sbci	r17, 0xFF	; 255
    34c2:	c8 01       	movw	r24, r16
    34c4:	0e 94 78 08 	call	0x10f0	; 0x10f0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    34c8:	ec 89       	ldd	r30, Y+20	; 0x14
    34ca:	fd 89       	ldd	r31, Y+21	; 0x15
    34cc:	ce 01       	movw	r24, r28
    34ce:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    34d0:	8f 89       	ldd	r24, Y+23	; 0x17
    34d2:	82 ff       	sbrs	r24, 2
    34d4:	25 c0       	rjmp	.+74     	; 0x3520 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    34d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    34d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    34da:	a8 89       	ldd	r26, Y+16	; 0x10
    34dc:	b9 89       	ldd	r27, Y+17	; 0x11
    34de:	88 0d       	add	r24, r8
    34e0:	99 1d       	adc	r25, r9
    34e2:	aa 1d       	adc	r26, r10
    34e4:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    34e6:	88 16       	cp	r8, r24
    34e8:	99 06       	cpc	r9, r25
    34ea:	aa 06       	cpc	r10, r26
    34ec:	bb 06       	cpc	r11, r27
    34ee:	70 f4       	brcc	.+28     	; 0x350c <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    34f0:	8a 83       	std	Y+2, r24	; 0x02
    34f2:	9b 83       	std	Y+3, r25	; 0x03
    34f4:	ac 83       	std	Y+4, r26	; 0x04
    34f6:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    34f8:	db 87       	std	Y+11, r29	; 0x0b
    34fa:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    34fc:	b8 01       	movw	r22, r16
    34fe:	80 91 08 19 	lds	r24, 0x1908	; 0x801908 <pxCurrentTimerList>
    3502:	90 91 09 19 	lds	r25, 0x1909	; 0x801909 <pxCurrentTimerList+0x1>
    3506:	0e 94 3b 08 	call	0x1076	; 0x1076 <vListInsert>
    350a:	0a c0       	rjmp	.+20     	; 0x3520 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    350c:	c1 2c       	mov	r12, r1
    350e:	d1 2c       	mov	r13, r1
    3510:	76 01       	movw	r14, r12
    3512:	00 e0       	ldi	r16, 0x00	; 0
    3514:	10 e0       	ldi	r17, 0x00	; 0
    3516:	a5 01       	movw	r20, r10
    3518:	94 01       	movw	r18, r8
    351a:	60 e0       	ldi	r22, 0x00	; 0
    351c:	ce 01       	movw	r24, r28
    351e:	42 df       	rcall	.-380    	; 0x33a4 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3520:	e0 91 08 19 	lds	r30, 0x1908	; 0x801908 <pxCurrentTimerList>
    3524:	f0 91 09 19 	lds	r31, 0x1909	; 0x801909 <pxCurrentTimerList+0x1>
    3528:	80 81       	ld	r24, Z
    352a:	81 11       	cpse	r24, r1
    352c:	be cf       	rjmp	.-132    	; 0x34aa <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    352e:	80 91 06 19 	lds	r24, 0x1906	; 0x801906 <pxOverflowTimerList>
    3532:	90 91 07 19 	lds	r25, 0x1907	; 0x801907 <pxOverflowTimerList+0x1>
    3536:	90 93 09 19 	sts	0x1909, r25	; 0x801909 <pxCurrentTimerList+0x1>
    353a:	80 93 08 19 	sts	0x1908, r24	; 0x801908 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    353e:	f0 93 07 19 	sts	0x1907, r31	; 0x801907 <pxOverflowTimerList+0x1>
    3542:	e0 93 06 19 	sts	0x1906, r30	; 0x801906 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	f1 01       	movw	r30, r2
    354a:	80 83       	st	Z, r24
    354c:	02 c0       	rjmp	.+4      	; 0x3552 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    354e:	f1 01       	movw	r30, r2
    3550:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3552:	40 92 fe 18 	sts	0x18FE, r4	; 0x8018fe <xLastTime.2432>
    3556:	50 92 ff 18 	sts	0x18FF, r5	; 0x8018ff <xLastTime.2432+0x1>
    355a:	60 92 00 19 	sts	0x1900, r6	; 0x801900 <xLastTime.2432+0x2>
    355e:	70 92 01 19 	sts	0x1901, r7	; 0x801901 <xLastTime.2432+0x3>

    return xTimeNow;
}
    3562:	c3 01       	movw	r24, r6
    3564:	b2 01       	movw	r22, r4
    3566:	df 91       	pop	r29
    3568:	cf 91       	pop	r28
    356a:	1f 91       	pop	r17
    356c:	0f 91       	pop	r16
    356e:	ff 90       	pop	r15
    3570:	ef 90       	pop	r14
    3572:	df 90       	pop	r13
    3574:	cf 90       	pop	r12
    3576:	bf 90       	pop	r11
    3578:	af 90       	pop	r10
    357a:	9f 90       	pop	r9
    357c:	8f 90       	pop	r8
    357e:	7f 90       	pop	r7
    3580:	6f 90       	pop	r6
    3582:	5f 90       	pop	r5
    3584:	4f 90       	pop	r4
    3586:	3f 90       	pop	r3
    3588:	2f 90       	pop	r2
    358a:	08 95       	ret

0000358c <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    358c:	08 95       	ret

0000358e <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    358e:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3590:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3592:	2f ef       	ldi	r18, 0xFF	; 255
    3594:	80 e7       	ldi	r24, 0x70	; 112
    3596:	92 e0       	ldi	r25, 0x02	; 2
    3598:	21 50       	subi	r18, 0x01	; 1
    359a:	80 40       	sbci	r24, 0x00	; 0
    359c:	90 40       	sbci	r25, 0x00	; 0
    359e:	e1 f7       	brne	.-8      	; 0x3598 <vApplicationMallocFailedHook+0xa>
    35a0:	00 c0       	rjmp	.+0      	; 0x35a2 <vApplicationMallocFailedHook+0x14>
    35a2:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    35a4:	1f 9a       	sbi	0x03, 7	; 3
    35a6:	f5 cf       	rjmp	.-22     	; 0x3592 <vApplicationMallocFailedHook+0x4>

000035a8 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    35a8:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    35aa:	2f 9a       	sbi	0x05, 7	; 5
    35ac:	2f ef       	ldi	r18, 0xFF	; 255
    35ae:	87 ea       	ldi	r24, 0xA7	; 167
    35b0:	91 e6       	ldi	r25, 0x61	; 97
    35b2:	21 50       	subi	r18, 0x01	; 1
    35b4:	80 40       	sbci	r24, 0x00	; 0
    35b6:	90 40       	sbci	r25, 0x00	; 0
    35b8:	e1 f7       	brne	.-8      	; 0x35b2 <vApplicationStackOverflowHook+0xa>
    35ba:	00 c0       	rjmp	.+0      	; 0x35bc <vApplicationStackOverflowHook+0x14>
    35bc:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    35be:	1f 9a       	sbi	0x03, 7	; 3
    35c0:	f5 cf       	rjmp	.-22     	; 0x35ac <vApplicationStackOverflowHook+0x4>

000035c2 <hum_temp_task>:
		if((measureBits & (Hum_temp_measure_bit)) == (Hum_temp_measure_bit)){
			
				driver_ready_check = hih8120Wakeup();
				while (driver_ready_check != HIH8120_OK)
				{
					printf("%s%i%s\n", "Something went wrong with HIH8120 wakeup call! Return value was: ", driver_ready_check," . Retrying...");
    35c2:	0f 2e       	mov	r0, r31
    35c4:	fe e6       	ldi	r31, 0x6E	; 110
    35c6:	af 2e       	mov	r10, r31
    35c8:	f2 e0       	ldi	r31, 0x02	; 2
    35ca:	bf 2e       	mov	r11, r31
    35cc:	f0 2d       	mov	r31, r0
    35ce:	0f 2e       	mov	r0, r31
    35d0:	f4 e3       	ldi	r31, 0x34	; 52
    35d2:	8f 2e       	mov	r8, r31
    35d4:	f4 e0       	ldi	r31, 0x04	; 4
    35d6:	9f 2e       	mov	r9, r31
    35d8:	f0 2d       	mov	r31, r0
    35da:	c9 ea       	ldi	r28, 0xA9	; 169
    35dc:	d2 e0       	ldi	r29, 0x02	; 2
				
				driver_ready_check = hih8120Meassure();
				
				while (driver_ready_check != HIH8120_OK)
				{
					printf("%s%i%s\n", "Something went wrong with HIH8120 measure call! Return value was: ", driver_ready_check," . Retrying...");
    35de:	0f 2e       	mov	r0, r31
    35e0:	f6 e7       	ldi	r31, 0x76	; 118
    35e2:	6f 2e       	mov	r6, r31
    35e4:	f4 e0       	ldi	r31, 0x04	; 4
    35e6:	7f 2e       	mov	r7, r31
    35e8:	f0 2d       	mov	r31, r0
			
				setHumidity(hih8120GetHumidity());
				setTemperature(hih8120GetTemperature());
				
				
				printf("%s%i%s\n", "Arduino humidity level: ", (int)getHumidity(), "%");
    35ea:	0f 2e       	mov	r0, r31
    35ec:	f9 eb       	ldi	r31, 0xB9	; 185
    35ee:	4f 2e       	mov	r4, r31
    35f0:	f4 e0       	ldi	r31, 0x04	; 4
    35f2:	5f 2e       	mov	r5, r31
    35f4:	f0 2d       	mov	r31, r0
    35f6:	0f 2e       	mov	r0, r31
    35f8:	fb eb       	ldi	r31, 0xBB	; 187
    35fa:	2f 2e       	mov	r2, r31
    35fc:	f4 e0       	ldi	r31, 0x04	; 4
    35fe:	3f 2e       	mov	r3, r31
    3600:	f0 2d       	mov	r31, r0
{

	for (;;) 
	{
		
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, Hum_temp_measure_bit, pdTRUE, pdTRUE, 500);
    3602:	0f 2e       	mov	r0, r31
    3604:	f4 ef       	ldi	r31, 0xF4	; 244
    3606:	cf 2e       	mov	r12, r31
    3608:	dd 24       	eor	r13, r13
    360a:	d3 94       	inc	r13
    360c:	e1 2c       	mov	r14, r1
    360e:	f1 2c       	mov	r15, r1
    3610:	f0 2d       	mov	r31, r0
    3612:	01 e0       	ldi	r16, 0x01	; 1
    3614:	21 e0       	ldi	r18, 0x01	; 1
    3616:	42 e0       	ldi	r20, 0x02	; 2
    3618:	50 e0       	ldi	r21, 0x00	; 0
    361a:	60 e0       	ldi	r22, 0x00	; 0
    361c:	70 e0       	ldi	r23, 0x00	; 0
    361e:	80 91 82 1a 	lds	r24, 0x1A82	; 0x801a82 <Measure_event_group>
    3622:	90 91 83 1a 	lds	r25, 0x1A83	; 0x801a83 <Measure_event_group+0x1>
    3626:	0e 94 75 05 	call	0xaea	; 0xaea <xEventGroupWaitBits>
		
		if((measureBits & (Hum_temp_measure_bit)) == (Hum_temp_measure_bit)){
    362a:	61 ff       	sbrs	r22, 1
    362c:	ea cf       	rjmp	.-44     	; 0x3602 <hum_temp_task+0x40>
			
				driver_ready_check = hih8120Wakeup();
    362e:	00 d2       	rcall	.+1024   	; 0x3a30 <hih8120Wakeup>
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	90 93 ac 1a 	sts	0x1AAC, r25	; 0x801aac <driver_ready_check+0x1>
    3636:	80 93 ab 1a 	sts	0x1AAB, r24	; 0x801aab <driver_ready_check>
				while (driver_ready_check != HIH8120_OK)
    363a:	00 97       	sbiw	r24, 0x00	; 0
    363c:	01 f1       	breq	.+64     	; 0x367e <hum_temp_task+0xbc>
				{
					printf("%s%i%s\n", "Something went wrong with HIH8120 wakeup call! Return value was: ", driver_ready_check," . Retrying...");
    363e:	bf 92       	push	r11
    3640:	af 92       	push	r10
    3642:	9f 93       	push	r25
    3644:	8f 93       	push	r24
    3646:	9f 92       	push	r9
    3648:	8f 92       	push	r8
    364a:	df 93       	push	r29
    364c:	cf 93       	push	r28
    364e:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <printf>
					vTaskDelay(50);
    3652:	62 e3       	ldi	r22, 0x32	; 50
    3654:	70 e0       	ldi	r23, 0x00	; 0
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	90 e0       	ldi	r25, 0x00	; 0
					driver_ready_check = hih8120Wakeup();
    365a:	42 d9       	rcall	.-3452   	; 0x28e0 <vTaskDelay>
    365c:	e9 d1       	rcall	.+978    	; 0x3a30 <hih8120Wakeup>
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	90 93 ac 1a 	sts	0x1AAC, r25	; 0x801aac <driver_ready_check+0x1>
    3664:	80 93 ab 1a 	sts	0x1AAB, r24	; 0x801aab <driver_ready_check>
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, Hum_temp_measure_bit, pdTRUE, pdTRUE, 500);
		
		if((measureBits & (Hum_temp_measure_bit)) == (Hum_temp_measure_bit)){
			
				driver_ready_check = hih8120Wakeup();
				while (driver_ready_check != HIH8120_OK)
    3668:	2d b7       	in	r18, 0x3d	; 61
    366a:	3e b7       	in	r19, 0x3e	; 62
    366c:	28 5f       	subi	r18, 0xF8	; 248
    366e:	3f 4f       	sbci	r19, 0xFF	; 255
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	f8 94       	cli
    3674:	3e bf       	out	0x3e, r19	; 62
    3676:	0f be       	out	0x3f, r0	; 63
    3678:	2d bf       	out	0x3d, r18	; 61
    367a:	00 97       	sbiw	r24, 0x00	; 0
    367c:	01 f7       	brne	.-64     	; 0x363e <hum_temp_task+0x7c>
					
				}
				//if (HIH8120_OK != driver_ready_check)
				//printf("%s", "Something went wrong with HIH8120 wakeup call! Return value was: ", driver_ready_check);

				vTaskDelay(60); // necessary wait delay after calling wakeup
    367e:	6c e3       	ldi	r22, 0x3C	; 60
    3680:	70 e0       	ldi	r23, 0x00	; 0
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	90 e0       	ldi	r25, 0x00	; 0
				
				driver_ready_check = hih8120Meassure();
    3686:	2c d9       	rcall	.-3496   	; 0x28e0 <vTaskDelay>
    3688:	e8 d1       	rcall	.+976    	; 0x3a5a <hih8120Meassure>
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	90 93 ac 1a 	sts	0x1AAC, r25	; 0x801aac <driver_ready_check+0x1>
    3690:	80 93 ab 1a 	sts	0x1AAB, r24	; 0x801aab <driver_ready_check>
				
				while (driver_ready_check != HIH8120_OK)
    3694:	00 97       	sbiw	r24, 0x00	; 0
    3696:	01 f1       	breq	.+64     	; 0x36d8 <hum_temp_task+0x116>
				{
					printf("%s%i%s\n", "Something went wrong with HIH8120 measure call! Return value was: ", driver_ready_check," . Retrying...");
    3698:	bf 92       	push	r11
    369a:	af 92       	push	r10
    369c:	9f 93       	push	r25
    369e:	8f 93       	push	r24
    36a0:	7f 92       	push	r7
    36a2:	6f 92       	push	r6
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <printf>
					vTaskDelay(50);
    36ac:	62 e3       	ldi	r22, 0x32	; 50
    36ae:	70 e0       	ldi	r23, 0x00	; 0
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	90 e0       	ldi	r25, 0x00	; 0
					driver_ready_check = hih8120Meassure();
    36b4:	15 d9       	rcall	.-3542   	; 0x28e0 <vTaskDelay>
    36b6:	d1 d1       	rcall	.+930    	; 0x3a5a <hih8120Meassure>
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	90 93 ac 1a 	sts	0x1AAC, r25	; 0x801aac <driver_ready_check+0x1>
    36be:	80 93 ab 1a 	sts	0x1AAB, r24	; 0x801aab <driver_ready_check>

				vTaskDelay(60); // necessary wait delay after calling wakeup
				
				driver_ready_check = hih8120Meassure();
				
				while (driver_ready_check != HIH8120_OK)
    36c2:	2d b7       	in	r18, 0x3d	; 61
    36c4:	3e b7       	in	r19, 0x3e	; 62
    36c6:	28 5f       	subi	r18, 0xF8	; 248
    36c8:	3f 4f       	sbci	r19, 0xFF	; 255
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	f8 94       	cli
    36ce:	3e bf       	out	0x3e, r19	; 62
    36d0:	0f be       	out	0x3f, r0	; 63
    36d2:	2d bf       	out	0x3d, r18	; 61
					printf("%s%i%s\n", "Something went wrong with HIH8120 measure call! Return value was: ", driver_ready_check," . Retrying...");
					vTaskDelay(50);
					driver_ready_check = hih8120Meassure();
				}
				
				vTaskDelay(20); // giving it some time to get the values
    36d4:	00 97       	sbiw	r24, 0x00	; 0
    36d6:	01 f7       	brne	.-64     	; 0x3698 <hum_temp_task+0xd6>
    36d8:	64 e1       	ldi	r22, 0x14	; 20
    36da:	70 e0       	ldi	r23, 0x00	; 0
    36dc:	80 e0       	ldi	r24, 0x00	; 0
			
				setHumidity(hih8120GetHumidity());
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	ff d8       	rcall	.-3586   	; 0x28e0 <vTaskDelay>
    36e2:	cc d1       	rcall	.+920    	; 0x3a7c <hih8120GetHumidity>
				setTemperature(hih8120GetTemperature());
    36e4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <setHumidity>
    36e8:	de d1       	rcall	.+956    	; 0x3aa6 <hih8120GetTemperature>
    36ea:	0e 94 16 05 	call	0xa2c	; 0xa2c <setTemperature>
				
				
				printf("%s%i%s\n", "Arduino humidity level: ", (int)getHumidity(), "%");
    36ee:	0e 94 b9 04 	call	0x972	; 0x972 <getHumidity>
    36f2:	5f 92       	push	r5
    36f4:	4f 92       	push	r4
    36f6:	cb d0       	rcall	.+406    	; 0x388e <__fixsfsi>
    36f8:	7f 93       	push	r23
    36fa:	6f 93       	push	r22
    36fc:	3f 92       	push	r3
    36fe:	2f 92       	push	r2
    3700:	df 93       	push	r29
    3702:	cf 93       	push	r28
    3704:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <printf>
				printf("%s%i%s\n","Arduino temperature: ", (int)getTemperature(), "C");
    3708:	0e 94 ff 04 	call	0x9fe	; 0x9fe <getTemperature>
    370c:	24 ed       	ldi	r18, 0xD4	; 212
    370e:	34 e0       	ldi	r19, 0x04	; 4
    3710:	3f 93       	push	r19
    3712:	2f 93       	push	r18
    3714:	bc d0       	rcall	.+376    	; 0x388e <__fixsfsi>
    3716:	7f 93       	push	r23
    3718:	6f 93       	push	r22
    371a:	86 ed       	ldi	r24, 0xD6	; 214
    371c:	94 e0       	ldi	r25, 0x04	; 4
    371e:	9f 93       	push	r25
    3720:	8f 93       	push	r24
    3722:	df 93       	push	r29
    3724:	cf 93       	push	r28
    3726:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <printf>
				xEventGroupSetBits(Data_event_group, Hum_temp_data_bit);
    372a:	48 e0       	ldi	r20, 0x08	; 8
    372c:	50 e0       	ldi	r21, 0x00	; 0
    372e:	60 e0       	ldi	r22, 0x00	; 0
    3730:	70 e0       	ldi	r23, 0x00	; 0
    3732:	80 91 7e 1a 	lds	r24, 0x1A7E	; 0x801a7e <Data_event_group>
    3736:	90 91 7f 1a 	lds	r25, 0x1A7F	; 0x801a7f <Data_event_group+0x1>
    373a:	0e 94 35 06 	call	0xc6a	; 0xc6a <xEventGroupSetBits>
    373e:	8d b7       	in	r24, 0x3d	; 61
    3740:	9e b7       	in	r25, 0x3e	; 62
    3742:	40 96       	adiw	r24, 0x10	; 16
    3744:	0f b6       	in	r0, 0x3f	; 63
    3746:	f8 94       	cli
    3748:	9e bf       	out	0x3e, r25	; 62
    374a:	0f be       	out	0x3f, r0	; 63
    374c:	8d bf       	out	0x3d, r24	; 61
    374e:	59 cf       	rjmp	.-334    	; 0x3602 <hum_temp_task+0x40>

00003750 <HumidityTemperatureSensor_create>:

	
void hum_temp_task(void *pvParameters);

void HumidityTemperatureSensor_create()
{
    3750:	ef 92       	push	r14
    3752:	ff 92       	push	r15
    3754:	0f 93       	push	r16
	hih8120Create(); 
    3756:	54 d1       	rcall	.+680    	; 0x3a00 <hih8120Create>
	
	xTaskCreate(
    3758:	e1 2c       	mov	r14, r1
    375a:	f1 2c       	mov	r15, r1
    375c:	02 e0       	ldi	r16, 0x02	; 2
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	48 e8       	ldi	r20, 0x88	; 136
    3764:	51 e0       	ldi	r21, 0x01	; 1
    3766:	6c ee       	ldi	r22, 0xEC	; 236
    3768:	74 e0       	ldi	r23, 0x04	; 4
    376a:	81 ee       	ldi	r24, 0xE1	; 225
    376c:	9a e1       	ldi	r25, 0x1A	; 26
    376e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <xTaskCreate>
		configMINIMAL_STACK_SIZE+200,  // This stack size can be checked & adjusted by reading the Stack Highwater
		NULL,
		2,  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
		NULL
	 );
}
    3772:	0f 91       	pop	r16
    3774:	ff 90       	pop	r15
    3776:	ef 90       	pop	r14
    3778:	08 95       	ret

0000377a <create_tasks_and_semaphores>:
//extern MessageBufferHandle_t xMessageBuffer; 


/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{	
    377a:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	
	if ( Mutex_CO2 == NULL )  // Check to confirm that the Semaphore has not already been created.
    377c:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <Mutex_CO2>
    3780:	90 91 88 1a 	lds	r25, 0x1A88	; 0x801a88 <Mutex_CO2+0x1>
    3784:	89 2b       	or	r24, r25
    3786:	89 f4       	brne	.+34     	; 0x37aa <create_tasks_and_semaphores+0x30>
	{
		Mutex_CO2 = xSemaphoreCreateMutex();  // Create a MUTEX semaphore.
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <xQueueCreateMutex>
    378e:	90 93 88 1a 	sts	0x1A88, r25	; 0x801a88 <Mutex_CO2+0x1>
    3792:	80 93 87 1a 	sts	0x1A87, r24	; 0x801a87 <Mutex_CO2>
		if ( ( Mutex_CO2 ) != NULL )
    3796:	00 97       	sbiw	r24, 0x00	; 0
    3798:	41 f0       	breq	.+16     	; 0x37aa <create_tasks_and_semaphores+0x30>
		{
			xSemaphoreGive( ( Mutex_CO2 ) );  // Make the MUTEX available for use, by initially "Giving" the Semaphore.
    379a:	00 e0       	ldi	r16, 0x00	; 0
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	a9 01       	movw	r20, r18
    37a2:	60 e0       	ldi	r22, 0x00	; 0
    37a4:	70 e0       	ldi	r23, 0x00	; 0
    37a6:	0e 94 57 0b 	call	0x16ae	; 0x16ae <xQueueGenericSend>
		}
	}
	
	if ( Mutex_humidity == NULL )  // Check to confirm that the Semaphore has not already been created.
    37aa:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <Mutex_humidity>
    37ae:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <Mutex_humidity+0x1>
    37b2:	89 2b       	or	r24, r25
    37b4:	89 f4       	brne	.+34     	; 0x37d8 <create_tasks_and_semaphores+0x5e>
	{
		Mutex_humidity = xSemaphoreCreateMutex();  // Create a MUTEX semaphore.
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <xQueueCreateMutex>
    37bc:	90 93 7d 1a 	sts	0x1A7D, r25	; 0x801a7d <Mutex_humidity+0x1>
    37c0:	80 93 7c 1a 	sts	0x1A7C, r24	; 0x801a7c <Mutex_humidity>
		if ( ( Mutex_humidity ) != NULL )
    37c4:	00 97       	sbiw	r24, 0x00	; 0
    37c6:	41 f0       	breq	.+16     	; 0x37d8 <create_tasks_and_semaphores+0x5e>
		{
			xSemaphoreGive( ( Mutex_humidity ) );  // Make the MUTEX available for use, by initially "Giving" the Semaphore.
    37c8:	00 e0       	ldi	r16, 0x00	; 0
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	a9 01       	movw	r20, r18
    37d0:	60 e0       	ldi	r22, 0x00	; 0
    37d2:	70 e0       	ldi	r23, 0x00	; 0
    37d4:	0e 94 57 0b 	call	0x16ae	; 0x16ae <xQueueGenericSend>
		}
	}
	
	if ( Mutex_temperature == NULL )  // Check to confirm that the Semaphore has not already been created.
    37d8:	80 91 85 1a 	lds	r24, 0x1A85	; 0x801a85 <Mutex_temperature>
    37dc:	90 91 86 1a 	lds	r25, 0x1A86	; 0x801a86 <Mutex_temperature+0x1>
    37e0:	89 2b       	or	r24, r25
    37e2:	89 f4       	brne	.+34     	; 0x3806 <create_tasks_and_semaphores+0x8c>
	{
		Mutex_temperature = xSemaphoreCreateMutex();  // Create a MUTEX semaphore.
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <xQueueCreateMutex>
    37ea:	90 93 86 1a 	sts	0x1A86, r25	; 0x801a86 <Mutex_temperature+0x1>
    37ee:	80 93 85 1a 	sts	0x1A85, r24	; 0x801a85 <Mutex_temperature>
		if ( ( Mutex_temperature ) != NULL )
    37f2:	00 97       	sbiw	r24, 0x00	; 0
    37f4:	41 f0       	breq	.+16     	; 0x3806 <create_tasks_and_semaphores+0x8c>
		{
			xSemaphoreGive( ( Mutex_temperature ) );  // Make the MUTEX available for use, by initially "Giving" the Semaphore.
    37f6:	00 e0       	ldi	r16, 0x00	; 0
    37f8:	20 e0       	ldi	r18, 0x00	; 0
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	a9 01       	movw	r20, r18
    37fe:	60 e0       	ldi	r22, 0x00	; 0
    3800:	70 e0       	ldi	r23, 0x00	; 0
    3802:	0e 94 57 0b 	call	0x16ae	; 0x16ae <xQueueGenericSend>
		}
	}
	
		init_resources();
    3806:	0e 94 44 05 	call	0xa88	; 0xa88 <init_resources>
		HumidityTemperatureSensor_create();
    380a:	a2 df       	rcall	.-188    	; 0x3750 <HumidityTemperatureSensor_create>
		CO2Sensor_create();
    380c:	0e 94 df 02 	call	0x5be	; 0x5be <CO2Sensor_create>
		
}
    3810:	0f 91       	pop	r16
    3812:	08 95       	ret

00003814 <create_event_groups_and_queues>:

void create_event_groups_and_queues()
{
	//xMessageBuffer = xMessageBufferCreate(100); // change this if doesn't work
	
	Measure_event_group = xEventGroupCreate();
    3814:	0e 94 62 05 	call	0xac4	; 0xac4 <xEventGroupCreate>
    3818:	90 93 83 1a 	sts	0x1A83, r25	; 0x801a83 <Measure_event_group+0x1>
    381c:	80 93 82 1a 	sts	0x1A82, r24	; 0x801a82 <Measure_event_group>
	if(Measure_event_group == NULL){
    3820:	89 2b       	or	r24, r25
    3822:	21 f4       	brne	.+8      	; 0x382c <create_event_groups_and_queues+0x18>
			printf("%s\n","#ERROR - Measure_event_group was NOT created because there was insufficient FreeRTOS heap available");
    3824:	88 ef       	ldi	r24, 0xF8	; 248
    3826:	94 e0       	ldi	r25, 0x04	; 4
    3828:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <puts>
	}
	Data_event_group = xEventGroupCreate();
    382c:	0e 94 62 05 	call	0xac4	; 0xac4 <xEventGroupCreate>
    3830:	90 93 7f 1a 	sts	0x1A7F, r25	; 0x801a7f <Data_event_group+0x1>
    3834:	80 93 7e 1a 	sts	0x1A7E, r24	; 0x801a7e <Data_event_group>
	if(Data_event_group == NULL) 
    3838:	89 2b       	or	r24, r25
    383a:	21 f4       	brne	.+8      	; 0x3844 <create_event_groups_and_queues+0x30>
			printf("%s\n","#ERROR - Measure_event_group was NOT created because there was insufficient FreeRTOS heap available");
    383c:	88 ef       	ldi	r24, 0xF8	; 248
    383e:	94 e0       	ldi	r25, 0x04	; 4
    3840:	0c 94 27 2d 	jmp	0x5a4e	; 0x5a4e <puts>
    3844:	08 95       	ret

00003846 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for LEDS used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3846:	81 b1       	in	r24, 0x01	; 1
    3848:	81 68       	ori	r24, 0x81	; 129
    384a:	81 b9       	out	0x01, r24	; 1
	
	// Initialize the trace-driver to be used together with the R2R-Network
	trace_init();
    384c:	0e 94 4c 05 	call	0xa98	; 0xa98 <trace_init>
	
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    3850:	80 e0       	ldi	r24, 0x00	; 0
    3852:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <stdioCreate>
	
	// Let's create some tasks
	create_event_groups_and_queues();
    3856:	de df       	rcall	.-68     	; 0x3814 <create_event_groups_and_queues>
	create_tasks_and_semaphores();
    3858:	90 df       	rcall	.-224    	; 0x377a <create_tasks_and_semaphores>
	

	// Initialize the HAL layer and use 5 for LED driver priority
	hal_create(5);
    385a:	85 e0       	ldi	r24, 0x05	; 5
    385c:	72 d0       	rcall	.+228    	; 0x3942 <hal_create>
    385e:	60 e0       	ldi	r22, 0x00	; 0
	
	// Initialize the LoRaWAN driver with down-link buffer
	lora_driver_create(LORA_USART, NULL); 
    3860:	70 e0       	ldi	r23, 0x00	; 0
    3862:	81 e0       	ldi	r24, 0x01	; 1
    3864:	a1 d3       	rcall	.+1858   	; 0x3fa8 <lora_driver_create>
    3866:	83 e0       	ldi	r24, 0x03	; 3
	
	// Create LoRaWAN task and start it up with priority 3
	lora_send_task_create(3);
    3868:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <lora_send_task_create>
    386c:	08 95       	ret

0000386e <main>:
    386e:	eb df       	rcall	.-42     	; 0x3846 <initialiseSystem>
/*-----------------------------------------------------------*/
int main(void)
{	
	
	initialiseSystem(); 
	printf("START\n");
    3870:	8c e5       	ldi	r24, 0x5C	; 92
    3872:	95 e0       	ldi	r25, 0x05	; 5
    3874:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3878:	0e 94 71 12 	call	0x24e2	; 0x24e2 <vTaskStartScheduler>
	while (1)
	{
		printf("This bit of code shouldn't run!!");
    387c:	c2 e6       	ldi	r28, 0x62	; 98
    387e:	d5 e0       	ldi	r29, 0x05	; 5
    3880:	df 93       	push	r29
    3882:	cf 93       	push	r28
    3884:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <printf>
    3888:	0f 90       	pop	r0
    388a:	0f 90       	pop	r0
    388c:	f9 cf       	rjmp	.-14     	; 0x3880 <main+0x12>

0000388e <__fixsfsi>:
    388e:	04 d0       	rcall	.+8      	; 0x3898 <__fixunssfsi>
    3890:	68 94       	set
    3892:	b1 11       	cpse	r27, r1
    3894:	50 c0       	rjmp	.+160    	; 0x3936 <__fp_szero>
    3896:	08 95       	ret

00003898 <__fixunssfsi>:
    3898:	33 d0       	rcall	.+102    	; 0x3900 <__fp_splitA>
    389a:	88 f0       	brcs	.+34     	; 0x38be <__fixunssfsi+0x26>
    389c:	9f 57       	subi	r25, 0x7F	; 127
    389e:	90 f0       	brcs	.+36     	; 0x38c4 <__fixunssfsi+0x2c>
    38a0:	b9 2f       	mov	r27, r25
    38a2:	99 27       	eor	r25, r25
    38a4:	b7 51       	subi	r27, 0x17	; 23
    38a6:	a0 f0       	brcs	.+40     	; 0x38d0 <__fixunssfsi+0x38>
    38a8:	d1 f0       	breq	.+52     	; 0x38de <__fixunssfsi+0x46>
    38aa:	66 0f       	add	r22, r22
    38ac:	77 1f       	adc	r23, r23
    38ae:	88 1f       	adc	r24, r24
    38b0:	99 1f       	adc	r25, r25
    38b2:	1a f0       	brmi	.+6      	; 0x38ba <__fixunssfsi+0x22>
    38b4:	ba 95       	dec	r27
    38b6:	c9 f7       	brne	.-14     	; 0x38aa <__fixunssfsi+0x12>
    38b8:	12 c0       	rjmp	.+36     	; 0x38de <__fixunssfsi+0x46>
    38ba:	b1 30       	cpi	r27, 0x01	; 1
    38bc:	81 f0       	breq	.+32     	; 0x38de <__fixunssfsi+0x46>
    38be:	3a d0       	rcall	.+116    	; 0x3934 <__fp_zero>
    38c0:	b1 e0       	ldi	r27, 0x01	; 1
    38c2:	08 95       	ret
    38c4:	37 c0       	rjmp	.+110    	; 0x3934 <__fp_zero>
    38c6:	67 2f       	mov	r22, r23
    38c8:	78 2f       	mov	r23, r24
    38ca:	88 27       	eor	r24, r24
    38cc:	b8 5f       	subi	r27, 0xF8	; 248
    38ce:	39 f0       	breq	.+14     	; 0x38de <__fixunssfsi+0x46>
    38d0:	b9 3f       	cpi	r27, 0xF9	; 249
    38d2:	cc f3       	brlt	.-14     	; 0x38c6 <__fixunssfsi+0x2e>
    38d4:	86 95       	lsr	r24
    38d6:	77 95       	ror	r23
    38d8:	67 95       	ror	r22
    38da:	b3 95       	inc	r27
    38dc:	d9 f7       	brne	.-10     	; 0x38d4 <__fixunssfsi+0x3c>
    38de:	3e f4       	brtc	.+14     	; 0x38ee <__fixunssfsi+0x56>
    38e0:	90 95       	com	r25
    38e2:	80 95       	com	r24
    38e4:	70 95       	com	r23
    38e6:	61 95       	neg	r22
    38e8:	7f 4f       	sbci	r23, 0xFF	; 255
    38ea:	8f 4f       	sbci	r24, 0xFF	; 255
    38ec:	9f 4f       	sbci	r25, 0xFF	; 255
    38ee:	08 95       	ret

000038f0 <__fp_split3>:
    38f0:	57 fd       	sbrc	r21, 7
    38f2:	90 58       	subi	r25, 0x80	; 128
    38f4:	44 0f       	add	r20, r20
    38f6:	55 1f       	adc	r21, r21
    38f8:	59 f0       	breq	.+22     	; 0x3910 <__fp_splitA+0x10>
    38fa:	5f 3f       	cpi	r21, 0xFF	; 255
    38fc:	71 f0       	breq	.+28     	; 0x391a <__fp_splitA+0x1a>
    38fe:	47 95       	ror	r20

00003900 <__fp_splitA>:
    3900:	88 0f       	add	r24, r24
    3902:	97 fb       	bst	r25, 7
    3904:	99 1f       	adc	r25, r25
    3906:	61 f0       	breq	.+24     	; 0x3920 <__fp_splitA+0x20>
    3908:	9f 3f       	cpi	r25, 0xFF	; 255
    390a:	79 f0       	breq	.+30     	; 0x392a <__fp_splitA+0x2a>
    390c:	87 95       	ror	r24
    390e:	08 95       	ret
    3910:	12 16       	cp	r1, r18
    3912:	13 06       	cpc	r1, r19
    3914:	14 06       	cpc	r1, r20
    3916:	55 1f       	adc	r21, r21
    3918:	f2 cf       	rjmp	.-28     	; 0x38fe <__fp_split3+0xe>
    391a:	46 95       	lsr	r20
    391c:	f1 df       	rcall	.-30     	; 0x3900 <__fp_splitA>
    391e:	08 c0       	rjmp	.+16     	; 0x3930 <__fp_splitA+0x30>
    3920:	16 16       	cp	r1, r22
    3922:	17 06       	cpc	r1, r23
    3924:	18 06       	cpc	r1, r24
    3926:	99 1f       	adc	r25, r25
    3928:	f1 cf       	rjmp	.-30     	; 0x390c <__fp_splitA+0xc>
    392a:	86 95       	lsr	r24
    392c:	71 05       	cpc	r23, r1
    392e:	61 05       	cpc	r22, r1
    3930:	08 94       	sec
    3932:	08 95       	ret

00003934 <__fp_zero>:
    3934:	e8 94       	clt

00003936 <__fp_szero>:
    3936:	bb 27       	eor	r27, r27
    3938:	66 27       	eor	r22, r22
    393a:	77 27       	eor	r23, r23
    393c:	cb 01       	movw	r24, r22
    393e:	97 f9       	bld	r25, 7
    3940:	08 95       	ret

00003942 <hal_create>:
    3942:	ed ea       	ldi	r30, 0xAD	; 173
    3944:	fa e1       	ldi	r31, 0x1A	; 26
    3946:	29 e2       	ldi	r18, 0x29	; 41
    3948:	33 e2       	ldi	r19, 0x23	; 35
    394a:	31 83       	std	Z+1, r19	; 0x01
    394c:	20 83       	st	Z, r18
    394e:	2c e2       	ldi	r18, 0x2C	; 44
    3950:	33 e2       	ldi	r19, 0x23	; 35
    3952:	33 83       	std	Z+3, r19	; 0x03
    3954:	22 83       	std	Z+2, r18	; 0x02
    3956:	27 e3       	ldi	r18, 0x37	; 55
    3958:	33 e2       	ldi	r19, 0x23	; 35
    395a:	35 83       	std	Z+5, r19	; 0x05
    395c:	24 83       	std	Z+4, r18	; 0x04
    395e:	2b e3       	ldi	r18, 0x3B	; 59
    3960:	33 e2       	ldi	r19, 0x23	; 35
    3962:	37 83       	std	Z+7, r19	; 0x07
    3964:	26 83       	std	Z+6, r18	; 0x06
    3966:	21 e4       	ldi	r18, 0x41	; 65
    3968:	33 e2       	ldi	r19, 0x23	; 35
    396a:	31 87       	std	Z+9, r19	; 0x09
    396c:	20 87       	std	Z+8, r18	; 0x08
    396e:	2d e4       	ldi	r18, 0x4D	; 77
    3970:	33 e2       	ldi	r19, 0x23	; 35
    3972:	33 87       	std	Z+11, r19	; 0x0b
    3974:	22 87       	std	Z+10, r18	; 0x0a
    3976:	22 e5       	ldi	r18, 0x52	; 82
    3978:	33 e2       	ldi	r19, 0x23	; 35
    397a:	35 87       	std	Z+13, r19	; 0x0d
    397c:	24 87       	std	Z+12, r18	; 0x0c
    397e:	2e e5       	ldi	r18, 0x5E	; 94
    3980:	33 e2       	ldi	r19, 0x23	; 35
    3982:	37 87       	std	Z+15, r19	; 0x0f
    3984:	26 87       	std	Z+14, r18	; 0x0e
    3986:	2e e3       	ldi	r18, 0x3E	; 62
    3988:	33 e2       	ldi	r19, 0x23	; 35
    398a:	31 8b       	std	Z+17, r19	; 0x11
    398c:	20 8b       	std	Z+16, r18	; 0x10
    398e:	23 e6       	ldi	r18, 0x63	; 99
    3990:	33 e2       	ldi	r19, 0x23	; 35
    3992:	33 8b       	std	Z+19, r19	; 0x13
    3994:	22 8b       	std	Z+18, r18	; 0x12
    3996:	20 e7       	ldi	r18, 0x70	; 112
    3998:	33 e2       	ldi	r19, 0x23	; 35
    399a:	35 8b       	std	Z+21, r19	; 0x15
    399c:	24 8b       	std	Z+20, r18	; 0x14
    399e:	68 2f       	mov	r22, r24
    39a0:	cf 01       	movw	r24, r30
    39a2:	3a c1       	rjmp	.+628    	; 0x3c18 <led_create>
    39a4:	08 95       	ret

000039a6 <_hihTwiCallback>:
    39a6:	65 30       	cpi	r22, 0x05	; 5
    39a8:	f1 f4       	brne	.+60     	; 0x39e6 <_hihTwiCallback+0x40>
    39aa:	fa 01       	movw	r30, r20
    39ac:	80 81       	ld	r24, Z
    39ae:	8f 73       	andi	r24, 0x3F	; 63
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	98 2f       	mov	r25, r24
    39b4:	88 27       	eor	r24, r24
    39b6:	21 81       	ldd	r18, Z+1	; 0x01
    39b8:	82 2b       	or	r24, r18
    39ba:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    39be:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    39c2:	82 81       	ldd	r24, Z+2	; 0x02
    39c4:	f0 e4       	ldi	r31, 0x40	; 64
    39c6:	8f 9f       	mul	r24, r31
    39c8:	c0 01       	movw	r24, r0
    39ca:	11 24       	eor	r1, r1
    39cc:	fa 01       	movw	r30, r20
    39ce:	23 81       	ldd	r18, Z+3	; 0x03
    39d0:	26 95       	lsr	r18
    39d2:	26 95       	lsr	r18
    39d4:	82 2b       	or	r24, r18
    39d6:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    39da:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	80 93 20 19 	sts	0x1920, r24	; 0x801920 <_measuringIsReady>
    39e4:	08 95       	ret
    39e6:	64 30       	cpi	r22, 0x04	; 4
    39e8:	51 f0       	breq	.+20     	; 0x39fe <_hihTwiCallback+0x58>
    39ea:	80 e0       	ldi	r24, 0x00	; 0
    39ec:	90 e4       	ldi	r25, 0x40	; 64
    39ee:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    39f2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    39f6:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    39fa:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    39fe:	08 95       	ret

00003a00 <hih8120Create>:
    3a00:	0f 93       	push	r16
    3a02:	1f 93       	push	r17
    3a04:	03 ed       	ldi	r16, 0xD3	; 211
    3a06:	1c e1       	ldi	r17, 0x1C	; 28
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	34 e2       	ldi	r19, 0x24	; 36
    3a0c:	44 ef       	ldi	r20, 0xF4	; 244
    3a0e:	50 e0       	ldi	r21, 0x00	; 0
    3a10:	60 e0       	ldi	r22, 0x00	; 0
    3a12:	87 e2       	ldi	r24, 0x27	; 39
    3a14:	0e 94 06 28 	call	0x500c	; 0x500c <twiCreate>
    3a18:	90 93 22 19 	sts	0x1922, r25	; 0x801922 <_hih8120Handler+0x1>
    3a1c:	80 93 21 19 	sts	0x1921, r24	; 0x801921 <_hih8120Handler>
    3a20:	21 e0       	ldi	r18, 0x01	; 1
    3a22:	89 2b       	or	r24, r25
    3a24:	09 f0       	breq	.+2      	; 0x3a28 <hih8120Create+0x28>
    3a26:	20 e0       	ldi	r18, 0x00	; 0
    3a28:	82 2f       	mov	r24, r18
    3a2a:	1f 91       	pop	r17
    3a2c:	0f 91       	pop	r16
    3a2e:	08 95       	ret

00003a30 <hih8120Wakeup>:
    3a30:	80 91 21 19 	lds	r24, 0x1921	; 0x801921 <_hih8120Handler>
    3a34:	90 91 22 19 	lds	r25, 0x1922	; 0x801922 <_hih8120Handler+0x1>
    3a38:	00 97       	sbiw	r24, 0x00	; 0
    3a3a:	59 f0       	breq	.+22     	; 0x3a52 <hih8120Wakeup+0x22>
    3a3c:	40 e0       	ldi	r20, 0x00	; 0
    3a3e:	60 e0       	ldi	r22, 0x00	; 0
    3a40:	70 e0       	ldi	r23, 0x00	; 0
    3a42:	0e 94 57 28 	call	0x50ae	; 0x50ae <twiTransmit>
    3a46:	84 30       	cpi	r24, 0x04	; 4
    3a48:	31 f4       	brne	.+12     	; 0x3a56 <hih8120Wakeup+0x26>
    3a4a:	10 92 20 19 	sts	0x1920, r1	; 0x801920 <_measuringIsReady>
    3a4e:	80 e0       	ldi	r24, 0x00	; 0
    3a50:	08 95       	ret
    3a52:	82 e0       	ldi	r24, 0x02	; 2
    3a54:	08 95       	ret
    3a56:	83 e0       	ldi	r24, 0x03	; 3
    3a58:	08 95       	ret

00003a5a <hih8120Meassure>:
    3a5a:	80 91 21 19 	lds	r24, 0x1921	; 0x801921 <_hih8120Handler>
    3a5e:	90 91 22 19 	lds	r25, 0x1922	; 0x801922 <_hih8120Handler+0x1>
    3a62:	00 97       	sbiw	r24, 0x00	; 0
    3a64:	39 f0       	breq	.+14     	; 0x3a74 <hih8120Meassure+0x1a>
    3a66:	64 e0       	ldi	r22, 0x04	; 4
    3a68:	0e 94 a3 28 	call	0x5146	; 0x5146 <twiReceive>
    3a6c:	85 30       	cpi	r24, 0x05	; 5
    3a6e:	21 f0       	breq	.+8      	; 0x3a78 <hih8120Meassure+0x1e>
    3a70:	83 e0       	ldi	r24, 0x03	; 3
    3a72:	08 95       	ret
    3a74:	82 e0       	ldi	r24, 0x02	; 2
    3a76:	08 95       	ret
    3a78:	80 e0       	ldi	r24, 0x00	; 0
    3a7a:	08 95       	ret

00003a7c <hih8120GetHumidity>:
    3a7c:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    3a80:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    3a84:	80 e0       	ldi	r24, 0x00	; 0
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	0e 94 81 2a 	call	0x5502	; 0x5502 <__floatunsisf>
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	48 ec       	ldi	r20, 0xC8	; 200
    3a92:	52 e4       	ldi	r21, 0x42	; 66
    3a94:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__mulsf3>
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	38 ef       	ldi	r19, 0xF8	; 248
    3a9c:	4f e7       	ldi	r20, 0x7F	; 127
    3a9e:	56 e4       	ldi	r21, 0x46	; 70
    3aa0:	0c 94 16 2a 	jmp	0x542c	; 0x542c <__divsf3>
    3aa4:	08 95       	ret

00003aa6 <hih8120GetTemperature>:
    3aa6:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    3aaa:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	0e 94 81 2a 	call	0x5502	; 0x5502 <__floatunsisf>
    3ab6:	20 e0       	ldi	r18, 0x00	; 0
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	45 e2       	ldi	r20, 0x25	; 37
    3abc:	53 e4       	ldi	r21, 0x43	; 67
    3abe:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__mulsf3>
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	38 ef       	ldi	r19, 0xF8	; 248
    3ac6:	4f e7       	ldi	r20, 0x7F	; 127
    3ac8:	56 e4       	ldi	r21, 0x46	; 70
    3aca:	0e 94 16 2a 	call	0x542c	; 0x542c <__divsf3>
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	40 e2       	ldi	r20, 0x20	; 32
    3ad4:	52 e4       	ldi	r21, 0x42	; 66
    3ad6:	0c 94 af 29 	jmp	0x535e	; 0x535e <__subsf3>
    3ada:	08 95       	ret

00003adc <_turn_off>:
    3adc:	cf 93       	push	r28
    3ade:	df 93       	push	r29
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	fc 01       	movw	r30, r24
    3ae4:	ee 0f       	add	r30, r30
    3ae6:	ff 1f       	adc	r31, r31
    3ae8:	e8 0f       	add	r30, r24
    3aea:	f9 1f       	adc	r31, r25
    3aec:	ee 0f       	add	r30, r30
    3aee:	ff 1f       	adc	r31, r31
    3af0:	ed 5d       	subi	r30, 0xDD	; 221
    3af2:	f6 4e       	sbci	r31, 0xE6	; 230
    3af4:	23 81       	ldd	r18, Z+3	; 0x03
    3af6:	21 11       	cpse	r18, r1
    3af8:	0a c0       	rjmp	.+20     	; 0x3b0e <_turn_off+0x32>
    3afa:	ef 01       	movw	r28, r30
    3afc:	e0 91 b5 1a 	lds	r30, 0x1AB5	; 0x801ab5 <register_access+0x8>
    3b00:	f0 91 b6 1a 	lds	r31, 0x1AB6	; 0x801ab6 <register_access+0x9>
    3b04:	6a 81       	ldd	r22, Y+2	; 0x02
    3b06:	88 81       	ld	r24, Y
    3b08:	99 81       	ldd	r25, Y+1	; 0x01
    3b0a:	19 95       	eicall
    3b0c:	12 c0       	rjmp	.+36     	; 0x3b32 <_turn_off+0x56>
    3b0e:	dc 01       	movw	r26, r24
    3b10:	aa 0f       	add	r26, r26
    3b12:	bb 1f       	adc	r27, r27
    3b14:	ed 01       	movw	r28, r26
    3b16:	c8 0f       	add	r28, r24
    3b18:	d9 1f       	adc	r29, r25
    3b1a:	cc 0f       	add	r28, r28
    3b1c:	dd 1f       	adc	r29, r29
    3b1e:	cd 5d       	subi	r28, 0xDD	; 221
    3b20:	d6 4e       	sbci	r29, 0xE6	; 230
    3b22:	e0 91 bf 1a 	lds	r30, 0x1ABF	; 0x801abf <register_access+0x12>
    3b26:	f0 91 c0 1a 	lds	r31, 0x1AC0	; 0x801ac0 <register_access+0x13>
    3b2a:	6a 81       	ldd	r22, Y+2	; 0x02
    3b2c:	88 81       	ld	r24, Y
    3b2e:	99 81       	ldd	r25, Y+1	; 0x01
    3b30:	19 95       	eicall
    3b32:	df 91       	pop	r29
    3b34:	cf 91       	pop	r28
    3b36:	08 95       	ret

00003b38 <_turn_on>:
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	fc 01       	movw	r30, r24
    3b40:	ee 0f       	add	r30, r30
    3b42:	ff 1f       	adc	r31, r31
    3b44:	e8 0f       	add	r30, r24
    3b46:	f9 1f       	adc	r31, r25
    3b48:	ee 0f       	add	r30, r30
    3b4a:	ff 1f       	adc	r31, r31
    3b4c:	ed 5d       	subi	r30, 0xDD	; 221
    3b4e:	f6 4e       	sbci	r31, 0xE6	; 230
    3b50:	23 81       	ldd	r18, Z+3	; 0x03
    3b52:	21 11       	cpse	r18, r1
    3b54:	0a c0       	rjmp	.+20     	; 0x3b6a <_turn_on+0x32>
    3b56:	ef 01       	movw	r28, r30
    3b58:	e0 91 bf 1a 	lds	r30, 0x1ABF	; 0x801abf <register_access+0x12>
    3b5c:	f0 91 c0 1a 	lds	r31, 0x1AC0	; 0x801ac0 <register_access+0x13>
    3b60:	6a 81       	ldd	r22, Y+2	; 0x02
    3b62:	88 81       	ld	r24, Y
    3b64:	99 81       	ldd	r25, Y+1	; 0x01
    3b66:	19 95       	eicall
    3b68:	12 c0       	rjmp	.+36     	; 0x3b8e <_turn_on+0x56>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	aa 0f       	add	r26, r26
    3b6e:	bb 1f       	adc	r27, r27
    3b70:	ed 01       	movw	r28, r26
    3b72:	c8 0f       	add	r28, r24
    3b74:	d9 1f       	adc	r29, r25
    3b76:	cc 0f       	add	r28, r28
    3b78:	dd 1f       	adc	r29, r29
    3b7a:	cd 5d       	subi	r28, 0xDD	; 221
    3b7c:	d6 4e       	sbci	r29, 0xE6	; 230
    3b7e:	e0 91 b5 1a 	lds	r30, 0x1AB5	; 0x801ab5 <register_access+0x8>
    3b82:	f0 91 b6 1a 	lds	r31, 0x1AB6	; 0x801ab6 <register_access+0x9>
    3b86:	6a 81       	ldd	r22, Y+2	; 0x02
    3b88:	88 81       	ld	r24, Y
    3b8a:	99 81       	ldd	r25, Y+1	; 0x01
    3b8c:	19 95       	eicall
    3b8e:	df 91       	pop	r29
    3b90:	cf 91       	pop	r28
    3b92:	08 95       	ret

00003b94 <_hal_led_task>:
    3b94:	0f 2e       	mov	r0, r31
    3b96:	fd ea       	ldi	r31, 0xAD	; 173
    3b98:	cf 2e       	mov	r12, r31
    3b9a:	fa e1       	ldi	r31, 0x1A	; 26
    3b9c:	df 2e       	mov	r13, r31
    3b9e:	f0 2d       	mov	r31, r0
    3ba0:	04 e0       	ldi	r16, 0x04	; 4
    3ba2:	c3 e2       	ldi	r28, 0x23	; 35
    3ba4:	d9 e1       	ldi	r29, 0x19	; 25
    3ba6:	10 e0       	ldi	r17, 0x00	; 0
    3ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    3baa:	81 30       	cpi	r24, 0x01	; 1
    3bac:	69 f0       	breq	.+26     	; 0x3bc8 <_hal_led_task+0x34>
    3bae:	e8 f0       	brcs	.+58     	; 0x3bea <_hal_led_task+0x56>
    3bb0:	82 30       	cpi	r24, 0x02	; 2
    3bb2:	39 f5       	brne	.+78     	; 0x3c02 <_hal_led_task+0x6e>
    3bb4:	d6 01       	movw	r26, r12
    3bb6:	1c 96       	adiw	r26, 0x0c	; 12
    3bb8:	ed 91       	ld	r30, X+
    3bba:	fc 91       	ld	r31, X
    3bbc:	1d 97       	sbiw	r26, 0x0d	; 13
    3bbe:	6a 81       	ldd	r22, Y+2	; 0x02
    3bc0:	88 81       	ld	r24, Y
    3bc2:	99 81       	ldd	r25, Y+1	; 0x01
    3bc4:	19 95       	eicall
    3bc6:	1d c0       	rjmp	.+58     	; 0x3c02 <_hal_led_task+0x6e>
    3bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bca:	8f 5f       	subi	r24, 0xFF	; 255
    3bcc:	8a 30       	cpi	r24, 0x0A	; 10
    3bce:	10 f4       	brcc	.+4      	; 0x3bd4 <_hal_led_task+0x40>
    3bd0:	8d 83       	std	Y+5, r24	; 0x05
    3bd2:	17 c0       	rjmp	.+46     	; 0x3c02 <_hal_led_task+0x6e>
    3bd4:	1d 82       	std	Y+5, r1	; 0x05
    3bd6:	d6 01       	movw	r26, r12
    3bd8:	1c 96       	adiw	r26, 0x0c	; 12
    3bda:	ed 91       	ld	r30, X+
    3bdc:	fc 91       	ld	r31, X
    3bde:	1d 97       	sbiw	r26, 0x0d	; 13
    3be0:	6a 81       	ldd	r22, Y+2	; 0x02
    3be2:	88 81       	ld	r24, Y
    3be4:	99 81       	ldd	r25, Y+1	; 0x01
    3be6:	19 95       	eicall
    3be8:	0c c0       	rjmp	.+24     	; 0x3c02 <_hal_led_task+0x6e>
    3bea:	8d 81       	ldd	r24, Y+5	; 0x05
    3bec:	88 23       	and	r24, r24
    3bee:	31 f0       	breq	.+12     	; 0x3bfc <_hal_led_task+0x68>
    3bf0:	81 2f       	mov	r24, r17
    3bf2:	a2 df       	rcall	.-188    	; 0x3b38 <_turn_on>
    3bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf6:	81 50       	subi	r24, 0x01	; 1
    3bf8:	8d 83       	std	Y+5, r24	; 0x05
    3bfa:	03 c0       	rjmp	.+6      	; 0x3c02 <_hal_led_task+0x6e>
    3bfc:	0c 83       	std	Y+4, r16	; 0x04
    3bfe:	81 2f       	mov	r24, r17
    3c00:	6d df       	rcall	.-294    	; 0x3adc <_turn_off>
    3c02:	1f 5f       	subi	r17, 0xFF	; 255
    3c04:	26 96       	adiw	r28, 0x06	; 6
    3c06:	14 30       	cpi	r17, 0x04	; 4
    3c08:	79 f6       	brne	.-98     	; 0x3ba8 <_hal_led_task+0x14>
    3c0a:	65 e0       	ldi	r22, 0x05	; 5
    3c0c:	70 e0       	ldi	r23, 0x00	; 0
    3c0e:	80 e0       	ldi	r24, 0x00	; 0
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	0e 94 70 14 	call	0x28e0	; 0x28e0 <vTaskDelay>
    3c16:	c5 cf       	rjmp	.-118    	; 0x3ba2 <_hal_led_task+0xe>

00003c18 <led_create>:
    3c18:	cf 92       	push	r12
    3c1a:	df 92       	push	r13
    3c1c:	ef 92       	push	r14
    3c1e:	ff 92       	push	r15
    3c20:	0f 93       	push	r16
    3c22:	1f 93       	push	r17
    3c24:	cf 93       	push	r28
    3c26:	df 93       	push	r29
    3c28:	06 2f       	mov	r16, r22
    3c2a:	0f 2e       	mov	r0, r31
    3c2c:	fd ea       	ldi	r31, 0xAD	; 173
    3c2e:	ef 2e       	mov	r14, r31
    3c30:	fa e1       	ldi	r31, 0x1A	; 26
    3c32:	ff 2e       	mov	r15, r31
    3c34:	f0 2d       	mov	r31, r0
    3c36:	d7 01       	movw	r26, r14
    3c38:	18 96       	adiw	r26, 0x08	; 8
    3c3a:	ed 91       	ld	r30, X+
    3c3c:	fc 91       	ld	r31, X
    3c3e:	19 97       	sbiw	r26, 0x09	; 9
    3c40:	66 e0       	ldi	r22, 0x06	; 6
    3c42:	87 e2       	ldi	r24, 0x27	; 39
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	19 95       	eicall
    3c48:	c3 e2       	ldi	r28, 0x23	; 35
    3c4a:	d9 e1       	ldi	r29, 0x19	; 25
    3c4c:	0f 2e       	mov	r0, r31
    3c4e:	f8 e2       	ldi	r31, 0x28	; 40
    3c50:	cf 2e       	mov	r12, r31
    3c52:	d1 2c       	mov	r13, r1
    3c54:	f0 2d       	mov	r31, r0
    3c56:	d9 82       	std	Y+1, r13	; 0x01
    3c58:	c8 82       	st	Y, r12
    3c5a:	86 e0       	ldi	r24, 0x06	; 6
    3c5c:	8a 83       	std	Y+2, r24	; 0x02
    3c5e:	1b 82       	std	Y+3, r1	; 0x03
    3c60:	14 e0       	ldi	r17, 0x04	; 4
    3c62:	1c 83       	std	Y+4, r17	; 0x04
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	3a df       	rcall	.-396    	; 0x3adc <_turn_off>
    3c68:	d7 01       	movw	r26, r14
    3c6a:	18 96       	adiw	r26, 0x08	; 8
    3c6c:	ed 91       	ld	r30, X+
    3c6e:	fc 91       	ld	r31, X
    3c70:	19 97       	sbiw	r26, 0x09	; 9
    3c72:	67 e0       	ldi	r22, 0x07	; 7
    3c74:	87 e2       	ldi	r24, 0x27	; 39
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	19 95       	eicall
    3c7a:	df 82       	std	Y+7, r13	; 0x07
    3c7c:	ce 82       	std	Y+6, r12	; 0x06
    3c7e:	87 e0       	ldi	r24, 0x07	; 7
    3c80:	88 87       	std	Y+8, r24	; 0x08
    3c82:	19 86       	std	Y+9, r1	; 0x09
    3c84:	1a 87       	std	Y+10, r17	; 0x0a
    3c86:	81 e0       	ldi	r24, 0x01	; 1
    3c88:	29 df       	rcall	.-430    	; 0x3adc <_turn_off>
    3c8a:	d7 01       	movw	r26, r14
    3c8c:	18 96       	adiw	r26, 0x08	; 8
    3c8e:	ed 91       	ld	r30, X+
    3c90:	fc 91       	ld	r31, X
    3c92:	19 97       	sbiw	r26, 0x09	; 9
    3c94:	65 e0       	ldi	r22, 0x05	; 5
    3c96:	83 e3       	ldi	r24, 0x33	; 51
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	19 95       	eicall
    3c9c:	d7 01       	movw	r26, r14
    3c9e:	18 96       	adiw	r26, 0x08	; 8
    3ca0:	ed 91       	ld	r30, X+
    3ca2:	fc 91       	ld	r31, X
    3ca4:	19 97       	sbiw	r26, 0x09	; 9
    3ca6:	61 e0       	ldi	r22, 0x01	; 1
    3ca8:	84 e3       	ldi	r24, 0x34	; 52
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	19 95       	eicall
    3cae:	84 e3       	ldi	r24, 0x34	; 52
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	9d 87       	std	Y+13, r25	; 0x0d
    3cb4:	8c 87       	std	Y+12, r24	; 0x0c
    3cb6:	85 e0       	ldi	r24, 0x05	; 5
    3cb8:	8e 87       	std	Y+14, r24	; 0x0e
    3cba:	1f 86       	std	Y+15, r1	; 0x0f
    3cbc:	18 8b       	std	Y+16, r17	; 0x10
    3cbe:	82 e0       	ldi	r24, 0x02	; 2
    3cc0:	0d df       	rcall	.-486    	; 0x3adc <_turn_off>
    3cc2:	d7 01       	movw	r26, r14
    3cc4:	18 96       	adiw	r26, 0x08	; 8
    3cc6:	ed 91       	ld	r30, X+
    3cc8:	fc 91       	ld	r31, X
    3cca:	19 97       	sbiw	r26, 0x09	; 9
    3ccc:	64 e0       	ldi	r22, 0x04	; 4
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	91 e0       	ldi	r25, 0x01	; 1
    3cd2:	19 95       	eicall
    3cd4:	d7 01       	movw	r26, r14
    3cd6:	18 96       	adiw	r26, 0x08	; 8
    3cd8:	ed 91       	ld	r30, X+
    3cda:	fc 91       	ld	r31, X
    3cdc:	19 97       	sbiw	r26, 0x09	; 9
    3cde:	61 e0       	ldi	r22, 0x01	; 1
    3ce0:	82 e0       	ldi	r24, 0x02	; 2
    3ce2:	91 e0       	ldi	r25, 0x01	; 1
    3ce4:	19 95       	eicall
    3ce6:	82 e0       	ldi	r24, 0x02	; 2
    3ce8:	91 e0       	ldi	r25, 0x01	; 1
    3cea:	9b 8b       	std	Y+19, r25	; 0x13
    3cec:	8a 8b       	std	Y+18, r24	; 0x12
    3cee:	1c 8b       	std	Y+20, r17	; 0x14
    3cf0:	1d 8a       	std	Y+21, r1	; 0x15
    3cf2:	1e 8b       	std	Y+22, r17	; 0x16
    3cf4:	83 e0       	ldi	r24, 0x03	; 3
    3cf6:	f2 de       	rcall	.-540    	; 0x3adc <_turn_off>
    3cf8:	e1 2c       	mov	r14, r1
    3cfa:	f1 2c       	mov	r15, r1
    3cfc:	20 e0       	ldi	r18, 0x00	; 0
    3cfe:	30 e0       	ldi	r19, 0x00	; 0
    3d00:	40 ec       	ldi	r20, 0xC0	; 192
    3d02:	50 e0       	ldi	r21, 0x00	; 0
    3d04:	63 e8       	ldi	r22, 0x83	; 131
    3d06:	75 e0       	ldi	r23, 0x05	; 5
    3d08:	8a ec       	ldi	r24, 0xCA	; 202
    3d0a:	9d e1       	ldi	r25, 0x1D	; 29
    3d0c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <xTaskCreate>
    3d10:	df 91       	pop	r29
    3d12:	cf 91       	pop	r28
    3d14:	1f 91       	pop	r17
    3d16:	0f 91       	pop	r16
    3d18:	ff 90       	pop	r15
    3d1a:	ef 90       	pop	r14
    3d1c:	df 90       	pop	r13
    3d1e:	cf 90       	pop	r12
    3d20:	08 95       	ret

00003d22 <led_long_puls>:
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	fc 01       	movw	r30, r24
    3d26:	ee 0f       	add	r30, r30
    3d28:	ff 1f       	adc	r31, r31
    3d2a:	df 01       	movw	r26, r30
    3d2c:	a8 0f       	add	r26, r24
    3d2e:	b9 1f       	adc	r27, r25
    3d30:	aa 0f       	add	r26, r26
    3d32:	bb 1f       	adc	r27, r27
    3d34:	ad 5d       	subi	r26, 0xDD	; 221
    3d36:	b6 4e       	sbci	r27, 0xE6	; 230
    3d38:	24 e0       	ldi	r18, 0x04	; 4
    3d3a:	15 96       	adiw	r26, 0x05	; 5
    3d3c:	2c 93       	st	X, r18
    3d3e:	15 97       	sbiw	r26, 0x05	; 5
    3d40:	fd 01       	movw	r30, r26
    3d42:	14 82       	std	Z+4, r1	; 0x04
    3d44:	08 95       	ret

00003d46 <led_short_puls>:
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	fc 01       	movw	r30, r24
    3d4a:	ee 0f       	add	r30, r30
    3d4c:	ff 1f       	adc	r31, r31
    3d4e:	df 01       	movw	r26, r30
    3d50:	a8 0f       	add	r26, r24
    3d52:	b9 1f       	adc	r27, r25
    3d54:	aa 0f       	add	r26, r26
    3d56:	bb 1f       	adc	r27, r27
    3d58:	ad 5d       	subi	r26, 0xDD	; 221
    3d5a:	b6 4e       	sbci	r27, 0xE6	; 230
    3d5c:	21 e0       	ldi	r18, 0x01	; 1
    3d5e:	15 96       	adiw	r26, 0x05	; 5
    3d60:	2c 93       	st	X, r18
    3d62:	15 97       	sbiw	r26, 0x05	; 5
    3d64:	fd 01       	movw	r30, r26
    3d66:	14 82       	std	Z+4, r1	; 0x04
    3d68:	08 95       	ret

00003d6a <_serial_call_back>:
    3d6a:	0f 93       	push	r16
    3d6c:	1f 93       	push	r17
    3d6e:	cf 93       	push	r28
    3d70:	df 93       	push	r29
    3d72:	1f 92       	push	r1
    3d74:	1f 92       	push	r1
    3d76:	cd b7       	in	r28, 0x3d	; 61
    3d78:	de b7       	in	r29, 0x3e	; 62
    3d7a:	8c 01       	movw	r16, r24
    3d7c:	19 82       	std	Y+1, r1	; 0x01
    3d7e:	2d c0       	rjmp	.+90     	; 0x3dda <_serial_call_back+0x70>
    3d80:	e0 91 9f 19 	lds	r30, 0x199F	; 0x80199f <rec_buf_inp.2947>
    3d84:	ec 32       	cpi	r30, 0x2C	; 44
    3d86:	50 f4       	brcc	.+20     	; 0x3d9c <_serial_call_back+0x32>
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	8e 0f       	add	r24, r30
    3d8c:	80 93 9f 19 	sts	0x199F, r24	; 0x80199f <rec_buf_inp.2947>
    3d90:	f0 e0       	ldi	r31, 0x00	; 0
    3d92:	ef 52       	subi	r30, 0x2F	; 47
    3d94:	f6 4e       	sbci	r31, 0xE6	; 230
    3d96:	8a 81       	ldd	r24, Y+2	; 0x02
    3d98:	80 83       	st	Z, r24
    3d9a:	02 c0       	rjmp	.+4      	; 0x3da0 <_serial_call_back+0x36>
    3d9c:	10 92 9f 19 	sts	0x199F, r1	; 0x80199f <rec_buf_inp.2947>
    3da0:	8a 81       	ldd	r24, Y+2	; 0x02
    3da2:	8a 30       	cpi	r24, 0x0A	; 10
    3da4:	d1 f4       	brne	.+52     	; 0x3dda <_serial_call_back+0x70>
    3da6:	40 91 9f 19 	lds	r20, 0x199F	; 0x80199f <rec_buf_inp.2947>
    3daa:	50 e0       	ldi	r21, 0x00	; 0
    3dac:	fa 01       	movw	r30, r20
    3dae:	e1 53       	subi	r30, 0x31	; 49
    3db0:	f6 4e       	sbci	r31, 0xE6	; 230
    3db2:	10 82       	st	Z, r1
    3db4:	41 50       	subi	r20, 0x01	; 1
    3db6:	51 09       	sbc	r21, r1
    3db8:	9e 01       	movw	r18, r28
    3dba:	2f 5f       	subi	r18, 0xFF	; 255
    3dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    3dbe:	61 ed       	ldi	r22, 0xD1	; 209
    3dc0:	79 e1       	ldi	r23, 0x19	; 25
    3dc2:	80 91 a2 19 	lds	r24, 0x19A2	; 0x8019a2 <_serial_reply_buffer_handle>
    3dc6:	90 91 a3 19 	lds	r25, 0x19A3	; 0x8019a3 <_serial_reply_buffer_handle+0x1>
    3dca:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <xStreamBufferSendFromISR>
    3dce:	89 81       	ldd	r24, Y+1	; 0x01
    3dd0:	81 11       	cpse	r24, r1
    3dd2:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
    3dd6:	10 92 9f 19 	sts	0x199F, r1	; 0x80199f <rec_buf_inp.2947>
    3dda:	be 01       	movw	r22, r28
    3ddc:	6e 5f       	subi	r22, 0xFE	; 254
    3dde:	7f 4f       	sbci	r23, 0xFF	; 255
    3de0:	c8 01       	movw	r24, r16
    3de2:	48 d6       	rcall	.+3216   	; 0x4a74 <serial_get_byte>
    3de4:	88 23       	and	r24, r24
    3de6:	61 f2       	breq	.-104    	; 0x3d80 <_serial_call_back+0x16>
    3de8:	0f 90       	pop	r0
    3dea:	0f 90       	pop	r0
    3dec:	df 91       	pop	r29
    3dee:	cf 91       	pop	r28
    3df0:	1f 91       	pop	r17
    3df2:	0f 91       	pop	r16
    3df4:	08 95       	ret

00003df6 <_upload_message>:
    3df6:	0f 93       	push	r16
    3df8:	1f 93       	push	r17
    3dfa:	cf 93       	push	r28
    3dfc:	df 93       	push	r29
    3dfe:	8c 01       	movw	r16, r24
    3e00:	eb 01       	movw	r28, r22
    3e02:	80 91 a2 19 	lds	r24, 0x19A2	; 0x8019a2 <_serial_reply_buffer_handle>
    3e06:	90 91 a3 19 	lds	r25, 0x19A3	; 0x8019a3 <_serial_reply_buffer_handle+0x1>
    3e0a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <xStreamBufferReset>
    3e0e:	b8 01       	movw	r22, r16
    3e10:	8b e3       	ldi	r24, 0x3B	; 59
    3e12:	99 e1       	ldi	r25, 0x19	; 25
    3e14:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <strcpy>
    3e18:	20 97       	sbiw	r28, 0x00	; 0
    3e1a:	79 f0       	breq	.+30     	; 0x3e3a <_upload_message+0x44>
    3e1c:	eb e3       	ldi	r30, 0x3B	; 59
    3e1e:	f9 e1       	ldi	r31, 0x19	; 25
    3e20:	01 90       	ld	r0, Z+
    3e22:	00 20       	and	r0, r0
    3e24:	e9 f7       	brne	.-6      	; 0x3e20 <_upload_message+0x2a>
    3e26:	31 97       	sbiw	r30, 0x01	; 1
    3e28:	80 e2       	ldi	r24, 0x20	; 32
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	91 83       	std	Z+1, r25	; 0x01
    3e2e:	80 83       	st	Z, r24
    3e30:	be 01       	movw	r22, r28
    3e32:	8b e3       	ldi	r24, 0x3B	; 59
    3e34:	99 e1       	ldi	r25, 0x19	; 25
    3e36:	0e 94 ea 2c 	call	0x59d4	; 0x59d4 <strcat>
    3e3a:	eb e3       	ldi	r30, 0x3B	; 59
    3e3c:	f9 e1       	ldi	r31, 0x19	; 25
    3e3e:	df 01       	movw	r26, r30
    3e40:	0d 90       	ld	r0, X+
    3e42:	00 20       	and	r0, r0
    3e44:	e9 f7       	brne	.-6      	; 0x3e40 <_upload_message+0x4a>
    3e46:	11 97       	sbiw	r26, 0x01	; 1
    3e48:	8d e0       	ldi	r24, 0x0D	; 13
    3e4a:	9a e0       	ldi	r25, 0x0A	; 10
    3e4c:	11 96       	adiw	r26, 0x01	; 1
    3e4e:	9c 93       	st	X, r25
    3e50:	8e 93       	st	-X, r24
    3e52:	12 96       	adiw	r26, 0x02	; 2
    3e54:	1c 92       	st	X, r1
    3e56:	01 90       	ld	r0, Z+
    3e58:	00 20       	and	r0, r0
    3e5a:	e9 f7       	brne	.-6      	; 0x3e56 <_upload_message+0x60>
    3e5c:	31 97       	sbiw	r30, 0x01	; 1
    3e5e:	eb 53       	subi	r30, 0x3B	; 59
    3e60:	f9 41       	sbci	r31, 0x19	; 25
    3e62:	ae 2f       	mov	r26, r30
    3e64:	8b e3       	ldi	r24, 0x3B	; 59
    3e66:	99 e1       	ldi	r25, 0x19	; 25
    3e68:	ac 01       	movw	r20, r24
    3e6a:	6a 2f       	mov	r22, r26
    3e6c:	80 91 a4 19 	lds	r24, 0x19A4	; 0x8019a4 <_rn2483_serial>
    3e70:	90 91 a5 19 	lds	r25, 0x19A5	; 0x8019a5 <_rn2483_serial+0x1>
    3e74:	af d5       	rcall	.+2910   	; 0x49d4 <serial_send_bytes>
    3e76:	81 11       	cpse	r24, r1
    3e78:	11 c0       	rjmp	.+34     	; 0x3e9c <_upload_message+0xa6>
    3e7a:	08 e2       	ldi	r16, 0x28	; 40
    3e7c:	15 e0       	ldi	r17, 0x05	; 5
    3e7e:	20 e0       	ldi	r18, 0x00	; 0
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	4d e2       	ldi	r20, 0x2D	; 45
    3e84:	50 e0       	ldi	r21, 0x00	; 0
    3e86:	6b e2       	ldi	r22, 0x2B	; 43
    3e88:	7a e1       	ldi	r23, 0x1A	; 26
    3e8a:	80 91 a2 19 	lds	r24, 0x19A2	; 0x8019a2 <_serial_reply_buffer_handle>
    3e8e:	90 91 a3 19 	lds	r25, 0x19A3	; 0x8019a3 <_serial_reply_buffer_handle+0x1>
    3e92:	0e 94 0f 10 	call	0x201e	; 0x201e <xStreamBufferReceive>
    3e96:	8b e2       	ldi	r24, 0x2B	; 43
    3e98:	9a e1       	ldi	r25, 0x1A	; 26
    3e9a:	02 c0       	rjmp	.+4      	; 0x3ea0 <_upload_message+0xaa>
    3e9c:	80 e0       	ldi	r24, 0x00	; 0
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	df 91       	pop	r29
    3ea2:	cf 91       	pop	r28
    3ea4:	1f 91       	pop	r17
    3ea6:	0f 91       	pop	r16
    3ea8:	08 95       	ret

00003eaa <_reply2return_code>:
    3eaa:	2f 92       	push	r2
    3eac:	3f 92       	push	r3
    3eae:	4f 92       	push	r4
    3eb0:	5f 92       	push	r5
    3eb2:	6f 92       	push	r6
    3eb4:	7f 92       	push	r7
    3eb6:	8f 92       	push	r8
    3eb8:	9f 92       	push	r9
    3eba:	af 92       	push	r10
    3ebc:	bf 92       	push	r11
    3ebe:	cf 92       	push	r12
    3ec0:	df 92       	push	r13
    3ec2:	ef 92       	push	r14
    3ec4:	ff 92       	push	r15
    3ec6:	0f 93       	push	r16
    3ec8:	1f 93       	push	r17
    3eca:	cf 93       	push	r28
    3ecc:	df 93       	push	r29
    3ece:	5c 01       	movw	r10, r24
    3ed0:	fc 01       	movw	r30, r24
    3ed2:	01 90       	ld	r0, Z+
    3ed4:	00 20       	and	r0, r0
    3ed6:	e9 f7       	brne	.-6      	; 0x3ed2 <_reply2return_code+0x28>
    3ed8:	31 97       	sbiw	r30, 0x01	; 1
    3eda:	6f 01       	movw	r12, r30
    3edc:	c8 1a       	sub	r12, r24
    3ede:	d9 0a       	sbc	r13, r25
    3ee0:	5c 2c       	mov	r5, r12
    3ee2:	0f 2e       	mov	r0, r31
    3ee4:	f4 e2       	ldi	r31, 0x24	; 36
    3ee6:	8f 2e       	mov	r8, r31
    3ee8:	f8 e0       	ldi	r31, 0x08	; 8
    3eea:	9f 2e       	mov	r9, r31
    3eec:	f0 2d       	mov	r31, r0
    3eee:	e1 2c       	mov	r14, r1
    3ef0:	f1 2c       	mov	r15, r1
    3ef2:	4c 2c       	mov	r4, r12
    3ef4:	37 01       	movw	r6, r14
    3ef6:	f4 01       	movw	r30, r8
    3ef8:	01 81       	ldd	r16, Z+1	; 0x01
    3efa:	12 81       	ldd	r17, Z+2	; 0x02
    3efc:	e8 01       	movw	r28, r16
    3efe:	09 90       	ld	r0, Y+
    3f00:	00 20       	and	r0, r0
    3f02:	e9 f7       	brne	.-6      	; 0x3efe <_reply2return_code+0x54>
    3f04:	21 97       	sbiw	r28, 0x01	; 1
    3f06:	c0 1b       	sub	r28, r16
    3f08:	d1 0b       	sbc	r29, r17
    3f0a:	3c 2e       	mov	r3, r28
    3f0c:	f9 e0       	ldi	r31, 0x09	; 9
    3f0e:	cf 16       	cp	r12, r31
    3f10:	d1 04       	cpc	r13, r1
    3f12:	58 f0       	brcs	.+22     	; 0x3f2a <_reply2return_code+0x80>
    3f14:	f4 01       	movw	r30, r8
    3f16:	20 80       	ld	r2, Z
    3f18:	fe e0       	ldi	r31, 0x0E	; 14
    3f1a:	2f 12       	cpse	r2, r31
    3f1c:	06 c0       	rjmp	.+12     	; 0x3f2a <_reply2return_code+0x80>
    3f1e:	b8 01       	movw	r22, r16
    3f20:	c5 01       	movw	r24, r10
    3f22:	0e 94 c5 2c 	call	0x598a	; 0x598a <strcasestr>
    3f26:	89 2b       	or	r24, r25
    3f28:	09 f5       	brne	.+66     	; 0x3f6c <_reply2return_code+0xc2>
    3f2a:	44 2d       	mov	r20, r4
    3f2c:	35 14       	cp	r3, r5
    3f2e:	08 f4       	brcc	.+2      	; 0x3f32 <_reply2return_code+0x88>
    3f30:	4c 2f       	mov	r20, r28
    3f32:	50 e0       	ldi	r21, 0x00	; 0
    3f34:	b8 01       	movw	r22, r16
    3f36:	c5 01       	movw	r24, r10
    3f38:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <strncasecmp>
    3f3c:	89 2b       	or	r24, r25
    3f3e:	49 f4       	brne	.+18     	; 0x3f52 <_reply2return_code+0xa8>
    3f40:	f3 01       	movw	r30, r6
    3f42:	ee 0f       	add	r30, r30
    3f44:	ff 1f       	adc	r31, r31
    3f46:	e6 0d       	add	r30, r6
    3f48:	f7 1d       	adc	r31, r7
    3f4a:	ec 5d       	subi	r30, 0xDC	; 220
    3f4c:	f7 4f       	sbci	r31, 0xF7	; 247
    3f4e:	20 80       	ld	r2, Z
    3f50:	0d c0       	rjmp	.+26     	; 0x3f6c <_reply2return_code+0xc2>
    3f52:	8f ef       	ldi	r24, 0xFF	; 255
    3f54:	e8 1a       	sub	r14, r24
    3f56:	f8 0a       	sbc	r15, r24
    3f58:	e3 e0       	ldi	r30, 0x03	; 3
    3f5a:	8e 0e       	add	r8, r30
    3f5c:	91 1c       	adc	r9, r1
    3f5e:	f1 e1       	ldi	r31, 0x11	; 17
    3f60:	ef 16       	cp	r14, r31
    3f62:	f1 04       	cpc	r15, r1
    3f64:	39 f6       	brne	.-114    	; 0x3ef4 <_reply2return_code+0x4a>
    3f66:	68 94       	set
    3f68:	22 24       	eor	r2, r2
    3f6a:	24 f8       	bld	r2, 4
    3f6c:	82 2d       	mov	r24, r2
    3f6e:	df 91       	pop	r29
    3f70:	cf 91       	pop	r28
    3f72:	1f 91       	pop	r17
    3f74:	0f 91       	pop	r16
    3f76:	ff 90       	pop	r15
    3f78:	ef 90       	pop	r14
    3f7a:	df 90       	pop	r13
    3f7c:	cf 90       	pop	r12
    3f7e:	bf 90       	pop	r11
    3f80:	af 90       	pop	r10
    3f82:	9f 90       	pop	r9
    3f84:	8f 90       	pop	r8
    3f86:	7f 90       	pop	r7
    3f88:	6f 90       	pop	r6
    3f8a:	5f 90       	pop	r5
    3f8c:	4f 90       	pop	r4
    3f8e:	3f 90       	pop	r3
    3f90:	2f 90       	pop	r2
    3f92:	08 95       	ret

00003f94 <_upload_message_rc>:
    3f94:	30 df       	rcall	.-416    	; 0x3df6 <_upload_message>
    3f96:	89 cf       	rjmp	.-238    	; 0x3eaa <_reply2return_code>
    3f98:	08 95       	ret

00003f9a <lora_driver_flush_buffers>:
    3f9a:	80 91 a2 19 	lds	r24, 0x19A2	; 0x8019a2 <_serial_reply_buffer_handle>
    3f9e:	90 91 a3 19 	lds	r25, 0x19A3	; 0x8019a3 <_serial_reply_buffer_handle+0x1>
    3fa2:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <xStreamBufferReset>
    3fa6:	08 95       	ret

00003fa8 <lora_driver_create>:
    3fa8:	8f 92       	push	r8
    3faa:	9f 92       	push	r9
    3fac:	af 92       	push	r10
    3fae:	cf 92       	push	r12
    3fb0:	ef 92       	push	r14
    3fb2:	0f 93       	push	r16
    3fb4:	1f 93       	push	r17
    3fb6:	cf 93       	push	r28
    3fb8:	c8 2f       	mov	r28, r24
    3fba:	8b 01       	movw	r16, r22
    3fbc:	41 e0       	ldi	r20, 0x01	; 1
    3fbe:	60 e0       	ldi	r22, 0x00	; 0
    3fc0:	70 e0       	ldi	r23, 0x00	; 0
    3fc2:	88 ec       	ldi	r24, 0xC8	; 200
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <xStreamBufferGenericCreate>
    3fca:	90 93 a3 19 	sts	0x19A3, r25	; 0x8019a3 <_serial_reply_buffer_handle+0x1>
    3fce:	80 93 a2 19 	sts	0x19A2, r24	; 0x8019a2 <_serial_reply_buffer_handle>
    3fd2:	10 93 a1 19 	sts	0x19A1, r17	; 0x8019a1 <_downlinkMessageBuffer+0x1>
    3fd6:	00 93 a0 19 	sts	0x19A0, r16	; 0x8019a0 <_downlinkMessageBuffer>
    3fda:	0f 2e       	mov	r0, r31
    3fdc:	f5 eb       	ldi	r31, 0xB5	; 181
    3fde:	8f 2e       	mov	r8, r31
    3fe0:	fe e1       	ldi	r31, 0x1E	; 30
    3fe2:	9f 2e       	mov	r9, r31
    3fe4:	f0 2d       	mov	r31, r0
    3fe6:	68 94       	set
    3fe8:	aa 24       	eor	r10, r10
    3fea:	a6 f8       	bld	r10, 6
    3fec:	68 94       	set
    3fee:	cc 24       	eor	r12, r12
    3ff0:	c6 f8       	bld	r12, 6
    3ff2:	e1 2c       	mov	r14, r1
    3ff4:	00 e0       	ldi	r16, 0x00	; 0
    3ff6:	23 e0       	ldi	r18, 0x03	; 3
    3ff8:	40 e0       	ldi	r20, 0x00	; 0
    3ffa:	51 ee       	ldi	r21, 0xE1	; 225
    3ffc:	60 e0       	ldi	r22, 0x00	; 0
    3ffe:	70 e0       	ldi	r23, 0x00	; 0
    4000:	8c 2f       	mov	r24, r28
    4002:	2c d4       	rcall	.+2136   	; 0x485c <serial_new_instance>
    4004:	90 93 a5 19 	sts	0x19A5, r25	; 0x8019a5 <_rn2483_serial+0x1>
    4008:	80 93 a4 19 	sts	0x19A4, r24	; 0x8019a4 <_rn2483_serial>
    400c:	e0 91 b5 1a 	lds	r30, 0x1AB5	; 0x801ab5 <register_access+0x8>
    4010:	f0 91 b6 1a 	lds	r31, 0x1AB6	; 0x801ab6 <register_access+0x9>
    4014:	64 e0       	ldi	r22, 0x04	; 4
    4016:	87 e0       	ldi	r24, 0x07	; 7
    4018:	91 e0       	ldi	r25, 0x01	; 1
    401a:	19 95       	eicall
    401c:	cf 91       	pop	r28
    401e:	1f 91       	pop	r17
    4020:	0f 91       	pop	r16
    4022:	ef 90       	pop	r14
    4024:	cf 90       	pop	r12
    4026:	af 90       	pop	r10
    4028:	9f 90       	pop	r9
    402a:	8f 90       	pop	r8
    402c:	08 95       	ret

0000402e <lora_driver_reset_rn2483>:
    402e:	88 23       	and	r24, r24
    4030:	49 f0       	breq	.+18     	; 0x4044 <lora_driver_reset_rn2483+0x16>
    4032:	e0 91 bf 1a 	lds	r30, 0x1ABF	; 0x801abf <register_access+0x12>
    4036:	f0 91 c0 1a 	lds	r31, 0x1AC0	; 0x801ac0 <register_access+0x13>
    403a:	64 e0       	ldi	r22, 0x04	; 4
    403c:	88 e0       	ldi	r24, 0x08	; 8
    403e:	91 e0       	ldi	r25, 0x01	; 1
    4040:	19 95       	eicall
    4042:	08 95       	ret
    4044:	e0 91 b5 1a 	lds	r30, 0x1AB5	; 0x801ab5 <register_access+0x8>
    4048:	f0 91 b6 1a 	lds	r31, 0x1AB6	; 0x801ab6 <register_access+0x9>
    404c:	64 e0       	ldi	r22, 0x04	; 4
    404e:	88 e0       	ldi	r24, 0x08	; 8
    4050:	91 e0       	ldi	r25, 0x01	; 1
    4052:	19 95       	eicall
    4054:	08 95       	ret

00004056 <lora_driver_rn2483_factory_reset>:
    4056:	60 e0       	ldi	r22, 0x00	; 0
    4058:	70 e0       	ldi	r23, 0x00	; 0
    405a:	8a ea       	ldi	r24, 0xAA	; 170
    405c:	95 e0       	ldi	r25, 0x05	; 5
    405e:	cb de       	rcall	.-618    	; 0x3df6 <_upload_message>
    4060:	eb e2       	ldi	r30, 0x2B	; 43
    4062:	fa e1       	ldi	r31, 0x1A	; 26
    4064:	01 90       	ld	r0, Z+
    4066:	00 20       	and	r0, r0
    4068:	e9 f7       	brne	.-6      	; 0x4064 <lora_driver_rn2483_factory_reset+0xe>
    406a:	31 97       	sbiw	r30, 0x01	; 1
    406c:	eb 52       	subi	r30, 0x2B	; 43
    406e:	fa 41       	sbci	r31, 0x1A	; 26
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	75 97       	sbiw	r30, 0x15	; 21
    4074:	08 f0       	brcs	.+2      	; 0x4078 <lora_driver_rn2483_factory_reset+0x22>
    4076:	80 e0       	ldi	r24, 0x00	; 0
    4078:	08 95       	ret

0000407a <lora_driver_get_rn2483_hweui>:
    407a:	cf 93       	push	r28
    407c:	df 93       	push	r29
    407e:	ec 01       	movw	r28, r24
    4080:	60 e0       	ldi	r22, 0x00	; 0
    4082:	70 e0       	ldi	r23, 0x00	; 0
    4084:	8b eb       	ldi	r24, 0xBB	; 187
    4086:	95 e0       	ldi	r25, 0x05	; 5
    4088:	b6 de       	rcall	.-660    	; 0x3df6 <_upload_message>
    408a:	eb e2       	ldi	r30, 0x2B	; 43
    408c:	fa e1       	ldi	r31, 0x1A	; 26
    408e:	01 90       	ld	r0, Z+
    4090:	00 20       	and	r0, r0
    4092:	e9 f7       	brne	.-6      	; 0x408e <lora_driver_get_rn2483_hweui+0x14>
    4094:	ec 53       	subi	r30, 0x3C	; 60
    4096:	fa 41       	sbci	r31, 0x1A	; 26
    4098:	39 f4       	brne	.+14     	; 0x40a8 <lora_driver_get_rn2483_hweui+0x2e>
    409a:	6b e2       	ldi	r22, 0x2B	; 43
    409c:	7a e1       	ldi	r23, 0x1A	; 26
    409e:	ce 01       	movw	r24, r28
    40a0:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <strcpy>
    40a4:	80 e0       	ldi	r24, 0x00	; 0
    40a6:	02 c0       	rjmp	.+4      	; 0x40ac <lora_driver_get_rn2483_hweui+0x32>
    40a8:	18 82       	st	Y, r1
    40aa:	81 e0       	ldi	r24, 0x01	; 1
    40ac:	df 91       	pop	r29
    40ae:	cf 91       	pop	r28
    40b0:	08 95       	ret

000040b2 <lora_driver_set_device_identifier>:
    40b2:	fc 01       	movw	r30, r24
    40b4:	01 90       	ld	r0, Z+
    40b6:	00 20       	and	r0, r0
    40b8:	e9 f7       	brne	.-6      	; 0x40b4 <lora_driver_set_device_identifier+0x2>
    40ba:	9f 01       	movw	r18, r30
    40bc:	21 51       	subi	r18, 0x11	; 17
    40be:	31 09       	sbc	r19, r1
    40c0:	28 17       	cp	r18, r24
    40c2:	39 07       	cpc	r19, r25
    40c4:	29 f4       	brne	.+10     	; 0x40d0 <lora_driver_set_device_identifier+0x1e>
    40c6:	bc 01       	movw	r22, r24
    40c8:	89 ee       	ldi	r24, 0xE9	; 233
    40ca:	95 e0       	ldi	r25, 0x05	; 5
    40cc:	63 cf       	rjmp	.-314    	; 0x3f94 <_upload_message_rc>
    40ce:	08 95       	ret
    40d0:	89 e0       	ldi	r24, 0x09	; 9
    40d2:	08 95       	ret

000040d4 <lora_driver_set_application_identifier>:
    40d4:	fc 01       	movw	r30, r24
    40d6:	01 90       	ld	r0, Z+
    40d8:	00 20       	and	r0, r0
    40da:	e9 f7       	brne	.-6      	; 0x40d6 <lora_driver_set_application_identifier+0x2>
    40dc:	9f 01       	movw	r18, r30
    40de:	21 51       	subi	r18, 0x11	; 17
    40e0:	31 09       	sbc	r19, r1
    40e2:	28 17       	cp	r18, r24
    40e4:	39 07       	cpc	r19, r25
    40e6:	29 f4       	brne	.+10     	; 0x40f2 <lora_driver_set_application_identifier+0x1e>
    40e8:	bc 01       	movw	r22, r24
    40ea:	88 ef       	ldi	r24, 0xF8	; 248
    40ec:	95 e0       	ldi	r25, 0x05	; 5
    40ee:	52 cf       	rjmp	.-348    	; 0x3f94 <_upload_message_rc>
    40f0:	08 95       	ret
    40f2:	89 e0       	ldi	r24, 0x09	; 9
    40f4:	08 95       	ret

000040f6 <lora_driver_set_application_key>:
    40f6:	fc 01       	movw	r30, r24
    40f8:	01 90       	ld	r0, Z+
    40fa:	00 20       	and	r0, r0
    40fc:	e9 f7       	brne	.-6      	; 0x40f8 <lora_driver_set_application_key+0x2>
    40fe:	9f 01       	movw	r18, r30
    4100:	21 52       	subi	r18, 0x21	; 33
    4102:	31 09       	sbc	r19, r1
    4104:	28 17       	cp	r18, r24
    4106:	39 07       	cpc	r19, r25
    4108:	29 f4       	brne	.+10     	; 0x4114 <lora_driver_set_application_key+0x1e>
    410a:	bc 01       	movw	r22, r24
    410c:	87 e0       	ldi	r24, 0x07	; 7
    410e:	96 e0       	ldi	r25, 0x06	; 6
    4110:	41 cf       	rjmp	.-382    	; 0x3f94 <_upload_message_rc>
    4112:	08 95       	ret
    4114:	89 e0       	ldi	r24, 0x09	; 9
    4116:	08 95       	ret

00004118 <lora_driver_save_mac>:
    4118:	60 e0       	ldi	r22, 0x00	; 0
    411a:	70 e0       	ldi	r23, 0x00	; 0
    411c:	86 e4       	ldi	r24, 0x46	; 70
    411e:	96 e0       	ldi	r25, 0x06	; 6
    4120:	39 cf       	rjmp	.-398    	; 0x3f94 <_upload_message_rc>
    4122:	08 95       	ret

00004124 <lora_driver_join>:
    4124:	0f 93       	push	r16
    4126:	1f 93       	push	r17
    4128:	e8 2f       	mov	r30, r24
    412a:	f0 e0       	ldi	r31, 0x00	; 0
    412c:	ee 0f       	add	r30, r30
    412e:	ff 1f       	adc	r31, r31
    4130:	e0 5e       	subi	r30, 0xE0	; 224
    4132:	f7 4f       	sbci	r31, 0xF7	; 247
    4134:	60 81       	ld	r22, Z
    4136:	71 81       	ldd	r23, Z+1	; 0x01
    4138:	8f e4       	ldi	r24, 0x4F	; 79
    413a:	96 e0       	ldi	r25, 0x06	; 6
    413c:	2b df       	rcall	.-426    	; 0x3f94 <_upload_message_rc>
    413e:	81 11       	cpse	r24, r1
    4140:	14 c0       	rjmp	.+40     	; 0x416a <lora_driver_join+0x46>
    4142:	08 e2       	ldi	r16, 0x28	; 40
    4144:	15 e0       	ldi	r17, 0x05	; 5
    4146:	20 e0       	ldi	r18, 0x00	; 0
    4148:	30 e0       	ldi	r19, 0x00	; 0
    414a:	4d e2       	ldi	r20, 0x2D	; 45
    414c:	50 e0       	ldi	r21, 0x00	; 0
    414e:	6b e2       	ldi	r22, 0x2B	; 43
    4150:	7a e1       	ldi	r23, 0x1A	; 26
    4152:	80 91 a2 19 	lds	r24, 0x19A2	; 0x8019a2 <_serial_reply_buffer_handle>
    4156:	90 91 a3 19 	lds	r25, 0x19A3	; 0x8019a3 <_serial_reply_buffer_handle+0x1>
    415a:	0e 94 0f 10 	call	0x201e	; 0x201e <xStreamBufferReceive>
    415e:	88 23       	and	r24, r24
    4160:	21 f0       	breq	.+8      	; 0x416a <lora_driver_join+0x46>
    4162:	8b e2       	ldi	r24, 0x2B	; 43
    4164:	9a e1       	ldi	r25, 0x1A	; 26
    4166:	a1 de       	rcall	.-702    	; 0x3eaa <_reply2return_code>
    4168:	03 c0       	rjmp	.+6      	; 0x4170 <lora_driver_join+0x4c>
    416a:	8b e2       	ldi	r24, 0x2B	; 43
    416c:	9a e1       	ldi	r25, 0x1A	; 26
    416e:	9d de       	rcall	.-710    	; 0x3eaa <_reply2return_code>
    4170:	1f 91       	pop	r17
    4172:	0f 91       	pop	r16
    4174:	08 95       	ret

00004176 <lora_driver_sent_upload_message>:
    4176:	0f 93       	push	r16
    4178:	1f 93       	push	r17
    417a:	cf 93       	push	r28
    417c:	df 93       	push	r29
    417e:	1f 92       	push	r1
    4180:	cd b7       	in	r28, 0x3d	; 61
    4182:	de b7       	in	r29, 0x3e	; 62
    4184:	db 01       	movw	r26, r22
    4186:	11 96       	adiw	r26, 0x01	; 1
    4188:	9c 91       	ld	r25, X
    418a:	11 97       	sbiw	r26, 0x01	; 1
    418c:	95 31       	cpi	r25, 0x15	; 21
    418e:	08 f0       	brcs	.+2      	; 0x4192 <lora_driver_sent_upload_message+0x1c>
    4190:	b4 c0       	rjmp	.+360    	; 0x42fa <lora_driver_sent_upload_message+0x184>
    4192:	99 23       	and	r25, r25
    4194:	81 f1       	breq	.+96     	; 0x41f6 <lora_driver_sent_upload_message+0x80>
    4196:	60 e0       	ldi	r22, 0x00	; 0
    4198:	70 e0       	ldi	r23, 0x00	; 0
    419a:	27 2f       	mov	r18, r23
    419c:	30 e0       	ldi	r19, 0x00	; 0
    419e:	46 2f       	mov	r20, r22
    41a0:	50 e0       	ldi	r21, 0x00	; 0
    41a2:	fd 01       	movw	r30, r26
    41a4:	e4 0f       	add	r30, r20
    41a6:	f5 1f       	adc	r31, r21
    41a8:	92 81       	ldd	r25, Z+2	; 0x02
    41aa:	92 95       	swap	r25
    41ac:	9f 70       	andi	r25, 0x0F	; 15
    41ae:	9a 30       	cpi	r25, 0x0A	; 10
    41b0:	10 f0       	brcs	.+4      	; 0x41b6 <lora_driver_sent_upload_message+0x40>
    41b2:	99 5c       	subi	r25, 0xC9	; 201
    41b4:	01 c0       	rjmp	.+2      	; 0x41b8 <lora_driver_sent_upload_message+0x42>
    41b6:	90 5d       	subi	r25, 0xD0	; 208
    41b8:	f9 01       	movw	r30, r18
    41ba:	e4 54       	subi	r30, 0x44	; 68
    41bc:	f6 4e       	sbci	r31, 0xE6	; 230
    41be:	90 83       	st	Z, r25
    41c0:	2f 5f       	subi	r18, 0xFF	; 255
    41c2:	3f 4f       	sbci	r19, 0xFF	; 255
    41c4:	fd 01       	movw	r30, r26
    41c6:	e4 0f       	add	r30, r20
    41c8:	f5 1f       	adc	r31, r21
    41ca:	92 81       	ldd	r25, Z+2	; 0x02
    41cc:	9f 70       	andi	r25, 0x0F	; 15
    41ce:	49 2f       	mov	r20, r25
    41d0:	50 e0       	ldi	r21, 0x00	; 0
    41d2:	4a 30       	cpi	r20, 0x0A	; 10
    41d4:	51 05       	cpc	r21, r1
    41d6:	14 f0       	brlt	.+4      	; 0x41dc <lora_driver_sent_upload_message+0x66>
    41d8:	99 5c       	subi	r25, 0xC9	; 201
    41da:	01 c0       	rjmp	.+2      	; 0x41de <lora_driver_sent_upload_message+0x68>
    41dc:	90 5d       	subi	r25, 0xD0	; 208
    41de:	f9 01       	movw	r30, r18
    41e0:	e4 54       	subi	r30, 0x44	; 68
    41e2:	f6 4e       	sbci	r31, 0xE6	; 230
    41e4:	90 83       	st	Z, r25
    41e6:	7e 5f       	subi	r23, 0xFE	; 254
    41e8:	6f 5f       	subi	r22, 0xFF	; 255
    41ea:	11 96       	adiw	r26, 0x01	; 1
    41ec:	9c 91       	ld	r25, X
    41ee:	11 97       	sbiw	r26, 0x01	; 1
    41f0:	69 17       	cp	r22, r25
    41f2:	98 f2       	brcs	.-90     	; 0x419a <lora_driver_sent_upload_message+0x24>
    41f4:	01 c0       	rjmp	.+2      	; 0x41f8 <lora_driver_sent_upload_message+0x82>
    41f6:	70 e0       	ldi	r23, 0x00	; 0
    41f8:	e7 2f       	mov	r30, r23
    41fa:	f0 e0       	ldi	r31, 0x00	; 0
    41fc:	e4 54       	subi	r30, 0x44	; 68
    41fe:	f6 4e       	sbci	r31, 0xE6	; 230
    4200:	10 82       	st	Z, r1
    4202:	4c 91       	ld	r20, X
    4204:	81 11       	cpse	r24, r1
    4206:	03 c0       	rjmp	.+6      	; 0x420e <lora_driver_sent_upload_message+0x98>
    4208:	88 e5       	ldi	r24, 0x58	; 88
    420a:	96 e0       	ldi	r25, 0x06	; 6
    420c:	02 c0       	rjmp	.+4      	; 0x4212 <lora_driver_sent_upload_message+0x9c>
    420e:	8a e5       	ldi	r24, 0x5A	; 90
    4210:	96 e0       	ldi	r25, 0x06	; 6
    4212:	2c eb       	ldi	r18, 0xBC	; 188
    4214:	39 e1       	ldi	r19, 0x19	; 25
    4216:	3f 93       	push	r19
    4218:	2f 93       	push	r18
    421a:	1f 92       	push	r1
    421c:	4f 93       	push	r20
    421e:	9f 93       	push	r25
    4220:	8f 93       	push	r24
    4222:	8e e5       	ldi	r24, 0x5E	; 94
    4224:	96 e0       	ldi	r25, 0x06	; 6
    4226:	9f 93       	push	r25
    4228:	8f 93       	push	r24
    422a:	8e ef       	ldi	r24, 0xFE	; 254
    422c:	99 e1       	ldi	r25, 0x19	; 25
    422e:	9f 93       	push	r25
    4230:	8f 93       	push	r24
    4232:	0e 94 57 2d 	call	0x5aae	; 0x5aae <sprintf>
    4236:	60 e0       	ldi	r22, 0x00	; 0
    4238:	70 e0       	ldi	r23, 0x00	; 0
    423a:	8e ef       	ldi	r24, 0xFE	; 254
    423c:	99 e1       	ldi	r25, 0x19	; 25
    423e:	aa de       	rcall	.-684    	; 0x3f94 <_upload_message_rc>
    4240:	0f b6       	in	r0, 0x3f	; 63
    4242:	f8 94       	cli
    4244:	de bf       	out	0x3e, r29	; 62
    4246:	0f be       	out	0x3f, r0	; 63
    4248:	cd bf       	out	0x3d, r28	; 61
    424a:	81 11       	cpse	r24, r1
    424c:	59 c0       	rjmp	.+178    	; 0x4300 <lora_driver_sent_upload_message+0x18a>
    424e:	08 e2       	ldi	r16, 0x28	; 40
    4250:	15 e0       	ldi	r17, 0x05	; 5
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	4d e2       	ldi	r20, 0x2D	; 45
    4258:	50 e0       	ldi	r21, 0x00	; 0
    425a:	6b e2       	ldi	r22, 0x2B	; 43
    425c:	7a e1       	ldi	r23, 0x1A	; 26
    425e:	80 91 a2 19 	lds	r24, 0x19A2	; 0x8019a2 <_serial_reply_buffer_handle>
    4262:	90 91 a3 19 	lds	r25, 0x19A3	; 0x8019a3 <_serial_reply_buffer_handle+0x1>
    4266:	0e 94 0f 10 	call	0x201e	; 0x201e <xStreamBufferReceive>
    426a:	88 23       	and	r24, r24
    426c:	09 f4       	brne	.+2      	; 0x4270 <lora_driver_sent_upload_message+0xfa>
    426e:	47 c0       	rjmp	.+142    	; 0x42fe <lora_driver_sent_upload_message+0x188>
    4270:	8b e2       	ldi	r24, 0x2B	; 43
    4272:	9a e1       	ldi	r25, 0x1A	; 26
    4274:	1a de       	rcall	.-972    	; 0x3eaa <_reply2return_code>
    4276:	8e 30       	cpi	r24, 0x0E	; 14
    4278:	09 f0       	breq	.+2      	; 0x427c <lora_driver_sent_upload_message+0x106>
    427a:	42 c0       	rjmp	.+132    	; 0x4300 <lora_driver_sent_upload_message+0x18a>
    427c:	87 e0       	ldi	r24, 0x07	; 7
    427e:	89 83       	std	Y+1, r24	; 0x01
    4280:	80 91 a0 19 	lds	r24, 0x19A0	; 0x8019a0 <_downlinkMessageBuffer>
    4284:	90 91 a1 19 	lds	r25, 0x19A1	; 0x8019a1 <_downlinkMessageBuffer+0x1>
    4288:	89 2b       	or	r24, r25
    428a:	a9 f1       	breq	.+106    	; 0x42f6 <lora_driver_sent_upload_message+0x180>
    428c:	be 01       	movw	r22, r28
    428e:	6f 5f       	subi	r22, 0xFF	; 255
    4290:	7f 4f       	sbci	r23, 0xFF	; 255
    4292:	8b e2       	ldi	r24, 0x2B	; 43
    4294:	9a e1       	ldi	r25, 0x1A	; 26
    4296:	68 d1       	rcall	.+720    	; 0x4568 <decode_port_no>
    4298:	80 93 a6 19 	sts	0x19A6, r24	; 0x8019a6 <_downlink_payload>
    429c:	e9 81       	ldd	r30, Y+1	; 0x01
    429e:	f0 e0       	ldi	r31, 0x00	; 0
    42a0:	e5 5d       	subi	r30, 0xD5	; 213
    42a2:	f5 4e       	sbci	r31, 0xE5	; 229
    42a4:	df 01       	movw	r26, r30
    42a6:	0d 90       	ld	r0, X+
    42a8:	00 20       	and	r0, r0
    42aa:	e9 f7       	brne	.-6      	; 0x42a6 <lora_driver_sent_upload_message+0x130>
    42ac:	11 97       	sbiw	r26, 0x01	; 1
    42ae:	ae 1b       	sub	r26, r30
    42b0:	bf 0b       	sbc	r27, r31
    42b2:	aa 23       	and	r26, r26
    42b4:	91 f0       	breq	.+36     	; 0x42da <lora_driver_sent_upload_message+0x164>
    42b6:	bb 27       	eor	r27, r27
    42b8:	cd 01       	movw	r24, r26
    42ba:	01 97       	sbiw	r24, 0x01	; 1
    42bc:	9c 01       	movw	r18, r24
    42be:	12 f4       	brpl	.+4      	; 0x42c4 <lora_driver_sent_upload_message+0x14e>
    42c0:	2f 5f       	subi	r18, 0xFF	; 255
    42c2:	3f 4f       	sbci	r19, 0xFF	; 255
    42c4:	35 95       	asr	r19
    42c6:	27 95       	ror	r18
    42c8:	20 93 a7 19 	sts	0x19A7, r18	; 0x8019a7 <_downlink_payload+0x1>
    42cc:	af 01       	movw	r20, r30
    42ce:	4f 5f       	subi	r20, 0xFF	; 255
    42d0:	5f 4f       	sbci	r21, 0xFF	; 255
    42d2:	64 e1       	ldi	r22, 0x14	; 20
    42d4:	88 ea       	ldi	r24, 0xA8	; 168
    42d6:	99 e1       	ldi	r25, 0x19	; 25
    42d8:	73 d1       	rcall	.+742    	; 0x45c0 <decode_hexadecimal_string_bytes>
    42da:	01 e0       	ldi	r16, 0x01	; 1
    42dc:	10 e0       	ldi	r17, 0x00	; 0
    42de:	20 e0       	ldi	r18, 0x00	; 0
    42e0:	30 e0       	ldi	r19, 0x00	; 0
    42e2:	46 e1       	ldi	r20, 0x16	; 22
    42e4:	50 e0       	ldi	r21, 0x00	; 0
    42e6:	66 ea       	ldi	r22, 0xA6	; 166
    42e8:	79 e1       	ldi	r23, 0x19	; 25
    42ea:	80 91 a0 19 	lds	r24, 0x19A0	; 0x8019a0 <_downlinkMessageBuffer>
    42ee:	90 91 a1 19 	lds	r25, 0x19A1	; 0x8019a1 <_downlinkMessageBuffer+0x1>
    42f2:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <xStreamBufferSend>
    42f6:	8e e0       	ldi	r24, 0x0E	; 14
    42f8:	03 c0       	rjmp	.+6      	; 0x4300 <lora_driver_sent_upload_message+0x18a>
    42fa:	84 e1       	ldi	r24, 0x14	; 20
    42fc:	01 c0       	rjmp	.+2      	; 0x4300 <lora_driver_sent_upload_message+0x18a>
    42fe:	80 e0       	ldi	r24, 0x00	; 0
    4300:	0f 90       	pop	r0
    4302:	df 91       	pop	r29
    4304:	cf 91       	pop	r28
    4306:	1f 91       	pop	r17
    4308:	0f 91       	pop	r16
    430a:	08 95       	ret

0000430c <lora_driver_set_adaptive_data_rate>:
    430c:	81 30       	cpi	r24, 0x01	; 1
    430e:	19 f0       	breq	.+6      	; 0x4316 <lora_driver_set_adaptive_data_rate+0xa>
    4310:	6e e6       	ldi	r22, 0x6E	; 110
    4312:	76 e0       	ldi	r23, 0x06	; 6
    4314:	02 c0       	rjmp	.+4      	; 0x431a <lora_driver_set_adaptive_data_rate+0xe>
    4316:	67 e4       	ldi	r22, 0x47	; 71
    4318:	77 e0       	ldi	r23, 0x07	; 7
    431a:	82 e7       	ldi	r24, 0x72	; 114
    431c:	96 e0       	ldi	r25, 0x06	; 6
    431e:	3a ce       	rjmp	.-908    	; 0x3f94 <_upload_message_rc>
    4320:	08 95       	ret

00004322 <lora_driver_set_receive_delay>:
    4322:	9f 93       	push	r25
    4324:	8f 93       	push	r24
    4326:	83 ea       	ldi	r24, 0xA3	; 163
    4328:	96 e0       	ldi	r25, 0x06	; 6
    432a:	9f 93       	push	r25
    432c:	8f 93       	push	r24
    432e:	8e ef       	ldi	r24, 0xFE	; 254
    4330:	99 e1       	ldi	r25, 0x19	; 25
    4332:	9f 93       	push	r25
    4334:	8f 93       	push	r24
    4336:	0e 94 57 2d 	call	0x5aae	; 0x5aae <sprintf>
    433a:	60 e0       	ldi	r22, 0x00	; 0
    433c:	70 e0       	ldi	r23, 0x00	; 0
    433e:	8e ef       	ldi	r24, 0xFE	; 254
    4340:	99 e1       	ldi	r25, 0x19	; 25
    4342:	28 de       	rcall	.-944    	; 0x3f94 <_upload_message_rc>
    4344:	0f 90       	pop	r0
    4346:	0f 90       	pop	r0
    4348:	0f 90       	pop	r0
    434a:	0f 90       	pop	r0
    434c:	0f 90       	pop	r0
    434e:	0f 90       	pop	r0
    4350:	08 95       	ret

00004352 <lora_driver_configure_to_eu868>:
    4352:	2f 92       	push	r2
    4354:	3f 92       	push	r3
    4356:	4f 92       	push	r4
    4358:	5f 92       	push	r5
    435a:	6f 92       	push	r6
    435c:	7f 92       	push	r7
    435e:	8f 92       	push	r8
    4360:	9f 92       	push	r9
    4362:	af 92       	push	r10
    4364:	bf 92       	push	r11
    4366:	cf 92       	push	r12
    4368:	df 92       	push	r13
    436a:	ef 92       	push	r14
    436c:	ff 92       	push	r15
    436e:	0f 93       	push	r16
    4370:	1f 93       	push	r17
    4372:	cf 93       	push	r28
    4374:	df 93       	push	r29
    4376:	cd b7       	in	r28, 0x3d	; 61
    4378:	de b7       	in	r29, 0x3e	; 62
    437a:	a0 97       	sbiw	r28, 0x20	; 32
    437c:	0f b6       	in	r0, 0x3f	; 63
    437e:	f8 94       	cli
    4380:	de bf       	out	0x3e, r29	; 62
    4382:	0f be       	out	0x3f, r0	; 63
    4384:	cd bf       	out	0x3d, r28	; 61
    4386:	60 ed       	ldi	r22, 0xD0	; 208
    4388:	76 e0       	ldi	r23, 0x06	; 6
    438a:	8c ed       	ldi	r24, 0xDC	; 220
    438c:	96 e0       	ldi	r25, 0x06	; 6
    438e:	33 dd       	rcall	.-1434   	; 0x3df6 <_upload_message>
    4390:	8c dd       	rcall	.-1256   	; 0x3eaa <_reply2return_code>
    4392:	81 11       	cpse	r24, r1
    4394:	a3 c0       	rjmp	.+326    	; 0x44dc <lora_driver_configure_to_eu868+0x18a>
    4396:	80 e2       	ldi	r24, 0x20	; 32
    4398:	e1 e2       	ldi	r30, 0x21	; 33
    439a:	f2 e0       	ldi	r31, 0x02	; 2
    439c:	de 01       	movw	r26, r28
    439e:	11 96       	adiw	r26, 0x01	; 1
    43a0:	01 90       	ld	r0, Z+
    43a2:	0d 92       	st	X+, r0
    43a4:	8a 95       	dec	r24
    43a6:	e1 f7       	brne	.-8      	; 0x43a0 <lora_driver_configure_to_eu868+0x4e>
    43a8:	9e 01       	movw	r18, r28
    43aa:	2f 5f       	subi	r18, 0xFF	; 255
    43ac:	3f 4f       	sbci	r19, 0xFF	; 255
    43ae:	69 01       	movw	r12, r18
    43b0:	e1 2c       	mov	r14, r1
    43b2:	f1 2c       	mov	r15, r1
    43b4:	0f 2e       	mov	r0, r31
    43b6:	f8 ee       	ldi	r31, 0xE8	; 232
    43b8:	af 2e       	mov	r10, r31
    43ba:	f6 e0       	ldi	r31, 0x06	; 6
    43bc:	bf 2e       	mov	r11, r31
    43be:	f0 2d       	mov	r31, r0
    43c0:	0e ef       	ldi	r16, 0xFE	; 254
    43c2:	19 e1       	ldi	r17, 0x19	; 25
    43c4:	0f 2e       	mov	r0, r31
    43c6:	f1 e0       	ldi	r31, 0x01	; 1
    43c8:	4f 2e       	mov	r4, r31
    43ca:	f7 e0       	ldi	r31, 0x07	; 7
    43cc:	5f 2e       	mov	r5, r31
    43ce:	f0 2d       	mov	r31, r0
    43d0:	0f 2e       	mov	r0, r31
    43d2:	f8 e1       	ldi	r31, 0x18	; 24
    43d4:	8f 2e       	mov	r8, r31
    43d6:	f7 e0       	ldi	r31, 0x07	; 7
    43d8:	9f 2e       	mov	r9, r31
    43da:	f0 2d       	mov	r31, r0
    43dc:	0f 2e       	mov	r0, r31
    43de:	f2 e3       	ldi	r31, 0x32	; 50
    43e0:	6f 2e       	mov	r6, r31
    43e2:	f7 e0       	ldi	r31, 0x07	; 7
    43e4:	7f 2e       	mov	r7, r31
    43e6:	f0 2d       	mov	r31, r0
    43e8:	3e 2c       	mov	r3, r14
    43ea:	2f 2c       	mov	r2, r15
    43ec:	ff 92       	push	r15
    43ee:	ef 92       	push	r14
    43f0:	bf 92       	push	r11
    43f2:	af 92       	push	r10
    43f4:	1f 93       	push	r17
    43f6:	0f 93       	push	r16
    43f8:	0e 94 57 2d 	call	0x5aae	; 0x5aae <sprintf>
    43fc:	60 e0       	ldi	r22, 0x00	; 0
    43fe:	70 e0       	ldi	r23, 0x00	; 0
    4400:	c8 01       	movw	r24, r16
    4402:	f9 dc       	rcall	.-1550   	; 0x3df6 <_upload_message>
    4404:	52 dd       	rcall	.-1372   	; 0x3eaa <_reply2return_code>
    4406:	0f 90       	pop	r0
    4408:	0f 90       	pop	r0
    440a:	0f 90       	pop	r0
    440c:	0f 90       	pop	r0
    440e:	0f 90       	pop	r0
    4410:	0f 90       	pop	r0
    4412:	81 11       	cpse	r24, r1
    4414:	63 c0       	rjmp	.+198    	; 0x44dc <lora_driver_configure_to_eu868+0x18a>
    4416:	32 e0       	ldi	r19, 0x02	; 2
    4418:	3e 15       	cp	r19, r14
    441a:	e8 f4       	brcc	.+58     	; 0x4456 <lora_driver_configure_to_eu868+0x104>
    441c:	f6 01       	movw	r30, r12
    441e:	83 81       	ldd	r24, Z+3	; 0x03
    4420:	8f 93       	push	r24
    4422:	82 81       	ldd	r24, Z+2	; 0x02
    4424:	8f 93       	push	r24
    4426:	81 81       	ldd	r24, Z+1	; 0x01
    4428:	8f 93       	push	r24
    442a:	80 81       	ld	r24, Z
    442c:	8f 93       	push	r24
    442e:	ff 92       	push	r15
    4430:	ef 92       	push	r14
    4432:	5f 92       	push	r5
    4434:	4f 92       	push	r4
    4436:	1f 93       	push	r17
    4438:	0f 93       	push	r16
    443a:	0e 94 57 2d 	call	0x5aae	; 0x5aae <sprintf>
    443e:	60 e0       	ldi	r22, 0x00	; 0
    4440:	70 e0       	ldi	r23, 0x00	; 0
    4442:	c8 01       	movw	r24, r16
    4444:	d8 dc       	rcall	.-1616   	; 0x3df6 <_upload_message>
    4446:	31 dd       	rcall	.-1438   	; 0x3eaa <_reply2return_code>
    4448:	0f b6       	in	r0, 0x3f	; 63
    444a:	f8 94       	cli
    444c:	de bf       	out	0x3e, r29	; 62
    444e:	0f be       	out	0x3f, r0	; 63
    4450:	cd bf       	out	0x3d, r28	; 61
    4452:	81 11       	cpse	r24, r1
    4454:	43 c0       	rjmp	.+134    	; 0x44dc <lora_driver_configure_to_eu868+0x18a>
    4456:	2f 92       	push	r2
    4458:	3f 92       	push	r3
    445a:	9f 92       	push	r9
    445c:	8f 92       	push	r8
    445e:	1f 93       	push	r17
    4460:	0f 93       	push	r16
    4462:	0e 94 57 2d 	call	0x5aae	; 0x5aae <sprintf>
    4466:	60 e0       	ldi	r22, 0x00	; 0
    4468:	70 e0       	ldi	r23, 0x00	; 0
    446a:	c8 01       	movw	r24, r16
    446c:	c4 dc       	rcall	.-1656   	; 0x3df6 <_upload_message>
    446e:	1d dd       	rcall	.-1478   	; 0x3eaa <_reply2return_code>
    4470:	0f 90       	pop	r0
    4472:	0f 90       	pop	r0
    4474:	0f 90       	pop	r0
    4476:	0f 90       	pop	r0
    4478:	0f 90       	pop	r0
    447a:	0f 90       	pop	r0
    447c:	81 11       	cpse	r24, r1
    447e:	2e c0       	rjmp	.+92     	; 0x44dc <lora_driver_configure_to_eu868+0x18a>
    4480:	2f 92       	push	r2
    4482:	3f 92       	push	r3
    4484:	7f 92       	push	r7
    4486:	6f 92       	push	r6
    4488:	1f 93       	push	r17
    448a:	0f 93       	push	r16
    448c:	0e 94 57 2d 	call	0x5aae	; 0x5aae <sprintf>
    4490:	60 e0       	ldi	r22, 0x00	; 0
    4492:	70 e0       	ldi	r23, 0x00	; 0
    4494:	c8 01       	movw	r24, r16
    4496:	af dc       	rcall	.-1698   	; 0x3df6 <_upload_message>
    4498:	08 dd       	rcall	.-1520   	; 0x3eaa <_reply2return_code>
    449a:	0f 90       	pop	r0
    449c:	0f 90       	pop	r0
    449e:	0f 90       	pop	r0
    44a0:	0f 90       	pop	r0
    44a2:	0f 90       	pop	r0
    44a4:	0f 90       	pop	r0
    44a6:	81 11       	cpse	r24, r1
    44a8:	19 c0       	rjmp	.+50     	; 0x44dc <lora_driver_configure_to_eu868+0x18a>
    44aa:	3f ef       	ldi	r19, 0xFF	; 255
    44ac:	e3 1a       	sub	r14, r19
    44ae:	f3 0a       	sbc	r15, r19
    44b0:	84 e0       	ldi	r24, 0x04	; 4
    44b2:	c8 0e       	add	r12, r24
    44b4:	d1 1c       	adc	r13, r1
    44b6:	98 e0       	ldi	r25, 0x08	; 8
    44b8:	e9 16       	cp	r14, r25
    44ba:	f1 04       	cpc	r15, r1
    44bc:	09 f0       	breq	.+2      	; 0x44c0 <lora_driver_configure_to_eu868+0x16e>
    44be:	94 cf       	rjmp	.-216    	; 0x43e8 <lora_driver_configure_to_eu868+0x96>
    44c0:	60 e0       	ldi	r22, 0x00	; 0
    44c2:	70 e0       	ldi	r23, 0x00	; 0
    44c4:	8a e4       	ldi	r24, 0x4A	; 74
    44c6:	97 e0       	ldi	r25, 0x07	; 7
    44c8:	96 dc       	rcall	.-1748   	; 0x3df6 <_upload_message>
    44ca:	ef dc       	rcall	.-1570   	; 0x3eaa <_reply2return_code>
    44cc:	81 11       	cpse	r24, r1
    44ce:	06 c0       	rjmp	.+12     	; 0x44dc <lora_driver_configure_to_eu868+0x18a>
    44d0:	60 e0       	ldi	r22, 0x00	; 0
    44d2:	70 e0       	ldi	r23, 0x00	; 0
    44d4:	8b e5       	ldi	r24, 0x5B	; 91
    44d6:	97 e0       	ldi	r25, 0x07	; 7
    44d8:	8e dc       	rcall	.-1764   	; 0x3df6 <_upload_message>
    44da:	e7 dc       	rcall	.-1586   	; 0x3eaa <_reply2return_code>
    44dc:	a0 96       	adiw	r28, 0x20	; 32
    44de:	0f b6       	in	r0, 0x3f	; 63
    44e0:	f8 94       	cli
    44e2:	de bf       	out	0x3e, r29	; 62
    44e4:	0f be       	out	0x3f, r0	; 63
    44e6:	cd bf       	out	0x3d, r28	; 61
    44e8:	df 91       	pop	r29
    44ea:	cf 91       	pop	r28
    44ec:	1f 91       	pop	r17
    44ee:	0f 91       	pop	r16
    44f0:	ff 90       	pop	r15
    44f2:	ef 90       	pop	r14
    44f4:	df 90       	pop	r13
    44f6:	cf 90       	pop	r12
    44f8:	bf 90       	pop	r11
    44fa:	af 90       	pop	r10
    44fc:	9f 90       	pop	r9
    44fe:	8f 90       	pop	r8
    4500:	7f 90       	pop	r7
    4502:	6f 90       	pop	r6
    4504:	5f 90       	pop	r5
    4506:	4f 90       	pop	r4
    4508:	3f 90       	pop	r3
    450a:	2f 90       	pop	r2
    450c:	08 95       	ret

0000450e <lora_driver_set_otaa_identity>:
    450e:	ef 92       	push	r14
    4510:	ff 92       	push	r15
    4512:	0f 93       	push	r16
    4514:	1f 93       	push	r17
    4516:	cf 93       	push	r28
    4518:	df 93       	push	r29
    451a:	ec 01       	movw	r28, r24
    451c:	8b 01       	movw	r16, r22
    451e:	7a 01       	movw	r14, r20
    4520:	81 e0       	ldi	r24, 0x01	; 1
    4522:	f4 de       	rcall	.-536    	; 0x430c <lora_driver_set_adaptive_data_rate>
    4524:	81 11       	cpse	r24, r1
    4526:	0d c0       	rjmp	.+26     	; 0x4542 <lora_driver_set_otaa_identity+0x34>
    4528:	ce 01       	movw	r24, r28
    452a:	d4 dd       	rcall	.-1112   	; 0x40d4 <lora_driver_set_application_identifier>
    452c:	81 11       	cpse	r24, r1
    452e:	09 c0       	rjmp	.+18     	; 0x4542 <lora_driver_set_otaa_identity+0x34>
    4530:	c8 01       	movw	r24, r16
    4532:	e1 dd       	rcall	.-1086   	; 0x40f6 <lora_driver_set_application_key>
    4534:	81 11       	cpse	r24, r1
    4536:	05 c0       	rjmp	.+10     	; 0x4542 <lora_driver_set_otaa_identity+0x34>
    4538:	c7 01       	movw	r24, r14
    453a:	bb dd       	rcall	.-1162   	; 0x40b2 <lora_driver_set_device_identifier>
    453c:	81 11       	cpse	r24, r1
    453e:	01 c0       	rjmp	.+2      	; 0x4542 <lora_driver_set_otaa_identity+0x34>
    4540:	eb dd       	rcall	.-1066   	; 0x4118 <lora_driver_save_mac>
    4542:	df 91       	pop	r29
    4544:	cf 91       	pop	r28
    4546:	1f 91       	pop	r17
    4548:	0f 91       	pop	r16
    454a:	ff 90       	pop	r15
    454c:	ef 90       	pop	r14
    454e:	08 95       	ret

00004550 <lora_driver_map_return_code_to_text>:
    4550:	90 e0       	ldi	r25, 0x00	; 0
    4552:	fc 01       	movw	r30, r24
    4554:	ee 0f       	add	r30, r30
    4556:	ff 1f       	adc	r31, r31
    4558:	8e 0f       	add	r24, r30
    455a:	9f 1f       	adc	r25, r31
    455c:	fc 01       	movw	r30, r24
    455e:	ec 5d       	subi	r30, 0xDC	; 220
    4560:	f7 4f       	sbci	r31, 0xF7	; 247
    4562:	81 81       	ldd	r24, Z+1	; 0x01
    4564:	92 81       	ldd	r25, Z+2	; 0x02
    4566:	08 95       	ret

00004568 <decode_port_no>:
    4568:	dc 01       	movw	r26, r24
    456a:	00 97       	sbiw	r24, 0x00	; 0
    456c:	29 f1       	breq	.+74     	; 0x45b8 <decode_port_no+0x50>
    456e:	fb 01       	movw	r30, r22
    4570:	20 81       	ld	r18, Z
    4572:	fc 01       	movw	r30, r24
    4574:	01 90       	ld	r0, Z+
    4576:	00 20       	and	r0, r0
    4578:	e9 f7       	brne	.-6      	; 0x4574 <decode_port_no+0xc>
    457a:	31 97       	sbiw	r30, 0x01	; 1
    457c:	e8 1b       	sub	r30, r24
    457e:	f9 0b       	sbc	r31, r25
    4580:	82 2f       	mov	r24, r18
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	e8 17       	cp	r30, r24
    4586:	f9 07       	cpc	r31, r25
    4588:	c8 f0       	brcs	.+50     	; 0x45bc <decode_port_no+0x54>
    458a:	80 e0       	ldi	r24, 0x00	; 0
    458c:	08 c0       	rjmp	.+16     	; 0x459e <decode_port_no+0x36>
    458e:	88 0f       	add	r24, r24
    4590:	38 2f       	mov	r19, r24
    4592:	33 0f       	add	r19, r19
    4594:	33 0f       	add	r19, r19
    4596:	83 0f       	add	r24, r19
    4598:	80 53       	subi	r24, 0x30	; 48
    459a:	89 0f       	add	r24, r25
    459c:	2f 5f       	subi	r18, 0xFF	; 255
    459e:	fd 01       	movw	r30, r26
    45a0:	e2 0f       	add	r30, r18
    45a2:	f1 1d       	adc	r31, r1
    45a4:	90 81       	ld	r25, Z
    45a6:	30 ed       	ldi	r19, 0xD0	; 208
    45a8:	39 0f       	add	r19, r25
    45aa:	3a 30       	cpi	r19, 0x0A	; 10
    45ac:	10 f4       	brcc	.+4      	; 0x45b2 <decode_port_no+0x4a>
    45ae:	91 11       	cpse	r25, r1
    45b0:	ee cf       	rjmp	.-36     	; 0x458e <decode_port_no+0x26>
    45b2:	fb 01       	movw	r30, r22
    45b4:	20 83       	st	Z, r18
    45b6:	08 95       	ret
    45b8:	80 e0       	ldi	r24, 0x00	; 0
    45ba:	08 95       	ret
    45bc:	80 e0       	ldi	r24, 0x00	; 0
    45be:	08 95       	ret

000045c0 <decode_hexadecimal_string_bytes>:
    45c0:	0f 93       	push	r16
    45c2:	1f 93       	push	r17
    45c4:	cf 93       	push	r28
    45c6:	df 93       	push	r29
    45c8:	dc 01       	movw	r26, r24
    45ca:	ea 01       	movw	r28, r20
    45cc:	20 97       	sbiw	r28, 0x00	; 0
    45ce:	e1 f1       	breq	.+120    	; 0x4648 <decode_hexadecimal_string_bytes+0x88>
    45d0:	fa 01       	movw	r30, r20
    45d2:	01 90       	ld	r0, Z+
    45d4:	00 20       	and	r0, r0
    45d6:	e9 f7       	brne	.-6      	; 0x45d2 <decode_hexadecimal_string_bytes+0x12>
    45d8:	31 97       	sbiw	r30, 0x01	; 1
    45da:	e4 1b       	sub	r30, r20
    45dc:	f5 0b       	sbc	r31, r21
    45de:	32 97       	sbiw	r30, 0x02	; 2
    45e0:	10 f5       	brcc	.+68     	; 0x4626 <decode_hexadecimal_string_bytes+0x66>
    45e2:	32 c0       	rjmp	.+100    	; 0x4648 <decode_hexadecimal_string_bytes+0x88>
    45e4:	8d 01       	movw	r16, r26
    45e6:	04 0f       	add	r16, r20
    45e8:	15 1f       	adc	r17, r21
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	ae 01       	movw	r20, r28
    45ee:	42 0f       	add	r20, r18
    45f0:	53 1f       	adc	r21, r19
    45f2:	fa 01       	movw	r30, r20
    45f4:	90 81       	ld	r25, Z
    45f6:	91 34       	cpi	r25, 0x41	; 65
    45f8:	28 f0       	brcs	.+10     	; 0x4604 <decode_hexadecimal_string_bytes+0x44>
    45fa:	97 53       	subi	r25, 0x37	; 55
    45fc:	59 2f       	mov	r21, r25
    45fe:	52 95       	swap	r21
    4600:	50 7f       	andi	r21, 0xF0	; 240
    4602:	03 c0       	rjmp	.+6      	; 0x460a <decode_hexadecimal_string_bytes+0x4a>
    4604:	59 2f       	mov	r21, r25
    4606:	52 95       	swap	r21
    4608:	50 7f       	andi	r21, 0xF0	; 240
    460a:	2c 0f       	add	r18, r28
    460c:	3d 1f       	adc	r19, r29
    460e:	f9 01       	movw	r30, r18
    4610:	91 81       	ldd	r25, Z+1	; 0x01
    4612:	91 34       	cpi	r25, 0x41	; 65
    4614:	10 f0       	brcs	.+4      	; 0x461a <decode_hexadecimal_string_bytes+0x5a>
    4616:	97 53       	subi	r25, 0x37	; 55
    4618:	01 c0       	rjmp	.+2      	; 0x461c <decode_hexadecimal_string_bytes+0x5c>
    461a:	90 53       	subi	r25, 0x30	; 48
    461c:	95 0f       	add	r25, r21
    461e:	f8 01       	movw	r30, r16
    4620:	90 83       	st	Z, r25
    4622:	8f 5f       	subi	r24, 0xFF	; 255
    4624:	01 c0       	rjmp	.+2      	; 0x4628 <decode_hexadecimal_string_bytes+0x68>
    4626:	80 e0       	ldi	r24, 0x00	; 0
    4628:	28 2f       	mov	r18, r24
    462a:	22 0f       	add	r18, r18
    462c:	48 2f       	mov	r20, r24
    462e:	50 e0       	ldi	r21, 0x00	; 0
    4630:	fe 01       	movw	r30, r28
    4632:	01 90       	ld	r0, Z+
    4634:	00 20       	and	r0, r0
    4636:	e9 f7       	brne	.-6      	; 0x4632 <decode_hexadecimal_string_bytes+0x72>
    4638:	31 97       	sbiw	r30, 0x01	; 1
    463a:	ec 1b       	sub	r30, r28
    463c:	fd 0b       	sbc	r31, r29
    463e:	4e 17       	cp	r20, r30
    4640:	5f 07       	cpc	r21, r31
    4642:	10 f4       	brcc	.+4      	; 0x4648 <decode_hexadecimal_string_bytes+0x88>
    4644:	86 13       	cpse	r24, r22
    4646:	ce cf       	rjmp	.-100    	; 0x45e4 <decode_hexadecimal_string_bytes+0x24>
    4648:	df 91       	pop	r29
    464a:	cf 91       	pop	r28
    464c:	1f 91       	pop	r17
    464e:	0f 91       	pop	r16
    4650:	08 95       	ret

00004652 <reg_read_register>:
    4652:	fc 01       	movw	r30, r24
    4654:	80 81       	ld	r24, Z
    4656:	08 95       	ret

00004658 <reg_read_bit>:
    4658:	fc 01       	movw	r30, r24
    465a:	20 81       	ld	r18, Z
    465c:	81 e0       	ldi	r24, 0x01	; 1
    465e:	90 e0       	ldi	r25, 0x00	; 0
    4660:	02 c0       	rjmp	.+4      	; 0x4666 <reg_read_bit+0xe>
    4662:	88 0f       	add	r24, r24
    4664:	99 1f       	adc	r25, r25
    4666:	6a 95       	dec	r22
    4668:	e2 f7       	brpl	.-8      	; 0x4662 <reg_read_bit+0xa>
    466a:	82 23       	and	r24, r18
    466c:	08 95       	ret

0000466e <reg_read_bits>:
    466e:	fc 01       	movw	r30, r24
    4670:	80 81       	ld	r24, Z
    4672:	86 23       	and	r24, r22
    4674:	08 95       	ret

00004676 <reg_set_register>:
    4676:	fc 01       	movw	r30, r24
    4678:	60 83       	st	Z, r22
    467a:	08 95       	ret

0000467c <reg_clear_register>:
    467c:	fc 01       	movw	r30, r24
    467e:	10 82       	st	Z, r1
    4680:	08 95       	ret

00004682 <reg_set_bit>:
    4682:	fc 01       	movw	r30, r24
    4684:	40 81       	ld	r20, Z
    4686:	21 e0       	ldi	r18, 0x01	; 1
    4688:	30 e0       	ldi	r19, 0x00	; 0
    468a:	02 c0       	rjmp	.+4      	; 0x4690 <reg_set_bit+0xe>
    468c:	22 0f       	add	r18, r18
    468e:	33 1f       	adc	r19, r19
    4690:	6a 95       	dec	r22
    4692:	e2 f7       	brpl	.-8      	; 0x468c <reg_set_bit+0xa>
    4694:	24 2b       	or	r18, r20
    4696:	20 83       	st	Z, r18
    4698:	08 95       	ret

0000469a <reg_set_bits>:
    469a:	fc 01       	movw	r30, r24
    469c:	20 81       	ld	r18, Z
    469e:	62 2b       	or	r22, r18
    46a0:	60 83       	st	Z, r22
    46a2:	08 95       	ret

000046a4 <reg_toggle_bit>:
    46a4:	fc 01       	movw	r30, r24
    46a6:	40 81       	ld	r20, Z
    46a8:	21 e0       	ldi	r18, 0x01	; 1
    46aa:	30 e0       	ldi	r19, 0x00	; 0
    46ac:	02 c0       	rjmp	.+4      	; 0x46b2 <reg_toggle_bit+0xe>
    46ae:	22 0f       	add	r18, r18
    46b0:	33 1f       	adc	r19, r19
    46b2:	6a 95       	dec	r22
    46b4:	e2 f7       	brpl	.-8      	; 0x46ae <reg_toggle_bit+0xa>
    46b6:	24 27       	eor	r18, r20
    46b8:	20 83       	st	Z, r18
    46ba:	08 95       	ret

000046bc <reg_toggle_bits>:
    46bc:	fc 01       	movw	r30, r24
    46be:	20 81       	ld	r18, Z
    46c0:	62 27       	eor	r22, r18
    46c2:	60 83       	st	Z, r22
    46c4:	08 95       	ret

000046c6 <reg_clear_bit>:
    46c6:	fc 01       	movw	r30, r24
    46c8:	90 81       	ld	r25, Z
    46ca:	21 e0       	ldi	r18, 0x01	; 1
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	02 c0       	rjmp	.+4      	; 0x46d4 <reg_clear_bit+0xe>
    46d0:	22 0f       	add	r18, r18
    46d2:	33 1f       	adc	r19, r19
    46d4:	6a 95       	dec	r22
    46d6:	e2 f7       	brpl	.-8      	; 0x46d0 <reg_clear_bit+0xa>
    46d8:	20 95       	com	r18
    46da:	29 23       	and	r18, r25
    46dc:	20 83       	st	Z, r18
    46de:	08 95       	ret

000046e0 <reg_clear_bits>:
    46e0:	fc 01       	movw	r30, r24
    46e2:	90 81       	ld	r25, Z
    46e4:	60 95       	com	r22
    46e6:	69 23       	and	r22, r25
    46e8:	60 83       	st	Z, r22
    46ea:	08 95       	ret

000046ec <_serial_call_back>:
    46ec:	80 91 5b 1a 	lds	r24, 0x1A5B	; 0x801a5b <crc_sum.1941>
    46f0:	86 0f       	add	r24, r22
    46f2:	80 93 5b 1a 	sts	0x1A5B, r24	; 0x801a5b <crc_sum.1941>
    46f6:	90 91 5e 1a 	lds	r25, 0x1A5E	; 0x801a5e <_mh_state>
    46fa:	91 30       	cpi	r25, 0x01	; 1
    46fc:	79 f0       	breq	.+30     	; 0x471c <_serial_call_back+0x30>
    46fe:	28 f0       	brcs	.+10     	; 0x470a <_serial_call_back+0x1e>
    4700:	92 30       	cpi	r25, 0x02	; 2
    4702:	a9 f0       	breq	.+42     	; 0x472e <_serial_call_back+0x42>
    4704:	93 30       	cpi	r25, 0x03	; 3
    4706:	19 f1       	breq	.+70     	; 0x474e <_serial_call_back+0x62>
    4708:	08 95       	ret
    470a:	6f 3f       	cpi	r22, 0xFF	; 255
    470c:	09 f0       	breq	.+2      	; 0x4710 <_serial_call_back+0x24>
    470e:	48 c0       	rjmp	.+144    	; 0x47a0 <_serial_call_back+0xb4>
    4710:	10 92 5b 1a 	sts	0x1A5B, r1	; 0x801a5b <crc_sum.1941>
    4714:	81 e0       	ldi	r24, 0x01	; 1
    4716:	80 93 5e 1a 	sts	0x1A5E, r24	; 0x801a5e <_mh_state>
    471a:	08 95       	ret
    471c:	66 38       	cpi	r22, 0x86	; 134
    471e:	09 f0       	breq	.+2      	; 0x4722 <_serial_call_back+0x36>
    4720:	3f c0       	rjmp	.+126    	; 0x47a0 <_serial_call_back+0xb4>
    4722:	10 92 5a 1a 	sts	0x1A5A, r1	; 0x801a5a <inDex.1939>
    4726:	82 e0       	ldi	r24, 0x02	; 2
    4728:	80 93 5e 1a 	sts	0x1A5E, r24	; 0x801a5e <_mh_state>
    472c:	08 95       	ret
    472e:	e0 91 5a 1a 	lds	r30, 0x1A5A	; 0x801a5a <inDex.1939>
    4732:	81 e0       	ldi	r24, 0x01	; 1
    4734:	8e 0f       	add	r24, r30
    4736:	80 93 5a 1a 	sts	0x1A5A, r24	; 0x801a5a <inDex.1939>
    473a:	f0 e0       	ldi	r31, 0x00	; 0
    473c:	e8 5a       	subi	r30, 0xA8	; 168
    473e:	f5 4e       	sbci	r31, 0xE5	; 229
    4740:	60 83       	st	Z, r22
    4742:	82 30       	cpi	r24, 0x02	; 2
    4744:	69 f5       	brne	.+90     	; 0x47a0 <_serial_call_back+0xb4>
    4746:	83 e0       	ldi	r24, 0x03	; 3
    4748:	80 93 5e 1a 	sts	0x1A5E, r24	; 0x801a5e <_mh_state>
    474c:	08 95       	ret
    474e:	90 91 5a 1a 	lds	r25, 0x1A5A	; 0x801a5a <inDex.1939>
    4752:	21 e0       	ldi	r18, 0x01	; 1
    4754:	29 0f       	add	r18, r25
    4756:	20 93 5a 1a 	sts	0x1A5A, r18	; 0x801a5a <inDex.1939>
    475a:	96 30       	cpi	r25, 0x06	; 6
    475c:	09 f5       	brne	.+66     	; 0x47a0 <_serial_call_back+0xb4>
    475e:	81 11       	cpse	r24, r1
    4760:	0e c0       	rjmp	.+28     	; 0x477e <_serial_call_back+0x92>
    4762:	e8 e5       	ldi	r30, 0x58	; 88
    4764:	fa e1       	ldi	r31, 0x1A	; 26
    4766:	80 81       	ld	r24, Z
    4768:	90 e0       	ldi	r25, 0x00	; 0
    476a:	98 2f       	mov	r25, r24
    476c:	88 27       	eor	r24, r24
    476e:	21 81       	ldd	r18, Z+1	; 0x01
    4770:	82 0f       	add	r24, r18
    4772:	91 1d       	adc	r25, r1
    4774:	90 93 60 1a 	sts	0x1A60, r25	; 0x801a60 <_ppm+0x1>
    4778:	80 93 5f 1a 	sts	0x1A5F, r24	; 0x801a5f <_ppm>
    477c:	04 c0       	rjmp	.+8      	; 0x4786 <_serial_call_back+0x9a>
    477e:	10 92 60 1a 	sts	0x1A60, r1	; 0x801a60 <_ppm+0x1>
    4782:	10 92 5f 1a 	sts	0x1A5F, r1	; 0x801a5f <_ppm>
    4786:	10 92 5e 1a 	sts	0x1A5E, r1	; 0x801a5e <_mh_state>
    478a:	e0 91 5c 1a 	lds	r30, 0x1A5C	; 0x801a5c <_app_call_back>
    478e:	f0 91 5d 1a 	lds	r31, 0x1A5D	; 0x801a5d <_app_call_back+0x1>
    4792:	30 97       	sbiw	r30, 0x00	; 0
    4794:	29 f0       	breq	.+10     	; 0x47a0 <_serial_call_back+0xb4>
    4796:	80 91 5f 1a 	lds	r24, 0x1A5F	; 0x801a5f <_ppm>
    479a:	90 91 60 1a 	lds	r25, 0x1A60	; 0x801a60 <_ppm+0x1>
    479e:	19 95       	eicall
    47a0:	08 95       	ret

000047a2 <mh_z19_create>:
    47a2:	8f 92       	push	r8
    47a4:	9f 92       	push	r9
    47a6:	af 92       	push	r10
    47a8:	cf 92       	push	r12
    47aa:	ef 92       	push	r14
    47ac:	0f 93       	push	r16
    47ae:	cf 93       	push	r28
    47b0:	df 93       	push	r29
    47b2:	eb 01       	movw	r28, r22
    47b4:	0f 2e       	mov	r0, r31
    47b6:	f6 e7       	ldi	r31, 0x76	; 118
    47b8:	8f 2e       	mov	r8, r31
    47ba:	f3 e2       	ldi	r31, 0x23	; 35
    47bc:	9f 2e       	mov	r9, r31
    47be:	f0 2d       	mov	r31, r0
    47c0:	68 94       	set
    47c2:	aa 24       	eor	r10, r10
    47c4:	a4 f8       	bld	r10, 4
    47c6:	68 94       	set
    47c8:	cc 24       	eor	r12, r12
    47ca:	c4 f8       	bld	r12, 4
    47cc:	e1 2c       	mov	r14, r1
    47ce:	00 e0       	ldi	r16, 0x00	; 0
    47d0:	23 e0       	ldi	r18, 0x03	; 3
    47d2:	40 e8       	ldi	r20, 0x80	; 128
    47d4:	55 e2       	ldi	r21, 0x25	; 37
    47d6:	60 e0       	ldi	r22, 0x00	; 0
    47d8:	70 e0       	ldi	r23, 0x00	; 0
    47da:	40 d0       	rcall	.+128    	; 0x485c <serial_new_instance>
    47dc:	90 93 62 1a 	sts	0x1A62, r25	; 0x801a62 <_serial+0x1>
    47e0:	80 93 61 1a 	sts	0x1A61, r24	; 0x801a61 <_serial>
    47e4:	d0 93 5d 1a 	sts	0x1A5D, r29	; 0x801a5d <_app_call_back+0x1>
    47e8:	c0 93 5c 1a 	sts	0x1A5C, r28	; 0x801a5c <_app_call_back>
    47ec:	df 91       	pop	r29
    47ee:	cf 91       	pop	r28
    47f0:	0f 91       	pop	r16
    47f2:	ef 90       	pop	r14
    47f4:	cf 90       	pop	r12
    47f6:	af 90       	pop	r10
    47f8:	9f 90       	pop	r9
    47fa:	8f 90       	pop	r8
    47fc:	08 95       	ret

000047fe <mh_z19_take_meassuring>:
    47fe:	cf 93       	push	r28
    4800:	df 93       	push	r29
    4802:	cd b7       	in	r28, 0x3d	; 61
    4804:	de b7       	in	r29, 0x3e	; 62
    4806:	29 97       	sbiw	r28, 0x09	; 9
    4808:	0f b6       	in	r0, 0x3f	; 63
    480a:	f8 94       	cli
    480c:	de bf       	out	0x3e, r29	; 62
    480e:	0f be       	out	0x3f, r0	; 63
    4810:	cd bf       	out	0x3d, r28	; 61
    4812:	89 e0       	ldi	r24, 0x09	; 9
    4814:	e1 e4       	ldi	r30, 0x41	; 65
    4816:	f2 e0       	ldi	r31, 0x02	; 2
    4818:	9e 01       	movw	r18, r28
    481a:	2f 5f       	subi	r18, 0xFF	; 255
    481c:	3f 4f       	sbci	r19, 0xFF	; 255
    481e:	d9 01       	movw	r26, r18
    4820:	01 90       	ld	r0, Z+
    4822:	0d 92       	st	X+, r0
    4824:	8a 95       	dec	r24
    4826:	e1 f7       	brne	.-8      	; 0x4820 <mh_z19_take_meassuring+0x22>
    4828:	10 92 60 1a 	sts	0x1A60, r1	; 0x801a60 <_ppm+0x1>
    482c:	10 92 5f 1a 	sts	0x1A5F, r1	; 0x801a5f <_ppm>
    4830:	80 91 61 1a 	lds	r24, 0x1A61	; 0x801a61 <_serial>
    4834:	90 91 62 1a 	lds	r25, 0x1A62	; 0x801a62 <_serial+0x1>
    4838:	00 97       	sbiw	r24, 0x00	; 0
    483a:	31 f0       	breq	.+12     	; 0x4848 <mh_z19_take_meassuring+0x4a>
    483c:	42 2f       	mov	r20, r18
    483e:	53 2f       	mov	r21, r19
    4840:	69 e0       	ldi	r22, 0x09	; 9
    4842:	c8 d0       	rcall	.+400    	; 0x49d4 <serial_send_bytes>
    4844:	80 e0       	ldi	r24, 0x00	; 0
    4846:	01 c0       	rjmp	.+2      	; 0x484a <mh_z19_take_meassuring+0x4c>
    4848:	82 e0       	ldi	r24, 0x02	; 2
    484a:	29 96       	adiw	r28, 0x09	; 9
    484c:	0f b6       	in	r0, 0x3f	; 63
    484e:	f8 94       	cli
    4850:	de bf       	out	0x3e, r29	; 62
    4852:	0f be       	out	0x3f, r0	; 63
    4854:	cd bf       	out	0x3d, r28	; 61
    4856:	df 91       	pop	r29
    4858:	cf 91       	pop	r28
    485a:	08 95       	ret

0000485c <serial_new_instance>:
    485c:	2f 92       	push	r2
    485e:	3f 92       	push	r3
    4860:	4f 92       	push	r4
    4862:	5f 92       	push	r5
    4864:	6f 92       	push	r6
    4866:	7f 92       	push	r7
    4868:	8f 92       	push	r8
    486a:	9f 92       	push	r9
    486c:	af 92       	push	r10
    486e:	cf 92       	push	r12
    4870:	ef 92       	push	r14
    4872:	ff 92       	push	r15
    4874:	0f 93       	push	r16
    4876:	1f 93       	push	r17
    4878:	cf 93       	push	r28
    487a:	df 93       	push	r29
    487c:	cd b7       	in	r28, 0x3d	; 61
    487e:	de b7       	in	r29, 0x3e	; 62
    4880:	f8 2e       	mov	r15, r24
    4882:	2a 01       	movw	r4, r20
    4884:	3b 01       	movw	r6, r22
    4886:	88 e0       	ldi	r24, 0x08	; 8
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	4a d7       	rcall	.+3732   	; 0x5720 <malloc>
    488c:	8c 01       	movw	r16, r24
    488e:	8f 2d       	mov	r24, r15
    4890:	90 e0       	ldi	r25, 0x00	; 0
    4892:	88 0f       	add	r24, r24
    4894:	99 1f       	adc	r25, r25
    4896:	fc 01       	movw	r30, r24
    4898:	ed 59       	subi	r30, 0x9D	; 157
    489a:	f5 4e       	sbci	r31, 0xE5	; 229
    489c:	11 83       	std	Z+1, r17	; 0x01
    489e:	00 83       	st	Z, r16
    48a0:	fc 01       	movw	r30, r24
    48a2:	e6 5f       	subi	r30, 0xF6	; 246
    48a4:	fd 4f       	sbci	r31, 0xFD	; 253
    48a6:	80 81       	ld	r24, Z
    48a8:	91 81       	ldd	r25, Z+1	; 0x01
    48aa:	d8 01       	movw	r26, r16
    48ac:	8d 93       	st	X+, r24
    48ae:	9c 93       	st	X, r25
    48b0:	6c 2d       	mov	r22, r12
    48b2:	70 e0       	ldi	r23, 0x00	; 0
    48b4:	84 e0       	ldi	r24, 0x04	; 4
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	19 d7       	rcall	.+3634   	; 0x56ec <calloc>
    48ba:	1c 01       	movw	r2, r24
    48bc:	61 e0       	ldi	r22, 0x01	; 1
    48be:	70 e0       	ldi	r23, 0x00	; 0
    48c0:	86 e0       	ldi	r24, 0x06	; 6
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	13 d7       	rcall	.+3622   	; 0x56ec <calloc>
    48c6:	7c 01       	movw	r14, r24
    48c8:	4c 2d       	mov	r20, r12
    48ca:	b1 01       	movw	r22, r2
    48cc:	2c d5       	rcall	.+2648   	; 0x5326 <fifo_init>
    48ce:	f8 01       	movw	r30, r16
    48d0:	f5 82       	std	Z+5, r15	; 0x05
    48d2:	e4 82       	std	Z+4, r14	; 0x04
    48d4:	6a 2d       	mov	r22, r10
    48d6:	70 e0       	ldi	r23, 0x00	; 0
    48d8:	84 e0       	ldi	r24, 0x04	; 4
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	07 d7       	rcall	.+3598   	; 0x56ec <calloc>
    48de:	1c 01       	movw	r2, r24
    48e0:	61 e0       	ldi	r22, 0x01	; 1
    48e2:	70 e0       	ldi	r23, 0x00	; 0
    48e4:	86 e0       	ldi	r24, 0x06	; 6
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	01 d7       	rcall	.+3586   	; 0x56ec <calloc>
    48ea:	7c 01       	movw	r14, r24
    48ec:	4a 2d       	mov	r20, r10
    48ee:	b1 01       	movw	r22, r2
    48f0:	1a d5       	rcall	.+2612   	; 0x5326 <fifo_init>
    48f2:	d8 01       	movw	r26, r16
    48f4:	13 96       	adiw	r26, 0x03	; 3
    48f6:	fc 92       	st	X, r15
    48f8:	ee 92       	st	-X, r14
    48fa:	12 97       	sbiw	r26, 0x02	; 2
    48fc:	17 96       	adiw	r26, 0x07	; 7
    48fe:	9c 92       	st	X, r9
    4900:	8e 92       	st	-X, r8
    4902:	16 97       	sbiw	r26, 0x06	; 6
    4904:	ff b6       	in	r15, 0x3f	; 63
    4906:	f8 94       	cli
    4908:	ed 91       	ld	r30, X+
    490a:	fc 91       	ld	r31, X
    490c:	11 97       	sbiw	r26, 0x01	; 1
    490e:	36 97       	sbiw	r30, 0x06	; 6
    4910:	80 81       	ld	r24, Z
    4912:	82 60       	ori	r24, 0x02	; 2
    4914:	80 83       	st	Z, r24
    4916:	8d 90       	ld	r8, X+
    4918:	9c 90       	ld	r9, X
    491a:	c3 01       	movw	r24, r6
    491c:	b2 01       	movw	r22, r4
    491e:	f1 d5       	rcall	.+3042   	; 0x5502 <__floatunsisf>
    4920:	20 e0       	ldi	r18, 0x00	; 0
    4922:	30 e0       	ldi	r19, 0x00	; 0
    4924:	40 e0       	ldi	r20, 0x00	; 0
    4926:	51 e4       	ldi	r21, 0x41	; 65
    4928:	51 d6       	rcall	.+3234   	; 0x55cc <__mulsf3>
    492a:	9b 01       	movw	r18, r22
    492c:	ac 01       	movw	r20, r24
    492e:	60 e0       	ldi	r22, 0x00	; 0
    4930:	74 e2       	ldi	r23, 0x24	; 36
    4932:	84 e7       	ldi	r24, 0x74	; 116
    4934:	9b e4       	ldi	r25, 0x4B	; 75
    4936:	7a d5       	rcall	.+2804   	; 0x542c <__divsf3>
    4938:	20 e0       	ldi	r18, 0x00	; 0
    493a:	30 e0       	ldi	r19, 0x00	; 0
    493c:	40 e8       	ldi	r20, 0x80	; 128
    493e:	5f e3       	ldi	r21, 0x3F	; 63
    4940:	0e d5       	rcall	.+2588   	; 0x535e <__subsf3>
    4942:	0e 94 4c 1c 	call	0x3898	; 0x3898 <__fixunssfsi>
    4946:	f4 01       	movw	r30, r8
    4948:	32 97       	sbiw	r30, 0x02	; 2
    494a:	60 83       	st	Z, r22
    494c:	d8 01       	movw	r26, r16
    494e:	ed 91       	ld	r30, X+
    4950:	fc 91       	ld	r31, X
    4952:	11 97       	sbiw	r26, 0x01	; 1
    4954:	35 97       	sbiw	r30, 0x05	; 5
    4956:	88 e9       	ldi	r24, 0x98	; 152
    4958:	80 83       	st	Z, r24
    495a:	ed 91       	ld	r30, X+
    495c:	fc 91       	ld	r31, X
    495e:	34 97       	sbiw	r30, 0x04	; 4
    4960:	86 e0       	ldi	r24, 0x06	; 6
    4962:	80 83       	st	Z, r24
    4964:	ff be       	out	0x3f, r15	; 63
    4966:	c8 01       	movw	r24, r16
    4968:	df 91       	pop	r29
    496a:	cf 91       	pop	r28
    496c:	1f 91       	pop	r17
    496e:	0f 91       	pop	r16
    4970:	ff 90       	pop	r15
    4972:	ef 90       	pop	r14
    4974:	cf 90       	pop	r12
    4976:	af 90       	pop	r10
    4978:	9f 90       	pop	r9
    497a:	8f 90       	pop	r8
    497c:	7f 90       	pop	r7
    497e:	6f 90       	pop	r6
    4980:	5f 90       	pop	r5
    4982:	4f 90       	pop	r4
    4984:	3f 90       	pop	r3
    4986:	2f 90       	pop	r2
    4988:	08 95       	ret

0000498a <serial_send_byte>:
    498a:	cf 93       	push	r28
    498c:	df 93       	push	r29
    498e:	ec 01       	movw	r28, r24
    4990:	ea 81       	ldd	r30, Y+2	; 0x02
    4992:	fb 81       	ldd	r31, Y+3	; 0x03
    4994:	93 81       	ldd	r25, Z+3	; 0x03
    4996:	82 81       	ldd	r24, Z+2	; 0x02
    4998:	25 81       	ldd	r18, Z+5	; 0x05
    499a:	98 1b       	sub	r25, r24
    499c:	92 23       	and	r25, r18
    499e:	84 81       	ldd	r24, Z+4	; 0x04
    49a0:	98 17       	cp	r25, r24
    49a2:	a1 f0       	breq	.+40     	; 0x49cc <serial_send_byte+0x42>
    49a4:	93 81       	ldd	r25, Z+3	; 0x03
    49a6:	26 95       	lsr	r18
    49a8:	29 23       	and	r18, r25
    49aa:	a0 81       	ld	r26, Z
    49ac:	b1 81       	ldd	r27, Z+1	; 0x01
    49ae:	a2 0f       	add	r26, r18
    49b0:	b1 1d       	adc	r27, r1
    49b2:	6c 93       	st	X, r22
    49b4:	9f 5f       	subi	r25, 0xFF	; 255
    49b6:	25 81       	ldd	r18, Z+5	; 0x05
    49b8:	92 23       	and	r25, r18
    49ba:	93 83       	std	Z+3, r25	; 0x03
    49bc:	e8 81       	ld	r30, Y
    49be:	f9 81       	ldd	r31, Y+1	; 0x01
    49c0:	35 97       	sbiw	r30, 0x05	; 5
    49c2:	80 81       	ld	r24, Z
    49c4:	80 62       	ori	r24, 0x20	; 32
    49c6:	80 83       	st	Z, r24
    49c8:	80 e0       	ldi	r24, 0x00	; 0
    49ca:	01 c0       	rjmp	.+2      	; 0x49ce <serial_send_byte+0x44>
    49cc:	82 e0       	ldi	r24, 0x02	; 2
    49ce:	df 91       	pop	r29
    49d0:	cf 91       	pop	r28
    49d2:	08 95       	ret

000049d4 <serial_send_bytes>:
    49d4:	ef 92       	push	r14
    49d6:	ff 92       	push	r15
    49d8:	0f 93       	push	r16
    49da:	1f 93       	push	r17
    49dc:	cf 93       	push	r28
    49de:	df 93       	push	r29
    49e0:	7c 01       	movw	r14, r24
    49e2:	dc 01       	movw	r26, r24
    49e4:	12 96       	adiw	r26, 0x02	; 2
    49e6:	ed 91       	ld	r30, X+
    49e8:	fc 91       	ld	r31, X
    49ea:	13 97       	sbiw	r26, 0x03	; 3
    49ec:	93 81       	ldd	r25, Z+3	; 0x03
    49ee:	82 81       	ldd	r24, Z+2	; 0x02
    49f0:	98 1b       	sub	r25, r24
    49f2:	85 81       	ldd	r24, Z+5	; 0x05
    49f4:	98 23       	and	r25, r24
    49f6:	84 81       	ldd	r24, Z+4	; 0x04
    49f8:	89 1b       	sub	r24, r25
    49fa:	86 17       	cp	r24, r22
    49fc:	98 f1       	brcs	.+102    	; 0x4a64 <serial_send_bytes+0x90>
    49fe:	66 23       	and	r22, r22
    4a00:	41 f1       	breq	.+80     	; 0x4a52 <serial_send_bytes+0x7e>
    4a02:	84 2f       	mov	r24, r20
    4a04:	95 2f       	mov	r25, r21
    4a06:	dc 01       	movw	r26, r24
    4a08:	61 50       	subi	r22, 0x01	; 1
    4a0a:	46 2f       	mov	r20, r22
    4a0c:	50 e0       	ldi	r21, 0x00	; 0
    4a0e:	4f 5f       	subi	r20, 0xFF	; 255
    4a10:	5f 4f       	sbci	r21, 0xFF	; 255
    4a12:	48 0f       	add	r20, r24
    4a14:	59 1f       	adc	r21, r25
    4a16:	e7 01       	movw	r28, r14
    4a18:	ea 81       	ldd	r30, Y+2	; 0x02
    4a1a:	fb 81       	ldd	r31, Y+3	; 0x03
    4a1c:	93 81       	ldd	r25, Z+3	; 0x03
    4a1e:	82 81       	ldd	r24, Z+2	; 0x02
    4a20:	25 81       	ldd	r18, Z+5	; 0x05
    4a22:	98 1b       	sub	r25, r24
    4a24:	92 23       	and	r25, r18
    4a26:	84 81       	ldd	r24, Z+4	; 0x04
    4a28:	98 17       	cp	r25, r24
    4a2a:	79 f0       	breq	.+30     	; 0x4a4a <serial_send_bytes+0x76>
    4a2c:	8c 91       	ld	r24, X
    4a2e:	93 81       	ldd	r25, Z+3	; 0x03
    4a30:	26 95       	lsr	r18
    4a32:	29 23       	and	r18, r25
    4a34:	60 81       	ld	r22, Z
    4a36:	71 81       	ldd	r23, Z+1	; 0x01
    4a38:	8b 01       	movw	r16, r22
    4a3a:	02 0f       	add	r16, r18
    4a3c:	11 1d       	adc	r17, r1
    4a3e:	e8 01       	movw	r28, r16
    4a40:	88 83       	st	Y, r24
    4a42:	9f 5f       	subi	r25, 0xFF	; 255
    4a44:	85 81       	ldd	r24, Z+5	; 0x05
    4a46:	98 23       	and	r25, r24
    4a48:	93 83       	std	Z+3, r25	; 0x03
    4a4a:	11 96       	adiw	r26, 0x01	; 1
    4a4c:	a4 17       	cp	r26, r20
    4a4e:	b5 07       	cpc	r27, r21
    4a50:	11 f7       	brne	.-60     	; 0x4a16 <serial_send_bytes+0x42>
    4a52:	d7 01       	movw	r26, r14
    4a54:	ed 91       	ld	r30, X+
    4a56:	fc 91       	ld	r31, X
    4a58:	35 97       	sbiw	r30, 0x05	; 5
    4a5a:	80 81       	ld	r24, Z
    4a5c:	80 62       	ori	r24, 0x20	; 32
    4a5e:	80 83       	st	Z, r24
    4a60:	80 e0       	ldi	r24, 0x00	; 0
    4a62:	01 c0       	rjmp	.+2      	; 0x4a66 <serial_send_bytes+0x92>
    4a64:	82 e0       	ldi	r24, 0x02	; 2
    4a66:	df 91       	pop	r29
    4a68:	cf 91       	pop	r28
    4a6a:	1f 91       	pop	r17
    4a6c:	0f 91       	pop	r16
    4a6e:	ff 90       	pop	r15
    4a70:	ef 90       	pop	r14
    4a72:	08 95       	ret

00004a74 <serial_get_byte>:
    4a74:	dc 01       	movw	r26, r24
    4a76:	14 96       	adiw	r26, 0x04	; 4
    4a78:	ed 91       	ld	r30, X+
    4a7a:	fc 91       	ld	r31, X
    4a7c:	15 97       	sbiw	r26, 0x05	; 5
    4a7e:	93 81       	ldd	r25, Z+3	; 0x03
    4a80:	82 81       	ldd	r24, Z+2	; 0x02
    4a82:	98 17       	cp	r25, r24
    4a84:	89 f0       	breq	.+34     	; 0x4aa8 <serial_get_byte+0x34>
    4a86:	92 81       	ldd	r25, Z+2	; 0x02
    4a88:	85 81       	ldd	r24, Z+5	; 0x05
    4a8a:	86 95       	lsr	r24
    4a8c:	89 23       	and	r24, r25
    4a8e:	a0 81       	ld	r26, Z
    4a90:	b1 81       	ldd	r27, Z+1	; 0x01
    4a92:	a8 0f       	add	r26, r24
    4a94:	b1 1d       	adc	r27, r1
    4a96:	8c 91       	ld	r24, X
    4a98:	db 01       	movw	r26, r22
    4a9a:	8c 93       	st	X, r24
    4a9c:	9f 5f       	subi	r25, 0xFF	; 255
    4a9e:	85 81       	ldd	r24, Z+5	; 0x05
    4aa0:	98 23       	and	r25, r24
    4aa2:	92 83       	std	Z+2, r25	; 0x02
    4aa4:	80 e0       	ldi	r24, 0x00	; 0
    4aa6:	08 95       	ret
    4aa8:	83 e0       	ldi	r24, 0x03	; 3
    4aaa:	08 95       	ret

00004aac <__vector_25>:
    4aac:	1f 92       	push	r1
    4aae:	0f 92       	push	r0
    4ab0:	0f b6       	in	r0, 0x3f	; 63
    4ab2:	0f 92       	push	r0
    4ab4:	11 24       	eor	r1, r1
    4ab6:	0b b6       	in	r0, 0x3b	; 59
    4ab8:	0f 92       	push	r0
    4aba:	2f 93       	push	r18
    4abc:	3f 93       	push	r19
    4abe:	4f 93       	push	r20
    4ac0:	5f 93       	push	r21
    4ac2:	6f 93       	push	r22
    4ac4:	7f 93       	push	r23
    4ac6:	8f 93       	push	r24
    4ac8:	9f 93       	push	r25
    4aca:	af 93       	push	r26
    4acc:	bf 93       	push	r27
    4ace:	cf 93       	push	r28
    4ad0:	df 93       	push	r29
    4ad2:	ef 93       	push	r30
    4ad4:	ff 93       	push	r31
    4ad6:	a0 91 63 1a 	lds	r26, 0x1A63	; 0x801a63 <_ser_handle>
    4ada:	b0 91 64 1a 	lds	r27, 0x1A64	; 0x801a64 <_ser_handle+0x1>
    4ade:	10 97       	sbiw	r26, 0x00	; 0
    4ae0:	11 f1       	breq	.+68     	; 0x4b26 <__vector_25+0x7a>
    4ae2:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4ae6:	14 96       	adiw	r26, 0x04	; 4
    4ae8:	ed 91       	ld	r30, X+
    4aea:	fc 91       	ld	r31, X
    4aec:	15 97       	sbiw	r26, 0x05	; 5
    4aee:	93 81       	ldd	r25, Z+3	; 0x03
    4af0:	82 81       	ldd	r24, Z+2	; 0x02
    4af2:	25 81       	ldd	r18, Z+5	; 0x05
    4af4:	98 1b       	sub	r25, r24
    4af6:	92 23       	and	r25, r18
    4af8:	84 81       	ldd	r24, Z+4	; 0x04
    4afa:	98 17       	cp	r25, r24
    4afc:	61 f0       	breq	.+24     	; 0x4b16 <__vector_25+0x6a>
    4afe:	83 81       	ldd	r24, Z+3	; 0x03
    4b00:	26 95       	lsr	r18
    4b02:	28 23       	and	r18, r24
    4b04:	c0 81       	ld	r28, Z
    4b06:	d1 81       	ldd	r29, Z+1	; 0x01
    4b08:	c2 0f       	add	r28, r18
    4b0a:	d1 1d       	adc	r29, r1
    4b0c:	68 83       	st	Y, r22
    4b0e:	8f 5f       	subi	r24, 0xFF	; 255
    4b10:	95 81       	ldd	r25, Z+5	; 0x05
    4b12:	89 23       	and	r24, r25
    4b14:	83 83       	std	Z+3, r24	; 0x03
    4b16:	16 96       	adiw	r26, 0x06	; 6
    4b18:	ed 91       	ld	r30, X+
    4b1a:	fc 91       	ld	r31, X
    4b1c:	17 97       	sbiw	r26, 0x07	; 7
    4b1e:	30 97       	sbiw	r30, 0x00	; 0
    4b20:	11 f0       	breq	.+4      	; 0x4b26 <__vector_25+0x7a>
    4b22:	cd 01       	movw	r24, r26
    4b24:	19 95       	eicall
    4b26:	ff 91       	pop	r31
    4b28:	ef 91       	pop	r30
    4b2a:	df 91       	pop	r29
    4b2c:	cf 91       	pop	r28
    4b2e:	bf 91       	pop	r27
    4b30:	af 91       	pop	r26
    4b32:	9f 91       	pop	r25
    4b34:	8f 91       	pop	r24
    4b36:	7f 91       	pop	r23
    4b38:	6f 91       	pop	r22
    4b3a:	5f 91       	pop	r21
    4b3c:	4f 91       	pop	r20
    4b3e:	3f 91       	pop	r19
    4b40:	2f 91       	pop	r18
    4b42:	0f 90       	pop	r0
    4b44:	0b be       	out	0x3b, r0	; 59
    4b46:	0f 90       	pop	r0
    4b48:	0f be       	out	0x3f, r0	; 63
    4b4a:	0f 90       	pop	r0
    4b4c:	1f 90       	pop	r1
    4b4e:	18 95       	reti

00004b50 <__vector_26>:
    4b50:	1f 92       	push	r1
    4b52:	0f 92       	push	r0
    4b54:	0f b6       	in	r0, 0x3f	; 63
    4b56:	0f 92       	push	r0
    4b58:	11 24       	eor	r1, r1
    4b5a:	0b b6       	in	r0, 0x3b	; 59
    4b5c:	0f 92       	push	r0
    4b5e:	2f 93       	push	r18
    4b60:	8f 93       	push	r24
    4b62:	9f 93       	push	r25
    4b64:	af 93       	push	r26
    4b66:	bf 93       	push	r27
    4b68:	ef 93       	push	r30
    4b6a:	ff 93       	push	r31
    4b6c:	e0 91 63 1a 	lds	r30, 0x1A63	; 0x801a63 <_ser_handle>
    4b70:	f0 91 64 1a 	lds	r31, 0x1A64	; 0x801a64 <_ser_handle+0x1>
    4b74:	30 97       	sbiw	r30, 0x00	; 0
    4b76:	b9 f0       	breq	.+46     	; 0x4ba6 <__vector_26+0x56>
    4b78:	02 80       	ldd	r0, Z+2	; 0x02
    4b7a:	f3 81       	ldd	r31, Z+3	; 0x03
    4b7c:	e0 2d       	mov	r30, r0
    4b7e:	93 81       	ldd	r25, Z+3	; 0x03
    4b80:	82 81       	ldd	r24, Z+2	; 0x02
    4b82:	98 17       	cp	r25, r24
    4b84:	b1 f0       	breq	.+44     	; 0x4bb2 <__vector_26+0x62>
    4b86:	92 81       	ldd	r25, Z+2	; 0x02
    4b88:	85 81       	ldd	r24, Z+5	; 0x05
    4b8a:	28 2f       	mov	r18, r24
    4b8c:	26 95       	lsr	r18
    4b8e:	29 23       	and	r18, r25
    4b90:	a0 81       	ld	r26, Z
    4b92:	b1 81       	ldd	r27, Z+1	; 0x01
    4b94:	a2 0f       	add	r26, r18
    4b96:	b1 1d       	adc	r27, r1
    4b98:	2c 91       	ld	r18, X
    4b9a:	9f 5f       	subi	r25, 0xFF	; 255
    4b9c:	89 23       	and	r24, r25
    4b9e:	82 83       	std	Z+2, r24	; 0x02
    4ba0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4ba4:	0b c0       	rjmp	.+22     	; 0x4bbc <__vector_26+0x6c>
    4ba6:	e1 ec       	ldi	r30, 0xC1	; 193
    4ba8:	f0 e0       	ldi	r31, 0x00	; 0
    4baa:	80 81       	ld	r24, Z
    4bac:	8f 7d       	andi	r24, 0xDF	; 223
    4bae:	80 83       	st	Z, r24
    4bb0:	05 c0       	rjmp	.+10     	; 0x4bbc <__vector_26+0x6c>
    4bb2:	e1 ec       	ldi	r30, 0xC1	; 193
    4bb4:	f0 e0       	ldi	r31, 0x00	; 0
    4bb6:	80 81       	ld	r24, Z
    4bb8:	8f 7d       	andi	r24, 0xDF	; 223
    4bba:	80 83       	st	Z, r24
    4bbc:	ff 91       	pop	r31
    4bbe:	ef 91       	pop	r30
    4bc0:	bf 91       	pop	r27
    4bc2:	af 91       	pop	r26
    4bc4:	9f 91       	pop	r25
    4bc6:	8f 91       	pop	r24
    4bc8:	2f 91       	pop	r18
    4bca:	0f 90       	pop	r0
    4bcc:	0b be       	out	0x3b, r0	; 59
    4bce:	0f 90       	pop	r0
    4bd0:	0f be       	out	0x3f, r0	; 63
    4bd2:	0f 90       	pop	r0
    4bd4:	1f 90       	pop	r1
    4bd6:	18 95       	reti

00004bd8 <__vector_36>:
    4bd8:	1f 92       	push	r1
    4bda:	0f 92       	push	r0
    4bdc:	0f b6       	in	r0, 0x3f	; 63
    4bde:	0f 92       	push	r0
    4be0:	11 24       	eor	r1, r1
    4be2:	0b b6       	in	r0, 0x3b	; 59
    4be4:	0f 92       	push	r0
    4be6:	2f 93       	push	r18
    4be8:	3f 93       	push	r19
    4bea:	4f 93       	push	r20
    4bec:	5f 93       	push	r21
    4bee:	6f 93       	push	r22
    4bf0:	7f 93       	push	r23
    4bf2:	8f 93       	push	r24
    4bf4:	9f 93       	push	r25
    4bf6:	af 93       	push	r26
    4bf8:	bf 93       	push	r27
    4bfa:	cf 93       	push	r28
    4bfc:	df 93       	push	r29
    4bfe:	ef 93       	push	r30
    4c00:	ff 93       	push	r31
    4c02:	a0 91 65 1a 	lds	r26, 0x1A65	; 0x801a65 <_ser_handle+0x2>
    4c06:	b0 91 66 1a 	lds	r27, 0x1A66	; 0x801a66 <_ser_handle+0x3>
    4c0a:	10 97       	sbiw	r26, 0x00	; 0
    4c0c:	11 f1       	breq	.+68     	; 0x4c52 <__vector_36+0x7a>
    4c0e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4c12:	14 96       	adiw	r26, 0x04	; 4
    4c14:	ed 91       	ld	r30, X+
    4c16:	fc 91       	ld	r31, X
    4c18:	15 97       	sbiw	r26, 0x05	; 5
    4c1a:	93 81       	ldd	r25, Z+3	; 0x03
    4c1c:	82 81       	ldd	r24, Z+2	; 0x02
    4c1e:	25 81       	ldd	r18, Z+5	; 0x05
    4c20:	98 1b       	sub	r25, r24
    4c22:	92 23       	and	r25, r18
    4c24:	84 81       	ldd	r24, Z+4	; 0x04
    4c26:	98 17       	cp	r25, r24
    4c28:	61 f0       	breq	.+24     	; 0x4c42 <__vector_36+0x6a>
    4c2a:	83 81       	ldd	r24, Z+3	; 0x03
    4c2c:	26 95       	lsr	r18
    4c2e:	28 23       	and	r18, r24
    4c30:	c0 81       	ld	r28, Z
    4c32:	d1 81       	ldd	r29, Z+1	; 0x01
    4c34:	c2 0f       	add	r28, r18
    4c36:	d1 1d       	adc	r29, r1
    4c38:	68 83       	st	Y, r22
    4c3a:	8f 5f       	subi	r24, 0xFF	; 255
    4c3c:	95 81       	ldd	r25, Z+5	; 0x05
    4c3e:	89 23       	and	r24, r25
    4c40:	83 83       	std	Z+3, r24	; 0x03
    4c42:	16 96       	adiw	r26, 0x06	; 6
    4c44:	ed 91       	ld	r30, X+
    4c46:	fc 91       	ld	r31, X
    4c48:	17 97       	sbiw	r26, 0x07	; 7
    4c4a:	30 97       	sbiw	r30, 0x00	; 0
    4c4c:	11 f0       	breq	.+4      	; 0x4c52 <__vector_36+0x7a>
    4c4e:	cd 01       	movw	r24, r26
    4c50:	19 95       	eicall
    4c52:	ff 91       	pop	r31
    4c54:	ef 91       	pop	r30
    4c56:	df 91       	pop	r29
    4c58:	cf 91       	pop	r28
    4c5a:	bf 91       	pop	r27
    4c5c:	af 91       	pop	r26
    4c5e:	9f 91       	pop	r25
    4c60:	8f 91       	pop	r24
    4c62:	7f 91       	pop	r23
    4c64:	6f 91       	pop	r22
    4c66:	5f 91       	pop	r21
    4c68:	4f 91       	pop	r20
    4c6a:	3f 91       	pop	r19
    4c6c:	2f 91       	pop	r18
    4c6e:	0f 90       	pop	r0
    4c70:	0b be       	out	0x3b, r0	; 59
    4c72:	0f 90       	pop	r0
    4c74:	0f be       	out	0x3f, r0	; 63
    4c76:	0f 90       	pop	r0
    4c78:	1f 90       	pop	r1
    4c7a:	18 95       	reti

00004c7c <__vector_37>:
    4c7c:	1f 92       	push	r1
    4c7e:	0f 92       	push	r0
    4c80:	0f b6       	in	r0, 0x3f	; 63
    4c82:	0f 92       	push	r0
    4c84:	11 24       	eor	r1, r1
    4c86:	0b b6       	in	r0, 0x3b	; 59
    4c88:	0f 92       	push	r0
    4c8a:	2f 93       	push	r18
    4c8c:	8f 93       	push	r24
    4c8e:	9f 93       	push	r25
    4c90:	af 93       	push	r26
    4c92:	bf 93       	push	r27
    4c94:	ef 93       	push	r30
    4c96:	ff 93       	push	r31
    4c98:	e0 91 65 1a 	lds	r30, 0x1A65	; 0x801a65 <_ser_handle+0x2>
    4c9c:	f0 91 66 1a 	lds	r31, 0x1A66	; 0x801a66 <_ser_handle+0x3>
    4ca0:	30 97       	sbiw	r30, 0x00	; 0
    4ca2:	b9 f0       	breq	.+46     	; 0x4cd2 <__vector_37+0x56>
    4ca4:	02 80       	ldd	r0, Z+2	; 0x02
    4ca6:	f3 81       	ldd	r31, Z+3	; 0x03
    4ca8:	e0 2d       	mov	r30, r0
    4caa:	93 81       	ldd	r25, Z+3	; 0x03
    4cac:	82 81       	ldd	r24, Z+2	; 0x02
    4cae:	98 17       	cp	r25, r24
    4cb0:	b1 f0       	breq	.+44     	; 0x4cde <__vector_37+0x62>
    4cb2:	92 81       	ldd	r25, Z+2	; 0x02
    4cb4:	85 81       	ldd	r24, Z+5	; 0x05
    4cb6:	28 2f       	mov	r18, r24
    4cb8:	26 95       	lsr	r18
    4cba:	29 23       	and	r18, r25
    4cbc:	a0 81       	ld	r26, Z
    4cbe:	b1 81       	ldd	r27, Z+1	; 0x01
    4cc0:	a2 0f       	add	r26, r18
    4cc2:	b1 1d       	adc	r27, r1
    4cc4:	2c 91       	ld	r18, X
    4cc6:	9f 5f       	subi	r25, 0xFF	; 255
    4cc8:	89 23       	and	r24, r25
    4cca:	82 83       	std	Z+2, r24	; 0x02
    4ccc:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4cd0:	0b c0       	rjmp	.+22     	; 0x4ce8 <__vector_37+0x6c>
    4cd2:	e9 ec       	ldi	r30, 0xC9	; 201
    4cd4:	f0 e0       	ldi	r31, 0x00	; 0
    4cd6:	80 81       	ld	r24, Z
    4cd8:	8f 7d       	andi	r24, 0xDF	; 223
    4cda:	80 83       	st	Z, r24
    4cdc:	05 c0       	rjmp	.+10     	; 0x4ce8 <__vector_37+0x6c>
    4cde:	e9 ec       	ldi	r30, 0xC9	; 201
    4ce0:	f0 e0       	ldi	r31, 0x00	; 0
    4ce2:	80 81       	ld	r24, Z
    4ce4:	8f 7d       	andi	r24, 0xDF	; 223
    4ce6:	80 83       	st	Z, r24
    4ce8:	ff 91       	pop	r31
    4cea:	ef 91       	pop	r30
    4cec:	bf 91       	pop	r27
    4cee:	af 91       	pop	r26
    4cf0:	9f 91       	pop	r25
    4cf2:	8f 91       	pop	r24
    4cf4:	2f 91       	pop	r18
    4cf6:	0f 90       	pop	r0
    4cf8:	0b be       	out	0x3b, r0	; 59
    4cfa:	0f 90       	pop	r0
    4cfc:	0f be       	out	0x3f, r0	; 63
    4cfe:	0f 90       	pop	r0
    4d00:	1f 90       	pop	r1
    4d02:	18 95       	reti

00004d04 <__vector_51>:
    4d04:	1f 92       	push	r1
    4d06:	0f 92       	push	r0
    4d08:	0f b6       	in	r0, 0x3f	; 63
    4d0a:	0f 92       	push	r0
    4d0c:	11 24       	eor	r1, r1
    4d0e:	0b b6       	in	r0, 0x3b	; 59
    4d10:	0f 92       	push	r0
    4d12:	2f 93       	push	r18
    4d14:	3f 93       	push	r19
    4d16:	4f 93       	push	r20
    4d18:	5f 93       	push	r21
    4d1a:	6f 93       	push	r22
    4d1c:	7f 93       	push	r23
    4d1e:	8f 93       	push	r24
    4d20:	9f 93       	push	r25
    4d22:	af 93       	push	r26
    4d24:	bf 93       	push	r27
    4d26:	cf 93       	push	r28
    4d28:	df 93       	push	r29
    4d2a:	ef 93       	push	r30
    4d2c:	ff 93       	push	r31
    4d2e:	a0 91 67 1a 	lds	r26, 0x1A67	; 0x801a67 <_ser_handle+0x4>
    4d32:	b0 91 68 1a 	lds	r27, 0x1A68	; 0x801a68 <_ser_handle+0x5>
    4d36:	10 97       	sbiw	r26, 0x00	; 0
    4d38:	11 f1       	breq	.+68     	; 0x4d7e <__vector_51+0x7a>
    4d3a:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4d3e:	14 96       	adiw	r26, 0x04	; 4
    4d40:	ed 91       	ld	r30, X+
    4d42:	fc 91       	ld	r31, X
    4d44:	15 97       	sbiw	r26, 0x05	; 5
    4d46:	93 81       	ldd	r25, Z+3	; 0x03
    4d48:	82 81       	ldd	r24, Z+2	; 0x02
    4d4a:	25 81       	ldd	r18, Z+5	; 0x05
    4d4c:	98 1b       	sub	r25, r24
    4d4e:	92 23       	and	r25, r18
    4d50:	84 81       	ldd	r24, Z+4	; 0x04
    4d52:	98 17       	cp	r25, r24
    4d54:	61 f0       	breq	.+24     	; 0x4d6e <__vector_51+0x6a>
    4d56:	83 81       	ldd	r24, Z+3	; 0x03
    4d58:	26 95       	lsr	r18
    4d5a:	28 23       	and	r18, r24
    4d5c:	c0 81       	ld	r28, Z
    4d5e:	d1 81       	ldd	r29, Z+1	; 0x01
    4d60:	c2 0f       	add	r28, r18
    4d62:	d1 1d       	adc	r29, r1
    4d64:	68 83       	st	Y, r22
    4d66:	8f 5f       	subi	r24, 0xFF	; 255
    4d68:	95 81       	ldd	r25, Z+5	; 0x05
    4d6a:	89 23       	and	r24, r25
    4d6c:	83 83       	std	Z+3, r24	; 0x03
    4d6e:	16 96       	adiw	r26, 0x06	; 6
    4d70:	ed 91       	ld	r30, X+
    4d72:	fc 91       	ld	r31, X
    4d74:	17 97       	sbiw	r26, 0x07	; 7
    4d76:	30 97       	sbiw	r30, 0x00	; 0
    4d78:	11 f0       	breq	.+4      	; 0x4d7e <__vector_51+0x7a>
    4d7a:	cd 01       	movw	r24, r26
    4d7c:	19 95       	eicall
    4d7e:	ff 91       	pop	r31
    4d80:	ef 91       	pop	r30
    4d82:	df 91       	pop	r29
    4d84:	cf 91       	pop	r28
    4d86:	bf 91       	pop	r27
    4d88:	af 91       	pop	r26
    4d8a:	9f 91       	pop	r25
    4d8c:	8f 91       	pop	r24
    4d8e:	7f 91       	pop	r23
    4d90:	6f 91       	pop	r22
    4d92:	5f 91       	pop	r21
    4d94:	4f 91       	pop	r20
    4d96:	3f 91       	pop	r19
    4d98:	2f 91       	pop	r18
    4d9a:	0f 90       	pop	r0
    4d9c:	0b be       	out	0x3b, r0	; 59
    4d9e:	0f 90       	pop	r0
    4da0:	0f be       	out	0x3f, r0	; 63
    4da2:	0f 90       	pop	r0
    4da4:	1f 90       	pop	r1
    4da6:	18 95       	reti

00004da8 <__vector_52>:
    4da8:	1f 92       	push	r1
    4daa:	0f 92       	push	r0
    4dac:	0f b6       	in	r0, 0x3f	; 63
    4dae:	0f 92       	push	r0
    4db0:	11 24       	eor	r1, r1
    4db2:	0b b6       	in	r0, 0x3b	; 59
    4db4:	0f 92       	push	r0
    4db6:	2f 93       	push	r18
    4db8:	8f 93       	push	r24
    4dba:	9f 93       	push	r25
    4dbc:	af 93       	push	r26
    4dbe:	bf 93       	push	r27
    4dc0:	ef 93       	push	r30
    4dc2:	ff 93       	push	r31
    4dc4:	e0 91 67 1a 	lds	r30, 0x1A67	; 0x801a67 <_ser_handle+0x4>
    4dc8:	f0 91 68 1a 	lds	r31, 0x1A68	; 0x801a68 <_ser_handle+0x5>
    4dcc:	30 97       	sbiw	r30, 0x00	; 0
    4dce:	b9 f0       	breq	.+46     	; 0x4dfe <__vector_52+0x56>
    4dd0:	02 80       	ldd	r0, Z+2	; 0x02
    4dd2:	f3 81       	ldd	r31, Z+3	; 0x03
    4dd4:	e0 2d       	mov	r30, r0
    4dd6:	93 81       	ldd	r25, Z+3	; 0x03
    4dd8:	82 81       	ldd	r24, Z+2	; 0x02
    4dda:	98 17       	cp	r25, r24
    4ddc:	b1 f0       	breq	.+44     	; 0x4e0a <__vector_52+0x62>
    4dde:	92 81       	ldd	r25, Z+2	; 0x02
    4de0:	85 81       	ldd	r24, Z+5	; 0x05
    4de2:	28 2f       	mov	r18, r24
    4de4:	26 95       	lsr	r18
    4de6:	29 23       	and	r18, r25
    4de8:	a0 81       	ld	r26, Z
    4dea:	b1 81       	ldd	r27, Z+1	; 0x01
    4dec:	a2 0f       	add	r26, r18
    4dee:	b1 1d       	adc	r27, r1
    4df0:	2c 91       	ld	r18, X
    4df2:	9f 5f       	subi	r25, 0xFF	; 255
    4df4:	89 23       	and	r24, r25
    4df6:	82 83       	std	Z+2, r24	; 0x02
    4df8:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4dfc:	0b c0       	rjmp	.+22     	; 0x4e14 <__vector_52+0x6c>
    4dfe:	e1 ed       	ldi	r30, 0xD1	; 209
    4e00:	f0 e0       	ldi	r31, 0x00	; 0
    4e02:	80 81       	ld	r24, Z
    4e04:	8f 7d       	andi	r24, 0xDF	; 223
    4e06:	80 83       	st	Z, r24
    4e08:	05 c0       	rjmp	.+10     	; 0x4e14 <__vector_52+0x6c>
    4e0a:	e1 ed       	ldi	r30, 0xD1	; 209
    4e0c:	f0 e0       	ldi	r31, 0x00	; 0
    4e0e:	80 81       	ld	r24, Z
    4e10:	8f 7d       	andi	r24, 0xDF	; 223
    4e12:	80 83       	st	Z, r24
    4e14:	ff 91       	pop	r31
    4e16:	ef 91       	pop	r30
    4e18:	bf 91       	pop	r27
    4e1a:	af 91       	pop	r26
    4e1c:	9f 91       	pop	r25
    4e1e:	8f 91       	pop	r24
    4e20:	2f 91       	pop	r18
    4e22:	0f 90       	pop	r0
    4e24:	0b be       	out	0x3b, r0	; 59
    4e26:	0f 90       	pop	r0
    4e28:	0f be       	out	0x3f, r0	; 63
    4e2a:	0f 90       	pop	r0
    4e2c:	1f 90       	pop	r1
    4e2e:	18 95       	reti

00004e30 <__vector_54>:
    4e30:	1f 92       	push	r1
    4e32:	0f 92       	push	r0
    4e34:	0f b6       	in	r0, 0x3f	; 63
    4e36:	0f 92       	push	r0
    4e38:	11 24       	eor	r1, r1
    4e3a:	0b b6       	in	r0, 0x3b	; 59
    4e3c:	0f 92       	push	r0
    4e3e:	2f 93       	push	r18
    4e40:	3f 93       	push	r19
    4e42:	4f 93       	push	r20
    4e44:	5f 93       	push	r21
    4e46:	6f 93       	push	r22
    4e48:	7f 93       	push	r23
    4e4a:	8f 93       	push	r24
    4e4c:	9f 93       	push	r25
    4e4e:	af 93       	push	r26
    4e50:	bf 93       	push	r27
    4e52:	cf 93       	push	r28
    4e54:	df 93       	push	r29
    4e56:	ef 93       	push	r30
    4e58:	ff 93       	push	r31
    4e5a:	a0 91 69 1a 	lds	r26, 0x1A69	; 0x801a69 <_ser_handle+0x6>
    4e5e:	b0 91 6a 1a 	lds	r27, 0x1A6A	; 0x801a6a <_ser_handle+0x7>
    4e62:	10 97       	sbiw	r26, 0x00	; 0
    4e64:	11 f1       	breq	.+68     	; 0x4eaa <__vector_54+0x7a>
    4e66:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4e6a:	14 96       	adiw	r26, 0x04	; 4
    4e6c:	ed 91       	ld	r30, X+
    4e6e:	fc 91       	ld	r31, X
    4e70:	15 97       	sbiw	r26, 0x05	; 5
    4e72:	93 81       	ldd	r25, Z+3	; 0x03
    4e74:	82 81       	ldd	r24, Z+2	; 0x02
    4e76:	25 81       	ldd	r18, Z+5	; 0x05
    4e78:	98 1b       	sub	r25, r24
    4e7a:	92 23       	and	r25, r18
    4e7c:	84 81       	ldd	r24, Z+4	; 0x04
    4e7e:	98 17       	cp	r25, r24
    4e80:	61 f0       	breq	.+24     	; 0x4e9a <__vector_54+0x6a>
    4e82:	83 81       	ldd	r24, Z+3	; 0x03
    4e84:	26 95       	lsr	r18
    4e86:	28 23       	and	r18, r24
    4e88:	c0 81       	ld	r28, Z
    4e8a:	d1 81       	ldd	r29, Z+1	; 0x01
    4e8c:	c2 0f       	add	r28, r18
    4e8e:	d1 1d       	adc	r29, r1
    4e90:	68 83       	st	Y, r22
    4e92:	8f 5f       	subi	r24, 0xFF	; 255
    4e94:	95 81       	ldd	r25, Z+5	; 0x05
    4e96:	89 23       	and	r24, r25
    4e98:	83 83       	std	Z+3, r24	; 0x03
    4e9a:	16 96       	adiw	r26, 0x06	; 6
    4e9c:	ed 91       	ld	r30, X+
    4e9e:	fc 91       	ld	r31, X
    4ea0:	17 97       	sbiw	r26, 0x07	; 7
    4ea2:	30 97       	sbiw	r30, 0x00	; 0
    4ea4:	11 f0       	breq	.+4      	; 0x4eaa <__vector_54+0x7a>
    4ea6:	cd 01       	movw	r24, r26
    4ea8:	19 95       	eicall
    4eaa:	ff 91       	pop	r31
    4eac:	ef 91       	pop	r30
    4eae:	df 91       	pop	r29
    4eb0:	cf 91       	pop	r28
    4eb2:	bf 91       	pop	r27
    4eb4:	af 91       	pop	r26
    4eb6:	9f 91       	pop	r25
    4eb8:	8f 91       	pop	r24
    4eba:	7f 91       	pop	r23
    4ebc:	6f 91       	pop	r22
    4ebe:	5f 91       	pop	r21
    4ec0:	4f 91       	pop	r20
    4ec2:	3f 91       	pop	r19
    4ec4:	2f 91       	pop	r18
    4ec6:	0f 90       	pop	r0
    4ec8:	0b be       	out	0x3b, r0	; 59
    4eca:	0f 90       	pop	r0
    4ecc:	0f be       	out	0x3f, r0	; 63
    4ece:	0f 90       	pop	r0
    4ed0:	1f 90       	pop	r1
    4ed2:	18 95       	reti

00004ed4 <__vector_55>:
    4ed4:	1f 92       	push	r1
    4ed6:	0f 92       	push	r0
    4ed8:	0f b6       	in	r0, 0x3f	; 63
    4eda:	0f 92       	push	r0
    4edc:	11 24       	eor	r1, r1
    4ede:	0b b6       	in	r0, 0x3b	; 59
    4ee0:	0f 92       	push	r0
    4ee2:	2f 93       	push	r18
    4ee4:	8f 93       	push	r24
    4ee6:	9f 93       	push	r25
    4ee8:	af 93       	push	r26
    4eea:	bf 93       	push	r27
    4eec:	ef 93       	push	r30
    4eee:	ff 93       	push	r31
    4ef0:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <_ser_handle+0x6>
    4ef4:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <_ser_handle+0x7>
    4ef8:	30 97       	sbiw	r30, 0x00	; 0
    4efa:	b9 f0       	breq	.+46     	; 0x4f2a <__vector_55+0x56>
    4efc:	02 80       	ldd	r0, Z+2	; 0x02
    4efe:	f3 81       	ldd	r31, Z+3	; 0x03
    4f00:	e0 2d       	mov	r30, r0
    4f02:	93 81       	ldd	r25, Z+3	; 0x03
    4f04:	82 81       	ldd	r24, Z+2	; 0x02
    4f06:	98 17       	cp	r25, r24
    4f08:	b1 f0       	breq	.+44     	; 0x4f36 <__vector_55+0x62>
    4f0a:	92 81       	ldd	r25, Z+2	; 0x02
    4f0c:	85 81       	ldd	r24, Z+5	; 0x05
    4f0e:	28 2f       	mov	r18, r24
    4f10:	26 95       	lsr	r18
    4f12:	29 23       	and	r18, r25
    4f14:	a0 81       	ld	r26, Z
    4f16:	b1 81       	ldd	r27, Z+1	; 0x01
    4f18:	a2 0f       	add	r26, r18
    4f1a:	b1 1d       	adc	r27, r1
    4f1c:	2c 91       	ld	r18, X
    4f1e:	9f 5f       	subi	r25, 0xFF	; 255
    4f20:	89 23       	and	r24, r25
    4f22:	82 83       	std	Z+2, r24	; 0x02
    4f24:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4f28:	0b c0       	rjmp	.+22     	; 0x4f40 <__vector_55+0x6c>
    4f2a:	e1 e3       	ldi	r30, 0x31	; 49
    4f2c:	f1 e0       	ldi	r31, 0x01	; 1
    4f2e:	80 81       	ld	r24, Z
    4f30:	8f 7d       	andi	r24, 0xDF	; 223
    4f32:	80 83       	st	Z, r24
    4f34:	05 c0       	rjmp	.+10     	; 0x4f40 <__vector_55+0x6c>
    4f36:	e1 e3       	ldi	r30, 0x31	; 49
    4f38:	f1 e0       	ldi	r31, 0x01	; 1
    4f3a:	80 81       	ld	r24, Z
    4f3c:	8f 7d       	andi	r24, 0xDF	; 223
    4f3e:	80 83       	st	Z, r24
    4f40:	ff 91       	pop	r31
    4f42:	ef 91       	pop	r30
    4f44:	bf 91       	pop	r27
    4f46:	af 91       	pop	r26
    4f48:	9f 91       	pop	r25
    4f4a:	8f 91       	pop	r24
    4f4c:	2f 91       	pop	r18
    4f4e:	0f 90       	pop	r0
    4f50:	0b be       	out	0x3b, r0	; 59
    4f52:	0f 90       	pop	r0
    4f54:	0f be       	out	0x3f, r0	; 63
    4f56:	0f 90       	pop	r0
    4f58:	1f 90       	pop	r1
    4f5a:	18 95       	reti

00004f5c <usart_getchar>:
    4f5c:	cf 93       	push	r28
    4f5e:	df 93       	push	r29
    4f60:	1f 92       	push	r1
    4f62:	cd b7       	in	r28, 0x3d	; 61
    4f64:	de b7       	in	r29, 0x3e	; 62
    4f66:	be 01       	movw	r22, r28
    4f68:	6f 5f       	subi	r22, 0xFF	; 255
    4f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    4f6c:	80 91 6b 1a 	lds	r24, 0x1A6B	; 0x801a6b <_com_serial_instance>
    4f70:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <_com_serial_instance+0x1>
    4f74:	7f dd       	rcall	.-1282   	; 0x4a74 <serial_get_byte>
    4f76:	81 11       	cpse	r24, r1
    4f78:	f6 cf       	rjmp	.-20     	; 0x4f66 <usart_getchar+0xa>
    4f7a:	89 81       	ldd	r24, Y+1	; 0x01
    4f7c:	90 e0       	ldi	r25, 0x00	; 0
    4f7e:	0f 90       	pop	r0
    4f80:	df 91       	pop	r29
    4f82:	cf 91       	pop	r28
    4f84:	08 95       	ret

00004f86 <usart_putchar>:
    4f86:	68 2f       	mov	r22, r24
    4f88:	80 91 6b 1a 	lds	r24, 0x1A6B	; 0x801a6b <_com_serial_instance>
    4f8c:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <_com_serial_instance+0x1>
    4f90:	fc dc       	rcall	.-1544   	; 0x498a <serial_send_byte>
    4f92:	80 e0       	ldi	r24, 0x00	; 0
    4f94:	90 e0       	ldi	r25, 0x00	; 0
    4f96:	08 95       	ret

00004f98 <stdioCreate>:
    4f98:	8f 92       	push	r8
    4f9a:	9f 92       	push	r9
    4f9c:	af 92       	push	r10
    4f9e:	cf 92       	push	r12
    4fa0:	ef 92       	push	r14
    4fa2:	0f 93       	push	r16
    4fa4:	81 2c       	mov	r8, r1
    4fa6:	91 2c       	mov	r9, r1
    4fa8:	68 94       	set
    4faa:	aa 24       	eor	r10, r10
    4fac:	a7 f8       	bld	r10, 7
    4fae:	68 94       	set
    4fb0:	cc 24       	eor	r12, r12
    4fb2:	c7 f8       	bld	r12, 7
    4fb4:	e1 2c       	mov	r14, r1
    4fb6:	00 e0       	ldi	r16, 0x00	; 0
    4fb8:	23 e0       	ldi	r18, 0x03	; 3
    4fba:	40 e0       	ldi	r20, 0x00	; 0
    4fbc:	51 ee       	ldi	r21, 0xE1	; 225
    4fbe:	60 e0       	ldi	r22, 0x00	; 0
    4fc0:	70 e0       	ldi	r23, 0x00	; 0
    4fc2:	4c dc       	rcall	.-1896   	; 0x485c <serial_new_instance>
    4fc4:	90 93 6c 1a 	sts	0x1A6C, r25	; 0x801a6c <_com_serial_instance+0x1>
    4fc8:	80 93 6b 1a 	sts	0x1A6B, r24	; 0x801a6b <_com_serial_instance>
    4fcc:	e7 ec       	ldi	r30, 0xC7	; 199
    4fce:	fa e1       	ldi	r31, 0x1A	; 26
    4fd0:	82 e1       	ldi	r24, 0x12	; 18
    4fd2:	92 e0       	ldi	r25, 0x02	; 2
    4fd4:	91 83       	std	Z+1, r25	; 0x01
    4fd6:	80 83       	st	Z, r24
    4fd8:	93 83       	std	Z+3, r25	; 0x03
    4fda:	82 83       	std	Z+2, r24	; 0x02
    4fdc:	0f 91       	pop	r16
    4fde:	ef 90       	pop	r14
    4fe0:	cf 90       	pop	r12
    4fe2:	af 90       	pop	r10
    4fe4:	9f 90       	pop	r9
    4fe6:	8f 90       	pop	r8
    4fe8:	08 95       	ret

00004fea <_initTwiInterface>:
    4fea:	80 91 7b 1a 	lds	r24, 0x1A7B	; 0x801a7b <_twiIsInitiated>
    4fee:	81 11       	cpse	r24, r1
    4ff0:	0c c0       	rjmp	.+24     	; 0x500a <_initTwiInterface+0x20>
    4ff2:	8c e0       	ldi	r24, 0x0C	; 12
    4ff4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4ff8:	8f ef       	ldi	r24, 0xFF	; 255
    4ffa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4ffe:	84 e0       	ldi	r24, 0x04	; 4
    5000:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5004:	81 e0       	ldi	r24, 0x01	; 1
    5006:	80 93 7b 1a 	sts	0x1A7B, r24	; 0x801a7b <_twiIsInitiated>
    500a:	08 95       	ret

0000500c <twiCreate>:
    500c:	af 92       	push	r10
    500e:	bf 92       	push	r11
    5010:	cf 92       	push	r12
    5012:	df 92       	push	r13
    5014:	ef 92       	push	r14
    5016:	ff 92       	push	r15
    5018:	0f 93       	push	r16
    501a:	1f 93       	push	r17
    501c:	cf 93       	push	r28
    501e:	df 93       	push	r29
    5020:	a8 2e       	mov	r10, r24
    5022:	b6 2e       	mov	r11, r22
    5024:	69 01       	movw	r12, r18
    5026:	7a 01       	movw	r14, r20
    5028:	84 e0       	ldi	r24, 0x04	; 4
    502a:	90 e0       	ldi	r25, 0x00	; 0
    502c:	79 d3       	rcall	.+1778   	; 0x5720 <malloc>
    502e:	ec 01       	movw	r28, r24
    5030:	89 2b       	or	r24, r25
    5032:	61 f1       	breq	.+88     	; 0x508c <twiCreate+0x80>
    5034:	a8 82       	st	Y, r10
    5036:	81 e0       	ldi	r24, 0x01	; 1
    5038:	b8 12       	cpse	r11, r24
    503a:	12 c0       	rjmp	.+36     	; 0x5060 <twiCreate+0x54>
    503c:	c7 01       	movw	r24, r14
    503e:	b6 01       	movw	r22, r12
    5040:	20 ea       	ldi	r18, 0xA0	; 160
    5042:	36 e8       	ldi	r19, 0x86	; 134
    5044:	41 e0       	ldi	r20, 0x01	; 1
    5046:	50 e0       	ldi	r21, 0x00	; 0
    5048:	27 d3       	rcall	.+1614   	; 0x5698 <__udivmodsi4>
    504a:	da 01       	movw	r26, r20
    504c:	c9 01       	movw	r24, r18
    504e:	40 97       	sbiw	r24, 0x10	; 16
    5050:	a1 09       	sbc	r26, r1
    5052:	b1 09       	sbc	r27, r1
    5054:	b6 95       	lsr	r27
    5056:	a7 95       	ror	r26
    5058:	97 95       	ror	r25
    505a:	87 95       	ror	r24
    505c:	89 83       	std	Y+1, r24	; 0x01
    505e:	11 c0       	rjmp	.+34     	; 0x5082 <twiCreate+0x76>
    5060:	c7 01       	movw	r24, r14
    5062:	b6 01       	movw	r22, r12
    5064:	20 e8       	ldi	r18, 0x80	; 128
    5066:	3a e1       	ldi	r19, 0x1A	; 26
    5068:	46 e0       	ldi	r20, 0x06	; 6
    506a:	50 e0       	ldi	r21, 0x00	; 0
    506c:	15 d3       	rcall	.+1578   	; 0x5698 <__udivmodsi4>
    506e:	da 01       	movw	r26, r20
    5070:	c9 01       	movw	r24, r18
    5072:	40 97       	sbiw	r24, 0x10	; 16
    5074:	a1 09       	sbc	r26, r1
    5076:	b1 09       	sbc	r27, r1
    5078:	b6 95       	lsr	r27
    507a:	a7 95       	ror	r26
    507c:	97 95       	ror	r25
    507e:	87 95       	ror	r24
    5080:	89 83       	std	Y+1, r24	; 0x01
    5082:	1b 83       	std	Y+3, r17	; 0x03
    5084:	0a 83       	std	Y+2, r16	; 0x02
    5086:	8c 2f       	mov	r24, r28
    5088:	9d 2f       	mov	r25, r29
    508a:	02 c0       	rjmp	.+4      	; 0x5090 <twiCreate+0x84>
    508c:	80 e0       	ldi	r24, 0x00	; 0
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	df 91       	pop	r29
    5092:	cf 91       	pop	r28
    5094:	1f 91       	pop	r17
    5096:	0f 91       	pop	r16
    5098:	ff 90       	pop	r15
    509a:	ef 90       	pop	r14
    509c:	df 90       	pop	r13
    509e:	cf 90       	pop	r12
    50a0:	bf 90       	pop	r11
    50a2:	af 90       	pop	r10
    50a4:	08 95       	ret

000050a6 <twiIsBusy>:
    50a6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    50aa:	81 70       	andi	r24, 0x01	; 1
    50ac:	08 95       	ret

000050ae <twiTransmit>:
    50ae:	ff 92       	push	r15
    50b0:	0f 93       	push	r16
    50b2:	1f 93       	push	r17
    50b4:	cf 93       	push	r28
    50b6:	df 93       	push	r29
    50b8:	00 97       	sbiw	r24, 0x00	; 0
    50ba:	d1 f1       	breq	.+116    	; 0x5130 <twiTransmit+0x82>
    50bc:	4a 30       	cpi	r20, 0x0A	; 10
    50be:	d0 f5       	brcc	.+116    	; 0x5134 <twiTransmit+0x86>
    50c0:	f4 2e       	mov	r15, r20
    50c2:	8b 01       	movw	r16, r22
    50c4:	ec 01       	movw	r28, r24
    50c6:	ef df       	rcall	.-34     	; 0x50a6 <twiIsBusy>
    50c8:	81 11       	cpse	r24, r1
    50ca:	36 c0       	rjmp	.+108    	; 0x5138 <twiTransmit+0x8a>
    50cc:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <_twiCurrentHandler>
    50d0:	90 91 6f 1a 	lds	r25, 0x1A6F	; 0x801a6f <_twiCurrentHandler+0x1>
    50d4:	c8 17       	cp	r28, r24
    50d6:	d9 07       	cpc	r29, r25
    50d8:	41 f0       	breq	.+16     	; 0x50ea <twiTransmit+0x3c>
    50da:	87 df       	rcall	.-242    	; 0x4fea <_initTwiInterface>
    50dc:	89 81       	ldd	r24, Y+1	; 0x01
    50de:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    50e2:	d0 93 6f 1a 	sts	0x1A6F, r29	; 0x801a6f <_twiCurrentHandler+0x1>
    50e6:	c0 93 6e 1a 	sts	0x1A6E, r28	; 0x801a6e <_twiCurrentHandler>
    50ea:	81 e0       	ldi	r24, 0x01	; 1
    50ec:	8f 0d       	add	r24, r15
    50ee:	80 93 70 1a 	sts	0x1A70, r24	; 0x801a70 <_twiMessageLen>
    50f2:	88 81       	ld	r24, Y
    50f4:	88 0f       	add	r24, r24
    50f6:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <_twiMessageBuffer>
    50fa:	ff 20       	and	r15, r15
    50fc:	89 f0       	breq	.+34     	; 0x5120 <twiTransmit+0x72>
    50fe:	f8 01       	movw	r30, r16
    5100:	a2 e7       	ldi	r26, 0x72	; 114
    5102:	ba e1       	ldi	r27, 0x1A	; 26
    5104:	4f ef       	ldi	r20, 0xFF	; 255
    5106:	4f 0d       	add	r20, r15
    5108:	64 2f       	mov	r22, r20
    510a:	70 e0       	ldi	r23, 0x00	; 0
    510c:	cb 01       	movw	r24, r22
    510e:	01 96       	adiw	r24, 0x01	; 1
    5110:	b8 01       	movw	r22, r16
    5112:	68 0f       	add	r22, r24
    5114:	79 1f       	adc	r23, r25
    5116:	81 91       	ld	r24, Z+
    5118:	8d 93       	st	X+, r24
    511a:	e6 17       	cp	r30, r22
    511c:	f7 07       	cpc	r31, r23
    511e:	d9 f7       	brne	.-10     	; 0x5116 <twiTransmit+0x68>
    5120:	88 ef       	ldi	r24, 0xF8	; 248
    5122:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    5126:	85 ea       	ldi	r24, 0xA5	; 165
    5128:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    512c:	84 e0       	ldi	r24, 0x04	; 4
    512e:	05 c0       	rjmp	.+10     	; 0x513a <twiTransmit+0x8c>
    5130:	86 e0       	ldi	r24, 0x06	; 6
    5132:	03 c0       	rjmp	.+6      	; 0x513a <twiTransmit+0x8c>
    5134:	87 e0       	ldi	r24, 0x07	; 7
    5136:	01 c0       	rjmp	.+2      	; 0x513a <twiTransmit+0x8c>
    5138:	82 e0       	ldi	r24, 0x02	; 2
    513a:	df 91       	pop	r29
    513c:	cf 91       	pop	r28
    513e:	1f 91       	pop	r17
    5140:	0f 91       	pop	r16
    5142:	ff 90       	pop	r15
    5144:	08 95       	ret

00005146 <twiReceive>:
    5146:	1f 93       	push	r17
    5148:	cf 93       	push	r28
    514a:	df 93       	push	r29
    514c:	00 97       	sbiw	r24, 0x00	; 0
    514e:	29 f1       	breq	.+74     	; 0x519a <twiReceive+0x54>
    5150:	6b 30       	cpi	r22, 0x0B	; 11
    5152:	28 f5       	brcc	.+74     	; 0x519e <twiReceive+0x58>
    5154:	16 2f       	mov	r17, r22
    5156:	ec 01       	movw	r28, r24
    5158:	a6 df       	rcall	.-180    	; 0x50a6 <twiIsBusy>
    515a:	81 11       	cpse	r24, r1
    515c:	22 c0       	rjmp	.+68     	; 0x51a2 <twiReceive+0x5c>
    515e:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <_twiCurrentHandler>
    5162:	90 91 6f 1a 	lds	r25, 0x1A6F	; 0x801a6f <_twiCurrentHandler+0x1>
    5166:	c8 17       	cp	r28, r24
    5168:	d9 07       	cpc	r29, r25
    516a:	41 f0       	breq	.+16     	; 0x517c <twiReceive+0x36>
    516c:	3e df       	rcall	.-388    	; 0x4fea <_initTwiInterface>
    516e:	89 81       	ldd	r24, Y+1	; 0x01
    5170:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5174:	d0 93 6f 1a 	sts	0x1A6F, r29	; 0x801a6f <_twiCurrentHandler+0x1>
    5178:	c0 93 6e 1a 	sts	0x1A6E, r28	; 0x801a6e <_twiCurrentHandler>
    517c:	10 93 70 1a 	sts	0x1A70, r17	; 0x801a70 <_twiMessageLen>
    5180:	88 81       	ld	r24, Y
    5182:	88 0f       	add	r24, r24
    5184:	81 60       	ori	r24, 0x01	; 1
    5186:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <_twiMessageBuffer>
    518a:	88 ef       	ldi	r24, 0xF8	; 248
    518c:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    5190:	85 ea       	ldi	r24, 0xA5	; 165
    5192:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5196:	85 e0       	ldi	r24, 0x05	; 5
    5198:	05 c0       	rjmp	.+10     	; 0x51a4 <twiReceive+0x5e>
    519a:	86 e0       	ldi	r24, 0x06	; 6
    519c:	03 c0       	rjmp	.+6      	; 0x51a4 <twiReceive+0x5e>
    519e:	87 e0       	ldi	r24, 0x07	; 7
    51a0:	01 c0       	rjmp	.+2      	; 0x51a4 <twiReceive+0x5e>
    51a2:	82 e0       	ldi	r24, 0x02	; 2
    51a4:	df 91       	pop	r29
    51a6:	cf 91       	pop	r28
    51a8:	1f 91       	pop	r17
    51aa:	08 95       	ret

000051ac <__vector_39>:
    51ac:	1f 92       	push	r1
    51ae:	0f 92       	push	r0
    51b0:	0f b6       	in	r0, 0x3f	; 63
    51b2:	0f 92       	push	r0
    51b4:	11 24       	eor	r1, r1
    51b6:	0b b6       	in	r0, 0x3b	; 59
    51b8:	0f 92       	push	r0
    51ba:	2f 93       	push	r18
    51bc:	3f 93       	push	r19
    51be:	4f 93       	push	r20
    51c0:	5f 93       	push	r21
    51c2:	6f 93       	push	r22
    51c4:	7f 93       	push	r23
    51c6:	8f 93       	push	r24
    51c8:	9f 93       	push	r25
    51ca:	af 93       	push	r26
    51cc:	bf 93       	push	r27
    51ce:	ef 93       	push	r30
    51d0:	ff 93       	push	r31
    51d2:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    51d6:	8e 2f       	mov	r24, r30
    51d8:	90 e0       	ldi	r25, 0x00	; 0
    51da:	fc 01       	movw	r30, r24
    51dc:	38 97       	sbiw	r30, 0x08	; 8
    51de:	e1 35       	cpi	r30, 0x51	; 81
    51e0:	f1 05       	cpc	r31, r1
    51e2:	08 f0       	brcs	.+2      	; 0x51e6 <__vector_39+0x3a>
    51e4:	75 c0       	rjmp	.+234    	; 0x52d0 <__vector_39+0x124>
    51e6:	88 27       	eor	r24, r24
    51e8:	e4 58       	subi	r30, 0x84	; 132
    51ea:	ff 4f       	sbci	r31, 0xFF	; 255
    51ec:	8f 4f       	sbci	r24, 0xFF	; 255
    51ee:	76 c2       	rjmp	.+1260   	; 0x56dc <__tablejump2__>
    51f0:	10 92 6d 1a 	sts	0x1A6D, r1	; 0x801a6d <_index.1885>
    51f4:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <_index.1885>
    51f8:	80 91 70 1a 	lds	r24, 0x1A70	; 0x801a70 <_twiMessageLen>
    51fc:	e8 17       	cp	r30, r24
    51fe:	70 f4       	brcc	.+28     	; 0x521c <__vector_39+0x70>
    5200:	81 e0       	ldi	r24, 0x01	; 1
    5202:	8e 0f       	add	r24, r30
    5204:	80 93 6d 1a 	sts	0x1A6D, r24	; 0x801a6d <_index.1885>
    5208:	f0 e0       	ldi	r31, 0x00	; 0
    520a:	ef 58       	subi	r30, 0x8F	; 143
    520c:	f5 4e       	sbci	r31, 0xE5	; 229
    520e:	80 81       	ld	r24, Z
    5210:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5214:	85 e8       	ldi	r24, 0x85	; 133
    5216:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    521a:	72 c0       	rjmp	.+228    	; 0x5300 <__vector_39+0x154>
    521c:	84 e9       	ldi	r24, 0x94	; 148
    521e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5222:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <_twiCurrentHandler>
    5226:	90 91 6f 1a 	lds	r25, 0x1A6F	; 0x801a6f <_twiCurrentHandler+0x1>
    522a:	dc 01       	movw	r26, r24
    522c:	12 96       	adiw	r26, 0x02	; 2
    522e:	ed 91       	ld	r30, X+
    5230:	fc 91       	ld	r31, X
    5232:	13 97       	sbiw	r26, 0x03	; 3
    5234:	30 97       	sbiw	r30, 0x00	; 0
    5236:	09 f4       	brne	.+2      	; 0x523a <__vector_39+0x8e>
    5238:	63 c0       	rjmp	.+198    	; 0x5300 <__vector_39+0x154>
    523a:	20 e0       	ldi	r18, 0x00	; 0
    523c:	40 e0       	ldi	r20, 0x00	; 0
    523e:	50 e0       	ldi	r21, 0x00	; 0
    5240:	64 e0       	ldi	r22, 0x04	; 4
    5242:	19 95       	eicall
    5244:	5d c0       	rjmp	.+186    	; 0x5300 <__vector_39+0x154>
    5246:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <_index.1885>
    524a:	81 e0       	ldi	r24, 0x01	; 1
    524c:	8e 0f       	add	r24, r30
    524e:	80 93 6d 1a 	sts	0x1A6D, r24	; 0x801a6d <_index.1885>
    5252:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5256:	f0 e0       	ldi	r31, 0x00	; 0
    5258:	ef 58       	subi	r30, 0x8F	; 143
    525a:	f5 4e       	sbci	r31, 0xE5	; 229
    525c:	80 83       	st	Z, r24
    525e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5262:	80 34       	cpi	r24, 0x40	; 64
    5264:	11 f4       	brne	.+4      	; 0x526a <__vector_39+0xbe>
    5266:	10 92 6d 1a 	sts	0x1A6D, r1	; 0x801a6d <_index.1885>
    526a:	20 91 6d 1a 	lds	r18, 0x1A6D	; 0x801a6d <_index.1885>
    526e:	30 e0       	ldi	r19, 0x00	; 0
    5270:	80 91 70 1a 	lds	r24, 0x1A70	; 0x801a70 <_twiMessageLen>
    5274:	90 e0       	ldi	r25, 0x00	; 0
    5276:	01 97       	sbiw	r24, 0x01	; 1
    5278:	28 17       	cp	r18, r24
    527a:	39 07       	cpc	r19, r25
    527c:	24 f4       	brge	.+8      	; 0x5286 <__vector_39+0xda>
    527e:	85 ec       	ldi	r24, 0xC5	; 197
    5280:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5284:	3d c0       	rjmp	.+122    	; 0x5300 <__vector_39+0x154>
    5286:	85 e8       	ldi	r24, 0x85	; 133
    5288:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    528c:	39 c0       	rjmp	.+114    	; 0x5300 <__vector_39+0x154>
    528e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5292:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <_index.1885>
    5296:	f0 e0       	ldi	r31, 0x00	; 0
    5298:	ef 58       	subi	r30, 0x8F	; 143
    529a:	f5 4e       	sbci	r31, 0xE5	; 229
    529c:	80 83       	st	Z, r24
    529e:	84 e9       	ldi	r24, 0x94	; 148
    52a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52a4:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <_twiCurrentHandler>
    52a8:	90 91 6f 1a 	lds	r25, 0x1A6F	; 0x801a6f <_twiCurrentHandler+0x1>
    52ac:	dc 01       	movw	r26, r24
    52ae:	12 96       	adiw	r26, 0x02	; 2
    52b0:	ed 91       	ld	r30, X+
    52b2:	fc 91       	ld	r31, X
    52b4:	13 97       	sbiw	r26, 0x03	; 3
    52b6:	30 97       	sbiw	r30, 0x00	; 0
    52b8:	19 f1       	breq	.+70     	; 0x5300 <__vector_39+0x154>
    52ba:	20 91 70 1a 	lds	r18, 0x1A70	; 0x801a70 <_twiMessageLen>
    52be:	41 e7       	ldi	r20, 0x71	; 113
    52c0:	5a e1       	ldi	r21, 0x1A	; 26
    52c2:	65 e0       	ldi	r22, 0x05	; 5
    52c4:	19 95       	eicall
    52c6:	1c c0       	rjmp	.+56     	; 0x5300 <__vector_39+0x154>
    52c8:	85 ea       	ldi	r24, 0xA5	; 165
    52ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52ce:	18 c0       	rjmp	.+48     	; 0x5300 <__vector_39+0x154>
    52d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    52d4:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    52d8:	84 e0       	ldi	r24, 0x04	; 4
    52da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52de:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <_twiCurrentHandler>
    52e2:	90 91 6f 1a 	lds	r25, 0x1A6F	; 0x801a6f <_twiCurrentHandler+0x1>
    52e6:	dc 01       	movw	r26, r24
    52e8:	12 96       	adiw	r26, 0x02	; 2
    52ea:	ed 91       	ld	r30, X+
    52ec:	fc 91       	ld	r31, X
    52ee:	13 97       	sbiw	r26, 0x03	; 3
    52f0:	30 97       	sbiw	r30, 0x00	; 0
    52f2:	31 f0       	breq	.+12     	; 0x5300 <__vector_39+0x154>
    52f4:	20 e0       	ldi	r18, 0x00	; 0
    52f6:	40 e0       	ldi	r20, 0x00	; 0
    52f8:	50 e0       	ldi	r21, 0x00	; 0
    52fa:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    52fe:	19 95       	eicall
    5300:	ff 91       	pop	r31
    5302:	ef 91       	pop	r30
    5304:	bf 91       	pop	r27
    5306:	af 91       	pop	r26
    5308:	9f 91       	pop	r25
    530a:	8f 91       	pop	r24
    530c:	7f 91       	pop	r23
    530e:	6f 91       	pop	r22
    5310:	5f 91       	pop	r21
    5312:	4f 91       	pop	r20
    5314:	3f 91       	pop	r19
    5316:	2f 91       	pop	r18
    5318:	0f 90       	pop	r0
    531a:	0b be       	out	0x3b, r0	; 59
    531c:	0f 90       	pop	r0
    531e:	0f be       	out	0x3f, r0	; 63
    5320:	0f 90       	pop	r0
    5322:	1f 90       	pop	r1
    5324:	18 95       	reti

00005326 <fifo_init>:
    5326:	fc 01       	movw	r30, r24
    5328:	41 11       	cpse	r20, r1
    532a:	01 c0       	rjmp	.+2      	; 0x532e <fifo_init+0x8>
    532c:	1a d3       	rcall	.+1588   	; 0x5962 <abort>
    532e:	84 2f       	mov	r24, r20
    5330:	90 e0       	ldi	r25, 0x00	; 0
    5332:	9c 01       	movw	r18, r24
    5334:	21 50       	subi	r18, 0x01	; 1
    5336:	31 09       	sbc	r19, r1
    5338:	82 23       	and	r24, r18
    533a:	93 23       	and	r25, r19
    533c:	89 2b       	or	r24, r25
    533e:	09 f0       	breq	.+2      	; 0x5342 <fifo_init+0x1c>
    5340:	10 d3       	rcall	.+1568   	; 0x5962 <abort>
    5342:	41 38       	cpi	r20, 0x81	; 129
    5344:	08 f0       	brcs	.+2      	; 0x5348 <fifo_init+0x22>
    5346:	0d d3       	rcall	.+1562   	; 0x5962 <abort>
    5348:	12 82       	std	Z+2, r1	; 0x02
    534a:	13 82       	std	Z+3, r1	; 0x03
    534c:	44 83       	std	Z+4, r20	; 0x04
    534e:	44 0f       	add	r20, r20
    5350:	41 50       	subi	r20, 0x01	; 1
    5352:	45 83       	std	Z+5, r20	; 0x05
    5354:	71 83       	std	Z+1, r23	; 0x01
    5356:	60 83       	st	Z, r22
    5358:	80 e0       	ldi	r24, 0x00	; 0
    535a:	90 e0       	ldi	r25, 0x00	; 0
    535c:	08 95       	ret

0000535e <__subsf3>:
    535e:	50 58       	subi	r21, 0x80	; 128

00005360 <__addsf3>:
    5360:	bb 27       	eor	r27, r27
    5362:	aa 27       	eor	r26, r26
    5364:	0e d0       	rcall	.+28     	; 0x5382 <__addsf3x>
    5366:	21 c1       	rjmp	.+578    	; 0x55aa <__fp_round>
    5368:	12 d1       	rcall	.+548    	; 0x558e <__fp_pscA>
    536a:	30 f0       	brcs	.+12     	; 0x5378 <__addsf3+0x18>
    536c:	17 d1       	rcall	.+558    	; 0x559c <__fp_pscB>
    536e:	20 f0       	brcs	.+8      	; 0x5378 <__addsf3+0x18>
    5370:	31 f4       	brne	.+12     	; 0x537e <__addsf3+0x1e>
    5372:	9f 3f       	cpi	r25, 0xFF	; 255
    5374:	11 f4       	brne	.+4      	; 0x537a <__addsf3+0x1a>
    5376:	1e f4       	brtc	.+6      	; 0x537e <__addsf3+0x1e>
    5378:	07 c1       	rjmp	.+526    	; 0x5588 <__fp_nan>
    537a:	0e f4       	brtc	.+2      	; 0x537e <__addsf3+0x1e>
    537c:	e0 95       	com	r30
    537e:	e7 fb       	bst	r30, 7
    5380:	fd c0       	rjmp	.+506    	; 0x557c <__fp_inf>

00005382 <__addsf3x>:
    5382:	e9 2f       	mov	r30, r25
    5384:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <__fp_split3>
    5388:	78 f3       	brcs	.-34     	; 0x5368 <__addsf3+0x8>
    538a:	ba 17       	cp	r27, r26
    538c:	62 07       	cpc	r22, r18
    538e:	73 07       	cpc	r23, r19
    5390:	84 07       	cpc	r24, r20
    5392:	95 07       	cpc	r25, r21
    5394:	20 f0       	brcs	.+8      	; 0x539e <__addsf3x+0x1c>
    5396:	79 f4       	brne	.+30     	; 0x53b6 <__addsf3x+0x34>
    5398:	a6 f5       	brtc	.+104    	; 0x5402 <__addsf3x+0x80>
    539a:	0c 94 9a 1c 	jmp	0x3934	; 0x3934 <__fp_zero>
    539e:	0e f4       	brtc	.+2      	; 0x53a2 <__addsf3x+0x20>
    53a0:	e0 95       	com	r30
    53a2:	0b 2e       	mov	r0, r27
    53a4:	ba 2f       	mov	r27, r26
    53a6:	a0 2d       	mov	r26, r0
    53a8:	0b 01       	movw	r0, r22
    53aa:	b9 01       	movw	r22, r18
    53ac:	90 01       	movw	r18, r0
    53ae:	0c 01       	movw	r0, r24
    53b0:	ca 01       	movw	r24, r20
    53b2:	a0 01       	movw	r20, r0
    53b4:	11 24       	eor	r1, r1
    53b6:	ff 27       	eor	r31, r31
    53b8:	59 1b       	sub	r21, r25
    53ba:	99 f0       	breq	.+38     	; 0x53e2 <__addsf3x+0x60>
    53bc:	59 3f       	cpi	r21, 0xF9	; 249
    53be:	50 f4       	brcc	.+20     	; 0x53d4 <__addsf3x+0x52>
    53c0:	50 3e       	cpi	r21, 0xE0	; 224
    53c2:	68 f1       	brcs	.+90     	; 0x541e <__addsf3x+0x9c>
    53c4:	1a 16       	cp	r1, r26
    53c6:	f0 40       	sbci	r31, 0x00	; 0
    53c8:	a2 2f       	mov	r26, r18
    53ca:	23 2f       	mov	r18, r19
    53cc:	34 2f       	mov	r19, r20
    53ce:	44 27       	eor	r20, r20
    53d0:	58 5f       	subi	r21, 0xF8	; 248
    53d2:	f3 cf       	rjmp	.-26     	; 0x53ba <__addsf3x+0x38>
    53d4:	46 95       	lsr	r20
    53d6:	37 95       	ror	r19
    53d8:	27 95       	ror	r18
    53da:	a7 95       	ror	r26
    53dc:	f0 40       	sbci	r31, 0x00	; 0
    53de:	53 95       	inc	r21
    53e0:	c9 f7       	brne	.-14     	; 0x53d4 <__addsf3x+0x52>
    53e2:	7e f4       	brtc	.+30     	; 0x5402 <__addsf3x+0x80>
    53e4:	1f 16       	cp	r1, r31
    53e6:	ba 0b       	sbc	r27, r26
    53e8:	62 0b       	sbc	r22, r18
    53ea:	73 0b       	sbc	r23, r19
    53ec:	84 0b       	sbc	r24, r20
    53ee:	ba f0       	brmi	.+46     	; 0x541e <__addsf3x+0x9c>
    53f0:	91 50       	subi	r25, 0x01	; 1
    53f2:	a1 f0       	breq	.+40     	; 0x541c <__addsf3x+0x9a>
    53f4:	ff 0f       	add	r31, r31
    53f6:	bb 1f       	adc	r27, r27
    53f8:	66 1f       	adc	r22, r22
    53fa:	77 1f       	adc	r23, r23
    53fc:	88 1f       	adc	r24, r24
    53fe:	c2 f7       	brpl	.-16     	; 0x53f0 <__addsf3x+0x6e>
    5400:	0e c0       	rjmp	.+28     	; 0x541e <__addsf3x+0x9c>
    5402:	ba 0f       	add	r27, r26
    5404:	62 1f       	adc	r22, r18
    5406:	73 1f       	adc	r23, r19
    5408:	84 1f       	adc	r24, r20
    540a:	48 f4       	brcc	.+18     	; 0x541e <__addsf3x+0x9c>
    540c:	87 95       	ror	r24
    540e:	77 95       	ror	r23
    5410:	67 95       	ror	r22
    5412:	b7 95       	ror	r27
    5414:	f7 95       	ror	r31
    5416:	9e 3f       	cpi	r25, 0xFE	; 254
    5418:	08 f0       	brcs	.+2      	; 0x541c <__addsf3x+0x9a>
    541a:	b1 cf       	rjmp	.-158    	; 0x537e <__addsf3+0x1e>
    541c:	93 95       	inc	r25
    541e:	88 0f       	add	r24, r24
    5420:	08 f0       	brcs	.+2      	; 0x5424 <__addsf3x+0xa2>
    5422:	99 27       	eor	r25, r25
    5424:	ee 0f       	add	r30, r30
    5426:	97 95       	ror	r25
    5428:	87 95       	ror	r24
    542a:	08 95       	ret

0000542c <__divsf3>:
    542c:	0d d0       	rcall	.+26     	; 0x5448 <__divsf3x>
    542e:	bd c0       	rjmp	.+378    	; 0x55aa <__fp_round>
    5430:	b5 d0       	rcall	.+362    	; 0x559c <__fp_pscB>
    5432:	48 f0       	brcs	.+18     	; 0x5446 <__divsf3+0x1a>
    5434:	ac d0       	rcall	.+344    	; 0x558e <__fp_pscA>
    5436:	38 f0       	brcs	.+14     	; 0x5446 <__divsf3+0x1a>
    5438:	21 f4       	brne	.+8      	; 0x5442 <__divsf3+0x16>
    543a:	5f 3f       	cpi	r21, 0xFF	; 255
    543c:	21 f0       	breq	.+8      	; 0x5446 <__divsf3+0x1a>
    543e:	9e c0       	rjmp	.+316    	; 0x557c <__fp_inf>
    5440:	51 11       	cpse	r21, r1
    5442:	0c 94 9b 1c 	jmp	0x3936	; 0x3936 <__fp_szero>
    5446:	a0 c0       	rjmp	.+320    	; 0x5588 <__fp_nan>

00005448 <__divsf3x>:
    5448:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <__fp_split3>
    544c:	88 f3       	brcs	.-30     	; 0x5430 <__divsf3+0x4>

0000544e <__divsf3_pse>:
    544e:	99 23       	and	r25, r25
    5450:	b9 f3       	breq	.-18     	; 0x5440 <__divsf3+0x14>
    5452:	55 23       	and	r21, r21
    5454:	a1 f3       	breq	.-24     	; 0x543e <__divsf3+0x12>
    5456:	95 1b       	sub	r25, r21
    5458:	55 0b       	sbc	r21, r21
    545a:	bb 27       	eor	r27, r27
    545c:	aa 27       	eor	r26, r26
    545e:	62 17       	cp	r22, r18
    5460:	73 07       	cpc	r23, r19
    5462:	84 07       	cpc	r24, r20
    5464:	38 f0       	brcs	.+14     	; 0x5474 <__divsf3_pse+0x26>
    5466:	9f 5f       	subi	r25, 0xFF	; 255
    5468:	5f 4f       	sbci	r21, 0xFF	; 255
    546a:	22 0f       	add	r18, r18
    546c:	33 1f       	adc	r19, r19
    546e:	44 1f       	adc	r20, r20
    5470:	aa 1f       	adc	r26, r26
    5472:	a9 f3       	breq	.-22     	; 0x545e <__divsf3_pse+0x10>
    5474:	34 d0       	rcall	.+104    	; 0x54de <__divsf3_pse+0x90>
    5476:	0e 2e       	mov	r0, r30
    5478:	3a f0       	brmi	.+14     	; 0x5488 <__divsf3_pse+0x3a>
    547a:	e0 e8       	ldi	r30, 0x80	; 128
    547c:	31 d0       	rcall	.+98     	; 0x54e0 <__divsf3_pse+0x92>
    547e:	91 50       	subi	r25, 0x01	; 1
    5480:	50 40       	sbci	r21, 0x00	; 0
    5482:	e6 95       	lsr	r30
    5484:	00 1c       	adc	r0, r0
    5486:	ca f7       	brpl	.-14     	; 0x547a <__divsf3_pse+0x2c>
    5488:	2a d0       	rcall	.+84     	; 0x54de <__divsf3_pse+0x90>
    548a:	fe 2f       	mov	r31, r30
    548c:	28 d0       	rcall	.+80     	; 0x54de <__divsf3_pse+0x90>
    548e:	66 0f       	add	r22, r22
    5490:	77 1f       	adc	r23, r23
    5492:	88 1f       	adc	r24, r24
    5494:	bb 1f       	adc	r27, r27
    5496:	26 17       	cp	r18, r22
    5498:	37 07       	cpc	r19, r23
    549a:	48 07       	cpc	r20, r24
    549c:	ab 07       	cpc	r26, r27
    549e:	b0 e8       	ldi	r27, 0x80	; 128
    54a0:	09 f0       	breq	.+2      	; 0x54a4 <__divsf3_pse+0x56>
    54a2:	bb 0b       	sbc	r27, r27
    54a4:	80 2d       	mov	r24, r0
    54a6:	bf 01       	movw	r22, r30
    54a8:	ff 27       	eor	r31, r31
    54aa:	93 58       	subi	r25, 0x83	; 131
    54ac:	5f 4f       	sbci	r21, 0xFF	; 255
    54ae:	32 f0       	brmi	.+12     	; 0x54bc <__divsf3_pse+0x6e>
    54b0:	9e 3f       	cpi	r25, 0xFE	; 254
    54b2:	51 05       	cpc	r21, r1
    54b4:	70 f0       	brcs	.+28     	; 0x54d2 <__divsf3_pse+0x84>
    54b6:	62 c0       	rjmp	.+196    	; 0x557c <__fp_inf>
    54b8:	0c 94 9b 1c 	jmp	0x3936	; 0x3936 <__fp_szero>
    54bc:	5f 3f       	cpi	r21, 0xFF	; 255
    54be:	e4 f3       	brlt	.-8      	; 0x54b8 <__divsf3_pse+0x6a>
    54c0:	98 3e       	cpi	r25, 0xE8	; 232
    54c2:	d4 f3       	brlt	.-12     	; 0x54b8 <__divsf3_pse+0x6a>
    54c4:	86 95       	lsr	r24
    54c6:	77 95       	ror	r23
    54c8:	67 95       	ror	r22
    54ca:	b7 95       	ror	r27
    54cc:	f7 95       	ror	r31
    54ce:	9f 5f       	subi	r25, 0xFF	; 255
    54d0:	c9 f7       	brne	.-14     	; 0x54c4 <__divsf3_pse+0x76>
    54d2:	88 0f       	add	r24, r24
    54d4:	91 1d       	adc	r25, r1
    54d6:	96 95       	lsr	r25
    54d8:	87 95       	ror	r24
    54da:	97 f9       	bld	r25, 7
    54dc:	08 95       	ret
    54de:	e1 e0       	ldi	r30, 0x01	; 1
    54e0:	66 0f       	add	r22, r22
    54e2:	77 1f       	adc	r23, r23
    54e4:	88 1f       	adc	r24, r24
    54e6:	bb 1f       	adc	r27, r27
    54e8:	62 17       	cp	r22, r18
    54ea:	73 07       	cpc	r23, r19
    54ec:	84 07       	cpc	r24, r20
    54ee:	ba 07       	cpc	r27, r26
    54f0:	20 f0       	brcs	.+8      	; 0x54fa <__divsf3_pse+0xac>
    54f2:	62 1b       	sub	r22, r18
    54f4:	73 0b       	sbc	r23, r19
    54f6:	84 0b       	sbc	r24, r20
    54f8:	ba 0b       	sbc	r27, r26
    54fa:	ee 1f       	adc	r30, r30
    54fc:	88 f7       	brcc	.-30     	; 0x54e0 <__divsf3_pse+0x92>
    54fe:	e0 95       	com	r30
    5500:	08 95       	ret

00005502 <__floatunsisf>:
    5502:	e8 94       	clt
    5504:	09 c0       	rjmp	.+18     	; 0x5518 <__floatsisf+0x12>

00005506 <__floatsisf>:
    5506:	97 fb       	bst	r25, 7
    5508:	3e f4       	brtc	.+14     	; 0x5518 <__floatsisf+0x12>
    550a:	90 95       	com	r25
    550c:	80 95       	com	r24
    550e:	70 95       	com	r23
    5510:	61 95       	neg	r22
    5512:	7f 4f       	sbci	r23, 0xFF	; 255
    5514:	8f 4f       	sbci	r24, 0xFF	; 255
    5516:	9f 4f       	sbci	r25, 0xFF	; 255
    5518:	99 23       	and	r25, r25
    551a:	a9 f0       	breq	.+42     	; 0x5546 <__floatsisf+0x40>
    551c:	f9 2f       	mov	r31, r25
    551e:	96 e9       	ldi	r25, 0x96	; 150
    5520:	bb 27       	eor	r27, r27
    5522:	93 95       	inc	r25
    5524:	f6 95       	lsr	r31
    5526:	87 95       	ror	r24
    5528:	77 95       	ror	r23
    552a:	67 95       	ror	r22
    552c:	b7 95       	ror	r27
    552e:	f1 11       	cpse	r31, r1
    5530:	f8 cf       	rjmp	.-16     	; 0x5522 <__floatsisf+0x1c>
    5532:	fa f4       	brpl	.+62     	; 0x5572 <__floatsisf+0x6c>
    5534:	bb 0f       	add	r27, r27
    5536:	11 f4       	brne	.+4      	; 0x553c <__floatsisf+0x36>
    5538:	60 ff       	sbrs	r22, 0
    553a:	1b c0       	rjmp	.+54     	; 0x5572 <__floatsisf+0x6c>
    553c:	6f 5f       	subi	r22, 0xFF	; 255
    553e:	7f 4f       	sbci	r23, 0xFF	; 255
    5540:	8f 4f       	sbci	r24, 0xFF	; 255
    5542:	9f 4f       	sbci	r25, 0xFF	; 255
    5544:	16 c0       	rjmp	.+44     	; 0x5572 <__floatsisf+0x6c>
    5546:	88 23       	and	r24, r24
    5548:	11 f0       	breq	.+4      	; 0x554e <__floatsisf+0x48>
    554a:	96 e9       	ldi	r25, 0x96	; 150
    554c:	11 c0       	rjmp	.+34     	; 0x5570 <__floatsisf+0x6a>
    554e:	77 23       	and	r23, r23
    5550:	21 f0       	breq	.+8      	; 0x555a <__floatsisf+0x54>
    5552:	9e e8       	ldi	r25, 0x8E	; 142
    5554:	87 2f       	mov	r24, r23
    5556:	76 2f       	mov	r23, r22
    5558:	05 c0       	rjmp	.+10     	; 0x5564 <__floatsisf+0x5e>
    555a:	66 23       	and	r22, r22
    555c:	71 f0       	breq	.+28     	; 0x557a <__floatsisf+0x74>
    555e:	96 e8       	ldi	r25, 0x86	; 134
    5560:	86 2f       	mov	r24, r22
    5562:	70 e0       	ldi	r23, 0x00	; 0
    5564:	60 e0       	ldi	r22, 0x00	; 0
    5566:	2a f0       	brmi	.+10     	; 0x5572 <__floatsisf+0x6c>
    5568:	9a 95       	dec	r25
    556a:	66 0f       	add	r22, r22
    556c:	77 1f       	adc	r23, r23
    556e:	88 1f       	adc	r24, r24
    5570:	da f7       	brpl	.-10     	; 0x5568 <__floatsisf+0x62>
    5572:	88 0f       	add	r24, r24
    5574:	96 95       	lsr	r25
    5576:	87 95       	ror	r24
    5578:	97 f9       	bld	r25, 7
    557a:	08 95       	ret

0000557c <__fp_inf>:
    557c:	97 f9       	bld	r25, 7
    557e:	9f 67       	ori	r25, 0x7F	; 127
    5580:	80 e8       	ldi	r24, 0x80	; 128
    5582:	70 e0       	ldi	r23, 0x00	; 0
    5584:	60 e0       	ldi	r22, 0x00	; 0
    5586:	08 95       	ret

00005588 <__fp_nan>:
    5588:	9f ef       	ldi	r25, 0xFF	; 255
    558a:	80 ec       	ldi	r24, 0xC0	; 192
    558c:	08 95       	ret

0000558e <__fp_pscA>:
    558e:	00 24       	eor	r0, r0
    5590:	0a 94       	dec	r0
    5592:	16 16       	cp	r1, r22
    5594:	17 06       	cpc	r1, r23
    5596:	18 06       	cpc	r1, r24
    5598:	09 06       	cpc	r0, r25
    559a:	08 95       	ret

0000559c <__fp_pscB>:
    559c:	00 24       	eor	r0, r0
    559e:	0a 94       	dec	r0
    55a0:	12 16       	cp	r1, r18
    55a2:	13 06       	cpc	r1, r19
    55a4:	14 06       	cpc	r1, r20
    55a6:	05 06       	cpc	r0, r21
    55a8:	08 95       	ret

000055aa <__fp_round>:
    55aa:	09 2e       	mov	r0, r25
    55ac:	03 94       	inc	r0
    55ae:	00 0c       	add	r0, r0
    55b0:	11 f4       	brne	.+4      	; 0x55b6 <__fp_round+0xc>
    55b2:	88 23       	and	r24, r24
    55b4:	52 f0       	brmi	.+20     	; 0x55ca <__fp_round+0x20>
    55b6:	bb 0f       	add	r27, r27
    55b8:	40 f4       	brcc	.+16     	; 0x55ca <__fp_round+0x20>
    55ba:	bf 2b       	or	r27, r31
    55bc:	11 f4       	brne	.+4      	; 0x55c2 <__fp_round+0x18>
    55be:	60 ff       	sbrs	r22, 0
    55c0:	04 c0       	rjmp	.+8      	; 0x55ca <__fp_round+0x20>
    55c2:	6f 5f       	subi	r22, 0xFF	; 255
    55c4:	7f 4f       	sbci	r23, 0xFF	; 255
    55c6:	8f 4f       	sbci	r24, 0xFF	; 255
    55c8:	9f 4f       	sbci	r25, 0xFF	; 255
    55ca:	08 95       	ret

000055cc <__mulsf3>:
    55cc:	0c d0       	rcall	.+24     	; 0x55e6 <__mulsf3x>
    55ce:	ed cf       	rjmp	.-38     	; 0x55aa <__fp_round>
    55d0:	de df       	rcall	.-68     	; 0x558e <__fp_pscA>
    55d2:	28 f0       	brcs	.+10     	; 0x55de <__mulsf3+0x12>
    55d4:	e3 df       	rcall	.-58     	; 0x559c <__fp_pscB>
    55d6:	18 f0       	brcs	.+6      	; 0x55de <__mulsf3+0x12>
    55d8:	95 23       	and	r25, r21
    55da:	09 f0       	breq	.+2      	; 0x55de <__mulsf3+0x12>
    55dc:	cf cf       	rjmp	.-98     	; 0x557c <__fp_inf>
    55de:	d4 cf       	rjmp	.-88     	; 0x5588 <__fp_nan>
    55e0:	11 24       	eor	r1, r1
    55e2:	0c 94 9b 1c 	jmp	0x3936	; 0x3936 <__fp_szero>

000055e6 <__mulsf3x>:
    55e6:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <__fp_split3>
    55ea:	90 f3       	brcs	.-28     	; 0x55d0 <__mulsf3+0x4>

000055ec <__mulsf3_pse>:
    55ec:	95 9f       	mul	r25, r21
    55ee:	c1 f3       	breq	.-16     	; 0x55e0 <__mulsf3+0x14>
    55f0:	95 0f       	add	r25, r21
    55f2:	50 e0       	ldi	r21, 0x00	; 0
    55f4:	55 1f       	adc	r21, r21
    55f6:	62 9f       	mul	r22, r18
    55f8:	f0 01       	movw	r30, r0
    55fa:	72 9f       	mul	r23, r18
    55fc:	bb 27       	eor	r27, r27
    55fe:	f0 0d       	add	r31, r0
    5600:	b1 1d       	adc	r27, r1
    5602:	63 9f       	mul	r22, r19
    5604:	aa 27       	eor	r26, r26
    5606:	f0 0d       	add	r31, r0
    5608:	b1 1d       	adc	r27, r1
    560a:	aa 1f       	adc	r26, r26
    560c:	64 9f       	mul	r22, r20
    560e:	66 27       	eor	r22, r22
    5610:	b0 0d       	add	r27, r0
    5612:	a1 1d       	adc	r26, r1
    5614:	66 1f       	adc	r22, r22
    5616:	82 9f       	mul	r24, r18
    5618:	22 27       	eor	r18, r18
    561a:	b0 0d       	add	r27, r0
    561c:	a1 1d       	adc	r26, r1
    561e:	62 1f       	adc	r22, r18
    5620:	73 9f       	mul	r23, r19
    5622:	b0 0d       	add	r27, r0
    5624:	a1 1d       	adc	r26, r1
    5626:	62 1f       	adc	r22, r18
    5628:	83 9f       	mul	r24, r19
    562a:	a0 0d       	add	r26, r0
    562c:	61 1d       	adc	r22, r1
    562e:	22 1f       	adc	r18, r18
    5630:	74 9f       	mul	r23, r20
    5632:	33 27       	eor	r19, r19
    5634:	a0 0d       	add	r26, r0
    5636:	61 1d       	adc	r22, r1
    5638:	23 1f       	adc	r18, r19
    563a:	84 9f       	mul	r24, r20
    563c:	60 0d       	add	r22, r0
    563e:	21 1d       	adc	r18, r1
    5640:	82 2f       	mov	r24, r18
    5642:	76 2f       	mov	r23, r22
    5644:	6a 2f       	mov	r22, r26
    5646:	11 24       	eor	r1, r1
    5648:	9f 57       	subi	r25, 0x7F	; 127
    564a:	50 40       	sbci	r21, 0x00	; 0
    564c:	92 f0       	brmi	.+36     	; 0x5672 <__mulsf3_pse+0x86>
    564e:	e9 f0       	breq	.+58     	; 0x568a <__mulsf3_pse+0x9e>
    5650:	88 23       	and	r24, r24
    5652:	4a f0       	brmi	.+18     	; 0x5666 <__mulsf3_pse+0x7a>
    5654:	ee 0f       	add	r30, r30
    5656:	ff 1f       	adc	r31, r31
    5658:	bb 1f       	adc	r27, r27
    565a:	66 1f       	adc	r22, r22
    565c:	77 1f       	adc	r23, r23
    565e:	88 1f       	adc	r24, r24
    5660:	91 50       	subi	r25, 0x01	; 1
    5662:	50 40       	sbci	r21, 0x00	; 0
    5664:	a9 f7       	brne	.-22     	; 0x5650 <__mulsf3_pse+0x64>
    5666:	9e 3f       	cpi	r25, 0xFE	; 254
    5668:	51 05       	cpc	r21, r1
    566a:	78 f0       	brcs	.+30     	; 0x568a <__mulsf3_pse+0x9e>
    566c:	87 cf       	rjmp	.-242    	; 0x557c <__fp_inf>
    566e:	0c 94 9b 1c 	jmp	0x3936	; 0x3936 <__fp_szero>
    5672:	5f 3f       	cpi	r21, 0xFF	; 255
    5674:	e4 f3       	brlt	.-8      	; 0x566e <__mulsf3_pse+0x82>
    5676:	98 3e       	cpi	r25, 0xE8	; 232
    5678:	d4 f3       	brlt	.-12     	; 0x566e <__mulsf3_pse+0x82>
    567a:	86 95       	lsr	r24
    567c:	77 95       	ror	r23
    567e:	67 95       	ror	r22
    5680:	b7 95       	ror	r27
    5682:	f7 95       	ror	r31
    5684:	e7 95       	ror	r30
    5686:	9f 5f       	subi	r25, 0xFF	; 255
    5688:	c1 f7       	brne	.-16     	; 0x567a <__mulsf3_pse+0x8e>
    568a:	fe 2b       	or	r31, r30
    568c:	88 0f       	add	r24, r24
    568e:	91 1d       	adc	r25, r1
    5690:	96 95       	lsr	r25
    5692:	87 95       	ror	r24
    5694:	97 f9       	bld	r25, 7
    5696:	08 95       	ret

00005698 <__udivmodsi4>:
    5698:	a1 e2       	ldi	r26, 0x21	; 33
    569a:	1a 2e       	mov	r1, r26
    569c:	aa 1b       	sub	r26, r26
    569e:	bb 1b       	sub	r27, r27
    56a0:	fd 01       	movw	r30, r26
    56a2:	0d c0       	rjmp	.+26     	; 0x56be <__udivmodsi4_ep>

000056a4 <__udivmodsi4_loop>:
    56a4:	aa 1f       	adc	r26, r26
    56a6:	bb 1f       	adc	r27, r27
    56a8:	ee 1f       	adc	r30, r30
    56aa:	ff 1f       	adc	r31, r31
    56ac:	a2 17       	cp	r26, r18
    56ae:	b3 07       	cpc	r27, r19
    56b0:	e4 07       	cpc	r30, r20
    56b2:	f5 07       	cpc	r31, r21
    56b4:	20 f0       	brcs	.+8      	; 0x56be <__udivmodsi4_ep>
    56b6:	a2 1b       	sub	r26, r18
    56b8:	b3 0b       	sbc	r27, r19
    56ba:	e4 0b       	sbc	r30, r20
    56bc:	f5 0b       	sbc	r31, r21

000056be <__udivmodsi4_ep>:
    56be:	66 1f       	adc	r22, r22
    56c0:	77 1f       	adc	r23, r23
    56c2:	88 1f       	adc	r24, r24
    56c4:	99 1f       	adc	r25, r25
    56c6:	1a 94       	dec	r1
    56c8:	69 f7       	brne	.-38     	; 0x56a4 <__udivmodsi4_loop>
    56ca:	60 95       	com	r22
    56cc:	70 95       	com	r23
    56ce:	80 95       	com	r24
    56d0:	90 95       	com	r25
    56d2:	9b 01       	movw	r18, r22
    56d4:	ac 01       	movw	r20, r24
    56d6:	bd 01       	movw	r22, r26
    56d8:	cf 01       	movw	r24, r30
    56da:	08 95       	ret

000056dc <__tablejump2__>:
    56dc:	ee 0f       	add	r30, r30
    56de:	ff 1f       	adc	r31, r31
    56e0:	88 1f       	adc	r24, r24
    56e2:	8b bf       	out	0x3b, r24	; 59
    56e4:	07 90       	elpm	r0, Z+
    56e6:	f6 91       	elpm	r31, Z
    56e8:	e0 2d       	mov	r30, r0
    56ea:	19 94       	eijmp

000056ec <calloc>:
    56ec:	0f 93       	push	r16
    56ee:	1f 93       	push	r17
    56f0:	cf 93       	push	r28
    56f2:	df 93       	push	r29
    56f4:	86 9f       	mul	r24, r22
    56f6:	80 01       	movw	r16, r0
    56f8:	87 9f       	mul	r24, r23
    56fa:	10 0d       	add	r17, r0
    56fc:	96 9f       	mul	r25, r22
    56fe:	10 0d       	add	r17, r0
    5700:	11 24       	eor	r1, r1
    5702:	c8 01       	movw	r24, r16
    5704:	0d d0       	rcall	.+26     	; 0x5720 <malloc>
    5706:	ec 01       	movw	r28, r24
    5708:	00 97       	sbiw	r24, 0x00	; 0
    570a:	21 f0       	breq	.+8      	; 0x5714 <calloc+0x28>
    570c:	a8 01       	movw	r20, r16
    570e:	60 e0       	ldi	r22, 0x00	; 0
    5710:	70 e0       	ldi	r23, 0x00	; 0
    5712:	34 d1       	rcall	.+616    	; 0x597c <memset>
    5714:	ce 01       	movw	r24, r28
    5716:	df 91       	pop	r29
    5718:	cf 91       	pop	r28
    571a:	1f 91       	pop	r17
    571c:	0f 91       	pop	r16
    571e:	08 95       	ret

00005720 <malloc>:
    5720:	0f 93       	push	r16
    5722:	1f 93       	push	r17
    5724:	cf 93       	push	r28
    5726:	df 93       	push	r29
    5728:	82 30       	cpi	r24, 0x02	; 2
    572a:	91 05       	cpc	r25, r1
    572c:	10 f4       	brcc	.+4      	; 0x5732 <malloc+0x12>
    572e:	82 e0       	ldi	r24, 0x02	; 2
    5730:	90 e0       	ldi	r25, 0x00	; 0
    5732:	e0 91 c5 1a 	lds	r30, 0x1AC5	; 0x801ac5 <__flp>
    5736:	f0 91 c6 1a 	lds	r31, 0x1AC6	; 0x801ac6 <__flp+0x1>
    573a:	20 e0       	ldi	r18, 0x00	; 0
    573c:	30 e0       	ldi	r19, 0x00	; 0
    573e:	a0 e0       	ldi	r26, 0x00	; 0
    5740:	b0 e0       	ldi	r27, 0x00	; 0
    5742:	30 97       	sbiw	r30, 0x00	; 0
    5744:	19 f1       	breq	.+70     	; 0x578c <malloc+0x6c>
    5746:	40 81       	ld	r20, Z
    5748:	51 81       	ldd	r21, Z+1	; 0x01
    574a:	02 81       	ldd	r16, Z+2	; 0x02
    574c:	13 81       	ldd	r17, Z+3	; 0x03
    574e:	48 17       	cp	r20, r24
    5750:	59 07       	cpc	r21, r25
    5752:	c8 f0       	brcs	.+50     	; 0x5786 <malloc+0x66>
    5754:	84 17       	cp	r24, r20
    5756:	95 07       	cpc	r25, r21
    5758:	69 f4       	brne	.+26     	; 0x5774 <malloc+0x54>
    575a:	10 97       	sbiw	r26, 0x00	; 0
    575c:	31 f0       	breq	.+12     	; 0x576a <malloc+0x4a>
    575e:	12 96       	adiw	r26, 0x02	; 2
    5760:	0c 93       	st	X, r16
    5762:	12 97       	sbiw	r26, 0x02	; 2
    5764:	13 96       	adiw	r26, 0x03	; 3
    5766:	1c 93       	st	X, r17
    5768:	27 c0       	rjmp	.+78     	; 0x57b8 <malloc+0x98>
    576a:	00 93 c5 1a 	sts	0x1AC5, r16	; 0x801ac5 <__flp>
    576e:	10 93 c6 1a 	sts	0x1AC6, r17	; 0x801ac6 <__flp+0x1>
    5772:	22 c0       	rjmp	.+68     	; 0x57b8 <malloc+0x98>
    5774:	21 15       	cp	r18, r1
    5776:	31 05       	cpc	r19, r1
    5778:	19 f0       	breq	.+6      	; 0x5780 <malloc+0x60>
    577a:	42 17       	cp	r20, r18
    577c:	53 07       	cpc	r21, r19
    577e:	18 f4       	brcc	.+6      	; 0x5786 <malloc+0x66>
    5780:	9a 01       	movw	r18, r20
    5782:	bd 01       	movw	r22, r26
    5784:	ef 01       	movw	r28, r30
    5786:	df 01       	movw	r26, r30
    5788:	f8 01       	movw	r30, r16
    578a:	db cf       	rjmp	.-74     	; 0x5742 <malloc+0x22>
    578c:	21 15       	cp	r18, r1
    578e:	31 05       	cpc	r19, r1
    5790:	f9 f0       	breq	.+62     	; 0x57d0 <malloc+0xb0>
    5792:	28 1b       	sub	r18, r24
    5794:	39 0b       	sbc	r19, r25
    5796:	24 30       	cpi	r18, 0x04	; 4
    5798:	31 05       	cpc	r19, r1
    579a:	80 f4       	brcc	.+32     	; 0x57bc <malloc+0x9c>
    579c:	8a 81       	ldd	r24, Y+2	; 0x02
    579e:	9b 81       	ldd	r25, Y+3	; 0x03
    57a0:	61 15       	cp	r22, r1
    57a2:	71 05       	cpc	r23, r1
    57a4:	21 f0       	breq	.+8      	; 0x57ae <malloc+0x8e>
    57a6:	fb 01       	movw	r30, r22
    57a8:	93 83       	std	Z+3, r25	; 0x03
    57aa:	82 83       	std	Z+2, r24	; 0x02
    57ac:	04 c0       	rjmp	.+8      	; 0x57b6 <malloc+0x96>
    57ae:	90 93 c6 1a 	sts	0x1AC6, r25	; 0x801ac6 <__flp+0x1>
    57b2:	80 93 c5 1a 	sts	0x1AC5, r24	; 0x801ac5 <__flp>
    57b6:	fe 01       	movw	r30, r28
    57b8:	32 96       	adiw	r30, 0x02	; 2
    57ba:	44 c0       	rjmp	.+136    	; 0x5844 <malloc+0x124>
    57bc:	fe 01       	movw	r30, r28
    57be:	e2 0f       	add	r30, r18
    57c0:	f3 1f       	adc	r31, r19
    57c2:	81 93       	st	Z+, r24
    57c4:	91 93       	st	Z+, r25
    57c6:	22 50       	subi	r18, 0x02	; 2
    57c8:	31 09       	sbc	r19, r1
    57ca:	39 83       	std	Y+1, r19	; 0x01
    57cc:	28 83       	st	Y, r18
    57ce:	3a c0       	rjmp	.+116    	; 0x5844 <malloc+0x124>
    57d0:	20 91 c3 1a 	lds	r18, 0x1AC3	; 0x801ac3 <__brkval>
    57d4:	30 91 c4 1a 	lds	r19, 0x1AC4	; 0x801ac4 <__brkval+0x1>
    57d8:	23 2b       	or	r18, r19
    57da:	41 f4       	brne	.+16     	; 0x57ec <malloc+0xcc>
    57dc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    57e0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    57e4:	30 93 c4 1a 	sts	0x1AC4, r19	; 0x801ac4 <__brkval+0x1>
    57e8:	20 93 c3 1a 	sts	0x1AC3, r18	; 0x801ac3 <__brkval>
    57ec:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    57f0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    57f4:	21 15       	cp	r18, r1
    57f6:	31 05       	cpc	r19, r1
    57f8:	41 f4       	brne	.+16     	; 0x580a <malloc+0xea>
    57fa:	2d b7       	in	r18, 0x3d	; 61
    57fc:	3e b7       	in	r19, 0x3e	; 62
    57fe:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5802:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5806:	24 1b       	sub	r18, r20
    5808:	35 0b       	sbc	r19, r21
    580a:	e0 91 c3 1a 	lds	r30, 0x1AC3	; 0x801ac3 <__brkval>
    580e:	f0 91 c4 1a 	lds	r31, 0x1AC4	; 0x801ac4 <__brkval+0x1>
    5812:	e2 17       	cp	r30, r18
    5814:	f3 07       	cpc	r31, r19
    5816:	a0 f4       	brcc	.+40     	; 0x5840 <malloc+0x120>
    5818:	2e 1b       	sub	r18, r30
    581a:	3f 0b       	sbc	r19, r31
    581c:	28 17       	cp	r18, r24
    581e:	39 07       	cpc	r19, r25
    5820:	78 f0       	brcs	.+30     	; 0x5840 <malloc+0x120>
    5822:	ac 01       	movw	r20, r24
    5824:	4e 5f       	subi	r20, 0xFE	; 254
    5826:	5f 4f       	sbci	r21, 0xFF	; 255
    5828:	24 17       	cp	r18, r20
    582a:	35 07       	cpc	r19, r21
    582c:	48 f0       	brcs	.+18     	; 0x5840 <malloc+0x120>
    582e:	4e 0f       	add	r20, r30
    5830:	5f 1f       	adc	r21, r31
    5832:	50 93 c4 1a 	sts	0x1AC4, r21	; 0x801ac4 <__brkval+0x1>
    5836:	40 93 c3 1a 	sts	0x1AC3, r20	; 0x801ac3 <__brkval>
    583a:	81 93       	st	Z+, r24
    583c:	91 93       	st	Z+, r25
    583e:	02 c0       	rjmp	.+4      	; 0x5844 <malloc+0x124>
    5840:	e0 e0       	ldi	r30, 0x00	; 0
    5842:	f0 e0       	ldi	r31, 0x00	; 0
    5844:	cf 01       	movw	r24, r30
    5846:	df 91       	pop	r29
    5848:	cf 91       	pop	r28
    584a:	1f 91       	pop	r17
    584c:	0f 91       	pop	r16
    584e:	08 95       	ret

00005850 <free>:
    5850:	cf 93       	push	r28
    5852:	df 93       	push	r29
    5854:	00 97       	sbiw	r24, 0x00	; 0
    5856:	09 f4       	brne	.+2      	; 0x585a <free+0xa>
    5858:	81 c0       	rjmp	.+258    	; 0x595c <free+0x10c>
    585a:	fc 01       	movw	r30, r24
    585c:	32 97       	sbiw	r30, 0x02	; 2
    585e:	13 82       	std	Z+3, r1	; 0x03
    5860:	12 82       	std	Z+2, r1	; 0x02
    5862:	a0 91 c5 1a 	lds	r26, 0x1AC5	; 0x801ac5 <__flp>
    5866:	b0 91 c6 1a 	lds	r27, 0x1AC6	; 0x801ac6 <__flp+0x1>
    586a:	10 97       	sbiw	r26, 0x00	; 0
    586c:	81 f4       	brne	.+32     	; 0x588e <free+0x3e>
    586e:	20 81       	ld	r18, Z
    5870:	31 81       	ldd	r19, Z+1	; 0x01
    5872:	82 0f       	add	r24, r18
    5874:	93 1f       	adc	r25, r19
    5876:	20 91 c3 1a 	lds	r18, 0x1AC3	; 0x801ac3 <__brkval>
    587a:	30 91 c4 1a 	lds	r19, 0x1AC4	; 0x801ac4 <__brkval+0x1>
    587e:	28 17       	cp	r18, r24
    5880:	39 07       	cpc	r19, r25
    5882:	51 f5       	brne	.+84     	; 0x58d8 <free+0x88>
    5884:	f0 93 c4 1a 	sts	0x1AC4, r31	; 0x801ac4 <__brkval+0x1>
    5888:	e0 93 c3 1a 	sts	0x1AC3, r30	; 0x801ac3 <__brkval>
    588c:	67 c0       	rjmp	.+206    	; 0x595c <free+0x10c>
    588e:	ed 01       	movw	r28, r26
    5890:	20 e0       	ldi	r18, 0x00	; 0
    5892:	30 e0       	ldi	r19, 0x00	; 0
    5894:	ce 17       	cp	r28, r30
    5896:	df 07       	cpc	r29, r31
    5898:	40 f4       	brcc	.+16     	; 0x58aa <free+0x5a>
    589a:	4a 81       	ldd	r20, Y+2	; 0x02
    589c:	5b 81       	ldd	r21, Y+3	; 0x03
    589e:	9e 01       	movw	r18, r28
    58a0:	41 15       	cp	r20, r1
    58a2:	51 05       	cpc	r21, r1
    58a4:	f1 f0       	breq	.+60     	; 0x58e2 <free+0x92>
    58a6:	ea 01       	movw	r28, r20
    58a8:	f5 cf       	rjmp	.-22     	; 0x5894 <free+0x44>
    58aa:	d3 83       	std	Z+3, r29	; 0x03
    58ac:	c2 83       	std	Z+2, r28	; 0x02
    58ae:	40 81       	ld	r20, Z
    58b0:	51 81       	ldd	r21, Z+1	; 0x01
    58b2:	84 0f       	add	r24, r20
    58b4:	95 1f       	adc	r25, r21
    58b6:	c8 17       	cp	r28, r24
    58b8:	d9 07       	cpc	r29, r25
    58ba:	59 f4       	brne	.+22     	; 0x58d2 <free+0x82>
    58bc:	88 81       	ld	r24, Y
    58be:	99 81       	ldd	r25, Y+1	; 0x01
    58c0:	84 0f       	add	r24, r20
    58c2:	95 1f       	adc	r25, r21
    58c4:	02 96       	adiw	r24, 0x02	; 2
    58c6:	91 83       	std	Z+1, r25	; 0x01
    58c8:	80 83       	st	Z, r24
    58ca:	8a 81       	ldd	r24, Y+2	; 0x02
    58cc:	9b 81       	ldd	r25, Y+3	; 0x03
    58ce:	93 83       	std	Z+3, r25	; 0x03
    58d0:	82 83       	std	Z+2, r24	; 0x02
    58d2:	21 15       	cp	r18, r1
    58d4:	31 05       	cpc	r19, r1
    58d6:	29 f4       	brne	.+10     	; 0x58e2 <free+0x92>
    58d8:	f0 93 c6 1a 	sts	0x1AC6, r31	; 0x801ac6 <__flp+0x1>
    58dc:	e0 93 c5 1a 	sts	0x1AC5, r30	; 0x801ac5 <__flp>
    58e0:	3d c0       	rjmp	.+122    	; 0x595c <free+0x10c>
    58e2:	e9 01       	movw	r28, r18
    58e4:	fb 83       	std	Y+3, r31	; 0x03
    58e6:	ea 83       	std	Y+2, r30	; 0x02
    58e8:	49 91       	ld	r20, Y+
    58ea:	59 91       	ld	r21, Y+
    58ec:	c4 0f       	add	r28, r20
    58ee:	d5 1f       	adc	r29, r21
    58f0:	ec 17       	cp	r30, r28
    58f2:	fd 07       	cpc	r31, r29
    58f4:	61 f4       	brne	.+24     	; 0x590e <free+0xbe>
    58f6:	80 81       	ld	r24, Z
    58f8:	91 81       	ldd	r25, Z+1	; 0x01
    58fa:	84 0f       	add	r24, r20
    58fc:	95 1f       	adc	r25, r21
    58fe:	02 96       	adiw	r24, 0x02	; 2
    5900:	e9 01       	movw	r28, r18
    5902:	99 83       	std	Y+1, r25	; 0x01
    5904:	88 83       	st	Y, r24
    5906:	82 81       	ldd	r24, Z+2	; 0x02
    5908:	93 81       	ldd	r25, Z+3	; 0x03
    590a:	9b 83       	std	Y+3, r25	; 0x03
    590c:	8a 83       	std	Y+2, r24	; 0x02
    590e:	e0 e0       	ldi	r30, 0x00	; 0
    5910:	f0 e0       	ldi	r31, 0x00	; 0
    5912:	12 96       	adiw	r26, 0x02	; 2
    5914:	8d 91       	ld	r24, X+
    5916:	9c 91       	ld	r25, X
    5918:	13 97       	sbiw	r26, 0x03	; 3
    591a:	00 97       	sbiw	r24, 0x00	; 0
    591c:	19 f0       	breq	.+6      	; 0x5924 <free+0xd4>
    591e:	fd 01       	movw	r30, r26
    5920:	dc 01       	movw	r26, r24
    5922:	f7 cf       	rjmp	.-18     	; 0x5912 <free+0xc2>
    5924:	8d 91       	ld	r24, X+
    5926:	9c 91       	ld	r25, X
    5928:	11 97       	sbiw	r26, 0x01	; 1
    592a:	9d 01       	movw	r18, r26
    592c:	2e 5f       	subi	r18, 0xFE	; 254
    592e:	3f 4f       	sbci	r19, 0xFF	; 255
    5930:	82 0f       	add	r24, r18
    5932:	93 1f       	adc	r25, r19
    5934:	20 91 c3 1a 	lds	r18, 0x1AC3	; 0x801ac3 <__brkval>
    5938:	30 91 c4 1a 	lds	r19, 0x1AC4	; 0x801ac4 <__brkval+0x1>
    593c:	28 17       	cp	r18, r24
    593e:	39 07       	cpc	r19, r25
    5940:	69 f4       	brne	.+26     	; 0x595c <free+0x10c>
    5942:	30 97       	sbiw	r30, 0x00	; 0
    5944:	29 f4       	brne	.+10     	; 0x5950 <free+0x100>
    5946:	10 92 c6 1a 	sts	0x1AC6, r1	; 0x801ac6 <__flp+0x1>
    594a:	10 92 c5 1a 	sts	0x1AC5, r1	; 0x801ac5 <__flp>
    594e:	02 c0       	rjmp	.+4      	; 0x5954 <free+0x104>
    5950:	13 82       	std	Z+3, r1	; 0x03
    5952:	12 82       	std	Z+2, r1	; 0x02
    5954:	b0 93 c4 1a 	sts	0x1AC4, r27	; 0x801ac4 <__brkval+0x1>
    5958:	a0 93 c3 1a 	sts	0x1AC3, r26	; 0x801ac3 <__brkval>
    595c:	df 91       	pop	r29
    595e:	cf 91       	pop	r28
    5960:	08 95       	ret

00005962 <abort>:
    5962:	81 e0       	ldi	r24, 0x01	; 1
    5964:	90 e0       	ldi	r25, 0x00	; 0
    5966:	f8 94       	cli
    5968:	7d c3       	rjmp	.+1786   	; 0x6064 <_exit>

0000596a <memcpy>:
    596a:	fb 01       	movw	r30, r22
    596c:	dc 01       	movw	r26, r24
    596e:	02 c0       	rjmp	.+4      	; 0x5974 <memcpy+0xa>
    5970:	01 90       	ld	r0, Z+
    5972:	0d 92       	st	X+, r0
    5974:	41 50       	subi	r20, 0x01	; 1
    5976:	50 40       	sbci	r21, 0x00	; 0
    5978:	d8 f7       	brcc	.-10     	; 0x5970 <memcpy+0x6>
    597a:	08 95       	ret

0000597c <memset>:
    597c:	dc 01       	movw	r26, r24
    597e:	01 c0       	rjmp	.+2      	; 0x5982 <memset+0x6>
    5980:	6d 93       	st	X+, r22
    5982:	41 50       	subi	r20, 0x01	; 1
    5984:	50 40       	sbci	r21, 0x00	; 0
    5986:	e0 f7       	brcc	.-8      	; 0x5980 <memset+0x4>
    5988:	08 95       	ret

0000598a <strcasestr>:
    598a:	fb 01       	movw	r30, r22
    598c:	51 91       	ld	r21, Z+
    598e:	55 23       	and	r21, r21
    5990:	b1 f0       	breq	.+44     	; 0x59be <strcasestr+0x34>
    5992:	bf 01       	movw	r22, r30
    5994:	dc 01       	movw	r26, r24
    5996:	05 2e       	mov	r0, r21
    5998:	4d 91       	ld	r20, X+
    599a:	44 23       	and	r20, r20
    599c:	69 f0       	breq	.+26     	; 0x59b8 <strcasestr+0x2e>
    599e:	10 d0       	rcall	.+32     	; 0x59c0 <strcasestr+0x36>
    59a0:	d9 f7       	brne	.-10     	; 0x5998 <strcasestr+0xe>
    59a2:	cd 01       	movw	r24, r26
    59a4:	01 90       	ld	r0, Z+
    59a6:	00 20       	and	r0, r0
    59a8:	49 f0       	breq	.+18     	; 0x59bc <strcasestr+0x32>
    59aa:	4d 91       	ld	r20, X+
    59ac:	41 11       	cpse	r20, r1
    59ae:	08 d0       	rcall	.+16     	; 0x59c0 <strcasestr+0x36>
    59b0:	c9 f3       	breq	.-14     	; 0x59a4 <strcasestr+0x1a>
    59b2:	fb 01       	movw	r30, r22
    59b4:	41 11       	cpse	r20, r1
    59b6:	ee cf       	rjmp	.-36     	; 0x5994 <strcasestr+0xa>
    59b8:	81 e0       	ldi	r24, 0x01	; 1
    59ba:	90 e0       	ldi	r25, 0x00	; 0
    59bc:	01 97       	sbiw	r24, 0x01	; 1
    59be:	08 95       	ret
    59c0:	40 25       	eor	r20, r0
    59c2:	39 f0       	breq	.+14     	; 0x59d2 <strcasestr+0x48>
    59c4:	40 32       	cpi	r20, 0x20	; 32
    59c6:	29 f4       	brne	.+10     	; 0x59d2 <strcasestr+0x48>
    59c8:	40 29       	or	r20, r0
    59ca:	4b 57       	subi	r20, 0x7B	; 123
    59cc:	46 5e       	subi	r20, 0xE6	; 230
    59ce:	08 f0       	brcs	.+2      	; 0x59d2 <strcasestr+0x48>
    59d0:	18 94       	sez
    59d2:	08 95       	ret

000059d4 <strcat>:
    59d4:	fb 01       	movw	r30, r22
    59d6:	dc 01       	movw	r26, r24
    59d8:	0d 90       	ld	r0, X+
    59da:	00 20       	and	r0, r0
    59dc:	e9 f7       	brne	.-6      	; 0x59d8 <strcat+0x4>
    59de:	11 97       	sbiw	r26, 0x01	; 1
    59e0:	01 90       	ld	r0, Z+
    59e2:	0d 92       	st	X+, r0
    59e4:	00 20       	and	r0, r0
    59e6:	e1 f7       	brne	.-8      	; 0x59e0 <strcat+0xc>
    59e8:	08 95       	ret

000059ea <strcpy>:
    59ea:	fb 01       	movw	r30, r22
    59ec:	dc 01       	movw	r26, r24
    59ee:	01 90       	ld	r0, Z+
    59f0:	0d 92       	st	X+, r0
    59f2:	00 20       	and	r0, r0
    59f4:	e1 f7       	brne	.-8      	; 0x59ee <strcpy+0x4>
    59f6:	08 95       	ret

000059f8 <strncasecmp>:
    59f8:	fb 01       	movw	r30, r22
    59fa:	dc 01       	movw	r26, r24
    59fc:	41 50       	subi	r20, 0x01	; 1
    59fe:	50 40       	sbci	r21, 0x00	; 0
    5a00:	88 f0       	brcs	.+34     	; 0x5a24 <strncasecmp+0x2c>
    5a02:	8d 91       	ld	r24, X+
    5a04:	81 34       	cpi	r24, 0x41	; 65
    5a06:	1c f0       	brlt	.+6      	; 0x5a0e <strncasecmp+0x16>
    5a08:	8b 35       	cpi	r24, 0x5B	; 91
    5a0a:	0c f4       	brge	.+2      	; 0x5a0e <strncasecmp+0x16>
    5a0c:	80 5e       	subi	r24, 0xE0	; 224
    5a0e:	61 91       	ld	r22, Z+
    5a10:	61 34       	cpi	r22, 0x41	; 65
    5a12:	1c f0       	brlt	.+6      	; 0x5a1a <strncasecmp+0x22>
    5a14:	6b 35       	cpi	r22, 0x5B	; 91
    5a16:	0c f4       	brge	.+2      	; 0x5a1a <strncasecmp+0x22>
    5a18:	60 5e       	subi	r22, 0xE0	; 224
    5a1a:	86 1b       	sub	r24, r22
    5a1c:	61 11       	cpse	r22, r1
    5a1e:	71 f3       	breq	.-36     	; 0x59fc <strncasecmp+0x4>
    5a20:	99 0b       	sbc	r25, r25
    5a22:	08 95       	ret
    5a24:	88 1b       	sub	r24, r24
    5a26:	fc cf       	rjmp	.-8      	; 0x5a20 <strncasecmp+0x28>

00005a28 <printf>:
    5a28:	cf 93       	push	r28
    5a2a:	df 93       	push	r29
    5a2c:	cd b7       	in	r28, 0x3d	; 61
    5a2e:	de b7       	in	r29, 0x3e	; 62
    5a30:	ae 01       	movw	r20, r28
    5a32:	4a 5f       	subi	r20, 0xFA	; 250
    5a34:	5f 4f       	sbci	r21, 0xFF	; 255
    5a36:	fa 01       	movw	r30, r20
    5a38:	61 91       	ld	r22, Z+
    5a3a:	71 91       	ld	r23, Z+
    5a3c:	af 01       	movw	r20, r30
    5a3e:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <__iob+0x2>
    5a42:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <__iob+0x3>
    5a46:	61 d0       	rcall	.+194    	; 0x5b0a <vfprintf>
    5a48:	df 91       	pop	r29
    5a4a:	cf 91       	pop	r28
    5a4c:	08 95       	ret

00005a4e <puts>:
    5a4e:	0f 93       	push	r16
    5a50:	1f 93       	push	r17
    5a52:	cf 93       	push	r28
    5a54:	df 93       	push	r29
    5a56:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <__iob+0x2>
    5a5a:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <__iob+0x3>
    5a5e:	23 81       	ldd	r18, Z+3	; 0x03
    5a60:	21 ff       	sbrs	r18, 1
    5a62:	1b c0       	rjmp	.+54     	; 0x5a9a <puts+0x4c>
    5a64:	8c 01       	movw	r16, r24
    5a66:	d0 e0       	ldi	r29, 0x00	; 0
    5a68:	c0 e0       	ldi	r28, 0x00	; 0
    5a6a:	f8 01       	movw	r30, r16
    5a6c:	81 91       	ld	r24, Z+
    5a6e:	8f 01       	movw	r16, r30
    5a70:	60 91 c9 1a 	lds	r22, 0x1AC9	; 0x801ac9 <__iob+0x2>
    5a74:	70 91 ca 1a 	lds	r23, 0x1ACA	; 0x801aca <__iob+0x3>
    5a78:	db 01       	movw	r26, r22
    5a7a:	18 96       	adiw	r26, 0x08	; 8
    5a7c:	ed 91       	ld	r30, X+
    5a7e:	fc 91       	ld	r31, X
    5a80:	19 97       	sbiw	r26, 0x09	; 9
    5a82:	88 23       	and	r24, r24
    5a84:	31 f0       	breq	.+12     	; 0x5a92 <puts+0x44>
    5a86:	19 95       	eicall
    5a88:	89 2b       	or	r24, r25
    5a8a:	79 f3       	breq	.-34     	; 0x5a6a <puts+0x1c>
    5a8c:	df ef       	ldi	r29, 0xFF	; 255
    5a8e:	cf ef       	ldi	r28, 0xFF	; 255
    5a90:	ec cf       	rjmp	.-40     	; 0x5a6a <puts+0x1c>
    5a92:	8a e0       	ldi	r24, 0x0A	; 10
    5a94:	19 95       	eicall
    5a96:	89 2b       	or	r24, r25
    5a98:	19 f0       	breq	.+6      	; 0x5aa0 <puts+0x52>
    5a9a:	8f ef       	ldi	r24, 0xFF	; 255
    5a9c:	9f ef       	ldi	r25, 0xFF	; 255
    5a9e:	02 c0       	rjmp	.+4      	; 0x5aa4 <puts+0x56>
    5aa0:	8d 2f       	mov	r24, r29
    5aa2:	9c 2f       	mov	r25, r28
    5aa4:	df 91       	pop	r29
    5aa6:	cf 91       	pop	r28
    5aa8:	1f 91       	pop	r17
    5aaa:	0f 91       	pop	r16
    5aac:	08 95       	ret

00005aae <sprintf>:
    5aae:	0f 93       	push	r16
    5ab0:	1f 93       	push	r17
    5ab2:	cf 93       	push	r28
    5ab4:	df 93       	push	r29
    5ab6:	cd b7       	in	r28, 0x3d	; 61
    5ab8:	de b7       	in	r29, 0x3e	; 62
    5aba:	2e 97       	sbiw	r28, 0x0e	; 14
    5abc:	0f b6       	in	r0, 0x3f	; 63
    5abe:	f8 94       	cli
    5ac0:	de bf       	out	0x3e, r29	; 62
    5ac2:	0f be       	out	0x3f, r0	; 63
    5ac4:	cd bf       	out	0x3d, r28	; 61
    5ac6:	0e 89       	ldd	r16, Y+22	; 0x16
    5ac8:	1f 89       	ldd	r17, Y+23	; 0x17
    5aca:	86 e0       	ldi	r24, 0x06	; 6
    5acc:	8c 83       	std	Y+4, r24	; 0x04
    5ace:	1a 83       	std	Y+2, r17	; 0x02
    5ad0:	09 83       	std	Y+1, r16	; 0x01
    5ad2:	8f ef       	ldi	r24, 0xFF	; 255
    5ad4:	9f e7       	ldi	r25, 0x7F	; 127
    5ad6:	9e 83       	std	Y+6, r25	; 0x06
    5ad8:	8d 83       	std	Y+5, r24	; 0x05
    5ada:	ae 01       	movw	r20, r28
    5adc:	46 5e       	subi	r20, 0xE6	; 230
    5ade:	5f 4f       	sbci	r21, 0xFF	; 255
    5ae0:	68 8d       	ldd	r22, Y+24	; 0x18
    5ae2:	79 8d       	ldd	r23, Y+25	; 0x19
    5ae4:	ce 01       	movw	r24, r28
    5ae6:	01 96       	adiw	r24, 0x01	; 1
    5ae8:	10 d0       	rcall	.+32     	; 0x5b0a <vfprintf>
    5aea:	ef 81       	ldd	r30, Y+7	; 0x07
    5aec:	f8 85       	ldd	r31, Y+8	; 0x08
    5aee:	e0 0f       	add	r30, r16
    5af0:	f1 1f       	adc	r31, r17
    5af2:	10 82       	st	Z, r1
    5af4:	2e 96       	adiw	r28, 0x0e	; 14
    5af6:	0f b6       	in	r0, 0x3f	; 63
    5af8:	f8 94       	cli
    5afa:	de bf       	out	0x3e, r29	; 62
    5afc:	0f be       	out	0x3f, r0	; 63
    5afe:	cd bf       	out	0x3d, r28	; 61
    5b00:	df 91       	pop	r29
    5b02:	cf 91       	pop	r28
    5b04:	1f 91       	pop	r17
    5b06:	0f 91       	pop	r16
    5b08:	08 95       	ret

00005b0a <vfprintf>:
    5b0a:	2f 92       	push	r2
    5b0c:	3f 92       	push	r3
    5b0e:	4f 92       	push	r4
    5b10:	5f 92       	push	r5
    5b12:	6f 92       	push	r6
    5b14:	7f 92       	push	r7
    5b16:	8f 92       	push	r8
    5b18:	9f 92       	push	r9
    5b1a:	af 92       	push	r10
    5b1c:	bf 92       	push	r11
    5b1e:	cf 92       	push	r12
    5b20:	df 92       	push	r13
    5b22:	ef 92       	push	r14
    5b24:	ff 92       	push	r15
    5b26:	0f 93       	push	r16
    5b28:	1f 93       	push	r17
    5b2a:	cf 93       	push	r28
    5b2c:	df 93       	push	r29
    5b2e:	cd b7       	in	r28, 0x3d	; 61
    5b30:	de b7       	in	r29, 0x3e	; 62
    5b32:	2b 97       	sbiw	r28, 0x0b	; 11
    5b34:	0f b6       	in	r0, 0x3f	; 63
    5b36:	f8 94       	cli
    5b38:	de bf       	out	0x3e, r29	; 62
    5b3a:	0f be       	out	0x3f, r0	; 63
    5b3c:	cd bf       	out	0x3d, r28	; 61
    5b3e:	6c 01       	movw	r12, r24
    5b40:	7b 01       	movw	r14, r22
    5b42:	8a 01       	movw	r16, r20
    5b44:	fc 01       	movw	r30, r24
    5b46:	17 82       	std	Z+7, r1	; 0x07
    5b48:	16 82       	std	Z+6, r1	; 0x06
    5b4a:	83 81       	ldd	r24, Z+3	; 0x03
    5b4c:	81 ff       	sbrs	r24, 1
    5b4e:	bf c1       	rjmp	.+894    	; 0x5ece <vfprintf+0x3c4>
    5b50:	ce 01       	movw	r24, r28
    5b52:	01 96       	adiw	r24, 0x01	; 1
    5b54:	3c 01       	movw	r6, r24
    5b56:	f6 01       	movw	r30, r12
    5b58:	93 81       	ldd	r25, Z+3	; 0x03
    5b5a:	f7 01       	movw	r30, r14
    5b5c:	93 fd       	sbrc	r25, 3
    5b5e:	85 91       	lpm	r24, Z+
    5b60:	93 ff       	sbrs	r25, 3
    5b62:	81 91       	ld	r24, Z+
    5b64:	7f 01       	movw	r14, r30
    5b66:	88 23       	and	r24, r24
    5b68:	09 f4       	brne	.+2      	; 0x5b6c <vfprintf+0x62>
    5b6a:	ad c1       	rjmp	.+858    	; 0x5ec6 <vfprintf+0x3bc>
    5b6c:	85 32       	cpi	r24, 0x25	; 37
    5b6e:	39 f4       	brne	.+14     	; 0x5b7e <vfprintf+0x74>
    5b70:	93 fd       	sbrc	r25, 3
    5b72:	85 91       	lpm	r24, Z+
    5b74:	93 ff       	sbrs	r25, 3
    5b76:	81 91       	ld	r24, Z+
    5b78:	7f 01       	movw	r14, r30
    5b7a:	85 32       	cpi	r24, 0x25	; 37
    5b7c:	21 f4       	brne	.+8      	; 0x5b86 <vfprintf+0x7c>
    5b7e:	b6 01       	movw	r22, r12
    5b80:	90 e0       	ldi	r25, 0x00	; 0
    5b82:	d6 d1       	rcall	.+940    	; 0x5f30 <fputc>
    5b84:	e8 cf       	rjmp	.-48     	; 0x5b56 <vfprintf+0x4c>
    5b86:	91 2c       	mov	r9, r1
    5b88:	21 2c       	mov	r2, r1
    5b8a:	31 2c       	mov	r3, r1
    5b8c:	ff e1       	ldi	r31, 0x1F	; 31
    5b8e:	f3 15       	cp	r31, r3
    5b90:	d8 f0       	brcs	.+54     	; 0x5bc8 <vfprintf+0xbe>
    5b92:	8b 32       	cpi	r24, 0x2B	; 43
    5b94:	79 f0       	breq	.+30     	; 0x5bb4 <vfprintf+0xaa>
    5b96:	38 f4       	brcc	.+14     	; 0x5ba6 <vfprintf+0x9c>
    5b98:	80 32       	cpi	r24, 0x20	; 32
    5b9a:	79 f0       	breq	.+30     	; 0x5bba <vfprintf+0xb0>
    5b9c:	83 32       	cpi	r24, 0x23	; 35
    5b9e:	a1 f4       	brne	.+40     	; 0x5bc8 <vfprintf+0xbe>
    5ba0:	23 2d       	mov	r18, r3
    5ba2:	20 61       	ori	r18, 0x10	; 16
    5ba4:	1d c0       	rjmp	.+58     	; 0x5be0 <vfprintf+0xd6>
    5ba6:	8d 32       	cpi	r24, 0x2D	; 45
    5ba8:	61 f0       	breq	.+24     	; 0x5bc2 <vfprintf+0xb8>
    5baa:	80 33       	cpi	r24, 0x30	; 48
    5bac:	69 f4       	brne	.+26     	; 0x5bc8 <vfprintf+0xbe>
    5bae:	23 2d       	mov	r18, r3
    5bb0:	21 60       	ori	r18, 0x01	; 1
    5bb2:	16 c0       	rjmp	.+44     	; 0x5be0 <vfprintf+0xd6>
    5bb4:	83 2d       	mov	r24, r3
    5bb6:	82 60       	ori	r24, 0x02	; 2
    5bb8:	38 2e       	mov	r3, r24
    5bba:	e3 2d       	mov	r30, r3
    5bbc:	e4 60       	ori	r30, 0x04	; 4
    5bbe:	3e 2e       	mov	r3, r30
    5bc0:	2a c0       	rjmp	.+84     	; 0x5c16 <vfprintf+0x10c>
    5bc2:	f3 2d       	mov	r31, r3
    5bc4:	f8 60       	ori	r31, 0x08	; 8
    5bc6:	1d c0       	rjmp	.+58     	; 0x5c02 <vfprintf+0xf8>
    5bc8:	37 fc       	sbrc	r3, 7
    5bca:	2d c0       	rjmp	.+90     	; 0x5c26 <vfprintf+0x11c>
    5bcc:	20 ed       	ldi	r18, 0xD0	; 208
    5bce:	28 0f       	add	r18, r24
    5bd0:	2a 30       	cpi	r18, 0x0A	; 10
    5bd2:	40 f0       	brcs	.+16     	; 0x5be4 <vfprintf+0xda>
    5bd4:	8e 32       	cpi	r24, 0x2E	; 46
    5bd6:	b9 f4       	brne	.+46     	; 0x5c06 <vfprintf+0xfc>
    5bd8:	36 fc       	sbrc	r3, 6
    5bda:	75 c1       	rjmp	.+746    	; 0x5ec6 <vfprintf+0x3bc>
    5bdc:	23 2d       	mov	r18, r3
    5bde:	20 64       	ori	r18, 0x40	; 64
    5be0:	32 2e       	mov	r3, r18
    5be2:	19 c0       	rjmp	.+50     	; 0x5c16 <vfprintf+0x10c>
    5be4:	36 fe       	sbrs	r3, 6
    5be6:	06 c0       	rjmp	.+12     	; 0x5bf4 <vfprintf+0xea>
    5be8:	8a e0       	ldi	r24, 0x0A	; 10
    5bea:	98 9e       	mul	r9, r24
    5bec:	20 0d       	add	r18, r0
    5bee:	11 24       	eor	r1, r1
    5bf0:	92 2e       	mov	r9, r18
    5bf2:	11 c0       	rjmp	.+34     	; 0x5c16 <vfprintf+0x10c>
    5bf4:	ea e0       	ldi	r30, 0x0A	; 10
    5bf6:	2e 9e       	mul	r2, r30
    5bf8:	20 0d       	add	r18, r0
    5bfa:	11 24       	eor	r1, r1
    5bfc:	22 2e       	mov	r2, r18
    5bfe:	f3 2d       	mov	r31, r3
    5c00:	f0 62       	ori	r31, 0x20	; 32
    5c02:	3f 2e       	mov	r3, r31
    5c04:	08 c0       	rjmp	.+16     	; 0x5c16 <vfprintf+0x10c>
    5c06:	8c 36       	cpi	r24, 0x6C	; 108
    5c08:	21 f4       	brne	.+8      	; 0x5c12 <vfprintf+0x108>
    5c0a:	83 2d       	mov	r24, r3
    5c0c:	80 68       	ori	r24, 0x80	; 128
    5c0e:	38 2e       	mov	r3, r24
    5c10:	02 c0       	rjmp	.+4      	; 0x5c16 <vfprintf+0x10c>
    5c12:	88 36       	cpi	r24, 0x68	; 104
    5c14:	41 f4       	brne	.+16     	; 0x5c26 <vfprintf+0x11c>
    5c16:	f7 01       	movw	r30, r14
    5c18:	93 fd       	sbrc	r25, 3
    5c1a:	85 91       	lpm	r24, Z+
    5c1c:	93 ff       	sbrs	r25, 3
    5c1e:	81 91       	ld	r24, Z+
    5c20:	7f 01       	movw	r14, r30
    5c22:	81 11       	cpse	r24, r1
    5c24:	b3 cf       	rjmp	.-154    	; 0x5b8c <vfprintf+0x82>
    5c26:	98 2f       	mov	r25, r24
    5c28:	9f 7d       	andi	r25, 0xDF	; 223
    5c2a:	95 54       	subi	r25, 0x45	; 69
    5c2c:	93 30       	cpi	r25, 0x03	; 3
    5c2e:	28 f4       	brcc	.+10     	; 0x5c3a <vfprintf+0x130>
    5c30:	0c 5f       	subi	r16, 0xFC	; 252
    5c32:	1f 4f       	sbci	r17, 0xFF	; 255
    5c34:	9f e3       	ldi	r25, 0x3F	; 63
    5c36:	99 83       	std	Y+1, r25	; 0x01
    5c38:	0d c0       	rjmp	.+26     	; 0x5c54 <vfprintf+0x14a>
    5c3a:	83 36       	cpi	r24, 0x63	; 99
    5c3c:	31 f0       	breq	.+12     	; 0x5c4a <vfprintf+0x140>
    5c3e:	83 37       	cpi	r24, 0x73	; 115
    5c40:	71 f0       	breq	.+28     	; 0x5c5e <vfprintf+0x154>
    5c42:	83 35       	cpi	r24, 0x53	; 83
    5c44:	09 f0       	breq	.+2      	; 0x5c48 <vfprintf+0x13e>
    5c46:	55 c0       	rjmp	.+170    	; 0x5cf2 <vfprintf+0x1e8>
    5c48:	20 c0       	rjmp	.+64     	; 0x5c8a <vfprintf+0x180>
    5c4a:	f8 01       	movw	r30, r16
    5c4c:	80 81       	ld	r24, Z
    5c4e:	89 83       	std	Y+1, r24	; 0x01
    5c50:	0e 5f       	subi	r16, 0xFE	; 254
    5c52:	1f 4f       	sbci	r17, 0xFF	; 255
    5c54:	88 24       	eor	r8, r8
    5c56:	83 94       	inc	r8
    5c58:	91 2c       	mov	r9, r1
    5c5a:	53 01       	movw	r10, r6
    5c5c:	12 c0       	rjmp	.+36     	; 0x5c82 <vfprintf+0x178>
    5c5e:	28 01       	movw	r4, r16
    5c60:	f2 e0       	ldi	r31, 0x02	; 2
    5c62:	4f 0e       	add	r4, r31
    5c64:	51 1c       	adc	r5, r1
    5c66:	f8 01       	movw	r30, r16
    5c68:	a0 80       	ld	r10, Z
    5c6a:	b1 80       	ldd	r11, Z+1	; 0x01
    5c6c:	36 fe       	sbrs	r3, 6
    5c6e:	03 c0       	rjmp	.+6      	; 0x5c76 <vfprintf+0x16c>
    5c70:	69 2d       	mov	r22, r9
    5c72:	70 e0       	ldi	r23, 0x00	; 0
    5c74:	02 c0       	rjmp	.+4      	; 0x5c7a <vfprintf+0x170>
    5c76:	6f ef       	ldi	r22, 0xFF	; 255
    5c78:	7f ef       	ldi	r23, 0xFF	; 255
    5c7a:	c5 01       	movw	r24, r10
    5c7c:	4e d1       	rcall	.+668    	; 0x5f1a <strnlen>
    5c7e:	4c 01       	movw	r8, r24
    5c80:	82 01       	movw	r16, r4
    5c82:	f3 2d       	mov	r31, r3
    5c84:	ff 77       	andi	r31, 0x7F	; 127
    5c86:	3f 2e       	mov	r3, r31
    5c88:	15 c0       	rjmp	.+42     	; 0x5cb4 <vfprintf+0x1aa>
    5c8a:	28 01       	movw	r4, r16
    5c8c:	22 e0       	ldi	r18, 0x02	; 2
    5c8e:	42 0e       	add	r4, r18
    5c90:	51 1c       	adc	r5, r1
    5c92:	f8 01       	movw	r30, r16
    5c94:	a0 80       	ld	r10, Z
    5c96:	b1 80       	ldd	r11, Z+1	; 0x01
    5c98:	36 fe       	sbrs	r3, 6
    5c9a:	03 c0       	rjmp	.+6      	; 0x5ca2 <vfprintf+0x198>
    5c9c:	69 2d       	mov	r22, r9
    5c9e:	70 e0       	ldi	r23, 0x00	; 0
    5ca0:	02 c0       	rjmp	.+4      	; 0x5ca6 <vfprintf+0x19c>
    5ca2:	6f ef       	ldi	r22, 0xFF	; 255
    5ca4:	7f ef       	ldi	r23, 0xFF	; 255
    5ca6:	c5 01       	movw	r24, r10
    5ca8:	2d d1       	rcall	.+602    	; 0x5f04 <strnlen_P>
    5caa:	4c 01       	movw	r8, r24
    5cac:	f3 2d       	mov	r31, r3
    5cae:	f0 68       	ori	r31, 0x80	; 128
    5cb0:	3f 2e       	mov	r3, r31
    5cb2:	82 01       	movw	r16, r4
    5cb4:	33 fc       	sbrc	r3, 3
    5cb6:	19 c0       	rjmp	.+50     	; 0x5cea <vfprintf+0x1e0>
    5cb8:	82 2d       	mov	r24, r2
    5cba:	90 e0       	ldi	r25, 0x00	; 0
    5cbc:	88 16       	cp	r8, r24
    5cbe:	99 06       	cpc	r9, r25
    5cc0:	a0 f4       	brcc	.+40     	; 0x5cea <vfprintf+0x1e0>
    5cc2:	b6 01       	movw	r22, r12
    5cc4:	80 e2       	ldi	r24, 0x20	; 32
    5cc6:	90 e0       	ldi	r25, 0x00	; 0
    5cc8:	33 d1       	rcall	.+614    	; 0x5f30 <fputc>
    5cca:	2a 94       	dec	r2
    5ccc:	f5 cf       	rjmp	.-22     	; 0x5cb8 <vfprintf+0x1ae>
    5cce:	f5 01       	movw	r30, r10
    5cd0:	37 fc       	sbrc	r3, 7
    5cd2:	85 91       	lpm	r24, Z+
    5cd4:	37 fe       	sbrs	r3, 7
    5cd6:	81 91       	ld	r24, Z+
    5cd8:	5f 01       	movw	r10, r30
    5cda:	b6 01       	movw	r22, r12
    5cdc:	90 e0       	ldi	r25, 0x00	; 0
    5cde:	28 d1       	rcall	.+592    	; 0x5f30 <fputc>
    5ce0:	21 10       	cpse	r2, r1
    5ce2:	2a 94       	dec	r2
    5ce4:	21 e0       	ldi	r18, 0x01	; 1
    5ce6:	82 1a       	sub	r8, r18
    5ce8:	91 08       	sbc	r9, r1
    5cea:	81 14       	cp	r8, r1
    5cec:	91 04       	cpc	r9, r1
    5cee:	79 f7       	brne	.-34     	; 0x5cce <vfprintf+0x1c4>
    5cf0:	e1 c0       	rjmp	.+450    	; 0x5eb4 <vfprintf+0x3aa>
    5cf2:	84 36       	cpi	r24, 0x64	; 100
    5cf4:	11 f0       	breq	.+4      	; 0x5cfa <vfprintf+0x1f0>
    5cf6:	89 36       	cpi	r24, 0x69	; 105
    5cf8:	39 f5       	brne	.+78     	; 0x5d48 <vfprintf+0x23e>
    5cfa:	f8 01       	movw	r30, r16
    5cfc:	37 fe       	sbrs	r3, 7
    5cfe:	07 c0       	rjmp	.+14     	; 0x5d0e <vfprintf+0x204>
    5d00:	60 81       	ld	r22, Z
    5d02:	71 81       	ldd	r23, Z+1	; 0x01
    5d04:	82 81       	ldd	r24, Z+2	; 0x02
    5d06:	93 81       	ldd	r25, Z+3	; 0x03
    5d08:	0c 5f       	subi	r16, 0xFC	; 252
    5d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    5d0c:	08 c0       	rjmp	.+16     	; 0x5d1e <vfprintf+0x214>
    5d0e:	60 81       	ld	r22, Z
    5d10:	71 81       	ldd	r23, Z+1	; 0x01
    5d12:	07 2e       	mov	r0, r23
    5d14:	00 0c       	add	r0, r0
    5d16:	88 0b       	sbc	r24, r24
    5d18:	99 0b       	sbc	r25, r25
    5d1a:	0e 5f       	subi	r16, 0xFE	; 254
    5d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    5d1e:	f3 2d       	mov	r31, r3
    5d20:	ff 76       	andi	r31, 0x6F	; 111
    5d22:	3f 2e       	mov	r3, r31
    5d24:	97 ff       	sbrs	r25, 7
    5d26:	09 c0       	rjmp	.+18     	; 0x5d3a <vfprintf+0x230>
    5d28:	90 95       	com	r25
    5d2a:	80 95       	com	r24
    5d2c:	70 95       	com	r23
    5d2e:	61 95       	neg	r22
    5d30:	7f 4f       	sbci	r23, 0xFF	; 255
    5d32:	8f 4f       	sbci	r24, 0xFF	; 255
    5d34:	9f 4f       	sbci	r25, 0xFF	; 255
    5d36:	f0 68       	ori	r31, 0x80	; 128
    5d38:	3f 2e       	mov	r3, r31
    5d3a:	2a e0       	ldi	r18, 0x0A	; 10
    5d3c:	30 e0       	ldi	r19, 0x00	; 0
    5d3e:	a3 01       	movw	r20, r6
    5d40:	33 d1       	rcall	.+614    	; 0x5fa8 <__ultoa_invert>
    5d42:	88 2e       	mov	r8, r24
    5d44:	86 18       	sub	r8, r6
    5d46:	44 c0       	rjmp	.+136    	; 0x5dd0 <vfprintf+0x2c6>
    5d48:	85 37       	cpi	r24, 0x75	; 117
    5d4a:	31 f4       	brne	.+12     	; 0x5d58 <vfprintf+0x24e>
    5d4c:	23 2d       	mov	r18, r3
    5d4e:	2f 7e       	andi	r18, 0xEF	; 239
    5d50:	b2 2e       	mov	r11, r18
    5d52:	2a e0       	ldi	r18, 0x0A	; 10
    5d54:	30 e0       	ldi	r19, 0x00	; 0
    5d56:	25 c0       	rjmp	.+74     	; 0x5da2 <vfprintf+0x298>
    5d58:	93 2d       	mov	r25, r3
    5d5a:	99 7f       	andi	r25, 0xF9	; 249
    5d5c:	b9 2e       	mov	r11, r25
    5d5e:	8f 36       	cpi	r24, 0x6F	; 111
    5d60:	c1 f0       	breq	.+48     	; 0x5d92 <vfprintf+0x288>
    5d62:	18 f4       	brcc	.+6      	; 0x5d6a <vfprintf+0x260>
    5d64:	88 35       	cpi	r24, 0x58	; 88
    5d66:	79 f0       	breq	.+30     	; 0x5d86 <vfprintf+0x27c>
    5d68:	ae c0       	rjmp	.+348    	; 0x5ec6 <vfprintf+0x3bc>
    5d6a:	80 37       	cpi	r24, 0x70	; 112
    5d6c:	19 f0       	breq	.+6      	; 0x5d74 <vfprintf+0x26a>
    5d6e:	88 37       	cpi	r24, 0x78	; 120
    5d70:	21 f0       	breq	.+8      	; 0x5d7a <vfprintf+0x270>
    5d72:	a9 c0       	rjmp	.+338    	; 0x5ec6 <vfprintf+0x3bc>
    5d74:	e9 2f       	mov	r30, r25
    5d76:	e0 61       	ori	r30, 0x10	; 16
    5d78:	be 2e       	mov	r11, r30
    5d7a:	b4 fe       	sbrs	r11, 4
    5d7c:	0d c0       	rjmp	.+26     	; 0x5d98 <vfprintf+0x28e>
    5d7e:	fb 2d       	mov	r31, r11
    5d80:	f4 60       	ori	r31, 0x04	; 4
    5d82:	bf 2e       	mov	r11, r31
    5d84:	09 c0       	rjmp	.+18     	; 0x5d98 <vfprintf+0x28e>
    5d86:	34 fe       	sbrs	r3, 4
    5d88:	0a c0       	rjmp	.+20     	; 0x5d9e <vfprintf+0x294>
    5d8a:	29 2f       	mov	r18, r25
    5d8c:	26 60       	ori	r18, 0x06	; 6
    5d8e:	b2 2e       	mov	r11, r18
    5d90:	06 c0       	rjmp	.+12     	; 0x5d9e <vfprintf+0x294>
    5d92:	28 e0       	ldi	r18, 0x08	; 8
    5d94:	30 e0       	ldi	r19, 0x00	; 0
    5d96:	05 c0       	rjmp	.+10     	; 0x5da2 <vfprintf+0x298>
    5d98:	20 e1       	ldi	r18, 0x10	; 16
    5d9a:	30 e0       	ldi	r19, 0x00	; 0
    5d9c:	02 c0       	rjmp	.+4      	; 0x5da2 <vfprintf+0x298>
    5d9e:	20 e1       	ldi	r18, 0x10	; 16
    5da0:	32 e0       	ldi	r19, 0x02	; 2
    5da2:	f8 01       	movw	r30, r16
    5da4:	b7 fe       	sbrs	r11, 7
    5da6:	07 c0       	rjmp	.+14     	; 0x5db6 <vfprintf+0x2ac>
    5da8:	60 81       	ld	r22, Z
    5daa:	71 81       	ldd	r23, Z+1	; 0x01
    5dac:	82 81       	ldd	r24, Z+2	; 0x02
    5dae:	93 81       	ldd	r25, Z+3	; 0x03
    5db0:	0c 5f       	subi	r16, 0xFC	; 252
    5db2:	1f 4f       	sbci	r17, 0xFF	; 255
    5db4:	06 c0       	rjmp	.+12     	; 0x5dc2 <vfprintf+0x2b8>
    5db6:	60 81       	ld	r22, Z
    5db8:	71 81       	ldd	r23, Z+1	; 0x01
    5dba:	80 e0       	ldi	r24, 0x00	; 0
    5dbc:	90 e0       	ldi	r25, 0x00	; 0
    5dbe:	0e 5f       	subi	r16, 0xFE	; 254
    5dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    5dc2:	a3 01       	movw	r20, r6
    5dc4:	f1 d0       	rcall	.+482    	; 0x5fa8 <__ultoa_invert>
    5dc6:	88 2e       	mov	r8, r24
    5dc8:	86 18       	sub	r8, r6
    5dca:	fb 2d       	mov	r31, r11
    5dcc:	ff 77       	andi	r31, 0x7F	; 127
    5dce:	3f 2e       	mov	r3, r31
    5dd0:	36 fe       	sbrs	r3, 6
    5dd2:	0d c0       	rjmp	.+26     	; 0x5dee <vfprintf+0x2e4>
    5dd4:	23 2d       	mov	r18, r3
    5dd6:	2e 7f       	andi	r18, 0xFE	; 254
    5dd8:	a2 2e       	mov	r10, r18
    5dda:	89 14       	cp	r8, r9
    5ddc:	58 f4       	brcc	.+22     	; 0x5df4 <vfprintf+0x2ea>
    5dde:	34 fe       	sbrs	r3, 4
    5de0:	0b c0       	rjmp	.+22     	; 0x5df8 <vfprintf+0x2ee>
    5de2:	32 fc       	sbrc	r3, 2
    5de4:	09 c0       	rjmp	.+18     	; 0x5df8 <vfprintf+0x2ee>
    5de6:	83 2d       	mov	r24, r3
    5de8:	8e 7e       	andi	r24, 0xEE	; 238
    5dea:	a8 2e       	mov	r10, r24
    5dec:	05 c0       	rjmp	.+10     	; 0x5df8 <vfprintf+0x2ee>
    5dee:	b8 2c       	mov	r11, r8
    5df0:	a3 2c       	mov	r10, r3
    5df2:	03 c0       	rjmp	.+6      	; 0x5dfa <vfprintf+0x2f0>
    5df4:	b8 2c       	mov	r11, r8
    5df6:	01 c0       	rjmp	.+2      	; 0x5dfa <vfprintf+0x2f0>
    5df8:	b9 2c       	mov	r11, r9
    5dfa:	a4 fe       	sbrs	r10, 4
    5dfc:	0f c0       	rjmp	.+30     	; 0x5e1c <vfprintf+0x312>
    5dfe:	fe 01       	movw	r30, r28
    5e00:	e8 0d       	add	r30, r8
    5e02:	f1 1d       	adc	r31, r1
    5e04:	80 81       	ld	r24, Z
    5e06:	80 33       	cpi	r24, 0x30	; 48
    5e08:	21 f4       	brne	.+8      	; 0x5e12 <vfprintf+0x308>
    5e0a:	9a 2d       	mov	r25, r10
    5e0c:	99 7e       	andi	r25, 0xE9	; 233
    5e0e:	a9 2e       	mov	r10, r25
    5e10:	09 c0       	rjmp	.+18     	; 0x5e24 <vfprintf+0x31a>
    5e12:	a2 fe       	sbrs	r10, 2
    5e14:	06 c0       	rjmp	.+12     	; 0x5e22 <vfprintf+0x318>
    5e16:	b3 94       	inc	r11
    5e18:	b3 94       	inc	r11
    5e1a:	04 c0       	rjmp	.+8      	; 0x5e24 <vfprintf+0x31a>
    5e1c:	8a 2d       	mov	r24, r10
    5e1e:	86 78       	andi	r24, 0x86	; 134
    5e20:	09 f0       	breq	.+2      	; 0x5e24 <vfprintf+0x31a>
    5e22:	b3 94       	inc	r11
    5e24:	a3 fc       	sbrc	r10, 3
    5e26:	10 c0       	rjmp	.+32     	; 0x5e48 <vfprintf+0x33e>
    5e28:	a0 fe       	sbrs	r10, 0
    5e2a:	06 c0       	rjmp	.+12     	; 0x5e38 <vfprintf+0x32e>
    5e2c:	b2 14       	cp	r11, r2
    5e2e:	80 f4       	brcc	.+32     	; 0x5e50 <vfprintf+0x346>
    5e30:	28 0c       	add	r2, r8
    5e32:	92 2c       	mov	r9, r2
    5e34:	9b 18       	sub	r9, r11
    5e36:	0d c0       	rjmp	.+26     	; 0x5e52 <vfprintf+0x348>
    5e38:	b2 14       	cp	r11, r2
    5e3a:	58 f4       	brcc	.+22     	; 0x5e52 <vfprintf+0x348>
    5e3c:	b6 01       	movw	r22, r12
    5e3e:	80 e2       	ldi	r24, 0x20	; 32
    5e40:	90 e0       	ldi	r25, 0x00	; 0
    5e42:	76 d0       	rcall	.+236    	; 0x5f30 <fputc>
    5e44:	b3 94       	inc	r11
    5e46:	f8 cf       	rjmp	.-16     	; 0x5e38 <vfprintf+0x32e>
    5e48:	b2 14       	cp	r11, r2
    5e4a:	18 f4       	brcc	.+6      	; 0x5e52 <vfprintf+0x348>
    5e4c:	2b 18       	sub	r2, r11
    5e4e:	02 c0       	rjmp	.+4      	; 0x5e54 <vfprintf+0x34a>
    5e50:	98 2c       	mov	r9, r8
    5e52:	21 2c       	mov	r2, r1
    5e54:	a4 fe       	sbrs	r10, 4
    5e56:	0f c0       	rjmp	.+30     	; 0x5e76 <vfprintf+0x36c>
    5e58:	b6 01       	movw	r22, r12
    5e5a:	80 e3       	ldi	r24, 0x30	; 48
    5e5c:	90 e0       	ldi	r25, 0x00	; 0
    5e5e:	68 d0       	rcall	.+208    	; 0x5f30 <fputc>
    5e60:	a2 fe       	sbrs	r10, 2
    5e62:	16 c0       	rjmp	.+44     	; 0x5e90 <vfprintf+0x386>
    5e64:	a1 fc       	sbrc	r10, 1
    5e66:	03 c0       	rjmp	.+6      	; 0x5e6e <vfprintf+0x364>
    5e68:	88 e7       	ldi	r24, 0x78	; 120
    5e6a:	90 e0       	ldi	r25, 0x00	; 0
    5e6c:	02 c0       	rjmp	.+4      	; 0x5e72 <vfprintf+0x368>
    5e6e:	88 e5       	ldi	r24, 0x58	; 88
    5e70:	90 e0       	ldi	r25, 0x00	; 0
    5e72:	b6 01       	movw	r22, r12
    5e74:	0c c0       	rjmp	.+24     	; 0x5e8e <vfprintf+0x384>
    5e76:	8a 2d       	mov	r24, r10
    5e78:	86 78       	andi	r24, 0x86	; 134
    5e7a:	51 f0       	breq	.+20     	; 0x5e90 <vfprintf+0x386>
    5e7c:	a1 fe       	sbrs	r10, 1
    5e7e:	02 c0       	rjmp	.+4      	; 0x5e84 <vfprintf+0x37a>
    5e80:	8b e2       	ldi	r24, 0x2B	; 43
    5e82:	01 c0       	rjmp	.+2      	; 0x5e86 <vfprintf+0x37c>
    5e84:	80 e2       	ldi	r24, 0x20	; 32
    5e86:	a7 fc       	sbrc	r10, 7
    5e88:	8d e2       	ldi	r24, 0x2D	; 45
    5e8a:	b6 01       	movw	r22, r12
    5e8c:	90 e0       	ldi	r25, 0x00	; 0
    5e8e:	50 d0       	rcall	.+160    	; 0x5f30 <fputc>
    5e90:	89 14       	cp	r8, r9
    5e92:	30 f4       	brcc	.+12     	; 0x5ea0 <vfprintf+0x396>
    5e94:	b6 01       	movw	r22, r12
    5e96:	80 e3       	ldi	r24, 0x30	; 48
    5e98:	90 e0       	ldi	r25, 0x00	; 0
    5e9a:	4a d0       	rcall	.+148    	; 0x5f30 <fputc>
    5e9c:	9a 94       	dec	r9
    5e9e:	f8 cf       	rjmp	.-16     	; 0x5e90 <vfprintf+0x386>
    5ea0:	8a 94       	dec	r8
    5ea2:	f3 01       	movw	r30, r6
    5ea4:	e8 0d       	add	r30, r8
    5ea6:	f1 1d       	adc	r31, r1
    5ea8:	80 81       	ld	r24, Z
    5eaa:	b6 01       	movw	r22, r12
    5eac:	90 e0       	ldi	r25, 0x00	; 0
    5eae:	40 d0       	rcall	.+128    	; 0x5f30 <fputc>
    5eb0:	81 10       	cpse	r8, r1
    5eb2:	f6 cf       	rjmp	.-20     	; 0x5ea0 <vfprintf+0x396>
    5eb4:	22 20       	and	r2, r2
    5eb6:	09 f4       	brne	.+2      	; 0x5eba <vfprintf+0x3b0>
    5eb8:	4e ce       	rjmp	.-868    	; 0x5b56 <vfprintf+0x4c>
    5eba:	b6 01       	movw	r22, r12
    5ebc:	80 e2       	ldi	r24, 0x20	; 32
    5ebe:	90 e0       	ldi	r25, 0x00	; 0
    5ec0:	37 d0       	rcall	.+110    	; 0x5f30 <fputc>
    5ec2:	2a 94       	dec	r2
    5ec4:	f7 cf       	rjmp	.-18     	; 0x5eb4 <vfprintf+0x3aa>
    5ec6:	f6 01       	movw	r30, r12
    5ec8:	86 81       	ldd	r24, Z+6	; 0x06
    5eca:	97 81       	ldd	r25, Z+7	; 0x07
    5ecc:	02 c0       	rjmp	.+4      	; 0x5ed2 <vfprintf+0x3c8>
    5ece:	8f ef       	ldi	r24, 0xFF	; 255
    5ed0:	9f ef       	ldi	r25, 0xFF	; 255
    5ed2:	2b 96       	adiw	r28, 0x0b	; 11
    5ed4:	0f b6       	in	r0, 0x3f	; 63
    5ed6:	f8 94       	cli
    5ed8:	de bf       	out	0x3e, r29	; 62
    5eda:	0f be       	out	0x3f, r0	; 63
    5edc:	cd bf       	out	0x3d, r28	; 61
    5ede:	df 91       	pop	r29
    5ee0:	cf 91       	pop	r28
    5ee2:	1f 91       	pop	r17
    5ee4:	0f 91       	pop	r16
    5ee6:	ff 90       	pop	r15
    5ee8:	ef 90       	pop	r14
    5eea:	df 90       	pop	r13
    5eec:	cf 90       	pop	r12
    5eee:	bf 90       	pop	r11
    5ef0:	af 90       	pop	r10
    5ef2:	9f 90       	pop	r9
    5ef4:	8f 90       	pop	r8
    5ef6:	7f 90       	pop	r7
    5ef8:	6f 90       	pop	r6
    5efa:	5f 90       	pop	r5
    5efc:	4f 90       	pop	r4
    5efe:	3f 90       	pop	r3
    5f00:	2f 90       	pop	r2
    5f02:	08 95       	ret

00005f04 <strnlen_P>:
    5f04:	fc 01       	movw	r30, r24
    5f06:	05 90       	lpm	r0, Z+
    5f08:	61 50       	subi	r22, 0x01	; 1
    5f0a:	70 40       	sbci	r23, 0x00	; 0
    5f0c:	01 10       	cpse	r0, r1
    5f0e:	d8 f7       	brcc	.-10     	; 0x5f06 <strnlen_P+0x2>
    5f10:	80 95       	com	r24
    5f12:	90 95       	com	r25
    5f14:	8e 0f       	add	r24, r30
    5f16:	9f 1f       	adc	r25, r31
    5f18:	08 95       	ret

00005f1a <strnlen>:
    5f1a:	fc 01       	movw	r30, r24
    5f1c:	61 50       	subi	r22, 0x01	; 1
    5f1e:	70 40       	sbci	r23, 0x00	; 0
    5f20:	01 90       	ld	r0, Z+
    5f22:	01 10       	cpse	r0, r1
    5f24:	d8 f7       	brcc	.-10     	; 0x5f1c <strnlen+0x2>
    5f26:	80 95       	com	r24
    5f28:	90 95       	com	r25
    5f2a:	8e 0f       	add	r24, r30
    5f2c:	9f 1f       	adc	r25, r31
    5f2e:	08 95       	ret

00005f30 <fputc>:
    5f30:	0f 93       	push	r16
    5f32:	1f 93       	push	r17
    5f34:	cf 93       	push	r28
    5f36:	df 93       	push	r29
    5f38:	fb 01       	movw	r30, r22
    5f3a:	23 81       	ldd	r18, Z+3	; 0x03
    5f3c:	21 fd       	sbrc	r18, 1
    5f3e:	03 c0       	rjmp	.+6      	; 0x5f46 <fputc+0x16>
    5f40:	8f ef       	ldi	r24, 0xFF	; 255
    5f42:	9f ef       	ldi	r25, 0xFF	; 255
    5f44:	2c c0       	rjmp	.+88     	; 0x5f9e <fputc+0x6e>
    5f46:	22 ff       	sbrs	r18, 2
    5f48:	16 c0       	rjmp	.+44     	; 0x5f76 <fputc+0x46>
    5f4a:	46 81       	ldd	r20, Z+6	; 0x06
    5f4c:	57 81       	ldd	r21, Z+7	; 0x07
    5f4e:	24 81       	ldd	r18, Z+4	; 0x04
    5f50:	35 81       	ldd	r19, Z+5	; 0x05
    5f52:	42 17       	cp	r20, r18
    5f54:	53 07       	cpc	r21, r19
    5f56:	44 f4       	brge	.+16     	; 0x5f68 <fputc+0x38>
    5f58:	a0 81       	ld	r26, Z
    5f5a:	b1 81       	ldd	r27, Z+1	; 0x01
    5f5c:	9d 01       	movw	r18, r26
    5f5e:	2f 5f       	subi	r18, 0xFF	; 255
    5f60:	3f 4f       	sbci	r19, 0xFF	; 255
    5f62:	31 83       	std	Z+1, r19	; 0x01
    5f64:	20 83       	st	Z, r18
    5f66:	8c 93       	st	X, r24
    5f68:	26 81       	ldd	r18, Z+6	; 0x06
    5f6a:	37 81       	ldd	r19, Z+7	; 0x07
    5f6c:	2f 5f       	subi	r18, 0xFF	; 255
    5f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    5f70:	37 83       	std	Z+7, r19	; 0x07
    5f72:	26 83       	std	Z+6, r18	; 0x06
    5f74:	14 c0       	rjmp	.+40     	; 0x5f9e <fputc+0x6e>
    5f76:	8b 01       	movw	r16, r22
    5f78:	ec 01       	movw	r28, r24
    5f7a:	fb 01       	movw	r30, r22
    5f7c:	00 84       	ldd	r0, Z+8	; 0x08
    5f7e:	f1 85       	ldd	r31, Z+9	; 0x09
    5f80:	e0 2d       	mov	r30, r0
    5f82:	19 95       	eicall
    5f84:	89 2b       	or	r24, r25
    5f86:	e1 f6       	brne	.-72     	; 0x5f40 <fputc+0x10>
    5f88:	d8 01       	movw	r26, r16
    5f8a:	16 96       	adiw	r26, 0x06	; 6
    5f8c:	8d 91       	ld	r24, X+
    5f8e:	9c 91       	ld	r25, X
    5f90:	17 97       	sbiw	r26, 0x07	; 7
    5f92:	01 96       	adiw	r24, 0x01	; 1
    5f94:	17 96       	adiw	r26, 0x07	; 7
    5f96:	9c 93       	st	X, r25
    5f98:	8e 93       	st	-X, r24
    5f9a:	16 97       	sbiw	r26, 0x06	; 6
    5f9c:	ce 01       	movw	r24, r28
    5f9e:	df 91       	pop	r29
    5fa0:	cf 91       	pop	r28
    5fa2:	1f 91       	pop	r17
    5fa4:	0f 91       	pop	r16
    5fa6:	08 95       	ret

00005fa8 <__ultoa_invert>:
    5fa8:	fa 01       	movw	r30, r20
    5faa:	aa 27       	eor	r26, r26
    5fac:	28 30       	cpi	r18, 0x08	; 8
    5fae:	51 f1       	breq	.+84     	; 0x6004 <__ultoa_invert+0x5c>
    5fb0:	20 31       	cpi	r18, 0x10	; 16
    5fb2:	81 f1       	breq	.+96     	; 0x6014 <__ultoa_invert+0x6c>
    5fb4:	e8 94       	clt
    5fb6:	6f 93       	push	r22
    5fb8:	6e 7f       	andi	r22, 0xFE	; 254
    5fba:	6e 5f       	subi	r22, 0xFE	; 254
    5fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    5fbe:	8f 4f       	sbci	r24, 0xFF	; 255
    5fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    5fc2:	af 4f       	sbci	r26, 0xFF	; 255
    5fc4:	b1 e0       	ldi	r27, 0x01	; 1
    5fc6:	3e d0       	rcall	.+124    	; 0x6044 <__ultoa_invert+0x9c>
    5fc8:	b4 e0       	ldi	r27, 0x04	; 4
    5fca:	3c d0       	rcall	.+120    	; 0x6044 <__ultoa_invert+0x9c>
    5fcc:	67 0f       	add	r22, r23
    5fce:	78 1f       	adc	r23, r24
    5fd0:	89 1f       	adc	r24, r25
    5fd2:	9a 1f       	adc	r25, r26
    5fd4:	a1 1d       	adc	r26, r1
    5fd6:	68 0f       	add	r22, r24
    5fd8:	79 1f       	adc	r23, r25
    5fda:	8a 1f       	adc	r24, r26
    5fdc:	91 1d       	adc	r25, r1
    5fde:	a1 1d       	adc	r26, r1
    5fe0:	6a 0f       	add	r22, r26
    5fe2:	71 1d       	adc	r23, r1
    5fe4:	81 1d       	adc	r24, r1
    5fe6:	91 1d       	adc	r25, r1
    5fe8:	a1 1d       	adc	r26, r1
    5fea:	20 d0       	rcall	.+64     	; 0x602c <__ultoa_invert+0x84>
    5fec:	09 f4       	brne	.+2      	; 0x5ff0 <__ultoa_invert+0x48>
    5fee:	68 94       	set
    5ff0:	3f 91       	pop	r19
    5ff2:	2a e0       	ldi	r18, 0x0A	; 10
    5ff4:	26 9f       	mul	r18, r22
    5ff6:	11 24       	eor	r1, r1
    5ff8:	30 19       	sub	r19, r0
    5ffa:	30 5d       	subi	r19, 0xD0	; 208
    5ffc:	31 93       	st	Z+, r19
    5ffe:	de f6       	brtc	.-74     	; 0x5fb6 <__ultoa_invert+0xe>
    6000:	cf 01       	movw	r24, r30
    6002:	08 95       	ret
    6004:	46 2f       	mov	r20, r22
    6006:	47 70       	andi	r20, 0x07	; 7
    6008:	40 5d       	subi	r20, 0xD0	; 208
    600a:	41 93       	st	Z+, r20
    600c:	b3 e0       	ldi	r27, 0x03	; 3
    600e:	0f d0       	rcall	.+30     	; 0x602e <__ultoa_invert+0x86>
    6010:	c9 f7       	brne	.-14     	; 0x6004 <__ultoa_invert+0x5c>
    6012:	f6 cf       	rjmp	.-20     	; 0x6000 <__ultoa_invert+0x58>
    6014:	46 2f       	mov	r20, r22
    6016:	4f 70       	andi	r20, 0x0F	; 15
    6018:	40 5d       	subi	r20, 0xD0	; 208
    601a:	4a 33       	cpi	r20, 0x3A	; 58
    601c:	18 f0       	brcs	.+6      	; 0x6024 <__ultoa_invert+0x7c>
    601e:	49 5d       	subi	r20, 0xD9	; 217
    6020:	31 fd       	sbrc	r19, 1
    6022:	40 52       	subi	r20, 0x20	; 32
    6024:	41 93       	st	Z+, r20
    6026:	02 d0       	rcall	.+4      	; 0x602c <__ultoa_invert+0x84>
    6028:	a9 f7       	brne	.-22     	; 0x6014 <__ultoa_invert+0x6c>
    602a:	ea cf       	rjmp	.-44     	; 0x6000 <__ultoa_invert+0x58>
    602c:	b4 e0       	ldi	r27, 0x04	; 4
    602e:	a6 95       	lsr	r26
    6030:	97 95       	ror	r25
    6032:	87 95       	ror	r24
    6034:	77 95       	ror	r23
    6036:	67 95       	ror	r22
    6038:	ba 95       	dec	r27
    603a:	c9 f7       	brne	.-14     	; 0x602e <__ultoa_invert+0x86>
    603c:	00 97       	sbiw	r24, 0x00	; 0
    603e:	61 05       	cpc	r22, r1
    6040:	71 05       	cpc	r23, r1
    6042:	08 95       	ret
    6044:	9b 01       	movw	r18, r22
    6046:	ac 01       	movw	r20, r24
    6048:	0a 2e       	mov	r0, r26
    604a:	06 94       	lsr	r0
    604c:	57 95       	ror	r21
    604e:	47 95       	ror	r20
    6050:	37 95       	ror	r19
    6052:	27 95       	ror	r18
    6054:	ba 95       	dec	r27
    6056:	c9 f7       	brne	.-14     	; 0x604a <__ultoa_invert+0xa2>
    6058:	62 0f       	add	r22, r18
    605a:	73 1f       	adc	r23, r19
    605c:	84 1f       	adc	r24, r20
    605e:	95 1f       	adc	r25, r21
    6060:	a0 1d       	adc	r26, r0
    6062:	08 95       	ret

00006064 <_exit>:
    6064:	f8 94       	cli

00006066 <__stop_program>:
    6066:	ff cf       	rjmp	.-2      	; 0x6066 <__stop_program>
