
IOT_test_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000058a  00800200  00006074  00006108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006074  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000128d  0080078a  0080078a  00006692  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006692  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000066f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ba8  00000000  00000000  00006730  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f02a  00000000  00000000  000072d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d35  00000000  00000000  00016302  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006f9e  00000000  00000000  0001a037  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000026e4  00000000  00000000  00020fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000044f2  00000000  00000000  000236bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000cd3a  00000000  00000000  00027bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bc8  00000000  00000000  000348e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c2       	rjmp	.+1170   	; 0x494 <__ctors_end>
       2:	00 00       	nop
       4:	68 c2       	rjmp	.+1232   	; 0x4d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c2       	rjmp	.+1228   	; 0x4d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c2       	rjmp	.+1224   	; 0x4d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c2       	rjmp	.+1220   	; 0x4d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c2       	rjmp	.+1216   	; 0x4d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c2       	rjmp	.+1212   	; 0x4d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c2       	rjmp	.+1208   	; 0x4d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c2       	rjmp	.+1204   	; 0x4d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c2       	rjmp	.+1200   	; 0x4d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c2       	rjmp	.+1196   	; 0x4d6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c2       	rjmp	.+1192   	; 0x4d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 46 0a 	jmp	0x148c	; 0x148c <__vector_12>
      34:	50 c2       	rjmp	.+1184   	; 0x4d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c2       	rjmp	.+1180   	; 0x4d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c2       	rjmp	.+1176   	; 0x4d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c2       	rjmp	.+1172   	; 0x4d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c2       	rjmp	.+1168   	; 0x4d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c2       	rjmp	.+1164   	; 0x4d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c2       	rjmp	.+1160   	; 0x4d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c2       	rjmp	.+1156   	; 0x4d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c2       	rjmp	.+1152   	; 0x4d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c2       	rjmp	.+1148   	; 0x4d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c2       	rjmp	.+1144   	; 0x4d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c2       	rjmp	.+1140   	; 0x4d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 5c 25 	jmp	0x4ab8	; 0x4ab8 <__vector_25>
      68:	0c 94 ae 25 	jmp	0x4b5c	; 0x4b5c <__vector_26>
      6c:	34 c2       	rjmp	.+1128   	; 0x4d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c2       	rjmp	.+1124   	; 0x4d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c2       	rjmp	.+1120   	; 0x4d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c2       	rjmp	.+1116   	; 0x4d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c2       	rjmp	.+1112   	; 0x4d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c2       	rjmp	.+1108   	; 0x4d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c2       	rjmp	.+1104   	; 0x4d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c2       	rjmp	.+1100   	; 0x4d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c2       	rjmp	.+1096   	; 0x4d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 f2 25 	jmp	0x4be4	; 0x4be4 <__vector_36>
      94:	0c 94 44 26 	jmp	0x4c88	; 0x4c88 <__vector_37>
      98:	1e c2       	rjmp	.+1084   	; 0x4d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 dc 28 	jmp	0x51b8	; 0x51b8 <__vector_39>
      a0:	1a c2       	rjmp	.+1076   	; 0x4d6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	18 c2       	rjmp	.+1072   	; 0x4d6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	16 c2       	rjmp	.+1068   	; 0x4d6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	14 c2       	rjmp	.+1064   	; 0x4d6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	12 c2       	rjmp	.+1060   	; 0x4d6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	10 c2       	rjmp	.+1056   	; 0x4d6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0e c2       	rjmp	.+1052   	; 0x4d6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c c2       	rjmp	.+1048   	; 0x4d6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	0a c2       	rjmp	.+1044   	; 0x4d6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	08 c2       	rjmp	.+1040   	; 0x4d6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	06 c2       	rjmp	.+1036   	; 0x4d6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 88 26 	jmp	0x4d10	; 0x4d10 <__vector_51>
      d0:	0c 94 da 26 	jmp	0x4db4	; 0x4db4 <__vector_52>
      d4:	00 c2       	rjmp	.+1024   	; 0x4d6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 1e 27 	jmp	0x4e3c	; 0x4e3c <__vector_54>
      dc:	0c 94 70 27 	jmp	0x4ee0	; 0x4ee0 <__vector_55>
      e0:	fa c1       	rjmp	.+1012   	; 0x4d6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c0 01       	movw	r24, r0
      e6:	c0 01       	movw	r24, r0
      e8:	c0 01       	movw	r24, r0
      ea:	fa 01       	movw	r30, r20
      ec:	02 02       	muls	r16, r18
      ee:	18 02       	muls	r17, r24
      f0:	c0 01       	movw	r24, r0
      f2:	c0 01       	movw	r24, r0
      f4:	fa 01       	movw	r30, r20
      f6:	02 02       	muls	r16, r18
      f8:	fe 28       	or	r15, r14
      fa:	6e 29       	or	r22, r14
      fc:	6e 29       	or	r22, r14
      fe:	6e 29       	or	r22, r14
     100:	6e 29       	or	r22, r14
     102:	6e 29       	or	r22, r14
     104:	6e 29       	or	r22, r14
     106:	6e 29       	or	r22, r14
     108:	fe 28       	or	r15, r14
     10a:	6e 29       	or	r22, r14
     10c:	6e 29       	or	r22, r14
     10e:	6e 29       	or	r22, r14
     110:	6e 29       	or	r22, r14
     112:	6e 29       	or	r22, r14
     114:	6e 29       	or	r22, r14
     116:	6e 29       	or	r22, r14
     118:	00 29       	or	r16, r0
     11a:	6e 29       	or	r22, r14
     11c:	6e 29       	or	r22, r14
     11e:	6e 29       	or	r22, r14
     120:	6e 29       	or	r22, r14
     122:	6e 29       	or	r22, r14
     124:	6e 29       	or	r22, r14
     126:	6e 29       	or	r22, r14
     128:	6e 29       	or	r22, r14
     12a:	6e 29       	or	r22, r14
     12c:	6e 29       	or	r22, r14
     12e:	6e 29       	or	r22, r14
     130:	6e 29       	or	r22, r14
     132:	6e 29       	or	r22, r14
     134:	6e 29       	or	r22, r14
     136:	6e 29       	or	r22, r14
     138:	00 29       	or	r16, r0
     13a:	6e 29       	or	r22, r14
     13c:	6e 29       	or	r22, r14
     13e:	6e 29       	or	r22, r14
     140:	6e 29       	or	r22, r14
     142:	6e 29       	or	r22, r14
     144:	6e 29       	or	r22, r14
     146:	6e 29       	or	r22, r14
     148:	6e 29       	or	r22, r14
     14a:	6e 29       	or	r22, r14
     14c:	6e 29       	or	r22, r14
     14e:	6e 29       	or	r22, r14
     150:	6e 29       	or	r22, r14
     152:	6e 29       	or	r22, r14
     154:	6e 29       	or	r22, r14
     156:	6e 29       	or	r22, r14
     158:	6a 29       	or	r22, r10
     15a:	6e 29       	or	r22, r14
     15c:	6e 29       	or	r22, r14
     15e:	6e 29       	or	r22, r14
     160:	6e 29       	or	r22, r14
     162:	6e 29       	or	r22, r14
     164:	6e 29       	or	r22, r14
     166:	6e 29       	or	r22, r14
     168:	35 29       	or	r19, r5
     16a:	6e 29       	or	r22, r14
     16c:	6e 29       	or	r22, r14
     16e:	6e 29       	or	r22, r14
     170:	6e 29       	or	r22, r14
     172:	6e 29       	or	r22, r14
     174:	6e 29       	or	r22, r14
     176:	6e 29       	or	r22, r14
     178:	6e 29       	or	r22, r14
     17a:	6e 29       	or	r22, r14
     17c:	6e 29       	or	r22, r14
     17e:	6e 29       	or	r22, r14
     180:	6e 29       	or	r22, r14
     182:	6e 29       	or	r22, r14
     184:	6e 29       	or	r22, r14
     186:	6e 29       	or	r22, r14
     188:	29 29       	or	r18, r9
     18a:	6e 29       	or	r22, r14
     18c:	6e 29       	or	r22, r14
     18e:	6e 29       	or	r22, r14
     190:	6e 29       	or	r22, r14
     192:	6e 29       	or	r22, r14
     194:	6e 29       	or	r22, r14
     196:	6e 29       	or	r22, r14
     198:	4d 29       	or	r20, r13

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	02 ed       	ldi	r16, 0xD2	; 210
     19c:	17 e1       	ldi	r17, 0x17	; 23
     19e:	0f 2e       	mov	r0, r31
     1a0:	f2 e0       	ldi	r31, 0x02	; 2
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 d1 17 	lds	r24, 0x17D1	; 0x8017d1 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	c5 d7       	rcall	.+3978   	; 0x1156 <uxListRemove>
     1cc:	80 91 c5 17 	lds	r24, 0x17C5	; 0x8017c5 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 c5 17 	sts	0x17C5, r24	; 0x8017c5 <uxCurrentNumberOfTasks>
     1d6:	80 91 d1 17 	lds	r24, 0x17D1	; 0x8017d1 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 d1 17 	sts	0x17D1, r24	; 0x8017d1 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e8:	12 d7       	rcall	.+3620   	; 0x100e <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	10 d7       	rcall	.+3616   	; 0x100e <vPortFree>
     1ee:	80 91 d1 17 	lds	r24, 0x17D1	; 0x8017d1 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	10 f0       	brcs	.+4      	; 0x202 <prvIdleTask+0x68>
     1fe:	0e 94 80 09 	call	0x1300	; 0x1300 <vPortYield>
     202:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <vApplicationIdleHook>
     206:	d1 cf       	rjmp	.-94     	; 0x1aa <prvIdleTask+0x10>

00000208 <prvTimerTask>:
     208:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20a:	df 93       	push	r29
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	60 97       	sbiw	r28, 0x10	; 16
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	de bf       	out	0x3e, r29	; 62
     218:	0f be       	out	0x3f, r0	; 63
     21a:	cd bf       	out	0x3d, r28	; 61
     21c:	ce 01       	movw	r24, r28
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	9a 87       	std	Y+10, r25	; 0x0a
     222:	89 87       	std	Y+9, r24	; 0x09
     224:	81 2c       	mov	r8, r1
     226:	91 2c       	mov	r9, r1
     228:	a1 2c       	mov	r10, r1
     22a:	b1 2c       	mov	r11, r1
     22c:	69 84       	ldd	r6, Y+9	; 0x09
     22e:	7a 84       	ldd	r7, Y+10	; 0x0a
     230:	e0 91 3a 18 	lds	r30, 0x183A	; 0x80183a <pxCurrentTimerList>
     234:	f0 91 3b 18 	lds	r31, 0x183B	; 0x80183b <pxCurrentTimerList+0x1>
     238:	80 81       	ld	r24, Z
     23a:	88 23       	and	r24, r24
     23c:	09 f4       	brne	.+2      	; 0x240 <prvTimerTask+0x38>
     23e:	10 c1       	rjmp	.+544    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     240:	07 80       	ldd	r0, Z+7	; 0x07
     242:	f0 85       	ldd	r31, Z+8	; 0x08
     244:	e0 2d       	mov	r30, r0
     246:	20 80       	ld	r2, Z
     248:	31 80       	ldd	r3, Z+1	; 0x01
     24a:	42 80       	ldd	r4, Z+2	; 0x02
     24c:	53 80       	ldd	r5, Z+3	; 0x03
     24e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <vTaskSuspendAll>
     252:	ce 01       	movw	r24, r28
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <prvSampleTimeNow>
     25a:	6b 87       	std	Y+11, r22	; 0x0b
     25c:	7c 87       	std	Y+12, r23	; 0x0c
     25e:	8d 87       	std	Y+13, r24	; 0x0d
     260:	9e 87       	std	Y+14, r25	; 0x0e
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	81 11       	cpse	r24, r1
     266:	65 c0       	rjmp	.+202    	; 0x332 <prvTimerTask+0x12a>
     268:	8b 85       	ldd	r24, Y+11	; 0x0b
     26a:	9c 85       	ldd	r25, Y+12	; 0x0c
     26c:	ad 85       	ldd	r26, Y+13	; 0x0d
     26e:	be 85       	ldd	r27, Y+14	; 0x0e
     270:	82 15       	cp	r24, r2
     272:	93 05       	cpc	r25, r3
     274:	a4 05       	cpc	r26, r4
     276:	b5 05       	cpc	r27, r5
     278:	08 f4       	brcc	.+2      	; 0x27c <prvTimerTask+0x74>
     27a:	44 c0       	rjmp	.+136    	; 0x304 <prvTimerTask+0xfc>
     27c:	0e 94 c9 13 	call	0x2792	; 0x2792 <xTaskResumeAll>
     280:	e0 91 3a 18 	lds	r30, 0x183A	; 0x80183a <pxCurrentTimerList>
     284:	f0 91 3b 18 	lds	r31, 0x183B	; 0x80183b <pxCurrentTimerList+0x1>
     288:	07 80       	ldd	r0, Z+7	; 0x07
     28a:	f0 85       	ldd	r31, Z+8	; 0x08
     28c:	e0 2d       	mov	r30, r0
     28e:	a0 85       	ldd	r26, Z+8	; 0x08
     290:	b1 85       	ldd	r27, Z+9	; 0x09
     292:	b8 8b       	std	Y+16, r27	; 0x10
     294:	af 87       	std	Y+15, r26	; 0x0f
     296:	cd 01       	movw	r24, r26
     298:	02 96       	adiw	r24, 0x02	; 2
     29a:	5d d7       	rcall	.+3770   	; 0x1156 <uxListRemove>
     29c:	ef 85       	ldd	r30, Y+15	; 0x0f
     29e:	f8 89       	ldd	r31, Y+16	; 0x10
     2a0:	87 89       	ldd	r24, Z+23	; 0x17
     2a2:	82 ff       	sbrs	r24, 2
     2a4:	21 c0       	rjmp	.+66     	; 0x2e8 <prvTimerTask+0xe0>
     2a6:	46 85       	ldd	r20, Z+14	; 0x0e
     2a8:	57 85       	ldd	r21, Z+15	; 0x0f
     2aa:	60 89       	ldd	r22, Z+16	; 0x10
     2ac:	71 89       	ldd	r23, Z+17	; 0x11
     2ae:	42 0d       	add	r20, r2
     2b0:	53 1d       	adc	r21, r3
     2b2:	64 1d       	adc	r22, r4
     2b4:	75 1d       	adc	r23, r5
     2b6:	72 01       	movw	r14, r4
     2b8:	61 01       	movw	r12, r2
     2ba:	0b 85       	ldd	r16, Y+11	; 0x0b
     2bc:	1c 85       	ldd	r17, Y+12	; 0x0c
     2be:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c0:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c2:	cf 01       	movw	r24, r30
     2c4:	0e 94 72 19 	call	0x32e4	; 0x32e4 <prvInsertTimerInActiveList>
     2c8:	88 23       	and	r24, r24
     2ca:	99 f0       	breq	.+38     	; 0x2f2 <prvTimerTask+0xea>
     2cc:	c8 2c       	mov	r12, r8
     2ce:	d9 2c       	mov	r13, r9
     2d0:	ea 2c       	mov	r14, r10
     2d2:	fb 2c       	mov	r15, r11
     2d4:	00 e0       	ldi	r16, 0x00	; 0
     2d6:	10 e0       	ldi	r17, 0x00	; 0
     2d8:	a2 01       	movw	r20, r4
     2da:	91 01       	movw	r18, r2
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e0:	98 89       	ldd	r25, Y+16	; 0x10
     2e2:	0e 94 05 1a 	call	0x340a	; 0x340a <xTimerGenericCommand>
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <prvTimerTask+0xea>
     2e8:	8e 7f       	andi	r24, 0xFE	; 254
     2ea:	af 85       	ldd	r26, Y+15	; 0x0f
     2ec:	b8 89       	ldd	r27, Y+16	; 0x10
     2ee:	57 96       	adiw	r26, 0x17	; 23
     2f0:	8c 93       	st	X, r24
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	54 96       	adiw	r26, 0x14	; 20
     2f8:	ed 91       	ld	r30, X+
     2fa:	fc 91       	ld	r31, X
     2fc:	55 97       	sbiw	r26, 0x15	; 21
     2fe:	cd 01       	movw	r24, r26
     300:	19 95       	eicall
     302:	9f c0       	rjmp	.+318    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	b2 01       	movw	r22, r4
     308:	a1 01       	movw	r20, r2
     30a:	8b 85       	ldd	r24, Y+11	; 0x0b
     30c:	9c 85       	ldd	r25, Y+12	; 0x0c
     30e:	ad 85       	ldd	r26, Y+13	; 0x0d
     310:	be 85       	ldd	r27, Y+14	; 0x0e
     312:	48 1b       	sub	r20, r24
     314:	59 0b       	sbc	r21, r25
     316:	6a 0b       	sbc	r22, r26
     318:	7b 0b       	sbc	r23, r27
     31a:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <xTimerQueue>
     31e:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <xTimerQueue+0x1>
     322:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <vQueueWaitForMessageRestricted>
     326:	0e 94 c9 13 	call	0x2792	; 0x2792 <xTaskResumeAll>
     32a:	81 11       	cpse	r24, r1
     32c:	8a c0       	rjmp	.+276    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     32e:	e8 d7       	rcall	.+4048   	; 0x1300 <vPortYield>
     330:	88 c0       	rjmp	.+272    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     332:	0e 94 c9 13 	call	0x2792	; 0x2792 <xTaskResumeAll>
     336:	85 c0       	rjmp	.+266    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	88 23       	and	r24, r24
     33c:	0c f4       	brge	.+2      	; 0x340 <prvTimerTask+0x138>
     33e:	81 c0       	rjmp	.+258    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     340:	4e 80       	ldd	r4, Y+6	; 0x06
     342:	5f 80       	ldd	r5, Y+7	; 0x07
     344:	d2 01       	movw	r26, r4
     346:	1c 96       	adiw	r26, 0x0c	; 12
     348:	8d 91       	ld	r24, X+
     34a:	9c 91       	ld	r25, X
     34c:	1d 97       	sbiw	r26, 0x0d	; 13
     34e:	89 2b       	or	r24, r25
     350:	19 f0       	breq	.+6      	; 0x358 <prvTimerTask+0x150>
     352:	c2 01       	movw	r24, r4
     354:	02 96       	adiw	r24, 0x02	; 2
     356:	ff d6       	rcall	.+3582   	; 0x1156 <uxListRemove>
     358:	ce 01       	movw	r24, r28
     35a:	08 96       	adiw	r24, 0x08	; 8
     35c:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <prvSampleTimeNow>
     360:	8b 01       	movw	r16, r22
     362:	9c 01       	movw	r18, r24
     364:	e9 81       	ldd	r30, Y+1	; 0x01
     366:	0e 2e       	mov	r0, r30
     368:	00 0c       	add	r0, r0
     36a:	ff 0b       	sbc	r31, r31
     36c:	ea 30       	cpi	r30, 0x0A	; 10
     36e:	f1 05       	cpc	r31, r1
     370:	08 f0       	brcs	.+2      	; 0x374 <prvTimerTask+0x16c>
     372:	67 c0       	rjmp	.+206    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     374:	88 27       	eor	r24, r24
     376:	ee 58       	subi	r30, 0x8E	; 142
     378:	ff 4f       	sbci	r31, 0xFF	; 255
     37a:	8f 4f       	sbci	r24, 0xFF	; 255
     37c:	0c 94 74 2b 	jmp	0x56e8	; 0x56e8 <__tablejump2__>
     380:	f2 01       	movw	r30, r4
     382:	87 89       	ldd	r24, Z+23	; 0x17
     384:	81 60       	ori	r24, 0x01	; 1
     386:	87 8b       	std	Z+23, r24	; 0x17
     388:	ca 80       	ldd	r12, Y+2	; 0x02
     38a:	db 80       	ldd	r13, Y+3	; 0x03
     38c:	ec 80       	ldd	r14, Y+4	; 0x04
     38e:	fd 80       	ldd	r15, Y+5	; 0x05
     390:	46 85       	ldd	r20, Z+14	; 0x0e
     392:	57 85       	ldd	r21, Z+15	; 0x0f
     394:	60 89       	ldd	r22, Z+16	; 0x10
     396:	71 89       	ldd	r23, Z+17	; 0x11
     398:	4c 0d       	add	r20, r12
     39a:	5d 1d       	adc	r21, r13
     39c:	6e 1d       	adc	r22, r14
     39e:	7f 1d       	adc	r23, r15
     3a0:	c2 01       	movw	r24, r4
     3a2:	0e 94 72 19 	call	0x32e4	; 0x32e4 <prvInsertTimerInActiveList>
     3a6:	88 23       	and	r24, r24
     3a8:	09 f4       	brne	.+2      	; 0x3ac <prvTimerTask+0x1a4>
     3aa:	4b c0       	rjmp	.+150    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3ac:	d2 01       	movw	r26, r4
     3ae:	54 96       	adiw	r26, 0x14	; 20
     3b0:	ed 91       	ld	r30, X+
     3b2:	fc 91       	ld	r31, X
     3b4:	55 97       	sbiw	r26, 0x15	; 21
     3b6:	c2 01       	movw	r24, r4
     3b8:	19 95       	eicall
     3ba:	f2 01       	movw	r30, r4
     3bc:	87 89       	ldd	r24, Z+23	; 0x17
     3be:	82 ff       	sbrs	r24, 2
     3c0:	40 c0       	rjmp	.+128    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3c2:	4a 81       	ldd	r20, Y+2	; 0x02
     3c4:	5b 81       	ldd	r21, Y+3	; 0x03
     3c6:	6c 81       	ldd	r22, Y+4	; 0x04
     3c8:	7d 81       	ldd	r23, Y+5	; 0x05
     3ca:	86 85       	ldd	r24, Z+14	; 0x0e
     3cc:	97 85       	ldd	r25, Z+15	; 0x0f
     3ce:	a0 89       	ldd	r26, Z+16	; 0x10
     3d0:	b1 89       	ldd	r27, Z+17	; 0x11
     3d2:	9a 01       	movw	r18, r20
     3d4:	ab 01       	movw	r20, r22
     3d6:	28 0f       	add	r18, r24
     3d8:	39 1f       	adc	r19, r25
     3da:	4a 1f       	adc	r20, r26
     3dc:	5b 1f       	adc	r21, r27
     3de:	c8 2c       	mov	r12, r8
     3e0:	d9 2c       	mov	r13, r9
     3e2:	ea 2c       	mov	r14, r10
     3e4:	fb 2c       	mov	r15, r11
     3e6:	00 e0       	ldi	r16, 0x00	; 0
     3e8:	10 e0       	ldi	r17, 0x00	; 0
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	c2 01       	movw	r24, r4
     3ee:	0e 94 05 1a 	call	0x340a	; 0x340a <xTimerGenericCommand>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3f4:	d2 01       	movw	r26, r4
     3f6:	57 96       	adiw	r26, 0x17	; 23
     3f8:	8c 91       	ld	r24, X
     3fa:	57 97       	sbiw	r26, 0x17	; 23
     3fc:	8e 7f       	andi	r24, 0xFE	; 254
     3fe:	57 96       	adiw	r26, 0x17	; 23
     400:	8c 93       	st	X, r24
     402:	1f c0       	rjmp	.+62     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     404:	f2 01       	movw	r30, r4
     406:	87 89       	ldd	r24, Z+23	; 0x17
     408:	81 60       	ori	r24, 0x01	; 1
     40a:	87 8b       	std	Z+23, r24	; 0x17
     40c:	4a 81       	ldd	r20, Y+2	; 0x02
     40e:	5b 81       	ldd	r21, Y+3	; 0x03
     410:	6c 81       	ldd	r22, Y+4	; 0x04
     412:	7d 81       	ldd	r23, Y+5	; 0x05
     414:	46 87       	std	Z+14, r20	; 0x0e
     416:	57 87       	std	Z+15, r21	; 0x0f
     418:	60 8b       	std	Z+16, r22	; 0x10
     41a:	71 8b       	std	Z+17, r23	; 0x11
     41c:	40 0f       	add	r20, r16
     41e:	51 1f       	adc	r21, r17
     420:	62 1f       	adc	r22, r18
     422:	73 1f       	adc	r23, r19
     424:	68 01       	movw	r12, r16
     426:	79 01       	movw	r14, r18
     428:	c2 01       	movw	r24, r4
     42a:	0e 94 72 19 	call	0x32e4	; 0x32e4 <prvInsertTimerInActiveList>
     42e:	09 c0       	rjmp	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     430:	f2 01       	movw	r30, r4
     432:	87 89       	ldd	r24, Z+23	; 0x17
     434:	81 fd       	sbrc	r24, 1
     436:	03 c0       	rjmp	.+6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     438:	c2 01       	movw	r24, r4
     43a:	e9 d5       	rcall	.+3026   	; 0x100e <vPortFree>
     43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     43e:	8e 7f       	andi	r24, 0xFE	; 254
     440:	87 8b       	std	Z+23, r24	; 0x17
     442:	28 2d       	mov	r18, r8
     444:	39 2d       	mov	r19, r9
     446:	4a 2d       	mov	r20, r10
     448:	5b 2d       	mov	r21, r11
     44a:	66 2d       	mov	r22, r6
     44c:	77 2d       	mov	r23, r7
     44e:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <xTimerQueue>
     452:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <xTimerQueue+0x1>
     456:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <xQueueReceive>
     45a:	81 11       	cpse	r24, r1
     45c:	6d cf       	rjmp	.-294    	; 0x338 <prvTimerTask+0x130>
     45e:	e8 ce       	rjmp	.-560    	; 0x230 <prvTimerTask+0x28>
     460:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <vTaskSuspendAll>
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <prvSampleTimeNow>
     46c:	6b 87       	std	Y+11, r22	; 0x0b
     46e:	7c 87       	std	Y+12, r23	; 0x0c
     470:	8d 87       	std	Y+13, r24	; 0x0d
     472:	9e 87       	std	Y+14, r25	; 0x0e
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	81 11       	cpse	r24, r1
     478:	5c cf       	rjmp	.-328    	; 0x332 <prvTimerTask+0x12a>
     47a:	e0 91 38 18 	lds	r30, 0x1838	; 0x801838 <pxOverflowTimerList>
     47e:	f0 91 39 18 	lds	r31, 0x1839	; 0x801839 <pxOverflowTimerList+0x1>
     482:	80 81       	ld	r24, Z
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	81 11       	cpse	r24, r1
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	28 2c       	mov	r2, r8
     48c:	39 2c       	mov	r3, r9
     48e:	4a 2c       	mov	r4, r10
     490:	5b 2c       	mov	r5, r11
     492:	39 cf       	rjmp	.-398    	; 0x306 <prvTimerTask+0xfe>

00000494 <__ctors_end>:
     494:	11 24       	eor	r1, r1
     496:	1f be       	out	0x3f, r1	; 63
     498:	cf ef       	ldi	r28, 0xFF	; 255
     49a:	d1 e2       	ldi	r29, 0x21	; 33
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	00 e0       	ldi	r16, 0x00	; 0
     4a2:	0c bf       	out	0x3c, r16	; 60

000004a4 <__do_copy_data>:
     4a4:	17 e0       	ldi	r17, 0x07	; 7
     4a6:	a0 e0       	ldi	r26, 0x00	; 0
     4a8:	b2 e0       	ldi	r27, 0x02	; 2
     4aa:	e4 e7       	ldi	r30, 0x74	; 116
     4ac:	f0 e6       	ldi	r31, 0x60	; 96
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0b bf       	out	0x3b, r16	; 59
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__do_copy_data+0x14>
     4b4:	07 90       	elpm	r0, Z+
     4b6:	0d 92       	st	X+, r0
     4b8:	aa 38       	cpi	r26, 0x8A	; 138
     4ba:	b1 07       	cpc	r27, r17
     4bc:	d9 f7       	brne	.-10     	; 0x4b4 <__do_copy_data+0x10>

000004be <__do_clear_bss>:
     4be:	2a e1       	ldi	r18, 0x1A	; 26
     4c0:	aa e8       	ldi	r26, 0x8A	; 138
     4c2:	b7 e0       	ldi	r27, 0x07	; 7
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <.do_clear_bss_start>

000004c6 <.do_clear_bss_loop>:
     4c6:	1d 92       	st	X+, r1

000004c8 <.do_clear_bss_start>:
     4c8:	a7 31       	cpi	r26, 0x17	; 23
     4ca:	b2 07       	cpc	r27, r18
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <.do_clear_bss_loop>
     4ce:	0e 94 1b 1c 	call	0x3836	; 0x3836 <main>
     4d2:	0c 94 38 30 	jmp	0x6070	; 0x6070 <_exit>

000004d6 <__bad_interrupt>:
     4d6:	94 cd       	rjmp	.-1240   	; 0x0 <__vectors>

000004d8 <CO2_handler_task>:
{

	for (;;) 
	{
		
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, CO2_measure_bit, pdTRUE, pdTRUE, 500);
     4d8:	0f 2e       	mov	r0, r31
     4da:	f4 ef       	ldi	r31, 0xF4	; 244
     4dc:	cf 2e       	mov	r12, r31
     4de:	dd 24       	eor	r13, r13
     4e0:	d3 94       	inc	r13
     4e2:	e1 2c       	mov	r14, r1
     4e4:	f1 2c       	mov	r15, r1
     4e6:	f0 2d       	mov	r31, r0
     4e8:	01 e0       	ldi	r16, 0x01	; 1
     4ea:	21 e0       	ldi	r18, 0x01	; 1
     4ec:	41 e0       	ldi	r20, 0x01	; 1
     4ee:	50 e0       	ldi	r21, 0x00	; 0
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	80 91 b4 19 	lds	r24, 0x19B4	; 0x8019b4 <Measure_event_group>
     4f8:	90 91 b5 19 	lds	r25, 0x19B5	; 0x8019b5 <Measure_event_group+0x1>
     4fc:	29 d3       	rcall	.+1618   	; 0xb50 <xEventGroupWaitBits>
		if((measureBits & (CO2_measure_bit)) == (CO2_measure_bit))
     4fe:	60 ff       	sbrs	r22, 0
     500:	eb cf       	rjmp	.-42     	; 0x4d8 <CO2_handler_task>
		{
				return_code = mh_z19_take_meassuring();
     502:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <mh_z19_take_meassuring>
     506:	80 93 b6 19 	sts	0x19B6, r24	; 0x8019b6 <return_code>
				while(return_code != MHZ19_OK){
     50a:	88 23       	and	r24, r24
     50c:	61 f0       	breq	.+24     	; 0x526 <CO2_handler_task+0x4e>
					vTaskDelay(50);
     50e:	62 e3       	ldi	r22, 0x32	; 50
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 a3 14 	call	0x2946	; 0x2946 <vTaskDelay>
					return_code = mh_z19_take_meassuring();
     51a:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <mh_z19_take_meassuring>
     51e:	80 93 b6 19 	sts	0x19B6, r24	; 0x8019b6 <return_code>
		
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, CO2_measure_bit, pdTRUE, pdTRUE, 500);
		if((measureBits & (CO2_measure_bit)) == (CO2_measure_bit))
		{
				return_code = mh_z19_take_meassuring();
				while(return_code != MHZ19_OK){
     522:	81 11       	cpse	r24, r1
     524:	f4 cf       	rjmp	.-24     	; 0x50e <CO2_handler_task+0x36>
					vTaskDelay(50);
					return_code = mh_z19_take_meassuring();
				}
				vTaskDelay(100); // giving it some time to set the values
     526:	64 e6       	ldi	r22, 0x64	; 100
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 a3 14 	call	0x2946	; 0x2946 <vTaskDelay>
				xEventGroupSetBits(Data_event_group, CO2_data_bit);
     532:	44 e0       	ldi	r20, 0x04	; 4
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	80 91 b0 19 	lds	r24, 0x19B0	; 0x8019b0 <Data_event_group>
     53e:	90 91 b1 19 	lds	r25, 0x19B1	; 0x8019b1 <Data_event_group+0x1>
     542:	c6 d3       	rcall	.+1932   	; 0xcd0 <xEventGroupSetBits>
     544:	c9 cf       	rjmp	.-110    	; 0x4d8 <CO2_handler_task>

00000546 <CO2Sensor_create>:
mh_z19_return_code_t return_code;
	
void CO2_handler_task( void *pvParameters );

void CO2Sensor_create()
{
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
	mh_z19_create(ser_USART3, setCO2);
     54c:	63 e8       	ldi	r22, 0x83	; 131
     54e:	74 e0       	ldi	r23, 0x04	; 4
     550:	83 e0       	ldi	r24, 0x03	; 3
     552:	0e 94 a3 23 	call	0x4746	; 0x4746 <mh_z19_create>
	xTaskCreate(
     556:	e1 2c       	mov	r14, r1
     558:	f1 2c       	mov	r15, r1
     55a:	02 e0       	ldi	r16, 0x02	; 2
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	48 e8       	ldi	r20, 0x88	; 136
     562:	51 e0       	ldi	r21, 0x01	; 1
     564:	6f e6       	ldi	r22, 0x6F	; 111
     566:	72 e0       	ldi	r23, 0x02	; 2
     568:	8c e6       	ldi	r24, 0x6C	; 108
     56a:	92 e0       	ldi	r25, 0x02	; 2
     56c:	0e 94 85 11 	call	0x230a	; 0x230a <xTaskCreate>
		configMINIMAL_STACK_SIZE+200,
		NULL,
		2,
		NULL 
	);
}
     570:	0f 91       	pop	r16
     572:	ff 90       	pop	r15
     574:	ef 90       	pop	r14
     576:	08 95       	ret

00000578 <lora_send_task_create>:

extern QueueHandle_t Message_queue;
static lora_payload_t _uplink_payload;

void lora_send_task_create(UBaseType_t lora_handler_task_priority)
{	
     578:	ef 92       	push	r14
     57a:	ff 92       	push	r15
     57c:	0f 93       	push	r16
	xTaskCreate(
     57e:	e1 2c       	mov	r14, r1
     580:	f1 2c       	mov	r15, r1
     582:	08 2f       	mov	r16, r24
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	48 e8       	ldi	r20, 0x88	; 136
     58a:	51 e0       	ldi	r21, 0x01	; 1
     58c:	6b e7       	ldi	r22, 0x7B	; 123
     58e:	72 e0       	ldi	r23, 0x02	; 2
     590:	8a e9       	ldi	r24, 0x9A	; 154
     592:	93 e0       	ldi	r25, 0x03	; 3
     594:	0e 94 85 11 	call	0x230a	; 0x230a <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

}
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	08 95       	ret

000005a0 <lora_setup>:


bool lora_setup(){
     5a0:	ef 92       	push	r14
     5a2:	ff 92       	push	r15
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
	e_LoRa_return_code_t return_code;
	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     5aa:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <lora_driver_rn2483_factory_reset>
     5ae:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <lora_driver_map_return_code_to_text>
     5b2:	9f 93       	push	r25
     5b4:	8f 93       	push	r24
     5b6:	82 e8       	ldi	r24, 0x82	; 130
     5b8:	92 e0       	ldi	r25, 0x02	; 2
     5ba:	9f 93       	push	r25
     5bc:	8f 93       	push	r24
     5be:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <printf>
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     5c2:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <lora_driver_configure_to_eu868>
     5c6:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <lora_driver_map_return_code_to_text>
     5ca:	9f 93       	push	r25
     5cc:	8f 93       	push	r24
     5ce:	85 e9       	ldi	r24, 0x95	; 149
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <printf>
	// Get the transceivers HW EUI
	return_code = lora_driver_get_rn2483_hweui(_out_buf);
     5da:	81 ea       	ldi	r24, 0xA1	; 161
     5dc:	97 e0       	ldi	r25, 0x07	; 7
     5de:	0e 94 0f 20 	call	0x401e	; 0x401e <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(return_code), _out_buf);
     5e2:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <lora_driver_map_return_code_to_text>
     5e6:	c1 ea       	ldi	r28, 0xA1	; 161
     5e8:	d7 e0       	ldi	r29, 0x07	; 7
     5ea:	df 93       	push	r29
     5ec:	cf 93       	push	r28
     5ee:	9f 93       	push	r25
     5f0:	8f 93       	push	r24
     5f2:	8e ea       	ldi	r24, 0xAE	; 174
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	9f 93       	push	r25
     5f8:	8f 93       	push	r24
     5fa:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <printf>
	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     5fe:	ce 01       	movw	r24, r28
     600:	0e 94 2b 20 	call	0x4056	; 0x4056 <lora_driver_set_device_identifier>
     604:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <lora_driver_map_return_code_to_text>
     608:	9f 93       	push	r25
     60a:	8f 93       	push	r24
     60c:	df 93       	push	r29
     60e:	cf 93       	push	r28
     610:	82 ec       	ldi	r24, 0xC2	; 194
     612:	92 e0       	ldi	r25, 0x02	; 2
     614:	9f 93       	push	r25
     616:	8f 93       	push	r24
     618:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <printf>
	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     61c:	ae 01       	movw	r20, r28
     61e:	67 ed       	ldi	r22, 0xD7	; 215
     620:	72 e0       	ldi	r23, 0x02	; 2
     622:	88 ef       	ldi	r24, 0xF8	; 248
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	0e 94 59 22 	call	0x44b2	; 0x44b2 <lora_driver_set_otaa_identity>
     62a:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <lora_driver_map_return_code_to_text>
     62e:	9f 93       	push	r25
     630:	8f 93       	push	r24
     632:	df 93       	push	r29
     634:	cf 93       	push	r28
     636:	87 ed       	ldi	r24, 0xD7	; 215
     638:	92 e0       	ldi	r25, 0x02	; 2
     63a:	9f 93       	push	r25
     63c:	8f 93       	push	r24
     63e:	88 ef       	ldi	r24, 0xF8	; 248
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	9f 93       	push	r25
     644:	8f 93       	push	r24
     646:	89 e0       	ldi	r24, 0x09	; 9
     648:	93 e0       	ldi	r25, 0x03	; 3
     64a:	9f 93       	push	r25
     64c:	8f 93       	push	r24
     64e:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <printf>
	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     652:	0e 94 5e 20 	call	0x40bc	; 0x40bc <lora_driver_save_mac>
     656:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <lora_driver_map_return_code_to_text>
     65a:	9f 93       	push	r25
     65c:	8f 93       	push	r24
     65e:	8f e3       	ldi	r24, 0x3F	; 63
     660:	93 e0       	ldi	r25, 0x03	; 3
     662:	9f 93       	push	r25
     664:	8f 93       	push	r24
     666:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <printf>
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     66a:	8d b7       	in	r24, 0x3d	; 61
     66c:	9e b7       	in	r25, 0x3e	; 62
     66e:	82 96       	adiw	r24, 0x22	; 34
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	9e bf       	out	0x3e, r25	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	8d bf       	out	0x3d, r24	; 61
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	0e 94 58 21 	call	0x42b0	; 0x42b0 <lora_driver_set_adaptive_data_rate>
     680:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <lora_driver_map_return_code_to_text>
     684:	9f 93       	push	r25
     686:	8f 93       	push	r24
     688:	8e e4       	ldi	r24, 0x4E	; 78
     68a:	93 e0       	ldi	r25, 0x03	; 3
     68c:	9f 93       	push	r25
     68e:	8f 93       	push	r24
     690:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <printf>
	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     694:	84 ef       	ldi	r24, 0xF4	; 244
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	0e 94 63 21 	call	0x42c6	; 0x42c6 <lora_driver_set_receive_delay>
     69c:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <lora_driver_map_return_code_to_text>
     6a0:	9f 93       	push	r25
     6a2:	8f 93       	push	r24
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	8f 93       	push	r24
     6a8:	84 ef       	ldi	r24, 0xF4	; 244
     6aa:	8f 93       	push	r24
     6ac:	8f e6       	ldi	r24, 0x6F	; 111
     6ae:	93 e0       	ldi	r25, 0x03	; 3
     6b0:	9f 93       	push	r25
     6b2:	8f 93       	push	r24
     6b4:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <printf>
     6b8:	8d b7       	in	r24, 0x3d	; 61
     6ba:	9e b7       	in	r25, 0x3e	; 62
     6bc:	0a 96       	adiw	r24, 0x0a	; 10
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	9e bf       	out	0x3e, r25	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	8d bf       	out	0x3d, r24	; 61
     6c8:	c3 e0       	ldi	r28, 0x03	; 3
     6ca:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 3; // This is 3 because after 3rd connection attempt Loriot responds "no free channel"
	
		do {
			return_code = lora_driver_join(LoRa_OTAA);
			printf("Join Network TriesLeft: %d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(return_code));
     6cc:	0f 2e       	mov	r0, r31
     6ce:	ff e8       	ldi	r31, 0x8F	; 143
     6d0:	ef 2e       	mov	r14, r31
     6d2:	f3 e0       	ldi	r31, 0x03	; 3
     6d4:	ff 2e       	mov	r15, r31
     6d6:	f0 2d       	mov	r31, r0
	//xMessageBuffer = xMessageBufferCreate( 10 );
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 3; // This is 3 because after 3rd connection attempt Loriot responds "no free channel"
	
		do {
			return_code = lora_driver_join(LoRa_OTAA);
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	0e 94 64 20 	call	0x40c8	; 0x40c8 <lora_driver_join>
     6de:	18 2f       	mov	r17, r24
			printf("Join Network TriesLeft: %d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(return_code));
     6e0:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <lora_driver_map_return_code_to_text>
     6e4:	9f 93       	push	r25
     6e6:	8f 93       	push	r24
     6e8:	df 93       	push	r29
     6ea:	cf 93       	push	r28
     6ec:	ff 92       	push	r15
     6ee:	ef 92       	push	r14
     6f0:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <printf>

			if(return_code == LoRa_NO_FREE_CH){
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	13 30       	cpi	r17, 0x03	; 3
     702:	79 f0       	breq	.+30     	; 0x722 <lora_setup+0x182>
				return 0;
			}

			else if ( return_code != LoRa_ACCEPTED && return_code != LoRa_NO_FREE_CH)
     704:	18 30       	cpi	r17, 0x08	; 8
     706:	79 f0       	breq	.+30     	; 0x726 <lora_setup+0x186>
			{
				// Make the red led pulse to tell something went wrong
				led_long_puls(led_ST1); // OPTIONAL
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	0e 94 75 1e 	call	0x3cea	; 0x3cea <led_long_puls>
				// Wait 5 sec and lets try again
				vTaskDelay(pdMS_TO_TICKS(5000UL));
     70e:	66 e3       	ldi	r22, 0x36	; 54
     710:	71 e0       	ldi	r23, 0x01	; 1
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 a3 14 	call	0x2946	; 0x2946 <vTaskDelay>
     71a:	21 97       	sbiw	r28, 0x01	; 1
			else if(return_code == LoRa_ACCEPTED)
			{
				return 1;
			}
			
		} while (--maxJoinTriesLeft);
     71c:	e9 f6       	brne	.-70     	; 0x6d8 <lora_setup+0x138>
		
			return 0;
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	03 c0       	rjmp	.+6      	; 0x728 <lora_setup+0x188>
		do {
			return_code = lora_driver_join(LoRa_OTAA);
			printf("Join Network TriesLeft: %d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(return_code));

			if(return_code == LoRa_NO_FREE_CH){
				return 0;
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	01 c0       	rjmp	.+2      	; 0x728 <lora_setup+0x188>
				vTaskDelay(pdMS_TO_TICKS(5000UL));
			}
			
			else if(return_code == LoRa_ACCEPTED)
			{
				return 1;
     726:	81 e0       	ldi	r24, 0x01	; 1
			}
			
		} while (--maxJoinTriesLeft);
		
			return 0;
}
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	08 95       	ret

00000734 <lora_send_task>:

/*-----------------------------------------------------------*/
void lora_send_task( void *pvParameters ){
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	00 d0       	rcall	.+0      	; 0x73a <lora_send_task+0x6>
     73a:	1f 92       	push	r1
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
				EventBits_t dataBits = xEventGroupWaitBits(Data_event_group, Send_data_bit, pdTRUE, pdTRUE, 500);
				if((dataBits & (Send_data_bit)) == (Send_data_bit)){			
					BaseType_t dequeue = xQueueReceive(Message_queue, &_uplink_payload, portMAX_DELAY);
					if(dequeue == pdTRUE){				
						rc = lora_driver_sent_upload_message(false, &_uplink_payload);
						printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(rc));
     740:	0f 2e       	mov	r0, r31
     742:	f0 eb       	ldi	r31, 0xB0	; 176
     744:	af 2e       	mov	r10, r31
     746:	f3 e0       	ldi	r31, 0x03	; 3
     748:	bf 2e       	mov	r11, r31
     74a:	f0 2d       	mov	r31, r0
	while(1)
	{
		static e_LoRa_return_code_t rc;
		
		// Hardware reset of LoRaWAN transceiver
		lora_driver_reset_rn2483(1);
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <lora_driver_reset_rn2483>
		vTaskDelay(2);
     752:	62 e0       	ldi	r22, 0x02	; 2
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 a3 14 	call	0x2946	; 0x2946 <vTaskDelay>
		lora_driver_reset_rn2483(0);
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <lora_driver_reset_rn2483>
		// Give it a chance to wakeup
		vTaskDelay(150);
     764:	66 e9       	ldi	r22, 0x96	; 150
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 a3 14 	call	0x2946	; 0x2946 <vTaskDelay>

		lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     770:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <lora_driver_flush_buffers>
	
		bool setup_value = 0;
	
		while(setup_value == 0){
			setup_value = lora_setup();	
     774:	15 df       	rcall	.-470    	; 0x5a0 <lora_setup>

		lora_driver_flush_buffers(); // get rid of first version string from module after reset!
	
		bool setup_value = 0;
	
		while(setup_value == 0){
     776:	88 23       	and	r24, r24
     778:	e9 f3       	breq	.-6      	; 0x774 <lora_send_task+0x40>
			setup_value = lora_setup();	
		}
		 TickType_t xLastWakeTime;
		 const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
		 xLastWakeTime = xTaskGetTickCount();
     77a:	0e 94 e6 12 	call	0x25cc	; 0x25cc <xTaskGetTickCount>
     77e:	69 83       	std	Y+1, r22	; 0x01
     780:	7a 83       	std	Y+2, r23	; 0x02
     782:	8b 83       	std	Y+3, r24	; 0x03
     784:	9c 83       	std	Y+4, r25	; 0x04
		 
		 while(1)
		 {
				vTaskDelayUntil( &xLastWakeTime, xFrequency ); 
     786:	44 e4       	ldi	r20, 0x44	; 68
     788:	57 e0       	ldi	r21, 0x07	; 7
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	ce 01       	movw	r24, r28
     790:	01 96       	adiw	r24, 0x01	; 1
     792:	0e 94 45 14 	call	0x288a	; 0x288a <vTaskDelayUntil>
				xEventGroupSetBits(Measure_event_group, CO2_measure_bit|Hum_temp_measure_bit); 
     796:	43 e0       	ldi	r20, 0x03	; 3
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	80 91 b4 19 	lds	r24, 0x19B4	; 0x8019b4 <Measure_event_group>
     7a2:	90 91 b5 19 	lds	r25, 0x19B5	; 0x8019b5 <Measure_event_group+0x1>
     7a6:	94 d2       	rcall	.+1320   	; 0xcd0 <xEventGroupSetBits>
				EventBits_t dataBits = xEventGroupWaitBits(Data_event_group, Send_data_bit, pdTRUE, pdTRUE, 500);
     7a8:	0f 2e       	mov	r0, r31
     7aa:	f4 ef       	ldi	r31, 0xF4	; 244
     7ac:	cf 2e       	mov	r12, r31
     7ae:	dd 24       	eor	r13, r13
     7b0:	d3 94       	inc	r13
     7b2:	e1 2c       	mov	r14, r1
     7b4:	f1 2c       	mov	r15, r1
     7b6:	f0 2d       	mov	r31, r0
     7b8:	01 e0       	ldi	r16, 0x01	; 1
     7ba:	21 e0       	ldi	r18, 0x01	; 1
     7bc:	40 e1       	ldi	r20, 0x10	; 16
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	80 91 b0 19 	lds	r24, 0x19B0	; 0x8019b0 <Data_event_group>
     7c8:	90 91 b1 19 	lds	r25, 0x19B1	; 0x8019b1 <Data_event_group+0x1>
     7cc:	c1 d1       	rcall	.+898    	; 0xb50 <xEventGroupWaitBits>
				if((dataBits & (Send_data_bit)) == (Send_data_bit)){			
     7ce:	64 ff       	sbrs	r22, 4
     7d0:	da cf       	rjmp	.-76     	; 0x786 <lora_send_task+0x52>
					BaseType_t dequeue = xQueueReceive(Message_queue, &_uplink_payload, portMAX_DELAY);
     7d2:	2f ef       	ldi	r18, 0xFF	; 255
     7d4:	3f ef       	ldi	r19, 0xFF	; 255
     7d6:	a9 01       	movw	r20, r18
     7d8:	6b e8       	ldi	r22, 0x8B	; 139
     7da:	77 e0       	ldi	r23, 0x07	; 7
     7dc:	80 91 bb 19 	lds	r24, 0x19BB	; 0x8019bb <Message_queue>
     7e0:	90 91 bc 19 	lds	r25, 0x19BC	; 0x8019bc <Message_queue+0x1>
     7e4:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <xQueueReceive>
					if(dequeue == pdTRUE){				
     7e8:	81 30       	cpi	r24, 0x01	; 1
     7ea:	69 f6       	brne	.-102    	; 0x786 <lora_send_task+0x52>
						rc = lora_driver_sent_upload_message(false, &_uplink_payload);
     7ec:	6b e8       	ldi	r22, 0x8B	; 139
     7ee:	77 e0       	ldi	r23, 0x07	; 7
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	0e 94 8d 20 	call	0x411a	; 0x411a <lora_driver_sent_upload_message>
     7f6:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <__data_end>
						printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(rc));
     7fa:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <lora_driver_map_return_code_to_text>
     7fe:	9f 93       	push	r25
     800:	8f 93       	push	r24
     802:	bf 92       	push	r11
     804:	af 92       	push	r10
     806:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <printf>
						if(rc == LoRa_NO_FREE_CH){
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <__data_end>
     816:	83 30       	cpi	r24, 0x03	; 3
     818:	09 f0       	breq	.+2      	; 0x81c <lora_send_task+0xe8>
     81a:	b5 cf       	rjmp	.-150    	; 0x786 <lora_send_task+0x52>
     81c:	97 cf       	rjmp	.-210    	; 0x74c <lora_send_task+0x18>

0000081e <packet_assembly_task>:
			
			uint16_t hum = (int) getHumidity();
			int16_t temp = (int) getTemperature();
			uint16_t co2_ppm = getCO2();
			
			payload_to_queue.len = 6;
     81e:	cd eb       	ldi	r28, 0xBD	; 189
     820:	d9 e1       	ldi	r29, 0x19	; 25
     822:	0f 2e       	mov	r0, r31
     824:	f6 e0       	ldi	r31, 0x06	; 6
     826:	af 2e       	mov	r10, r31
     828:	f0 2d       	mov	r31, r0
			payload_to_queue.port_no = 2;
     82a:	68 94       	set
     82c:	bb 24       	eor	r11, r11
     82e:	b1 f8       	bld	r11, 1

void packet_assembly_task(){
	
	for(;;){
		
		EventBits_t dataBits = xEventGroupWaitBits(Data_event_group, CO2_data_bit|Hum_temp_data_bit, pdTRUE, pdTRUE, 500);
     830:	0f 2e       	mov	r0, r31
     832:	f4 ef       	ldi	r31, 0xF4	; 244
     834:	cf 2e       	mov	r12, r31
     836:	dd 24       	eor	r13, r13
     838:	d3 94       	inc	r13
     83a:	e1 2c       	mov	r14, r1
     83c:	f1 2c       	mov	r15, r1
     83e:	f0 2d       	mov	r31, r0
     840:	01 e0       	ldi	r16, 0x01	; 1
     842:	21 e0       	ldi	r18, 0x01	; 1
     844:	4c e0       	ldi	r20, 0x0C	; 12
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	80 91 b0 19 	lds	r24, 0x19B0	; 0x8019b0 <Data_event_group>
     850:	90 91 b1 19 	lds	r25, 0x19B1	; 0x8019b1 <Data_event_group+0x1>
     854:	7d d1       	rcall	.+762    	; 0xb50 <xEventGroupWaitBits>
		if((dataBits & (CO2_data_bit|Hum_temp_data_bit)) == (CO2_data_bit|Hum_temp_data_bit)){
     856:	dc 01       	movw	r26, r24
     858:	cb 01       	movw	r24, r22
     85a:	8c 70       	andi	r24, 0x0C	; 12
     85c:	99 27       	eor	r25, r25
     85e:	aa 27       	eor	r26, r26
     860:	bb 27       	eor	r27, r27
     862:	0c 97       	sbiw	r24, 0x0c	; 12
     864:	a1 05       	cpc	r26, r1
     866:	b1 05       	cpc	r27, r1
			
			uint16_t hum = (int) getHumidity();
     868:	19 f7       	brne	.-58     	; 0x830 <packet_assembly_task+0x12>
     86a:	73 d0       	rcall	.+230    	; 0x952 <getHumidity>
     86c:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__fixsfsi>
     870:	f6 2e       	mov	r15, r22
			int16_t temp = (int) getTemperature();
     872:	e7 2e       	mov	r14, r23
     874:	b4 d0       	rcall	.+360    	; 0x9de <getTemperature>
     876:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__fixsfsi>
     87a:	16 2f       	mov	r17, r22
			uint16_t co2_ppm = getCO2();
     87c:	07 2f       	mov	r16, r23
     87e:	30 d0       	rcall	.+96     	; 0x8e0 <getCO2>
			
			payload_to_queue.len = 6;
     880:	a9 82       	std	Y+1, r10	; 0x01
			payload_to_queue.port_no = 2;
     882:	b8 82       	st	Y, r11
			payload_to_queue.bytes[0] = hum >> 8;
     884:	ea 82       	std	Y+2, r14	; 0x02
			payload_to_queue.bytes[1] = hum & 0xFF;
     886:	fb 82       	std	Y+3, r15	; 0x03
			payload_to_queue.bytes[2] = temp >> 8;
     888:	0c 83       	std	Y+4, r16	; 0x04
			payload_to_queue.bytes[3] = temp & 0xFF;
     88a:	1d 83       	std	Y+5, r17	; 0x05
			payload_to_queue.bytes[4] = co2_ppm >> 8;
     88c:	9e 83       	std	Y+6, r25	; 0x06
			payload_to_queue.bytes[5] = co2_ppm & 0xFF;
     88e:	8f 83       	std	Y+7, r24	; 0x07
			//printf("%i\n",payload_to_queue.bytes[0]);
			xQueueSend(Message_queue, &payload_to_queue,portMAX_DELAY);
     890:	00 e0       	ldi	r16, 0x00	; 0
     892:	2f ef       	ldi	r18, 0xFF	; 255
     894:	3f ef       	ldi	r19, 0xFF	; 255
     896:	a9 01       	movw	r20, r18
     898:	be 01       	movw	r22, r28
     89a:	80 91 bb 19 	lds	r24, 0x19BB	; 0x8019bb <Message_queue>
     89e:	90 91 bc 19 	lds	r25, 0x19BC	; 0x8019bc <Message_queue+0x1>
     8a2:	38 d7       	rcall	.+3696   	; 0x1714 <xQueueGenericSend>
			
			xEventGroupSetBits(Data_event_group, Send_data_bit);
     8a4:	40 e1       	ldi	r20, 0x10	; 16
     8a6:	50 e0       	ldi	r21, 0x00	; 0
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	80 91 b0 19 	lds	r24, 0x19B0	; 0x8019b0 <Data_event_group>
     8b0:	90 91 b1 19 	lds	r25, 0x19B1	; 0x8019b1 <Data_event_group+0x1>
     8b4:	0d d2       	rcall	.+1050   	; 0xcd0 <xEventGroupSetBits>
     8b6:	bc cf       	rjmp	.-136    	; 0x830 <packet_assembly_task+0x12>

000008b8 <PacketAssembly_create>:
extern QueueHandle_t Message_queue;

void packet_assembly_task();

void PacketAssembly_create()
{
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
	xTaskCreate(
     8be:	e1 2c       	mov	r14, r1
     8c0:	f1 2c       	mov	r15, r1
     8c2:	02 e0       	ldi	r16, 0x02	; 2
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	42 ef       	ldi	r20, 0xF2	; 242
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	65 ec       	ldi	r22, 0xC5	; 197
     8ce:	73 e0       	ldi	r23, 0x03	; 3
     8d0:	8f e0       	ldi	r24, 0x0F	; 15
     8d2:	94 e0       	ldi	r25, 0x04	; 4
     8d4:	0e 94 85 11 	call	0x230a	; 0x230a <xTaskCreate>
	configMINIMAL_STACK_SIZE+50,  // This stack size can be checked & adjusted by reading the Stack Highwater
	NULL,
	2,  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	NULL
	);
}
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	08 95       	ret

000008e0 <getCO2>:
//extern QueueHandle_t Temperature_Queue;
//extern QueueHandle_t Humidity_Queue;


uint16_t getCO2(){
	while(isTaken_CO2){	
     8e0:	80 91 07 08 	lds	r24, 0x0807	; 0x800807 <isTaken_CO2>
     8e4:	88 23       	and	r24, r24
     8e6:	51 f0       	breq	.+20     	; 0x8fc <getCO2+0x1c>
		vTaskDelay(50);
     8e8:	62 e3       	ldi	r22, 0x32	; 50
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 a3 14 	call	0x2946	; 0x2946 <vTaskDelay>
//extern QueueHandle_t Temperature_Queue;
//extern QueueHandle_t Humidity_Queue;


uint16_t getCO2(){
	while(isTaken_CO2){	
     8f4:	80 91 07 08 	lds	r24, 0x0807	; 0x800807 <isTaken_CO2>
     8f8:	81 11       	cpse	r24, r1
     8fa:	f6 cf       	rjmp	.-20     	; 0x8e8 <getCO2+0x8>
		vTaskDelay(50);
	}
	return local_CO2;

}
     8fc:	80 91 d7 19 	lds	r24, 0x19D7	; 0x8019d7 <local_CO2>
     900:	90 91 d8 19 	lds	r25, 0x19D8	; 0x8019d8 <local_CO2+0x1>
     904:	08 95       	ret

00000906 <setCO2>:

void setCO2(uint16_t CO2){
     906:	0f 93       	push	r16
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	ec 01       	movw	r28, r24
	xSemaphoreTake(Mutex_CO2,1000);
     90e:	48 ee       	ldi	r20, 0xE8	; 232
     910:	53 e0       	ldi	r21, 0x03	; 3
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <Mutex_CO2>
     91a:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <Mutex_CO2+0x1>
     91e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <xQueueSemaphoreTake>
	isTaken_CO2 = 1;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <isTaken_CO2>
	local_CO2 = CO2;
     928:	d0 93 d8 19 	sts	0x19D8, r29	; 0x8019d8 <local_CO2+0x1>
     92c:	c0 93 d7 19 	sts	0x19D7, r28	; 0x8019d7 <local_CO2>
	//xQueueSend(CO2_Queue, &local_CO2,portMAX_DELAY); // enqueue it
	xSemaphoreGive(Mutex_CO2);
     930:	00 e0       	ldi	r16, 0x00	; 0
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	a9 01       	movw	r20, r18
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <Mutex_CO2>
     940:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <Mutex_CO2+0x1>
     944:	e7 d6       	rcall	.+3534   	; 0x1714 <xQueueGenericSend>
	isTaken_CO2 = 0;
     946:	10 92 07 08 	sts	0x0807, r1	; 0x800807 <isTaken_CO2>
}
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	0f 91       	pop	r16
     950:	08 95       	ret

00000952 <getHumidity>:

float getHumidity(){
	while(isTaken_humidity){
     952:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <isTaken_humidity>
     956:	88 23       	and	r24, r24
     958:	51 f0       	breq	.+20     	; 0x96e <getHumidity+0x1c>
		vTaskDelay(50);
     95a:	62 e3       	ldi	r22, 0x32	; 50
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 a3 14 	call	0x2946	; 0x2946 <vTaskDelay>
	xSemaphoreGive(Mutex_CO2);
	isTaken_CO2 = 0;
}

float getHumidity(){
	while(isTaken_humidity){
     966:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <isTaken_humidity>
     96a:	81 11       	cpse	r24, r1
     96c:	f6 cf       	rjmp	.-20     	; 0x95a <getHumidity+0x8>
		vTaskDelay(50);
	}
	return local_humidity;
     96e:	60 91 d9 19 	lds	r22, 0x19D9	; 0x8019d9 <local_humidity>
     972:	70 91 da 19 	lds	r23, 0x19DA	; 0x8019da <local_humidity+0x1>
     976:	80 91 db 19 	lds	r24, 0x19DB	; 0x8019db <local_humidity+0x2>
     97a:	90 91 dc 19 	lds	r25, 0x19DC	; 0x8019dc <local_humidity+0x3>
}
     97e:	08 95       	ret

00000980 <setHumidity>:
void setHumidity(float humidity_level){
     980:	cf 92       	push	r12
     982:	df 92       	push	r13
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	6b 01       	movw	r12, r22
     98c:	7c 01       	movw	r14, r24
	xSemaphoreTake(Mutex_humidity,1000);
     98e:	48 ee       	ldi	r20, 0xE8	; 232
     990:	53 e0       	ldi	r21, 0x03	; 3
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <Mutex_humidity>
     99a:	90 91 af 19 	lds	r25, 0x19AF	; 0x8019af <Mutex_humidity+0x1>
     99e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <xQueueSemaphoreTake>
	isTaken_humidity = 1;
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <isTaken_humidity>
	local_humidity = humidity_level;
     9a8:	c0 92 d9 19 	sts	0x19D9, r12	; 0x8019d9 <local_humidity>
     9ac:	d0 92 da 19 	sts	0x19DA, r13	; 0x8019da <local_humidity+0x1>
     9b0:	e0 92 db 19 	sts	0x19DB, r14	; 0x8019db <local_humidity+0x2>
     9b4:	f0 92 dc 19 	sts	0x19DC, r15	; 0x8019dc <local_humidity+0x3>
	//xQueueSend(Humidity_Queue, &local_humidity,portMAX_DELAY);
	xSemaphoreGive(Mutex_humidity);
     9b8:	00 e0       	ldi	r16, 0x00	; 0
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	a9 01       	movw	r20, r18
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <Mutex_humidity>
     9c8:	90 91 af 19 	lds	r25, 0x19AF	; 0x8019af <Mutex_humidity+0x1>
     9cc:	a3 d6       	rcall	.+3398   	; 0x1714 <xQueueGenericSend>
	isTaken_humidity = 0;
     9ce:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <isTaken_humidity>
}
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	df 90       	pop	r13
     9da:	cf 90       	pop	r12
     9dc:	08 95       	ret

000009de <getTemperature>:

float getTemperature(){
	while(isTaken_temperature){
     9de:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <isTaken_temperature>
     9e2:	88 23       	and	r24, r24
     9e4:	51 f0       	breq	.+20     	; 0x9fa <getTemperature+0x1c>
		vTaskDelay(50);
     9e6:	62 e3       	ldi	r22, 0x32	; 50
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	0e 94 a3 14 	call	0x2946	; 0x2946 <vTaskDelay>
	xSemaphoreGive(Mutex_humidity);
	isTaken_humidity = 0;
}

float getTemperature(){
	while(isTaken_temperature){
     9f2:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <isTaken_temperature>
     9f6:	81 11       	cpse	r24, r1
     9f8:	f6 cf       	rjmp	.-20     	; 0x9e6 <getTemperature+0x8>
		vTaskDelay(50);
	}
	return local_temperature;
     9fa:	60 91 d3 19 	lds	r22, 0x19D3	; 0x8019d3 <local_temperature>
     9fe:	70 91 d4 19 	lds	r23, 0x19D4	; 0x8019d4 <local_temperature+0x1>
     a02:	80 91 d5 19 	lds	r24, 0x19D5	; 0x8019d5 <local_temperature+0x2>
     a06:	90 91 d6 19 	lds	r25, 0x19D6	; 0x8019d6 <local_temperature+0x3>
}
     a0a:	08 95       	ret

00000a0c <setTemperature>:
void setTemperature(float temperature_level){
     a0c:	cf 92       	push	r12
     a0e:	df 92       	push	r13
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	0f 93       	push	r16
     a16:	6b 01       	movw	r12, r22
     a18:	7c 01       	movw	r14, r24
	xSemaphoreTake(Mutex_temperature,1000);
     a1a:	48 ee       	ldi	r20, 0xE8	; 232
     a1c:	53 e0       	ldi	r21, 0x03	; 3
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	80 91 b7 19 	lds	r24, 0x19B7	; 0x8019b7 <Mutex_temperature>
     a26:	90 91 b8 19 	lds	r25, 0x19B8	; 0x8019b8 <Mutex_temperature+0x1>
     a2a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <xQueueSemaphoreTake>
	isTaken_temperature = 1;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <isTaken_temperature>
	local_temperature = temperature_level;
     a34:	c0 92 d3 19 	sts	0x19D3, r12	; 0x8019d3 <local_temperature>
     a38:	d0 92 d4 19 	sts	0x19D4, r13	; 0x8019d4 <local_temperature+0x1>
     a3c:	e0 92 d5 19 	sts	0x19D5, r14	; 0x8019d5 <local_temperature+0x2>
     a40:	f0 92 d6 19 	sts	0x19D6, r15	; 0x8019d6 <local_temperature+0x3>
//	xQueueSend(Temperature_Queue, &temperature_level,portMAX_DELAY);
	xSemaphoreGive(Mutex_temperature);
     a44:	00 e0       	ldi	r16, 0x00	; 0
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	a9 01       	movw	r20, r18
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	80 91 b7 19 	lds	r24, 0x19B7	; 0x8019b7 <Mutex_temperature>
     a54:	90 91 b8 19 	lds	r25, 0x19B8	; 0x8019b8 <Mutex_temperature+0x1>
     a58:	5d d6       	rcall	.+3258   	; 0x1714 <xQueueGenericSend>
	isTaken_temperature = 0;
     a5a:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <isTaken_temperature>
}
     a5e:	0f 91       	pop	r16
     a60:	ff 90       	pop	r15
     a62:	ef 90       	pop	r14
     a64:	df 90       	pop	r13
     a66:	cf 90       	pop	r12
     a68:	08 95       	ret

00000a6a <init_resources>:



void init_resources(){
	
	 local_CO2 = (uint16_t)pvPortMalloc(sizeof(uint16_t));
     a6a:	82 e0       	ldi	r24, 0x02	; 2
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	16 d2       	rcall	.+1068   	; 0xe9c <pvPortMalloc>
     a70:	90 93 d8 19 	sts	0x19D8, r25	; 0x8019d8 <local_CO2+0x1>
     a74:	80 93 d7 19 	sts	0x19D7, r24	; 0x8019d7 <local_CO2>
     a78:	08 95       	ret

00000a7a <ServoHandler_create>:
int8_t percent = 100;
//extern MessageBufferHandle_t xMessageBuffer; // NOTE: Make message buffer header file and initialize it in main

void Servo_handler_task( void *pvParameters );

void ServoHandler_create(){
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
    rcServoCreate();
     a80:	0e 94 18 24 	call	0x4830	; 0x4830 <rcServoCreate>
	//down_link_message_buffer_handle = xMessageBufferCreate(sizeof(lora_payload_t)*4);
	
    xTaskCreate(
     a84:	e1 2c       	mov	r14, r1
     a86:	f1 2c       	mov	r15, r1
     a88:	03 e0       	ldi	r16, 0x03	; 3
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	42 ef       	ldi	r20, 0xF2	; 242
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	62 ed       	ldi	r22, 0xD2	; 210
     a94:	73 e0       	ldi	r23, 0x03	; 3
     a96:	88 e5       	ldi	r24, 0x58	; 88
     a98:	95 e0       	ldi	r25, 0x05	; 5
     a9a:	0e 94 85 11 	call	0x230a	; 0x230a <xTaskCreate>
    ,  (const portCHAR *)"ServoHTask"  // A name just for humans
    ,  configMINIMAL_STACK_SIZE+50  // This stack size can be checked & adjusted by reading the Stack Highwater
    ,  NULL
    ,  3  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
    ,  NULL );
}
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	08 95       	ret

00000aa6 <flushDownlink>:

void flushDownlink(){
downlink_payload.port_no = 0;
     aa6:	ed ed       	ldi	r30, 0xDD	; 221
     aa8:	f9 e1       	ldi	r31, 0x19	; 25
     aaa:	10 82       	st	Z, r1
downlink_payload.len = 0;
     aac:	11 82       	std	Z+1, r1	; 0x01
     aae:	08 95       	ret

00000ab0 <Servo_handler_task>:
}

void  Servo_handler_task( void *pvParameters )
{	
	 if(down_link_message_buffer_handle == NULL){
     ab0:	80 91 f3 19 	lds	r24, 0x19F3	; 0x8019f3 <down_link_message_buffer_handle>
     ab4:	90 91 f4 19 	lds	r25, 0x19F4	; 0x8019f4 <down_link_message_buffer_handle+0x1>
     ab8:	89 2b       	or	r24, r25
     aba:	21 f4       	brne	.+8      	; 0xac4 <Servo_handler_task+0x14>
		 printf("%s\n","Message buffer is null!");
     abc:	8d ed       	ldi	r24, 0xDD	; 221
     abe:	93 e0       	ldi	r25, 0x03	; 3
     ac0:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <puts>
	//	 printf("%s\n","Message buffer is GOOD!");
	 }
  for (;;)
  {

		xMessageBufferReceive(down_link_message_buffer_handle, &downlink_payload, sizeof(lora_payload_t), portMAX_DELAY);
     ac4:	0f ef       	ldi	r16, 0xFF	; 255
     ac6:	1f ef       	ldi	r17, 0xFF	; 255
     ac8:	98 01       	movw	r18, r16
     aca:	46 e1       	ldi	r20, 0x16	; 22
     acc:	50 e0       	ldi	r21, 0x00	; 0
     ace:	6d ed       	ldi	r22, 0xDD	; 221
     ad0:	79 e1       	ldi	r23, 0x19	; 25
     ad2:	80 91 f3 19 	lds	r24, 0x19F3	; 0x8019f3 <down_link_message_buffer_handle>
     ad6:	90 91 f4 19 	lds	r25, 0x19F4	; 0x8019f4 <down_link_message_buffer_handle+0x1>
     ada:	0e 94 42 10 	call	0x2084	; 0x2084 <xStreamBufferReceive>
		
		//printf("DOWN LINK: from port: %d with %d bytes received!\n", downlink_payload.port_no, downlink_payload.len); 
		if (downlink_payload.port_no==3) // Check that we have got the expected 8 bytes
     ade:	80 91 dd 19 	lds	r24, 0x19DD	; 0x8019dd <downlink_payload>
     ae2:	83 30       	cpi	r24, 0x03	; 3
     ae4:	49 f4       	brne	.+18     	; 0xaf8 <Servo_handler_task+0x48>
				_newValue = downlink_payload.bytes[4] << 8;
				_newValue |= downlink_payload.bytes[5];
				printf("byte3 %d \n", _newValue);
				*/
				
				percent = percent * -1;	// percent=100 (defined at top)
     ae6:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <percent>
     aea:	61 95       	neg	r22
     aec:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <percent>
				rcServoSet(servoNo,percent); // servoNo=0 (constant defined at top)
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	0e 94 00 24 	call	0x4800	; 0x4800 <rcServoSet>
				flushDownlink();
     af6:	d7 df       	rcall	.-82     	; 0xaa6 <flushDownlink>
			}
		lora_driver_flush_buffers();
     af8:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <lora_driver_flush_buffers>
  }
     afc:	e3 cf       	rjmp	.-58     	; 0xac4 <Servo_handler_task+0x14>

00000afe <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     afe:	e7 e0       	ldi	r30, 0x07	; 7
     b00:	f1 e0       	ldi	r31, 0x01	; 1
     b02:	80 81       	ld	r24, Z
     b04:	8f 60       	ori	r24, 0x0F	; 15
     b06:	80 83       	st	Z, r24
     b08:	08 95       	ret

00000b0a <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     b0a:	e8 e0       	ldi	r30, 0x08	; 8
     b0c:	f1 e0       	ldi	r31, 0x01	; 1
     b0e:	90 81       	ld	r25, Z
     b10:	90 7f       	andi	r25, 0xF0	; 240
     b12:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     b14:	90 81       	ld	r25, Z
     b16:	8f 70       	andi	r24, 0x0F	; 15
     b18:	98 2b       	or	r25, r24
     b1a:	90 83       	st	Z, r25
     b1c:	08 95       	ret

00000b1e <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     b1e:	e8 e0       	ldi	r30, 0x08	; 8
     b20:	f1 e0       	ldi	r31, 0x01	; 1
     b22:	80 81       	ld	r24, Z
     b24:	80 7f       	andi	r24, 0xF0	; 240
     b26:	80 83       	st	Z, r24
     b28:	08 95       	ret

00000b2a <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	80 e1       	ldi	r24, 0x10	; 16
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	b4 d1       	rcall	.+872    	; 0xe9c <pvPortMalloc>
     b34:	ec 01       	movw	r28, r24
     b36:	00 97       	sbiw	r24, 0x00	; 0
     b38:	39 f0       	breq	.+14     	; 0xb48 <xEventGroupCreate+0x1e>
     b3a:	fc 01       	movw	r30, r24
     b3c:	11 92       	st	Z+, r1
     b3e:	11 92       	st	Z+, r1
     b40:	11 92       	st	Z+, r1
     b42:	11 92       	st	Z+, r1
     b44:	cf 01       	movw	r24, r30
     b46:	94 d2       	rcall	.+1320   	; 0x1070 <vListInitialise>
     b48:	ce 01       	movw	r24, r28
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	08 95       	ret

00000b50 <xEventGroupWaitBits>:
     b50:	2f 92       	push	r2
     b52:	3f 92       	push	r3
     b54:	4f 92       	push	r4
     b56:	5f 92       	push	r5
     b58:	6f 92       	push	r6
     b5a:	7f 92       	push	r7
     b5c:	8f 92       	push	r8
     b5e:	9f 92       	push	r9
     b60:	af 92       	push	r10
     b62:	bf 92       	push	r11
     b64:	cf 92       	push	r12
     b66:	df 92       	push	r13
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	ec 01       	movw	r28, r24
     b76:	4a 01       	movw	r8, r20
     b78:	5b 01       	movw	r10, r22
     b7a:	62 2e       	mov	r6, r18
     b7c:	70 2e       	mov	r7, r16
     b7e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <vTaskSuspendAll>
     b82:	28 80       	ld	r2, Y
     b84:	39 80       	ldd	r3, Y+1	; 0x01
     b86:	4a 80       	ldd	r4, Y+2	; 0x02
     b88:	5b 80       	ldd	r5, Y+3	; 0x03
     b8a:	01 11       	cpse	r16, r1
     b8c:	0d c0       	rjmp	.+26     	; 0xba8 <xEventGroupWaitBits+0x58>
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	b2 01       	movw	r22, r4
     b92:	a1 01       	movw	r20, r2
     b94:	48 21       	and	r20, r8
     b96:	59 21       	and	r21, r9
     b98:	6a 21       	and	r22, r10
     b9a:	7b 21       	and	r23, r11
     b9c:	45 2b       	or	r20, r21
     b9e:	46 2b       	or	r20, r22
     ba0:	47 2b       	or	r20, r23
     ba2:	79 f4       	brne	.+30     	; 0xbc2 <xEventGroupWaitBits+0x72>
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	0d c0       	rjmp	.+26     	; 0xbc2 <xEventGroupWaitBits+0x72>
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	b2 01       	movw	r22, r4
     bac:	a1 01       	movw	r20, r2
     bae:	48 21       	and	r20, r8
     bb0:	59 21       	and	r21, r9
     bb2:	6a 21       	and	r22, r10
     bb4:	7b 21       	and	r23, r11
     bb6:	48 15       	cp	r20, r8
     bb8:	59 05       	cpc	r21, r9
     bba:	6a 05       	cpc	r22, r10
     bbc:	7b 05       	cpc	r23, r11
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <xEventGroupWaitBits+0x72>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	88 23       	and	r24, r24
     bc4:	81 f0       	breq	.+32     	; 0xbe6 <xEventGroupWaitBits+0x96>
     bc6:	66 20       	and	r6, r6
     bc8:	09 f4       	brne	.+2      	; 0xbcc <xEventGroupWaitBits+0x7c>
     bca:	6b c0       	rjmp	.+214    	; 0xca2 <xEventGroupWaitBits+0x152>
     bcc:	80 94       	com	r8
     bce:	90 94       	com	r9
     bd0:	a0 94       	com	r10
     bd2:	b0 94       	com	r11
     bd4:	82 20       	and	r8, r2
     bd6:	93 20       	and	r9, r3
     bd8:	a4 20       	and	r10, r4
     bda:	b5 20       	and	r11, r5
     bdc:	88 82       	st	Y, r8
     bde:	99 82       	std	Y+1, r9	; 0x01
     be0:	aa 82       	std	Y+2, r10	; 0x02
     be2:	bb 82       	std	Y+3, r11	; 0x03
     be4:	5e c0       	rjmp	.+188    	; 0xca2 <xEventGroupWaitBits+0x152>
     be6:	c1 14       	cp	r12, r1
     be8:	d1 04       	cpc	r13, r1
     bea:	e1 04       	cpc	r14, r1
     bec:	f1 04       	cpc	r15, r1
     bee:	09 f4       	brne	.+2      	; 0xbf2 <xEventGroupWaitBits+0xa2>
     bf0:	58 c0       	rjmp	.+176    	; 0xca2 <xEventGroupWaitBits+0x152>
     bf2:	66 20       	and	r6, r6
     bf4:	29 f0       	breq	.+10     	; 0xc00 <xEventGroupWaitBits+0xb0>
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	71 e0       	ldi	r23, 0x01	; 1
     bfe:	03 c0       	rjmp	.+6      	; 0xc06 <xEventGroupWaitBits+0xb6>
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	50 e0       	ldi	r21, 0x00	; 0
     c04:	ba 01       	movw	r22, r20
     c06:	71 10       	cpse	r7, r1
     c08:	74 60       	ori	r23, 0x04	; 4
     c0a:	48 29       	or	r20, r8
     c0c:	59 29       	or	r21, r9
     c0e:	6a 29       	or	r22, r10
     c10:	7b 29       	or	r23, r11
     c12:	97 01       	movw	r18, r14
     c14:	86 01       	movw	r16, r12
     c16:	ce 01       	movw	r24, r28
     c18:	04 96       	adiw	r24, 0x04	; 4
     c1a:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <vTaskPlaceOnUnorderedEventList>
     c1e:	0e 94 c9 13 	call	0x2792	; 0x2792 <xTaskResumeAll>
     c22:	81 11       	cpse	r24, r1
     c24:	01 c0       	rjmp	.+2      	; 0xc28 <xEventGroupWaitBits+0xd8>
     c26:	6c d3       	rcall	.+1752   	; 0x1300 <vPortYield>
     c28:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uxTaskResetEventItemValue>
     c2c:	91 fd       	sbrc	r25, 1
     c2e:	35 c0       	rjmp	.+106    	; 0xc9a <xEventGroupWaitBits+0x14a>
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	0f 92       	push	r0
     c36:	68 81       	ld	r22, Y
     c38:	79 81       	ldd	r23, Y+1	; 0x01
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	9b 81       	ldd	r25, Y+3	; 0x03
     c3e:	71 10       	cpse	r7, r1
     c40:	0d c0       	rjmp	.+26     	; 0xc5c <xEventGroupWaitBits+0x10c>
     c42:	21 e0       	ldi	r18, 0x01	; 1
     c44:	75 01       	movw	r14, r10
     c46:	64 01       	movw	r12, r8
     c48:	c6 22       	and	r12, r22
     c4a:	d7 22       	and	r13, r23
     c4c:	e8 22       	and	r14, r24
     c4e:	f9 22       	and	r15, r25
     c50:	cd 28       	or	r12, r13
     c52:	ce 28       	or	r12, r14
     c54:	cf 28       	or	r12, r15
     c56:	79 f4       	brne	.+30     	; 0xc76 <xEventGroupWaitBits+0x126>
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	0d c0       	rjmp	.+26     	; 0xc76 <xEventGroupWaitBits+0x126>
     c5c:	21 e0       	ldi	r18, 0x01	; 1
     c5e:	75 01       	movw	r14, r10
     c60:	64 01       	movw	r12, r8
     c62:	c6 22       	and	r12, r22
     c64:	d7 22       	and	r13, r23
     c66:	e8 22       	and	r14, r24
     c68:	f9 22       	and	r15, r25
     c6a:	c8 14       	cp	r12, r8
     c6c:	d9 04       	cpc	r13, r9
     c6e:	ea 04       	cpc	r14, r10
     c70:	fb 04       	cpc	r15, r11
     c72:	09 f0       	breq	.+2      	; 0xc76 <xEventGroupWaitBits+0x126>
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	22 23       	and	r18, r18
     c78:	71 f0       	breq	.+28     	; 0xc96 <xEventGroupWaitBits+0x146>
     c7a:	66 20       	and	r6, r6
     c7c:	61 f0       	breq	.+24     	; 0xc96 <xEventGroupWaitBits+0x146>
     c7e:	80 94       	com	r8
     c80:	90 94       	com	r9
     c82:	a0 94       	com	r10
     c84:	b0 94       	com	r11
     c86:	86 22       	and	r8, r22
     c88:	97 22       	and	r9, r23
     c8a:	a8 22       	and	r10, r24
     c8c:	b9 22       	and	r11, r25
     c8e:	88 82       	st	Y, r8
     c90:	99 82       	std	Y+1, r9	; 0x01
     c92:	aa 82       	std	Y+2, r10	; 0x02
     c94:	bb 82       	std	Y+3, r11	; 0x03
     c96:	0f 90       	pop	r0
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	1b 01       	movw	r2, r22
     c9c:	2c 01       	movw	r4, r24
     c9e:	55 24       	eor	r5, r5
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <xEventGroupWaitBits+0x156>
     ca2:	0e 94 c9 13 	call	0x2792	; 0x2792 <xTaskResumeAll>
     ca6:	c2 01       	movw	r24, r4
     ca8:	b1 01       	movw	r22, r2
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	df 90       	pop	r13
     cb8:	cf 90       	pop	r12
     cba:	bf 90       	pop	r11
     cbc:	af 90       	pop	r10
     cbe:	9f 90       	pop	r9
     cc0:	8f 90       	pop	r8
     cc2:	7f 90       	pop	r7
     cc4:	6f 90       	pop	r6
     cc6:	5f 90       	pop	r5
     cc8:	4f 90       	pop	r4
     cca:	3f 90       	pop	r3
     ccc:	2f 90       	pop	r2
     cce:	08 95       	ret

00000cd0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     cd0:	4f 92       	push	r4
     cd2:	5f 92       	push	r5
     cd4:	6f 92       	push	r6
     cd6:	7f 92       	push	r7
     cd8:	8f 92       	push	r8
     cda:	9f 92       	push	r9
     cdc:	af 92       	push	r10
     cde:	bf 92       	push	r11
     ce0:	cf 92       	push	r12
     ce2:	df 92       	push	r13
     ce4:	ef 92       	push	r14
     ce6:	ff 92       	push	r15
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	ec 01       	movw	r28, r24
     cf2:	6a 01       	movw	r12, r20
     cf4:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     cf6:	8c 01       	movw	r16, r24
     cf8:	09 5f       	subi	r16, 0xF9	; 249
     cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     cfc:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     d00:	eb 85       	ldd	r30, Y+11	; 0x0b
     d02:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     d04:	88 81       	ld	r24, Y
     d06:	99 81       	ldd	r25, Y+1	; 0x01
     d08:	aa 81       	ldd	r26, Y+2	; 0x02
     d0a:	bb 81       	ldd	r27, Y+3	; 0x03
     d0c:	c8 2a       	or	r12, r24
     d0e:	d9 2a       	or	r13, r25
     d10:	ea 2a       	or	r14, r26
     d12:	fb 2a       	or	r15, r27
     d14:	c8 82       	st	Y, r12
     d16:	d9 82       	std	Y+1, r13	; 0x01
     d18:	ea 82       	std	Y+2, r14	; 0x02
     d1a:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     d1c:	0e 17       	cp	r16, r30
     d1e:	1f 07       	cpc	r17, r31
     d20:	09 f4       	brne	.+2      	; 0xd24 <xEventGroupSetBits+0x54>
     d22:	45 c0       	rjmp	.+138    	; 0xdae <xEventGroupSetBits+0xde>
     d24:	c1 2c       	mov	r12, r1
     d26:	d1 2c       	mov	r13, r1
     d28:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     d2a:	99 24       	eor	r9, r9
     d2c:	93 94       	inc	r9
     d2e:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
     d30:	a4 80       	ldd	r10, Z+4	; 0x04
     d32:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     d34:	80 81       	ld	r24, Z
     d36:	91 81       	ldd	r25, Z+1	; 0x01
     d38:	a2 81       	ldd	r26, Z+2	; 0x02
     d3a:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     d3c:	ac 01       	movw	r20, r24
     d3e:	bd 01       	movw	r22, r26
     d40:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     d42:	b2 fd       	sbrc	r27, 2
     d44:	0f c0       	rjmp	.+30     	; 0xd64 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     d46:	48 80       	ld	r4, Y
     d48:	59 80       	ldd	r5, Y+1	; 0x01
     d4a:	6a 80       	ldd	r6, Y+2	; 0x02
     d4c:	7b 80       	ldd	r7, Y+3	; 0x03
     d4e:	44 22       	and	r4, r20
     d50:	55 22       	and	r5, r21
     d52:	66 22       	and	r6, r22
     d54:	77 22       	and	r7, r23
     d56:	29 2d       	mov	r18, r9
     d58:	45 28       	or	r4, r5
     d5a:	46 28       	or	r4, r6
     d5c:	47 28       	or	r4, r7
     d5e:	89 f4       	brne	.+34     	; 0xd82 <xEventGroupSetBits+0xb2>
     d60:	28 2d       	mov	r18, r8
     d62:	0f c0       	rjmp	.+30     	; 0xd82 <xEventGroupSetBits+0xb2>
     d64:	48 80       	ld	r4, Y
     d66:	59 80       	ldd	r5, Y+1	; 0x01
     d68:	6a 80       	ldd	r6, Y+2	; 0x02
     d6a:	7b 80       	ldd	r7, Y+3	; 0x03
     d6c:	44 22       	and	r4, r20
     d6e:	55 22       	and	r5, r21
     d70:	66 22       	and	r6, r22
     d72:	77 22       	and	r7, r23
     d74:	29 2d       	mov	r18, r9
     d76:	44 16       	cp	r4, r20
     d78:	55 06       	cpc	r5, r21
     d7a:	66 06       	cpc	r6, r22
     d7c:	77 06       	cpc	r7, r23
     d7e:	09 f0       	breq	.+2      	; 0xd82 <xEventGroupSetBits+0xb2>
     d80:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     d82:	22 23       	and	r18, r18
     d84:	71 f0       	breq	.+28     	; 0xda2 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     d86:	b0 ff       	sbrs	r27, 0
     d88:	04 c0       	rjmp	.+8      	; 0xd92 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     d8a:	c4 2a       	or	r12, r20
     d8c:	d5 2a       	or	r13, r21
     d8e:	e6 2a       	or	r14, r22
     d90:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     d92:	48 81       	ld	r20, Y
     d94:	59 81       	ldd	r21, Y+1	; 0x01
     d96:	6a 81       	ldd	r22, Y+2	; 0x02
     d98:	7b 81       	ldd	r23, Y+3	; 0x03
     d9a:	72 60       	ori	r23, 0x02	; 2
     d9c:	cf 01       	movw	r24, r30
     d9e:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <vTaskRemoveFromUnorderedEventList>
     da2:	ea 2d       	mov	r30, r10
     da4:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     da6:	0e 17       	cp	r16, r30
     da8:	1f 07       	cpc	r17, r31
     daa:	11 f6       	brne	.-124    	; 0xd30 <xEventGroupSetBits+0x60>
     dac:	03 c0       	rjmp	.+6      	; 0xdb4 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     dae:	c1 2c       	mov	r12, r1
     db0:	d1 2c       	mov	r13, r1
     db2:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     db4:	c0 94       	com	r12
     db6:	d0 94       	com	r13
     db8:	e0 94       	com	r14
     dba:	f0 94       	com	r15
     dbc:	88 81       	ld	r24, Y
     dbe:	99 81       	ldd	r25, Y+1	; 0x01
     dc0:	aa 81       	ldd	r26, Y+2	; 0x02
     dc2:	bb 81       	ldd	r27, Y+3	; 0x03
     dc4:	c8 22       	and	r12, r24
     dc6:	d9 22       	and	r13, r25
     dc8:	ea 22       	and	r14, r26
     dca:	fb 22       	and	r15, r27
     dcc:	c8 82       	st	Y, r12
     dce:	d9 82       	std	Y+1, r13	; 0x01
     dd0:	ea 82       	std	Y+2, r14	; 0x02
     dd2:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     dd4:	0e 94 c9 13 	call	0x2792	; 0x2792 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     dd8:	68 81       	ld	r22, Y
     dda:	79 81       	ldd	r23, Y+1	; 0x01
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	9b 81       	ldd	r25, Y+3	; 0x03
}
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	ef 90       	pop	r14
     dec:	df 90       	pop	r13
     dee:	cf 90       	pop	r12
     df0:	bf 90       	pop	r11
     df2:	af 90       	pop	r10
     df4:	9f 90       	pop	r9
     df6:	8f 90       	pop	r8
     df8:	7f 90       	pop	r7
     dfa:	6f 90       	pop	r6
     dfc:	5f 90       	pop	r5
     dfe:	4f 90       	pop	r4
     e00:	08 95       	ret

00000e02 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     e08:	e0 e1       	ldi	r30, 0x10	; 16
     e0a:	f8 e0       	ldi	r31, 0x08	; 8
     e0c:	01 c0       	rjmp	.+2      	; 0xe10 <prvInsertBlockIntoFreeList+0xe>
     e0e:	f9 01       	movw	r30, r18
     e10:	20 81       	ld	r18, Z
     e12:	31 81       	ldd	r19, Z+1	; 0x01
     e14:	2a 17       	cp	r18, r26
     e16:	3b 07       	cpc	r19, r27
     e18:	d0 f3       	brcs	.-12     	; 0xe0e <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     e1a:	82 81       	ldd	r24, Z+2	; 0x02
     e1c:	93 81       	ldd	r25, Z+3	; 0x03
     e1e:	af 01       	movw	r20, r30
     e20:	48 0f       	add	r20, r24
     e22:	59 1f       	adc	r21, r25
     e24:	a4 17       	cp	r26, r20
     e26:	b5 07       	cpc	r27, r21
     e28:	49 f4       	brne	.+18     	; 0xe3c <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     e2a:	12 96       	adiw	r26, 0x02	; 2
     e2c:	4d 91       	ld	r20, X+
     e2e:	5c 91       	ld	r21, X
     e30:	13 97       	sbiw	r26, 0x03	; 3
     e32:	84 0f       	add	r24, r20
     e34:	95 1f       	adc	r25, r21
     e36:	93 83       	std	Z+3, r25	; 0x03
     e38:	82 83       	std	Z+2, r24	; 0x02
     e3a:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     e3c:	12 96       	adiw	r26, 0x02	; 2
     e3e:	8d 91       	ld	r24, X+
     e40:	9c 91       	ld	r25, X
     e42:	13 97       	sbiw	r26, 0x03	; 3
     e44:	ed 01       	movw	r28, r26
     e46:	c8 0f       	add	r28, r24
     e48:	d9 1f       	adc	r29, r25
     e4a:	2c 17       	cp	r18, r28
     e4c:	3d 07       	cpc	r19, r29
     e4e:	d9 f4       	brne	.+54     	; 0xe86 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     e50:	20 91 0e 08 	lds	r18, 0x080E	; 0x80080e <pxEnd>
     e54:	30 91 0f 08 	lds	r19, 0x080F	; 0x80080f <pxEnd+0x1>
     e58:	c2 17       	cp	r28, r18
     e5a:	d3 07       	cpc	r29, r19
     e5c:	81 f0       	breq	.+32     	; 0xe7e <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     e5e:	2a 81       	ldd	r18, Y+2	; 0x02
     e60:	3b 81       	ldd	r19, Y+3	; 0x03
     e62:	82 0f       	add	r24, r18
     e64:	93 1f       	adc	r25, r19
     e66:	13 96       	adiw	r26, 0x03	; 3
     e68:	9c 93       	st	X, r25
     e6a:	8e 93       	st	-X, r24
     e6c:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     e6e:	c0 81       	ld	r28, Z
     e70:	d1 81       	ldd	r29, Z+1	; 0x01
     e72:	88 81       	ld	r24, Y
     e74:	99 81       	ldd	r25, Y+1	; 0x01
     e76:	11 96       	adiw	r26, 0x01	; 1
     e78:	9c 93       	st	X, r25
     e7a:	8e 93       	st	-X, r24
     e7c:	07 c0       	rjmp	.+14     	; 0xe8c <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     e7e:	11 96       	adiw	r26, 0x01	; 1
     e80:	dc 93       	st	X, r29
     e82:	ce 93       	st	-X, r28
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     e86:	11 96       	adiw	r26, 0x01	; 1
     e88:	3c 93       	st	X, r19
     e8a:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     e8c:	ae 17       	cp	r26, r30
     e8e:	bf 07       	cpc	r27, r31
     e90:	11 f0       	breq	.+4      	; 0xe96 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     e92:	b1 83       	std	Z+1, r27	; 0x01
     e94:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	08 95       	ret

00000e9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     e9c:	cf 92       	push	r12
     e9e:	df 92       	push	r13
     ea0:	ef 92       	push	r14
     ea2:	ff 92       	push	r15
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
     eae:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     eb2:	80 91 0e 08 	lds	r24, 0x080E	; 0x80080e <pxEnd>
     eb6:	90 91 0f 08 	lds	r25, 0x080F	; 0x80080f <pxEnd+0x1>
     eba:	89 2b       	or	r24, r25
     ebc:	41 f5       	brne	.+80     	; 0xf0e <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     ebe:	e0 e1       	ldi	r30, 0x10	; 16
     ec0:	f8 e0       	ldi	r31, 0x08	; 8
     ec2:	a4 e1       	ldi	r26, 0x14	; 20
     ec4:	b8 e0       	ldi	r27, 0x08	; 8
     ec6:	b1 83       	std	Z+1, r27	; 0x01
     ec8:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
     eca:	13 82       	std	Z+3, r1	; 0x03
     ecc:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     ece:	e0 eb       	ldi	r30, 0xB0	; 176
     ed0:	f7 e1       	ldi	r31, 0x17	; 23
     ed2:	f0 93 0f 08 	sts	0x080F, r31	; 0x80080f <pxEnd+0x1>
     ed6:	e0 93 0e 08 	sts	0x080E, r30	; 0x80080e <pxEnd>
	pxEnd->xBlockSize = 0;
     eda:	13 82       	std	Z+3, r1	; 0x03
     edc:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     ede:	11 82       	std	Z+1, r1	; 0x01
     ee0:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     ee2:	8c e9       	ldi	r24, 0x9C	; 156
     ee4:	9f e0       	ldi	r25, 0x0F	; 15
     ee6:	13 96       	adiw	r26, 0x03	; 3
     ee8:	9c 93       	st	X, r25
     eea:	8e 93       	st	-X, r24
     eec:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     eee:	ed 93       	st	X+, r30
     ef0:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     ef2:	90 93 0b 08 	sts	0x080B, r25	; 0x80080b <xMinimumEverFreeBytesRemaining+0x1>
     ef6:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     efa:	90 93 0d 08 	sts	0x080D, r25	; 0x80080d <xFreeBytesRemaining+0x1>
     efe:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e8       	ldi	r25, 0x80	; 128
     f06:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <xBlockAllocatedBit+0x1>
     f0a:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     f0e:	e0 90 08 08 	lds	r14, 0x0808	; 0x800808 <xBlockAllocatedBit>
     f12:	f0 90 09 08 	lds	r15, 0x0809	; 0x800809 <xBlockAllocatedBit+0x1>
     f16:	c7 01       	movw	r24, r14
     f18:	8c 23       	and	r24, r28
     f1a:	9d 23       	and	r25, r29
     f1c:	89 2b       	or	r24, r25
     f1e:	09 f0       	breq	.+2      	; 0xf22 <pvPortMalloc+0x86>
     f20:	66 c0       	rjmp	.+204    	; 0xfee <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     f22:	20 97       	sbiw	r28, 0x00	; 0
     f24:	09 f4       	brne	.+2      	; 0xf28 <pvPortMalloc+0x8c>
     f26:	66 c0       	rjmp	.+204    	; 0xff4 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
     f28:	ae 01       	movw	r20, r28
     f2a:	4c 5f       	subi	r20, 0xFC	; 252
     f2c:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     f2e:	09 f4       	brne	.+2      	; 0xf32 <pvPortMalloc+0x96>
     f30:	5e c0       	rjmp	.+188    	; 0xfee <pvPortMalloc+0x152>
     f32:	00 91 0c 08 	lds	r16, 0x080C	; 0x80080c <xFreeBytesRemaining>
     f36:	10 91 0d 08 	lds	r17, 0x080D	; 0x80080d <xFreeBytesRemaining+0x1>
     f3a:	04 17       	cp	r16, r20
     f3c:	15 07       	cpc	r17, r21
     f3e:	08 f4       	brcc	.+2      	; 0xf42 <pvPortMalloc+0xa6>
     f40:	56 c0       	rjmp	.+172    	; 0xfee <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
     f42:	c0 91 10 08 	lds	r28, 0x0810	; 0x800810 <xStart>
     f46:	d0 91 11 08 	lds	r29, 0x0811	; 0x800811 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     f4a:	e0 e1       	ldi	r30, 0x10	; 16
     f4c:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <pvPortMalloc+0xb8>
     f50:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
     f52:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     f54:	2a 81       	ldd	r18, Y+2	; 0x02
     f56:	3b 81       	ldd	r19, Y+3	; 0x03
     f58:	24 17       	cp	r18, r20
     f5a:	35 07       	cpc	r19, r21
     f5c:	28 f4       	brcc	.+10     	; 0xf68 <pvPortMalloc+0xcc>
     f5e:	28 81       	ld	r18, Y
     f60:	39 81       	ldd	r19, Y+1	; 0x01
     f62:	21 15       	cp	r18, r1
     f64:	31 05       	cpc	r19, r1
     f66:	a1 f7       	brne	.-24     	; 0xf50 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     f68:	80 91 0e 08 	lds	r24, 0x080E	; 0x80080e <pxEnd>
     f6c:	90 91 0f 08 	lds	r25, 0x080F	; 0x80080f <pxEnd+0x1>
     f70:	c8 17       	cp	r28, r24
     f72:	d9 07       	cpc	r29, r25
     f74:	e1 f1       	breq	.+120    	; 0xfee <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     f76:	c0 80       	ld	r12, Z
     f78:	d1 80       	ldd	r13, Z+1	; 0x01
     f7a:	84 e0       	ldi	r24, 0x04	; 4
     f7c:	c8 0e       	add	r12, r24
     f7e:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     f80:	88 81       	ld	r24, Y
     f82:	99 81       	ldd	r25, Y+1	; 0x01
     f84:	91 83       	std	Z+1, r25	; 0x01
     f86:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     f88:	2a 81       	ldd	r18, Y+2	; 0x02
     f8a:	3b 81       	ldd	r19, Y+3	; 0x03
     f8c:	24 1b       	sub	r18, r20
     f8e:	35 0b       	sbc	r19, r21
     f90:	29 30       	cpi	r18, 0x09	; 9
     f92:	31 05       	cpc	r19, r1
     f94:	48 f0       	brcs	.+18     	; 0xfa8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     f96:	ce 01       	movw	r24, r28
     f98:	84 0f       	add	r24, r20
     f9a:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     f9c:	fc 01       	movw	r30, r24
     f9e:	33 83       	std	Z+3, r19	; 0x03
     fa0:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
     fa2:	5b 83       	std	Y+3, r21	; 0x03
     fa4:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     fa6:	2d df       	rcall	.-422    	; 0xe02 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	9b 81       	ldd	r25, Y+3	; 0x03
     fac:	08 1b       	sub	r16, r24
     fae:	19 0b       	sbc	r17, r25
     fb0:	10 93 0d 08 	sts	0x080D, r17	; 0x80080d <xFreeBytesRemaining+0x1>
     fb4:	00 93 0c 08 	sts	0x080C, r16	; 0x80080c <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     fb8:	20 91 0a 08 	lds	r18, 0x080A	; 0x80080a <xMinimumEverFreeBytesRemaining>
     fbc:	30 91 0b 08 	lds	r19, 0x080B	; 0x80080b <xMinimumEverFreeBytesRemaining+0x1>
     fc0:	02 17       	cp	r16, r18
     fc2:	13 07       	cpc	r17, r19
     fc4:	20 f4       	brcc	.+8      	; 0xfce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     fc6:	10 93 0b 08 	sts	0x080B, r17	; 0x80080b <xMinimumEverFreeBytesRemaining+0x1>
     fca:	00 93 0a 08 	sts	0x080A, r16	; 0x80080a <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     fce:	e8 2a       	or	r14, r24
     fd0:	f9 2a       	or	r15, r25
     fd2:	fb 82       	std	Y+3, r15	; 0x03
     fd4:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
     fd6:	19 82       	std	Y+1, r1	; 0x01
     fd8:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     fda:	0e 94 c9 13 	call	0x2792	; 0x2792 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     fde:	c1 14       	cp	r12, r1
     fe0:	d1 04       	cpc	r13, r1
     fe2:	59 f4       	brne	.+22     	; 0xffa <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     fe4:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <vApplicationMallocFailedHook>
     fe8:	c1 2c       	mov	r12, r1
     fea:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
     fec:	06 c0       	rjmp	.+12     	; 0xffa <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     fee:	0e 94 c9 13 	call	0x2792	; 0x2792 <xTaskResumeAll>
     ff2:	f8 cf       	rjmp	.-16     	; 0xfe4 <pvPortMalloc+0x148>
     ff4:	0e 94 c9 13 	call	0x2792	; 0x2792 <xTaskResumeAll>
     ff8:	f5 cf       	rjmp	.-22     	; 0xfe4 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
     ffa:	c6 01       	movw	r24, r12
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	ff 90       	pop	r15
    1006:	ef 90       	pop	r14
    1008:	df 90       	pop	r13
    100a:	cf 90       	pop	r12
    100c:	08 95       	ret

0000100e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	51 f1       	breq	.+84     	; 0x106a <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    1016:	fc 01       	movw	r30, r24
    1018:	34 97       	sbiw	r30, 0x04	; 4
    101a:	22 81       	ldd	r18, Z+2	; 0x02
    101c:	33 81       	ldd	r19, Z+3	; 0x03
    101e:	40 91 08 08 	lds	r20, 0x0808	; 0x800808 <xBlockAllocatedBit>
    1022:	50 91 09 08 	lds	r21, 0x0809	; 0x800809 <xBlockAllocatedBit+0x1>
    1026:	b9 01       	movw	r22, r18
    1028:	64 23       	and	r22, r20
    102a:	75 23       	and	r23, r21
    102c:	67 2b       	or	r22, r23
    102e:	e9 f0       	breq	.+58     	; 0x106a <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    1030:	60 81       	ld	r22, Z
    1032:	71 81       	ldd	r23, Z+1	; 0x01
    1034:	67 2b       	or	r22, r23
    1036:	c9 f4       	brne	.+50     	; 0x106a <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1038:	ef 01       	movw	r28, r30
    103a:	40 95       	com	r20
    103c:	50 95       	com	r21
    103e:	24 23       	and	r18, r20
    1040:	35 23       	and	r19, r21
    1042:	33 83       	std	Z+3, r19	; 0x03
    1044:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    1046:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    104a:	20 91 0c 08 	lds	r18, 0x080C	; 0x80080c <xFreeBytesRemaining>
    104e:	30 91 0d 08 	lds	r19, 0x080D	; 0x80080d <xFreeBytesRemaining+0x1>
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	9b 81       	ldd	r25, Y+3	; 0x03
    1056:	82 0f       	add	r24, r18
    1058:	93 1f       	adc	r25, r19
    105a:	90 93 0d 08 	sts	0x080D, r25	; 0x80080d <xFreeBytesRemaining+0x1>
    105e:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1062:	ce 01       	movw	r24, r28
    1064:	ce de       	rcall	.-612    	; 0xe02 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    1066:	0e 94 c9 13 	call	0x2792	; 0x2792 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1070:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1072:	03 96       	adiw	r24, 0x03	; 3
    1074:	92 83       	std	Z+2, r25	; 0x02
    1076:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1078:	4f ef       	ldi	r20, 0xFF	; 255
    107a:	5f ef       	ldi	r21, 0xFF	; 255
    107c:	ba 01       	movw	r22, r20
    107e:	43 83       	std	Z+3, r20	; 0x03
    1080:	54 83       	std	Z+4, r21	; 0x04
    1082:	65 83       	std	Z+5, r22	; 0x05
    1084:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1086:	90 87       	std	Z+8, r25	; 0x08
    1088:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    108a:	92 87       	std	Z+10, r25	; 0x0a
    108c:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    108e:	10 82       	st	Z, r1
    1090:	08 95       	ret

00001092 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1092:	fc 01       	movw	r30, r24
    1094:	13 86       	std	Z+11, r1	; 0x0b
    1096:	12 86       	std	Z+10, r1	; 0x0a
    1098:	08 95       	ret

0000109a <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	9c 01       	movw	r18, r24
    10a0:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    10a2:	dc 01       	movw	r26, r24
    10a4:	11 96       	adiw	r26, 0x01	; 1
    10a6:	cd 91       	ld	r28, X+
    10a8:	dc 91       	ld	r29, X
    10aa:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    10ac:	d5 83       	std	Z+5, r29	; 0x05
    10ae:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    10b0:	8e 81       	ldd	r24, Y+6	; 0x06
    10b2:	9f 81       	ldd	r25, Y+7	; 0x07
    10b4:	97 83       	std	Z+7, r25	; 0x07
    10b6:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    10b8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ba:	9f 81       	ldd	r25, Y+7	; 0x07
    10bc:	dc 01       	movw	r26, r24
    10be:	15 96       	adiw	r26, 0x05	; 5
    10c0:	7c 93       	st	X, r23
    10c2:	6e 93       	st	-X, r22
    10c4:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    10c6:	7f 83       	std	Y+7, r23	; 0x07
    10c8:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    10ca:	33 87       	std	Z+11, r19	; 0x0b
    10cc:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    10ce:	f9 01       	movw	r30, r18
    10d0:	80 81       	ld	r24, Z
    10d2:	8f 5f       	subi	r24, 0xFF	; 255
    10d4:	80 83       	st	Z, r24
}
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	08 95       	ret

000010dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    10dc:	0f 93       	push	r16
    10de:	1f 93       	push	r17
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    10e6:	08 81       	ld	r16, Y
    10e8:	19 81       	ldd	r17, Y+1	; 0x01
    10ea:	2a 81       	ldd	r18, Y+2	; 0x02
    10ec:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    10ee:	0f 3f       	cpi	r16, 0xFF	; 255
    10f0:	4f ef       	ldi	r20, 0xFF	; 255
    10f2:	14 07       	cpc	r17, r20
    10f4:	24 07       	cpc	r18, r20
    10f6:	34 07       	cpc	r19, r20
    10f8:	21 f4       	brne	.+8      	; 0x1102 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    10fa:	fc 01       	movw	r30, r24
    10fc:	a1 85       	ldd	r26, Z+9	; 0x09
    10fe:	b2 85       	ldd	r27, Z+10	; 0x0a
    1100:	11 c0       	rjmp	.+34     	; 0x1124 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1102:	dc 01       	movw	r26, r24
    1104:	13 96       	adiw	r26, 0x03	; 3
    1106:	01 c0       	rjmp	.+2      	; 0x110a <vListInsert+0x2e>
    1108:	df 01       	movw	r26, r30
    110a:	14 96       	adiw	r26, 0x04	; 4
    110c:	ed 91       	ld	r30, X+
    110e:	fc 91       	ld	r31, X
    1110:	15 97       	sbiw	r26, 0x05	; 5
    1112:	40 81       	ld	r20, Z
    1114:	51 81       	ldd	r21, Z+1	; 0x01
    1116:	62 81       	ldd	r22, Z+2	; 0x02
    1118:	73 81       	ldd	r23, Z+3	; 0x03
    111a:	04 17       	cp	r16, r20
    111c:	15 07       	cpc	r17, r21
    111e:	26 07       	cpc	r18, r22
    1120:	37 07       	cpc	r19, r23
    1122:	90 f7       	brcc	.-28     	; 0x1108 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1124:	14 96       	adiw	r26, 0x04	; 4
    1126:	ed 91       	ld	r30, X+
    1128:	fc 91       	ld	r31, X
    112a:	15 97       	sbiw	r26, 0x05	; 5
    112c:	fd 83       	std	Y+5, r31	; 0x05
    112e:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1130:	d7 83       	std	Z+7, r29	; 0x07
    1132:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    1134:	bf 83       	std	Y+7, r27	; 0x07
    1136:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    1138:	15 96       	adiw	r26, 0x05	; 5
    113a:	dc 93       	st	X, r29
    113c:	ce 93       	st	-X, r28
    113e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    1140:	9b 87       	std	Y+11, r25	; 0x0b
    1142:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1144:	fc 01       	movw	r30, r24
    1146:	20 81       	ld	r18, Z
    1148:	2f 5f       	subi	r18, 0xFF	; 255
    114a:	20 83       	st	Z, r18
}
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	08 95       	ret

00001156 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    115c:	a2 85       	ldd	r26, Z+10	; 0x0a
    115e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1160:	c4 81       	ldd	r28, Z+4	; 0x04
    1162:	d5 81       	ldd	r29, Z+5	; 0x05
    1164:	86 81       	ldd	r24, Z+6	; 0x06
    1166:	97 81       	ldd	r25, Z+7	; 0x07
    1168:	9f 83       	std	Y+7, r25	; 0x07
    116a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    116c:	c6 81       	ldd	r28, Z+6	; 0x06
    116e:	d7 81       	ldd	r29, Z+7	; 0x07
    1170:	84 81       	ldd	r24, Z+4	; 0x04
    1172:	95 81       	ldd	r25, Z+5	; 0x05
    1174:	9d 83       	std	Y+5, r25	; 0x05
    1176:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1178:	11 96       	adiw	r26, 0x01	; 1
    117a:	8d 91       	ld	r24, X+
    117c:	9c 91       	ld	r25, X
    117e:	12 97       	sbiw	r26, 0x02	; 2
    1180:	e8 17       	cp	r30, r24
    1182:	f9 07       	cpc	r31, r25
    1184:	31 f4       	brne	.+12     	; 0x1192 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1186:	86 81       	ldd	r24, Z+6	; 0x06
    1188:	97 81       	ldd	r25, Z+7	; 0x07
    118a:	12 96       	adiw	r26, 0x02	; 2
    118c:	9c 93       	st	X, r25
    118e:	8e 93       	st	-X, r24
    1190:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1192:	13 86       	std	Z+11, r1	; 0x0b
    1194:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1196:	8c 91       	ld	r24, X
    1198:	81 50       	subi	r24, 0x01	; 1
    119a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    119c:	8c 91       	ld	r24, X
}
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	08 95       	ret

000011a4 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    11a4:	31 e1       	ldi	r19, 0x11	; 17
    11a6:	fc 01       	movw	r30, r24
    11a8:	30 83       	st	Z, r19
    11aa:	31 97       	sbiw	r30, 0x01	; 1
    11ac:	22 e2       	ldi	r18, 0x22	; 34
    11ae:	20 83       	st	Z, r18
    11b0:	31 97       	sbiw	r30, 0x01	; 1
    11b2:	a3 e3       	ldi	r26, 0x33	; 51
    11b4:	a0 83       	st	Z, r26
    11b6:	31 97       	sbiw	r30, 0x01	; 1
    11b8:	60 83       	st	Z, r22
    11ba:	31 97       	sbiw	r30, 0x01	; 1
    11bc:	70 83       	st	Z, r23
    11be:	31 97       	sbiw	r30, 0x01	; 1
    11c0:	10 82       	st	Z, r1
    11c2:	31 97       	sbiw	r30, 0x01	; 1
    11c4:	10 82       	st	Z, r1
    11c6:	31 97       	sbiw	r30, 0x01	; 1
    11c8:	60 e8       	ldi	r22, 0x80	; 128
    11ca:	60 83       	st	Z, r22
    11cc:	31 97       	sbiw	r30, 0x01	; 1
    11ce:	10 82       	st	Z, r1
    11d0:	31 97       	sbiw	r30, 0x01	; 1
    11d2:	10 82       	st	Z, r1
    11d4:	31 97       	sbiw	r30, 0x01	; 1
    11d6:	10 82       	st	Z, r1
    11d8:	31 97       	sbiw	r30, 0x01	; 1
    11da:	62 e0       	ldi	r22, 0x02	; 2
    11dc:	60 83       	st	Z, r22
    11de:	31 97       	sbiw	r30, 0x01	; 1
    11e0:	63 e0       	ldi	r22, 0x03	; 3
    11e2:	60 83       	st	Z, r22
    11e4:	31 97       	sbiw	r30, 0x01	; 1
    11e6:	64 e0       	ldi	r22, 0x04	; 4
    11e8:	60 83       	st	Z, r22
    11ea:	31 97       	sbiw	r30, 0x01	; 1
    11ec:	65 e0       	ldi	r22, 0x05	; 5
    11ee:	60 83       	st	Z, r22
    11f0:	31 97       	sbiw	r30, 0x01	; 1
    11f2:	66 e0       	ldi	r22, 0x06	; 6
    11f4:	60 83       	st	Z, r22
    11f6:	31 97       	sbiw	r30, 0x01	; 1
    11f8:	67 e0       	ldi	r22, 0x07	; 7
    11fa:	60 83       	st	Z, r22
    11fc:	31 97       	sbiw	r30, 0x01	; 1
    11fe:	68 e0       	ldi	r22, 0x08	; 8
    1200:	60 83       	st	Z, r22
    1202:	31 97       	sbiw	r30, 0x01	; 1
    1204:	69 e0       	ldi	r22, 0x09	; 9
    1206:	60 83       	st	Z, r22
    1208:	31 97       	sbiw	r30, 0x01	; 1
    120a:	60 e1       	ldi	r22, 0x10	; 16
    120c:	60 83       	st	Z, r22
    120e:	31 97       	sbiw	r30, 0x01	; 1
    1210:	30 83       	st	Z, r19
    1212:	31 97       	sbiw	r30, 0x01	; 1
    1214:	32 e1       	ldi	r19, 0x12	; 18
    1216:	30 83       	st	Z, r19
    1218:	31 97       	sbiw	r30, 0x01	; 1
    121a:	33 e1       	ldi	r19, 0x13	; 19
    121c:	30 83       	st	Z, r19
    121e:	31 97       	sbiw	r30, 0x01	; 1
    1220:	34 e1       	ldi	r19, 0x14	; 20
    1222:	30 83       	st	Z, r19
    1224:	31 97       	sbiw	r30, 0x01	; 1
    1226:	35 e1       	ldi	r19, 0x15	; 21
    1228:	30 83       	st	Z, r19
    122a:	31 97       	sbiw	r30, 0x01	; 1
    122c:	36 e1       	ldi	r19, 0x16	; 22
    122e:	30 83       	st	Z, r19
    1230:	31 97       	sbiw	r30, 0x01	; 1
    1232:	37 e1       	ldi	r19, 0x17	; 23
    1234:	30 83       	st	Z, r19
    1236:	31 97       	sbiw	r30, 0x01	; 1
    1238:	38 e1       	ldi	r19, 0x18	; 24
    123a:	30 83       	st	Z, r19
    123c:	31 97       	sbiw	r30, 0x01	; 1
    123e:	39 e1       	ldi	r19, 0x19	; 25
    1240:	30 83       	st	Z, r19
    1242:	31 97       	sbiw	r30, 0x01	; 1
    1244:	30 e2       	ldi	r19, 0x20	; 32
    1246:	30 83       	st	Z, r19
    1248:	31 97       	sbiw	r30, 0x01	; 1
    124a:	31 e2       	ldi	r19, 0x21	; 33
    124c:	30 83       	st	Z, r19
    124e:	31 97       	sbiw	r30, 0x01	; 1
    1250:	20 83       	st	Z, r18
    1252:	31 97       	sbiw	r30, 0x01	; 1
    1254:	23 e2       	ldi	r18, 0x23	; 35
    1256:	20 83       	st	Z, r18
    1258:	31 97       	sbiw	r30, 0x01	; 1
    125a:	40 83       	st	Z, r20
    125c:	31 97       	sbiw	r30, 0x01	; 1
    125e:	50 83       	st	Z, r21
    1260:	31 97       	sbiw	r30, 0x01	; 1
    1262:	26 e2       	ldi	r18, 0x26	; 38
    1264:	20 83       	st	Z, r18
    1266:	31 97       	sbiw	r30, 0x01	; 1
    1268:	27 e2       	ldi	r18, 0x27	; 39
    126a:	20 83       	st	Z, r18
    126c:	31 97       	sbiw	r30, 0x01	; 1
    126e:	28 e2       	ldi	r18, 0x28	; 40
    1270:	20 83       	st	Z, r18
    1272:	31 97       	sbiw	r30, 0x01	; 1
    1274:	29 e2       	ldi	r18, 0x29	; 41
    1276:	20 83       	st	Z, r18
    1278:	31 97       	sbiw	r30, 0x01	; 1
    127a:	20 e3       	ldi	r18, 0x30	; 48
    127c:	20 83       	st	Z, r18
    127e:	31 97       	sbiw	r30, 0x01	; 1
    1280:	21 e3       	ldi	r18, 0x31	; 49
    1282:	20 83       	st	Z, r18
    1284:	89 97       	sbiw	r24, 0x29	; 41
    1286:	08 95       	ret

00001288 <xPortStartScheduler>:
    1288:	a8 95       	wdr
    128a:	90 ec       	ldi	r25, 0xC0	; 192
    128c:	88 e1       	ldi	r24, 0x18	; 24
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	a8 95       	wdr
    1294:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    129e:	a0 91 2e 18 	lds	r26, 0x182E	; 0x80182e <pxCurrentTCB>
    12a2:	b0 91 2f 18 	lds	r27, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    12a6:	cd 91       	ld	r28, X+
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	dd 91       	ld	r29, X+
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	ff 91       	pop	r31
    12b0:	ef 91       	pop	r30
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	bf 91       	pop	r27
    12b8:	af 91       	pop	r26
    12ba:	9f 91       	pop	r25
    12bc:	8f 91       	pop	r24
    12be:	7f 91       	pop	r23
    12c0:	6f 91       	pop	r22
    12c2:	5f 91       	pop	r21
    12c4:	4f 91       	pop	r20
    12c6:	3f 91       	pop	r19
    12c8:	2f 91       	pop	r18
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	ef 90       	pop	r14
    12d2:	df 90       	pop	r13
    12d4:	cf 90       	pop	r12
    12d6:	bf 90       	pop	r11
    12d8:	af 90       	pop	r10
    12da:	9f 90       	pop	r9
    12dc:	8f 90       	pop	r8
    12de:	7f 90       	pop	r7
    12e0:	6f 90       	pop	r6
    12e2:	5f 90       	pop	r5
    12e4:	4f 90       	pop	r4
    12e6:	3f 90       	pop	r3
    12e8:	2f 90       	pop	r2
    12ea:	1f 90       	pop	r1
    12ec:	0f 90       	pop	r0
    12ee:	0c be       	out	0x3c, r0	; 60
    12f0:	0f 90       	pop	r0
    12f2:	0b be       	out	0x3b, r0	; 59
    12f4:	0f 90       	pop	r0
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	0f 90       	pop	r0
    12fa:	08 95       	ret
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	08 95       	ret

00001300 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1300:	0f 92       	push	r0
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	0f 92       	push	r0
    1308:	0b b6       	in	r0, 0x3b	; 59
    130a:	0f 92       	push	r0
    130c:	0c b6       	in	r0, 0x3c	; 60
    130e:	0f 92       	push	r0
    1310:	1f 92       	push	r1
    1312:	11 24       	eor	r1, r1
    1314:	2f 92       	push	r2
    1316:	3f 92       	push	r3
    1318:	4f 92       	push	r4
    131a:	5f 92       	push	r5
    131c:	6f 92       	push	r6
    131e:	7f 92       	push	r7
    1320:	8f 92       	push	r8
    1322:	9f 92       	push	r9
    1324:	af 92       	push	r10
    1326:	bf 92       	push	r11
    1328:	cf 92       	push	r12
    132a:	df 92       	push	r13
    132c:	ef 92       	push	r14
    132e:	ff 92       	push	r15
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	2f 93       	push	r18
    1336:	3f 93       	push	r19
    1338:	4f 93       	push	r20
    133a:	5f 93       	push	r21
    133c:	6f 93       	push	r22
    133e:	7f 93       	push	r23
    1340:	8f 93       	push	r24
    1342:	9f 93       	push	r25
    1344:	af 93       	push	r26
    1346:	bf 93       	push	r27
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	ef 93       	push	r30
    134e:	ff 93       	push	r31
    1350:	a0 91 2e 18 	lds	r26, 0x182E	; 0x80182e <pxCurrentTCB>
    1354:	b0 91 2f 18 	lds	r27, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    1358:	0d b6       	in	r0, 0x3d	; 61
    135a:	0d 92       	st	X+, r0
    135c:	0e b6       	in	r0, 0x3e	; 62
    135e:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1360:	0e 94 bc 14 	call	0x2978	; 0x2978 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1364:	a0 91 2e 18 	lds	r26, 0x182E	; 0x80182e <pxCurrentTCB>
    1368:	b0 91 2f 18 	lds	r27, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    136c:	cd 91       	ld	r28, X+
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	dd 91       	ld	r29, X+
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	ff 91       	pop	r31
    1376:	ef 91       	pop	r30
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	bf 91       	pop	r27
    137e:	af 91       	pop	r26
    1380:	9f 91       	pop	r25
    1382:	8f 91       	pop	r24
    1384:	7f 91       	pop	r23
    1386:	6f 91       	pop	r22
    1388:	5f 91       	pop	r21
    138a:	4f 91       	pop	r20
    138c:	3f 91       	pop	r19
    138e:	2f 91       	pop	r18
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    1394:	ff 90       	pop	r15
    1396:	ef 90       	pop	r14
    1398:	df 90       	pop	r13
    139a:	cf 90       	pop	r12
    139c:	bf 90       	pop	r11
    139e:	af 90       	pop	r10
    13a0:	9f 90       	pop	r9
    13a2:	8f 90       	pop	r8
    13a4:	7f 90       	pop	r7
    13a6:	6f 90       	pop	r6
    13a8:	5f 90       	pop	r5
    13aa:	4f 90       	pop	r4
    13ac:	3f 90       	pop	r3
    13ae:	2f 90       	pop	r2
    13b0:	1f 90       	pop	r1
    13b2:	0f 90       	pop	r0
    13b4:	0c be       	out	0x3c, r0	; 60
    13b6:	0f 90       	pop	r0
    13b8:	0b be       	out	0x3b, r0	; 59
    13ba:	0f 90       	pop	r0
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    13c0:	08 95       	ret

000013c2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    13c2:	0f 92       	push	r0
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	0f 92       	push	r0
    13ca:	0b b6       	in	r0, 0x3b	; 59
    13cc:	0f 92       	push	r0
    13ce:	0c b6       	in	r0, 0x3c	; 60
    13d0:	0f 92       	push	r0
    13d2:	1f 92       	push	r1
    13d4:	11 24       	eor	r1, r1
    13d6:	2f 92       	push	r2
    13d8:	3f 92       	push	r3
    13da:	4f 92       	push	r4
    13dc:	5f 92       	push	r5
    13de:	6f 92       	push	r6
    13e0:	7f 92       	push	r7
    13e2:	8f 92       	push	r8
    13e4:	9f 92       	push	r9
    13e6:	af 92       	push	r10
    13e8:	bf 92       	push	r11
    13ea:	cf 92       	push	r12
    13ec:	df 92       	push	r13
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	2f 93       	push	r18
    13f8:	3f 93       	push	r19
    13fa:	4f 93       	push	r20
    13fc:	5f 93       	push	r21
    13fe:	6f 93       	push	r22
    1400:	7f 93       	push	r23
    1402:	8f 93       	push	r24
    1404:	9f 93       	push	r25
    1406:	af 93       	push	r26
    1408:	bf 93       	push	r27
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	ef 93       	push	r30
    1410:	ff 93       	push	r31
    1412:	a0 91 2e 18 	lds	r26, 0x182E	; 0x80182e <pxCurrentTCB>
    1416:	b0 91 2f 18 	lds	r27, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    141a:	0d b6       	in	r0, 0x3d	; 61
    141c:	0d 92       	st	X+, r0
    141e:	0e b6       	in	r0, 0x3e	; 62
    1420:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1422:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    1424:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <xTaskIncrementTick>
    1428:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    142a:	0e 94 bc 14 	call	0x2978	; 0x2978 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    142e:	a0 91 2e 18 	lds	r26, 0x182E	; 0x80182e <pxCurrentTCB>
    1432:	b0 91 2f 18 	lds	r27, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    1436:	cd 91       	ld	r28, X+
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	dd 91       	ld	r29, X+
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	ff 91       	pop	r31
    1440:	ef 91       	pop	r30
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	bf 91       	pop	r27
    1448:	af 91       	pop	r26
    144a:	9f 91       	pop	r25
    144c:	8f 91       	pop	r24
    144e:	7f 91       	pop	r23
    1450:	6f 91       	pop	r22
    1452:	5f 91       	pop	r21
    1454:	4f 91       	pop	r20
    1456:	3f 91       	pop	r19
    1458:	2f 91       	pop	r18
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	df 90       	pop	r13
    1464:	cf 90       	pop	r12
    1466:	bf 90       	pop	r11
    1468:	af 90       	pop	r10
    146a:	9f 90       	pop	r9
    146c:	8f 90       	pop	r8
    146e:	7f 90       	pop	r7
    1470:	6f 90       	pop	r6
    1472:	5f 90       	pop	r5
    1474:	4f 90       	pop	r4
    1476:	3f 90       	pop	r3
    1478:	2f 90       	pop	r2
    147a:	1f 90       	pop	r1
    147c:	0f 90       	pop	r0
    147e:	0c be       	out	0x3c, r0	; 60
    1480:	0f 90       	pop	r0
    1482:	0b be       	out	0x3b, r0	; 59
    1484:	0f 90       	pop	r0
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    148a:	08 95       	ret

0000148c <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    148c:	9a df       	rcall	.-204    	; 0x13c2 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    148e:	18 95       	reti

00001490 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	0f 92       	push	r0
    1496:	fc 01       	movw	r30, r24
    1498:	96 8d       	ldd	r25, Z+30	; 0x1e
    149a:	0f 90       	pop	r0
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	91 11       	cpse	r25, r1
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	08 95       	ret

000014a6 <prvCopyDataToQueue>:
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	ec 01       	movw	r28, r24
    14b0:	04 2f       	mov	r16, r20
    14b2:	1e 8d       	ldd	r17, Y+30	; 0x1e
    14b4:	48 a1       	ldd	r20, Y+32	; 0x20
    14b6:	41 11       	cpse	r20, r1
    14b8:	0c c0       	rjmp	.+24     	; 0x14d2 <prvCopyDataToQueue+0x2c>
    14ba:	88 81       	ld	r24, Y
    14bc:	99 81       	ldd	r25, Y+1	; 0x01
    14be:	89 2b       	or	r24, r25
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <prvCopyDataToQueue+0x1e>
    14c2:	42 c0       	rjmp	.+132    	; 0x1548 <prvCopyDataToQueue+0xa2>
    14c4:	8c 81       	ldd	r24, Y+4	; 0x04
    14c6:	9d 81       	ldd	r25, Y+5	; 0x05
    14c8:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <xTaskPriorityDisinherit>
    14cc:	1d 82       	std	Y+5, r1	; 0x05
    14ce:	1c 82       	std	Y+4, r1	; 0x04
    14d0:	42 c0       	rjmp	.+132    	; 0x1556 <prvCopyDataToQueue+0xb0>
    14d2:	01 11       	cpse	r16, r1
    14d4:	17 c0       	rjmp	.+46     	; 0x1504 <prvCopyDataToQueue+0x5e>
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	9b 81       	ldd	r25, Y+3	; 0x03
    14dc:	0e 94 bb 2c 	call	0x5976	; 0x5976 <memcpy>
    14e0:	28 a1       	ldd	r18, Y+32	; 0x20
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	9b 81       	ldd	r25, Y+3	; 0x03
    14e6:	82 0f       	add	r24, r18
    14e8:	91 1d       	adc	r25, r1
    14ea:	9b 83       	std	Y+3, r25	; 0x03
    14ec:	8a 83       	std	Y+2, r24	; 0x02
    14ee:	2c 81       	ldd	r18, Y+4	; 0x04
    14f0:	3d 81       	ldd	r19, Y+5	; 0x05
    14f2:	82 17       	cp	r24, r18
    14f4:	93 07       	cpc	r25, r19
    14f6:	50 f1       	brcs	.+84     	; 0x154c <prvCopyDataToQueue+0xa6>
    14f8:	88 81       	ld	r24, Y
    14fa:	99 81       	ldd	r25, Y+1	; 0x01
    14fc:	9b 83       	std	Y+3, r25	; 0x03
    14fe:	8a 83       	std	Y+2, r24	; 0x02
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	29 c0       	rjmp	.+82     	; 0x1556 <prvCopyDataToQueue+0xb0>
    1504:	50 e0       	ldi	r21, 0x00	; 0
    1506:	8e 81       	ldd	r24, Y+6	; 0x06
    1508:	9f 81       	ldd	r25, Y+7	; 0x07
    150a:	0e 94 bb 2c 	call	0x5976	; 0x5976 <memcpy>
    150e:	88 a1       	ldd	r24, Y+32	; 0x20
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	91 95       	neg	r25
    1514:	81 95       	neg	r24
    1516:	91 09       	sbc	r25, r1
    1518:	2e 81       	ldd	r18, Y+6	; 0x06
    151a:	3f 81       	ldd	r19, Y+7	; 0x07
    151c:	28 0f       	add	r18, r24
    151e:	39 1f       	adc	r19, r25
    1520:	3f 83       	std	Y+7, r19	; 0x07
    1522:	2e 83       	std	Y+6, r18	; 0x06
    1524:	48 81       	ld	r20, Y
    1526:	59 81       	ldd	r21, Y+1	; 0x01
    1528:	24 17       	cp	r18, r20
    152a:	35 07       	cpc	r19, r21
    152c:	30 f4       	brcc	.+12     	; 0x153a <prvCopyDataToQueue+0x94>
    152e:	2c 81       	ldd	r18, Y+4	; 0x04
    1530:	3d 81       	ldd	r19, Y+5	; 0x05
    1532:	82 0f       	add	r24, r18
    1534:	93 1f       	adc	r25, r19
    1536:	9f 83       	std	Y+7, r25	; 0x07
    1538:	8e 83       	std	Y+6, r24	; 0x06
    153a:	02 30       	cpi	r16, 0x02	; 2
    153c:	49 f4       	brne	.+18     	; 0x1550 <prvCopyDataToQueue+0xaa>
    153e:	11 23       	and	r17, r17
    1540:	49 f0       	breq	.+18     	; 0x1554 <prvCopyDataToQueue+0xae>
    1542:	11 50       	subi	r17, 0x01	; 1
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	07 c0       	rjmp	.+14     	; 0x1556 <prvCopyDataToQueue+0xb0>
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	05 c0       	rjmp	.+10     	; 0x1556 <prvCopyDataToQueue+0xb0>
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	03 c0       	rjmp	.+6      	; 0x1556 <prvCopyDataToQueue+0xb0>
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <prvCopyDataToQueue+0xb0>
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	1f 5f       	subi	r17, 0xFF	; 255
    1558:	1e 8f       	std	Y+30, r17	; 0x1e
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	1f 91       	pop	r17
    1560:	0f 91       	pop	r16
    1562:	08 95       	ret

00001564 <prvCopyDataFromQueue>:
    1564:	fc 01       	movw	r30, r24
    1566:	40 a1       	ldd	r20, Z+32	; 0x20
    1568:	44 23       	and	r20, r20
    156a:	a9 f0       	breq	.+42     	; 0x1596 <prvCopyDataFromQueue+0x32>
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	26 81       	ldd	r18, Z+6	; 0x06
    1570:	37 81       	ldd	r19, Z+7	; 0x07
    1572:	24 0f       	add	r18, r20
    1574:	35 1f       	adc	r19, r21
    1576:	37 83       	std	Z+7, r19	; 0x07
    1578:	26 83       	std	Z+6, r18	; 0x06
    157a:	84 81       	ldd	r24, Z+4	; 0x04
    157c:	95 81       	ldd	r25, Z+5	; 0x05
    157e:	28 17       	cp	r18, r24
    1580:	39 07       	cpc	r19, r25
    1582:	20 f0       	brcs	.+8      	; 0x158c <prvCopyDataFromQueue+0x28>
    1584:	80 81       	ld	r24, Z
    1586:	91 81       	ldd	r25, Z+1	; 0x01
    1588:	97 83       	std	Z+7, r25	; 0x07
    158a:	86 83       	std	Z+6, r24	; 0x06
    158c:	cb 01       	movw	r24, r22
    158e:	66 81       	ldd	r22, Z+6	; 0x06
    1590:	77 81       	ldd	r23, Z+7	; 0x07
    1592:	0c 94 bb 2c 	jmp	0x5976	; 0x5976 <memcpy>
    1596:	08 95       	ret

00001598 <prvUnlockQueue>:
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	8c 01       	movw	r16, r24
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	0f 92       	push	r0
    15aa:	fc 01       	movw	r30, r24
    15ac:	c2 a1       	ldd	r28, Z+34	; 0x22
    15ae:	1c 16       	cp	r1, r28
    15b0:	ac f4       	brge	.+42     	; 0x15dc <prvUnlockQueue+0x44>
    15b2:	83 89       	ldd	r24, Z+19	; 0x13
    15b4:	81 11       	cpse	r24, r1
    15b6:	06 c0       	rjmp	.+12     	; 0x15c4 <prvUnlockQueue+0x2c>
    15b8:	11 c0       	rjmp	.+34     	; 0x15dc <prvUnlockQueue+0x44>
    15ba:	f8 01       	movw	r30, r16
    15bc:	83 89       	ldd	r24, Z+19	; 0x13
    15be:	81 11       	cpse	r24, r1
    15c0:	05 c0       	rjmp	.+10     	; 0x15cc <prvUnlockQueue+0x34>
    15c2:	0c c0       	rjmp	.+24     	; 0x15dc <prvUnlockQueue+0x44>
    15c4:	78 01       	movw	r14, r16
    15c6:	f3 e1       	ldi	r31, 0x13	; 19
    15c8:	ef 0e       	add	r14, r31
    15ca:	f1 1c       	adc	r15, r1
    15cc:	c7 01       	movw	r24, r14
    15ce:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <xTaskRemoveFromEventList>
    15d2:	81 11       	cpse	r24, r1
    15d4:	0e 94 88 16 	call	0x2d10	; 0x2d10 <vTaskMissedYield>
    15d8:	c1 50       	subi	r28, 0x01	; 1
    15da:	79 f7       	brne	.-34     	; 0x15ba <prvUnlockQueue+0x22>
    15dc:	8f ef       	ldi	r24, 0xFF	; 255
    15de:	f8 01       	movw	r30, r16
    15e0:	82 a3       	std	Z+34, r24	; 0x22
    15e2:	0f 90       	pop	r0
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	0f 92       	push	r0
    15ec:	c1 a1       	ldd	r28, Z+33	; 0x21
    15ee:	1c 16       	cp	r1, r28
    15f0:	ac f4       	brge	.+42     	; 0x161c <prvUnlockQueue+0x84>
    15f2:	80 85       	ldd	r24, Z+8	; 0x08
    15f4:	81 11       	cpse	r24, r1
    15f6:	06 c0       	rjmp	.+12     	; 0x1604 <prvUnlockQueue+0x6c>
    15f8:	11 c0       	rjmp	.+34     	; 0x161c <prvUnlockQueue+0x84>
    15fa:	f8 01       	movw	r30, r16
    15fc:	80 85       	ldd	r24, Z+8	; 0x08
    15fe:	81 11       	cpse	r24, r1
    1600:	05 c0       	rjmp	.+10     	; 0x160c <prvUnlockQueue+0x74>
    1602:	0c c0       	rjmp	.+24     	; 0x161c <prvUnlockQueue+0x84>
    1604:	78 01       	movw	r14, r16
    1606:	f8 e0       	ldi	r31, 0x08	; 8
    1608:	ef 0e       	add	r14, r31
    160a:	f1 1c       	adc	r15, r1
    160c:	c7 01       	movw	r24, r14
    160e:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <xTaskRemoveFromEventList>
    1612:	81 11       	cpse	r24, r1
    1614:	0e 94 88 16 	call	0x2d10	; 0x2d10 <vTaskMissedYield>
    1618:	c1 50       	subi	r28, 0x01	; 1
    161a:	79 f7       	brne	.-34     	; 0x15fa <prvUnlockQueue+0x62>
    161c:	8f ef       	ldi	r24, 0xFF	; 255
    161e:	f8 01       	movw	r30, r16
    1620:	81 a3       	std	Z+33, r24	; 0x21
    1622:	0f 90       	pop	r0
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cf 91       	pop	r28
    1628:	1f 91       	pop	r17
    162a:	0f 91       	pop	r16
    162c:	ff 90       	pop	r15
    162e:	ef 90       	pop	r14
    1630:	08 95       	ret

00001632 <xQueueGenericReset>:
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	ec 01       	movw	r28, r24
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	0f 92       	push	r0
    163e:	e8 81       	ld	r30, Y
    1640:	f9 81       	ldd	r31, Y+1	; 0x01
    1642:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1644:	28 a1       	ldd	r18, Y+32	; 0x20
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	82 9f       	mul	r24, r18
    164c:	a0 01       	movw	r20, r0
    164e:	83 9f       	mul	r24, r19
    1650:	50 0d       	add	r21, r0
    1652:	92 9f       	mul	r25, r18
    1654:	50 0d       	add	r21, r0
    1656:	11 24       	eor	r1, r1
    1658:	4e 0f       	add	r20, r30
    165a:	5f 1f       	adc	r21, r31
    165c:	5d 83       	std	Y+5, r21	; 0x05
    165e:	4c 83       	std	Y+4, r20	; 0x04
    1660:	1e 8e       	std	Y+30, r1	; 0x1e
    1662:	fb 83       	std	Y+3, r31	; 0x03
    1664:	ea 83       	std	Y+2, r30	; 0x02
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	82 9f       	mul	r24, r18
    166a:	a0 01       	movw	r20, r0
    166c:	83 9f       	mul	r24, r19
    166e:	50 0d       	add	r21, r0
    1670:	92 9f       	mul	r25, r18
    1672:	50 0d       	add	r21, r0
    1674:	11 24       	eor	r1, r1
    1676:	cf 01       	movw	r24, r30
    1678:	84 0f       	add	r24, r20
    167a:	95 1f       	adc	r25, r21
    167c:	9f 83       	std	Y+7, r25	; 0x07
    167e:	8e 83       	std	Y+6, r24	; 0x06
    1680:	8f ef       	ldi	r24, 0xFF	; 255
    1682:	89 a3       	std	Y+33, r24	; 0x21
    1684:	8a a3       	std	Y+34, r24	; 0x22
    1686:	61 11       	cpse	r22, r1
    1688:	0b c0       	rjmp	.+22     	; 0x16a0 <xQueueGenericReset+0x6e>
    168a:	88 85       	ldd	r24, Y+8	; 0x08
    168c:	88 23       	and	r24, r24
    168e:	71 f0       	breq	.+28     	; 0x16ac <xQueueGenericReset+0x7a>
    1690:	ce 01       	movw	r24, r28
    1692:	08 96       	adiw	r24, 0x08	; 8
    1694:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <xTaskRemoveFromEventList>
    1698:	88 23       	and	r24, r24
    169a:	41 f0       	breq	.+16     	; 0x16ac <xQueueGenericReset+0x7a>
    169c:	31 de       	rcall	.-926    	; 0x1300 <vPortYield>
    169e:	06 c0       	rjmp	.+12     	; 0x16ac <xQueueGenericReset+0x7a>
    16a0:	ce 01       	movw	r24, r28
    16a2:	08 96       	adiw	r24, 0x08	; 8
    16a4:	e5 dc       	rcall	.-1590   	; 0x1070 <vListInitialise>
    16a6:	ce 01       	movw	r24, r28
    16a8:	43 96       	adiw	r24, 0x13	; 19
    16aa:	e2 dc       	rcall	.-1596   	; 0x1070 <vListInitialise>
    16ac:	0f 90       	pop	r0
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	08 95       	ret

000016b8 <xQueueGenericCreate>:
    16b8:	ff 92       	push	r15
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	08 2f       	mov	r16, r24
    16c4:	16 2f       	mov	r17, r22
    16c6:	f4 2e       	mov	r15, r20
    16c8:	66 23       	and	r22, r22
    16ca:	b9 f0       	breq	.+46     	; 0x16fa <xQueueGenericCreate+0x42>
    16cc:	86 9f       	mul	r24, r22
    16ce:	c0 01       	movw	r24, r0
    16d0:	11 24       	eor	r1, r1
    16d2:	85 96       	adiw	r24, 0x25	; 37
    16d4:	e3 db       	rcall	.-2106   	; 0xe9c <pvPortMalloc>
    16d6:	ec 01       	movw	r28, r24
    16d8:	00 97       	sbiw	r24, 0x00	; 0
    16da:	41 f4       	brne	.+16     	; 0x16ec <xQueueGenericCreate+0x34>
    16dc:	14 c0       	rjmp	.+40     	; 0x1706 <xQueueGenericCreate+0x4e>
    16de:	0f 8f       	std	Y+31, r16	; 0x1f
    16e0:	18 a3       	std	Y+32, r17	; 0x20
    16e2:	61 e0       	ldi	r22, 0x01	; 1
    16e4:	ce 01       	movw	r24, r28
    16e6:	a5 df       	rcall	.-182    	; 0x1632 <xQueueGenericReset>
    16e8:	fc a2       	std	Y+36, r15	; 0x24
    16ea:	0d c0       	rjmp	.+26     	; 0x1706 <xQueueGenericCreate+0x4e>
    16ec:	85 96       	adiw	r24, 0x25	; 37
    16ee:	99 83       	std	Y+1, r25	; 0x01
    16f0:	88 83       	st	Y, r24
    16f2:	f5 cf       	rjmp	.-22     	; 0x16de <xQueueGenericCreate+0x26>
    16f4:	d9 83       	std	Y+1, r29	; 0x01
    16f6:	c8 83       	st	Y, r28
    16f8:	f2 cf       	rjmp	.-28     	; 0x16de <xQueueGenericCreate+0x26>
    16fa:	85 e2       	ldi	r24, 0x25	; 37
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	ce db       	rcall	.-2148   	; 0xe9c <pvPortMalloc>
    1700:	ec 01       	movw	r28, r24
    1702:	89 2b       	or	r24, r25
    1704:	b9 f7       	brne	.-18     	; 0x16f4 <xQueueGenericCreate+0x3c>
    1706:	ce 01       	movw	r24, r28
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	ff 90       	pop	r15
    1712:	08 95       	ret

00001714 <xQueueGenericSend>:
    1714:	9f 92       	push	r9
    1716:	af 92       	push	r10
    1718:	bf 92       	push	r11
    171a:	cf 92       	push	r12
    171c:	df 92       	push	r13
    171e:	ef 92       	push	r14
    1720:	ff 92       	push	r15
    1722:	0f 93       	push	r16
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	29 97       	sbiw	r28, 0x09	; 9
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	7c 01       	movw	r14, r24
    173c:	5b 01       	movw	r10, r22
    173e:	2e 83       	std	Y+6, r18	; 0x06
    1740:	3f 83       	std	Y+7, r19	; 0x07
    1742:	48 87       	std	Y+8, r20	; 0x08
    1744:	59 87       	std	Y+9, r21	; 0x09
    1746:	10 e0       	ldi	r17, 0x00	; 0
    1748:	99 24       	eor	r9, r9
    174a:	93 94       	inc	r9
    174c:	6c 01       	movw	r12, r24
    174e:	88 e0       	ldi	r24, 0x08	; 8
    1750:	c8 0e       	add	r12, r24
    1752:	d1 1c       	adc	r13, r1
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	0f 92       	push	r0
    175a:	f7 01       	movw	r30, r14
    175c:	96 8d       	ldd	r25, Z+30	; 0x1e
    175e:	87 8d       	ldd	r24, Z+31	; 0x1f
    1760:	98 17       	cp	r25, r24
    1762:	10 f0       	brcs	.+4      	; 0x1768 <xQueueGenericSend+0x54>
    1764:	02 30       	cpi	r16, 0x02	; 2
    1766:	b1 f4       	brne	.+44     	; 0x1794 <xQueueGenericSend+0x80>
    1768:	40 2f       	mov	r20, r16
    176a:	b5 01       	movw	r22, r10
    176c:	c7 01       	movw	r24, r14
    176e:	9b de       	rcall	.-714    	; 0x14a6 <prvCopyDataToQueue>
    1770:	f7 01       	movw	r30, r14
    1772:	93 89       	ldd	r25, Z+19	; 0x13
    1774:	99 23       	and	r25, r25
    1776:	41 f0       	breq	.+16     	; 0x1788 <xQueueGenericSend+0x74>
    1778:	c7 01       	movw	r24, r14
    177a:	43 96       	adiw	r24, 0x13	; 19
    177c:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <xTaskRemoveFromEventList>
    1780:	88 23       	and	r24, r24
    1782:	21 f0       	breq	.+8      	; 0x178c <xQueueGenericSend+0x78>
    1784:	bd dd       	rcall	.-1158   	; 0x1300 <vPortYield>
    1786:	02 c0       	rjmp	.+4      	; 0x178c <xQueueGenericSend+0x78>
    1788:	81 11       	cpse	r24, r1
    178a:	ba dd       	rcall	.-1164   	; 0x1300 <vPortYield>
    178c:	0f 90       	pop	r0
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	4e c0       	rjmp	.+156    	; 0x1830 <xQueueGenericSend+0x11c>
    1794:	8e 81       	ldd	r24, Y+6	; 0x06
    1796:	9f 81       	ldd	r25, Y+7	; 0x07
    1798:	a8 85       	ldd	r26, Y+8	; 0x08
    179a:	b9 85       	ldd	r27, Y+9	; 0x09
    179c:	89 2b       	or	r24, r25
    179e:	8a 2b       	or	r24, r26
    17a0:	8b 2b       	or	r24, r27
    17a2:	21 f4       	brne	.+8      	; 0x17ac <xQueueGenericSend+0x98>
    17a4:	0f 90       	pop	r0
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	42 c0       	rjmp	.+132    	; 0x1830 <xQueueGenericSend+0x11c>
    17ac:	11 11       	cpse	r17, r1
    17ae:	05 c0       	rjmp	.+10     	; 0x17ba <xQueueGenericSend+0xa6>
    17b0:	ce 01       	movw	r24, r28
    17b2:	01 96       	adiw	r24, 0x01	; 1
    17b4:	0e 94 22 16 	call	0x2c44	; 0x2c44 <vTaskInternalSetTimeOutState>
    17b8:	19 2d       	mov	r17, r9
    17ba:	0f 90       	pop	r0
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	00 d7       	rcall	.+3584   	; 0x25c0 <vTaskSuspendAll>
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	0f 92       	push	r0
    17c6:	f7 01       	movw	r30, r14
    17c8:	81 a1       	ldd	r24, Z+33	; 0x21
    17ca:	8f 3f       	cpi	r24, 0xFF	; 255
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <xQueueGenericSend+0xbc>
    17ce:	11 a2       	std	Z+33, r1	; 0x21
    17d0:	f7 01       	movw	r30, r14
    17d2:	82 a1       	ldd	r24, Z+34	; 0x22
    17d4:	8f 3f       	cpi	r24, 0xFF	; 255
    17d6:	09 f4       	brne	.+2      	; 0x17da <xQueueGenericSend+0xc6>
    17d8:	12 a2       	std	Z+34, r1	; 0x22
    17da:	0f 90       	pop	r0
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	be 01       	movw	r22, r28
    17e0:	6a 5f       	subi	r22, 0xFA	; 250
    17e2:	7f 4f       	sbci	r23, 0xFF	; 255
    17e4:	ce 01       	movw	r24, r28
    17e6:	01 96       	adiw	r24, 0x01	; 1
    17e8:	0e 94 33 16 	call	0x2c66	; 0x2c66 <xTaskCheckForTimeOut>
    17ec:	81 11       	cpse	r24, r1
    17ee:	1c c0       	rjmp	.+56     	; 0x1828 <xQueueGenericSend+0x114>
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	f8 94       	cli
    17f4:	0f 92       	push	r0
    17f6:	f7 01       	movw	r30, r14
    17f8:	96 8d       	ldd	r25, Z+30	; 0x1e
    17fa:	87 8d       	ldd	r24, Z+31	; 0x1f
    17fc:	0f 90       	pop	r0
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	98 13       	cpse	r25, r24
    1802:	0e c0       	rjmp	.+28     	; 0x1820 <xQueueGenericSend+0x10c>
    1804:	4e 81       	ldd	r20, Y+6	; 0x06
    1806:	5f 81       	ldd	r21, Y+7	; 0x07
    1808:	68 85       	ldd	r22, Y+8	; 0x08
    180a:	79 85       	ldd	r23, Y+9	; 0x09
    180c:	c6 01       	movw	r24, r12
    180e:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <vTaskPlaceOnEventList>
    1812:	c7 01       	movw	r24, r14
    1814:	c1 de       	rcall	.-638    	; 0x1598 <prvUnlockQueue>
    1816:	bd d7       	rcall	.+3962   	; 0x2792 <xTaskResumeAll>
    1818:	81 11       	cpse	r24, r1
    181a:	9c cf       	rjmp	.-200    	; 0x1754 <xQueueGenericSend+0x40>
    181c:	71 dd       	rcall	.-1310   	; 0x1300 <vPortYield>
    181e:	9a cf       	rjmp	.-204    	; 0x1754 <xQueueGenericSend+0x40>
    1820:	c7 01       	movw	r24, r14
    1822:	ba de       	rcall	.-652    	; 0x1598 <prvUnlockQueue>
    1824:	b6 d7       	rcall	.+3948   	; 0x2792 <xTaskResumeAll>
    1826:	96 cf       	rjmp	.-212    	; 0x1754 <xQueueGenericSend+0x40>
    1828:	c7 01       	movw	r24, r14
    182a:	b6 de       	rcall	.-660    	; 0x1598 <prvUnlockQueue>
    182c:	b2 d7       	rcall	.+3940   	; 0x2792 <xTaskResumeAll>
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	29 96       	adiw	r28, 0x09	; 9
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	1f 91       	pop	r17
    1842:	0f 91       	pop	r16
    1844:	ff 90       	pop	r15
    1846:	ef 90       	pop	r14
    1848:	df 90       	pop	r13
    184a:	cf 90       	pop	r12
    184c:	bf 90       	pop	r11
    184e:	af 90       	pop	r10
    1850:	9f 90       	pop	r9
    1852:	08 95       	ret

00001854 <xQueueCreateMutex>:
    1854:	0f 93       	push	r16
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	48 2f       	mov	r20, r24
    185c:	60 e0       	ldi	r22, 0x00	; 0
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	2b df       	rcall	.-426    	; 0x16b8 <xQueueGenericCreate>
    1862:	ec 01       	movw	r28, r24
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	61 f0       	breq	.+24     	; 0x1880 <xQueueCreateMutex+0x2c>
    1868:	1d 82       	std	Y+5, r1	; 0x05
    186a:	1c 82       	std	Y+4, r1	; 0x04
    186c:	19 82       	std	Y+1, r1	; 0x01
    186e:	18 82       	st	Y, r1
    1870:	1e 82       	std	Y+6, r1	; 0x06
    1872:	00 e0       	ldi	r16, 0x00	; 0
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	a9 01       	movw	r20, r18
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	4a df       	rcall	.-364    	; 0x1714 <xQueueGenericSend>
    1880:	ce 01       	movw	r24, r28
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	0f 91       	pop	r16
    1888:	08 95       	ret

0000188a <xQueueGenericSendFromISR>:
    188a:	ef 92       	push	r14
    188c:	ff 92       	push	r15
    188e:	0f 93       	push	r16
    1890:	1f 93       	push	r17
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	8a 01       	movw	r16, r20
    1898:	fc 01       	movw	r30, r24
    189a:	56 8d       	ldd	r21, Z+30	; 0x1e
    189c:	37 8d       	ldd	r19, Z+31	; 0x1f
    189e:	53 17       	cp	r21, r19
    18a0:	10 f0       	brcs	.+4      	; 0x18a6 <xQueueGenericSendFromISR+0x1c>
    18a2:	22 30       	cpi	r18, 0x02	; 2
    18a4:	e9 f4       	brne	.+58     	; 0x18e0 <xQueueGenericSendFromISR+0x56>
    18a6:	42 2f       	mov	r20, r18
    18a8:	78 01       	movw	r14, r16
    18aa:	ec 01       	movw	r28, r24
    18ac:	1a a1       	ldd	r17, Y+34	; 0x22
    18ae:	fb dd       	rcall	.-1034   	; 0x14a6 <prvCopyDataToQueue>
    18b0:	1f 3f       	cpi	r17, 0xFF	; 255
    18b2:	81 f4       	brne	.+32     	; 0x18d4 <xQueueGenericSendFromISR+0x4a>
    18b4:	8b 89       	ldd	r24, Y+19	; 0x13
    18b6:	88 23       	and	r24, r24
    18b8:	a9 f0       	breq	.+42     	; 0x18e4 <xQueueGenericSendFromISR+0x5a>
    18ba:	ce 01       	movw	r24, r28
    18bc:	43 96       	adiw	r24, 0x13	; 19
    18be:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <xTaskRemoveFromEventList>
    18c2:	88 23       	and	r24, r24
    18c4:	89 f0       	breq	.+34     	; 0x18e8 <xQueueGenericSendFromISR+0x5e>
    18c6:	e1 14       	cp	r14, r1
    18c8:	f1 04       	cpc	r15, r1
    18ca:	81 f0       	breq	.+32     	; 0x18ec <xQueueGenericSendFromISR+0x62>
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	f7 01       	movw	r30, r14
    18d0:	80 83       	st	Z, r24
    18d2:	0d c0       	rjmp	.+26     	; 0x18ee <xQueueGenericSendFromISR+0x64>
    18d4:	ff 24       	eor	r15, r15
    18d6:	f3 94       	inc	r15
    18d8:	f1 0e       	add	r15, r17
    18da:	fa a2       	std	Y+34, r15	; 0x22
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	07 c0       	rjmp	.+14     	; 0x18ee <xQueueGenericSendFromISR+0x64>
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	05 c0       	rjmp	.+10     	; 0x18ee <xQueueGenericSendFromISR+0x64>
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	03 c0       	rjmp	.+6      	; 0x18ee <xQueueGenericSendFromISR+0x64>
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	01 c0       	rjmp	.+2      	; 0x18ee <xQueueGenericSendFromISR+0x64>
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	ff 90       	pop	r15
    18f8:	ef 90       	pop	r14
    18fa:	08 95       	ret

000018fc <xQueueReceive>:
    18fc:	9f 92       	push	r9
    18fe:	af 92       	push	r10
    1900:	bf 92       	push	r11
    1902:	cf 92       	push	r12
    1904:	df 92       	push	r13
    1906:	ef 92       	push	r14
    1908:	ff 92       	push	r15
    190a:	0f 93       	push	r16
    190c:	1f 93       	push	r17
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	29 97       	sbiw	r28, 0x09	; 9
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	8c 01       	movw	r16, r24
    1924:	5b 01       	movw	r10, r22
    1926:	2e 83       	std	Y+6, r18	; 0x06
    1928:	3f 83       	std	Y+7, r19	; 0x07
    192a:	48 87       	std	Y+8, r20	; 0x08
    192c:	59 87       	std	Y+9, r21	; 0x09
    192e:	e1 2c       	mov	r14, r1
    1930:	99 24       	eor	r9, r9
    1932:	93 94       	inc	r9
    1934:	6c 01       	movw	r12, r24
    1936:	83 e1       	ldi	r24, 0x13	; 19
    1938:	c8 0e       	add	r12, r24
    193a:	d1 1c       	adc	r13, r1
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	0f 92       	push	r0
    1942:	f8 01       	movw	r30, r16
    1944:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1946:	ff 20       	and	r15, r15
    1948:	99 f0       	breq	.+38     	; 0x1970 <xQueueReceive+0x74>
    194a:	b5 01       	movw	r22, r10
    194c:	c8 01       	movw	r24, r16
    194e:	0a de       	rcall	.-1004   	; 0x1564 <prvCopyDataFromQueue>
    1950:	fa 94       	dec	r15
    1952:	f8 01       	movw	r30, r16
    1954:	f6 8e       	std	Z+30, r15	; 0x1e
    1956:	80 85       	ldd	r24, Z+8	; 0x08
    1958:	88 23       	and	r24, r24
    195a:	31 f0       	breq	.+12     	; 0x1968 <xQueueReceive+0x6c>
    195c:	c8 01       	movw	r24, r16
    195e:	08 96       	adiw	r24, 0x08	; 8
    1960:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <xTaskRemoveFromEventList>
    1964:	81 11       	cpse	r24, r1
    1966:	cc dc       	rcall	.-1640   	; 0x1300 <vPortYield>
    1968:	0f 90       	pop	r0
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	4d c0       	rjmp	.+154    	; 0x1a0a <xQueueReceive+0x10e>
    1970:	8e 81       	ldd	r24, Y+6	; 0x06
    1972:	9f 81       	ldd	r25, Y+7	; 0x07
    1974:	a8 85       	ldd	r26, Y+8	; 0x08
    1976:	b9 85       	ldd	r27, Y+9	; 0x09
    1978:	89 2b       	or	r24, r25
    197a:	8a 2b       	or	r24, r26
    197c:	8b 2b       	or	r24, r27
    197e:	21 f4       	brne	.+8      	; 0x1988 <xQueueReceive+0x8c>
    1980:	0f 90       	pop	r0
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	41 c0       	rjmp	.+130    	; 0x1a0a <xQueueReceive+0x10e>
    1988:	e1 10       	cpse	r14, r1
    198a:	05 c0       	rjmp	.+10     	; 0x1996 <xQueueReceive+0x9a>
    198c:	ce 01       	movw	r24, r28
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	0e 94 22 16 	call	0x2c44	; 0x2c44 <vTaskInternalSetTimeOutState>
    1994:	e9 2c       	mov	r14, r9
    1996:	0f 90       	pop	r0
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	12 d6       	rcall	.+3108   	; 0x25c0 <vTaskSuspendAll>
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	0f 92       	push	r0
    19a2:	f8 01       	movw	r30, r16
    19a4:	81 a1       	ldd	r24, Z+33	; 0x21
    19a6:	8f 3f       	cpi	r24, 0xFF	; 255
    19a8:	09 f4       	brne	.+2      	; 0x19ac <xQueueReceive+0xb0>
    19aa:	11 a2       	std	Z+33, r1	; 0x21
    19ac:	f8 01       	movw	r30, r16
    19ae:	82 a1       	ldd	r24, Z+34	; 0x22
    19b0:	8f 3f       	cpi	r24, 0xFF	; 255
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <xQueueReceive+0xba>
    19b4:	12 a2       	std	Z+34, r1	; 0x22
    19b6:	0f 90       	pop	r0
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	be 01       	movw	r22, r28
    19bc:	6a 5f       	subi	r22, 0xFA	; 250
    19be:	7f 4f       	sbci	r23, 0xFF	; 255
    19c0:	ce 01       	movw	r24, r28
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	0e 94 33 16 	call	0x2c66	; 0x2c66 <xTaskCheckForTimeOut>
    19c8:	81 11       	cpse	r24, r1
    19ca:	16 c0       	rjmp	.+44     	; 0x19f8 <xQueueReceive+0xfc>
    19cc:	c8 01       	movw	r24, r16
    19ce:	60 dd       	rcall	.-1344   	; 0x1490 <prvIsQueueEmpty>
    19d0:	88 23       	and	r24, r24
    19d2:	71 f0       	breq	.+28     	; 0x19f0 <xQueueReceive+0xf4>
    19d4:	4e 81       	ldd	r20, Y+6	; 0x06
    19d6:	5f 81       	ldd	r21, Y+7	; 0x07
    19d8:	68 85       	ldd	r22, Y+8	; 0x08
    19da:	79 85       	ldd	r23, Y+9	; 0x09
    19dc:	c6 01       	movw	r24, r12
    19de:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <vTaskPlaceOnEventList>
    19e2:	c8 01       	movw	r24, r16
    19e4:	d9 dd       	rcall	.-1102   	; 0x1598 <prvUnlockQueue>
    19e6:	d5 d6       	rcall	.+3498   	; 0x2792 <xTaskResumeAll>
    19e8:	81 11       	cpse	r24, r1
    19ea:	a8 cf       	rjmp	.-176    	; 0x193c <xQueueReceive+0x40>
    19ec:	89 dc       	rcall	.-1774   	; 0x1300 <vPortYield>
    19ee:	a6 cf       	rjmp	.-180    	; 0x193c <xQueueReceive+0x40>
    19f0:	c8 01       	movw	r24, r16
    19f2:	d2 dd       	rcall	.-1116   	; 0x1598 <prvUnlockQueue>
    19f4:	ce d6       	rcall	.+3484   	; 0x2792 <xTaskResumeAll>
    19f6:	a2 cf       	rjmp	.-188    	; 0x193c <xQueueReceive+0x40>
    19f8:	c8 01       	movw	r24, r16
    19fa:	ce dd       	rcall	.-1124   	; 0x1598 <prvUnlockQueue>
    19fc:	ca d6       	rcall	.+3476   	; 0x2792 <xTaskResumeAll>
    19fe:	c8 01       	movw	r24, r16
    1a00:	47 dd       	rcall	.-1394   	; 0x1490 <prvIsQueueEmpty>
    1a02:	88 23       	and	r24, r24
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <xQueueReceive+0x10c>
    1a06:	9a cf       	rjmp	.-204    	; 0x193c <xQueueReceive+0x40>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	29 96       	adiw	r28, 0x09	; 9
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	1f 91       	pop	r17
    1a1c:	0f 91       	pop	r16
    1a1e:	ff 90       	pop	r15
    1a20:	ef 90       	pop	r14
    1a22:	df 90       	pop	r13
    1a24:	cf 90       	pop	r12
    1a26:	bf 90       	pop	r11
    1a28:	af 90       	pop	r10
    1a2a:	9f 90       	pop	r9
    1a2c:	08 95       	ret

00001a2e <xQueueSemaphoreTake>:
    1a2e:	bf 92       	push	r11
    1a30:	cf 92       	push	r12
    1a32:	df 92       	push	r13
    1a34:	ef 92       	push	r14
    1a36:	ff 92       	push	r15
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	29 97       	sbiw	r28, 0x09	; 9
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	8c 01       	movw	r16, r24
    1a52:	4e 83       	std	Y+6, r20	; 0x06
    1a54:	5f 83       	std	Y+7, r21	; 0x07
    1a56:	68 87       	std	Y+8, r22	; 0x08
    1a58:	79 87       	std	Y+9, r23	; 0x09
    1a5a:	b1 2c       	mov	r11, r1
    1a5c:	d1 2c       	mov	r13, r1
    1a5e:	cc 24       	eor	r12, r12
    1a60:	c3 94       	inc	r12
    1a62:	7c 01       	movw	r14, r24
    1a64:	83 e1       	ldi	r24, 0x13	; 19
    1a66:	e8 0e       	add	r14, r24
    1a68:	f1 1c       	adc	r15, r1
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	0f 92       	push	r0
    1a70:	d8 01       	movw	r26, r16
    1a72:	5e 96       	adiw	r26, 0x1e	; 30
    1a74:	8c 91       	ld	r24, X
    1a76:	5e 97       	sbiw	r26, 0x1e	; 30
    1a78:	88 23       	and	r24, r24
    1a7a:	e1 f0       	breq	.+56     	; 0x1ab4 <xQueueSemaphoreTake+0x86>
    1a7c:	81 50       	subi	r24, 0x01	; 1
    1a7e:	5e 96       	adiw	r26, 0x1e	; 30
    1a80:	8c 93       	st	X, r24
    1a82:	5e 97       	sbiw	r26, 0x1e	; 30
    1a84:	8d 91       	ld	r24, X+
    1a86:	9c 91       	ld	r25, X
    1a88:	89 2b       	or	r24, r25
    1a8a:	29 f4       	brne	.+10     	; 0x1a96 <xQueueSemaphoreTake+0x68>
    1a8c:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <pvTaskIncrementMutexHeldCount>
    1a90:	f8 01       	movw	r30, r16
    1a92:	95 83       	std	Z+5, r25	; 0x05
    1a94:	84 83       	std	Z+4, r24	; 0x04
    1a96:	d8 01       	movw	r26, r16
    1a98:	18 96       	adiw	r26, 0x08	; 8
    1a9a:	8c 91       	ld	r24, X
    1a9c:	88 23       	and	r24, r24
    1a9e:	31 f0       	breq	.+12     	; 0x1aac <xQueueSemaphoreTake+0x7e>
    1aa0:	c8 01       	movw	r24, r16
    1aa2:	08 96       	adiw	r24, 0x08	; 8
    1aa4:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <xTaskRemoveFromEventList>
    1aa8:	81 11       	cpse	r24, r1
    1aaa:	2a dc       	rcall	.-1964   	; 0x1300 <vPortYield>
    1aac:	0f 90       	pop	r0
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	7a c0       	rjmp	.+244    	; 0x1ba8 <xQueueSemaphoreTake+0x17a>
    1ab4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab8:	a8 85       	ldd	r26, Y+8	; 0x08
    1aba:	b9 85       	ldd	r27, Y+9	; 0x09
    1abc:	89 2b       	or	r24, r25
    1abe:	8a 2b       	or	r24, r26
    1ac0:	8b 2b       	or	r24, r27
    1ac2:	21 f4       	brne	.+8      	; 0x1acc <xQueueSemaphoreTake+0x9e>
    1ac4:	0f 90       	pop	r0
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	6e c0       	rjmp	.+220    	; 0x1ba8 <xQueueSemaphoreTake+0x17a>
    1acc:	d1 10       	cpse	r13, r1
    1ace:	05 c0       	rjmp	.+10     	; 0x1ada <xQueueSemaphoreTake+0xac>
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	0e 94 22 16 	call	0x2c44	; 0x2c44 <vTaskInternalSetTimeOutState>
    1ad8:	dc 2c       	mov	r13, r12
    1ada:	0f 90       	pop	r0
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	70 d5       	rcall	.+2784   	; 0x25c0 <vTaskSuspendAll>
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	0f 92       	push	r0
    1ae6:	f8 01       	movw	r30, r16
    1ae8:	81 a1       	ldd	r24, Z+33	; 0x21
    1aea:	8f 3f       	cpi	r24, 0xFF	; 255
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <xQueueSemaphoreTake+0xc2>
    1aee:	11 a2       	std	Z+33, r1	; 0x21
    1af0:	d8 01       	movw	r26, r16
    1af2:	92 96       	adiw	r26, 0x22	; 34
    1af4:	8c 91       	ld	r24, X
    1af6:	92 97       	sbiw	r26, 0x22	; 34
    1af8:	8f 3f       	cpi	r24, 0xFF	; 255
    1afa:	11 f4       	brne	.+4      	; 0x1b00 <xQueueSemaphoreTake+0xd2>
    1afc:	92 96       	adiw	r26, 0x22	; 34
    1afe:	1c 92       	st	X, r1
    1b00:	0f 90       	pop	r0
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	be 01       	movw	r22, r28
    1b06:	6a 5f       	subi	r22, 0xFA	; 250
    1b08:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	0e 94 33 16 	call	0x2c66	; 0x2c66 <xTaskCheckForTimeOut>
    1b12:	81 11       	cpse	r24, r1
    1b14:	24 c0       	rjmp	.+72     	; 0x1b5e <xQueueSemaphoreTake+0x130>
    1b16:	c8 01       	movw	r24, r16
    1b18:	bb dc       	rcall	.-1674   	; 0x1490 <prvIsQueueEmpty>
    1b1a:	88 23       	and	r24, r24
    1b1c:	e1 f0       	breq	.+56     	; 0x1b56 <xQueueSemaphoreTake+0x128>
    1b1e:	f8 01       	movw	r30, r16
    1b20:	80 81       	ld	r24, Z
    1b22:	91 81       	ldd	r25, Z+1	; 0x01
    1b24:	89 2b       	or	r24, r25
    1b26:	51 f4       	brne	.+20     	; 0x1b3c <xQueueSemaphoreTake+0x10e>
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	0f 92       	push	r0
    1b2e:	84 81       	ldd	r24, Z+4	; 0x04
    1b30:	95 81       	ldd	r25, Z+5	; 0x05
    1b32:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <xTaskPriorityInherit>
    1b36:	b8 2e       	mov	r11, r24
    1b38:	0f 90       	pop	r0
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	4e 81       	ldd	r20, Y+6	; 0x06
    1b3e:	5f 81       	ldd	r21, Y+7	; 0x07
    1b40:	68 85       	ldd	r22, Y+8	; 0x08
    1b42:	79 85       	ldd	r23, Y+9	; 0x09
    1b44:	c7 01       	movw	r24, r14
    1b46:	97 d7       	rcall	.+3886   	; 0x2a76 <vTaskPlaceOnEventList>
    1b48:	c8 01       	movw	r24, r16
    1b4a:	26 dd       	rcall	.-1460   	; 0x1598 <prvUnlockQueue>
    1b4c:	22 d6       	rcall	.+3140   	; 0x2792 <xTaskResumeAll>
    1b4e:	81 11       	cpse	r24, r1
    1b50:	8c cf       	rjmp	.-232    	; 0x1a6a <xQueueSemaphoreTake+0x3c>
    1b52:	d6 db       	rcall	.-2132   	; 0x1300 <vPortYield>
    1b54:	8a cf       	rjmp	.-236    	; 0x1a6a <xQueueSemaphoreTake+0x3c>
    1b56:	c8 01       	movw	r24, r16
    1b58:	1f dd       	rcall	.-1474   	; 0x1598 <prvUnlockQueue>
    1b5a:	1b d6       	rcall	.+3126   	; 0x2792 <xTaskResumeAll>
    1b5c:	86 cf       	rjmp	.-244    	; 0x1a6a <xQueueSemaphoreTake+0x3c>
    1b5e:	c8 01       	movw	r24, r16
    1b60:	1b dd       	rcall	.-1482   	; 0x1598 <prvUnlockQueue>
    1b62:	17 d6       	rcall	.+3118   	; 0x2792 <xTaskResumeAll>
    1b64:	c8 01       	movw	r24, r16
    1b66:	94 dc       	rcall	.-1752   	; 0x1490 <prvIsQueueEmpty>
    1b68:	88 23       	and	r24, r24
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <xQueueSemaphoreTake+0x140>
    1b6c:	7e cf       	rjmp	.-260    	; 0x1a6a <xQueueSemaphoreTake+0x3c>
    1b6e:	bb 20       	and	r11, r11
    1b70:	d1 f0       	breq	.+52     	; 0x1ba6 <xQueueSemaphoreTake+0x178>
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	0f 92       	push	r0
    1b78:	f8 01       	movw	r30, r16
    1b7a:	83 89       	ldd	r24, Z+19	; 0x13
    1b7c:	88 23       	and	r24, r24
    1b7e:	39 f0       	breq	.+14     	; 0x1b8e <xQueueSemaphoreTake+0x160>
    1b80:	02 8c       	ldd	r0, Z+26	; 0x1a
    1b82:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1b84:	e0 2d       	mov	r30, r0
    1b86:	80 81       	ld	r24, Z
    1b88:	64 e0       	ldi	r22, 0x04	; 4
    1b8a:	68 1b       	sub	r22, r24
    1b8c:	01 c0       	rjmp	.+2      	; 0x1b90 <xQueueSemaphoreTake+0x162>
    1b8e:	60 e0       	ldi	r22, 0x00	; 0
    1b90:	d8 01       	movw	r26, r16
    1b92:	14 96       	adiw	r26, 0x04	; 4
    1b94:	8d 91       	ld	r24, X+
    1b96:	9c 91       	ld	r25, X
    1b98:	15 97       	sbiw	r26, 0x05	; 5
    1b9a:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <vTaskPriorityDisinheritAfterTimeout>
    1b9e:	0f 90       	pop	r0
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	01 c0       	rjmp	.+2      	; 0x1ba8 <xQueueSemaphoreTake+0x17a>
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	29 96       	adiw	r28, 0x09	; 9
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	1f 91       	pop	r17
    1bba:	0f 91       	pop	r16
    1bbc:	ff 90       	pop	r15
    1bbe:	ef 90       	pop	r14
    1bc0:	df 90       	pop	r13
    1bc2:	cf 90       	pop	r12
    1bc4:	bf 90       	pop	r11
    1bc6:	08 95       	ret

00001bc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	0f 92       	push	r0
    1bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd6:	8f 3f       	cpi	r24, 0xFF	; 255
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <vQueueWaitForMessageRestricted+0x14>
    1bda:	19 a2       	std	Y+33, r1	; 0x21
    1bdc:	8a a1       	ldd	r24, Y+34	; 0x22
    1bde:	8f 3f       	cpi	r24, 0xFF	; 255
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <vQueueWaitForMessageRestricted+0x1c>
    1be2:	1a a2       	std	Y+34, r1	; 0x22
    1be4:	0f 90       	pop	r0
    1be6:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1be8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bea:	81 11       	cpse	r24, r1
    1bec:	03 c0       	rjmp	.+6      	; 0x1bf4 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1bee:	ce 01       	movw	r24, r28
    1bf0:	43 96       	adiw	r24, 0x13	; 19
    1bf2:	7c d7       	rcall	.+3832   	; 0x2aec <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	d0 dc       	rcall	.-1632   	; 0x1598 <prvUnlockQueue>
    }
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	08 95       	ret

00001bfe <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1bfe:	fc 01       	movw	r30, r24
    1c00:	44 81       	ldd	r20, Z+4	; 0x04
    1c02:	55 81       	ldd	r21, Z+5	; 0x05
    1c04:	22 81       	ldd	r18, Z+2	; 0x02
    1c06:	33 81       	ldd	r19, Z+3	; 0x03
    1c08:	24 0f       	add	r18, r20
    1c0a:	35 1f       	adc	r19, r21
    1c0c:	80 81       	ld	r24, Z
    1c0e:	91 81       	ldd	r25, Z+1	; 0x01
    1c10:	b9 01       	movw	r22, r18
    1c12:	68 1b       	sub	r22, r24
    1c14:	79 0b       	sbc	r23, r25
    1c16:	cb 01       	movw	r24, r22
    1c18:	64 17       	cp	r22, r20
    1c1a:	75 07       	cpc	r23, r21
    1c1c:	10 f0       	brcs	.+4      	; 0x1c22 <prvBytesInBuffer+0x24>
    1c1e:	84 1b       	sub	r24, r20
    1c20:	95 0b       	sbc	r25, r21
    1c22:	08 95       	ret

00001c24 <prvWriteBytesToBuffer>:
    1c24:	af 92       	push	r10
    1c26:	bf 92       	push	r11
    1c28:	cf 92       	push	r12
    1c2a:	df 92       	push	r13
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	6c 01       	movw	r12, r24
    1c3a:	5b 01       	movw	r10, r22
    1c3c:	7a 01       	movw	r14, r20
    1c3e:	fc 01       	movw	r30, r24
    1c40:	c2 81       	ldd	r28, Z+2	; 0x02
    1c42:	d3 81       	ldd	r29, Z+3	; 0x03
    1c44:	04 81       	ldd	r16, Z+4	; 0x04
    1c46:	15 81       	ldd	r17, Z+5	; 0x05
    1c48:	0c 1b       	sub	r16, r28
    1c4a:	1d 0b       	sbc	r17, r29
    1c4c:	40 17       	cp	r20, r16
    1c4e:	51 07       	cpc	r21, r17
    1c50:	08 f4       	brcc	.+2      	; 0x1c54 <prvWriteBytesToBuffer+0x30>
    1c52:	8a 01       	movw	r16, r20
    1c54:	f6 01       	movw	r30, r12
    1c56:	84 85       	ldd	r24, Z+12	; 0x0c
    1c58:	95 85       	ldd	r25, Z+13	; 0x0d
    1c5a:	a8 01       	movw	r20, r16
    1c5c:	b5 01       	movw	r22, r10
    1c5e:	8c 0f       	add	r24, r28
    1c60:	9d 1f       	adc	r25, r29
    1c62:	0e 94 bb 2c 	call	0x5976	; 0x5976 <memcpy>
    1c66:	0e 15       	cp	r16, r14
    1c68:	1f 05       	cpc	r17, r15
    1c6a:	58 f4       	brcc	.+22     	; 0x1c82 <prvWriteBytesToBuffer+0x5e>
    1c6c:	a7 01       	movw	r20, r14
    1c6e:	40 1b       	sub	r20, r16
    1c70:	51 0b       	sbc	r21, r17
    1c72:	b5 01       	movw	r22, r10
    1c74:	60 0f       	add	r22, r16
    1c76:	71 1f       	adc	r23, r17
    1c78:	f6 01       	movw	r30, r12
    1c7a:	84 85       	ldd	r24, Z+12	; 0x0c
    1c7c:	95 85       	ldd	r25, Z+13	; 0x0d
    1c7e:	0e 94 bb 2c 	call	0x5976	; 0x5976 <memcpy>
    1c82:	ce 01       	movw	r24, r28
    1c84:	8e 0d       	add	r24, r14
    1c86:	9f 1d       	adc	r25, r15
    1c88:	f6 01       	movw	r30, r12
    1c8a:	24 81       	ldd	r18, Z+4	; 0x04
    1c8c:	35 81       	ldd	r19, Z+5	; 0x05
    1c8e:	82 17       	cp	r24, r18
    1c90:	93 07       	cpc	r25, r19
    1c92:	10 f0       	brcs	.+4      	; 0x1c98 <prvWriteBytesToBuffer+0x74>
    1c94:	82 1b       	sub	r24, r18
    1c96:	93 0b       	sbc	r25, r19
    1c98:	f6 01       	movw	r30, r12
    1c9a:	93 83       	std	Z+3, r25	; 0x03
    1c9c:	82 83       	std	Z+2, r24	; 0x02
    1c9e:	c7 01       	movw	r24, r14
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	1f 91       	pop	r17
    1ca6:	0f 91       	pop	r16
    1ca8:	ff 90       	pop	r15
    1caa:	ef 90       	pop	r14
    1cac:	df 90       	pop	r13
    1cae:	cf 90       	pop	r12
    1cb0:	bf 90       	pop	r11
    1cb2:	af 90       	pop	r10
    1cb4:	08 95       	ret

00001cb6 <prvWriteMessageToBuffer>:
    1cb6:	cf 92       	push	r12
    1cb8:	df 92       	push	r13
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	1f 92       	push	r1
    1cc8:	1f 92       	push	r1
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	5a 83       	std	Y+2, r21	; 0x02
    1cd0:	49 83       	std	Y+1, r20	; 0x01
    1cd2:	21 15       	cp	r18, r1
    1cd4:	31 05       	cpc	r19, r1
    1cd6:	c9 f0       	breq	.+50     	; 0x1d0a <prvWriteMessageToBuffer+0x54>
    1cd8:	6b 01       	movw	r12, r22
    1cda:	7c 01       	movw	r14, r24
    1cdc:	fc 01       	movw	r30, r24
    1cde:	86 85       	ldd	r24, Z+14	; 0x0e
    1ce0:	80 fd       	sbrc	r24, 0
    1ce2:	08 c0       	rjmp	.+16     	; 0x1cf4 <prvWriteMessageToBuffer+0x3e>
    1ce4:	ca 01       	movw	r24, r20
    1ce6:	24 17       	cp	r18, r20
    1ce8:	35 07       	cpc	r19, r21
    1cea:	08 f4       	brcc	.+2      	; 0x1cee <prvWriteMessageToBuffer+0x38>
    1cec:	c9 01       	movw	r24, r18
    1cee:	9a 83       	std	Y+2, r25	; 0x02
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	11 c0       	rjmp	.+34     	; 0x1d16 <prvWriteMessageToBuffer+0x60>
    1cf4:	20 17       	cp	r18, r16
    1cf6:	31 07       	cpc	r19, r17
    1cf8:	58 f0       	brcs	.+22     	; 0x1d10 <prvWriteMessageToBuffer+0x5a>
    1cfa:	42 e0       	ldi	r20, 0x02	; 2
    1cfc:	50 e0       	ldi	r21, 0x00	; 0
    1cfe:	be 01       	movw	r22, r28
    1d00:	6f 5f       	subi	r22, 0xFF	; 255
    1d02:	7f 4f       	sbci	r23, 0xFF	; 255
    1d04:	c7 01       	movw	r24, r14
    1d06:	8e df       	rcall	.-228    	; 0x1c24 <prvWriteBytesToBuffer>
    1d08:	06 c0       	rjmp	.+12     	; 0x1d16 <prvWriteMessageToBuffer+0x60>
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	08 c0       	rjmp	.+16     	; 0x1d20 <prvWriteMessageToBuffer+0x6a>
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	05 c0       	rjmp	.+10     	; 0x1d20 <prvWriteMessageToBuffer+0x6a>
    1d16:	49 81       	ldd	r20, Y+1	; 0x01
    1d18:	5a 81       	ldd	r21, Y+2	; 0x02
    1d1a:	b6 01       	movw	r22, r12
    1d1c:	c7 01       	movw	r24, r14
    1d1e:	82 df       	rcall	.-252    	; 0x1c24 <prvWriteBytesToBuffer>
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	ff 90       	pop	r15
    1d2e:	ef 90       	pop	r14
    1d30:	df 90       	pop	r13
    1d32:	cf 90       	pop	r12
    1d34:	08 95       	ret

00001d36 <prvReadBytesFromBuffer>:
    1d36:	af 92       	push	r10
    1d38:	bf 92       	push	r11
    1d3a:	cf 92       	push	r12
    1d3c:	df 92       	push	r13
    1d3e:	ef 92       	push	r14
    1d40:	ff 92       	push	r15
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	7c 01       	movw	r14, r24
    1d4c:	5b 01       	movw	r10, r22
    1d4e:	e9 01       	movw	r28, r18
    1d50:	42 17       	cp	r20, r18
    1d52:	53 07       	cpc	r21, r19
    1d54:	08 f4       	brcc	.+2      	; 0x1d58 <prvReadBytesFromBuffer+0x22>
    1d56:	ea 01       	movw	r28, r20
    1d58:	20 97       	sbiw	r28, 0x00	; 0
    1d5a:	79 f1       	breq	.+94     	; 0x1dba <prvReadBytesFromBuffer+0x84>
    1d5c:	f7 01       	movw	r30, r14
    1d5e:	00 81       	ld	r16, Z
    1d60:	11 81       	ldd	r17, Z+1	; 0x01
    1d62:	c4 80       	ldd	r12, Z+4	; 0x04
    1d64:	d5 80       	ldd	r13, Z+5	; 0x05
    1d66:	c0 1a       	sub	r12, r16
    1d68:	d1 0a       	sbc	r13, r17
    1d6a:	cc 15       	cp	r28, r12
    1d6c:	dd 05       	cpc	r29, r13
    1d6e:	08 f4       	brcc	.+2      	; 0x1d72 <prvReadBytesFromBuffer+0x3c>
    1d70:	6e 01       	movw	r12, r28
    1d72:	f7 01       	movw	r30, r14
    1d74:	64 85       	ldd	r22, Z+12	; 0x0c
    1d76:	75 85       	ldd	r23, Z+13	; 0x0d
    1d78:	60 0f       	add	r22, r16
    1d7a:	71 1f       	adc	r23, r17
    1d7c:	a6 01       	movw	r20, r12
    1d7e:	c5 01       	movw	r24, r10
    1d80:	0e 94 bb 2c 	call	0x5976	; 0x5976 <memcpy>
    1d84:	cc 16       	cp	r12, r28
    1d86:	dd 06       	cpc	r13, r29
    1d88:	58 f4       	brcc	.+22     	; 0x1da0 <prvReadBytesFromBuffer+0x6a>
    1d8a:	ae 01       	movw	r20, r28
    1d8c:	4c 19       	sub	r20, r12
    1d8e:	5d 09       	sbc	r21, r13
    1d90:	f7 01       	movw	r30, r14
    1d92:	64 85       	ldd	r22, Z+12	; 0x0c
    1d94:	75 85       	ldd	r23, Z+13	; 0x0d
    1d96:	c5 01       	movw	r24, r10
    1d98:	8c 0d       	add	r24, r12
    1d9a:	9d 1d       	adc	r25, r13
    1d9c:	0e 94 bb 2c 	call	0x5976	; 0x5976 <memcpy>
    1da0:	0c 0f       	add	r16, r28
    1da2:	1d 1f       	adc	r17, r29
    1da4:	f7 01       	movw	r30, r14
    1da6:	84 81       	ldd	r24, Z+4	; 0x04
    1da8:	95 81       	ldd	r25, Z+5	; 0x05
    1daa:	08 17       	cp	r16, r24
    1dac:	19 07       	cpc	r17, r25
    1dae:	10 f0       	brcs	.+4      	; 0x1db4 <prvReadBytesFromBuffer+0x7e>
    1db0:	08 1b       	sub	r16, r24
    1db2:	19 0b       	sbc	r17, r25
    1db4:	f7 01       	movw	r30, r14
    1db6:	11 83       	std	Z+1, r17	; 0x01
    1db8:	00 83       	st	Z, r16
    1dba:	ce 01       	movw	r24, r28
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	ff 90       	pop	r15
    1dc6:	ef 90       	pop	r14
    1dc8:	df 90       	pop	r13
    1dca:	cf 90       	pop	r12
    1dcc:	bf 90       	pop	r11
    1dce:	af 90       	pop	r10
    1dd0:	08 95       	ret

00001dd2 <xStreamBufferGenericCreate>:
    1dd2:	ef 92       	push	r14
    1dd4:	ff 92       	push	r15
    1dd6:	1f 93       	push	r17
    1dd8:	cf 93       	push	r28
    1dda:	df 93       	push	r29
    1ddc:	eb 01       	movw	r28, r22
    1dde:	11 e0       	ldi	r17, 0x01	; 1
    1de0:	41 30       	cpi	r20, 0x01	; 1
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <xStreamBufferGenericCreate+0x14>
    1de4:	10 e0       	ldi	r17, 0x00	; 0
    1de6:	20 97       	sbiw	r28, 0x00	; 0
    1de8:	11 f4       	brne	.+4      	; 0x1dee <xStreamBufferGenericCreate+0x1c>
    1dea:	c1 e0       	ldi	r28, 0x01	; 1
    1dec:	d0 e0       	ldi	r29, 0x00	; 0
    1dee:	7c 01       	movw	r14, r24
    1df0:	2f ef       	ldi	r18, 0xFF	; 255
    1df2:	e2 1a       	sub	r14, r18
    1df4:	f2 0a       	sbc	r15, r18
    1df6:	41 96       	adiw	r24, 0x11	; 17
    1df8:	51 d8       	rcall	.-3934   	; 0xe9c <pvPortMalloc>
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	81 f0       	breq	.+32     	; 0x1e1e <xStreamBufferGenericCreate+0x4c>
    1dfe:	20 e1       	ldi	r18, 0x10	; 16
    1e00:	fc 01       	movw	r30, r24
    1e02:	11 92       	st	Z+, r1
    1e04:	2a 95       	dec	r18
    1e06:	e9 f7       	brne	.-6      	; 0x1e02 <xStreamBufferGenericCreate+0x30>
    1e08:	9c 01       	movw	r18, r24
    1e0a:	20 5f       	subi	r18, 0xF0	; 240
    1e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0e:	fc 01       	movw	r30, r24
    1e10:	35 87       	std	Z+13, r19	; 0x0d
    1e12:	24 87       	std	Z+12, r18	; 0x0c
    1e14:	f5 82       	std	Z+5, r15	; 0x05
    1e16:	e4 82       	std	Z+4, r14	; 0x04
    1e18:	d7 83       	std	Z+7, r29	; 0x07
    1e1a:	c6 83       	std	Z+6, r28	; 0x06
    1e1c:	16 87       	std	Z+14, r17	; 0x0e
    1e1e:	df 91       	pop	r29
    1e20:	cf 91       	pop	r28
    1e22:	1f 91       	pop	r17
    1e24:	ff 90       	pop	r15
    1e26:	ef 90       	pop	r14
    1e28:	08 95       	ret

00001e2a <xStreamBufferReset>:
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	fc 01       	movw	r30, r24
    1e30:	27 85       	ldd	r18, Z+15	; 0x0f
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	0f 92       	push	r0
    1e38:	80 85       	ldd	r24, Z+8	; 0x08
    1e3a:	91 85       	ldd	r25, Z+9	; 0x09
    1e3c:	89 2b       	or	r24, r25
    1e3e:	d1 f4       	brne	.+52     	; 0x1e74 <xStreamBufferReset+0x4a>
    1e40:	82 85       	ldd	r24, Z+10	; 0x0a
    1e42:	93 85       	ldd	r25, Z+11	; 0x0b
    1e44:	89 2b       	or	r24, r25
    1e46:	c1 f4       	brne	.+48     	; 0x1e78 <xStreamBufferReset+0x4e>
    1e48:	86 85       	ldd	r24, Z+14	; 0x0e
    1e4a:	46 81       	ldd	r20, Z+6	; 0x06
    1e4c:	57 81       	ldd	r21, Z+7	; 0x07
    1e4e:	64 81       	ldd	r22, Z+4	; 0x04
    1e50:	75 81       	ldd	r23, Z+5	; 0x05
    1e52:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e54:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e56:	90 e1       	ldi	r25, 0x10	; 16
    1e58:	ef 01       	movw	r28, r30
    1e5a:	19 92       	st	Y+, r1
    1e5c:	9a 95       	dec	r25
    1e5e:	e9 f7       	brne	.-6      	; 0x1e5a <xStreamBufferReset+0x30>
    1e60:	b5 87       	std	Z+13, r27	; 0x0d
    1e62:	a4 87       	std	Z+12, r26	; 0x0c
    1e64:	75 83       	std	Z+5, r23	; 0x05
    1e66:	64 83       	std	Z+4, r22	; 0x04
    1e68:	57 83       	std	Z+7, r21	; 0x07
    1e6a:	46 83       	std	Z+6, r20	; 0x06
    1e6c:	86 87       	std	Z+14, r24	; 0x0e
    1e6e:	27 87       	std	Z+15, r18	; 0x0f
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	03 c0       	rjmp	.+6      	; 0x1e7a <xStreamBufferReset+0x50>
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <xStreamBufferReset+0x50>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
    1e82:	08 95       	ret

00001e84 <xStreamBufferSpacesAvailable>:
    1e84:	fc 01       	movw	r30, r24
    1e86:	24 81       	ldd	r18, Z+4	; 0x04
    1e88:	35 81       	ldd	r19, Z+5	; 0x05
    1e8a:	80 81       	ld	r24, Z
    1e8c:	91 81       	ldd	r25, Z+1	; 0x01
    1e8e:	42 81       	ldd	r20, Z+2	; 0x02
    1e90:	53 81       	ldd	r21, Z+3	; 0x03
    1e92:	82 0f       	add	r24, r18
    1e94:	93 1f       	adc	r25, r19
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	84 1b       	sub	r24, r20
    1e9a:	95 0b       	sbc	r25, r21
    1e9c:	82 17       	cp	r24, r18
    1e9e:	93 07       	cpc	r25, r19
    1ea0:	10 f0       	brcs	.+4      	; 0x1ea6 <xStreamBufferSpacesAvailable+0x22>
    1ea2:	82 1b       	sub	r24, r18
    1ea4:	93 0b       	sbc	r25, r19
    1ea6:	08 95       	ret

00001ea8 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1ea8:	2f 92       	push	r2
    1eaa:	3f 92       	push	r3
    1eac:	4f 92       	push	r4
    1eae:	5f 92       	push	r5
    1eb0:	6f 92       	push	r6
    1eb2:	7f 92       	push	r7
    1eb4:	8f 92       	push	r8
    1eb6:	9f 92       	push	r9
    1eb8:	af 92       	push	r10
    1eba:	bf 92       	push	r11
    1ebc:	cf 92       	push	r12
    1ebe:	df 92       	push	r13
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	29 97       	sbiw	r28, 0x09	; 9
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	5c 01       	movw	r10, r24
    1ede:	1b 01       	movw	r2, r22
    1ee0:	2a 01       	movw	r4, r20
    1ee2:	0e 83       	std	Y+6, r16	; 0x06
    1ee4:	1f 83       	std	Y+7, r17	; 0x07
    1ee6:	28 87       	std	Y+8, r18	; 0x08
    1ee8:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1eea:	fc 01       	movw	r30, r24
    1eec:	86 85       	ldd	r24, Z+14	; 0x0e
    1eee:	80 ff       	sbrs	r24, 0
    1ef0:	05 c0       	rjmp	.+10     	; 0x1efc <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1ef2:	3a 01       	movw	r6, r20
    1ef4:	f2 e0       	ldi	r31, 0x02	; 2
    1ef6:	6f 0e       	add	r6, r31
    1ef8:	71 1c       	adc	r7, r1
    1efa:	01 c0       	rjmp	.+2      	; 0x1efe <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    1efc:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1efe:	8e 81       	ldd	r24, Y+6	; 0x06
    1f00:	9f 81       	ldd	r25, Y+7	; 0x07
    1f02:	a8 85       	ldd	r26, Y+8	; 0x08
    1f04:	b9 85       	ldd	r27, Y+9	; 0x09
    1f06:	89 2b       	or	r24, r25
    1f08:	8a 2b       	or	r24, r26
    1f0a:	8b 2b       	or	r24, r27
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <xStreamBufferSend+0x68>
    1f0e:	35 c0       	rjmp	.+106    	; 0x1f7a <xStreamBufferSend+0xd2>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1f10:	ce 01       	movw	r24, r28
    1f12:	01 96       	adiw	r24, 0x01	; 1
    1f14:	81 d6       	rcall	.+3330   	; 0x2c18 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1f1c:	c5 01       	movw	r24, r10
    1f1e:	b2 df       	rcall	.-156    	; 0x1e84 <xStreamBufferSpacesAvailable>
    1f20:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    1f22:	86 15       	cp	r24, r6
    1f24:	97 05       	cpc	r25, r7
    1f26:	20 f5       	brcc	.+72     	; 0x1f70 <xStreamBufferSend+0xc8>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	0e 94 5e 19 	call	0x32bc	; 0x32bc <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1f30:	f3 d6       	rcall	.+3558   	; 0x2d18 <xTaskGetCurrentTaskHandle>
    1f32:	f5 01       	movw	r30, r10
    1f34:	93 87       	std	Z+11, r25	; 0x0b
    1f36:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1f38:	0f 90       	pop	r0
    1f3a:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1f3c:	ce 80       	ldd	r12, Y+6	; 0x06
    1f3e:	df 80       	ldd	r13, Y+7	; 0x07
    1f40:	e8 84       	ldd	r14, Y+8	; 0x08
    1f42:	f9 84       	ldd	r15, Y+9	; 0x09
    1f44:	00 e0       	ldi	r16, 0x00	; 0
    1f46:	10 e0       	ldi	r17, 0x00	; 0
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	a9 01       	movw	r20, r18
    1f4e:	60 e0       	ldi	r22, 0x00	; 0
    1f50:	70 e0       	ldi	r23, 0x00	; 0
    1f52:	cb 01       	movw	r24, r22
    1f54:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1f58:	f5 01       	movw	r30, r10
    1f5a:	13 86       	std	Z+11, r1	; 0x0b
    1f5c:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1f5e:	be 01       	movw	r22, r28
    1f60:	6a 5f       	subi	r22, 0xFA	; 250
    1f62:	7f 4f       	sbci	r23, 0xFF	; 255
    1f64:	ce 01       	movw	r24, r28
    1f66:	01 96       	adiw	r24, 0x01	; 1
    1f68:	7e d6       	rcall	.+3324   	; 0x2c66 <xTaskCheckForTimeOut>
    1f6a:	88 23       	and	r24, r24
    1f6c:	a1 f2       	breq	.-88     	; 0x1f16 <xStreamBufferSend+0x6e>
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <xStreamBufferSend+0xcc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1f70:	0f 90       	pop	r0
    1f72:	0f be       	out	0x3f, r0	; 63
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1f74:	81 14       	cp	r8, r1
    1f76:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1f78:	19 f4       	brne	.+6      	; 0x1f80 <xStreamBufferSend+0xd8>
    1f7a:	c5 01       	movw	r24, r10
    1f7c:	83 df       	rcall	.-250    	; 0x1e84 <xStreamBufferSpacesAvailable>
    1f7e:	4c 01       	movw	r8, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1f80:	83 01       	movw	r16, r6
    1f82:	94 01       	movw	r18, r8
    1f84:	a2 01       	movw	r20, r4
    1f86:	b1 01       	movw	r22, r2
    1f88:	c5 01       	movw	r24, r10
    1f8a:	95 de       	rcall	.-726    	; 0x1cb6 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    1f8c:	7c 01       	movw	r14, r24
    1f8e:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1f90:	e1 f0       	breq	.+56     	; 0x1fca <xStreamBufferSend+0x122>
    1f92:	c5 01       	movw	r24, r10
    1f94:	34 de       	rcall	.-920    	; 0x1bfe <prvBytesInBuffer>
    1f96:	f5 01       	movw	r30, r10
    1f98:	26 81       	ldd	r18, Z+6	; 0x06
    1f9a:	37 81       	ldd	r19, Z+7	; 0x07
    1f9c:	82 17       	cp	r24, r18
    1f9e:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1fa0:	a0 f0       	brcs	.+40     	; 0x1fca <xStreamBufferSend+0x122>
    1fa2:	0e d3       	rcall	.+1564   	; 0x25c0 <vTaskSuspendAll>
    1fa4:	f5 01       	movw	r30, r10
    1fa6:	80 85       	ldd	r24, Z+8	; 0x08
    1fa8:	91 85       	ldd	r25, Z+9	; 0x09
    1faa:	89 2b       	or	r24, r25
    1fac:	69 f0       	breq	.+26     	; 0x1fc8 <xStreamBufferSend+0x120>
    1fae:	80 85       	ldd	r24, Z+8	; 0x08
    1fb0:	91 85       	ldd	r25, Z+9	; 0x09
    1fb2:	00 e0       	ldi	r16, 0x00	; 0
    1fb4:	10 e0       	ldi	r17, 0x00	; 0
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	ba 01       	movw	r22, r20
    1fbe:	0e 94 5d 18 	call	0x30ba	; 0x30ba <xTaskGenericNotify>
    1fc2:	f5 01       	movw	r30, r10
    1fc4:	11 86       	std	Z+9, r1	; 0x09
    1fc6:	10 86       	std	Z+8, r1	; 0x08
    1fc8:	e4 d3       	rcall	.+1992   	; 0x2792 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1fca:	c7 01       	movw	r24, r14
    1fcc:	29 96       	adiw	r28, 0x09	; 9
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	1f 91       	pop	r17
    1fde:	0f 91       	pop	r16
    1fe0:	ff 90       	pop	r15
    1fe2:	ef 90       	pop	r14
    1fe4:	df 90       	pop	r13
    1fe6:	cf 90       	pop	r12
    1fe8:	bf 90       	pop	r11
    1fea:	af 90       	pop	r10
    1fec:	9f 90       	pop	r9
    1fee:	8f 90       	pop	r8
    1ff0:	7f 90       	pop	r7
    1ff2:	6f 90       	pop	r6
    1ff4:	5f 90       	pop	r5
    1ff6:	4f 90       	pop	r4
    1ff8:	3f 90       	pop	r3
    1ffa:	2f 90       	pop	r2
    1ffc:	08 95       	ret

00001ffe <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1ffe:	af 92       	push	r10
    2000:	bf 92       	push	r11
    2002:	cf 92       	push	r12
    2004:	df 92       	push	r13
    2006:	ef 92       	push	r14
    2008:	ff 92       	push	r15
    200a:	0f 93       	push	r16
    200c:	1f 93       	push	r17
    200e:	cf 93       	push	r28
    2010:	df 93       	push	r29
    2012:	ec 01       	movw	r28, r24
    2014:	5b 01       	movw	r10, r22
    2016:	6a 01       	movw	r12, r20
    2018:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    201a:	8e 85       	ldd	r24, Y+14	; 0x0e
    201c:	80 ff       	sbrs	r24, 0
    201e:	04 c0       	rjmp	.+8      	; 0x2028 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2020:	8a 01       	movw	r16, r20
    2022:	0e 5f       	subi	r16, 0xFE	; 254
    2024:	1f 4f       	sbci	r17, 0xFF	; 255
    2026:	01 c0       	rjmp	.+2      	; 0x202a <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    2028:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    202a:	ce 01       	movw	r24, r28
    202c:	2b df       	rcall	.-426    	; 0x1e84 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    202e:	9c 01       	movw	r18, r24
    2030:	a6 01       	movw	r20, r12
    2032:	b5 01       	movw	r22, r10
    2034:	ce 01       	movw	r24, r28
    2036:	3f de       	rcall	.-898    	; 0x1cb6 <prvWriteMessageToBuffer>
    2038:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    203a:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    203c:	b9 f0       	breq	.+46     	; 0x206c <xStreamBufferSendFromISR+0x6e>
    203e:	ce 01       	movw	r24, r28
    2040:	de dd       	rcall	.-1092   	; 0x1bfe <prvBytesInBuffer>
    2042:	2e 81       	ldd	r18, Y+6	; 0x06
    2044:	3f 81       	ldd	r19, Y+7	; 0x07
    2046:	82 17       	cp	r24, r18
    2048:	93 07       	cpc	r25, r19
    204a:	80 f0       	brcs	.+32     	; 0x206c <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    204c:	88 85       	ldd	r24, Y+8	; 0x08
    204e:	99 85       	ldd	r25, Y+9	; 0x09
    2050:	89 2b       	or	r24, r25
    2052:	61 f0       	breq	.+24     	; 0x206c <xStreamBufferSendFromISR+0x6e>
    2054:	88 85       	ldd	r24, Y+8	; 0x08
    2056:	99 85       	ldd	r25, Y+9	; 0x09
    2058:	00 e0       	ldi	r16, 0x00	; 0
    205a:	10 e0       	ldi	r17, 0x00	; 0
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	40 e0       	ldi	r20, 0x00	; 0
    2060:	50 e0       	ldi	r21, 0x00	; 0
    2062:	ba 01       	movw	r22, r20
    2064:	0e 94 d5 18 	call	0x31aa	; 0x31aa <xTaskGenericNotifyFromISR>
    2068:	19 86       	std	Y+9, r1	; 0x09
    206a:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    206c:	c6 01       	movw	r24, r12
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	1f 91       	pop	r17
    2074:	0f 91       	pop	r16
    2076:	ff 90       	pop	r15
    2078:	ef 90       	pop	r14
    207a:	df 90       	pop	r13
    207c:	cf 90       	pop	r12
    207e:	bf 90       	pop	r11
    2080:	af 90       	pop	r10
    2082:	08 95       	ret

00002084 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    2084:	4f 92       	push	r4
    2086:	5f 92       	push	r5
    2088:	6f 92       	push	r6
    208a:	7f 92       	push	r7
    208c:	8f 92       	push	r8
    208e:	9f 92       	push	r9
    2090:	af 92       	push	r10
    2092:	bf 92       	push	r11
    2094:	cf 92       	push	r12
    2096:	df 92       	push	r13
    2098:	ef 92       	push	r14
    209a:	ff 92       	push	r15
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	1f 92       	push	r1
    20a6:	1f 92       	push	r1
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	5c 01       	movw	r10, r24
    20ae:	2b 01       	movw	r4, r22
    20b0:	3a 01       	movw	r6, r20
    20b2:	68 01       	movw	r12, r16
    20b4:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    20b6:	fc 01       	movw	r30, r24
    20b8:	86 85       	ldd	r24, Z+14	; 0x0e
    20ba:	80 fd       	sbrc	r24, 0
    20bc:	03 c0       	rjmp	.+6      	; 0x20c4 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    20be:	81 2c       	mov	r8, r1
    20c0:	91 2c       	mov	r9, r1
    20c2:	04 c0       	rjmp	.+8      	; 0x20cc <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    20c4:	68 94       	set
    20c6:	88 24       	eor	r8, r8
    20c8:	81 f8       	bld	r8, 1
    20ca:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    20cc:	c1 14       	cp	r12, r1
    20ce:	d1 04       	cpc	r13, r1
    20d0:	e1 04       	cpc	r14, r1
    20d2:	f1 04       	cpc	r15, r1
    20d4:	31 f1       	breq	.+76     	; 0x2122 <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	f8 94       	cli
    20da:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    20dc:	c5 01       	movw	r24, r10
    20de:	8f dd       	rcall	.-1250   	; 0x1bfe <prvBytesInBuffer>
    20e0:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    20e2:	88 16       	cp	r8, r24
    20e4:	99 06       	cpc	r9, r25
    20e6:	40 f0       	brcs	.+16     	; 0x20f8 <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0e 94 5e 19 	call	0x32bc	; 0x32bc <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    20f0:	13 d6       	rcall	.+3110   	; 0x2d18 <xTaskGetCurrentTaskHandle>
    20f2:	f5 01       	movw	r30, r10
    20f4:	91 87       	std	Z+9, r25	; 0x09
    20f6:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    20f8:	0f 90       	pop	r0
    20fa:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    20fc:	80 16       	cp	r8, r16
    20fe:	91 06       	cpc	r9, r17
    2100:	b0 f0       	brcs	.+44     	; 0x212e <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2102:	00 e0       	ldi	r16, 0x00	; 0
    2104:	10 e0       	ldi	r17, 0x00	; 0
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	a9 01       	movw	r20, r18
    210c:	60 e0       	ldi	r22, 0x00	; 0
    210e:	70 e0       	ldi	r23, 0x00	; 0
    2110:	cb 01       	movw	r24, r22
    2112:	49 d7       	rcall	.+3730   	; 0x2fa6 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    2114:	f5 01       	movw	r30, r10
    2116:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2118:	10 86       	std	Z+8, r1	; 0x08
    211a:	c5 01       	movw	r24, r10
    211c:	70 dd       	rcall	.-1312   	; 0x1bfe <prvBytesInBuffer>
    211e:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2120:	03 c0       	rjmp	.+6      	; 0x2128 <xStreamBufferReceive+0xa4>
    2122:	c5 01       	movw	r24, r10
    2124:	6c dd       	rcall	.-1320   	; 0x1bfe <prvBytesInBuffer>
    2126:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2128:	80 16       	cp	r8, r16
    212a:	91 06       	cpc	r9, r17
    212c:	b8 f5       	brcc	.+110    	; 0x219c <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    212e:	81 14       	cp	r8, r1
    2130:	91 04       	cpc	r9, r1
    2132:	c1 f0       	breq	.+48     	; 0x2164 <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    2134:	f5 01       	movw	r30, r10
    2136:	e0 80       	ld	r14, Z
    2138:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    213a:	98 01       	movw	r18, r16
    213c:	a4 01       	movw	r20, r8
    213e:	be 01       	movw	r22, r28
    2140:	6f 5f       	subi	r22, 0xFF	; 255
    2142:	7f 4f       	sbci	r23, 0xFF	; 255
    2144:	c5 01       	movw	r24, r10
    2146:	f7 dd       	rcall	.-1042   	; 0x1d36 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    214c:	08 19       	sub	r16, r8
    214e:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    2150:	68 16       	cp	r6, r24
    2152:	79 06       	cpc	r7, r25
    2154:	30 f4       	brcc	.+12     	; 0x2162 <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    2156:	f5 01       	movw	r30, r10
    2158:	f1 82       	std	Z+1, r15	; 0x01
    215a:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    215c:	61 2c       	mov	r6, r1
    215e:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2160:	01 c0       	rjmp	.+2      	; 0x2164 <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    2162:	3c 01       	movw	r6, r24
    2164:	98 01       	movw	r18, r16
    2166:	a3 01       	movw	r20, r6
    2168:	b2 01       	movw	r22, r4
    216a:	c5 01       	movw	r24, r10
    216c:	e4 dd       	rcall	.-1080   	; 0x1d36 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    216e:	7c 01       	movw	r14, r24
    2170:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    2172:	b1 f0       	breq	.+44     	; 0x21a0 <xStreamBufferReceive+0x11c>
    2174:	25 d2       	rcall	.+1098   	; 0x25c0 <vTaskSuspendAll>
    2176:	f5 01       	movw	r30, r10
    2178:	82 85       	ldd	r24, Z+10	; 0x0a
    217a:	93 85       	ldd	r25, Z+11	; 0x0b
    217c:	89 2b       	or	r24, r25
    217e:	61 f0       	breq	.+24     	; 0x2198 <xStreamBufferReceive+0x114>
    2180:	82 85       	ldd	r24, Z+10	; 0x0a
    2182:	93 85       	ldd	r25, Z+11	; 0x0b
    2184:	00 e0       	ldi	r16, 0x00	; 0
    2186:	10 e0       	ldi	r17, 0x00	; 0
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	ba 01       	movw	r22, r20
    2190:	94 d7       	rcall	.+3880   	; 0x30ba <xTaskGenericNotify>
    2192:	f5 01       	movw	r30, r10
    2194:	13 86       	std	Z+11, r1	; 0x0b
    2196:	12 86       	std	Z+10, r1	; 0x0a
    2198:	fc d2       	rcall	.+1528   	; 0x2792 <xTaskResumeAll>
    219a:	02 c0       	rjmp	.+4      	; 0x21a0 <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    219c:	e1 2c       	mov	r14, r1
    219e:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    21a0:	c7 01       	movw	r24, r14
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	df 91       	pop	r29
    21a8:	cf 91       	pop	r28
    21aa:	1f 91       	pop	r17
    21ac:	0f 91       	pop	r16
    21ae:	ff 90       	pop	r15
    21b0:	ef 90       	pop	r14
    21b2:	df 90       	pop	r13
    21b4:	cf 90       	pop	r12
    21b6:	bf 90       	pop	r11
    21b8:	af 90       	pop	r10
    21ba:	9f 90       	pop	r9
    21bc:	8f 90       	pop	r8
    21be:	7f 90       	pop	r7
    21c0:	6f 90       	pop	r6
    21c2:	5f 90       	pop	r5
    21c4:	4f 90       	pop	r4
    21c6:	08 95       	ret

000021c8 <prvResetNextTaskUnblockTime>:
    21c8:	e0 91 ea 17 	lds	r30, 0x17EA	; 0x8017ea <pxDelayedTaskList>
    21cc:	f0 91 eb 17 	lds	r31, 0x17EB	; 0x8017eb <pxDelayedTaskList+0x1>
    21d0:	80 81       	ld	r24, Z
    21d2:	81 11       	cpse	r24, r1
    21d4:	0c c0       	rjmp	.+24     	; 0x21ee <prvResetNextTaskUnblockTime+0x26>
    21d6:	8f ef       	ldi	r24, 0xFF	; 255
    21d8:	9f ef       	ldi	r25, 0xFF	; 255
    21da:	dc 01       	movw	r26, r24
    21dc:	80 93 b7 17 	sts	0x17B7, r24	; 0x8017b7 <xNextTaskUnblockTime>
    21e0:	90 93 b8 17 	sts	0x17B8, r25	; 0x8017b8 <xNextTaskUnblockTime+0x1>
    21e4:	a0 93 b9 17 	sts	0x17B9, r26	; 0x8017b9 <xNextTaskUnblockTime+0x2>
    21e8:	b0 93 ba 17 	sts	0x17BA, r27	; 0x8017ba <xNextTaskUnblockTime+0x3>
    21ec:	08 95       	ret
    21ee:	e0 91 ea 17 	lds	r30, 0x17EA	; 0x8017ea <pxDelayedTaskList>
    21f2:	f0 91 eb 17 	lds	r31, 0x17EB	; 0x8017eb <pxDelayedTaskList+0x1>
    21f6:	07 80       	ldd	r0, Z+7	; 0x07
    21f8:	f0 85       	ldd	r31, Z+8	; 0x08
    21fa:	e0 2d       	mov	r30, r0
    21fc:	00 84       	ldd	r0, Z+8	; 0x08
    21fe:	f1 85       	ldd	r31, Z+9	; 0x09
    2200:	e0 2d       	mov	r30, r0
    2202:	82 81       	ldd	r24, Z+2	; 0x02
    2204:	93 81       	ldd	r25, Z+3	; 0x03
    2206:	a4 81       	ldd	r26, Z+4	; 0x04
    2208:	b5 81       	ldd	r27, Z+5	; 0x05
    220a:	80 93 b7 17 	sts	0x17B7, r24	; 0x8017b7 <xNextTaskUnblockTime>
    220e:	90 93 b8 17 	sts	0x17B8, r25	; 0x8017b8 <xNextTaskUnblockTime+0x1>
    2212:	a0 93 b9 17 	sts	0x17B9, r26	; 0x8017b9 <xNextTaskUnblockTime+0x2>
    2216:	b0 93 ba 17 	sts	0x17BA, r27	; 0x8017ba <xNextTaskUnblockTime+0x3>
    221a:	08 95       	ret

0000221c <prvAddCurrentTaskToDelayedList>:
    221c:	8f 92       	push	r8
    221e:	9f 92       	push	r9
    2220:	af 92       	push	r10
    2222:	bf 92       	push	r11
    2224:	cf 92       	push	r12
    2226:	df 92       	push	r13
    2228:	ef 92       	push	r14
    222a:	ff 92       	push	r15
    222c:	cf 93       	push	r28
    222e:	6b 01       	movw	r12, r22
    2230:	7c 01       	movw	r14, r24
    2232:	c4 2f       	mov	r28, r20
    2234:	80 90 c1 17 	lds	r8, 0x17C1	; 0x8017c1 <xTickCount>
    2238:	90 90 c2 17 	lds	r9, 0x17C2	; 0x8017c2 <xTickCount+0x1>
    223c:	a0 90 c3 17 	lds	r10, 0x17C3	; 0x8017c3 <xTickCount+0x2>
    2240:	b0 90 c4 17 	lds	r11, 0x17C4	; 0x8017c4 <xTickCount+0x3>
    2244:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <pxCurrentTCB>
    2248:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    224c:	02 96       	adiw	r24, 0x02	; 2
    224e:	0e 94 ab 08 	call	0x1156	; 0x1156 <uxListRemove>
    2252:	8f ef       	ldi	r24, 0xFF	; 255
    2254:	c8 16       	cp	r12, r24
    2256:	d8 06       	cpc	r13, r24
    2258:	e8 06       	cpc	r14, r24
    225a:	f8 06       	cpc	r15, r24
    225c:	69 f4       	brne	.+26     	; 0x2278 <prvAddCurrentTaskToDelayedList+0x5c>
    225e:	cc 23       	and	r28, r28
    2260:	59 f0       	breq	.+22     	; 0x2278 <prvAddCurrentTaskToDelayedList+0x5c>
    2262:	60 91 2e 18 	lds	r22, 0x182E	; 0x80182e <pxCurrentTCB>
    2266:	70 91 2f 18 	lds	r23, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    226a:	6e 5f       	subi	r22, 0xFE	; 254
    226c:	7f 4f       	sbci	r23, 0xFF	; 255
    226e:	86 ec       	ldi	r24, 0xC6	; 198
    2270:	97 e1       	ldi	r25, 0x17	; 23
    2272:	0e 94 4d 08 	call	0x109a	; 0x109a <vListInsertEnd>
    2276:	3f c0       	rjmp	.+126    	; 0x22f6 <prvAddCurrentTaskToDelayedList+0xda>
    2278:	c8 0c       	add	r12, r8
    227a:	d9 1c       	adc	r13, r9
    227c:	ea 1c       	adc	r14, r10
    227e:	fb 1c       	adc	r15, r11
    2280:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    2284:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2288:	c2 82       	std	Z+2, r12	; 0x02
    228a:	d3 82       	std	Z+3, r13	; 0x03
    228c:	e4 82       	std	Z+4, r14	; 0x04
    228e:	f5 82       	std	Z+5, r15	; 0x05
    2290:	c8 14       	cp	r12, r8
    2292:	d9 04       	cpc	r13, r9
    2294:	ea 04       	cpc	r14, r10
    2296:	fb 04       	cpc	r15, r11
    2298:	68 f4       	brcc	.+26     	; 0x22b4 <prvAddCurrentTaskToDelayedList+0x98>
    229a:	60 91 2e 18 	lds	r22, 0x182E	; 0x80182e <pxCurrentTCB>
    229e:	70 91 2f 18 	lds	r23, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    22a2:	80 91 e8 17 	lds	r24, 0x17E8	; 0x8017e8 <pxOverflowDelayedTaskList>
    22a6:	90 91 e9 17 	lds	r25, 0x17E9	; 0x8017e9 <pxOverflowDelayedTaskList+0x1>
    22aa:	6e 5f       	subi	r22, 0xFE	; 254
    22ac:	7f 4f       	sbci	r23, 0xFF	; 255
    22ae:	0e 94 6e 08 	call	0x10dc	; 0x10dc <vListInsert>
    22b2:	21 c0       	rjmp	.+66     	; 0x22f6 <prvAddCurrentTaskToDelayedList+0xda>
    22b4:	60 91 2e 18 	lds	r22, 0x182E	; 0x80182e <pxCurrentTCB>
    22b8:	70 91 2f 18 	lds	r23, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    22bc:	80 91 ea 17 	lds	r24, 0x17EA	; 0x8017ea <pxDelayedTaskList>
    22c0:	90 91 eb 17 	lds	r25, 0x17EB	; 0x8017eb <pxDelayedTaskList+0x1>
    22c4:	6e 5f       	subi	r22, 0xFE	; 254
    22c6:	7f 4f       	sbci	r23, 0xFF	; 255
    22c8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <vListInsert>
    22cc:	80 91 b7 17 	lds	r24, 0x17B7	; 0x8017b7 <xNextTaskUnblockTime>
    22d0:	90 91 b8 17 	lds	r25, 0x17B8	; 0x8017b8 <xNextTaskUnblockTime+0x1>
    22d4:	a0 91 b9 17 	lds	r26, 0x17B9	; 0x8017b9 <xNextTaskUnblockTime+0x2>
    22d8:	b0 91 ba 17 	lds	r27, 0x17BA	; 0x8017ba <xNextTaskUnblockTime+0x3>
    22dc:	c8 16       	cp	r12, r24
    22de:	d9 06       	cpc	r13, r25
    22e0:	ea 06       	cpc	r14, r26
    22e2:	fb 06       	cpc	r15, r27
    22e4:	40 f4       	brcc	.+16     	; 0x22f6 <prvAddCurrentTaskToDelayedList+0xda>
    22e6:	c0 92 b7 17 	sts	0x17B7, r12	; 0x8017b7 <xNextTaskUnblockTime>
    22ea:	d0 92 b8 17 	sts	0x17B8, r13	; 0x8017b8 <xNextTaskUnblockTime+0x1>
    22ee:	e0 92 b9 17 	sts	0x17B9, r14	; 0x8017b9 <xNextTaskUnblockTime+0x2>
    22f2:	f0 92 ba 17 	sts	0x17BA, r15	; 0x8017ba <xNextTaskUnblockTime+0x3>
    22f6:	cf 91       	pop	r28
    22f8:	ff 90       	pop	r15
    22fa:	ef 90       	pop	r14
    22fc:	df 90       	pop	r13
    22fe:	cf 90       	pop	r12
    2300:	bf 90       	pop	r11
    2302:	af 90       	pop	r10
    2304:	9f 90       	pop	r9
    2306:	8f 90       	pop	r8
    2308:	08 95       	ret

0000230a <xTaskCreate>:
    230a:	4f 92       	push	r4
    230c:	5f 92       	push	r5
    230e:	6f 92       	push	r6
    2310:	7f 92       	push	r7
    2312:	8f 92       	push	r8
    2314:	9f 92       	push	r9
    2316:	af 92       	push	r10
    2318:	bf 92       	push	r11
    231a:	cf 92       	push	r12
    231c:	df 92       	push	r13
    231e:	ef 92       	push	r14
    2320:	ff 92       	push	r15
    2322:	0f 93       	push	r16
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	4c 01       	movw	r8, r24
    232a:	6b 01       	movw	r12, r22
    232c:	5a 01       	movw	r10, r20
    232e:	29 01       	movw	r4, r18
    2330:	ca 01       	movw	r24, r20
    2332:	0e 94 4e 07 	call	0xe9c	; 0xe9c <pvPortMalloc>
    2336:	3c 01       	movw	r6, r24
    2338:	89 2b       	or	r24, r25
    233a:	09 f4       	brne	.+2      	; 0x233e <xTaskCreate+0x34>
    233c:	f4 c0       	rjmp	.+488    	; 0x2526 <xTaskCreate+0x21c>
    233e:	80 e3       	ldi	r24, 0x30	; 48
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	0e 94 4e 07 	call	0xe9c	; 0xe9c <pvPortMalloc>
    2346:	ec 01       	movw	r28, r24
    2348:	89 2b       	or	r24, r25
    234a:	99 f0       	breq	.+38     	; 0x2372 <xTaskCreate+0x68>
    234c:	7c 8e       	std	Y+28, r7	; 0x1c
    234e:	6b 8e       	std	Y+27, r6	; 0x1b
    2350:	a5 01       	movw	r20, r10
    2352:	65 ea       	ldi	r22, 0xA5	; 165
    2354:	70 e0       	ldi	r23, 0x00	; 0
    2356:	c3 01       	movw	r24, r6
    2358:	0e 94 c4 2c 	call	0x5988	; 0x5988 <memset>
    235c:	21 e0       	ldi	r18, 0x01	; 1
    235e:	a2 1a       	sub	r10, r18
    2360:	b1 08       	sbc	r11, r1
    2362:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2364:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2366:	a8 0e       	add	r10, r24
    2368:	b9 1e       	adc	r11, r25
    236a:	c1 14       	cp	r12, r1
    236c:	d1 04       	cpc	r13, r1
    236e:	29 f4       	brne	.+10     	; 0x237a <xTaskCreate+0x70>
    2370:	20 c0       	rjmp	.+64     	; 0x23b2 <xTaskCreate+0xa8>
    2372:	c3 01       	movw	r24, r6
    2374:	0e 94 07 08 	call	0x100e	; 0x100e <vPortFree>
    2378:	d6 c0       	rjmp	.+428    	; 0x2526 <xTaskCreate+0x21c>
    237a:	d6 01       	movw	r26, r12
    237c:	8c 91       	ld	r24, X
    237e:	8d 8f       	std	Y+29, r24	; 0x1d
    2380:	8c 91       	ld	r24, X
    2382:	88 23       	and	r24, r24
    2384:	a1 f0       	breq	.+40     	; 0x23ae <xTaskCreate+0xa4>
    2386:	ae 01       	movw	r20, r28
    2388:	42 5e       	subi	r20, 0xE2	; 226
    238a:	5f 4f       	sbci	r21, 0xFF	; 255
    238c:	f6 01       	movw	r30, r12
    238e:	31 96       	adiw	r30, 0x01	; 1
    2390:	b8 e0       	ldi	r27, 0x08	; 8
    2392:	cb 0e       	add	r12, r27
    2394:	d1 1c       	adc	r13, r1
    2396:	cf 01       	movw	r24, r30
    2398:	21 91       	ld	r18, Z+
    239a:	da 01       	movw	r26, r20
    239c:	2d 93       	st	X+, r18
    239e:	ad 01       	movw	r20, r26
    23a0:	dc 01       	movw	r26, r24
    23a2:	8c 91       	ld	r24, X
    23a4:	88 23       	and	r24, r24
    23a6:	19 f0       	breq	.+6      	; 0x23ae <xTaskCreate+0xa4>
    23a8:	ec 15       	cp	r30, r12
    23aa:	fd 05       	cpc	r31, r13
    23ac:	a1 f7       	brne	.-24     	; 0x2396 <xTaskCreate+0x8c>
    23ae:	1c a2       	std	Y+36, r1	; 0x24
    23b0:	01 c0       	rjmp	.+2      	; 0x23b4 <xTaskCreate+0xaa>
    23b2:	1d 8e       	std	Y+29, r1	; 0x1d
    23b4:	04 30       	cpi	r16, 0x04	; 4
    23b6:	08 f0       	brcs	.+2      	; 0x23ba <xTaskCreate+0xb0>
    23b8:	03 e0       	ldi	r16, 0x03	; 3
    23ba:	0a 8f       	std	Y+26, r16	; 0x1a
    23bc:	0f a3       	std	Y+39, r16	; 0x27
    23be:	18 a6       	std	Y+40, r1	; 0x28
    23c0:	6e 01       	movw	r12, r28
    23c2:	b2 e0       	ldi	r27, 0x02	; 2
    23c4:	cb 0e       	add	r12, r27
    23c6:	d1 1c       	adc	r13, r1
    23c8:	c6 01       	movw	r24, r12
    23ca:	0e 94 49 08 	call	0x1092	; 0x1092 <vListInitialiseItem>
    23ce:	ce 01       	movw	r24, r28
    23d0:	0e 96       	adiw	r24, 0x0e	; 14
    23d2:	0e 94 49 08 	call	0x1092	; 0x1092 <vListInitialiseItem>
    23d6:	db 87       	std	Y+11, r29	; 0x0b
    23d8:	ca 87       	std	Y+10, r28	; 0x0a
    23da:	84 e0       	ldi	r24, 0x04	; 4
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	a0 e0       	ldi	r26, 0x00	; 0
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	80 1b       	sub	r24, r16
    23e4:	91 09       	sbc	r25, r1
    23e6:	a1 09       	sbc	r26, r1
    23e8:	b1 09       	sbc	r27, r1
    23ea:	8e 87       	std	Y+14, r24	; 0x0e
    23ec:	9f 87       	std	Y+15, r25	; 0x0f
    23ee:	a8 8b       	std	Y+16, r26	; 0x10
    23f0:	b9 8b       	std	Y+17, r27	; 0x11
    23f2:	df 8b       	std	Y+23, r29	; 0x17
    23f4:	ce 8b       	std	Y+22, r28	; 0x16
    23f6:	1a a6       	std	Y+42, r1	; 0x2a
    23f8:	19 a6       	std	Y+41, r1	; 0x29
    23fa:	1b a6       	std	Y+43, r1	; 0x2b
    23fc:	1c a6       	std	Y+44, r1	; 0x2c
    23fe:	1d a6       	std	Y+45, r1	; 0x2d
    2400:	1e a6       	std	Y+46, r1	; 0x2e
    2402:	1f a6       	std	Y+47, r1	; 0x2f
    2404:	a2 01       	movw	r20, r4
    2406:	b4 01       	movw	r22, r8
    2408:	c5 01       	movw	r24, r10
    240a:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <pxPortInitialiseStack>
    240e:	99 83       	std	Y+1, r25	; 0x01
    2410:	88 83       	st	Y, r24
    2412:	e1 14       	cp	r14, r1
    2414:	f1 04       	cpc	r15, r1
    2416:	19 f0       	breq	.+6      	; 0x241e <xTaskCreate+0x114>
    2418:	f7 01       	movw	r30, r14
    241a:	d1 83       	std	Z+1, r29	; 0x01
    241c:	c0 83       	st	Z, r28
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	0f 92       	push	r0
    2424:	80 91 c5 17 	lds	r24, 0x17C5	; 0x8017c5 <uxCurrentNumberOfTasks>
    2428:	8f 5f       	subi	r24, 0xFF	; 255
    242a:	80 93 c5 17 	sts	0x17C5, r24	; 0x8017c5 <uxCurrentNumberOfTasks>
    242e:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <pxCurrentTCB>
    2432:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2436:	89 2b       	or	r24, r25
    2438:	d1 f5       	brne	.+116    	; 0x24ae <xTaskCreate+0x1a4>
    243a:	d0 93 2f 18 	sts	0x182F, r29	; 0x80182f <pxCurrentTCB+0x1>
    243e:	c0 93 2e 18 	sts	0x182E, r28	; 0x80182e <pxCurrentTCB>
    2442:	80 91 c5 17 	lds	r24, 0x17C5	; 0x8017c5 <uxCurrentNumberOfTasks>
    2446:	81 30       	cpi	r24, 0x01	; 1
    2448:	09 f0       	breq	.+2      	; 0x244c <xTaskCreate+0x142>
    244a:	41 c0       	rjmp	.+130    	; 0x24ce <xTaskCreate+0x1c4>
    244c:	82 e0       	ldi	r24, 0x02	; 2
    244e:	98 e1       	ldi	r25, 0x18	; 24
    2450:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInitialise>
    2454:	8d e0       	ldi	r24, 0x0D	; 13
    2456:	98 e1       	ldi	r25, 0x18	; 24
    2458:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInitialise>
    245c:	88 e1       	ldi	r24, 0x18	; 24
    245e:	98 e1       	ldi	r25, 0x18	; 24
    2460:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInitialise>
    2464:	83 e2       	ldi	r24, 0x23	; 35
    2466:	98 e1       	ldi	r25, 0x18	; 24
    2468:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInitialise>
    246c:	87 ef       	ldi	r24, 0xF7	; 247
    246e:	97 e1       	ldi	r25, 0x17	; 23
    2470:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInitialise>
    2474:	8c ee       	ldi	r24, 0xEC	; 236
    2476:	97 e1       	ldi	r25, 0x17	; 23
    2478:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInitialise>
    247c:	8d ed       	ldi	r24, 0xDD	; 221
    247e:	97 e1       	ldi	r25, 0x17	; 23
    2480:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInitialise>
    2484:	82 ed       	ldi	r24, 0xD2	; 210
    2486:	97 e1       	ldi	r25, 0x17	; 23
    2488:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInitialise>
    248c:	86 ec       	ldi	r24, 0xC6	; 198
    248e:	97 e1       	ldi	r25, 0x17	; 23
    2490:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInitialise>
    2494:	87 ef       	ldi	r24, 0xF7	; 247
    2496:	97 e1       	ldi	r25, 0x17	; 23
    2498:	90 93 eb 17 	sts	0x17EB, r25	; 0x8017eb <pxDelayedTaskList+0x1>
    249c:	80 93 ea 17 	sts	0x17EA, r24	; 0x8017ea <pxDelayedTaskList>
    24a0:	8c ee       	ldi	r24, 0xEC	; 236
    24a2:	97 e1       	ldi	r25, 0x17	; 23
    24a4:	90 93 e9 17 	sts	0x17E9, r25	; 0x8017e9 <pxOverflowDelayedTaskList+0x1>
    24a8:	80 93 e8 17 	sts	0x17E8, r24	; 0x8017e8 <pxOverflowDelayedTaskList>
    24ac:	10 c0       	rjmp	.+32     	; 0x24ce <xTaskCreate+0x1c4>
    24ae:	80 91 bf 17 	lds	r24, 0x17BF	; 0x8017bf <xSchedulerRunning>
    24b2:	81 11       	cpse	r24, r1
    24b4:	0c c0       	rjmp	.+24     	; 0x24ce <xTaskCreate+0x1c4>
    24b6:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    24ba:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    24be:	92 8d       	ldd	r25, Z+26	; 0x1a
    24c0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    24c2:	89 17       	cp	r24, r25
    24c4:	20 f0       	brcs	.+8      	; 0x24ce <xTaskCreate+0x1c4>
    24c6:	d0 93 2f 18 	sts	0x182F, r29	; 0x80182f <pxCurrentTCB+0x1>
    24ca:	c0 93 2e 18 	sts	0x182E, r28	; 0x80182e <pxCurrentTCB>
    24ce:	80 91 bb 17 	lds	r24, 0x17BB	; 0x8017bb <uxTaskNumber>
    24d2:	8f 5f       	subi	r24, 0xFF	; 255
    24d4:	80 93 bb 17 	sts	0x17BB, r24	; 0x8017bb <uxTaskNumber>
    24d8:	8d a3       	std	Y+37, r24	; 0x25
    24da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    24dc:	90 91 c0 17 	lds	r25, 0x17C0	; 0x8017c0 <uxTopReadyPriority>
    24e0:	98 17       	cp	r25, r24
    24e2:	10 f4       	brcc	.+4      	; 0x24e8 <xTaskCreate+0x1de>
    24e4:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <uxTopReadyPriority>
    24e8:	fb e0       	ldi	r31, 0x0B	; 11
    24ea:	8f 9f       	mul	r24, r31
    24ec:	c0 01       	movw	r24, r0
    24ee:	11 24       	eor	r1, r1
    24f0:	b6 01       	movw	r22, r12
    24f2:	8e 5f       	subi	r24, 0xFE	; 254
    24f4:	97 4e       	sbci	r25, 0xE7	; 231
    24f6:	0e 94 4d 08 	call	0x109a	; 0x109a <vListInsertEnd>
    24fa:	0f 90       	pop	r0
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	80 91 bf 17 	lds	r24, 0x17BF	; 0x8017bf <xSchedulerRunning>
    2502:	88 23       	and	r24, r24
    2504:	61 f0       	breq	.+24     	; 0x251e <xTaskCreate+0x214>
    2506:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    250a:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    250e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2510:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2512:	98 17       	cp	r25, r24
    2514:	30 f4       	brcc	.+12     	; 0x2522 <xTaskCreate+0x218>
    2516:	0e 94 80 09 	call	0x1300	; 0x1300 <vPortYield>
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	05 c0       	rjmp	.+10     	; 0x2528 <xTaskCreate+0x21e>
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	03 c0       	rjmp	.+6      	; 0x2528 <xTaskCreate+0x21e>
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	01 c0       	rjmp	.+2      	; 0x2528 <xTaskCreate+0x21e>
    2526:	8f ef       	ldi	r24, 0xFF	; 255
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	0f 91       	pop	r16
    252e:	ff 90       	pop	r15
    2530:	ef 90       	pop	r14
    2532:	df 90       	pop	r13
    2534:	cf 90       	pop	r12
    2536:	bf 90       	pop	r11
    2538:	af 90       	pop	r10
    253a:	9f 90       	pop	r9
    253c:	8f 90       	pop	r8
    253e:	7f 90       	pop	r7
    2540:	6f 90       	pop	r6
    2542:	5f 90       	pop	r5
    2544:	4f 90       	pop	r4
    2546:	08 95       	ret

00002548 <vTaskStartScheduler>:
    2548:	ef 92       	push	r14
    254a:	ff 92       	push	r15
    254c:	0f 93       	push	r16
    254e:	0f 2e       	mov	r0, r31
    2550:	f5 eb       	ldi	r31, 0xB5	; 181
    2552:	ef 2e       	mov	r14, r31
    2554:	f7 e1       	ldi	r31, 0x17	; 23
    2556:	ff 2e       	mov	r15, r31
    2558:	f0 2d       	mov	r31, r0
    255a:	00 e0       	ldi	r16, 0x00	; 0
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 ec       	ldi	r20, 0xC0	; 192
    2562:	50 e0       	ldi	r21, 0x00	; 0
    2564:	65 ef       	ldi	r22, 0xF5	; 245
    2566:	73 e0       	ldi	r23, 0x03	; 3
    2568:	8d ec       	ldi	r24, 0xCD	; 205
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	ce de       	rcall	.-612    	; 0x230a <xTaskCreate>
    256e:	81 30       	cpi	r24, 0x01	; 1
    2570:	19 f5       	brne	.+70     	; 0x25b8 <vTaskStartScheduler+0x70>
    2572:	2a d7       	rcall	.+3668   	; 0x33c8 <xTimerCreateTimerTask>
    2574:	81 30       	cpi	r24, 0x01	; 1
    2576:	01 f5       	brne	.+64     	; 0x25b8 <vTaskStartScheduler+0x70>
    2578:	f8 94       	cli
    257a:	8f ef       	ldi	r24, 0xFF	; 255
    257c:	9f ef       	ldi	r25, 0xFF	; 255
    257e:	dc 01       	movw	r26, r24
    2580:	80 93 b7 17 	sts	0x17B7, r24	; 0x8017b7 <xNextTaskUnblockTime>
    2584:	90 93 b8 17 	sts	0x17B8, r25	; 0x8017b8 <xNextTaskUnblockTime+0x1>
    2588:	a0 93 b9 17 	sts	0x17B9, r26	; 0x8017b9 <xNextTaskUnblockTime+0x2>
    258c:	b0 93 ba 17 	sts	0x17BA, r27	; 0x8017ba <xNextTaskUnblockTime+0x3>
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	80 93 bf 17 	sts	0x17BF, r24	; 0x8017bf <xSchedulerRunning>
    2596:	10 92 c1 17 	sts	0x17C1, r1	; 0x8017c1 <xTickCount>
    259a:	10 92 c2 17 	sts	0x17C2, r1	; 0x8017c2 <xTickCount+0x1>
    259e:	10 92 c3 17 	sts	0x17C3, r1	; 0x8017c3 <xTickCount+0x2>
    25a2:	10 92 c4 17 	sts	0x17C4, r1	; 0x8017c4 <xTickCount+0x3>
    25a6:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    25aa:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    25ae:	81 a5       	ldd	r24, Z+41	; 0x29
    25b0:	0e 94 85 05 	call	0xb0a	; 0xb0a <task_switch_in>
    25b4:	0e 94 44 09 	call	0x1288	; 0x1288 <xPortStartScheduler>
    25b8:	0f 91       	pop	r16
    25ba:	ff 90       	pop	r15
    25bc:	ef 90       	pop	r14
    25be:	08 95       	ret

000025c0 <vTaskSuspendAll>:
    25c0:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <uxSchedulerSuspended>
    25c4:	8f 5f       	subi	r24, 0xFF	; 255
    25c6:	80 93 b4 17 	sts	0x17B4, r24	; 0x8017b4 <uxSchedulerSuspended>
    25ca:	08 95       	ret

000025cc <xTaskGetTickCount>:
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	0f 92       	push	r0
    25d2:	60 91 c1 17 	lds	r22, 0x17C1	; 0x8017c1 <xTickCount>
    25d6:	70 91 c2 17 	lds	r23, 0x17C2	; 0x8017c2 <xTickCount+0x1>
    25da:	80 91 c3 17 	lds	r24, 0x17C3	; 0x8017c3 <xTickCount+0x2>
    25de:	90 91 c4 17 	lds	r25, 0x17C4	; 0x8017c4 <xTickCount+0x3>
    25e2:	0f 90       	pop	r0
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	08 95       	ret

000025e8 <xTaskIncrementTick>:
    25e8:	9f 92       	push	r9
    25ea:	af 92       	push	r10
    25ec:	bf 92       	push	r11
    25ee:	cf 92       	push	r12
    25f0:	df 92       	push	r13
    25f2:	ef 92       	push	r14
    25f4:	ff 92       	push	r15
    25f6:	0f 93       	push	r16
    25f8:	1f 93       	push	r17
    25fa:	cf 93       	push	r28
    25fc:	df 93       	push	r29
    25fe:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <uxSchedulerSuspended>
    2602:	81 11       	cpse	r24, r1
    2604:	ad c0       	rjmp	.+346    	; 0x2760 <xTaskIncrementTick+0x178>
    2606:	c0 90 c1 17 	lds	r12, 0x17C1	; 0x8017c1 <xTickCount>
    260a:	d0 90 c2 17 	lds	r13, 0x17C2	; 0x8017c2 <xTickCount+0x1>
    260e:	e0 90 c3 17 	lds	r14, 0x17C3	; 0x8017c3 <xTickCount+0x2>
    2612:	f0 90 c4 17 	lds	r15, 0x17C4	; 0x8017c4 <xTickCount+0x3>
    2616:	8f ef       	ldi	r24, 0xFF	; 255
    2618:	c8 1a       	sub	r12, r24
    261a:	d8 0a       	sbc	r13, r24
    261c:	e8 0a       	sbc	r14, r24
    261e:	f8 0a       	sbc	r15, r24
    2620:	c0 92 c1 17 	sts	0x17C1, r12	; 0x8017c1 <xTickCount>
    2624:	d0 92 c2 17 	sts	0x17C2, r13	; 0x8017c2 <xTickCount+0x1>
    2628:	e0 92 c3 17 	sts	0x17C3, r14	; 0x8017c3 <xTickCount+0x2>
    262c:	f0 92 c4 17 	sts	0x17C4, r15	; 0x8017c4 <xTickCount+0x3>
    2630:	c1 14       	cp	r12, r1
    2632:	d1 04       	cpc	r13, r1
    2634:	e1 04       	cpc	r14, r1
    2636:	f1 04       	cpc	r15, r1
    2638:	b1 f4       	brne	.+44     	; 0x2666 <xTaskIncrementTick+0x7e>
    263a:	80 91 ea 17 	lds	r24, 0x17EA	; 0x8017ea <pxDelayedTaskList>
    263e:	90 91 eb 17 	lds	r25, 0x17EB	; 0x8017eb <pxDelayedTaskList+0x1>
    2642:	20 91 e8 17 	lds	r18, 0x17E8	; 0x8017e8 <pxOverflowDelayedTaskList>
    2646:	30 91 e9 17 	lds	r19, 0x17E9	; 0x8017e9 <pxOverflowDelayedTaskList+0x1>
    264a:	30 93 eb 17 	sts	0x17EB, r19	; 0x8017eb <pxDelayedTaskList+0x1>
    264e:	20 93 ea 17 	sts	0x17EA, r18	; 0x8017ea <pxDelayedTaskList>
    2652:	90 93 e9 17 	sts	0x17E9, r25	; 0x8017e9 <pxOverflowDelayedTaskList+0x1>
    2656:	80 93 e8 17 	sts	0x17E8, r24	; 0x8017e8 <pxOverflowDelayedTaskList>
    265a:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <xNumOfOverflows>
    265e:	8f 5f       	subi	r24, 0xFF	; 255
    2660:	80 93 bc 17 	sts	0x17BC, r24	; 0x8017bc <xNumOfOverflows>
    2664:	b1 dd       	rcall	.-1182   	; 0x21c8 <prvResetNextTaskUnblockTime>
    2666:	80 91 b7 17 	lds	r24, 0x17B7	; 0x8017b7 <xNextTaskUnblockTime>
    266a:	90 91 b8 17 	lds	r25, 0x17B8	; 0x8017b8 <xNextTaskUnblockTime+0x1>
    266e:	a0 91 b9 17 	lds	r26, 0x17B9	; 0x8017b9 <xNextTaskUnblockTime+0x2>
    2672:	b0 91 ba 17 	lds	r27, 0x17BA	; 0x8017ba <xNextTaskUnblockTime+0x3>
    2676:	c8 16       	cp	r12, r24
    2678:	d9 06       	cpc	r13, r25
    267a:	ea 06       	cpc	r14, r26
    267c:	fb 06       	cpc	r15, r27
    267e:	10 f4       	brcc	.+4      	; 0x2684 <xTaskIncrementTick+0x9c>
    2680:	b1 2c       	mov	r11, r1
    2682:	5d c0       	rjmp	.+186    	; 0x273e <xTaskIncrementTick+0x156>
    2684:	b1 2c       	mov	r11, r1
    2686:	0f 2e       	mov	r0, r31
    2688:	fb e0       	ldi	r31, 0x0B	; 11
    268a:	af 2e       	mov	r10, r31
    268c:	f0 2d       	mov	r31, r0
    268e:	99 24       	eor	r9, r9
    2690:	93 94       	inc	r9
    2692:	e0 91 ea 17 	lds	r30, 0x17EA	; 0x8017ea <pxDelayedTaskList>
    2696:	f0 91 eb 17 	lds	r31, 0x17EB	; 0x8017eb <pxDelayedTaskList+0x1>
    269a:	80 81       	ld	r24, Z
    269c:	81 11       	cpse	r24, r1
    269e:	0c c0       	rjmp	.+24     	; 0x26b8 <xTaskIncrementTick+0xd0>
    26a0:	8f ef       	ldi	r24, 0xFF	; 255
    26a2:	9f ef       	ldi	r25, 0xFF	; 255
    26a4:	dc 01       	movw	r26, r24
    26a6:	80 93 b7 17 	sts	0x17B7, r24	; 0x8017b7 <xNextTaskUnblockTime>
    26aa:	90 93 b8 17 	sts	0x17B8, r25	; 0x8017b8 <xNextTaskUnblockTime+0x1>
    26ae:	a0 93 b9 17 	sts	0x17B9, r26	; 0x8017b9 <xNextTaskUnblockTime+0x2>
    26b2:	b0 93 ba 17 	sts	0x17BA, r27	; 0x8017ba <xNextTaskUnblockTime+0x3>
    26b6:	43 c0       	rjmp	.+134    	; 0x273e <xTaskIncrementTick+0x156>
    26b8:	e0 91 ea 17 	lds	r30, 0x17EA	; 0x8017ea <pxDelayedTaskList>
    26bc:	f0 91 eb 17 	lds	r31, 0x17EB	; 0x8017eb <pxDelayedTaskList+0x1>
    26c0:	07 80       	ldd	r0, Z+7	; 0x07
    26c2:	f0 85       	ldd	r31, Z+8	; 0x08
    26c4:	e0 2d       	mov	r30, r0
    26c6:	c0 85       	ldd	r28, Z+8	; 0x08
    26c8:	d1 85       	ldd	r29, Z+9	; 0x09
    26ca:	8a 81       	ldd	r24, Y+2	; 0x02
    26cc:	9b 81       	ldd	r25, Y+3	; 0x03
    26ce:	ac 81       	ldd	r26, Y+4	; 0x04
    26d0:	bd 81       	ldd	r27, Y+5	; 0x05
    26d2:	c8 16       	cp	r12, r24
    26d4:	d9 06       	cpc	r13, r25
    26d6:	ea 06       	cpc	r14, r26
    26d8:	fb 06       	cpc	r15, r27
    26da:	48 f4       	brcc	.+18     	; 0x26ee <xTaskIncrementTick+0x106>
    26dc:	80 93 b7 17 	sts	0x17B7, r24	; 0x8017b7 <xNextTaskUnblockTime>
    26e0:	90 93 b8 17 	sts	0x17B8, r25	; 0x8017b8 <xNextTaskUnblockTime+0x1>
    26e4:	a0 93 b9 17 	sts	0x17B9, r26	; 0x8017b9 <xNextTaskUnblockTime+0x2>
    26e8:	b0 93 ba 17 	sts	0x17BA, r27	; 0x8017ba <xNextTaskUnblockTime+0x3>
    26ec:	28 c0       	rjmp	.+80     	; 0x273e <xTaskIncrementTick+0x156>
    26ee:	8e 01       	movw	r16, r28
    26f0:	0e 5f       	subi	r16, 0xFE	; 254
    26f2:	1f 4f       	sbci	r17, 0xFF	; 255
    26f4:	c8 01       	movw	r24, r16
    26f6:	0e 94 ab 08 	call	0x1156	; 0x1156 <uxListRemove>
    26fa:	88 8d       	ldd	r24, Y+24	; 0x18
    26fc:	99 8d       	ldd	r25, Y+25	; 0x19
    26fe:	89 2b       	or	r24, r25
    2700:	21 f0       	breq	.+8      	; 0x270a <xTaskIncrementTick+0x122>
    2702:	ce 01       	movw	r24, r28
    2704:	0e 96       	adiw	r24, 0x0e	; 14
    2706:	0e 94 ab 08 	call	0x1156	; 0x1156 <uxListRemove>
    270a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    270c:	90 91 c0 17 	lds	r25, 0x17C0	; 0x8017c0 <uxTopReadyPriority>
    2710:	98 17       	cp	r25, r24
    2712:	10 f4       	brcc	.+4      	; 0x2718 <xTaskIncrementTick+0x130>
    2714:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <uxTopReadyPriority>
    2718:	a8 9e       	mul	r10, r24
    271a:	c0 01       	movw	r24, r0
    271c:	11 24       	eor	r1, r1
    271e:	b8 01       	movw	r22, r16
    2720:	8e 5f       	subi	r24, 0xFE	; 254
    2722:	97 4e       	sbci	r25, 0xE7	; 231
    2724:	0e 94 4d 08 	call	0x109a	; 0x109a <vListInsertEnd>
    2728:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    272c:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2730:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2732:	82 8d       	ldd	r24, Z+26	; 0x1a
    2734:	98 17       	cp	r25, r24
    2736:	08 f4       	brcc	.+2      	; 0x273a <xTaskIncrementTick+0x152>
    2738:	ac cf       	rjmp	.-168    	; 0x2692 <xTaskIncrementTick+0xaa>
    273a:	b9 2c       	mov	r11, r9
    273c:	aa cf       	rjmp	.-172    	; 0x2692 <xTaskIncrementTick+0xaa>
    273e:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    2742:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2746:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2748:	8b e0       	ldi	r24, 0x0B	; 11
    274a:	e8 9f       	mul	r30, r24
    274c:	f0 01       	movw	r30, r0
    274e:	11 24       	eor	r1, r1
    2750:	ee 5f       	subi	r30, 0xFE	; 254
    2752:	f7 4e       	sbci	r31, 0xE7	; 231
    2754:	80 81       	ld	r24, Z
    2756:	82 30       	cpi	r24, 0x02	; 2
    2758:	48 f0       	brcs	.+18     	; 0x276c <xTaskIncrementTick+0x184>
    275a:	bb 24       	eor	r11, r11
    275c:	b3 94       	inc	r11
    275e:	06 c0       	rjmp	.+12     	; 0x276c <xTaskIncrementTick+0x184>
    2760:	80 91 be 17 	lds	r24, 0x17BE	; 0x8017be <uxPendedTicks>
    2764:	8f 5f       	subi	r24, 0xFF	; 255
    2766:	80 93 be 17 	sts	0x17BE, r24	; 0x8017be <uxPendedTicks>
    276a:	b1 2c       	mov	r11, r1
    276c:	80 91 bd 17 	lds	r24, 0x17BD	; 0x8017bd <xYieldPending>
    2770:	88 23       	and	r24, r24
    2772:	11 f0       	breq	.+4      	; 0x2778 <xTaskIncrementTick+0x190>
    2774:	bb 24       	eor	r11, r11
    2776:	b3 94       	inc	r11
    2778:	8b 2d       	mov	r24, r11
    277a:	df 91       	pop	r29
    277c:	cf 91       	pop	r28
    277e:	1f 91       	pop	r17
    2780:	0f 91       	pop	r16
    2782:	ff 90       	pop	r15
    2784:	ef 90       	pop	r14
    2786:	df 90       	pop	r13
    2788:	cf 90       	pop	r12
    278a:	bf 90       	pop	r11
    278c:	af 90       	pop	r10
    278e:	9f 90       	pop	r9
    2790:	08 95       	ret

00002792 <xTaskResumeAll>:
    2792:	cf 92       	push	r12
    2794:	df 92       	push	r13
    2796:	ef 92       	push	r14
    2798:	ff 92       	push	r15
    279a:	0f 93       	push	r16
    279c:	1f 93       	push	r17
    279e:	cf 93       	push	r28
    27a0:	df 93       	push	r29
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	f8 94       	cli
    27a6:	0f 92       	push	r0
    27a8:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <uxSchedulerSuspended>
    27ac:	81 50       	subi	r24, 0x01	; 1
    27ae:	80 93 b4 17 	sts	0x17B4, r24	; 0x8017b4 <uxSchedulerSuspended>
    27b2:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <uxSchedulerSuspended>
    27b6:	81 11       	cpse	r24, r1
    27b8:	5a c0       	rjmp	.+180    	; 0x286e <xTaskResumeAll+0xdc>
    27ba:	80 91 c5 17 	lds	r24, 0x17C5	; 0x8017c5 <uxCurrentNumberOfTasks>
    27be:	81 11       	cpse	r24, r1
    27c0:	2c c0       	rjmp	.+88     	; 0x281a <xTaskResumeAll+0x88>
    27c2:	58 c0       	rjmp	.+176    	; 0x2874 <xTaskResumeAll+0xe2>
    27c4:	d7 01       	movw	r26, r14
    27c6:	17 96       	adiw	r26, 0x07	; 7
    27c8:	ed 91       	ld	r30, X+
    27ca:	fc 91       	ld	r31, X
    27cc:	18 97       	sbiw	r26, 0x08	; 8
    27ce:	c0 85       	ldd	r28, Z+8	; 0x08
    27d0:	d1 85       	ldd	r29, Z+9	; 0x09
    27d2:	ce 01       	movw	r24, r28
    27d4:	0e 96       	adiw	r24, 0x0e	; 14
    27d6:	0e 94 ab 08 	call	0x1156	; 0x1156 <uxListRemove>
    27da:	8e 01       	movw	r16, r28
    27dc:	0e 5f       	subi	r16, 0xFE	; 254
    27de:	1f 4f       	sbci	r17, 0xFF	; 255
    27e0:	c8 01       	movw	r24, r16
    27e2:	0e 94 ab 08 	call	0x1156	; 0x1156 <uxListRemove>
    27e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27e8:	90 91 c0 17 	lds	r25, 0x17C0	; 0x8017c0 <uxTopReadyPriority>
    27ec:	98 17       	cp	r25, r24
    27ee:	10 f4       	brcc	.+4      	; 0x27f4 <xTaskResumeAll+0x62>
    27f0:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <uxTopReadyPriority>
    27f4:	d8 9e       	mul	r13, r24
    27f6:	c0 01       	movw	r24, r0
    27f8:	11 24       	eor	r1, r1
    27fa:	b8 01       	movw	r22, r16
    27fc:	8e 5f       	subi	r24, 0xFE	; 254
    27fe:	97 4e       	sbci	r25, 0xE7	; 231
    2800:	0e 94 4d 08 	call	0x109a	; 0x109a <vListInsertEnd>
    2804:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    2808:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    280c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    280e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2810:	98 17       	cp	r25, r24
    2812:	88 f0       	brcs	.+34     	; 0x2836 <xTaskResumeAll+0xa4>
    2814:	c0 92 bd 17 	sts	0x17BD, r12	; 0x8017bd <xYieldPending>
    2818:	0e c0       	rjmp	.+28     	; 0x2836 <xTaskResumeAll+0xa4>
    281a:	c0 e0       	ldi	r28, 0x00	; 0
    281c:	d0 e0       	ldi	r29, 0x00	; 0
    281e:	0f 2e       	mov	r0, r31
    2820:	fd ed       	ldi	r31, 0xDD	; 221
    2822:	ef 2e       	mov	r14, r31
    2824:	f7 e1       	ldi	r31, 0x17	; 23
    2826:	ff 2e       	mov	r15, r31
    2828:	f0 2d       	mov	r31, r0
    282a:	0f 2e       	mov	r0, r31
    282c:	fb e0       	ldi	r31, 0x0B	; 11
    282e:	df 2e       	mov	r13, r31
    2830:	f0 2d       	mov	r31, r0
    2832:	cc 24       	eor	r12, r12
    2834:	c3 94       	inc	r12
    2836:	f7 01       	movw	r30, r14
    2838:	80 81       	ld	r24, Z
    283a:	81 11       	cpse	r24, r1
    283c:	c3 cf       	rjmp	.-122    	; 0x27c4 <xTaskResumeAll+0x32>
    283e:	cd 2b       	or	r28, r29
    2840:	09 f0       	breq	.+2      	; 0x2844 <xTaskResumeAll+0xb2>
    2842:	c2 dc       	rcall	.-1660   	; 0x21c8 <prvResetNextTaskUnblockTime>
    2844:	c0 91 be 17 	lds	r28, 0x17BE	; 0x8017be <uxPendedTicks>
    2848:	cc 23       	and	r28, r28
    284a:	49 f0       	breq	.+18     	; 0x285e <xTaskResumeAll+0xcc>
    284c:	d1 e0       	ldi	r29, 0x01	; 1
    284e:	cc de       	rcall	.-616    	; 0x25e8 <xTaskIncrementTick>
    2850:	81 11       	cpse	r24, r1
    2852:	d0 93 bd 17 	sts	0x17BD, r29	; 0x8017bd <xYieldPending>
    2856:	c1 50       	subi	r28, 0x01	; 1
    2858:	d1 f7       	brne	.-12     	; 0x284e <xTaskResumeAll+0xbc>
    285a:	10 92 be 17 	sts	0x17BE, r1	; 0x8017be <uxPendedTicks>
    285e:	80 91 bd 17 	lds	r24, 0x17BD	; 0x8017bd <xYieldPending>
    2862:	88 23       	and	r24, r24
    2864:	31 f0       	breq	.+12     	; 0x2872 <xTaskResumeAll+0xe0>
    2866:	0e 94 80 09 	call	0x1300	; 0x1300 <vPortYield>
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	03 c0       	rjmp	.+6      	; 0x2874 <xTaskResumeAll+0xe2>
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	01 c0       	rjmp	.+2      	; 0x2874 <xTaskResumeAll+0xe2>
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	0f 90       	pop	r0
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	df 91       	pop	r29
    287a:	cf 91       	pop	r28
    287c:	1f 91       	pop	r17
    287e:	0f 91       	pop	r16
    2880:	ff 90       	pop	r15
    2882:	ef 90       	pop	r14
    2884:	df 90       	pop	r13
    2886:	cf 90       	pop	r12
    2888:	08 95       	ret

0000288a <vTaskDelayUntil>:
    288a:	cf 92       	push	r12
    288c:	df 92       	push	r13
    288e:	ef 92       	push	r14
    2890:	ff 92       	push	r15
    2892:	0f 93       	push	r16
    2894:	1f 93       	push	r17
    2896:	cf 93       	push	r28
    2898:	df 93       	push	r29
    289a:	ec 01       	movw	r28, r24
    289c:	6a 01       	movw	r12, r20
    289e:	7b 01       	movw	r14, r22
    28a0:	8f de       	rcall	.-738    	; 0x25c0 <vTaskSuspendAll>
    28a2:	00 91 c1 17 	lds	r16, 0x17C1	; 0x8017c1 <xTickCount>
    28a6:	10 91 c2 17 	lds	r17, 0x17C2	; 0x8017c2 <xTickCount+0x1>
    28aa:	20 91 c3 17 	lds	r18, 0x17C3	; 0x8017c3 <xTickCount+0x2>
    28ae:	30 91 c4 17 	lds	r19, 0x17C4	; 0x8017c4 <xTickCount+0x3>
    28b2:	88 81       	ld	r24, Y
    28b4:	99 81       	ldd	r25, Y+1	; 0x01
    28b6:	aa 81       	ldd	r26, Y+2	; 0x02
    28b8:	bb 81       	ldd	r27, Y+3	; 0x03
    28ba:	ac 01       	movw	r20, r24
    28bc:	bd 01       	movw	r22, r26
    28be:	4c 0d       	add	r20, r12
    28c0:	5d 1d       	adc	r21, r13
    28c2:	6e 1d       	adc	r22, r14
    28c4:	7f 1d       	adc	r23, r15
    28c6:	08 17       	cp	r16, r24
    28c8:	19 07       	cpc	r17, r25
    28ca:	2a 07       	cpc	r18, r26
    28cc:	3b 07       	cpc	r19, r27
    28ce:	78 f4       	brcc	.+30     	; 0x28ee <vTaskDelayUntil+0x64>
    28d0:	48 17       	cp	r20, r24
    28d2:	59 07       	cpc	r21, r25
    28d4:	6a 07       	cpc	r22, r26
    28d6:	7b 07       	cpc	r23, r27
    28d8:	40 f5       	brcc	.+80     	; 0x292a <vTaskDelayUntil+0xa0>
    28da:	48 83       	st	Y, r20
    28dc:	59 83       	std	Y+1, r21	; 0x01
    28de:	6a 83       	std	Y+2, r22	; 0x02
    28e0:	7b 83       	std	Y+3, r23	; 0x03
    28e2:	04 17       	cp	r16, r20
    28e4:	15 07       	cpc	r17, r21
    28e6:	26 07       	cpc	r18, r22
    28e8:	37 07       	cpc	r19, r23
    28ea:	a0 f4       	brcc	.+40     	; 0x2914 <vTaskDelayUntil+0x8a>
    28ec:	0b c0       	rjmp	.+22     	; 0x2904 <vTaskDelayUntil+0x7a>
    28ee:	48 17       	cp	r20, r24
    28f0:	59 07       	cpc	r21, r25
    28f2:	6a 07       	cpc	r22, r26
    28f4:	7b 07       	cpc	r23, r27
    28f6:	a0 f0       	brcs	.+40     	; 0x2920 <vTaskDelayUntil+0x96>
    28f8:	04 17       	cp	r16, r20
    28fa:	15 07       	cpc	r17, r21
    28fc:	26 07       	cpc	r18, r22
    28fe:	37 07       	cpc	r19, r23
    2900:	78 f0       	brcs	.+30     	; 0x2920 <vTaskDelayUntil+0x96>
    2902:	13 c0       	rjmp	.+38     	; 0x292a <vTaskDelayUntil+0xa0>
    2904:	cb 01       	movw	r24, r22
    2906:	ba 01       	movw	r22, r20
    2908:	60 1b       	sub	r22, r16
    290a:	71 0b       	sbc	r23, r17
    290c:	82 0b       	sbc	r24, r18
    290e:	93 0b       	sbc	r25, r19
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	84 dc       	rcall	.-1784   	; 0x221c <prvAddCurrentTaskToDelayedList>
    2914:	3e df       	rcall	.-388    	; 0x2792 <xTaskResumeAll>
    2916:	81 11       	cpse	r24, r1
    2918:	0d c0       	rjmp	.+26     	; 0x2934 <vTaskDelayUntil+0xaa>
    291a:	0e 94 80 09 	call	0x1300	; 0x1300 <vPortYield>
    291e:	0a c0       	rjmp	.+20     	; 0x2934 <vTaskDelayUntil+0xaa>
    2920:	48 83       	st	Y, r20
    2922:	59 83       	std	Y+1, r21	; 0x01
    2924:	6a 83       	std	Y+2, r22	; 0x02
    2926:	7b 83       	std	Y+3, r23	; 0x03
    2928:	ed cf       	rjmp	.-38     	; 0x2904 <vTaskDelayUntil+0x7a>
    292a:	48 83       	st	Y, r20
    292c:	59 83       	std	Y+1, r21	; 0x01
    292e:	6a 83       	std	Y+2, r22	; 0x02
    2930:	7b 83       	std	Y+3, r23	; 0x03
    2932:	f0 cf       	rjmp	.-32     	; 0x2914 <vTaskDelayUntil+0x8a>
    2934:	df 91       	pop	r29
    2936:	cf 91       	pop	r28
    2938:	1f 91       	pop	r17
    293a:	0f 91       	pop	r16
    293c:	ff 90       	pop	r15
    293e:	ef 90       	pop	r14
    2940:	df 90       	pop	r13
    2942:	cf 90       	pop	r12
    2944:	08 95       	ret

00002946 <vTaskDelay>:
    2946:	cf 92       	push	r12
    2948:	df 92       	push	r13
    294a:	ef 92       	push	r14
    294c:	ff 92       	push	r15
    294e:	6b 01       	movw	r12, r22
    2950:	7c 01       	movw	r14, r24
    2952:	67 2b       	or	r22, r23
    2954:	68 2b       	or	r22, r24
    2956:	69 2b       	or	r22, r25
    2958:	41 f0       	breq	.+16     	; 0x296a <vTaskDelay+0x24>
    295a:	32 de       	rcall	.-924    	; 0x25c0 <vTaskSuspendAll>
    295c:	40 e0       	ldi	r20, 0x00	; 0
    295e:	c7 01       	movw	r24, r14
    2960:	b6 01       	movw	r22, r12
    2962:	5c dc       	rcall	.-1864   	; 0x221c <prvAddCurrentTaskToDelayedList>
    2964:	16 df       	rcall	.-468    	; 0x2792 <xTaskResumeAll>
    2966:	81 11       	cpse	r24, r1
    2968:	02 c0       	rjmp	.+4      	; 0x296e <vTaskDelay+0x28>
    296a:	0e 94 80 09 	call	0x1300	; 0x1300 <vPortYield>
    296e:	ff 90       	pop	r15
    2970:	ef 90       	pop	r14
    2972:	df 90       	pop	r13
    2974:	cf 90       	pop	r12
    2976:	08 95       	ret

00002978 <vTaskSwitchContext>:
    2978:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <uxSchedulerSuspended>
    297c:	88 23       	and	r24, r24
    297e:	21 f0       	breq	.+8      	; 0x2988 <vTaskSwitchContext+0x10>
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	80 93 bd 17 	sts	0x17BD, r24	; 0x8017bd <xYieldPending>
    2986:	08 95       	ret
    2988:	10 92 bd 17 	sts	0x17BD, r1	; 0x8017bd <xYieldPending>
    298c:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    2990:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2994:	81 a5       	ldd	r24, Z+41	; 0x29
    2996:	0e 94 8f 05 	call	0xb1e	; 0xb1e <task_switch_out>
    299a:	a0 91 2e 18 	lds	r26, 0x182E	; 0x80182e <pxCurrentTCB>
    299e:	b0 91 2f 18 	lds	r27, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    29a2:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    29a6:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    29aa:	2d 91       	ld	r18, X+
    29ac:	3c 91       	ld	r19, X
    29ae:	83 8d       	ldd	r24, Z+27	; 0x1b
    29b0:	94 8d       	ldd	r25, Z+28	; 0x1c
    29b2:	82 17       	cp	r24, r18
    29b4:	93 07       	cpc	r25, r19
    29b6:	58 f0       	brcs	.+22     	; 0x29ce <vTaskSwitchContext+0x56>
    29b8:	60 91 2e 18 	lds	r22, 0x182E	; 0x80182e <pxCurrentTCB>
    29bc:	70 91 2f 18 	lds	r23, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    29c0:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <pxCurrentTCB>
    29c4:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    29c8:	63 5e       	subi	r22, 0xE3	; 227
    29ca:	7f 4f       	sbci	r23, 0xFF	; 255
    29cc:	20 d6       	rcall	.+3136   	; 0x360e <vApplicationStackOverflowHook>
    29ce:	80 91 c0 17 	lds	r24, 0x17C0	; 0x8017c0 <uxTopReadyPriority>
    29d2:	28 2f       	mov	r18, r24
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	9b e0       	ldi	r25, 0x0B	; 11
    29d8:	89 9f       	mul	r24, r25
    29da:	f0 01       	movw	r30, r0
    29dc:	11 24       	eor	r1, r1
    29de:	ee 5f       	subi	r30, 0xFE	; 254
    29e0:	f7 4e       	sbci	r31, 0xE7	; 231
    29e2:	90 81       	ld	r25, Z
    29e4:	91 11       	cpse	r25, r1
    29e6:	0e c0       	rjmp	.+28     	; 0x2a04 <vTaskSwitchContext+0x8c>
    29e8:	4b e0       	ldi	r20, 0x0B	; 11
    29ea:	81 50       	subi	r24, 0x01	; 1
    29ec:	28 2f       	mov	r18, r24
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	42 9f       	mul	r20, r18
    29f2:	f0 01       	movw	r30, r0
    29f4:	43 9f       	mul	r20, r19
    29f6:	f0 0d       	add	r31, r0
    29f8:	11 24       	eor	r1, r1
    29fa:	ee 5f       	subi	r30, 0xFE	; 254
    29fc:	f7 4e       	sbci	r31, 0xE7	; 231
    29fe:	90 81       	ld	r25, Z
    2a00:	99 23       	and	r25, r25
    2a02:	99 f3       	breq	.-26     	; 0x29ea <vTaskSwitchContext+0x72>
    2a04:	9b e0       	ldi	r25, 0x0B	; 11
    2a06:	92 9f       	mul	r25, r18
    2a08:	a0 01       	movw	r20, r0
    2a0a:	93 9f       	mul	r25, r19
    2a0c:	50 0d       	add	r21, r0
    2a0e:	11 24       	eor	r1, r1
    2a10:	da 01       	movw	r26, r20
    2a12:	ae 5f       	subi	r26, 0xFE	; 254
    2a14:	b7 4e       	sbci	r27, 0xE7	; 231
    2a16:	11 96       	adiw	r26, 0x01	; 1
    2a18:	ed 91       	ld	r30, X+
    2a1a:	fc 91       	ld	r31, X
    2a1c:	12 97       	sbiw	r26, 0x02	; 2
    2a1e:	04 80       	ldd	r0, Z+4	; 0x04
    2a20:	f5 81       	ldd	r31, Z+5	; 0x05
    2a22:	e0 2d       	mov	r30, r0
    2a24:	12 96       	adiw	r26, 0x02	; 2
    2a26:	fc 93       	st	X, r31
    2a28:	ee 93       	st	-X, r30
    2a2a:	11 97       	sbiw	r26, 0x01	; 1
    2a2c:	4b 5f       	subi	r20, 0xFB	; 251
    2a2e:	57 4e       	sbci	r21, 0xE7	; 231
    2a30:	e4 17       	cp	r30, r20
    2a32:	f5 07       	cpc	r31, r21
    2a34:	29 f4       	brne	.+10     	; 0x2a40 <vTaskSwitchContext+0xc8>
    2a36:	44 81       	ldd	r20, Z+4	; 0x04
    2a38:	55 81       	ldd	r21, Z+5	; 0x05
    2a3a:	fd 01       	movw	r30, r26
    2a3c:	52 83       	std	Z+2, r21	; 0x02
    2a3e:	41 83       	std	Z+1, r20	; 0x01
    2a40:	9b e0       	ldi	r25, 0x0B	; 11
    2a42:	92 9f       	mul	r25, r18
    2a44:	f0 01       	movw	r30, r0
    2a46:	93 9f       	mul	r25, r19
    2a48:	f0 0d       	add	r31, r0
    2a4a:	11 24       	eor	r1, r1
    2a4c:	ee 5f       	subi	r30, 0xFE	; 254
    2a4e:	f7 4e       	sbci	r31, 0xE7	; 231
    2a50:	01 80       	ldd	r0, Z+1	; 0x01
    2a52:	f2 81       	ldd	r31, Z+2	; 0x02
    2a54:	e0 2d       	mov	r30, r0
    2a56:	20 85       	ldd	r18, Z+8	; 0x08
    2a58:	31 85       	ldd	r19, Z+9	; 0x09
    2a5a:	30 93 2f 18 	sts	0x182F, r19	; 0x80182f <pxCurrentTCB+0x1>
    2a5e:	20 93 2e 18 	sts	0x182E, r18	; 0x80182e <pxCurrentTCB>
    2a62:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <uxTopReadyPriority>
    2a66:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    2a6a:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2a6e:	81 a5       	ldd	r24, Z+41	; 0x29
    2a70:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <task_switch_in>
    2a74:	08 95       	ret

00002a76 <vTaskPlaceOnEventList>:
    2a76:	cf 92       	push	r12
    2a78:	df 92       	push	r13
    2a7a:	ef 92       	push	r14
    2a7c:	ff 92       	push	r15
    2a7e:	6a 01       	movw	r12, r20
    2a80:	7b 01       	movw	r14, r22
    2a82:	60 91 2e 18 	lds	r22, 0x182E	; 0x80182e <pxCurrentTCB>
    2a86:	70 91 2f 18 	lds	r23, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2a8a:	62 5f       	subi	r22, 0xF2	; 242
    2a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a8e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <vListInsert>
    2a92:	41 e0       	ldi	r20, 0x01	; 1
    2a94:	c7 01       	movw	r24, r14
    2a96:	b6 01       	movw	r22, r12
    2a98:	c1 db       	rcall	.-2174   	; 0x221c <prvAddCurrentTaskToDelayedList>
    2a9a:	ff 90       	pop	r15
    2a9c:	ef 90       	pop	r14
    2a9e:	df 90       	pop	r13
    2aa0:	cf 90       	pop	r12
    2aa2:	08 95       	ret

00002aa4 <vTaskPlaceOnUnorderedEventList>:
    2aa4:	cf 92       	push	r12
    2aa6:	df 92       	push	r13
    2aa8:	ef 92       	push	r14
    2aaa:	ff 92       	push	r15
    2aac:	0f 93       	push	r16
    2aae:	1f 93       	push	r17
    2ab0:	68 01       	movw	r12, r16
    2ab2:	79 01       	movw	r14, r18
    2ab4:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    2ab8:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2abc:	70 68       	ori	r23, 0x80	; 128
    2abe:	46 87       	std	Z+14, r20	; 0x0e
    2ac0:	57 87       	std	Z+15, r21	; 0x0f
    2ac2:	60 8b       	std	Z+16, r22	; 0x10
    2ac4:	71 8b       	std	Z+17, r23	; 0x11
    2ac6:	60 91 2e 18 	lds	r22, 0x182E	; 0x80182e <pxCurrentTCB>
    2aca:	70 91 2f 18 	lds	r23, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2ace:	62 5f       	subi	r22, 0xF2	; 242
    2ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad2:	0e 94 4d 08 	call	0x109a	; 0x109a <vListInsertEnd>
    2ad6:	41 e0       	ldi	r20, 0x01	; 1
    2ad8:	c7 01       	movw	r24, r14
    2ada:	b6 01       	movw	r22, r12
    2adc:	9f db       	rcall	.-2242   	; 0x221c <prvAddCurrentTaskToDelayedList>
    2ade:	1f 91       	pop	r17
    2ae0:	0f 91       	pop	r16
    2ae2:	ff 90       	pop	r15
    2ae4:	ef 90       	pop	r14
    2ae6:	df 90       	pop	r13
    2ae8:	cf 90       	pop	r12
    2aea:	08 95       	ret

00002aec <vTaskPlaceOnEventListRestricted>:
    2aec:	cf 92       	push	r12
    2aee:	df 92       	push	r13
    2af0:	ef 92       	push	r14
    2af2:	ff 92       	push	r15
    2af4:	cf 93       	push	r28
    2af6:	6a 01       	movw	r12, r20
    2af8:	7b 01       	movw	r14, r22
    2afa:	c2 2f       	mov	r28, r18
    2afc:	60 91 2e 18 	lds	r22, 0x182E	; 0x80182e <pxCurrentTCB>
    2b00:	70 91 2f 18 	lds	r23, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2b04:	62 5f       	subi	r22, 0xF2	; 242
    2b06:	7f 4f       	sbci	r23, 0xFF	; 255
    2b08:	0e 94 4d 08 	call	0x109a	; 0x109a <vListInsertEnd>
    2b0c:	cc 23       	and	r28, r28
    2b0e:	21 f0       	breq	.+8      	; 0x2b18 <vTaskPlaceOnEventListRestricted+0x2c>
    2b10:	cc 24       	eor	r12, r12
    2b12:	ca 94       	dec	r12
    2b14:	dc 2c       	mov	r13, r12
    2b16:	76 01       	movw	r14, r12
    2b18:	4c 2f       	mov	r20, r28
    2b1a:	c7 01       	movw	r24, r14
    2b1c:	b6 01       	movw	r22, r12
    2b1e:	7e db       	rcall	.-2308   	; 0x221c <prvAddCurrentTaskToDelayedList>
    2b20:	cf 91       	pop	r28
    2b22:	ff 90       	pop	r15
    2b24:	ef 90       	pop	r14
    2b26:	df 90       	pop	r13
    2b28:	cf 90       	pop	r12
    2b2a:	08 95       	ret

00002b2c <xTaskRemoveFromEventList>:
    2b2c:	0f 93       	push	r16
    2b2e:	1f 93       	push	r17
    2b30:	cf 93       	push	r28
    2b32:	df 93       	push	r29
    2b34:	dc 01       	movw	r26, r24
    2b36:	17 96       	adiw	r26, 0x07	; 7
    2b38:	ed 91       	ld	r30, X+
    2b3a:	fc 91       	ld	r31, X
    2b3c:	18 97       	sbiw	r26, 0x08	; 8
    2b3e:	c0 85       	ldd	r28, Z+8	; 0x08
    2b40:	d1 85       	ldd	r29, Z+9	; 0x09
    2b42:	8e 01       	movw	r16, r28
    2b44:	02 5f       	subi	r16, 0xF2	; 242
    2b46:	1f 4f       	sbci	r17, 0xFF	; 255
    2b48:	c8 01       	movw	r24, r16
    2b4a:	0e 94 ab 08 	call	0x1156	; 0x1156 <uxListRemove>
    2b4e:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <uxSchedulerSuspended>
    2b52:	81 11       	cpse	r24, r1
    2b54:	16 c0       	rjmp	.+44     	; 0x2b82 <xTaskRemoveFromEventList+0x56>
    2b56:	0c 50       	subi	r16, 0x0C	; 12
    2b58:	11 09       	sbc	r17, r1
    2b5a:	c8 01       	movw	r24, r16
    2b5c:	0e 94 ab 08 	call	0x1156	; 0x1156 <uxListRemove>
    2b60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b62:	90 91 c0 17 	lds	r25, 0x17C0	; 0x8017c0 <uxTopReadyPriority>
    2b66:	98 17       	cp	r25, r24
    2b68:	10 f4       	brcc	.+4      	; 0x2b6e <xTaskRemoveFromEventList+0x42>
    2b6a:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <uxTopReadyPriority>
    2b6e:	bb e0       	ldi	r27, 0x0B	; 11
    2b70:	8b 9f       	mul	r24, r27
    2b72:	c0 01       	movw	r24, r0
    2b74:	11 24       	eor	r1, r1
    2b76:	b8 01       	movw	r22, r16
    2b78:	8e 5f       	subi	r24, 0xFE	; 254
    2b7a:	97 4e       	sbci	r25, 0xE7	; 231
    2b7c:	0e 94 4d 08 	call	0x109a	; 0x109a <vListInsertEnd>
    2b80:	05 c0       	rjmp	.+10     	; 0x2b8c <xTaskRemoveFromEventList+0x60>
    2b82:	b8 01       	movw	r22, r16
    2b84:	8d ed       	ldi	r24, 0xDD	; 221
    2b86:	97 e1       	ldi	r25, 0x17	; 23
    2b88:	0e 94 4d 08 	call	0x109a	; 0x109a <vListInsertEnd>
    2b8c:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    2b90:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2b94:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b96:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b98:	89 17       	cp	r24, r25
    2b9a:	20 f4       	brcc	.+8      	; 0x2ba4 <xTaskRemoveFromEventList+0x78>
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	80 93 bd 17 	sts	0x17BD, r24	; 0x8017bd <xYieldPending>
    2ba2:	01 c0       	rjmp	.+2      	; 0x2ba6 <xTaskRemoveFromEventList+0x7a>
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	df 91       	pop	r29
    2ba8:	cf 91       	pop	r28
    2baa:	1f 91       	pop	r17
    2bac:	0f 91       	pop	r16
    2bae:	08 95       	ret

00002bb0 <vTaskRemoveFromUnorderedEventList>:
    2bb0:	0f 93       	push	r16
    2bb2:	1f 93       	push	r17
    2bb4:	cf 93       	push	r28
    2bb6:	df 93       	push	r29
    2bb8:	70 68       	ori	r23, 0x80	; 128
    2bba:	fc 01       	movw	r30, r24
    2bbc:	40 83       	st	Z, r20
    2bbe:	51 83       	std	Z+1, r21	; 0x01
    2bc0:	62 83       	std	Z+2, r22	; 0x02
    2bc2:	73 83       	std	Z+3, r23	; 0x03
    2bc4:	c0 85       	ldd	r28, Z+8	; 0x08
    2bc6:	d1 85       	ldd	r29, Z+9	; 0x09
    2bc8:	0e 94 ab 08 	call	0x1156	; 0x1156 <uxListRemove>
    2bcc:	8e 01       	movw	r16, r28
    2bce:	0e 5f       	subi	r16, 0xFE	; 254
    2bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd2:	c8 01       	movw	r24, r16
    2bd4:	0e 94 ab 08 	call	0x1156	; 0x1156 <uxListRemove>
    2bd8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bda:	90 91 c0 17 	lds	r25, 0x17C0	; 0x8017c0 <uxTopReadyPriority>
    2bde:	98 17       	cp	r25, r24
    2be0:	10 f4       	brcc	.+4      	; 0x2be6 <vTaskRemoveFromUnorderedEventList+0x36>
    2be2:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <uxTopReadyPriority>
    2be6:	fb e0       	ldi	r31, 0x0B	; 11
    2be8:	8f 9f       	mul	r24, r31
    2bea:	c0 01       	movw	r24, r0
    2bec:	11 24       	eor	r1, r1
    2bee:	b8 01       	movw	r22, r16
    2bf0:	8e 5f       	subi	r24, 0xFE	; 254
    2bf2:	97 4e       	sbci	r25, 0xE7	; 231
    2bf4:	0e 94 4d 08 	call	0x109a	; 0x109a <vListInsertEnd>
    2bf8:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    2bfc:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2c00:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c02:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c04:	89 17       	cp	r24, r25
    2c06:	18 f4       	brcc	.+6      	; 0x2c0e <vTaskRemoveFromUnorderedEventList+0x5e>
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	80 93 bd 17 	sts	0x17BD, r24	; 0x8017bd <xYieldPending>
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	1f 91       	pop	r17
    2c14:	0f 91       	pop	r16
    2c16:	08 95       	ret

00002c18 <vTaskSetTimeOutState>:
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	0f 92       	push	r0
    2c1e:	20 91 bc 17 	lds	r18, 0x17BC	; 0x8017bc <xNumOfOverflows>
    2c22:	fc 01       	movw	r30, r24
    2c24:	20 83       	st	Z, r18
    2c26:	40 91 c1 17 	lds	r20, 0x17C1	; 0x8017c1 <xTickCount>
    2c2a:	50 91 c2 17 	lds	r21, 0x17C2	; 0x8017c2 <xTickCount+0x1>
    2c2e:	60 91 c3 17 	lds	r22, 0x17C3	; 0x8017c3 <xTickCount+0x2>
    2c32:	70 91 c4 17 	lds	r23, 0x17C4	; 0x8017c4 <xTickCount+0x3>
    2c36:	41 83       	std	Z+1, r20	; 0x01
    2c38:	52 83       	std	Z+2, r21	; 0x02
    2c3a:	63 83       	std	Z+3, r22	; 0x03
    2c3c:	74 83       	std	Z+4, r23	; 0x04
    2c3e:	0f 90       	pop	r0
    2c40:	0f be       	out	0x3f, r0	; 63
    2c42:	08 95       	ret

00002c44 <vTaskInternalSetTimeOutState>:
    2c44:	20 91 bc 17 	lds	r18, 0x17BC	; 0x8017bc <xNumOfOverflows>
    2c48:	fc 01       	movw	r30, r24
    2c4a:	20 83       	st	Z, r18
    2c4c:	40 91 c1 17 	lds	r20, 0x17C1	; 0x8017c1 <xTickCount>
    2c50:	50 91 c2 17 	lds	r21, 0x17C2	; 0x8017c2 <xTickCount+0x1>
    2c54:	60 91 c3 17 	lds	r22, 0x17C3	; 0x8017c3 <xTickCount+0x2>
    2c58:	70 91 c4 17 	lds	r23, 0x17C4	; 0x8017c4 <xTickCount+0x3>
    2c5c:	41 83       	std	Z+1, r20	; 0x01
    2c5e:	52 83       	std	Z+2, r21	; 0x02
    2c60:	63 83       	std	Z+3, r22	; 0x03
    2c62:	74 83       	std	Z+4, r23	; 0x04
    2c64:	08 95       	ret

00002c66 <xTaskCheckForTimeOut>:
    2c66:	cf 92       	push	r12
    2c68:	df 92       	push	r13
    2c6a:	ef 92       	push	r14
    2c6c:	ff 92       	push	r15
    2c6e:	0f 93       	push	r16
    2c70:	1f 93       	push	r17
    2c72:	cf 93       	push	r28
    2c74:	df 93       	push	r29
    2c76:	fb 01       	movw	r30, r22
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	0f 92       	push	r0
    2c7e:	40 91 c1 17 	lds	r20, 0x17C1	; 0x8017c1 <xTickCount>
    2c82:	50 91 c2 17 	lds	r21, 0x17C2	; 0x8017c2 <xTickCount+0x1>
    2c86:	60 91 c3 17 	lds	r22, 0x17C3	; 0x8017c3 <xTickCount+0x2>
    2c8a:	70 91 c4 17 	lds	r23, 0x17C4	; 0x8017c4 <xTickCount+0x3>
    2c8e:	00 81       	ld	r16, Z
    2c90:	11 81       	ldd	r17, Z+1	; 0x01
    2c92:	22 81       	ldd	r18, Z+2	; 0x02
    2c94:	33 81       	ldd	r19, Z+3	; 0x03
    2c96:	0f 3f       	cpi	r16, 0xFF	; 255
    2c98:	af ef       	ldi	r26, 0xFF	; 255
    2c9a:	1a 07       	cpc	r17, r26
    2c9c:	2a 07       	cpc	r18, r26
    2c9e:	3a 07       	cpc	r19, r26
    2ca0:	49 f1       	breq	.+82     	; 0x2cf4 <xTaskCheckForTimeOut+0x8e>
    2ca2:	ec 01       	movw	r28, r24
    2ca4:	c9 80       	ldd	r12, Y+1	; 0x01
    2ca6:	da 80       	ldd	r13, Y+2	; 0x02
    2ca8:	eb 80       	ldd	r14, Y+3	; 0x03
    2caa:	fc 80       	ldd	r15, Y+4	; 0x04
    2cac:	a0 91 bc 17 	lds	r26, 0x17BC	; 0x8017bc <xNumOfOverflows>
    2cb0:	b8 81       	ld	r27, Y
    2cb2:	ba 17       	cp	r27, r26
    2cb4:	29 f0       	breq	.+10     	; 0x2cc0 <xTaskCheckForTimeOut+0x5a>
    2cb6:	4c 15       	cp	r20, r12
    2cb8:	5d 05       	cpc	r21, r13
    2cba:	6e 05       	cpc	r22, r14
    2cbc:	7f 05       	cpc	r23, r15
    2cbe:	e0 f4       	brcc	.+56     	; 0x2cf8 <xTaskCheckForTimeOut+0x92>
    2cc0:	4c 19       	sub	r20, r12
    2cc2:	5d 09       	sbc	r21, r13
    2cc4:	6e 09       	sbc	r22, r14
    2cc6:	7f 09       	sbc	r23, r15
    2cc8:	40 17       	cp	r20, r16
    2cca:	51 07       	cpc	r21, r17
    2ccc:	62 07       	cpc	r22, r18
    2cce:	73 07       	cpc	r23, r19
    2cd0:	58 f4       	brcc	.+22     	; 0x2ce8 <xTaskCheckForTimeOut+0x82>
    2cd2:	04 1b       	sub	r16, r20
    2cd4:	15 0b       	sbc	r17, r21
    2cd6:	26 0b       	sbc	r18, r22
    2cd8:	37 0b       	sbc	r19, r23
    2cda:	00 83       	st	Z, r16
    2cdc:	11 83       	std	Z+1, r17	; 0x01
    2cde:	22 83       	std	Z+2, r18	; 0x02
    2ce0:	33 83       	std	Z+3, r19	; 0x03
    2ce2:	b0 df       	rcall	.-160    	; 0x2c44 <vTaskInternalSetTimeOutState>
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	09 c0       	rjmp	.+18     	; 0x2cfa <xTaskCheckForTimeOut+0x94>
    2ce8:	10 82       	st	Z, r1
    2cea:	11 82       	std	Z+1, r1	; 0x01
    2cec:	12 82       	std	Z+2, r1	; 0x02
    2cee:	13 82       	std	Z+3, r1	; 0x03
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	03 c0       	rjmp	.+6      	; 0x2cfa <xTaskCheckForTimeOut+0x94>
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	01 c0       	rjmp	.+2      	; 0x2cfa <xTaskCheckForTimeOut+0x94>
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	0f 90       	pop	r0
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	1f 91       	pop	r17
    2d04:	0f 91       	pop	r16
    2d06:	ff 90       	pop	r15
    2d08:	ef 90       	pop	r14
    2d0a:	df 90       	pop	r13
    2d0c:	cf 90       	pop	r12
    2d0e:	08 95       	ret

00002d10 <vTaskMissedYield>:
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	80 93 bd 17 	sts	0x17BD, r24	; 0x8017bd <xYieldPending>
    2d16:	08 95       	ret

00002d18 <xTaskGetCurrentTaskHandle>:
    2d18:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <pxCurrentTCB>
    2d1c:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2d20:	08 95       	ret

00002d22 <xTaskGetSchedulerState>:
    2d22:	80 91 bf 17 	lds	r24, 0x17BF	; 0x8017bf <xSchedulerRunning>
    2d26:	88 23       	and	r24, r24
    2d28:	31 f0       	breq	.+12     	; 0x2d36 <xTaskGetSchedulerState+0x14>
    2d2a:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <uxSchedulerSuspended>
    2d2e:	88 23       	and	r24, r24
    2d30:	21 f0       	breq	.+8      	; 0x2d3a <xTaskGetSchedulerState+0x18>
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	08 95       	ret
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	08 95       	ret
    2d3a:	82 e0       	ldi	r24, 0x02	; 2
    2d3c:	08 95       	ret

00002d3e <xTaskPriorityInherit>:
    2d3e:	0f 93       	push	r16
    2d40:	1f 93       	push	r17
    2d42:	cf 93       	push	r28
    2d44:	df 93       	push	r29
    2d46:	fc 01       	movw	r30, r24
    2d48:	89 2b       	or	r24, r25
    2d4a:	09 f4       	brne	.+2      	; 0x2d4e <xTaskPriorityInherit+0x10>
    2d4c:	60 c0       	rjmp	.+192    	; 0x2e0e <xTaskPriorityInherit+0xd0>
    2d4e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d50:	a0 91 2e 18 	lds	r26, 0x182E	; 0x80182e <pxCurrentTCB>
    2d54:	b0 91 2f 18 	lds	r27, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2d58:	5a 96       	adiw	r26, 0x1a	; 26
    2d5a:	9c 91       	ld	r25, X
    2d5c:	89 17       	cp	r24, r25
    2d5e:	08 f0       	brcs	.+2      	; 0x2d62 <xTaskPriorityInherit+0x24>
    2d60:	4a c0       	rjmp	.+148    	; 0x2df6 <xTaskPriorityInherit+0xb8>
    2d62:	46 85       	ldd	r20, Z+14	; 0x0e
    2d64:	57 85       	ldd	r21, Z+15	; 0x0f
    2d66:	60 89       	ldd	r22, Z+16	; 0x10
    2d68:	71 89       	ldd	r23, Z+17	; 0x11
    2d6a:	77 23       	and	r23, r23
    2d6c:	94 f0       	brlt	.+36     	; 0x2d92 <xTaskPriorityInherit+0x54>
    2d6e:	a0 91 2e 18 	lds	r26, 0x182E	; 0x80182e <pxCurrentTCB>
    2d72:	b0 91 2f 18 	lds	r27, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2d76:	5a 96       	adiw	r26, 0x1a	; 26
    2d78:	9c 91       	ld	r25, X
    2d7a:	44 e0       	ldi	r20, 0x04	; 4
    2d7c:	50 e0       	ldi	r21, 0x00	; 0
    2d7e:	60 e0       	ldi	r22, 0x00	; 0
    2d80:	70 e0       	ldi	r23, 0x00	; 0
    2d82:	49 1b       	sub	r20, r25
    2d84:	51 09       	sbc	r21, r1
    2d86:	61 09       	sbc	r22, r1
    2d88:	71 09       	sbc	r23, r1
    2d8a:	46 87       	std	Z+14, r20	; 0x0e
    2d8c:	57 87       	std	Z+15, r21	; 0x0f
    2d8e:	60 8b       	std	Z+16, r22	; 0x10
    2d90:	71 8b       	std	Z+17, r23	; 0x11
    2d92:	2b e0       	ldi	r18, 0x0B	; 11
    2d94:	82 9f       	mul	r24, r18
    2d96:	c0 01       	movw	r24, r0
    2d98:	11 24       	eor	r1, r1
    2d9a:	8e 5f       	subi	r24, 0xFE	; 254
    2d9c:	97 4e       	sbci	r25, 0xE7	; 231
    2d9e:	24 85       	ldd	r18, Z+12	; 0x0c
    2da0:	35 85       	ldd	r19, Z+13	; 0x0d
    2da2:	28 17       	cp	r18, r24
    2da4:	39 07       	cpc	r19, r25
    2da6:	f1 f4       	brne	.+60     	; 0x2de4 <xTaskPriorityInherit+0xa6>
    2da8:	8f 01       	movw	r16, r30
    2daa:	ef 01       	movw	r28, r30
    2dac:	22 96       	adiw	r28, 0x02	; 2
    2dae:	ce 01       	movw	r24, r28
    2db0:	0e 94 ab 08 	call	0x1156	; 0x1156 <uxListRemove>
    2db4:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    2db8:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2dbc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dbe:	f8 01       	movw	r30, r16
    2dc0:	82 8f       	std	Z+26, r24	; 0x1a
    2dc2:	90 91 c0 17 	lds	r25, 0x17C0	; 0x8017c0 <uxTopReadyPriority>
    2dc6:	98 17       	cp	r25, r24
    2dc8:	10 f4       	brcc	.+4      	; 0x2dce <xTaskPriorityInherit+0x90>
    2dca:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <uxTopReadyPriority>
    2dce:	fb e0       	ldi	r31, 0x0B	; 11
    2dd0:	8f 9f       	mul	r24, r31
    2dd2:	c0 01       	movw	r24, r0
    2dd4:	11 24       	eor	r1, r1
    2dd6:	be 01       	movw	r22, r28
    2dd8:	8e 5f       	subi	r24, 0xFE	; 254
    2dda:	97 4e       	sbci	r25, 0xE7	; 231
    2ddc:	0e 94 4d 08 	call	0x109a	; 0x109a <vListInsertEnd>
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	16 c0       	rjmp	.+44     	; 0x2e10 <xTaskPriorityInherit+0xd2>
    2de4:	a0 91 2e 18 	lds	r26, 0x182E	; 0x80182e <pxCurrentTCB>
    2de8:	b0 91 2f 18 	lds	r27, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2dec:	5a 96       	adiw	r26, 0x1a	; 26
    2dee:	8c 91       	ld	r24, X
    2df0:	82 8f       	std	Z+26, r24	; 0x1a
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	0d c0       	rjmp	.+26     	; 0x2e10 <xTaskPriorityInherit+0xd2>
    2df6:	a0 91 2e 18 	lds	r26, 0x182E	; 0x80182e <pxCurrentTCB>
    2dfa:	b0 91 2f 18 	lds	r27, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	27 a1       	ldd	r18, Z+39	; 0x27
    2e02:	5a 96       	adiw	r26, 0x1a	; 26
    2e04:	9c 91       	ld	r25, X
    2e06:	29 17       	cp	r18, r25
    2e08:	18 f0       	brcs	.+6      	; 0x2e10 <xTaskPriorityInherit+0xd2>
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	01 c0       	rjmp	.+2      	; 0x2e10 <xTaskPriorityInherit+0xd2>
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	df 91       	pop	r29
    2e12:	cf 91       	pop	r28
    2e14:	1f 91       	pop	r17
    2e16:	0f 91       	pop	r16
    2e18:	08 95       	ret

00002e1a <xTaskPriorityDisinherit>:
    2e1a:	0f 93       	push	r16
    2e1c:	1f 93       	push	r17
    2e1e:	cf 93       	push	r28
    2e20:	df 93       	push	r29
    2e22:	fc 01       	movw	r30, r24
    2e24:	89 2b       	or	r24, r25
    2e26:	79 f1       	breq	.+94     	; 0x2e86 <xTaskPriorityDisinherit+0x6c>
    2e28:	80 a5       	ldd	r24, Z+40	; 0x28
    2e2a:	81 50       	subi	r24, 0x01	; 1
    2e2c:	80 a7       	std	Z+40, r24	; 0x28
    2e2e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e30:	97 a1       	ldd	r25, Z+39	; 0x27
    2e32:	29 17       	cp	r18, r25
    2e34:	51 f1       	breq	.+84     	; 0x2e8a <xTaskPriorityDisinherit+0x70>
    2e36:	81 11       	cpse	r24, r1
    2e38:	2a c0       	rjmp	.+84     	; 0x2e8e <xTaskPriorityDisinherit+0x74>
    2e3a:	ef 01       	movw	r28, r30
    2e3c:	8f 01       	movw	r16, r30
    2e3e:	0e 5f       	subi	r16, 0xFE	; 254
    2e40:	1f 4f       	sbci	r17, 0xFF	; 255
    2e42:	c8 01       	movw	r24, r16
    2e44:	0e 94 ab 08 	call	0x1156	; 0x1156 <uxListRemove>
    2e48:	8f a1       	ldd	r24, Y+39	; 0x27
    2e4a:	8a 8f       	std	Y+26, r24	; 0x1a
    2e4c:	44 e0       	ldi	r20, 0x04	; 4
    2e4e:	50 e0       	ldi	r21, 0x00	; 0
    2e50:	60 e0       	ldi	r22, 0x00	; 0
    2e52:	70 e0       	ldi	r23, 0x00	; 0
    2e54:	48 1b       	sub	r20, r24
    2e56:	51 09       	sbc	r21, r1
    2e58:	61 09       	sbc	r22, r1
    2e5a:	71 09       	sbc	r23, r1
    2e5c:	4e 87       	std	Y+14, r20	; 0x0e
    2e5e:	5f 87       	std	Y+15, r21	; 0x0f
    2e60:	68 8b       	std	Y+16, r22	; 0x10
    2e62:	79 8b       	std	Y+17, r23	; 0x11
    2e64:	90 91 c0 17 	lds	r25, 0x17C0	; 0x8017c0 <uxTopReadyPriority>
    2e68:	98 17       	cp	r25, r24
    2e6a:	10 f4       	brcc	.+4      	; 0x2e70 <xTaskPriorityDisinherit+0x56>
    2e6c:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <uxTopReadyPriority>
    2e70:	2b e0       	ldi	r18, 0x0B	; 11
    2e72:	82 9f       	mul	r24, r18
    2e74:	c0 01       	movw	r24, r0
    2e76:	11 24       	eor	r1, r1
    2e78:	b8 01       	movw	r22, r16
    2e7a:	8e 5f       	subi	r24, 0xFE	; 254
    2e7c:	97 4e       	sbci	r25, 0xE7	; 231
    2e7e:	0e 94 4d 08 	call	0x109a	; 0x109a <vListInsertEnd>
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	05 c0       	rjmp	.+10     	; 0x2e90 <xTaskPriorityDisinherit+0x76>
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	03 c0       	rjmp	.+6      	; 0x2e90 <xTaskPriorityDisinherit+0x76>
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	01 c0       	rjmp	.+2      	; 0x2e90 <xTaskPriorityDisinherit+0x76>
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	df 91       	pop	r29
    2e92:	cf 91       	pop	r28
    2e94:	1f 91       	pop	r17
    2e96:	0f 91       	pop	r16
    2e98:	08 95       	ret

00002e9a <vTaskPriorityDisinheritAfterTimeout>:
    2e9a:	0f 93       	push	r16
    2e9c:	1f 93       	push	r17
    2e9e:	cf 93       	push	r28
    2ea0:	df 93       	push	r29
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	89 2b       	or	r24, r25
    2ea6:	09 f4       	brne	.+2      	; 0x2eaa <vTaskPriorityDisinheritAfterTimeout+0x10>
    2ea8:	3f c0       	rjmp	.+126    	; 0x2f28 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2eaa:	87 a1       	ldd	r24, Z+39	; 0x27
    2eac:	86 17       	cp	r24, r22
    2eae:	08 f4       	brcc	.+2      	; 0x2eb2 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2eb0:	86 2f       	mov	r24, r22
    2eb2:	92 8d       	ldd	r25, Z+26	; 0x1a
    2eb4:	98 17       	cp	r25, r24
    2eb6:	c1 f1       	breq	.+112    	; 0x2f28 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2eb8:	20 a5       	ldd	r18, Z+40	; 0x28
    2eba:	21 30       	cpi	r18, 0x01	; 1
    2ebc:	a9 f5       	brne	.+106    	; 0x2f28 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2ebe:	82 8f       	std	Z+26, r24	; 0x1a
    2ec0:	46 85       	ldd	r20, Z+14	; 0x0e
    2ec2:	57 85       	ldd	r21, Z+15	; 0x0f
    2ec4:	60 89       	ldd	r22, Z+16	; 0x10
    2ec6:	71 89       	ldd	r23, Z+17	; 0x11
    2ec8:	77 23       	and	r23, r23
    2eca:	64 f0       	brlt	.+24     	; 0x2ee4 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    2ecc:	44 e0       	ldi	r20, 0x04	; 4
    2ece:	50 e0       	ldi	r21, 0x00	; 0
    2ed0:	60 e0       	ldi	r22, 0x00	; 0
    2ed2:	70 e0       	ldi	r23, 0x00	; 0
    2ed4:	48 1b       	sub	r20, r24
    2ed6:	51 09       	sbc	r21, r1
    2ed8:	61 09       	sbc	r22, r1
    2eda:	71 09       	sbc	r23, r1
    2edc:	46 87       	std	Z+14, r20	; 0x0e
    2ede:	57 87       	std	Z+15, r21	; 0x0f
    2ee0:	60 8b       	std	Z+16, r22	; 0x10
    2ee2:	71 8b       	std	Z+17, r23	; 0x11
    2ee4:	2b e0       	ldi	r18, 0x0B	; 11
    2ee6:	92 9f       	mul	r25, r18
    2ee8:	c0 01       	movw	r24, r0
    2eea:	11 24       	eor	r1, r1
    2eec:	8e 5f       	subi	r24, 0xFE	; 254
    2eee:	97 4e       	sbci	r25, 0xE7	; 231
    2ef0:	24 85       	ldd	r18, Z+12	; 0x0c
    2ef2:	35 85       	ldd	r19, Z+13	; 0x0d
    2ef4:	28 17       	cp	r18, r24
    2ef6:	39 07       	cpc	r19, r25
    2ef8:	b9 f4       	brne	.+46     	; 0x2f28 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2efa:	ef 01       	movw	r28, r30
    2efc:	8f 01       	movw	r16, r30
    2efe:	0e 5f       	subi	r16, 0xFE	; 254
    2f00:	1f 4f       	sbci	r17, 0xFF	; 255
    2f02:	c8 01       	movw	r24, r16
    2f04:	0e 94 ab 08 	call	0x1156	; 0x1156 <uxListRemove>
    2f08:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f0a:	90 91 c0 17 	lds	r25, 0x17C0	; 0x8017c0 <uxTopReadyPriority>
    2f0e:	98 17       	cp	r25, r24
    2f10:	10 f4       	brcc	.+4      	; 0x2f16 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    2f12:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <uxTopReadyPriority>
    2f16:	2b e0       	ldi	r18, 0x0B	; 11
    2f18:	82 9f       	mul	r24, r18
    2f1a:	c0 01       	movw	r24, r0
    2f1c:	11 24       	eor	r1, r1
    2f1e:	b8 01       	movw	r22, r16
    2f20:	8e 5f       	subi	r24, 0xFE	; 254
    2f22:	97 4e       	sbci	r25, 0xE7	; 231
    2f24:	0e 94 4d 08 	call	0x109a	; 0x109a <vListInsertEnd>
    2f28:	df 91       	pop	r29
    2f2a:	cf 91       	pop	r28
    2f2c:	1f 91       	pop	r17
    2f2e:	0f 91       	pop	r16
    2f30:	08 95       	ret

00002f32 <uxTaskResetEventItemValue>:
    2f32:	cf 92       	push	r12
    2f34:	df 92       	push	r13
    2f36:	ef 92       	push	r14
    2f38:	ff 92       	push	r15
    2f3a:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    2f3e:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2f42:	66 85       	ldd	r22, Z+14	; 0x0e
    2f44:	77 85       	ldd	r23, Z+15	; 0x0f
    2f46:	80 89       	ldd	r24, Z+16	; 0x10
    2f48:	91 89       	ldd	r25, Z+17	; 0x11
    2f4a:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    2f4e:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2f52:	a0 91 2e 18 	lds	r26, 0x182E	; 0x80182e <pxCurrentTCB>
    2f56:	b0 91 2f 18 	lds	r27, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2f5a:	5a 96       	adiw	r26, 0x1a	; 26
    2f5c:	2c 91       	ld	r18, X
    2f5e:	c1 2c       	mov	r12, r1
    2f60:	d1 2c       	mov	r13, r1
    2f62:	76 01       	movw	r14, r12
    2f64:	68 94       	set
    2f66:	c2 f8       	bld	r12, 2
    2f68:	c2 1a       	sub	r12, r18
    2f6a:	d1 08       	sbc	r13, r1
    2f6c:	e1 08       	sbc	r14, r1
    2f6e:	f1 08       	sbc	r15, r1
    2f70:	c6 86       	std	Z+14, r12	; 0x0e
    2f72:	d7 86       	std	Z+15, r13	; 0x0f
    2f74:	e0 8a       	std	Z+16, r14	; 0x10
    2f76:	f1 8a       	std	Z+17, r15	; 0x11
    2f78:	ff 90       	pop	r15
    2f7a:	ef 90       	pop	r14
    2f7c:	df 90       	pop	r13
    2f7e:	cf 90       	pop	r12
    2f80:	08 95       	ret

00002f82 <pvTaskIncrementMutexHeldCount>:
    2f82:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <pxCurrentTCB>
    2f86:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2f8a:	89 2b       	or	r24, r25
    2f8c:	39 f0       	breq	.+14     	; 0x2f9c <pvTaskIncrementMutexHeldCount+0x1a>
    2f8e:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    2f92:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2f96:	80 a5       	ldd	r24, Z+40	; 0x28
    2f98:	8f 5f       	subi	r24, 0xFF	; 255
    2f9a:	80 a7       	std	Z+40, r24	; 0x28
    2f9c:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <pxCurrentTCB>
    2fa0:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2fa4:	08 95       	ret

00002fa6 <xTaskNotifyWait>:
    2fa6:	4f 92       	push	r4
    2fa8:	5f 92       	push	r5
    2faa:	6f 92       	push	r6
    2fac:	7f 92       	push	r7
    2fae:	8f 92       	push	r8
    2fb0:	9f 92       	push	r9
    2fb2:	af 92       	push	r10
    2fb4:	bf 92       	push	r11
    2fb6:	cf 92       	push	r12
    2fb8:	df 92       	push	r13
    2fba:	ef 92       	push	r14
    2fbc:	ff 92       	push	r15
    2fbe:	0f 93       	push	r16
    2fc0:	1f 93       	push	r17
    2fc2:	49 01       	movw	r8, r18
    2fc4:	5a 01       	movw	r10, r20
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	0f 92       	push	r0
    2fcc:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    2fd0:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2fd4:	27 a5       	ldd	r18, Z+47	; 0x2f
    2fd6:	22 30       	cpi	r18, 0x02	; 2
    2fd8:	39 f1       	breq	.+78     	; 0x3028 <xTaskNotifyWait+0x82>
    2fda:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    2fde:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    2fe2:	43 a4       	ldd	r4, Z+43	; 0x2b
    2fe4:	54 a4       	ldd	r5, Z+44	; 0x2c
    2fe6:	65 a4       	ldd	r6, Z+45	; 0x2d
    2fe8:	76 a4       	ldd	r7, Z+46	; 0x2e
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	80 95       	com	r24
    2ff0:	90 95       	com	r25
    2ff2:	a0 95       	com	r26
    2ff4:	b0 95       	com	r27
    2ff6:	84 21       	and	r24, r4
    2ff8:	95 21       	and	r25, r5
    2ffa:	a6 21       	and	r26, r6
    2ffc:	b7 21       	and	r27, r7
    2ffe:	83 a7       	std	Z+43, r24	; 0x2b
    3000:	94 a7       	std	Z+44, r25	; 0x2c
    3002:	a5 a7       	std	Z+45, r26	; 0x2d
    3004:	b6 a7       	std	Z+46, r27	; 0x2e
    3006:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    300a:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	87 a7       	std	Z+47, r24	; 0x2f
    3012:	c1 14       	cp	r12, r1
    3014:	d1 04       	cpc	r13, r1
    3016:	e1 04       	cpc	r14, r1
    3018:	f1 04       	cpc	r15, r1
    301a:	31 f0       	breq	.+12     	; 0x3028 <xTaskNotifyWait+0x82>
    301c:	41 e0       	ldi	r20, 0x01	; 1
    301e:	c7 01       	movw	r24, r14
    3020:	b6 01       	movw	r22, r12
    3022:	fc d8       	rcall	.-3592   	; 0x221c <prvAddCurrentTaskToDelayedList>
    3024:	0e 94 80 09 	call	0x1300	; 0x1300 <vPortYield>
    3028:	0f 90       	pop	r0
    302a:	0f be       	out	0x3f, r0	; 63
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	f8 94       	cli
    3030:	0f 92       	push	r0
    3032:	01 15       	cp	r16, r1
    3034:	11 05       	cpc	r17, r1
    3036:	69 f0       	breq	.+26     	; 0x3052 <xTaskNotifyWait+0xac>
    3038:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    303c:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    3040:	83 a5       	ldd	r24, Z+43	; 0x2b
    3042:	94 a5       	ldd	r25, Z+44	; 0x2c
    3044:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3046:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3048:	f8 01       	movw	r30, r16
    304a:	80 83       	st	Z, r24
    304c:	91 83       	std	Z+1, r25	; 0x01
    304e:	a2 83       	std	Z+2, r26	; 0x02
    3050:	b3 83       	std	Z+3, r27	; 0x03
    3052:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    3056:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    305a:	87 a5       	ldd	r24, Z+47	; 0x2f
    305c:	82 30       	cpi	r24, 0x02	; 2
    305e:	b1 f4       	brne	.+44     	; 0x308c <xTaskNotifyWait+0xe6>
    3060:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    3064:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    3068:	83 a5       	ldd	r24, Z+43	; 0x2b
    306a:	94 a5       	ldd	r25, Z+44	; 0x2c
    306c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    306e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3070:	80 94       	com	r8
    3072:	90 94       	com	r9
    3074:	a0 94       	com	r10
    3076:	b0 94       	com	r11
    3078:	88 22       	and	r8, r24
    307a:	99 22       	and	r9, r25
    307c:	aa 22       	and	r10, r26
    307e:	bb 22       	and	r11, r27
    3080:	83 a6       	std	Z+43, r8	; 0x2b
    3082:	94 a6       	std	Z+44, r9	; 0x2c
    3084:	a5 a6       	std	Z+45, r10	; 0x2d
    3086:	b6 a6       	std	Z+46, r11	; 0x2e
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	01 c0       	rjmp	.+2      	; 0x308e <xTaskNotifyWait+0xe8>
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    3092:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    3096:	17 a6       	std	Z+47, r1	; 0x2f
    3098:	0f 90       	pop	r0
    309a:	0f be       	out	0x3f, r0	; 63
    309c:	1f 91       	pop	r17
    309e:	0f 91       	pop	r16
    30a0:	ff 90       	pop	r15
    30a2:	ef 90       	pop	r14
    30a4:	df 90       	pop	r13
    30a6:	cf 90       	pop	r12
    30a8:	bf 90       	pop	r11
    30aa:	af 90       	pop	r10
    30ac:	9f 90       	pop	r9
    30ae:	8f 90       	pop	r8
    30b0:	7f 90       	pop	r7
    30b2:	6f 90       	pop	r6
    30b4:	5f 90       	pop	r5
    30b6:	4f 90       	pop	r4
    30b8:	08 95       	ret

000030ba <xTaskGenericNotify>:
    30ba:	0f 93       	push	r16
    30bc:	1f 93       	push	r17
    30be:	cf 93       	push	r28
    30c0:	df 93       	push	r29
    30c2:	fc 01       	movw	r30, r24
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	f8 94       	cli
    30c8:	0f 92       	push	r0
    30ca:	01 15       	cp	r16, r1
    30cc:	11 05       	cpc	r17, r1
    30ce:	49 f0       	breq	.+18     	; 0x30e2 <xTaskGenericNotify+0x28>
    30d0:	83 a5       	ldd	r24, Z+43	; 0x2b
    30d2:	94 a5       	ldd	r25, Z+44	; 0x2c
    30d4:	a5 a5       	ldd	r26, Z+45	; 0x2d
    30d6:	b6 a5       	ldd	r27, Z+46	; 0x2e
    30d8:	e8 01       	movw	r28, r16
    30da:	88 83       	st	Y, r24
    30dc:	99 83       	std	Y+1, r25	; 0x01
    30de:	aa 83       	std	Y+2, r26	; 0x02
    30e0:	bb 83       	std	Y+3, r27	; 0x03
    30e2:	87 a5       	ldd	r24, Z+47	; 0x2f
    30e4:	92 e0       	ldi	r25, 0x02	; 2
    30e6:	97 a7       	std	Z+47, r25	; 0x2f
    30e8:	22 30       	cpi	r18, 0x02	; 2
    30ea:	b1 f0       	breq	.+44     	; 0x3118 <xTaskGenericNotify+0x5e>
    30ec:	18 f4       	brcc	.+6      	; 0x30f4 <xTaskGenericNotify+0x3a>
    30ee:	21 30       	cpi	r18, 0x01	; 1
    30f0:	31 f0       	breq	.+12     	; 0x30fe <xTaskGenericNotify+0x44>
    30f2:	2a c0       	rjmp	.+84     	; 0x3148 <xTaskGenericNotify+0x8e>
    30f4:	23 30       	cpi	r18, 0x03	; 3
    30f6:	e9 f0       	breq	.+58     	; 0x3132 <xTaskGenericNotify+0x78>
    30f8:	24 30       	cpi	r18, 0x04	; 4
    30fa:	01 f1       	breq	.+64     	; 0x313c <xTaskGenericNotify+0x82>
    30fc:	25 c0       	rjmp	.+74     	; 0x3148 <xTaskGenericNotify+0x8e>
    30fe:	03 a5       	ldd	r16, Z+43	; 0x2b
    3100:	14 a5       	ldd	r17, Z+44	; 0x2c
    3102:	25 a5       	ldd	r18, Z+45	; 0x2d
    3104:	36 a5       	ldd	r19, Z+46	; 0x2e
    3106:	40 2b       	or	r20, r16
    3108:	51 2b       	or	r21, r17
    310a:	62 2b       	or	r22, r18
    310c:	73 2b       	or	r23, r19
    310e:	43 a7       	std	Z+43, r20	; 0x2b
    3110:	54 a7       	std	Z+44, r21	; 0x2c
    3112:	65 a7       	std	Z+45, r22	; 0x2d
    3114:	76 a7       	std	Z+46, r23	; 0x2e
    3116:	18 c0       	rjmp	.+48     	; 0x3148 <xTaskGenericNotify+0x8e>
    3118:	43 a5       	ldd	r20, Z+43	; 0x2b
    311a:	54 a5       	ldd	r21, Z+44	; 0x2c
    311c:	65 a5       	ldd	r22, Z+45	; 0x2d
    311e:	76 a5       	ldd	r23, Z+46	; 0x2e
    3120:	4f 5f       	subi	r20, 0xFF	; 255
    3122:	5f 4f       	sbci	r21, 0xFF	; 255
    3124:	6f 4f       	sbci	r22, 0xFF	; 255
    3126:	7f 4f       	sbci	r23, 0xFF	; 255
    3128:	43 a7       	std	Z+43, r20	; 0x2b
    312a:	54 a7       	std	Z+44, r21	; 0x2c
    312c:	65 a7       	std	Z+45, r22	; 0x2d
    312e:	76 a7       	std	Z+46, r23	; 0x2e
    3130:	0b c0       	rjmp	.+22     	; 0x3148 <xTaskGenericNotify+0x8e>
    3132:	43 a7       	std	Z+43, r20	; 0x2b
    3134:	54 a7       	std	Z+44, r21	; 0x2c
    3136:	65 a7       	std	Z+45, r22	; 0x2d
    3138:	76 a7       	std	Z+46, r23	; 0x2e
    313a:	06 c0       	rjmp	.+12     	; 0x3148 <xTaskGenericNotify+0x8e>
    313c:	82 30       	cpi	r24, 0x02	; 2
    313e:	49 f1       	breq	.+82     	; 0x3192 <xTaskGenericNotify+0xd8>
    3140:	43 a7       	std	Z+43, r20	; 0x2b
    3142:	54 a7       	std	Z+44, r21	; 0x2c
    3144:	65 a7       	std	Z+45, r22	; 0x2d
    3146:	76 a7       	std	Z+46, r23	; 0x2e
    3148:	81 30       	cpi	r24, 0x01	; 1
    314a:	29 f5       	brne	.+74     	; 0x3196 <xTaskGenericNotify+0xdc>
    314c:	ef 01       	movw	r28, r30
    314e:	8f 01       	movw	r16, r30
    3150:	0e 5f       	subi	r16, 0xFE	; 254
    3152:	1f 4f       	sbci	r17, 0xFF	; 255
    3154:	c8 01       	movw	r24, r16
    3156:	0e 94 ab 08 	call	0x1156	; 0x1156 <uxListRemove>
    315a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    315c:	90 91 c0 17 	lds	r25, 0x17C0	; 0x8017c0 <uxTopReadyPriority>
    3160:	98 17       	cp	r25, r24
    3162:	10 f4       	brcc	.+4      	; 0x3168 <xTaskGenericNotify+0xae>
    3164:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <uxTopReadyPriority>
    3168:	2b e0       	ldi	r18, 0x0B	; 11
    316a:	82 9f       	mul	r24, r18
    316c:	c0 01       	movw	r24, r0
    316e:	11 24       	eor	r1, r1
    3170:	b8 01       	movw	r22, r16
    3172:	8e 5f       	subi	r24, 0xFE	; 254
    3174:	97 4e       	sbci	r25, 0xE7	; 231
    3176:	0e 94 4d 08 	call	0x109a	; 0x109a <vListInsertEnd>
    317a:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    317e:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    3182:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3184:	82 8d       	ldd	r24, Z+26	; 0x1a
    3186:	89 17       	cp	r24, r25
    3188:	40 f4       	brcc	.+16     	; 0x319a <xTaskGenericNotify+0xe0>
    318a:	0e 94 80 09 	call	0x1300	; 0x1300 <vPortYield>
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	05 c0       	rjmp	.+10     	; 0x319c <xTaskGenericNotify+0xe2>
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	03 c0       	rjmp	.+6      	; 0x319c <xTaskGenericNotify+0xe2>
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	01 c0       	rjmp	.+2      	; 0x319c <xTaskGenericNotify+0xe2>
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	0f 90       	pop	r0
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	df 91       	pop	r29
    31a2:	cf 91       	pop	r28
    31a4:	1f 91       	pop	r17
    31a6:	0f 91       	pop	r16
    31a8:	08 95       	ret

000031aa <xTaskGenericNotifyFromISR>:
    31aa:	ef 92       	push	r14
    31ac:	ff 92       	push	r15
    31ae:	0f 93       	push	r16
    31b0:	1f 93       	push	r17
    31b2:	cf 93       	push	r28
    31b4:	df 93       	push	r29
    31b6:	fc 01       	movw	r30, r24
    31b8:	01 15       	cp	r16, r1
    31ba:	11 05       	cpc	r17, r1
    31bc:	49 f0       	breq	.+18     	; 0x31d0 <xTaskGenericNotifyFromISR+0x26>
    31be:	83 a5       	ldd	r24, Z+43	; 0x2b
    31c0:	94 a5       	ldd	r25, Z+44	; 0x2c
    31c2:	a5 a5       	ldd	r26, Z+45	; 0x2d
    31c4:	b6 a5       	ldd	r27, Z+46	; 0x2e
    31c6:	e8 01       	movw	r28, r16
    31c8:	88 83       	st	Y, r24
    31ca:	99 83       	std	Y+1, r25	; 0x01
    31cc:	aa 83       	std	Y+2, r26	; 0x02
    31ce:	bb 83       	std	Y+3, r27	; 0x03
    31d0:	87 a5       	ldd	r24, Z+47	; 0x2f
    31d2:	92 e0       	ldi	r25, 0x02	; 2
    31d4:	97 a7       	std	Z+47, r25	; 0x2f
    31d6:	22 30       	cpi	r18, 0x02	; 2
    31d8:	b1 f0       	breq	.+44     	; 0x3206 <xTaskGenericNotifyFromISR+0x5c>
    31da:	18 f4       	brcc	.+6      	; 0x31e2 <xTaskGenericNotifyFromISR+0x38>
    31dc:	21 30       	cpi	r18, 0x01	; 1
    31de:	31 f0       	breq	.+12     	; 0x31ec <xTaskGenericNotifyFromISR+0x42>
    31e0:	2a c0       	rjmp	.+84     	; 0x3236 <xTaskGenericNotifyFromISR+0x8c>
    31e2:	23 30       	cpi	r18, 0x03	; 3
    31e4:	e9 f0       	breq	.+58     	; 0x3220 <xTaskGenericNotifyFromISR+0x76>
    31e6:	24 30       	cpi	r18, 0x04	; 4
    31e8:	01 f1       	breq	.+64     	; 0x322a <xTaskGenericNotifyFromISR+0x80>
    31ea:	25 c0       	rjmp	.+74     	; 0x3236 <xTaskGenericNotifyFromISR+0x8c>
    31ec:	03 a5       	ldd	r16, Z+43	; 0x2b
    31ee:	14 a5       	ldd	r17, Z+44	; 0x2c
    31f0:	25 a5       	ldd	r18, Z+45	; 0x2d
    31f2:	36 a5       	ldd	r19, Z+46	; 0x2e
    31f4:	40 2b       	or	r20, r16
    31f6:	51 2b       	or	r21, r17
    31f8:	62 2b       	or	r22, r18
    31fa:	73 2b       	or	r23, r19
    31fc:	43 a7       	std	Z+43, r20	; 0x2b
    31fe:	54 a7       	std	Z+44, r21	; 0x2c
    3200:	65 a7       	std	Z+45, r22	; 0x2d
    3202:	76 a7       	std	Z+46, r23	; 0x2e
    3204:	18 c0       	rjmp	.+48     	; 0x3236 <xTaskGenericNotifyFromISR+0x8c>
    3206:	43 a5       	ldd	r20, Z+43	; 0x2b
    3208:	54 a5       	ldd	r21, Z+44	; 0x2c
    320a:	65 a5       	ldd	r22, Z+45	; 0x2d
    320c:	76 a5       	ldd	r23, Z+46	; 0x2e
    320e:	4f 5f       	subi	r20, 0xFF	; 255
    3210:	5f 4f       	sbci	r21, 0xFF	; 255
    3212:	6f 4f       	sbci	r22, 0xFF	; 255
    3214:	7f 4f       	sbci	r23, 0xFF	; 255
    3216:	43 a7       	std	Z+43, r20	; 0x2b
    3218:	54 a7       	std	Z+44, r21	; 0x2c
    321a:	65 a7       	std	Z+45, r22	; 0x2d
    321c:	76 a7       	std	Z+46, r23	; 0x2e
    321e:	0b c0       	rjmp	.+22     	; 0x3236 <xTaskGenericNotifyFromISR+0x8c>
    3220:	43 a7       	std	Z+43, r20	; 0x2b
    3222:	54 a7       	std	Z+44, r21	; 0x2c
    3224:	65 a7       	std	Z+45, r22	; 0x2d
    3226:	76 a7       	std	Z+46, r23	; 0x2e
    3228:	06 c0       	rjmp	.+12     	; 0x3236 <xTaskGenericNotifyFromISR+0x8c>
    322a:	82 30       	cpi	r24, 0x02	; 2
    322c:	d9 f1       	breq	.+118    	; 0x32a4 <xTaskGenericNotifyFromISR+0xfa>
    322e:	43 a7       	std	Z+43, r20	; 0x2b
    3230:	54 a7       	std	Z+44, r21	; 0x2c
    3232:	65 a7       	std	Z+45, r22	; 0x2d
    3234:	76 a7       	std	Z+46, r23	; 0x2e
    3236:	81 30       	cpi	r24, 0x01	; 1
    3238:	b9 f5       	brne	.+110    	; 0x32a8 <xTaskGenericNotifyFromISR+0xfe>
    323a:	ef 01       	movw	r28, r30
    323c:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <uxSchedulerSuspended>
    3240:	81 11       	cpse	r24, r1
    3242:	17 c0       	rjmp	.+46     	; 0x3272 <xTaskGenericNotifyFromISR+0xc8>
    3244:	8f 01       	movw	r16, r30
    3246:	0e 5f       	subi	r16, 0xFE	; 254
    3248:	1f 4f       	sbci	r17, 0xFF	; 255
    324a:	c8 01       	movw	r24, r16
    324c:	0e 94 ab 08 	call	0x1156	; 0x1156 <uxListRemove>
    3250:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3252:	90 91 c0 17 	lds	r25, 0x17C0	; 0x8017c0 <uxTopReadyPriority>
    3256:	98 17       	cp	r25, r24
    3258:	10 f4       	brcc	.+4      	; 0x325e <xTaskGenericNotifyFromISR+0xb4>
    325a:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <uxTopReadyPriority>
    325e:	eb e0       	ldi	r30, 0x0B	; 11
    3260:	8e 9f       	mul	r24, r30
    3262:	c0 01       	movw	r24, r0
    3264:	11 24       	eor	r1, r1
    3266:	b8 01       	movw	r22, r16
    3268:	8e 5f       	subi	r24, 0xFE	; 254
    326a:	97 4e       	sbci	r25, 0xE7	; 231
    326c:	0e 94 4d 08 	call	0x109a	; 0x109a <vListInsertEnd>
    3270:	07 c0       	rjmp	.+14     	; 0x3280 <xTaskGenericNotifyFromISR+0xd6>
    3272:	bf 01       	movw	r22, r30
    3274:	62 5f       	subi	r22, 0xF2	; 242
    3276:	7f 4f       	sbci	r23, 0xFF	; 255
    3278:	8d ed       	ldi	r24, 0xDD	; 221
    327a:	97 e1       	ldi	r25, 0x17	; 23
    327c:	0e 94 4d 08 	call	0x109a	; 0x109a <vListInsertEnd>
    3280:	e0 91 2e 18 	lds	r30, 0x182E	; 0x80182e <pxCurrentTCB>
    3284:	f0 91 2f 18 	lds	r31, 0x182F	; 0x80182f <pxCurrentTCB+0x1>
    3288:	9a 8d       	ldd	r25, Y+26	; 0x1a
    328a:	82 8d       	ldd	r24, Z+26	; 0x1a
    328c:	89 17       	cp	r24, r25
    328e:	70 f4       	brcc	.+28     	; 0x32ac <xTaskGenericNotifyFromISR+0x102>
    3290:	e1 14       	cp	r14, r1
    3292:	f1 04       	cpc	r15, r1
    3294:	19 f0       	breq	.+6      	; 0x329c <xTaskGenericNotifyFromISR+0xf2>
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	e7 01       	movw	r28, r14
    329a:	88 83       	st	Y, r24
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	80 93 bd 17 	sts	0x17BD, r24	; 0x8017bd <xYieldPending>
    32a2:	05 c0       	rjmp	.+10     	; 0x32ae <xTaskGenericNotifyFromISR+0x104>
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	03 c0       	rjmp	.+6      	; 0x32ae <xTaskGenericNotifyFromISR+0x104>
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	01 c0       	rjmp	.+2      	; 0x32ae <xTaskGenericNotifyFromISR+0x104>
    32ac:	81 e0       	ldi	r24, 0x01	; 1
    32ae:	df 91       	pop	r29
    32b0:	cf 91       	pop	r28
    32b2:	1f 91       	pop	r17
    32b4:	0f 91       	pop	r16
    32b6:	ff 90       	pop	r15
    32b8:	ef 90       	pop	r14
    32ba:	08 95       	ret

000032bc <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    32bc:	00 97       	sbiw	r24, 0x00	; 0
    32be:	21 f4       	brne	.+8      	; 0x32c8 <xTaskNotifyStateClear+0xc>
    32c0:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <pxCurrentTCB>
    32c4:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    32c8:	0f b6       	in	r0, 0x3f	; 63
    32ca:	f8 94       	cli
    32cc:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    32ce:	fc 01       	movw	r30, r24
    32d0:	27 a5       	ldd	r18, Z+47	; 0x2f
    32d2:	22 30       	cpi	r18, 0x02	; 2
    32d4:	19 f4       	brne	.+6      	; 0x32dc <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    32d6:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	01 c0       	rjmp	.+2      	; 0x32de <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    32dc:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    32de:	0f 90       	pop	r0
    32e0:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    32e2:	08 95       	ret

000032e4 <prvInsertTimerInActiveList>:
    32e4:	cf 92       	push	r12
    32e6:	df 92       	push	r13
    32e8:	ef 92       	push	r14
    32ea:	ff 92       	push	r15
    32ec:	0f 93       	push	r16
    32ee:	1f 93       	push	r17
    32f0:	fc 01       	movw	r30, r24
    32f2:	42 83       	std	Z+2, r20	; 0x02
    32f4:	53 83       	std	Z+3, r21	; 0x03
    32f6:	64 83       	std	Z+4, r22	; 0x04
    32f8:	75 83       	std	Z+5, r23	; 0x05
    32fa:	93 87       	std	Z+11, r25	; 0x0b
    32fc:	82 87       	std	Z+10, r24	; 0x0a
    32fe:	04 17       	cp	r16, r20
    3300:	15 07       	cpc	r17, r21
    3302:	26 07       	cpc	r18, r22
    3304:	37 07       	cpc	r19, r23
    3306:	c0 f0       	brcs	.+48     	; 0x3338 <prvInsertTimerInActiveList+0x54>
    3308:	0c 19       	sub	r16, r12
    330a:	1d 09       	sbc	r17, r13
    330c:	2e 09       	sbc	r18, r14
    330e:	3f 09       	sbc	r19, r15
    3310:	86 85       	ldd	r24, Z+14	; 0x0e
    3312:	97 85       	ldd	r25, Z+15	; 0x0f
    3314:	a0 89       	ldd	r26, Z+16	; 0x10
    3316:	b1 89       	ldd	r27, Z+17	; 0x11
    3318:	08 17       	cp	r16, r24
    331a:	19 07       	cpc	r17, r25
    331c:	2a 07       	cpc	r18, r26
    331e:	3b 07       	cpc	r19, r27
    3320:	00 f5       	brcc	.+64     	; 0x3362 <prvInsertTimerInActiveList+0x7e>
    3322:	bf 01       	movw	r22, r30
    3324:	6e 5f       	subi	r22, 0xFE	; 254
    3326:	7f 4f       	sbci	r23, 0xFF	; 255
    3328:	80 91 38 18 	lds	r24, 0x1838	; 0x801838 <pxOverflowTimerList>
    332c:	90 91 39 18 	lds	r25, 0x1839	; 0x801839 <pxOverflowTimerList+0x1>
    3330:	0e 94 6e 08 	call	0x10dc	; 0x10dc <vListInsert>
    3334:	80 e0       	ldi	r24, 0x00	; 0
    3336:	18 c0       	rjmp	.+48     	; 0x3368 <prvInsertTimerInActiveList+0x84>
    3338:	0c 15       	cp	r16, r12
    333a:	1d 05       	cpc	r17, r13
    333c:	2e 05       	cpc	r18, r14
    333e:	3f 05       	cpc	r19, r15
    3340:	28 f4       	brcc	.+10     	; 0x334c <prvInsertTimerInActiveList+0x68>
    3342:	4c 15       	cp	r20, r12
    3344:	5d 05       	cpc	r21, r13
    3346:	6e 05       	cpc	r22, r14
    3348:	7f 05       	cpc	r23, r15
    334a:	68 f4       	brcc	.+26     	; 0x3366 <prvInsertTimerInActiveList+0x82>
    334c:	bf 01       	movw	r22, r30
    334e:	6e 5f       	subi	r22, 0xFE	; 254
    3350:	7f 4f       	sbci	r23, 0xFF	; 255
    3352:	80 91 3a 18 	lds	r24, 0x183A	; 0x80183a <pxCurrentTimerList>
    3356:	90 91 3b 18 	lds	r25, 0x183B	; 0x80183b <pxCurrentTimerList+0x1>
    335a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <vListInsert>
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	03 c0       	rjmp	.+6      	; 0x3368 <prvInsertTimerInActiveList+0x84>
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	01 c0       	rjmp	.+2      	; 0x3368 <prvInsertTimerInActiveList+0x84>
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	1f 91       	pop	r17
    336a:	0f 91       	pop	r16
    336c:	ff 90       	pop	r15
    336e:	ef 90       	pop	r14
    3370:	df 90       	pop	r13
    3372:	cf 90       	pop	r12
    3374:	08 95       	ret

00003376 <prvCheckForValidListAndQueue>:
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	0f 92       	push	r0
    337c:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <xTimerQueue>
    3380:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <xTimerQueue+0x1>
    3384:	89 2b       	or	r24, r25
    3386:	e9 f4       	brne	.+58     	; 0x33c2 <prvCheckForValidListAndQueue+0x4c>
    3388:	87 e4       	ldi	r24, 0x47	; 71
    338a:	98 e1       	ldi	r25, 0x18	; 24
    338c:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInitialise>
    3390:	8c e3       	ldi	r24, 0x3C	; 60
    3392:	98 e1       	ldi	r25, 0x18	; 24
    3394:	0e 94 38 08 	call	0x1070	; 0x1070 <vListInitialise>
    3398:	87 e4       	ldi	r24, 0x47	; 71
    339a:	98 e1       	ldi	r25, 0x18	; 24
    339c:	90 93 3b 18 	sts	0x183B, r25	; 0x80183b <pxCurrentTimerList+0x1>
    33a0:	80 93 3a 18 	sts	0x183A, r24	; 0x80183a <pxCurrentTimerList>
    33a4:	8c e3       	ldi	r24, 0x3C	; 60
    33a6:	98 e1       	ldi	r25, 0x18	; 24
    33a8:	90 93 39 18 	sts	0x1839, r25	; 0x801839 <pxOverflowTimerList+0x1>
    33ac:	80 93 38 18 	sts	0x1838, r24	; 0x801838 <pxOverflowTimerList>
    33b0:	40 e0       	ldi	r20, 0x00	; 0
    33b2:	67 e0       	ldi	r22, 0x07	; 7
    33b4:	8a e0       	ldi	r24, 0x0A	; 10
    33b6:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <xQueueGenericCreate>
    33ba:	90 93 37 18 	sts	0x1837, r25	; 0x801837 <xTimerQueue+0x1>
    33be:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <xTimerQueue>
    33c2:	0f 90       	pop	r0
    33c4:	0f be       	out	0x3f, r0	; 63
    33c6:	08 95       	ret

000033c8 <xTimerCreateTimerTask>:
    33c8:	ef 92       	push	r14
    33ca:	ff 92       	push	r15
    33cc:	0f 93       	push	r16
    33ce:	d3 df       	rcall	.-90     	; 0x3376 <prvCheckForValidListAndQueue>
    33d0:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <xTimerQueue>
    33d4:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <xTimerQueue+0x1>
    33d8:	89 2b       	or	r24, r25
    33da:	91 f0       	breq	.+36     	; 0x3400 <xTimerCreateTimerTask+0x38>
    33dc:	0f 2e       	mov	r0, r31
    33de:	f4 e3       	ldi	r31, 0x34	; 52
    33e0:	ef 2e       	mov	r14, r31
    33e2:	f8 e1       	ldi	r31, 0x18	; 24
    33e4:	ff 2e       	mov	r15, r31
    33e6:	f0 2d       	mov	r31, r0
    33e8:	03 e0       	ldi	r16, 0x03	; 3
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	45 e5       	ldi	r20, 0x55	; 85
    33f0:	50 e0       	ldi	r21, 0x00	; 0
    33f2:	6a ef       	ldi	r22, 0xFA	; 250
    33f4:	73 e0       	ldi	r23, 0x03	; 3
    33f6:	84 e0       	ldi	r24, 0x04	; 4
    33f8:	91 e0       	ldi	r25, 0x01	; 1
    33fa:	0e 94 85 11 	call	0x230a	; 0x230a <xTaskCreate>
    33fe:	01 c0       	rjmp	.+2      	; 0x3402 <xTimerCreateTimerTask+0x3a>
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	0f 91       	pop	r16
    3404:	ff 90       	pop	r15
    3406:	ef 90       	pop	r14
    3408:	08 95       	ret

0000340a <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    340a:	8f 92       	push	r8
    340c:	9f 92       	push	r9
    340e:	af 92       	push	r10
    3410:	bf 92       	push	r11
    3412:	cf 92       	push	r12
    3414:	df 92       	push	r13
    3416:	ef 92       	push	r14
    3418:	ff 92       	push	r15
    341a:	0f 93       	push	r16
    341c:	1f 93       	push	r17
    341e:	cf 93       	push	r28
    3420:	df 93       	push	r29
    3422:	cd b7       	in	r28, 0x3d	; 61
    3424:	de b7       	in	r29, 0x3e	; 62
    3426:	27 97       	sbiw	r28, 0x07	; 7
    3428:	0f b6       	in	r0, 0x3f	; 63
    342a:	f8 94       	cli
    342c:	de bf       	out	0x3e, r29	; 62
    342e:	0f be       	out	0x3f, r0	; 63
    3430:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3432:	e0 91 36 18 	lds	r30, 0x1836	; 0x801836 <xTimerQueue>
    3436:	f0 91 37 18 	lds	r31, 0x1837	; 0x801837 <xTimerQueue+0x1>
    343a:	30 97       	sbiw	r30, 0x00	; 0
    343c:	81 f1       	breq	.+96     	; 0x349e <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    343e:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3440:	2a 83       	std	Y+2, r18	; 0x02
    3442:	3b 83       	std	Y+3, r19	; 0x03
    3444:	4c 83       	std	Y+4, r20	; 0x04
    3446:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3448:	9f 83       	std	Y+7, r25	; 0x07
    344a:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    344c:	66 30       	cpi	r22, 0x06	; 6
    344e:	f4 f4       	brge	.+60     	; 0x348c <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3450:	68 dc       	rcall	.-1840   	; 0x2d22 <xTaskGetSchedulerState>
    3452:	82 30       	cpi	r24, 0x02	; 2
    3454:	69 f4       	brne	.+26     	; 0x3470 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3456:	00 e0       	ldi	r16, 0x00	; 0
    3458:	a7 01       	movw	r20, r14
    345a:	96 01       	movw	r18, r12
    345c:	be 01       	movw	r22, r28
    345e:	6f 5f       	subi	r22, 0xFF	; 255
    3460:	7f 4f       	sbci	r23, 0xFF	; 255
    3462:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <xTimerQueue>
    3466:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <xTimerQueue+0x1>
    346a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <xQueueGenericSend>
    346e:	18 c0       	rjmp	.+48     	; 0x34a0 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3470:	00 e0       	ldi	r16, 0x00	; 0
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	a9 01       	movw	r20, r18
    3478:	be 01       	movw	r22, r28
    347a:	6f 5f       	subi	r22, 0xFF	; 255
    347c:	7f 4f       	sbci	r23, 0xFF	; 255
    347e:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <xTimerQueue>
    3482:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <xTimerQueue+0x1>
    3486:	0e 94 8a 0b 	call	0x1714	; 0x1714 <xQueueGenericSend>
    348a:	0a c0       	rjmp	.+20     	; 0x34a0 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    348c:	20 e0       	ldi	r18, 0x00	; 0
    348e:	a8 01       	movw	r20, r16
    3490:	be 01       	movw	r22, r28
    3492:	6f 5f       	subi	r22, 0xFF	; 255
    3494:	7f 4f       	sbci	r23, 0xFF	; 255
    3496:	cf 01       	movw	r24, r30
    3498:	0e 94 45 0c 	call	0x188a	; 0x188a <xQueueGenericSendFromISR>
    349c:	01 c0       	rjmp	.+2      	; 0x34a0 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    349e:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    34a0:	27 96       	adiw	r28, 0x07	; 7
    34a2:	0f b6       	in	r0, 0x3f	; 63
    34a4:	f8 94       	cli
    34a6:	de bf       	out	0x3e, r29	; 62
    34a8:	0f be       	out	0x3f, r0	; 63
    34aa:	cd bf       	out	0x3d, r28	; 61
    34ac:	df 91       	pop	r29
    34ae:	cf 91       	pop	r28
    34b0:	1f 91       	pop	r17
    34b2:	0f 91       	pop	r16
    34b4:	ff 90       	pop	r15
    34b6:	ef 90       	pop	r14
    34b8:	df 90       	pop	r13
    34ba:	cf 90       	pop	r12
    34bc:	bf 90       	pop	r11
    34be:	af 90       	pop	r10
    34c0:	9f 90       	pop	r9
    34c2:	8f 90       	pop	r8
    34c4:	08 95       	ret

000034c6 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    34c6:	2f 92       	push	r2
    34c8:	3f 92       	push	r3
    34ca:	4f 92       	push	r4
    34cc:	5f 92       	push	r5
    34ce:	6f 92       	push	r6
    34d0:	7f 92       	push	r7
    34d2:	8f 92       	push	r8
    34d4:	9f 92       	push	r9
    34d6:	af 92       	push	r10
    34d8:	bf 92       	push	r11
    34da:	cf 92       	push	r12
    34dc:	df 92       	push	r13
    34de:	ef 92       	push	r14
    34e0:	ff 92       	push	r15
    34e2:	0f 93       	push	r16
    34e4:	1f 93       	push	r17
    34e6:	cf 93       	push	r28
    34e8:	df 93       	push	r29
    34ea:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    34ec:	6f d8       	rcall	.-3874   	; 0x25cc <xTaskGetTickCount>
    34ee:	2b 01       	movw	r4, r22
    34f0:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    34f2:	80 91 30 18 	lds	r24, 0x1830	; 0x801830 <xLastTime.2432>
    34f6:	90 91 31 18 	lds	r25, 0x1831	; 0x801831 <xLastTime.2432+0x1>
    34fa:	a0 91 32 18 	lds	r26, 0x1832	; 0x801832 <xLastTime.2432+0x2>
    34fe:	b0 91 33 18 	lds	r27, 0x1833	; 0x801833 <xLastTime.2432+0x3>
    3502:	48 16       	cp	r4, r24
    3504:	59 06       	cpc	r5, r25
    3506:	6a 06       	cpc	r6, r26
    3508:	7b 06       	cpc	r7, r27
    350a:	08 f0       	brcs	.+2      	; 0x350e <prvSampleTimeNow+0x48>
    350c:	53 c0       	rjmp	.+166    	; 0x35b4 <prvSampleTimeNow+0xee>
    350e:	3b c0       	rjmp	.+118    	; 0x3586 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3510:	07 80       	ldd	r0, Z+7	; 0x07
    3512:	f0 85       	ldd	r31, Z+8	; 0x08
    3514:	e0 2d       	mov	r30, r0
    3516:	80 80       	ld	r8, Z
    3518:	91 80       	ldd	r9, Z+1	; 0x01
    351a:	a2 80       	ldd	r10, Z+2	; 0x02
    351c:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    351e:	c0 85       	ldd	r28, Z+8	; 0x08
    3520:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3522:	8e 01       	movw	r16, r28
    3524:	0e 5f       	subi	r16, 0xFE	; 254
    3526:	1f 4f       	sbci	r17, 0xFF	; 255
    3528:	c8 01       	movw	r24, r16
    352a:	0e 94 ab 08 	call	0x1156	; 0x1156 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    352e:	ec 89       	ldd	r30, Y+20	; 0x14
    3530:	fd 89       	ldd	r31, Y+21	; 0x15
    3532:	ce 01       	movw	r24, r28
    3534:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3536:	8f 89       	ldd	r24, Y+23	; 0x17
    3538:	82 ff       	sbrs	r24, 2
    353a:	25 c0       	rjmp	.+74     	; 0x3586 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    353c:	8e 85       	ldd	r24, Y+14	; 0x0e
    353e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3540:	a8 89       	ldd	r26, Y+16	; 0x10
    3542:	b9 89       	ldd	r27, Y+17	; 0x11
    3544:	88 0d       	add	r24, r8
    3546:	99 1d       	adc	r25, r9
    3548:	aa 1d       	adc	r26, r10
    354a:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    354c:	88 16       	cp	r8, r24
    354e:	99 06       	cpc	r9, r25
    3550:	aa 06       	cpc	r10, r26
    3552:	bb 06       	cpc	r11, r27
    3554:	70 f4       	brcc	.+28     	; 0x3572 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3556:	8a 83       	std	Y+2, r24	; 0x02
    3558:	9b 83       	std	Y+3, r25	; 0x03
    355a:	ac 83       	std	Y+4, r26	; 0x04
    355c:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    355e:	db 87       	std	Y+11, r29	; 0x0b
    3560:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3562:	b8 01       	movw	r22, r16
    3564:	80 91 3a 18 	lds	r24, 0x183A	; 0x80183a <pxCurrentTimerList>
    3568:	90 91 3b 18 	lds	r25, 0x183B	; 0x80183b <pxCurrentTimerList+0x1>
    356c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <vListInsert>
    3570:	0a c0       	rjmp	.+20     	; 0x3586 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3572:	c1 2c       	mov	r12, r1
    3574:	d1 2c       	mov	r13, r1
    3576:	76 01       	movw	r14, r12
    3578:	00 e0       	ldi	r16, 0x00	; 0
    357a:	10 e0       	ldi	r17, 0x00	; 0
    357c:	a5 01       	movw	r20, r10
    357e:	94 01       	movw	r18, r8
    3580:	60 e0       	ldi	r22, 0x00	; 0
    3582:	ce 01       	movw	r24, r28
    3584:	42 df       	rcall	.-380    	; 0x340a <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3586:	e0 91 3a 18 	lds	r30, 0x183A	; 0x80183a <pxCurrentTimerList>
    358a:	f0 91 3b 18 	lds	r31, 0x183B	; 0x80183b <pxCurrentTimerList+0x1>
    358e:	80 81       	ld	r24, Z
    3590:	81 11       	cpse	r24, r1
    3592:	be cf       	rjmp	.-132    	; 0x3510 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3594:	80 91 38 18 	lds	r24, 0x1838	; 0x801838 <pxOverflowTimerList>
    3598:	90 91 39 18 	lds	r25, 0x1839	; 0x801839 <pxOverflowTimerList+0x1>
    359c:	90 93 3b 18 	sts	0x183B, r25	; 0x80183b <pxCurrentTimerList+0x1>
    35a0:	80 93 3a 18 	sts	0x183A, r24	; 0x80183a <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    35a4:	f0 93 39 18 	sts	0x1839, r31	; 0x801839 <pxOverflowTimerList+0x1>
    35a8:	e0 93 38 18 	sts	0x1838, r30	; 0x801838 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	f1 01       	movw	r30, r2
    35b0:	80 83       	st	Z, r24
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    35b4:	f1 01       	movw	r30, r2
    35b6:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    35b8:	40 92 30 18 	sts	0x1830, r4	; 0x801830 <xLastTime.2432>
    35bc:	50 92 31 18 	sts	0x1831, r5	; 0x801831 <xLastTime.2432+0x1>
    35c0:	60 92 32 18 	sts	0x1832, r6	; 0x801832 <xLastTime.2432+0x2>
    35c4:	70 92 33 18 	sts	0x1833, r7	; 0x801833 <xLastTime.2432+0x3>

    return xTimeNow;
}
    35c8:	c3 01       	movw	r24, r6
    35ca:	b2 01       	movw	r22, r4
    35cc:	df 91       	pop	r29
    35ce:	cf 91       	pop	r28
    35d0:	1f 91       	pop	r17
    35d2:	0f 91       	pop	r16
    35d4:	ff 90       	pop	r15
    35d6:	ef 90       	pop	r14
    35d8:	df 90       	pop	r13
    35da:	cf 90       	pop	r12
    35dc:	bf 90       	pop	r11
    35de:	af 90       	pop	r10
    35e0:	9f 90       	pop	r9
    35e2:	8f 90       	pop	r8
    35e4:	7f 90       	pop	r7
    35e6:	6f 90       	pop	r6
    35e8:	5f 90       	pop	r5
    35ea:	4f 90       	pop	r4
    35ec:	3f 90       	pop	r3
    35ee:	2f 90       	pop	r2
    35f0:	08 95       	ret

000035f2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    35f2:	08 95       	ret

000035f4 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    35f4:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    35f6:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    35f8:	2f ef       	ldi	r18, 0xFF	; 255
    35fa:	80 e7       	ldi	r24, 0x70	; 112
    35fc:	92 e0       	ldi	r25, 0x02	; 2
    35fe:	21 50       	subi	r18, 0x01	; 1
    3600:	80 40       	sbci	r24, 0x00	; 0
    3602:	90 40       	sbci	r25, 0x00	; 0
    3604:	e1 f7       	brne	.-8      	; 0x35fe <vApplicationMallocFailedHook+0xa>
    3606:	00 c0       	rjmp	.+0      	; 0x3608 <vApplicationMallocFailedHook+0x14>
    3608:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    360a:	1f 9a       	sbi	0x03, 7	; 3
    360c:	f5 cf       	rjmp	.-22     	; 0x35f8 <vApplicationMallocFailedHook+0x4>

0000360e <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    360e:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3610:	2f 9a       	sbi	0x05, 7	; 5
    3612:	2f ef       	ldi	r18, 0xFF	; 255
    3614:	87 ea       	ldi	r24, 0xA7	; 167
    3616:	91 e6       	ldi	r25, 0x61	; 97
    3618:	21 50       	subi	r18, 0x01	; 1
    361a:	80 40       	sbci	r24, 0x00	; 0
    361c:	90 40       	sbci	r25, 0x00	; 0
    361e:	e1 f7       	brne	.-8      	; 0x3618 <vApplicationStackOverflowHook+0xa>
    3620:	00 c0       	rjmp	.+0      	; 0x3622 <vApplicationStackOverflowHook+0x14>
    3622:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3624:	1f 9a       	sbi	0x03, 7	; 3
    3626:	f5 cf       	rjmp	.-22     	; 0x3612 <vApplicationStackOverflowHook+0x4>

00003628 <hum_temp_task>:
{

	for (;;) 
	{
		
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, Hum_temp_measure_bit, pdTRUE, pdTRUE, 500);
    3628:	0f 2e       	mov	r0, r31
    362a:	f4 ef       	ldi	r31, 0xF4	; 244
    362c:	cf 2e       	mov	r12, r31
    362e:	dd 24       	eor	r13, r13
    3630:	d3 94       	inc	r13
    3632:	e1 2c       	mov	r14, r1
    3634:	f1 2c       	mov	r15, r1
    3636:	f0 2d       	mov	r31, r0
    3638:	01 e0       	ldi	r16, 0x01	; 1
    363a:	21 e0       	ldi	r18, 0x01	; 1
    363c:	42 e0       	ldi	r20, 0x02	; 2
    363e:	50 e0       	ldi	r21, 0x00	; 0
    3640:	60 e0       	ldi	r22, 0x00	; 0
    3642:	70 e0       	ldi	r23, 0x00	; 0
    3644:	80 91 b4 19 	lds	r24, 0x19B4	; 0x8019b4 <Measure_event_group>
    3648:	90 91 b5 19 	lds	r25, 0x19B5	; 0x8019b5 <Measure_event_group+0x1>
    364c:	0e 94 a8 05 	call	0xb50	; 0xb50 <xEventGroupWaitBits>
		
		if((measureBits & (Hum_temp_measure_bit)) == (Hum_temp_measure_bit)){
    3650:	61 ff       	sbrs	r22, 1
    3652:	ea cf       	rjmp	.-44     	; 0x3628 <hum_temp_task>
			
				driver_ready_check = hih8120Wakeup();
    3654:	d1 d1       	rcall	.+930    	; 0x39f8 <hih8120Wakeup>
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	90 93 f6 19 	sts	0x19F6, r25	; 0x8019f6 <driver_ready_check+0x1>
    365c:	80 93 f5 19 	sts	0x19F5, r24	; 0x8019f5 <driver_ready_check>
				while (driver_ready_check != HIH8120_OK)
    3660:	89 2b       	or	r24, r25
    3662:	69 f0       	breq	.+26     	; 0x367e <hum_temp_task+0x56>
				{
					vTaskDelay(50);
    3664:	62 e3       	ldi	r22, 0x32	; 50
    3666:	70 e0       	ldi	r23, 0x00	; 0
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	90 e0       	ldi	r25, 0x00	; 0
					driver_ready_check = hih8120Wakeup();
    366c:	6c d9       	rcall	.-3368   	; 0x2946 <vTaskDelay>
    366e:	c4 d1       	rcall	.+904    	; 0x39f8 <hih8120Wakeup>
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	90 93 f6 19 	sts	0x19F6, r25	; 0x8019f6 <driver_ready_check+0x1>
    3676:	80 93 f5 19 	sts	0x19F5, r24	; 0x8019f5 <driver_ready_check>
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, Hum_temp_measure_bit, pdTRUE, pdTRUE, 500);
		
		if((measureBits & (Hum_temp_measure_bit)) == (Hum_temp_measure_bit)){
			
				driver_ready_check = hih8120Wakeup();
				while (driver_ready_check != HIH8120_OK)
    367a:	89 2b       	or	r24, r25
    367c:	99 f7       	brne	.-26     	; 0x3664 <hum_temp_task+0x3c>
					vTaskDelay(50);
					driver_ready_check = hih8120Wakeup();
					
				}

				vTaskDelay(60); // necessary wait delay after calling wakeup
    367e:	6c e3       	ldi	r22, 0x3C	; 60
    3680:	70 e0       	ldi	r23, 0x00	; 0
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	90 e0       	ldi	r25, 0x00	; 0
				
				driver_ready_check = hih8120Meassure();
    3686:	5f d9       	rcall	.-3394   	; 0x2946 <vTaskDelay>
    3688:	cc d1       	rcall	.+920    	; 0x3a22 <hih8120Meassure>
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	90 93 f6 19 	sts	0x19F6, r25	; 0x8019f6 <driver_ready_check+0x1>
    3690:	80 93 f5 19 	sts	0x19F5, r24	; 0x8019f5 <driver_ready_check>
				
				while (driver_ready_check != HIH8120_OK)
    3694:	89 2b       	or	r24, r25
				{
					vTaskDelay(50);
    3696:	69 f0       	breq	.+26     	; 0x36b2 <hum_temp_task+0x8a>
    3698:	62 e3       	ldi	r22, 0x32	; 50
    369a:	70 e0       	ldi	r23, 0x00	; 0
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	90 e0       	ldi	r25, 0x00	; 0
					driver_ready_check = hih8120Meassure();
    36a0:	52 d9       	rcall	.-3420   	; 0x2946 <vTaskDelay>
    36a2:	bf d1       	rcall	.+894    	; 0x3a22 <hih8120Meassure>
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	90 93 f6 19 	sts	0x19F6, r25	; 0x8019f6 <driver_ready_check+0x1>
    36aa:	80 93 f5 19 	sts	0x19F5, r24	; 0x8019f5 <driver_ready_check>
				}
				
				vTaskDelay(20); // giving it some time to get the values
    36ae:	89 2b       	or	r24, r25
    36b0:	99 f7       	brne	.-26     	; 0x3698 <hum_temp_task+0x70>
    36b2:	64 e1       	ldi	r22, 0x14	; 20
    36b4:	70 e0       	ldi	r23, 0x00	; 0
    36b6:	80 e0       	ldi	r24, 0x00	; 0
			
				setHumidity(hih8120GetHumidity());
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	45 d9       	rcall	.-3446   	; 0x2946 <vTaskDelay>
    36bc:	c3 d1       	rcall	.+902    	; 0x3a44 <hih8120GetHumidity>
    36be:	0e 94 c0 04 	call	0x980	; 0x980 <setHumidity>
				setTemperature(hih8120GetTemperature());
    36c2:	d5 d1       	rcall	.+938    	; 0x3a6e <hih8120GetTemperature>
    36c4:	0e 94 06 05 	call	0xa0c	; 0xa0c <setTemperature>
				
				xEventGroupSetBits(Data_event_group, Hum_temp_data_bit);
    36c8:	48 e0       	ldi	r20, 0x08	; 8
    36ca:	50 e0       	ldi	r21, 0x00	; 0
    36cc:	60 e0       	ldi	r22, 0x00	; 0
    36ce:	70 e0       	ldi	r23, 0x00	; 0
    36d0:	80 91 b0 19 	lds	r24, 0x19B0	; 0x8019b0 <Data_event_group>
    36d4:	90 91 b1 19 	lds	r25, 0x19B1	; 0x8019b1 <Data_event_group+0x1>
    36d8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <xEventGroupSetBits>
    36dc:	a5 cf       	rjmp	.-182    	; 0x3628 <hum_temp_task>

000036de <HumidityTemperatureSensor_create>:

	
void hum_temp_task(void *pvParameters);

void HumidityTemperatureSensor_create()
{
    36de:	ef 92       	push	r14
    36e0:	ff 92       	push	r15
    36e2:	0f 93       	push	r16
	hih8120Create(); 
    36e4:	71 d1       	rcall	.+738    	; 0x39c8 <hih8120Create>
	
	xTaskCreate(
    36e6:	e1 2c       	mov	r14, r1
    36e8:	f1 2c       	mov	r15, r1
    36ea:	02 e0       	ldi	r16, 0x02	; 2
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	42 ef       	ldi	r20, 0xF2	; 242
    36f2:	50 e0       	ldi	r21, 0x00	; 0
    36f4:	62 e0       	ldi	r22, 0x02	; 2
    36f6:	74 e0       	ldi	r23, 0x04	; 4
    36f8:	84 e1       	ldi	r24, 0x14	; 20
    36fa:	9b e1       	ldi	r25, 0x1B	; 27
    36fc:	0e 94 85 11 	call	0x230a	; 0x230a <xTaskCreate>
		configMINIMAL_STACK_SIZE+50,  // This stack size can be checked & adjusted by reading the Stack Highwater
		NULL,
		2,  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
		NULL
	 );
}
    3700:	0f 91       	pop	r16
    3702:	ff 90       	pop	r15
    3704:	ef 90       	pop	r14
    3706:	08 95       	ret

00003708 <create_tasks_and_semaphores>:
extern MessageBufferHandle_t Messadown_link_message_buffer_handle;


/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{	
    3708:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	
	if ( Mutex_CO2 == NULL )  // Check to confirm that the Semaphore has not already been created.
    370a:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <Mutex_CO2>
    370e:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <Mutex_CO2+0x1>
    3712:	89 2b       	or	r24, r25
    3714:	89 f4       	brne	.+34     	; 0x3738 <create_tasks_and_semaphores+0x30>
	{
		Mutex_CO2 = xSemaphoreCreateMutex();  // Create a MUTEX semaphore.
    3716:	81 e0       	ldi	r24, 0x01	; 1
    3718:	0e 94 2a 0c 	call	0x1854	; 0x1854 <xQueueCreateMutex>
    371c:	90 93 ba 19 	sts	0x19BA, r25	; 0x8019ba <Mutex_CO2+0x1>
    3720:	80 93 b9 19 	sts	0x19B9, r24	; 0x8019b9 <Mutex_CO2>
		if ( ( Mutex_CO2 ) != NULL )
    3724:	00 97       	sbiw	r24, 0x00	; 0
    3726:	41 f0       	breq	.+16     	; 0x3738 <create_tasks_and_semaphores+0x30>
		{
			xSemaphoreGive( ( Mutex_CO2 ) );  // Make the MUTEX available for use, by initially "Giving" the Semaphore.
    3728:	00 e0       	ldi	r16, 0x00	; 0
    372a:	20 e0       	ldi	r18, 0x00	; 0
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	a9 01       	movw	r20, r18
    3730:	60 e0       	ldi	r22, 0x00	; 0
    3732:	70 e0       	ldi	r23, 0x00	; 0
    3734:	0e 94 8a 0b 	call	0x1714	; 0x1714 <xQueueGenericSend>
		}
	}
	
	if ( Mutex_humidity == NULL )  // Check to confirm that the Semaphore has not already been created.
    3738:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <Mutex_humidity>
    373c:	90 91 af 19 	lds	r25, 0x19AF	; 0x8019af <Mutex_humidity+0x1>
    3740:	89 2b       	or	r24, r25
    3742:	89 f4       	brne	.+34     	; 0x3766 <create_tasks_and_semaphores+0x5e>
	{
		Mutex_humidity = xSemaphoreCreateMutex();  // Create a MUTEX semaphore.
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	0e 94 2a 0c 	call	0x1854	; 0x1854 <xQueueCreateMutex>
    374a:	90 93 af 19 	sts	0x19AF, r25	; 0x8019af <Mutex_humidity+0x1>
    374e:	80 93 ae 19 	sts	0x19AE, r24	; 0x8019ae <Mutex_humidity>
		if ( ( Mutex_humidity ) != NULL )
    3752:	00 97       	sbiw	r24, 0x00	; 0
    3754:	41 f0       	breq	.+16     	; 0x3766 <create_tasks_and_semaphores+0x5e>
		{
			xSemaphoreGive( ( Mutex_humidity ) );  // Make the MUTEX available for use, by initially "Giving" the Semaphore.
    3756:	00 e0       	ldi	r16, 0x00	; 0
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	a9 01       	movw	r20, r18
    375e:	60 e0       	ldi	r22, 0x00	; 0
    3760:	70 e0       	ldi	r23, 0x00	; 0
    3762:	0e 94 8a 0b 	call	0x1714	; 0x1714 <xQueueGenericSend>
		}
	}
	
	if ( Mutex_temperature == NULL )  // Check to confirm that the Semaphore has not already been created.
    3766:	80 91 b7 19 	lds	r24, 0x19B7	; 0x8019b7 <Mutex_temperature>
    376a:	90 91 b8 19 	lds	r25, 0x19B8	; 0x8019b8 <Mutex_temperature+0x1>
    376e:	89 2b       	or	r24, r25
    3770:	89 f4       	brne	.+34     	; 0x3794 <create_tasks_and_semaphores+0x8c>
	{
		Mutex_temperature = xSemaphoreCreateMutex();  // Create a MUTEX semaphore.
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	0e 94 2a 0c 	call	0x1854	; 0x1854 <xQueueCreateMutex>
    3778:	90 93 b8 19 	sts	0x19B8, r25	; 0x8019b8 <Mutex_temperature+0x1>
    377c:	80 93 b7 19 	sts	0x19B7, r24	; 0x8019b7 <Mutex_temperature>
		if ( ( Mutex_temperature ) != NULL )
    3780:	00 97       	sbiw	r24, 0x00	; 0
    3782:	41 f0       	breq	.+16     	; 0x3794 <create_tasks_and_semaphores+0x8c>
		{
			xSemaphoreGive( ( Mutex_temperature ) );  // Make the MUTEX available for use, by initially "Giving" the Semaphore.
    3784:	00 e0       	ldi	r16, 0x00	; 0
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	a9 01       	movw	r20, r18
    378c:	60 e0       	ldi	r22, 0x00	; 0
    378e:	70 e0       	ldi	r23, 0x00	; 0
    3790:	0e 94 8a 0b 	call	0x1714	; 0x1714 <xQueueGenericSend>
		}
	}
	
		init_resources();
    3794:	0e 94 35 05 	call	0xa6a	; 0xa6a <init_resources>
		ServoHandler_create();
    3798:	0e 94 3d 05 	call	0xa7a	; 0xa7a <ServoHandler_create>
		HumidityTemperatureSensor_create();
    379c:	a0 df       	rcall	.-192    	; 0x36de <HumidityTemperatureSensor_create>
		CO2Sensor_create();
    379e:	0e 94 a3 02 	call	0x546	; 0x546 <CO2Sensor_create>
		PacketAssembly_create();
    37a2:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <PacketAssembly_create>
		
		
}
    37a6:	0f 91       	pop	r16
    37a8:	08 95       	ret

000037aa <create_event_groups_and_queues>:

void create_event_groups_and_queues()
{

	
	Measure_event_group = xEventGroupCreate();
    37aa:	0e 94 95 05 	call	0xb2a	; 0xb2a <xEventGroupCreate>
    37ae:	90 93 b5 19 	sts	0x19B5, r25	; 0x8019b5 <Measure_event_group+0x1>
    37b2:	80 93 b4 19 	sts	0x19B4, r24	; 0x8019b4 <Measure_event_group>
	if(Measure_event_group == NULL)
    37b6:	89 2b       	or	r24, r25
    37b8:	21 f4       	brne	.+8      	; 0x37c2 <create_event_groups_and_queues+0x18>
			printf("%s\n","#ERROR - Measure_event_group was NOT created because there was insufficient FreeRTOS heap available");
    37ba:	8e e0       	ldi	r24, 0x0E	; 14
    37bc:	94 e0       	ldi	r25, 0x04	; 4
    37be:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <puts>
	Data_event_group = xEventGroupCreate();
    37c2:	0e 94 95 05 	call	0xb2a	; 0xb2a <xEventGroupCreate>
    37c6:	90 93 b1 19 	sts	0x19B1, r25	; 0x8019b1 <Data_event_group+0x1>
    37ca:	80 93 b0 19 	sts	0x19B0, r24	; 0x8019b0 <Data_event_group>
	if(Data_event_group == NULL) 
    37ce:	89 2b       	or	r24, r25
    37d0:	21 f4       	brne	.+8      	; 0x37da <create_event_groups_and_queues+0x30>
			printf("%s\n","#ERROR - Measure_event_group was NOT created because there was insufficient FreeRTOS heap available");
    37d2:	8e e0       	ldi	r24, 0x0E	; 14
    37d4:	94 e0       	ldi	r25, 0x04	; 4
    37d6:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <puts>
	Message_queue = xQueueCreate(10,sizeof(lora_payload_t));
    37da:	40 e0       	ldi	r20, 0x00	; 0
    37dc:	66 e1       	ldi	r22, 0x16	; 22
    37de:	8a e0       	ldi	r24, 0x0A	; 10
    37e0:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <xQueueGenericCreate>
    37e4:	90 93 bc 19 	sts	0x19BC, r25	; 0x8019bc <Message_queue+0x1>
    37e8:	80 93 bb 19 	sts	0x19BB, r24	; 0x8019bb <Message_queue>
    37ec:	08 95       	ret

000037ee <initialiseSystem>:
{
	// Set output ports for LEDS used in the example
	//DDRA |= _BV(DDA0) | _BV(DDA7);
	
	// Initialize the trace-driver to be used together with the R2R-Network
	trace_init();
    37ee:	0e 94 7f 05 	call	0xafe	; 0xafe <trace_init>
	
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <stdioCreate>
	
	// Let's create some tasks
	down_link_message_buffer_handle = xMessageBufferCreate(sizeof(lora_payload_t)*2);
    37f8:	41 e0       	ldi	r20, 0x01	; 1
    37fa:	60 e0       	ldi	r22, 0x00	; 0
    37fc:	70 e0       	ldi	r23, 0x00	; 0
    37fe:	8c e2       	ldi	r24, 0x2C	; 44
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <xStreamBufferGenericCreate>
    3806:	90 93 f4 19 	sts	0x19F4, r25	; 0x8019f4 <down_link_message_buffer_handle+0x1>
    380a:	80 93 f3 19 	sts	0x19F3, r24	; 0x8019f3 <down_link_message_buffer_handle>
	if(down_link_message_buffer_handle == NULL){
    380e:	89 2b       	or	r24, r25
    3810:	21 f4       	brne	.+8      	; 0x381a <initialiseSystem+0x2c>
		printf("%s\n","Message buffer not created!!");
    3812:	82 e7       	ldi	r24, 0x72	; 114
    3814:	94 e0       	ldi	r25, 0x04	; 4
    3816:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <puts>
	}
	//else printf("%s\n","Message buffer created!");
	
	create_event_groups_and_queues();
    381a:	c7 df       	rcall	.-114    	; 0x37aa <create_event_groups_and_queues>
	create_tasks_and_semaphores();
    381c:	75 df       	rcall	.-278    	; 0x3708 <create_tasks_and_semaphores>
	

	// Initialize the HAL layer and use 5 for LED driver priority
	hal_create(5);
    381e:	85 e0       	ldi	r24, 0x05	; 5
    3820:	74 d0       	rcall	.+232    	; 0x390a <hal_create>
    3822:	60 91 f3 19 	lds	r22, 0x19F3	; 0x8019f3 <down_link_message_buffer_handle>
	
	// Initialize the LoRaWAN driver with down-link buffer
	
	lora_driver_create(LORA_USART, down_link_message_buffer_handle); 
    3826:	70 91 f4 19 	lds	r23, 0x19F4	; 0x8019f4 <down_link_message_buffer_handle+0x1>
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	8f d3       	rcall	.+1822   	; 0x3f4c <lora_driver_create>
    382e:	83 e0       	ldi	r24, 0x03	; 3
	
	// Create LoRaWAN task and start it up with priority 3
	lora_send_task_create(3);
    3830:	0c 94 bc 02 	jmp	0x578	; 0x578 <lora_send_task_create>
    3834:	08 95       	ret

00003836 <main>:
    3836:	db df       	rcall	.-74     	; 0x37ee <initialiseSystem>
/*-----------------------------------------------------------*/
int main(void)
{	
	
	initialiseSystem(); 
	printf("START\n");
    3838:	8f e8       	ldi	r24, 0x8F	; 143
    383a:	94 e0       	ldi	r25, 0x04	; 4
    383c:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3840:	0e 94 a4 12 	call	0x2548	; 0x2548 <vTaskStartScheduler>
	while (1)
	{
		printf("This bit of code shouldn't run!!");
    3844:	c5 e9       	ldi	r28, 0x95	; 149
    3846:	d4 e0       	ldi	r29, 0x04	; 4
    3848:	df 93       	push	r29
    384a:	cf 93       	push	r28
    384c:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <printf>
    3850:	0f 90       	pop	r0
    3852:	0f 90       	pop	r0
    3854:	f9 cf       	rjmp	.-14     	; 0x3848 <main+0x12>

00003856 <__fixsfsi>:
    3856:	04 d0       	rcall	.+8      	; 0x3860 <__fixunssfsi>
    3858:	68 94       	set
    385a:	b1 11       	cpse	r27, r1
    385c:	50 c0       	rjmp	.+160    	; 0x38fe <__fp_szero>
    385e:	08 95       	ret

00003860 <__fixunssfsi>:
    3860:	33 d0       	rcall	.+102    	; 0x38c8 <__fp_splitA>
    3862:	88 f0       	brcs	.+34     	; 0x3886 <__fixunssfsi+0x26>
    3864:	9f 57       	subi	r25, 0x7F	; 127
    3866:	90 f0       	brcs	.+36     	; 0x388c <__fixunssfsi+0x2c>
    3868:	b9 2f       	mov	r27, r25
    386a:	99 27       	eor	r25, r25
    386c:	b7 51       	subi	r27, 0x17	; 23
    386e:	a0 f0       	brcs	.+40     	; 0x3898 <__fixunssfsi+0x38>
    3870:	d1 f0       	breq	.+52     	; 0x38a6 <__fixunssfsi+0x46>
    3872:	66 0f       	add	r22, r22
    3874:	77 1f       	adc	r23, r23
    3876:	88 1f       	adc	r24, r24
    3878:	99 1f       	adc	r25, r25
    387a:	1a f0       	brmi	.+6      	; 0x3882 <__fixunssfsi+0x22>
    387c:	ba 95       	dec	r27
    387e:	c9 f7       	brne	.-14     	; 0x3872 <__fixunssfsi+0x12>
    3880:	12 c0       	rjmp	.+36     	; 0x38a6 <__fixunssfsi+0x46>
    3882:	b1 30       	cpi	r27, 0x01	; 1
    3884:	81 f0       	breq	.+32     	; 0x38a6 <__fixunssfsi+0x46>
    3886:	3a d0       	rcall	.+116    	; 0x38fc <__fp_zero>
    3888:	b1 e0       	ldi	r27, 0x01	; 1
    388a:	08 95       	ret
    388c:	37 c0       	rjmp	.+110    	; 0x38fc <__fp_zero>
    388e:	67 2f       	mov	r22, r23
    3890:	78 2f       	mov	r23, r24
    3892:	88 27       	eor	r24, r24
    3894:	b8 5f       	subi	r27, 0xF8	; 248
    3896:	39 f0       	breq	.+14     	; 0x38a6 <__fixunssfsi+0x46>
    3898:	b9 3f       	cpi	r27, 0xF9	; 249
    389a:	cc f3       	brlt	.-14     	; 0x388e <__fixunssfsi+0x2e>
    389c:	86 95       	lsr	r24
    389e:	77 95       	ror	r23
    38a0:	67 95       	ror	r22
    38a2:	b3 95       	inc	r27
    38a4:	d9 f7       	brne	.-10     	; 0x389c <__fixunssfsi+0x3c>
    38a6:	3e f4       	brtc	.+14     	; 0x38b6 <__fixunssfsi+0x56>
    38a8:	90 95       	com	r25
    38aa:	80 95       	com	r24
    38ac:	70 95       	com	r23
    38ae:	61 95       	neg	r22
    38b0:	7f 4f       	sbci	r23, 0xFF	; 255
    38b2:	8f 4f       	sbci	r24, 0xFF	; 255
    38b4:	9f 4f       	sbci	r25, 0xFF	; 255
    38b6:	08 95       	ret

000038b8 <__fp_split3>:
    38b8:	57 fd       	sbrc	r21, 7
    38ba:	90 58       	subi	r25, 0x80	; 128
    38bc:	44 0f       	add	r20, r20
    38be:	55 1f       	adc	r21, r21
    38c0:	59 f0       	breq	.+22     	; 0x38d8 <__fp_splitA+0x10>
    38c2:	5f 3f       	cpi	r21, 0xFF	; 255
    38c4:	71 f0       	breq	.+28     	; 0x38e2 <__fp_splitA+0x1a>
    38c6:	47 95       	ror	r20

000038c8 <__fp_splitA>:
    38c8:	88 0f       	add	r24, r24
    38ca:	97 fb       	bst	r25, 7
    38cc:	99 1f       	adc	r25, r25
    38ce:	61 f0       	breq	.+24     	; 0x38e8 <__fp_splitA+0x20>
    38d0:	9f 3f       	cpi	r25, 0xFF	; 255
    38d2:	79 f0       	breq	.+30     	; 0x38f2 <__fp_splitA+0x2a>
    38d4:	87 95       	ror	r24
    38d6:	08 95       	ret
    38d8:	12 16       	cp	r1, r18
    38da:	13 06       	cpc	r1, r19
    38dc:	14 06       	cpc	r1, r20
    38de:	55 1f       	adc	r21, r21
    38e0:	f2 cf       	rjmp	.-28     	; 0x38c6 <__fp_split3+0xe>
    38e2:	46 95       	lsr	r20
    38e4:	f1 df       	rcall	.-30     	; 0x38c8 <__fp_splitA>
    38e6:	08 c0       	rjmp	.+16     	; 0x38f8 <__fp_splitA+0x30>
    38e8:	16 16       	cp	r1, r22
    38ea:	17 06       	cpc	r1, r23
    38ec:	18 06       	cpc	r1, r24
    38ee:	99 1f       	adc	r25, r25
    38f0:	f1 cf       	rjmp	.-30     	; 0x38d4 <__fp_splitA+0xc>
    38f2:	86 95       	lsr	r24
    38f4:	71 05       	cpc	r23, r1
    38f6:	61 05       	cpc	r22, r1
    38f8:	08 94       	sec
    38fa:	08 95       	ret

000038fc <__fp_zero>:
    38fc:	e8 94       	clt

000038fe <__fp_szero>:
    38fe:	bb 27       	eor	r27, r27
    3900:	66 27       	eor	r22, r22
    3902:	77 27       	eor	r23, r23
    3904:	cb 01       	movw	r24, r22
    3906:	97 f9       	bld	r25, 7
    3908:	08 95       	ret

0000390a <hal_create>:
    390a:	e7 ef       	ldi	r30, 0xF7	; 247
    390c:	f9 e1       	ldi	r31, 0x19	; 25
    390e:	2b ef       	ldi	r18, 0xFB	; 251
    3910:	32 e2       	ldi	r19, 0x22	; 34
    3912:	31 83       	std	Z+1, r19	; 0x01
    3914:	20 83       	st	Z, r18
    3916:	2e ef       	ldi	r18, 0xFE	; 254
    3918:	32 e2       	ldi	r19, 0x22	; 34
    391a:	33 83       	std	Z+3, r19	; 0x03
    391c:	22 83       	std	Z+2, r18	; 0x02
    391e:	29 e0       	ldi	r18, 0x09	; 9
    3920:	33 e2       	ldi	r19, 0x23	; 35
    3922:	35 83       	std	Z+5, r19	; 0x05
    3924:	24 83       	std	Z+4, r18	; 0x04
    3926:	2d e0       	ldi	r18, 0x0D	; 13
    3928:	33 e2       	ldi	r19, 0x23	; 35
    392a:	37 83       	std	Z+7, r19	; 0x07
    392c:	26 83       	std	Z+6, r18	; 0x06
    392e:	23 e1       	ldi	r18, 0x13	; 19
    3930:	33 e2       	ldi	r19, 0x23	; 35
    3932:	31 87       	std	Z+9, r19	; 0x09
    3934:	20 87       	std	Z+8, r18	; 0x08
    3936:	2f e1       	ldi	r18, 0x1F	; 31
    3938:	33 e2       	ldi	r19, 0x23	; 35
    393a:	33 87       	std	Z+11, r19	; 0x0b
    393c:	22 87       	std	Z+10, r18	; 0x0a
    393e:	24 e2       	ldi	r18, 0x24	; 36
    3940:	33 e2       	ldi	r19, 0x23	; 35
    3942:	35 87       	std	Z+13, r19	; 0x0d
    3944:	24 87       	std	Z+12, r18	; 0x0c
    3946:	20 e3       	ldi	r18, 0x30	; 48
    3948:	33 e2       	ldi	r19, 0x23	; 35
    394a:	37 87       	std	Z+15, r19	; 0x0f
    394c:	26 87       	std	Z+14, r18	; 0x0e
    394e:	20 e1       	ldi	r18, 0x10	; 16
    3950:	33 e2       	ldi	r19, 0x23	; 35
    3952:	31 8b       	std	Z+17, r19	; 0x11
    3954:	20 8b       	std	Z+16, r18	; 0x10
    3956:	25 e3       	ldi	r18, 0x35	; 53
    3958:	33 e2       	ldi	r19, 0x23	; 35
    395a:	33 8b       	std	Z+19, r19	; 0x13
    395c:	22 8b       	std	Z+18, r18	; 0x12
    395e:	22 e4       	ldi	r18, 0x42	; 66
    3960:	33 e2       	ldi	r19, 0x23	; 35
    3962:	35 8b       	std	Z+21, r19	; 0x15
    3964:	24 8b       	std	Z+20, r18	; 0x14
    3966:	68 2f       	mov	r22, r24
    3968:	cf 01       	movw	r24, r30
    396a:	3a c1       	rjmp	.+628    	; 0x3be0 <led_create>
    396c:	08 95       	ret

0000396e <_hihTwiCallback>:
    396e:	65 30       	cpi	r22, 0x05	; 5
    3970:	f1 f4       	brne	.+60     	; 0x39ae <_hihTwiCallback+0x40>
    3972:	fa 01       	movw	r30, r20
    3974:	80 81       	ld	r24, Z
    3976:	8f 73       	andi	r24, 0x3F	; 63
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	98 2f       	mov	r25, r24
    397c:	88 27       	eor	r24, r24
    397e:	21 81       	ldd	r18, Z+1	; 0x01
    3980:	82 2b       	or	r24, r18
    3982:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3986:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    398a:	82 81       	ldd	r24, Z+2	; 0x02
    398c:	f0 e4       	ldi	r31, 0x40	; 64
    398e:	8f 9f       	mul	r24, r31
    3990:	c0 01       	movw	r24, r0
    3992:	11 24       	eor	r1, r1
    3994:	fa 01       	movw	r30, r20
    3996:	23 81       	ldd	r18, Z+3	; 0x03
    3998:	26 95       	lsr	r18
    399a:	26 95       	lsr	r18
    399c:	82 2b       	or	r24, r18
    399e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    39a2:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    39a6:	81 e0       	ldi	r24, 0x01	; 1
    39a8:	80 93 52 18 	sts	0x1852, r24	; 0x801852 <_measuringIsReady>
    39ac:	08 95       	ret
    39ae:	64 30       	cpi	r22, 0x04	; 4
    39b0:	51 f0       	breq	.+20     	; 0x39c6 <_hihTwiCallback+0x58>
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	90 e4       	ldi	r25, 0x40	; 64
    39b6:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    39ba:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    39be:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    39c2:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    39c6:	08 95       	ret

000039c8 <hih8120Create>:
    39c8:	0f 93       	push	r16
    39ca:	1f 93       	push	r17
    39cc:	07 eb       	ldi	r16, 0xB7	; 183
    39ce:	1c e1       	ldi	r17, 0x1C	; 28
    39d0:	20 e0       	ldi	r18, 0x00	; 0
    39d2:	34 e2       	ldi	r19, 0x24	; 36
    39d4:	44 ef       	ldi	r20, 0xF4	; 244
    39d6:	50 e0       	ldi	r21, 0x00	; 0
    39d8:	60 e0       	ldi	r22, 0x00	; 0
    39da:	87 e2       	ldi	r24, 0x27	; 39
    39dc:	0e 94 0c 28 	call	0x5018	; 0x5018 <twiCreate>
    39e0:	90 93 54 18 	sts	0x1854, r25	; 0x801854 <_hih8120Handler+0x1>
    39e4:	80 93 53 18 	sts	0x1853, r24	; 0x801853 <_hih8120Handler>
    39e8:	21 e0       	ldi	r18, 0x01	; 1
    39ea:	89 2b       	or	r24, r25
    39ec:	09 f0       	breq	.+2      	; 0x39f0 <hih8120Create+0x28>
    39ee:	20 e0       	ldi	r18, 0x00	; 0
    39f0:	82 2f       	mov	r24, r18
    39f2:	1f 91       	pop	r17
    39f4:	0f 91       	pop	r16
    39f6:	08 95       	ret

000039f8 <hih8120Wakeup>:
    39f8:	80 91 53 18 	lds	r24, 0x1853	; 0x801853 <_hih8120Handler>
    39fc:	90 91 54 18 	lds	r25, 0x1854	; 0x801854 <_hih8120Handler+0x1>
    3a00:	00 97       	sbiw	r24, 0x00	; 0
    3a02:	59 f0       	breq	.+22     	; 0x3a1a <hih8120Wakeup+0x22>
    3a04:	40 e0       	ldi	r20, 0x00	; 0
    3a06:	60 e0       	ldi	r22, 0x00	; 0
    3a08:	70 e0       	ldi	r23, 0x00	; 0
    3a0a:	0e 94 5d 28 	call	0x50ba	; 0x50ba <twiTransmit>
    3a0e:	84 30       	cpi	r24, 0x04	; 4
    3a10:	31 f4       	brne	.+12     	; 0x3a1e <hih8120Wakeup+0x26>
    3a12:	10 92 52 18 	sts	0x1852, r1	; 0x801852 <_measuringIsReady>
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	08 95       	ret
    3a1a:	82 e0       	ldi	r24, 0x02	; 2
    3a1c:	08 95       	ret
    3a1e:	83 e0       	ldi	r24, 0x03	; 3
    3a20:	08 95       	ret

00003a22 <hih8120Meassure>:
    3a22:	80 91 53 18 	lds	r24, 0x1853	; 0x801853 <_hih8120Handler>
    3a26:	90 91 54 18 	lds	r25, 0x1854	; 0x801854 <_hih8120Handler+0x1>
    3a2a:	00 97       	sbiw	r24, 0x00	; 0
    3a2c:	39 f0       	breq	.+14     	; 0x3a3c <hih8120Meassure+0x1a>
    3a2e:	64 e0       	ldi	r22, 0x04	; 4
    3a30:	0e 94 a9 28 	call	0x5152	; 0x5152 <twiReceive>
    3a34:	85 30       	cpi	r24, 0x05	; 5
    3a36:	21 f0       	breq	.+8      	; 0x3a40 <hih8120Meassure+0x1e>
    3a38:	83 e0       	ldi	r24, 0x03	; 3
    3a3a:	08 95       	ret
    3a3c:	82 e0       	ldi	r24, 0x02	; 2
    3a3e:	08 95       	ret
    3a40:	80 e0       	ldi	r24, 0x00	; 0
    3a42:	08 95       	ret

00003a44 <hih8120GetHumidity>:
    3a44:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3a48:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	0e 94 87 2a 	call	0x550e	; 0x550e <__floatunsisf>
    3a54:	20 e0       	ldi	r18, 0x00	; 0
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	48 ec       	ldi	r20, 0xC8	; 200
    3a5a:	52 e4       	ldi	r21, 0x42	; 66
    3a5c:	0e 94 ec 2a 	call	0x55d8	; 0x55d8 <__mulsf3>
    3a60:	20 e0       	ldi	r18, 0x00	; 0
    3a62:	38 ef       	ldi	r19, 0xF8	; 248
    3a64:	4f e7       	ldi	r20, 0x7F	; 127
    3a66:	56 e4       	ldi	r21, 0x46	; 70
    3a68:	0c 94 1c 2a 	jmp	0x5438	; 0x5438 <__divsf3>
    3a6c:	08 95       	ret

00003a6e <hih8120GetTemperature>:
    3a6e:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3a72:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3a76:	80 e0       	ldi	r24, 0x00	; 0
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	0e 94 87 2a 	call	0x550e	; 0x550e <__floatunsisf>
    3a7e:	20 e0       	ldi	r18, 0x00	; 0
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	45 e2       	ldi	r20, 0x25	; 37
    3a84:	53 e4       	ldi	r21, 0x43	; 67
    3a86:	0e 94 ec 2a 	call	0x55d8	; 0x55d8 <__mulsf3>
    3a8a:	20 e0       	ldi	r18, 0x00	; 0
    3a8c:	38 ef       	ldi	r19, 0xF8	; 248
    3a8e:	4f e7       	ldi	r20, 0x7F	; 127
    3a90:	56 e4       	ldi	r21, 0x46	; 70
    3a92:	0e 94 1c 2a 	call	0x5438	; 0x5438 <__divsf3>
    3a96:	20 e0       	ldi	r18, 0x00	; 0
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	40 e2       	ldi	r20, 0x20	; 32
    3a9c:	52 e4       	ldi	r21, 0x42	; 66
    3a9e:	0c 94 b5 29 	jmp	0x536a	; 0x536a <__subsf3>
    3aa2:	08 95       	ret

00003aa4 <_turn_off>:
    3aa4:	cf 93       	push	r28
    3aa6:	df 93       	push	r29
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	fc 01       	movw	r30, r24
    3aac:	ee 0f       	add	r30, r30
    3aae:	ff 1f       	adc	r31, r31
    3ab0:	e8 0f       	add	r30, r24
    3ab2:	f9 1f       	adc	r31, r25
    3ab4:	ee 0f       	add	r30, r30
    3ab6:	ff 1f       	adc	r31, r31
    3ab8:	eb 5a       	subi	r30, 0xAB	; 171
    3aba:	f7 4e       	sbci	r31, 0xE7	; 231
    3abc:	23 81       	ldd	r18, Z+3	; 0x03
    3abe:	21 11       	cpse	r18, r1
    3ac0:	0a c0       	rjmp	.+20     	; 0x3ad6 <_turn_off+0x32>
    3ac2:	ef 01       	movw	r28, r30
    3ac4:	e0 91 ff 19 	lds	r30, 0x19FF	; 0x8019ff <register_access+0x8>
    3ac8:	f0 91 00 1a 	lds	r31, 0x1A00	; 0x801a00 <register_access+0x9>
    3acc:	6a 81       	ldd	r22, Y+2	; 0x02
    3ace:	88 81       	ld	r24, Y
    3ad0:	99 81       	ldd	r25, Y+1	; 0x01
    3ad2:	19 95       	eicall
    3ad4:	12 c0       	rjmp	.+36     	; 0x3afa <_turn_off+0x56>
    3ad6:	dc 01       	movw	r26, r24
    3ad8:	aa 0f       	add	r26, r26
    3ada:	bb 1f       	adc	r27, r27
    3adc:	ed 01       	movw	r28, r26
    3ade:	c8 0f       	add	r28, r24
    3ae0:	d9 1f       	adc	r29, r25
    3ae2:	cc 0f       	add	r28, r28
    3ae4:	dd 1f       	adc	r29, r29
    3ae6:	cb 5a       	subi	r28, 0xAB	; 171
    3ae8:	d7 4e       	sbci	r29, 0xE7	; 231
    3aea:	e0 91 09 1a 	lds	r30, 0x1A09	; 0x801a09 <register_access+0x12>
    3aee:	f0 91 0a 1a 	lds	r31, 0x1A0A	; 0x801a0a <register_access+0x13>
    3af2:	6a 81       	ldd	r22, Y+2	; 0x02
    3af4:	88 81       	ld	r24, Y
    3af6:	99 81       	ldd	r25, Y+1	; 0x01
    3af8:	19 95       	eicall
    3afa:	df 91       	pop	r29
    3afc:	cf 91       	pop	r28
    3afe:	08 95       	ret

00003b00 <_turn_on>:
    3b00:	cf 93       	push	r28
    3b02:	df 93       	push	r29
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	fc 01       	movw	r30, r24
    3b08:	ee 0f       	add	r30, r30
    3b0a:	ff 1f       	adc	r31, r31
    3b0c:	e8 0f       	add	r30, r24
    3b0e:	f9 1f       	adc	r31, r25
    3b10:	ee 0f       	add	r30, r30
    3b12:	ff 1f       	adc	r31, r31
    3b14:	eb 5a       	subi	r30, 0xAB	; 171
    3b16:	f7 4e       	sbci	r31, 0xE7	; 231
    3b18:	23 81       	ldd	r18, Z+3	; 0x03
    3b1a:	21 11       	cpse	r18, r1
    3b1c:	0a c0       	rjmp	.+20     	; 0x3b32 <_turn_on+0x32>
    3b1e:	ef 01       	movw	r28, r30
    3b20:	e0 91 09 1a 	lds	r30, 0x1A09	; 0x801a09 <register_access+0x12>
    3b24:	f0 91 0a 1a 	lds	r31, 0x1A0A	; 0x801a0a <register_access+0x13>
    3b28:	6a 81       	ldd	r22, Y+2	; 0x02
    3b2a:	88 81       	ld	r24, Y
    3b2c:	99 81       	ldd	r25, Y+1	; 0x01
    3b2e:	19 95       	eicall
    3b30:	12 c0       	rjmp	.+36     	; 0x3b56 <_turn_on+0x56>
    3b32:	dc 01       	movw	r26, r24
    3b34:	aa 0f       	add	r26, r26
    3b36:	bb 1f       	adc	r27, r27
    3b38:	ed 01       	movw	r28, r26
    3b3a:	c8 0f       	add	r28, r24
    3b3c:	d9 1f       	adc	r29, r25
    3b3e:	cc 0f       	add	r28, r28
    3b40:	dd 1f       	adc	r29, r29
    3b42:	cb 5a       	subi	r28, 0xAB	; 171
    3b44:	d7 4e       	sbci	r29, 0xE7	; 231
    3b46:	e0 91 ff 19 	lds	r30, 0x19FF	; 0x8019ff <register_access+0x8>
    3b4a:	f0 91 00 1a 	lds	r31, 0x1A00	; 0x801a00 <register_access+0x9>
    3b4e:	6a 81       	ldd	r22, Y+2	; 0x02
    3b50:	88 81       	ld	r24, Y
    3b52:	99 81       	ldd	r25, Y+1	; 0x01
    3b54:	19 95       	eicall
    3b56:	df 91       	pop	r29
    3b58:	cf 91       	pop	r28
    3b5a:	08 95       	ret

00003b5c <_hal_led_task>:
    3b5c:	0f 2e       	mov	r0, r31
    3b5e:	f7 ef       	ldi	r31, 0xF7	; 247
    3b60:	cf 2e       	mov	r12, r31
    3b62:	f9 e1       	ldi	r31, 0x19	; 25
    3b64:	df 2e       	mov	r13, r31
    3b66:	f0 2d       	mov	r31, r0
    3b68:	04 e0       	ldi	r16, 0x04	; 4
    3b6a:	c5 e5       	ldi	r28, 0x55	; 85
    3b6c:	d8 e1       	ldi	r29, 0x18	; 24
    3b6e:	10 e0       	ldi	r17, 0x00	; 0
    3b70:	8c 81       	ldd	r24, Y+4	; 0x04
    3b72:	81 30       	cpi	r24, 0x01	; 1
    3b74:	69 f0       	breq	.+26     	; 0x3b90 <_hal_led_task+0x34>
    3b76:	e8 f0       	brcs	.+58     	; 0x3bb2 <_hal_led_task+0x56>
    3b78:	82 30       	cpi	r24, 0x02	; 2
    3b7a:	39 f5       	brne	.+78     	; 0x3bca <_hal_led_task+0x6e>
    3b7c:	d6 01       	movw	r26, r12
    3b7e:	1c 96       	adiw	r26, 0x0c	; 12
    3b80:	ed 91       	ld	r30, X+
    3b82:	fc 91       	ld	r31, X
    3b84:	1d 97       	sbiw	r26, 0x0d	; 13
    3b86:	6a 81       	ldd	r22, Y+2	; 0x02
    3b88:	88 81       	ld	r24, Y
    3b8a:	99 81       	ldd	r25, Y+1	; 0x01
    3b8c:	19 95       	eicall
    3b8e:	1d c0       	rjmp	.+58     	; 0x3bca <_hal_led_task+0x6e>
    3b90:	8d 81       	ldd	r24, Y+5	; 0x05
    3b92:	8f 5f       	subi	r24, 0xFF	; 255
    3b94:	8a 30       	cpi	r24, 0x0A	; 10
    3b96:	10 f4       	brcc	.+4      	; 0x3b9c <_hal_led_task+0x40>
    3b98:	8d 83       	std	Y+5, r24	; 0x05
    3b9a:	17 c0       	rjmp	.+46     	; 0x3bca <_hal_led_task+0x6e>
    3b9c:	1d 82       	std	Y+5, r1	; 0x05
    3b9e:	d6 01       	movw	r26, r12
    3ba0:	1c 96       	adiw	r26, 0x0c	; 12
    3ba2:	ed 91       	ld	r30, X+
    3ba4:	fc 91       	ld	r31, X
    3ba6:	1d 97       	sbiw	r26, 0x0d	; 13
    3ba8:	6a 81       	ldd	r22, Y+2	; 0x02
    3baa:	88 81       	ld	r24, Y
    3bac:	99 81       	ldd	r25, Y+1	; 0x01
    3bae:	19 95       	eicall
    3bb0:	0c c0       	rjmp	.+24     	; 0x3bca <_hal_led_task+0x6e>
    3bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb4:	88 23       	and	r24, r24
    3bb6:	31 f0       	breq	.+12     	; 0x3bc4 <_hal_led_task+0x68>
    3bb8:	81 2f       	mov	r24, r17
    3bba:	a2 df       	rcall	.-188    	; 0x3b00 <_turn_on>
    3bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bbe:	81 50       	subi	r24, 0x01	; 1
    3bc0:	8d 83       	std	Y+5, r24	; 0x05
    3bc2:	03 c0       	rjmp	.+6      	; 0x3bca <_hal_led_task+0x6e>
    3bc4:	0c 83       	std	Y+4, r16	; 0x04
    3bc6:	81 2f       	mov	r24, r17
    3bc8:	6d df       	rcall	.-294    	; 0x3aa4 <_turn_off>
    3bca:	1f 5f       	subi	r17, 0xFF	; 255
    3bcc:	26 96       	adiw	r28, 0x06	; 6
    3bce:	14 30       	cpi	r17, 0x04	; 4
    3bd0:	79 f6       	brne	.-98     	; 0x3b70 <_hal_led_task+0x14>
    3bd2:	65 e0       	ldi	r22, 0x05	; 5
    3bd4:	70 e0       	ldi	r23, 0x00	; 0
    3bd6:	80 e0       	ldi	r24, 0x00	; 0
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	0e 94 a3 14 	call	0x2946	; 0x2946 <vTaskDelay>
    3bde:	c5 cf       	rjmp	.-118    	; 0x3b6a <_hal_led_task+0xe>

00003be0 <led_create>:
    3be0:	cf 92       	push	r12
    3be2:	df 92       	push	r13
    3be4:	ef 92       	push	r14
    3be6:	ff 92       	push	r15
    3be8:	0f 93       	push	r16
    3bea:	1f 93       	push	r17
    3bec:	cf 93       	push	r28
    3bee:	df 93       	push	r29
    3bf0:	06 2f       	mov	r16, r22
    3bf2:	0f 2e       	mov	r0, r31
    3bf4:	f7 ef       	ldi	r31, 0xF7	; 247
    3bf6:	ef 2e       	mov	r14, r31
    3bf8:	f9 e1       	ldi	r31, 0x19	; 25
    3bfa:	ff 2e       	mov	r15, r31
    3bfc:	f0 2d       	mov	r31, r0
    3bfe:	d7 01       	movw	r26, r14
    3c00:	18 96       	adiw	r26, 0x08	; 8
    3c02:	ed 91       	ld	r30, X+
    3c04:	fc 91       	ld	r31, X
    3c06:	19 97       	sbiw	r26, 0x09	; 9
    3c08:	66 e0       	ldi	r22, 0x06	; 6
    3c0a:	87 e2       	ldi	r24, 0x27	; 39
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	19 95       	eicall
    3c10:	c5 e5       	ldi	r28, 0x55	; 85
    3c12:	d8 e1       	ldi	r29, 0x18	; 24
    3c14:	0f 2e       	mov	r0, r31
    3c16:	f8 e2       	ldi	r31, 0x28	; 40
    3c18:	cf 2e       	mov	r12, r31
    3c1a:	d1 2c       	mov	r13, r1
    3c1c:	f0 2d       	mov	r31, r0
    3c1e:	d9 82       	std	Y+1, r13	; 0x01
    3c20:	c8 82       	st	Y, r12
    3c22:	86 e0       	ldi	r24, 0x06	; 6
    3c24:	8a 83       	std	Y+2, r24	; 0x02
    3c26:	1b 82       	std	Y+3, r1	; 0x03
    3c28:	14 e0       	ldi	r17, 0x04	; 4
    3c2a:	1c 83       	std	Y+4, r17	; 0x04
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	3a df       	rcall	.-396    	; 0x3aa4 <_turn_off>
    3c30:	d7 01       	movw	r26, r14
    3c32:	18 96       	adiw	r26, 0x08	; 8
    3c34:	ed 91       	ld	r30, X+
    3c36:	fc 91       	ld	r31, X
    3c38:	19 97       	sbiw	r26, 0x09	; 9
    3c3a:	67 e0       	ldi	r22, 0x07	; 7
    3c3c:	87 e2       	ldi	r24, 0x27	; 39
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	19 95       	eicall
    3c42:	df 82       	std	Y+7, r13	; 0x07
    3c44:	ce 82       	std	Y+6, r12	; 0x06
    3c46:	87 e0       	ldi	r24, 0x07	; 7
    3c48:	88 87       	std	Y+8, r24	; 0x08
    3c4a:	19 86       	std	Y+9, r1	; 0x09
    3c4c:	1a 87       	std	Y+10, r17	; 0x0a
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	29 df       	rcall	.-430    	; 0x3aa4 <_turn_off>
    3c52:	d7 01       	movw	r26, r14
    3c54:	18 96       	adiw	r26, 0x08	; 8
    3c56:	ed 91       	ld	r30, X+
    3c58:	fc 91       	ld	r31, X
    3c5a:	19 97       	sbiw	r26, 0x09	; 9
    3c5c:	65 e0       	ldi	r22, 0x05	; 5
    3c5e:	83 e3       	ldi	r24, 0x33	; 51
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	19 95       	eicall
    3c64:	d7 01       	movw	r26, r14
    3c66:	18 96       	adiw	r26, 0x08	; 8
    3c68:	ed 91       	ld	r30, X+
    3c6a:	fc 91       	ld	r31, X
    3c6c:	19 97       	sbiw	r26, 0x09	; 9
    3c6e:	61 e0       	ldi	r22, 0x01	; 1
    3c70:	84 e3       	ldi	r24, 0x34	; 52
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	19 95       	eicall
    3c76:	84 e3       	ldi	r24, 0x34	; 52
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	9d 87       	std	Y+13, r25	; 0x0d
    3c7c:	8c 87       	std	Y+12, r24	; 0x0c
    3c7e:	85 e0       	ldi	r24, 0x05	; 5
    3c80:	8e 87       	std	Y+14, r24	; 0x0e
    3c82:	1f 86       	std	Y+15, r1	; 0x0f
    3c84:	18 8b       	std	Y+16, r17	; 0x10
    3c86:	82 e0       	ldi	r24, 0x02	; 2
    3c88:	0d df       	rcall	.-486    	; 0x3aa4 <_turn_off>
    3c8a:	d7 01       	movw	r26, r14
    3c8c:	18 96       	adiw	r26, 0x08	; 8
    3c8e:	ed 91       	ld	r30, X+
    3c90:	fc 91       	ld	r31, X
    3c92:	19 97       	sbiw	r26, 0x09	; 9
    3c94:	64 e0       	ldi	r22, 0x04	; 4
    3c96:	81 e0       	ldi	r24, 0x01	; 1
    3c98:	91 e0       	ldi	r25, 0x01	; 1
    3c9a:	19 95       	eicall
    3c9c:	d7 01       	movw	r26, r14
    3c9e:	18 96       	adiw	r26, 0x08	; 8
    3ca0:	ed 91       	ld	r30, X+
    3ca2:	fc 91       	ld	r31, X
    3ca4:	19 97       	sbiw	r26, 0x09	; 9
    3ca6:	61 e0       	ldi	r22, 0x01	; 1
    3ca8:	82 e0       	ldi	r24, 0x02	; 2
    3caa:	91 e0       	ldi	r25, 0x01	; 1
    3cac:	19 95       	eicall
    3cae:	82 e0       	ldi	r24, 0x02	; 2
    3cb0:	91 e0       	ldi	r25, 0x01	; 1
    3cb2:	9b 8b       	std	Y+19, r25	; 0x13
    3cb4:	8a 8b       	std	Y+18, r24	; 0x12
    3cb6:	1c 8b       	std	Y+20, r17	; 0x14
    3cb8:	1d 8a       	std	Y+21, r1	; 0x15
    3cba:	1e 8b       	std	Y+22, r17	; 0x16
    3cbc:	83 e0       	ldi	r24, 0x03	; 3
    3cbe:	f2 de       	rcall	.-540    	; 0x3aa4 <_turn_off>
    3cc0:	e1 2c       	mov	r14, r1
    3cc2:	f1 2c       	mov	r15, r1
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	40 ec       	ldi	r20, 0xC0	; 192
    3cca:	50 e0       	ldi	r21, 0x00	; 0
    3ccc:	66 eb       	ldi	r22, 0xB6	; 182
    3cce:	74 e0       	ldi	r23, 0x04	; 4
    3cd0:	8e ea       	ldi	r24, 0xAE	; 174
    3cd2:	9d e1       	ldi	r25, 0x1D	; 29
    3cd4:	0e 94 85 11 	call	0x230a	; 0x230a <xTaskCreate>
    3cd8:	df 91       	pop	r29
    3cda:	cf 91       	pop	r28
    3cdc:	1f 91       	pop	r17
    3cde:	0f 91       	pop	r16
    3ce0:	ff 90       	pop	r15
    3ce2:	ef 90       	pop	r14
    3ce4:	df 90       	pop	r13
    3ce6:	cf 90       	pop	r12
    3ce8:	08 95       	ret

00003cea <led_long_puls>:
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	fc 01       	movw	r30, r24
    3cee:	ee 0f       	add	r30, r30
    3cf0:	ff 1f       	adc	r31, r31
    3cf2:	df 01       	movw	r26, r30
    3cf4:	a8 0f       	add	r26, r24
    3cf6:	b9 1f       	adc	r27, r25
    3cf8:	aa 0f       	add	r26, r26
    3cfa:	bb 1f       	adc	r27, r27
    3cfc:	ab 5a       	subi	r26, 0xAB	; 171
    3cfe:	b7 4e       	sbci	r27, 0xE7	; 231
    3d00:	24 e0       	ldi	r18, 0x04	; 4
    3d02:	15 96       	adiw	r26, 0x05	; 5
    3d04:	2c 93       	st	X, r18
    3d06:	15 97       	sbiw	r26, 0x05	; 5
    3d08:	fd 01       	movw	r30, r26
    3d0a:	14 82       	std	Z+4, r1	; 0x04
    3d0c:	08 95       	ret

00003d0e <_serial_call_back>:
    3d0e:	0f 93       	push	r16
    3d10:	1f 93       	push	r17
    3d12:	cf 93       	push	r28
    3d14:	df 93       	push	r29
    3d16:	1f 92       	push	r1
    3d18:	1f 92       	push	r1
    3d1a:	cd b7       	in	r28, 0x3d	; 61
    3d1c:	de b7       	in	r29, 0x3e	; 62
    3d1e:	8c 01       	movw	r16, r24
    3d20:	19 82       	std	Y+1, r1	; 0x01
    3d22:	2d c0       	rjmp	.+90     	; 0x3d7e <_serial_call_back+0x70>
    3d24:	e0 91 d1 18 	lds	r30, 0x18D1	; 0x8018d1 <rec_buf_inp.2947>
    3d28:	ec 32       	cpi	r30, 0x2C	; 44
    3d2a:	50 f4       	brcc	.+20     	; 0x3d40 <_serial_call_back+0x32>
    3d2c:	81 e0       	ldi	r24, 0x01	; 1
    3d2e:	8e 0f       	add	r24, r30
    3d30:	80 93 d1 18 	sts	0x18D1, r24	; 0x8018d1 <rec_buf_inp.2947>
    3d34:	f0 e0       	ldi	r31, 0x00	; 0
    3d36:	ed 5f       	subi	r30, 0xFD	; 253
    3d38:	f6 4e       	sbci	r31, 0xE6	; 230
    3d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d3c:	80 83       	st	Z, r24
    3d3e:	02 c0       	rjmp	.+4      	; 0x3d44 <_serial_call_back+0x36>
    3d40:	10 92 d1 18 	sts	0x18D1, r1	; 0x8018d1 <rec_buf_inp.2947>
    3d44:	8a 81       	ldd	r24, Y+2	; 0x02
    3d46:	8a 30       	cpi	r24, 0x0A	; 10
    3d48:	d1 f4       	brne	.+52     	; 0x3d7e <_serial_call_back+0x70>
    3d4a:	40 91 d1 18 	lds	r20, 0x18D1	; 0x8018d1 <rec_buf_inp.2947>
    3d4e:	50 e0       	ldi	r21, 0x00	; 0
    3d50:	fa 01       	movw	r30, r20
    3d52:	ef 5f       	subi	r30, 0xFF	; 255
    3d54:	f6 4e       	sbci	r31, 0xE6	; 230
    3d56:	10 82       	st	Z, r1
    3d58:	41 50       	subi	r20, 0x01	; 1
    3d5a:	51 09       	sbc	r21, r1
    3d5c:	9e 01       	movw	r18, r28
    3d5e:	2f 5f       	subi	r18, 0xFF	; 255
    3d60:	3f 4f       	sbci	r19, 0xFF	; 255
    3d62:	63 e0       	ldi	r22, 0x03	; 3
    3d64:	79 e1       	ldi	r23, 0x19	; 25
    3d66:	80 91 d4 18 	lds	r24, 0x18D4	; 0x8018d4 <_serial_reply_buffer_handle>
    3d6a:	90 91 d5 18 	lds	r25, 0x18D5	; 0x8018d5 <_serial_reply_buffer_handle+0x1>
    3d6e:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <xStreamBufferSendFromISR>
    3d72:	89 81       	ldd	r24, Y+1	; 0x01
    3d74:	81 11       	cpse	r24, r1
    3d76:	0e 94 80 09 	call	0x1300	; 0x1300 <vPortYield>
    3d7a:	10 92 d1 18 	sts	0x18D1, r1	; 0x8018d1 <rec_buf_inp.2947>
    3d7e:	be 01       	movw	r22, r28
    3d80:	6e 5f       	subi	r22, 0xFE	; 254
    3d82:	7f 4f       	sbci	r23, 0xFF	; 255
    3d84:	c8 01       	movw	r24, r16
    3d86:	7c d6       	rcall	.+3320   	; 0x4a80 <serial_get_byte>
    3d88:	88 23       	and	r24, r24
    3d8a:	61 f2       	breq	.-104    	; 0x3d24 <_serial_call_back+0x16>
    3d8c:	0f 90       	pop	r0
    3d8e:	0f 90       	pop	r0
    3d90:	df 91       	pop	r29
    3d92:	cf 91       	pop	r28
    3d94:	1f 91       	pop	r17
    3d96:	0f 91       	pop	r16
    3d98:	08 95       	ret

00003d9a <_upload_message>:
    3d9a:	0f 93       	push	r16
    3d9c:	1f 93       	push	r17
    3d9e:	cf 93       	push	r28
    3da0:	df 93       	push	r29
    3da2:	8c 01       	movw	r16, r24
    3da4:	eb 01       	movw	r28, r22
    3da6:	80 91 d4 18 	lds	r24, 0x18D4	; 0x8018d4 <_serial_reply_buffer_handle>
    3daa:	90 91 d5 18 	lds	r25, 0x18D5	; 0x8018d5 <_serial_reply_buffer_handle+0x1>
    3dae:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <xStreamBufferReset>
    3db2:	b8 01       	movw	r22, r16
    3db4:	8d e6       	ldi	r24, 0x6D	; 109
    3db6:	98 e1       	ldi	r25, 0x18	; 24
    3db8:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <strcpy>
    3dbc:	20 97       	sbiw	r28, 0x00	; 0
    3dbe:	79 f0       	breq	.+30     	; 0x3dde <_upload_message+0x44>
    3dc0:	ed e6       	ldi	r30, 0x6D	; 109
    3dc2:	f8 e1       	ldi	r31, 0x18	; 24
    3dc4:	01 90       	ld	r0, Z+
    3dc6:	00 20       	and	r0, r0
    3dc8:	e9 f7       	brne	.-6      	; 0x3dc4 <_upload_message+0x2a>
    3dca:	31 97       	sbiw	r30, 0x01	; 1
    3dcc:	80 e2       	ldi	r24, 0x20	; 32
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	91 83       	std	Z+1, r25	; 0x01
    3dd2:	80 83       	st	Z, r24
    3dd4:	be 01       	movw	r22, r28
    3dd6:	8d e6       	ldi	r24, 0x6D	; 109
    3dd8:	98 e1       	ldi	r25, 0x18	; 24
    3dda:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <strcat>
    3dde:	ed e6       	ldi	r30, 0x6D	; 109
    3de0:	f8 e1       	ldi	r31, 0x18	; 24
    3de2:	df 01       	movw	r26, r30
    3de4:	0d 90       	ld	r0, X+
    3de6:	00 20       	and	r0, r0
    3de8:	e9 f7       	brne	.-6      	; 0x3de4 <_upload_message+0x4a>
    3dea:	11 97       	sbiw	r26, 0x01	; 1
    3dec:	8d e0       	ldi	r24, 0x0D	; 13
    3dee:	9a e0       	ldi	r25, 0x0A	; 10
    3df0:	11 96       	adiw	r26, 0x01	; 1
    3df2:	9c 93       	st	X, r25
    3df4:	8e 93       	st	-X, r24
    3df6:	12 96       	adiw	r26, 0x02	; 2
    3df8:	1c 92       	st	X, r1
    3dfa:	01 90       	ld	r0, Z+
    3dfc:	00 20       	and	r0, r0
    3dfe:	e9 f7       	brne	.-6      	; 0x3dfa <_upload_message+0x60>
    3e00:	31 97       	sbiw	r30, 0x01	; 1
    3e02:	ed 56       	subi	r30, 0x6D	; 109
    3e04:	f8 41       	sbci	r31, 0x18	; 24
    3e06:	ae 2f       	mov	r26, r30
    3e08:	8d e6       	ldi	r24, 0x6D	; 109
    3e0a:	98 e1       	ldi	r25, 0x18	; 24
    3e0c:	ac 01       	movw	r20, r24
    3e0e:	6a 2f       	mov	r22, r26
    3e10:	80 91 d6 18 	lds	r24, 0x18D6	; 0x8018d6 <_rn2483_serial>
    3e14:	90 91 d7 18 	lds	r25, 0x18D7	; 0x8018d7 <_rn2483_serial+0x1>
    3e18:	e3 d5       	rcall	.+3014   	; 0x49e0 <serial_send_bytes>
    3e1a:	81 11       	cpse	r24, r1
    3e1c:	11 c0       	rjmp	.+34     	; 0x3e40 <_upload_message+0xa6>
    3e1e:	08 e2       	ldi	r16, 0x28	; 40
    3e20:	15 e0       	ldi	r17, 0x05	; 5
    3e22:	20 e0       	ldi	r18, 0x00	; 0
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	4d e2       	ldi	r20, 0x2D	; 45
    3e28:	50 e0       	ldi	r21, 0x00	; 0
    3e2a:	6d e5       	ldi	r22, 0x5D	; 93
    3e2c:	79 e1       	ldi	r23, 0x19	; 25
    3e2e:	80 91 d4 18 	lds	r24, 0x18D4	; 0x8018d4 <_serial_reply_buffer_handle>
    3e32:	90 91 d5 18 	lds	r25, 0x18D5	; 0x8018d5 <_serial_reply_buffer_handle+0x1>
    3e36:	0e 94 42 10 	call	0x2084	; 0x2084 <xStreamBufferReceive>
    3e3a:	8d e5       	ldi	r24, 0x5D	; 93
    3e3c:	99 e1       	ldi	r25, 0x19	; 25
    3e3e:	02 c0       	rjmp	.+4      	; 0x3e44 <_upload_message+0xaa>
    3e40:	80 e0       	ldi	r24, 0x00	; 0
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	df 91       	pop	r29
    3e46:	cf 91       	pop	r28
    3e48:	1f 91       	pop	r17
    3e4a:	0f 91       	pop	r16
    3e4c:	08 95       	ret

00003e4e <_reply2return_code>:
    3e4e:	2f 92       	push	r2
    3e50:	3f 92       	push	r3
    3e52:	4f 92       	push	r4
    3e54:	5f 92       	push	r5
    3e56:	6f 92       	push	r6
    3e58:	7f 92       	push	r7
    3e5a:	8f 92       	push	r8
    3e5c:	9f 92       	push	r9
    3e5e:	af 92       	push	r10
    3e60:	bf 92       	push	r11
    3e62:	cf 92       	push	r12
    3e64:	df 92       	push	r13
    3e66:	ef 92       	push	r14
    3e68:	ff 92       	push	r15
    3e6a:	0f 93       	push	r16
    3e6c:	1f 93       	push	r17
    3e6e:	cf 93       	push	r28
    3e70:	df 93       	push	r29
    3e72:	5c 01       	movw	r10, r24
    3e74:	fc 01       	movw	r30, r24
    3e76:	01 90       	ld	r0, Z+
    3e78:	00 20       	and	r0, r0
    3e7a:	e9 f7       	brne	.-6      	; 0x3e76 <_reply2return_code+0x28>
    3e7c:	31 97       	sbiw	r30, 0x01	; 1
    3e7e:	6f 01       	movw	r12, r30
    3e80:	c8 1a       	sub	r12, r24
    3e82:	d9 0a       	sbc	r13, r25
    3e84:	5c 2c       	mov	r5, r12
    3e86:	0f 2e       	mov	r0, r31
    3e88:	f7 e5       	ldi	r31, 0x57	; 87
    3e8a:	8f 2e       	mov	r8, r31
    3e8c:	f7 e0       	ldi	r31, 0x07	; 7
    3e8e:	9f 2e       	mov	r9, r31
    3e90:	f0 2d       	mov	r31, r0
    3e92:	e1 2c       	mov	r14, r1
    3e94:	f1 2c       	mov	r15, r1
    3e96:	4c 2c       	mov	r4, r12
    3e98:	37 01       	movw	r6, r14
    3e9a:	f4 01       	movw	r30, r8
    3e9c:	01 81       	ldd	r16, Z+1	; 0x01
    3e9e:	12 81       	ldd	r17, Z+2	; 0x02
    3ea0:	e8 01       	movw	r28, r16
    3ea2:	09 90       	ld	r0, Y+
    3ea4:	00 20       	and	r0, r0
    3ea6:	e9 f7       	brne	.-6      	; 0x3ea2 <_reply2return_code+0x54>
    3ea8:	21 97       	sbiw	r28, 0x01	; 1
    3eaa:	c0 1b       	sub	r28, r16
    3eac:	d1 0b       	sbc	r29, r17
    3eae:	3c 2e       	mov	r3, r28
    3eb0:	f9 e0       	ldi	r31, 0x09	; 9
    3eb2:	cf 16       	cp	r12, r31
    3eb4:	d1 04       	cpc	r13, r1
    3eb6:	58 f0       	brcs	.+22     	; 0x3ece <_reply2return_code+0x80>
    3eb8:	f4 01       	movw	r30, r8
    3eba:	20 80       	ld	r2, Z
    3ebc:	fe e0       	ldi	r31, 0x0E	; 14
    3ebe:	2f 12       	cpse	r2, r31
    3ec0:	06 c0       	rjmp	.+12     	; 0x3ece <_reply2return_code+0x80>
    3ec2:	b8 01       	movw	r22, r16
    3ec4:	c5 01       	movw	r24, r10
    3ec6:	0e 94 cb 2c 	call	0x5996	; 0x5996 <strcasestr>
    3eca:	89 2b       	or	r24, r25
    3ecc:	09 f5       	brne	.+66     	; 0x3f10 <_reply2return_code+0xc2>
    3ece:	44 2d       	mov	r20, r4
    3ed0:	35 14       	cp	r3, r5
    3ed2:	08 f4       	brcc	.+2      	; 0x3ed6 <_reply2return_code+0x88>
    3ed4:	4c 2f       	mov	r20, r28
    3ed6:	50 e0       	ldi	r21, 0x00	; 0
    3ed8:	b8 01       	movw	r22, r16
    3eda:	c5 01       	movw	r24, r10
    3edc:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <strncasecmp>
    3ee0:	89 2b       	or	r24, r25
    3ee2:	49 f4       	brne	.+18     	; 0x3ef6 <_reply2return_code+0xa8>
    3ee4:	f3 01       	movw	r30, r6
    3ee6:	ee 0f       	add	r30, r30
    3ee8:	ff 1f       	adc	r31, r31
    3eea:	e6 0d       	add	r30, r6
    3eec:	f7 1d       	adc	r31, r7
    3eee:	e9 5a       	subi	r30, 0xA9	; 169
    3ef0:	f8 4f       	sbci	r31, 0xF8	; 248
    3ef2:	20 80       	ld	r2, Z
    3ef4:	0d c0       	rjmp	.+26     	; 0x3f10 <_reply2return_code+0xc2>
    3ef6:	8f ef       	ldi	r24, 0xFF	; 255
    3ef8:	e8 1a       	sub	r14, r24
    3efa:	f8 0a       	sbc	r15, r24
    3efc:	e3 e0       	ldi	r30, 0x03	; 3
    3efe:	8e 0e       	add	r8, r30
    3f00:	91 1c       	adc	r9, r1
    3f02:	f1 e1       	ldi	r31, 0x11	; 17
    3f04:	ef 16       	cp	r14, r31
    3f06:	f1 04       	cpc	r15, r1
    3f08:	39 f6       	brne	.-114    	; 0x3e98 <_reply2return_code+0x4a>
    3f0a:	68 94       	set
    3f0c:	22 24       	eor	r2, r2
    3f0e:	24 f8       	bld	r2, 4
    3f10:	82 2d       	mov	r24, r2
    3f12:	df 91       	pop	r29
    3f14:	cf 91       	pop	r28
    3f16:	1f 91       	pop	r17
    3f18:	0f 91       	pop	r16
    3f1a:	ff 90       	pop	r15
    3f1c:	ef 90       	pop	r14
    3f1e:	df 90       	pop	r13
    3f20:	cf 90       	pop	r12
    3f22:	bf 90       	pop	r11
    3f24:	af 90       	pop	r10
    3f26:	9f 90       	pop	r9
    3f28:	8f 90       	pop	r8
    3f2a:	7f 90       	pop	r7
    3f2c:	6f 90       	pop	r6
    3f2e:	5f 90       	pop	r5
    3f30:	4f 90       	pop	r4
    3f32:	3f 90       	pop	r3
    3f34:	2f 90       	pop	r2
    3f36:	08 95       	ret

00003f38 <_upload_message_rc>:
    3f38:	30 df       	rcall	.-416    	; 0x3d9a <_upload_message>
    3f3a:	89 cf       	rjmp	.-238    	; 0x3e4e <_reply2return_code>
    3f3c:	08 95       	ret

00003f3e <lora_driver_flush_buffers>:
    3f3e:	80 91 d4 18 	lds	r24, 0x18D4	; 0x8018d4 <_serial_reply_buffer_handle>
    3f42:	90 91 d5 18 	lds	r25, 0x18D5	; 0x8018d5 <_serial_reply_buffer_handle+0x1>
    3f46:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <xStreamBufferReset>
    3f4a:	08 95       	ret

00003f4c <lora_driver_create>:
    3f4c:	8f 92       	push	r8
    3f4e:	9f 92       	push	r9
    3f50:	af 92       	push	r10
    3f52:	cf 92       	push	r12
    3f54:	ef 92       	push	r14
    3f56:	0f 93       	push	r16
    3f58:	1f 93       	push	r17
    3f5a:	cf 93       	push	r28
    3f5c:	c8 2f       	mov	r28, r24
    3f5e:	8b 01       	movw	r16, r22
    3f60:	41 e0       	ldi	r20, 0x01	; 1
    3f62:	60 e0       	ldi	r22, 0x00	; 0
    3f64:	70 e0       	ldi	r23, 0x00	; 0
    3f66:	88 ec       	ldi	r24, 0xC8	; 200
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <xStreamBufferGenericCreate>
    3f6e:	90 93 d5 18 	sts	0x18D5, r25	; 0x8018d5 <_serial_reply_buffer_handle+0x1>
    3f72:	80 93 d4 18 	sts	0x18D4, r24	; 0x8018d4 <_serial_reply_buffer_handle>
    3f76:	10 93 d3 18 	sts	0x18D3, r17	; 0x8018d3 <_downlinkMessageBuffer+0x1>
    3f7a:	00 93 d2 18 	sts	0x18D2, r16	; 0x8018d2 <_downlinkMessageBuffer>
    3f7e:	0f 2e       	mov	r0, r31
    3f80:	f7 e8       	ldi	r31, 0x87	; 135
    3f82:	8f 2e       	mov	r8, r31
    3f84:	fe e1       	ldi	r31, 0x1E	; 30
    3f86:	9f 2e       	mov	r9, r31
    3f88:	f0 2d       	mov	r31, r0
    3f8a:	68 94       	set
    3f8c:	aa 24       	eor	r10, r10
    3f8e:	a6 f8       	bld	r10, 6
    3f90:	68 94       	set
    3f92:	cc 24       	eor	r12, r12
    3f94:	c6 f8       	bld	r12, 6
    3f96:	e1 2c       	mov	r14, r1
    3f98:	00 e0       	ldi	r16, 0x00	; 0
    3f9a:	23 e0       	ldi	r18, 0x03	; 3
    3f9c:	40 e0       	ldi	r20, 0x00	; 0
    3f9e:	51 ee       	ldi	r21, 0xE1	; 225
    3fa0:	60 e0       	ldi	r22, 0x00	; 0
    3fa2:	70 e0       	ldi	r23, 0x00	; 0
    3fa4:	8c 2f       	mov	r24, r28
    3fa6:	60 d4       	rcall	.+2240   	; 0x4868 <serial_new_instance>
    3fa8:	90 93 d7 18 	sts	0x18D7, r25	; 0x8018d7 <_rn2483_serial+0x1>
    3fac:	80 93 d6 18 	sts	0x18D6, r24	; 0x8018d6 <_rn2483_serial>
    3fb0:	e0 91 ff 19 	lds	r30, 0x19FF	; 0x8019ff <register_access+0x8>
    3fb4:	f0 91 00 1a 	lds	r31, 0x1A00	; 0x801a00 <register_access+0x9>
    3fb8:	64 e0       	ldi	r22, 0x04	; 4
    3fba:	87 e0       	ldi	r24, 0x07	; 7
    3fbc:	91 e0       	ldi	r25, 0x01	; 1
    3fbe:	19 95       	eicall
    3fc0:	cf 91       	pop	r28
    3fc2:	1f 91       	pop	r17
    3fc4:	0f 91       	pop	r16
    3fc6:	ef 90       	pop	r14
    3fc8:	cf 90       	pop	r12
    3fca:	af 90       	pop	r10
    3fcc:	9f 90       	pop	r9
    3fce:	8f 90       	pop	r8
    3fd0:	08 95       	ret

00003fd2 <lora_driver_reset_rn2483>:
    3fd2:	88 23       	and	r24, r24
    3fd4:	49 f0       	breq	.+18     	; 0x3fe8 <lora_driver_reset_rn2483+0x16>
    3fd6:	e0 91 09 1a 	lds	r30, 0x1A09	; 0x801a09 <register_access+0x12>
    3fda:	f0 91 0a 1a 	lds	r31, 0x1A0A	; 0x801a0a <register_access+0x13>
    3fde:	64 e0       	ldi	r22, 0x04	; 4
    3fe0:	88 e0       	ldi	r24, 0x08	; 8
    3fe2:	91 e0       	ldi	r25, 0x01	; 1
    3fe4:	19 95       	eicall
    3fe6:	08 95       	ret
    3fe8:	e0 91 ff 19 	lds	r30, 0x19FF	; 0x8019ff <register_access+0x8>
    3fec:	f0 91 00 1a 	lds	r31, 0x1A00	; 0x801a00 <register_access+0x9>
    3ff0:	64 e0       	ldi	r22, 0x04	; 4
    3ff2:	88 e0       	ldi	r24, 0x08	; 8
    3ff4:	91 e0       	ldi	r25, 0x01	; 1
    3ff6:	19 95       	eicall
    3ff8:	08 95       	ret

00003ffa <lora_driver_rn2483_factory_reset>:
    3ffa:	60 e0       	ldi	r22, 0x00	; 0
    3ffc:	70 e0       	ldi	r23, 0x00	; 0
    3ffe:	8d ed       	ldi	r24, 0xDD	; 221
    4000:	94 e0       	ldi	r25, 0x04	; 4
    4002:	cb de       	rcall	.-618    	; 0x3d9a <_upload_message>
    4004:	ed e5       	ldi	r30, 0x5D	; 93
    4006:	f9 e1       	ldi	r31, 0x19	; 25
    4008:	01 90       	ld	r0, Z+
    400a:	00 20       	and	r0, r0
    400c:	e9 f7       	brne	.-6      	; 0x4008 <lora_driver_rn2483_factory_reset+0xe>
    400e:	31 97       	sbiw	r30, 0x01	; 1
    4010:	ed 55       	subi	r30, 0x5D	; 93
    4012:	f9 41       	sbci	r31, 0x19	; 25
    4014:	81 e0       	ldi	r24, 0x01	; 1
    4016:	75 97       	sbiw	r30, 0x15	; 21
    4018:	08 f0       	brcs	.+2      	; 0x401c <lora_driver_rn2483_factory_reset+0x22>
    401a:	80 e0       	ldi	r24, 0x00	; 0
    401c:	08 95       	ret

0000401e <lora_driver_get_rn2483_hweui>:
    401e:	cf 93       	push	r28
    4020:	df 93       	push	r29
    4022:	ec 01       	movw	r28, r24
    4024:	60 e0       	ldi	r22, 0x00	; 0
    4026:	70 e0       	ldi	r23, 0x00	; 0
    4028:	8e ee       	ldi	r24, 0xEE	; 238
    402a:	94 e0       	ldi	r25, 0x04	; 4
    402c:	b6 de       	rcall	.-660    	; 0x3d9a <_upload_message>
    402e:	ed e5       	ldi	r30, 0x5D	; 93
    4030:	f9 e1       	ldi	r31, 0x19	; 25
    4032:	01 90       	ld	r0, Z+
    4034:	00 20       	and	r0, r0
    4036:	e9 f7       	brne	.-6      	; 0x4032 <lora_driver_get_rn2483_hweui+0x14>
    4038:	ee 56       	subi	r30, 0x6E	; 110
    403a:	f9 41       	sbci	r31, 0x19	; 25
    403c:	39 f4       	brne	.+14     	; 0x404c <lora_driver_get_rn2483_hweui+0x2e>
    403e:	6d e5       	ldi	r22, 0x5D	; 93
    4040:	79 e1       	ldi	r23, 0x19	; 25
    4042:	ce 01       	movw	r24, r28
    4044:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <strcpy>
    4048:	80 e0       	ldi	r24, 0x00	; 0
    404a:	02 c0       	rjmp	.+4      	; 0x4050 <lora_driver_get_rn2483_hweui+0x32>
    404c:	18 82       	st	Y, r1
    404e:	81 e0       	ldi	r24, 0x01	; 1
    4050:	df 91       	pop	r29
    4052:	cf 91       	pop	r28
    4054:	08 95       	ret

00004056 <lora_driver_set_device_identifier>:
    4056:	fc 01       	movw	r30, r24
    4058:	01 90       	ld	r0, Z+
    405a:	00 20       	and	r0, r0
    405c:	e9 f7       	brne	.-6      	; 0x4058 <lora_driver_set_device_identifier+0x2>
    405e:	9f 01       	movw	r18, r30
    4060:	21 51       	subi	r18, 0x11	; 17
    4062:	31 09       	sbc	r19, r1
    4064:	28 17       	cp	r18, r24
    4066:	39 07       	cpc	r19, r25
    4068:	29 f4       	brne	.+10     	; 0x4074 <lora_driver_set_device_identifier+0x1e>
    406a:	bc 01       	movw	r22, r24
    406c:	8c e1       	ldi	r24, 0x1C	; 28
    406e:	95 e0       	ldi	r25, 0x05	; 5
    4070:	63 cf       	rjmp	.-314    	; 0x3f38 <_upload_message_rc>
    4072:	08 95       	ret
    4074:	89 e0       	ldi	r24, 0x09	; 9
    4076:	08 95       	ret

00004078 <lora_driver_set_application_identifier>:
    4078:	fc 01       	movw	r30, r24
    407a:	01 90       	ld	r0, Z+
    407c:	00 20       	and	r0, r0
    407e:	e9 f7       	brne	.-6      	; 0x407a <lora_driver_set_application_identifier+0x2>
    4080:	9f 01       	movw	r18, r30
    4082:	21 51       	subi	r18, 0x11	; 17
    4084:	31 09       	sbc	r19, r1
    4086:	28 17       	cp	r18, r24
    4088:	39 07       	cpc	r19, r25
    408a:	29 f4       	brne	.+10     	; 0x4096 <lora_driver_set_application_identifier+0x1e>
    408c:	bc 01       	movw	r22, r24
    408e:	8b e2       	ldi	r24, 0x2B	; 43
    4090:	95 e0       	ldi	r25, 0x05	; 5
    4092:	52 cf       	rjmp	.-348    	; 0x3f38 <_upload_message_rc>
    4094:	08 95       	ret
    4096:	89 e0       	ldi	r24, 0x09	; 9
    4098:	08 95       	ret

0000409a <lora_driver_set_application_key>:
    409a:	fc 01       	movw	r30, r24
    409c:	01 90       	ld	r0, Z+
    409e:	00 20       	and	r0, r0
    40a0:	e9 f7       	brne	.-6      	; 0x409c <lora_driver_set_application_key+0x2>
    40a2:	9f 01       	movw	r18, r30
    40a4:	21 52       	subi	r18, 0x21	; 33
    40a6:	31 09       	sbc	r19, r1
    40a8:	28 17       	cp	r18, r24
    40aa:	39 07       	cpc	r19, r25
    40ac:	29 f4       	brne	.+10     	; 0x40b8 <lora_driver_set_application_key+0x1e>
    40ae:	bc 01       	movw	r22, r24
    40b0:	8a e3       	ldi	r24, 0x3A	; 58
    40b2:	95 e0       	ldi	r25, 0x05	; 5
    40b4:	41 cf       	rjmp	.-382    	; 0x3f38 <_upload_message_rc>
    40b6:	08 95       	ret
    40b8:	89 e0       	ldi	r24, 0x09	; 9
    40ba:	08 95       	ret

000040bc <lora_driver_save_mac>:
    40bc:	60 e0       	ldi	r22, 0x00	; 0
    40be:	70 e0       	ldi	r23, 0x00	; 0
    40c0:	89 e7       	ldi	r24, 0x79	; 121
    40c2:	95 e0       	ldi	r25, 0x05	; 5
    40c4:	39 cf       	rjmp	.-398    	; 0x3f38 <_upload_message_rc>
    40c6:	08 95       	ret

000040c8 <lora_driver_join>:
    40c8:	0f 93       	push	r16
    40ca:	1f 93       	push	r17
    40cc:	e8 2f       	mov	r30, r24
    40ce:	f0 e0       	ldi	r31, 0x00	; 0
    40d0:	ee 0f       	add	r30, r30
    40d2:	ff 1f       	adc	r31, r31
    40d4:	ed 5a       	subi	r30, 0xAD	; 173
    40d6:	f8 4f       	sbci	r31, 0xF8	; 248
    40d8:	60 81       	ld	r22, Z
    40da:	71 81       	ldd	r23, Z+1	; 0x01
    40dc:	82 e8       	ldi	r24, 0x82	; 130
    40de:	95 e0       	ldi	r25, 0x05	; 5
    40e0:	2b df       	rcall	.-426    	; 0x3f38 <_upload_message_rc>
    40e2:	81 11       	cpse	r24, r1
    40e4:	14 c0       	rjmp	.+40     	; 0x410e <lora_driver_join+0x46>
    40e6:	08 e2       	ldi	r16, 0x28	; 40
    40e8:	15 e0       	ldi	r17, 0x05	; 5
    40ea:	20 e0       	ldi	r18, 0x00	; 0
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	4d e2       	ldi	r20, 0x2D	; 45
    40f0:	50 e0       	ldi	r21, 0x00	; 0
    40f2:	6d e5       	ldi	r22, 0x5D	; 93
    40f4:	79 e1       	ldi	r23, 0x19	; 25
    40f6:	80 91 d4 18 	lds	r24, 0x18D4	; 0x8018d4 <_serial_reply_buffer_handle>
    40fa:	90 91 d5 18 	lds	r25, 0x18D5	; 0x8018d5 <_serial_reply_buffer_handle+0x1>
    40fe:	0e 94 42 10 	call	0x2084	; 0x2084 <xStreamBufferReceive>
    4102:	88 23       	and	r24, r24
    4104:	21 f0       	breq	.+8      	; 0x410e <lora_driver_join+0x46>
    4106:	8d e5       	ldi	r24, 0x5D	; 93
    4108:	99 e1       	ldi	r25, 0x19	; 25
    410a:	a1 de       	rcall	.-702    	; 0x3e4e <_reply2return_code>
    410c:	03 c0       	rjmp	.+6      	; 0x4114 <lora_driver_join+0x4c>
    410e:	8d e5       	ldi	r24, 0x5D	; 93
    4110:	99 e1       	ldi	r25, 0x19	; 25
    4112:	9d de       	rcall	.-710    	; 0x3e4e <_reply2return_code>
    4114:	1f 91       	pop	r17
    4116:	0f 91       	pop	r16
    4118:	08 95       	ret

0000411a <lora_driver_sent_upload_message>:
    411a:	0f 93       	push	r16
    411c:	1f 93       	push	r17
    411e:	cf 93       	push	r28
    4120:	df 93       	push	r29
    4122:	1f 92       	push	r1
    4124:	cd b7       	in	r28, 0x3d	; 61
    4126:	de b7       	in	r29, 0x3e	; 62
    4128:	db 01       	movw	r26, r22
    412a:	11 96       	adiw	r26, 0x01	; 1
    412c:	9c 91       	ld	r25, X
    412e:	11 97       	sbiw	r26, 0x01	; 1
    4130:	95 31       	cpi	r25, 0x15	; 21
    4132:	08 f0       	brcs	.+2      	; 0x4136 <lora_driver_sent_upload_message+0x1c>
    4134:	b4 c0       	rjmp	.+360    	; 0x429e <lora_driver_sent_upload_message+0x184>
    4136:	99 23       	and	r25, r25
    4138:	81 f1       	breq	.+96     	; 0x419a <lora_driver_sent_upload_message+0x80>
    413a:	60 e0       	ldi	r22, 0x00	; 0
    413c:	70 e0       	ldi	r23, 0x00	; 0
    413e:	27 2f       	mov	r18, r23
    4140:	30 e0       	ldi	r19, 0x00	; 0
    4142:	46 2f       	mov	r20, r22
    4144:	50 e0       	ldi	r21, 0x00	; 0
    4146:	fd 01       	movw	r30, r26
    4148:	e4 0f       	add	r30, r20
    414a:	f5 1f       	adc	r31, r21
    414c:	92 81       	ldd	r25, Z+2	; 0x02
    414e:	92 95       	swap	r25
    4150:	9f 70       	andi	r25, 0x0F	; 15
    4152:	9a 30       	cpi	r25, 0x0A	; 10
    4154:	10 f0       	brcs	.+4      	; 0x415a <lora_driver_sent_upload_message+0x40>
    4156:	99 5c       	subi	r25, 0xC9	; 201
    4158:	01 c0       	rjmp	.+2      	; 0x415c <lora_driver_sent_upload_message+0x42>
    415a:	90 5d       	subi	r25, 0xD0	; 208
    415c:	f9 01       	movw	r30, r18
    415e:	e2 51       	subi	r30, 0x12	; 18
    4160:	f7 4e       	sbci	r31, 0xE7	; 231
    4162:	90 83       	st	Z, r25
    4164:	2f 5f       	subi	r18, 0xFF	; 255
    4166:	3f 4f       	sbci	r19, 0xFF	; 255
    4168:	fd 01       	movw	r30, r26
    416a:	e4 0f       	add	r30, r20
    416c:	f5 1f       	adc	r31, r21
    416e:	92 81       	ldd	r25, Z+2	; 0x02
    4170:	9f 70       	andi	r25, 0x0F	; 15
    4172:	49 2f       	mov	r20, r25
    4174:	50 e0       	ldi	r21, 0x00	; 0
    4176:	4a 30       	cpi	r20, 0x0A	; 10
    4178:	51 05       	cpc	r21, r1
    417a:	14 f0       	brlt	.+4      	; 0x4180 <lora_driver_sent_upload_message+0x66>
    417c:	99 5c       	subi	r25, 0xC9	; 201
    417e:	01 c0       	rjmp	.+2      	; 0x4182 <lora_driver_sent_upload_message+0x68>
    4180:	90 5d       	subi	r25, 0xD0	; 208
    4182:	f9 01       	movw	r30, r18
    4184:	e2 51       	subi	r30, 0x12	; 18
    4186:	f7 4e       	sbci	r31, 0xE7	; 231
    4188:	90 83       	st	Z, r25
    418a:	7e 5f       	subi	r23, 0xFE	; 254
    418c:	6f 5f       	subi	r22, 0xFF	; 255
    418e:	11 96       	adiw	r26, 0x01	; 1
    4190:	9c 91       	ld	r25, X
    4192:	11 97       	sbiw	r26, 0x01	; 1
    4194:	69 17       	cp	r22, r25
    4196:	98 f2       	brcs	.-90     	; 0x413e <lora_driver_sent_upload_message+0x24>
    4198:	01 c0       	rjmp	.+2      	; 0x419c <lora_driver_sent_upload_message+0x82>
    419a:	70 e0       	ldi	r23, 0x00	; 0
    419c:	e7 2f       	mov	r30, r23
    419e:	f0 e0       	ldi	r31, 0x00	; 0
    41a0:	e2 51       	subi	r30, 0x12	; 18
    41a2:	f7 4e       	sbci	r31, 0xE7	; 231
    41a4:	10 82       	st	Z, r1
    41a6:	4c 91       	ld	r20, X
    41a8:	81 11       	cpse	r24, r1
    41aa:	03 c0       	rjmp	.+6      	; 0x41b2 <lora_driver_sent_upload_message+0x98>
    41ac:	8b e8       	ldi	r24, 0x8B	; 139
    41ae:	95 e0       	ldi	r25, 0x05	; 5
    41b0:	02 c0       	rjmp	.+4      	; 0x41b6 <lora_driver_sent_upload_message+0x9c>
    41b2:	8d e8       	ldi	r24, 0x8D	; 141
    41b4:	95 e0       	ldi	r25, 0x05	; 5
    41b6:	2e ee       	ldi	r18, 0xEE	; 238
    41b8:	38 e1       	ldi	r19, 0x18	; 24
    41ba:	3f 93       	push	r19
    41bc:	2f 93       	push	r18
    41be:	1f 92       	push	r1
    41c0:	4f 93       	push	r20
    41c2:	9f 93       	push	r25
    41c4:	8f 93       	push	r24
    41c6:	81 e9       	ldi	r24, 0x91	; 145
    41c8:	95 e0       	ldi	r25, 0x05	; 5
    41ca:	9f 93       	push	r25
    41cc:	8f 93       	push	r24
    41ce:	80 e3       	ldi	r24, 0x30	; 48
    41d0:	99 e1       	ldi	r25, 0x19	; 25
    41d2:	9f 93       	push	r25
    41d4:	8f 93       	push	r24
    41d6:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <sprintf>
    41da:	60 e0       	ldi	r22, 0x00	; 0
    41dc:	70 e0       	ldi	r23, 0x00	; 0
    41de:	80 e3       	ldi	r24, 0x30	; 48
    41e0:	99 e1       	ldi	r25, 0x19	; 25
    41e2:	aa de       	rcall	.-684    	; 0x3f38 <_upload_message_rc>
    41e4:	0f b6       	in	r0, 0x3f	; 63
    41e6:	f8 94       	cli
    41e8:	de bf       	out	0x3e, r29	; 62
    41ea:	0f be       	out	0x3f, r0	; 63
    41ec:	cd bf       	out	0x3d, r28	; 61
    41ee:	81 11       	cpse	r24, r1
    41f0:	59 c0       	rjmp	.+178    	; 0x42a4 <lora_driver_sent_upload_message+0x18a>
    41f2:	08 e2       	ldi	r16, 0x28	; 40
    41f4:	15 e0       	ldi	r17, 0x05	; 5
    41f6:	20 e0       	ldi	r18, 0x00	; 0
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	4d e2       	ldi	r20, 0x2D	; 45
    41fc:	50 e0       	ldi	r21, 0x00	; 0
    41fe:	6d e5       	ldi	r22, 0x5D	; 93
    4200:	79 e1       	ldi	r23, 0x19	; 25
    4202:	80 91 d4 18 	lds	r24, 0x18D4	; 0x8018d4 <_serial_reply_buffer_handle>
    4206:	90 91 d5 18 	lds	r25, 0x18D5	; 0x8018d5 <_serial_reply_buffer_handle+0x1>
    420a:	0e 94 42 10 	call	0x2084	; 0x2084 <xStreamBufferReceive>
    420e:	88 23       	and	r24, r24
    4210:	09 f4       	brne	.+2      	; 0x4214 <lora_driver_sent_upload_message+0xfa>
    4212:	47 c0       	rjmp	.+142    	; 0x42a2 <lora_driver_sent_upload_message+0x188>
    4214:	8d e5       	ldi	r24, 0x5D	; 93
    4216:	99 e1       	ldi	r25, 0x19	; 25
    4218:	1a de       	rcall	.-972    	; 0x3e4e <_reply2return_code>
    421a:	8e 30       	cpi	r24, 0x0E	; 14
    421c:	09 f0       	breq	.+2      	; 0x4220 <lora_driver_sent_upload_message+0x106>
    421e:	42 c0       	rjmp	.+132    	; 0x42a4 <lora_driver_sent_upload_message+0x18a>
    4220:	87 e0       	ldi	r24, 0x07	; 7
    4222:	89 83       	std	Y+1, r24	; 0x01
    4224:	80 91 d2 18 	lds	r24, 0x18D2	; 0x8018d2 <_downlinkMessageBuffer>
    4228:	90 91 d3 18 	lds	r25, 0x18D3	; 0x8018d3 <_downlinkMessageBuffer+0x1>
    422c:	89 2b       	or	r24, r25
    422e:	a9 f1       	breq	.+106    	; 0x429a <lora_driver_sent_upload_message+0x180>
    4230:	be 01       	movw	r22, r28
    4232:	6f 5f       	subi	r22, 0xFF	; 255
    4234:	7f 4f       	sbci	r23, 0xFF	; 255
    4236:	8d e5       	ldi	r24, 0x5D	; 93
    4238:	99 e1       	ldi	r25, 0x19	; 25
    423a:	68 d1       	rcall	.+720    	; 0x450c <decode_port_no>
    423c:	80 93 d8 18 	sts	0x18D8, r24	; 0x8018d8 <_downlink_payload>
    4240:	e9 81       	ldd	r30, Y+1	; 0x01
    4242:	f0 e0       	ldi	r31, 0x00	; 0
    4244:	e3 5a       	subi	r30, 0xA3	; 163
    4246:	f6 4e       	sbci	r31, 0xE6	; 230
    4248:	df 01       	movw	r26, r30
    424a:	0d 90       	ld	r0, X+
    424c:	00 20       	and	r0, r0
    424e:	e9 f7       	brne	.-6      	; 0x424a <lora_driver_sent_upload_message+0x130>
    4250:	11 97       	sbiw	r26, 0x01	; 1
    4252:	ae 1b       	sub	r26, r30
    4254:	bf 0b       	sbc	r27, r31
    4256:	aa 23       	and	r26, r26
    4258:	91 f0       	breq	.+36     	; 0x427e <lora_driver_sent_upload_message+0x164>
    425a:	bb 27       	eor	r27, r27
    425c:	cd 01       	movw	r24, r26
    425e:	01 97       	sbiw	r24, 0x01	; 1
    4260:	9c 01       	movw	r18, r24
    4262:	12 f4       	brpl	.+4      	; 0x4268 <lora_driver_sent_upload_message+0x14e>
    4264:	2f 5f       	subi	r18, 0xFF	; 255
    4266:	3f 4f       	sbci	r19, 0xFF	; 255
    4268:	35 95       	asr	r19
    426a:	27 95       	ror	r18
    426c:	20 93 d9 18 	sts	0x18D9, r18	; 0x8018d9 <_downlink_payload+0x1>
    4270:	af 01       	movw	r20, r30
    4272:	4f 5f       	subi	r20, 0xFF	; 255
    4274:	5f 4f       	sbci	r21, 0xFF	; 255
    4276:	64 e1       	ldi	r22, 0x14	; 20
    4278:	8a ed       	ldi	r24, 0xDA	; 218
    427a:	98 e1       	ldi	r25, 0x18	; 24
    427c:	73 d1       	rcall	.+742    	; 0x4564 <decode_hexadecimal_string_bytes>
    427e:	01 e0       	ldi	r16, 0x01	; 1
    4280:	10 e0       	ldi	r17, 0x00	; 0
    4282:	20 e0       	ldi	r18, 0x00	; 0
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	46 e1       	ldi	r20, 0x16	; 22
    4288:	50 e0       	ldi	r21, 0x00	; 0
    428a:	68 ed       	ldi	r22, 0xD8	; 216
    428c:	78 e1       	ldi	r23, 0x18	; 24
    428e:	80 91 d2 18 	lds	r24, 0x18D2	; 0x8018d2 <_downlinkMessageBuffer>
    4292:	90 91 d3 18 	lds	r25, 0x18D3	; 0x8018d3 <_downlinkMessageBuffer+0x1>
    4296:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <xStreamBufferSend>
    429a:	8e e0       	ldi	r24, 0x0E	; 14
    429c:	03 c0       	rjmp	.+6      	; 0x42a4 <lora_driver_sent_upload_message+0x18a>
    429e:	84 e1       	ldi	r24, 0x14	; 20
    42a0:	01 c0       	rjmp	.+2      	; 0x42a4 <lora_driver_sent_upload_message+0x18a>
    42a2:	80 e0       	ldi	r24, 0x00	; 0
    42a4:	0f 90       	pop	r0
    42a6:	df 91       	pop	r29
    42a8:	cf 91       	pop	r28
    42aa:	1f 91       	pop	r17
    42ac:	0f 91       	pop	r16
    42ae:	08 95       	ret

000042b0 <lora_driver_set_adaptive_data_rate>:
    42b0:	81 30       	cpi	r24, 0x01	; 1
    42b2:	19 f0       	breq	.+6      	; 0x42ba <lora_driver_set_adaptive_data_rate+0xa>
    42b4:	61 ea       	ldi	r22, 0xA1	; 161
    42b6:	75 e0       	ldi	r23, 0x05	; 5
    42b8:	02 c0       	rjmp	.+4      	; 0x42be <lora_driver_set_adaptive_data_rate+0xe>
    42ba:	6a e7       	ldi	r22, 0x7A	; 122
    42bc:	76 e0       	ldi	r23, 0x06	; 6
    42be:	85 ea       	ldi	r24, 0xA5	; 165
    42c0:	95 e0       	ldi	r25, 0x05	; 5
    42c2:	3a ce       	rjmp	.-908    	; 0x3f38 <_upload_message_rc>
    42c4:	08 95       	ret

000042c6 <lora_driver_set_receive_delay>:
    42c6:	9f 93       	push	r25
    42c8:	8f 93       	push	r24
    42ca:	86 ed       	ldi	r24, 0xD6	; 214
    42cc:	95 e0       	ldi	r25, 0x05	; 5
    42ce:	9f 93       	push	r25
    42d0:	8f 93       	push	r24
    42d2:	80 e3       	ldi	r24, 0x30	; 48
    42d4:	99 e1       	ldi	r25, 0x19	; 25
    42d6:	9f 93       	push	r25
    42d8:	8f 93       	push	r24
    42da:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <sprintf>
    42de:	60 e0       	ldi	r22, 0x00	; 0
    42e0:	70 e0       	ldi	r23, 0x00	; 0
    42e2:	80 e3       	ldi	r24, 0x30	; 48
    42e4:	99 e1       	ldi	r25, 0x19	; 25
    42e6:	28 de       	rcall	.-944    	; 0x3f38 <_upload_message_rc>
    42e8:	0f 90       	pop	r0
    42ea:	0f 90       	pop	r0
    42ec:	0f 90       	pop	r0
    42ee:	0f 90       	pop	r0
    42f0:	0f 90       	pop	r0
    42f2:	0f 90       	pop	r0
    42f4:	08 95       	ret

000042f6 <lora_driver_configure_to_eu868>:
    42f6:	2f 92       	push	r2
    42f8:	3f 92       	push	r3
    42fa:	4f 92       	push	r4
    42fc:	5f 92       	push	r5
    42fe:	6f 92       	push	r6
    4300:	7f 92       	push	r7
    4302:	8f 92       	push	r8
    4304:	9f 92       	push	r9
    4306:	af 92       	push	r10
    4308:	bf 92       	push	r11
    430a:	cf 92       	push	r12
    430c:	df 92       	push	r13
    430e:	ef 92       	push	r14
    4310:	ff 92       	push	r15
    4312:	0f 93       	push	r16
    4314:	1f 93       	push	r17
    4316:	cf 93       	push	r28
    4318:	df 93       	push	r29
    431a:	cd b7       	in	r28, 0x3d	; 61
    431c:	de b7       	in	r29, 0x3e	; 62
    431e:	a0 97       	sbiw	r28, 0x20	; 32
    4320:	0f b6       	in	r0, 0x3f	; 63
    4322:	f8 94       	cli
    4324:	de bf       	out	0x3e, r29	; 62
    4326:	0f be       	out	0x3f, r0	; 63
    4328:	cd bf       	out	0x3d, r28	; 61
    432a:	63 e0       	ldi	r22, 0x03	; 3
    432c:	76 e0       	ldi	r23, 0x06	; 6
    432e:	8f e0       	ldi	r24, 0x0F	; 15
    4330:	96 e0       	ldi	r25, 0x06	; 6
    4332:	33 dd       	rcall	.-1434   	; 0x3d9a <_upload_message>
    4334:	8c dd       	rcall	.-1256   	; 0x3e4e <_reply2return_code>
    4336:	81 11       	cpse	r24, r1
    4338:	a3 c0       	rjmp	.+326    	; 0x4480 <lora_driver_configure_to_eu868+0x18a>
    433a:	80 e2       	ldi	r24, 0x20	; 32
    433c:	e2 e2       	ldi	r30, 0x22	; 34
    433e:	f2 e0       	ldi	r31, 0x02	; 2
    4340:	de 01       	movw	r26, r28
    4342:	11 96       	adiw	r26, 0x01	; 1
    4344:	01 90       	ld	r0, Z+
    4346:	0d 92       	st	X+, r0
    4348:	8a 95       	dec	r24
    434a:	e1 f7       	brne	.-8      	; 0x4344 <lora_driver_configure_to_eu868+0x4e>
    434c:	9e 01       	movw	r18, r28
    434e:	2f 5f       	subi	r18, 0xFF	; 255
    4350:	3f 4f       	sbci	r19, 0xFF	; 255
    4352:	69 01       	movw	r12, r18
    4354:	e1 2c       	mov	r14, r1
    4356:	f1 2c       	mov	r15, r1
    4358:	0f 2e       	mov	r0, r31
    435a:	fb e1       	ldi	r31, 0x1B	; 27
    435c:	af 2e       	mov	r10, r31
    435e:	f6 e0       	ldi	r31, 0x06	; 6
    4360:	bf 2e       	mov	r11, r31
    4362:	f0 2d       	mov	r31, r0
    4364:	00 e3       	ldi	r16, 0x30	; 48
    4366:	19 e1       	ldi	r17, 0x19	; 25
    4368:	0f 2e       	mov	r0, r31
    436a:	f4 e3       	ldi	r31, 0x34	; 52
    436c:	4f 2e       	mov	r4, r31
    436e:	f6 e0       	ldi	r31, 0x06	; 6
    4370:	5f 2e       	mov	r5, r31
    4372:	f0 2d       	mov	r31, r0
    4374:	0f 2e       	mov	r0, r31
    4376:	fb e4       	ldi	r31, 0x4B	; 75
    4378:	8f 2e       	mov	r8, r31
    437a:	f6 e0       	ldi	r31, 0x06	; 6
    437c:	9f 2e       	mov	r9, r31
    437e:	f0 2d       	mov	r31, r0
    4380:	0f 2e       	mov	r0, r31
    4382:	f5 e6       	ldi	r31, 0x65	; 101
    4384:	6f 2e       	mov	r6, r31
    4386:	f6 e0       	ldi	r31, 0x06	; 6
    4388:	7f 2e       	mov	r7, r31
    438a:	f0 2d       	mov	r31, r0
    438c:	3e 2c       	mov	r3, r14
    438e:	2f 2c       	mov	r2, r15
    4390:	ff 92       	push	r15
    4392:	ef 92       	push	r14
    4394:	bf 92       	push	r11
    4396:	af 92       	push	r10
    4398:	1f 93       	push	r17
    439a:	0f 93       	push	r16
    439c:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <sprintf>
    43a0:	60 e0       	ldi	r22, 0x00	; 0
    43a2:	70 e0       	ldi	r23, 0x00	; 0
    43a4:	c8 01       	movw	r24, r16
    43a6:	f9 dc       	rcall	.-1550   	; 0x3d9a <_upload_message>
    43a8:	52 dd       	rcall	.-1372   	; 0x3e4e <_reply2return_code>
    43aa:	0f 90       	pop	r0
    43ac:	0f 90       	pop	r0
    43ae:	0f 90       	pop	r0
    43b0:	0f 90       	pop	r0
    43b2:	0f 90       	pop	r0
    43b4:	0f 90       	pop	r0
    43b6:	81 11       	cpse	r24, r1
    43b8:	63 c0       	rjmp	.+198    	; 0x4480 <lora_driver_configure_to_eu868+0x18a>
    43ba:	32 e0       	ldi	r19, 0x02	; 2
    43bc:	3e 15       	cp	r19, r14
    43be:	e8 f4       	brcc	.+58     	; 0x43fa <lora_driver_configure_to_eu868+0x104>
    43c0:	f6 01       	movw	r30, r12
    43c2:	83 81       	ldd	r24, Z+3	; 0x03
    43c4:	8f 93       	push	r24
    43c6:	82 81       	ldd	r24, Z+2	; 0x02
    43c8:	8f 93       	push	r24
    43ca:	81 81       	ldd	r24, Z+1	; 0x01
    43cc:	8f 93       	push	r24
    43ce:	80 81       	ld	r24, Z
    43d0:	8f 93       	push	r24
    43d2:	ff 92       	push	r15
    43d4:	ef 92       	push	r14
    43d6:	5f 92       	push	r5
    43d8:	4f 92       	push	r4
    43da:	1f 93       	push	r17
    43dc:	0f 93       	push	r16
    43de:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <sprintf>
    43e2:	60 e0       	ldi	r22, 0x00	; 0
    43e4:	70 e0       	ldi	r23, 0x00	; 0
    43e6:	c8 01       	movw	r24, r16
    43e8:	d8 dc       	rcall	.-1616   	; 0x3d9a <_upload_message>
    43ea:	31 dd       	rcall	.-1438   	; 0x3e4e <_reply2return_code>
    43ec:	0f b6       	in	r0, 0x3f	; 63
    43ee:	f8 94       	cli
    43f0:	de bf       	out	0x3e, r29	; 62
    43f2:	0f be       	out	0x3f, r0	; 63
    43f4:	cd bf       	out	0x3d, r28	; 61
    43f6:	81 11       	cpse	r24, r1
    43f8:	43 c0       	rjmp	.+134    	; 0x4480 <lora_driver_configure_to_eu868+0x18a>
    43fa:	2f 92       	push	r2
    43fc:	3f 92       	push	r3
    43fe:	9f 92       	push	r9
    4400:	8f 92       	push	r8
    4402:	1f 93       	push	r17
    4404:	0f 93       	push	r16
    4406:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <sprintf>
    440a:	60 e0       	ldi	r22, 0x00	; 0
    440c:	70 e0       	ldi	r23, 0x00	; 0
    440e:	c8 01       	movw	r24, r16
    4410:	c4 dc       	rcall	.-1656   	; 0x3d9a <_upload_message>
    4412:	1d dd       	rcall	.-1478   	; 0x3e4e <_reply2return_code>
    4414:	0f 90       	pop	r0
    4416:	0f 90       	pop	r0
    4418:	0f 90       	pop	r0
    441a:	0f 90       	pop	r0
    441c:	0f 90       	pop	r0
    441e:	0f 90       	pop	r0
    4420:	81 11       	cpse	r24, r1
    4422:	2e c0       	rjmp	.+92     	; 0x4480 <lora_driver_configure_to_eu868+0x18a>
    4424:	2f 92       	push	r2
    4426:	3f 92       	push	r3
    4428:	7f 92       	push	r7
    442a:	6f 92       	push	r6
    442c:	1f 93       	push	r17
    442e:	0f 93       	push	r16
    4430:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <sprintf>
    4434:	60 e0       	ldi	r22, 0x00	; 0
    4436:	70 e0       	ldi	r23, 0x00	; 0
    4438:	c8 01       	movw	r24, r16
    443a:	af dc       	rcall	.-1698   	; 0x3d9a <_upload_message>
    443c:	08 dd       	rcall	.-1520   	; 0x3e4e <_reply2return_code>
    443e:	0f 90       	pop	r0
    4440:	0f 90       	pop	r0
    4442:	0f 90       	pop	r0
    4444:	0f 90       	pop	r0
    4446:	0f 90       	pop	r0
    4448:	0f 90       	pop	r0
    444a:	81 11       	cpse	r24, r1
    444c:	19 c0       	rjmp	.+50     	; 0x4480 <lora_driver_configure_to_eu868+0x18a>
    444e:	3f ef       	ldi	r19, 0xFF	; 255
    4450:	e3 1a       	sub	r14, r19
    4452:	f3 0a       	sbc	r15, r19
    4454:	84 e0       	ldi	r24, 0x04	; 4
    4456:	c8 0e       	add	r12, r24
    4458:	d1 1c       	adc	r13, r1
    445a:	98 e0       	ldi	r25, 0x08	; 8
    445c:	e9 16       	cp	r14, r25
    445e:	f1 04       	cpc	r15, r1
    4460:	09 f0       	breq	.+2      	; 0x4464 <lora_driver_configure_to_eu868+0x16e>
    4462:	94 cf       	rjmp	.-216    	; 0x438c <lora_driver_configure_to_eu868+0x96>
    4464:	60 e0       	ldi	r22, 0x00	; 0
    4466:	70 e0       	ldi	r23, 0x00	; 0
    4468:	8d e7       	ldi	r24, 0x7D	; 125
    446a:	96 e0       	ldi	r25, 0x06	; 6
    446c:	96 dc       	rcall	.-1748   	; 0x3d9a <_upload_message>
    446e:	ef dc       	rcall	.-1570   	; 0x3e4e <_reply2return_code>
    4470:	81 11       	cpse	r24, r1
    4472:	06 c0       	rjmp	.+12     	; 0x4480 <lora_driver_configure_to_eu868+0x18a>
    4474:	60 e0       	ldi	r22, 0x00	; 0
    4476:	70 e0       	ldi	r23, 0x00	; 0
    4478:	8e e8       	ldi	r24, 0x8E	; 142
    447a:	96 e0       	ldi	r25, 0x06	; 6
    447c:	8e dc       	rcall	.-1764   	; 0x3d9a <_upload_message>
    447e:	e7 dc       	rcall	.-1586   	; 0x3e4e <_reply2return_code>
    4480:	a0 96       	adiw	r28, 0x20	; 32
    4482:	0f b6       	in	r0, 0x3f	; 63
    4484:	f8 94       	cli
    4486:	de bf       	out	0x3e, r29	; 62
    4488:	0f be       	out	0x3f, r0	; 63
    448a:	cd bf       	out	0x3d, r28	; 61
    448c:	df 91       	pop	r29
    448e:	cf 91       	pop	r28
    4490:	1f 91       	pop	r17
    4492:	0f 91       	pop	r16
    4494:	ff 90       	pop	r15
    4496:	ef 90       	pop	r14
    4498:	df 90       	pop	r13
    449a:	cf 90       	pop	r12
    449c:	bf 90       	pop	r11
    449e:	af 90       	pop	r10
    44a0:	9f 90       	pop	r9
    44a2:	8f 90       	pop	r8
    44a4:	7f 90       	pop	r7
    44a6:	6f 90       	pop	r6
    44a8:	5f 90       	pop	r5
    44aa:	4f 90       	pop	r4
    44ac:	3f 90       	pop	r3
    44ae:	2f 90       	pop	r2
    44b0:	08 95       	ret

000044b2 <lora_driver_set_otaa_identity>:
    44b2:	ef 92       	push	r14
    44b4:	ff 92       	push	r15
    44b6:	0f 93       	push	r16
    44b8:	1f 93       	push	r17
    44ba:	cf 93       	push	r28
    44bc:	df 93       	push	r29
    44be:	ec 01       	movw	r28, r24
    44c0:	8b 01       	movw	r16, r22
    44c2:	7a 01       	movw	r14, r20
    44c4:	81 e0       	ldi	r24, 0x01	; 1
    44c6:	f4 de       	rcall	.-536    	; 0x42b0 <lora_driver_set_adaptive_data_rate>
    44c8:	81 11       	cpse	r24, r1
    44ca:	0d c0       	rjmp	.+26     	; 0x44e6 <lora_driver_set_otaa_identity+0x34>
    44cc:	ce 01       	movw	r24, r28
    44ce:	d4 dd       	rcall	.-1112   	; 0x4078 <lora_driver_set_application_identifier>
    44d0:	81 11       	cpse	r24, r1
    44d2:	09 c0       	rjmp	.+18     	; 0x44e6 <lora_driver_set_otaa_identity+0x34>
    44d4:	c8 01       	movw	r24, r16
    44d6:	e1 dd       	rcall	.-1086   	; 0x409a <lora_driver_set_application_key>
    44d8:	81 11       	cpse	r24, r1
    44da:	05 c0       	rjmp	.+10     	; 0x44e6 <lora_driver_set_otaa_identity+0x34>
    44dc:	c7 01       	movw	r24, r14
    44de:	bb dd       	rcall	.-1162   	; 0x4056 <lora_driver_set_device_identifier>
    44e0:	81 11       	cpse	r24, r1
    44e2:	01 c0       	rjmp	.+2      	; 0x44e6 <lora_driver_set_otaa_identity+0x34>
    44e4:	eb dd       	rcall	.-1066   	; 0x40bc <lora_driver_save_mac>
    44e6:	df 91       	pop	r29
    44e8:	cf 91       	pop	r28
    44ea:	1f 91       	pop	r17
    44ec:	0f 91       	pop	r16
    44ee:	ff 90       	pop	r15
    44f0:	ef 90       	pop	r14
    44f2:	08 95       	ret

000044f4 <lora_driver_map_return_code_to_text>:
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	fc 01       	movw	r30, r24
    44f8:	ee 0f       	add	r30, r30
    44fa:	ff 1f       	adc	r31, r31
    44fc:	8e 0f       	add	r24, r30
    44fe:	9f 1f       	adc	r25, r31
    4500:	fc 01       	movw	r30, r24
    4502:	e9 5a       	subi	r30, 0xA9	; 169
    4504:	f8 4f       	sbci	r31, 0xF8	; 248
    4506:	81 81       	ldd	r24, Z+1	; 0x01
    4508:	92 81       	ldd	r25, Z+2	; 0x02
    450a:	08 95       	ret

0000450c <decode_port_no>:
    450c:	dc 01       	movw	r26, r24
    450e:	00 97       	sbiw	r24, 0x00	; 0
    4510:	29 f1       	breq	.+74     	; 0x455c <decode_port_no+0x50>
    4512:	fb 01       	movw	r30, r22
    4514:	20 81       	ld	r18, Z
    4516:	fc 01       	movw	r30, r24
    4518:	01 90       	ld	r0, Z+
    451a:	00 20       	and	r0, r0
    451c:	e9 f7       	brne	.-6      	; 0x4518 <decode_port_no+0xc>
    451e:	31 97       	sbiw	r30, 0x01	; 1
    4520:	e8 1b       	sub	r30, r24
    4522:	f9 0b       	sbc	r31, r25
    4524:	82 2f       	mov	r24, r18
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	e8 17       	cp	r30, r24
    452a:	f9 07       	cpc	r31, r25
    452c:	c8 f0       	brcs	.+50     	; 0x4560 <decode_port_no+0x54>
    452e:	80 e0       	ldi	r24, 0x00	; 0
    4530:	08 c0       	rjmp	.+16     	; 0x4542 <decode_port_no+0x36>
    4532:	88 0f       	add	r24, r24
    4534:	38 2f       	mov	r19, r24
    4536:	33 0f       	add	r19, r19
    4538:	33 0f       	add	r19, r19
    453a:	83 0f       	add	r24, r19
    453c:	80 53       	subi	r24, 0x30	; 48
    453e:	89 0f       	add	r24, r25
    4540:	2f 5f       	subi	r18, 0xFF	; 255
    4542:	fd 01       	movw	r30, r26
    4544:	e2 0f       	add	r30, r18
    4546:	f1 1d       	adc	r31, r1
    4548:	90 81       	ld	r25, Z
    454a:	30 ed       	ldi	r19, 0xD0	; 208
    454c:	39 0f       	add	r19, r25
    454e:	3a 30       	cpi	r19, 0x0A	; 10
    4550:	10 f4       	brcc	.+4      	; 0x4556 <decode_port_no+0x4a>
    4552:	91 11       	cpse	r25, r1
    4554:	ee cf       	rjmp	.-36     	; 0x4532 <decode_port_no+0x26>
    4556:	fb 01       	movw	r30, r22
    4558:	20 83       	st	Z, r18
    455a:	08 95       	ret
    455c:	80 e0       	ldi	r24, 0x00	; 0
    455e:	08 95       	ret
    4560:	80 e0       	ldi	r24, 0x00	; 0
    4562:	08 95       	ret

00004564 <decode_hexadecimal_string_bytes>:
    4564:	0f 93       	push	r16
    4566:	1f 93       	push	r17
    4568:	cf 93       	push	r28
    456a:	df 93       	push	r29
    456c:	dc 01       	movw	r26, r24
    456e:	ea 01       	movw	r28, r20
    4570:	20 97       	sbiw	r28, 0x00	; 0
    4572:	e1 f1       	breq	.+120    	; 0x45ec <decode_hexadecimal_string_bytes+0x88>
    4574:	fa 01       	movw	r30, r20
    4576:	01 90       	ld	r0, Z+
    4578:	00 20       	and	r0, r0
    457a:	e9 f7       	brne	.-6      	; 0x4576 <decode_hexadecimal_string_bytes+0x12>
    457c:	31 97       	sbiw	r30, 0x01	; 1
    457e:	e4 1b       	sub	r30, r20
    4580:	f5 0b       	sbc	r31, r21
    4582:	32 97       	sbiw	r30, 0x02	; 2
    4584:	10 f5       	brcc	.+68     	; 0x45ca <decode_hexadecimal_string_bytes+0x66>
    4586:	32 c0       	rjmp	.+100    	; 0x45ec <decode_hexadecimal_string_bytes+0x88>
    4588:	8d 01       	movw	r16, r26
    458a:	04 0f       	add	r16, r20
    458c:	15 1f       	adc	r17, r21
    458e:	30 e0       	ldi	r19, 0x00	; 0
    4590:	ae 01       	movw	r20, r28
    4592:	42 0f       	add	r20, r18
    4594:	53 1f       	adc	r21, r19
    4596:	fa 01       	movw	r30, r20
    4598:	90 81       	ld	r25, Z
    459a:	91 34       	cpi	r25, 0x41	; 65
    459c:	28 f0       	brcs	.+10     	; 0x45a8 <decode_hexadecimal_string_bytes+0x44>
    459e:	97 53       	subi	r25, 0x37	; 55
    45a0:	59 2f       	mov	r21, r25
    45a2:	52 95       	swap	r21
    45a4:	50 7f       	andi	r21, 0xF0	; 240
    45a6:	03 c0       	rjmp	.+6      	; 0x45ae <decode_hexadecimal_string_bytes+0x4a>
    45a8:	59 2f       	mov	r21, r25
    45aa:	52 95       	swap	r21
    45ac:	50 7f       	andi	r21, 0xF0	; 240
    45ae:	2c 0f       	add	r18, r28
    45b0:	3d 1f       	adc	r19, r29
    45b2:	f9 01       	movw	r30, r18
    45b4:	91 81       	ldd	r25, Z+1	; 0x01
    45b6:	91 34       	cpi	r25, 0x41	; 65
    45b8:	10 f0       	brcs	.+4      	; 0x45be <decode_hexadecimal_string_bytes+0x5a>
    45ba:	97 53       	subi	r25, 0x37	; 55
    45bc:	01 c0       	rjmp	.+2      	; 0x45c0 <decode_hexadecimal_string_bytes+0x5c>
    45be:	90 53       	subi	r25, 0x30	; 48
    45c0:	95 0f       	add	r25, r21
    45c2:	f8 01       	movw	r30, r16
    45c4:	90 83       	st	Z, r25
    45c6:	8f 5f       	subi	r24, 0xFF	; 255
    45c8:	01 c0       	rjmp	.+2      	; 0x45cc <decode_hexadecimal_string_bytes+0x68>
    45ca:	80 e0       	ldi	r24, 0x00	; 0
    45cc:	28 2f       	mov	r18, r24
    45ce:	22 0f       	add	r18, r18
    45d0:	48 2f       	mov	r20, r24
    45d2:	50 e0       	ldi	r21, 0x00	; 0
    45d4:	fe 01       	movw	r30, r28
    45d6:	01 90       	ld	r0, Z+
    45d8:	00 20       	and	r0, r0
    45da:	e9 f7       	brne	.-6      	; 0x45d6 <decode_hexadecimal_string_bytes+0x72>
    45dc:	31 97       	sbiw	r30, 0x01	; 1
    45de:	ec 1b       	sub	r30, r28
    45e0:	fd 0b       	sbc	r31, r29
    45e2:	4e 17       	cp	r20, r30
    45e4:	5f 07       	cpc	r21, r31
    45e6:	10 f4       	brcc	.+4      	; 0x45ec <decode_hexadecimal_string_bytes+0x88>
    45e8:	86 13       	cpse	r24, r22
    45ea:	ce cf       	rjmp	.-100    	; 0x4588 <decode_hexadecimal_string_bytes+0x24>
    45ec:	df 91       	pop	r29
    45ee:	cf 91       	pop	r28
    45f0:	1f 91       	pop	r17
    45f2:	0f 91       	pop	r16
    45f4:	08 95       	ret

000045f6 <reg_read_register>:
    45f6:	fc 01       	movw	r30, r24
    45f8:	80 81       	ld	r24, Z
    45fa:	08 95       	ret

000045fc <reg_read_bit>:
    45fc:	fc 01       	movw	r30, r24
    45fe:	20 81       	ld	r18, Z
    4600:	81 e0       	ldi	r24, 0x01	; 1
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	02 c0       	rjmp	.+4      	; 0x460a <reg_read_bit+0xe>
    4606:	88 0f       	add	r24, r24
    4608:	99 1f       	adc	r25, r25
    460a:	6a 95       	dec	r22
    460c:	e2 f7       	brpl	.-8      	; 0x4606 <reg_read_bit+0xa>
    460e:	82 23       	and	r24, r18
    4610:	08 95       	ret

00004612 <reg_read_bits>:
    4612:	fc 01       	movw	r30, r24
    4614:	80 81       	ld	r24, Z
    4616:	86 23       	and	r24, r22
    4618:	08 95       	ret

0000461a <reg_set_register>:
    461a:	fc 01       	movw	r30, r24
    461c:	60 83       	st	Z, r22
    461e:	08 95       	ret

00004620 <reg_clear_register>:
    4620:	fc 01       	movw	r30, r24
    4622:	10 82       	st	Z, r1
    4624:	08 95       	ret

00004626 <reg_set_bit>:
    4626:	fc 01       	movw	r30, r24
    4628:	40 81       	ld	r20, Z
    462a:	21 e0       	ldi	r18, 0x01	; 1
    462c:	30 e0       	ldi	r19, 0x00	; 0
    462e:	02 c0       	rjmp	.+4      	; 0x4634 <reg_set_bit+0xe>
    4630:	22 0f       	add	r18, r18
    4632:	33 1f       	adc	r19, r19
    4634:	6a 95       	dec	r22
    4636:	e2 f7       	brpl	.-8      	; 0x4630 <reg_set_bit+0xa>
    4638:	24 2b       	or	r18, r20
    463a:	20 83       	st	Z, r18
    463c:	08 95       	ret

0000463e <reg_set_bits>:
    463e:	fc 01       	movw	r30, r24
    4640:	20 81       	ld	r18, Z
    4642:	62 2b       	or	r22, r18
    4644:	60 83       	st	Z, r22
    4646:	08 95       	ret

00004648 <reg_toggle_bit>:
    4648:	fc 01       	movw	r30, r24
    464a:	40 81       	ld	r20, Z
    464c:	21 e0       	ldi	r18, 0x01	; 1
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	02 c0       	rjmp	.+4      	; 0x4656 <reg_toggle_bit+0xe>
    4652:	22 0f       	add	r18, r18
    4654:	33 1f       	adc	r19, r19
    4656:	6a 95       	dec	r22
    4658:	e2 f7       	brpl	.-8      	; 0x4652 <reg_toggle_bit+0xa>
    465a:	24 27       	eor	r18, r20
    465c:	20 83       	st	Z, r18
    465e:	08 95       	ret

00004660 <reg_toggle_bits>:
    4660:	fc 01       	movw	r30, r24
    4662:	20 81       	ld	r18, Z
    4664:	62 27       	eor	r22, r18
    4666:	60 83       	st	Z, r22
    4668:	08 95       	ret

0000466a <reg_clear_bit>:
    466a:	fc 01       	movw	r30, r24
    466c:	90 81       	ld	r25, Z
    466e:	21 e0       	ldi	r18, 0x01	; 1
    4670:	30 e0       	ldi	r19, 0x00	; 0
    4672:	02 c0       	rjmp	.+4      	; 0x4678 <reg_clear_bit+0xe>
    4674:	22 0f       	add	r18, r18
    4676:	33 1f       	adc	r19, r19
    4678:	6a 95       	dec	r22
    467a:	e2 f7       	brpl	.-8      	; 0x4674 <reg_clear_bit+0xa>
    467c:	20 95       	com	r18
    467e:	29 23       	and	r18, r25
    4680:	20 83       	st	Z, r18
    4682:	08 95       	ret

00004684 <reg_clear_bits>:
    4684:	fc 01       	movw	r30, r24
    4686:	90 81       	ld	r25, Z
    4688:	60 95       	com	r22
    468a:	69 23       	and	r22, r25
    468c:	60 83       	st	Z, r22
    468e:	08 95       	ret

00004690 <_serial_call_back>:
    4690:	80 91 8d 19 	lds	r24, 0x198D	; 0x80198d <crc_sum.1941>
    4694:	86 0f       	add	r24, r22
    4696:	80 93 8d 19 	sts	0x198D, r24	; 0x80198d <crc_sum.1941>
    469a:	90 91 90 19 	lds	r25, 0x1990	; 0x801990 <_mh_state>
    469e:	91 30       	cpi	r25, 0x01	; 1
    46a0:	79 f0       	breq	.+30     	; 0x46c0 <_serial_call_back+0x30>
    46a2:	28 f0       	brcs	.+10     	; 0x46ae <_serial_call_back+0x1e>
    46a4:	92 30       	cpi	r25, 0x02	; 2
    46a6:	a9 f0       	breq	.+42     	; 0x46d2 <_serial_call_back+0x42>
    46a8:	93 30       	cpi	r25, 0x03	; 3
    46aa:	19 f1       	breq	.+70     	; 0x46f2 <_serial_call_back+0x62>
    46ac:	08 95       	ret
    46ae:	6f 3f       	cpi	r22, 0xFF	; 255
    46b0:	09 f0       	breq	.+2      	; 0x46b4 <_serial_call_back+0x24>
    46b2:	48 c0       	rjmp	.+144    	; 0x4744 <_serial_call_back+0xb4>
    46b4:	10 92 8d 19 	sts	0x198D, r1	; 0x80198d <crc_sum.1941>
    46b8:	81 e0       	ldi	r24, 0x01	; 1
    46ba:	80 93 90 19 	sts	0x1990, r24	; 0x801990 <_mh_state>
    46be:	08 95       	ret
    46c0:	66 38       	cpi	r22, 0x86	; 134
    46c2:	09 f0       	breq	.+2      	; 0x46c6 <_serial_call_back+0x36>
    46c4:	3f c0       	rjmp	.+126    	; 0x4744 <_serial_call_back+0xb4>
    46c6:	10 92 8c 19 	sts	0x198C, r1	; 0x80198c <inDex.1939>
    46ca:	82 e0       	ldi	r24, 0x02	; 2
    46cc:	80 93 90 19 	sts	0x1990, r24	; 0x801990 <_mh_state>
    46d0:	08 95       	ret
    46d2:	e0 91 8c 19 	lds	r30, 0x198C	; 0x80198c <inDex.1939>
    46d6:	81 e0       	ldi	r24, 0x01	; 1
    46d8:	8e 0f       	add	r24, r30
    46da:	80 93 8c 19 	sts	0x198C, r24	; 0x80198c <inDex.1939>
    46de:	f0 e0       	ldi	r31, 0x00	; 0
    46e0:	e6 57       	subi	r30, 0x76	; 118
    46e2:	f6 4e       	sbci	r31, 0xE6	; 230
    46e4:	60 83       	st	Z, r22
    46e6:	82 30       	cpi	r24, 0x02	; 2
    46e8:	69 f5       	brne	.+90     	; 0x4744 <_serial_call_back+0xb4>
    46ea:	83 e0       	ldi	r24, 0x03	; 3
    46ec:	80 93 90 19 	sts	0x1990, r24	; 0x801990 <_mh_state>
    46f0:	08 95       	ret
    46f2:	90 91 8c 19 	lds	r25, 0x198C	; 0x80198c <inDex.1939>
    46f6:	21 e0       	ldi	r18, 0x01	; 1
    46f8:	29 0f       	add	r18, r25
    46fa:	20 93 8c 19 	sts	0x198C, r18	; 0x80198c <inDex.1939>
    46fe:	96 30       	cpi	r25, 0x06	; 6
    4700:	09 f5       	brne	.+66     	; 0x4744 <_serial_call_back+0xb4>
    4702:	81 11       	cpse	r24, r1
    4704:	0e c0       	rjmp	.+28     	; 0x4722 <_serial_call_back+0x92>
    4706:	ea e8       	ldi	r30, 0x8A	; 138
    4708:	f9 e1       	ldi	r31, 0x19	; 25
    470a:	80 81       	ld	r24, Z
    470c:	90 e0       	ldi	r25, 0x00	; 0
    470e:	98 2f       	mov	r25, r24
    4710:	88 27       	eor	r24, r24
    4712:	21 81       	ldd	r18, Z+1	; 0x01
    4714:	82 0f       	add	r24, r18
    4716:	91 1d       	adc	r25, r1
    4718:	90 93 92 19 	sts	0x1992, r25	; 0x801992 <_ppm+0x1>
    471c:	80 93 91 19 	sts	0x1991, r24	; 0x801991 <_ppm>
    4720:	04 c0       	rjmp	.+8      	; 0x472a <_serial_call_back+0x9a>
    4722:	10 92 92 19 	sts	0x1992, r1	; 0x801992 <_ppm+0x1>
    4726:	10 92 91 19 	sts	0x1991, r1	; 0x801991 <_ppm>
    472a:	10 92 90 19 	sts	0x1990, r1	; 0x801990 <_mh_state>
    472e:	e0 91 8e 19 	lds	r30, 0x198E	; 0x80198e <_app_call_back>
    4732:	f0 91 8f 19 	lds	r31, 0x198F	; 0x80198f <_app_call_back+0x1>
    4736:	30 97       	sbiw	r30, 0x00	; 0
    4738:	29 f0       	breq	.+10     	; 0x4744 <_serial_call_back+0xb4>
    473a:	80 91 91 19 	lds	r24, 0x1991	; 0x801991 <_ppm>
    473e:	90 91 92 19 	lds	r25, 0x1992	; 0x801992 <_ppm+0x1>
    4742:	19 95       	eicall
    4744:	08 95       	ret

00004746 <mh_z19_create>:
    4746:	8f 92       	push	r8
    4748:	9f 92       	push	r9
    474a:	af 92       	push	r10
    474c:	cf 92       	push	r12
    474e:	ef 92       	push	r14
    4750:	0f 93       	push	r16
    4752:	cf 93       	push	r28
    4754:	df 93       	push	r29
    4756:	eb 01       	movw	r28, r22
    4758:	0f 2e       	mov	r0, r31
    475a:	f8 e4       	ldi	r31, 0x48	; 72
    475c:	8f 2e       	mov	r8, r31
    475e:	f3 e2       	ldi	r31, 0x23	; 35
    4760:	9f 2e       	mov	r9, r31
    4762:	f0 2d       	mov	r31, r0
    4764:	68 94       	set
    4766:	aa 24       	eor	r10, r10
    4768:	a4 f8       	bld	r10, 4
    476a:	68 94       	set
    476c:	cc 24       	eor	r12, r12
    476e:	c4 f8       	bld	r12, 4
    4770:	e1 2c       	mov	r14, r1
    4772:	00 e0       	ldi	r16, 0x00	; 0
    4774:	23 e0       	ldi	r18, 0x03	; 3
    4776:	40 e8       	ldi	r20, 0x80	; 128
    4778:	55 e2       	ldi	r21, 0x25	; 37
    477a:	60 e0       	ldi	r22, 0x00	; 0
    477c:	70 e0       	ldi	r23, 0x00	; 0
    477e:	74 d0       	rcall	.+232    	; 0x4868 <serial_new_instance>
    4780:	90 93 94 19 	sts	0x1994, r25	; 0x801994 <_serial+0x1>
    4784:	80 93 93 19 	sts	0x1993, r24	; 0x801993 <_serial>
    4788:	d0 93 8f 19 	sts	0x198F, r29	; 0x80198f <_app_call_back+0x1>
    478c:	c0 93 8e 19 	sts	0x198E, r28	; 0x80198e <_app_call_back>
    4790:	df 91       	pop	r29
    4792:	cf 91       	pop	r28
    4794:	0f 91       	pop	r16
    4796:	ef 90       	pop	r14
    4798:	cf 90       	pop	r12
    479a:	af 90       	pop	r10
    479c:	9f 90       	pop	r9
    479e:	8f 90       	pop	r8
    47a0:	08 95       	ret

000047a2 <mh_z19_take_meassuring>:
    47a2:	cf 93       	push	r28
    47a4:	df 93       	push	r29
    47a6:	cd b7       	in	r28, 0x3d	; 61
    47a8:	de b7       	in	r29, 0x3e	; 62
    47aa:	29 97       	sbiw	r28, 0x09	; 9
    47ac:	0f b6       	in	r0, 0x3f	; 63
    47ae:	f8 94       	cli
    47b0:	de bf       	out	0x3e, r29	; 62
    47b2:	0f be       	out	0x3f, r0	; 63
    47b4:	cd bf       	out	0x3d, r28	; 61
    47b6:	89 e0       	ldi	r24, 0x09	; 9
    47b8:	e2 e4       	ldi	r30, 0x42	; 66
    47ba:	f2 e0       	ldi	r31, 0x02	; 2
    47bc:	9e 01       	movw	r18, r28
    47be:	2f 5f       	subi	r18, 0xFF	; 255
    47c0:	3f 4f       	sbci	r19, 0xFF	; 255
    47c2:	d9 01       	movw	r26, r18
    47c4:	01 90       	ld	r0, Z+
    47c6:	0d 92       	st	X+, r0
    47c8:	8a 95       	dec	r24
    47ca:	e1 f7       	brne	.-8      	; 0x47c4 <mh_z19_take_meassuring+0x22>
    47cc:	10 92 92 19 	sts	0x1992, r1	; 0x801992 <_ppm+0x1>
    47d0:	10 92 91 19 	sts	0x1991, r1	; 0x801991 <_ppm>
    47d4:	80 91 93 19 	lds	r24, 0x1993	; 0x801993 <_serial>
    47d8:	90 91 94 19 	lds	r25, 0x1994	; 0x801994 <_serial+0x1>
    47dc:	00 97       	sbiw	r24, 0x00	; 0
    47de:	31 f0       	breq	.+12     	; 0x47ec <mh_z19_take_meassuring+0x4a>
    47e0:	42 2f       	mov	r20, r18
    47e2:	53 2f       	mov	r21, r19
    47e4:	69 e0       	ldi	r22, 0x09	; 9
    47e6:	fc d0       	rcall	.+504    	; 0x49e0 <serial_send_bytes>
    47e8:	80 e0       	ldi	r24, 0x00	; 0
    47ea:	01 c0       	rjmp	.+2      	; 0x47ee <mh_z19_take_meassuring+0x4c>
    47ec:	82 e0       	ldi	r24, 0x02	; 2
    47ee:	29 96       	adiw	r28, 0x09	; 9
    47f0:	0f b6       	in	r0, 0x3f	; 63
    47f2:	f8 94       	cli
    47f4:	de bf       	out	0x3e, r29	; 62
    47f6:	0f be       	out	0x3f, r0	; 63
    47f8:	cd bf       	out	0x3d, r28	; 61
    47fa:	df 91       	pop	r29
    47fc:	cf 91       	pop	r28
    47fe:	08 95       	ret

00004800 <rcServoSet>:
    4800:	65 36       	cpi	r22, 0x65	; 101
    4802:	0c f0       	brlt	.+2      	; 0x4806 <rcServoSet+0x6>
    4804:	64 e6       	ldi	r22, 0x64	; 100
    4806:	6c 39       	cpi	r22, 0x9C	; 156
    4808:	0c f4       	brge	.+2      	; 0x480c <rcServoSet+0xc>
    480a:	6c e9       	ldi	r22, 0x9C	; 156
    480c:	96 ef       	ldi	r25, 0xF6	; 246
    480e:	69 02       	muls	r22, r25
    4810:	b0 01       	movw	r22, r0
    4812:	11 24       	eor	r1, r1
    4814:	68 54       	subi	r22, 0x48	; 72
    4816:	74 4f       	sbci	r23, 0xF4	; 244
    4818:	81 11       	cpse	r24, r1
    481a:	05 c0       	rjmp	.+10     	; 0x4826 <rcServoSet+0x26>
    481c:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    4820:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    4824:	08 95       	ret
    4826:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    482a:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    482e:	08 95       	ret

00004830 <rcServoCreate>:
    4830:	ea e0       	ldi	r30, 0x0A	; 10
    4832:	f1 e0       	ldi	r31, 0x01	; 1
    4834:	80 81       	ld	r24, Z
    4836:	88 61       	ori	r24, 0x18	; 24
    4838:	80 83       	st	Z, r24
    483a:	8f e3       	ldi	r24, 0x3F	; 63
    483c:	9c e9       	ldi	r25, 0x9C	; 156
    483e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    4842:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    4846:	60 e0       	ldi	r22, 0x00	; 0
    4848:	80 e0       	ldi	r24, 0x00	; 0
    484a:	da df       	rcall	.-76     	; 0x4800 <rcServoSet>
    484c:	60 e0       	ldi	r22, 0x00	; 0
    484e:	81 e0       	ldi	r24, 0x01	; 1
    4850:	d7 df       	rcall	.-82     	; 0x4800 <rcServoSet>
    4852:	e0 e2       	ldi	r30, 0x20	; 32
    4854:	f1 e0       	ldi	r31, 0x01	; 1
    4856:	80 81       	ld	r24, Z
    4858:	82 6a       	ori	r24, 0xA2	; 162
    485a:	80 83       	st	Z, r24
    485c:	e1 e2       	ldi	r30, 0x21	; 33
    485e:	f1 e0       	ldi	r31, 0x01	; 1
    4860:	80 81       	ld	r24, Z
    4862:	8a 61       	ori	r24, 0x1A	; 26
    4864:	80 83       	st	Z, r24
    4866:	08 95       	ret

00004868 <serial_new_instance>:
    4868:	2f 92       	push	r2
    486a:	3f 92       	push	r3
    486c:	4f 92       	push	r4
    486e:	5f 92       	push	r5
    4870:	6f 92       	push	r6
    4872:	7f 92       	push	r7
    4874:	8f 92       	push	r8
    4876:	9f 92       	push	r9
    4878:	af 92       	push	r10
    487a:	cf 92       	push	r12
    487c:	ef 92       	push	r14
    487e:	ff 92       	push	r15
    4880:	0f 93       	push	r16
    4882:	1f 93       	push	r17
    4884:	cf 93       	push	r28
    4886:	df 93       	push	r29
    4888:	cd b7       	in	r28, 0x3d	; 61
    488a:	de b7       	in	r29, 0x3e	; 62
    488c:	f8 2e       	mov	r15, r24
    488e:	2a 01       	movw	r4, r20
    4890:	3b 01       	movw	r6, r22
    4892:	88 e0       	ldi	r24, 0x08	; 8
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	4a d7       	rcall	.+3732   	; 0x572c <malloc>
    4898:	8c 01       	movw	r16, r24
    489a:	8f 2d       	mov	r24, r15
    489c:	90 e0       	ldi	r25, 0x00	; 0
    489e:	88 0f       	add	r24, r24
    48a0:	99 1f       	adc	r25, r25
    48a2:	fc 01       	movw	r30, r24
    48a4:	eb 56       	subi	r30, 0x6B	; 107
    48a6:	f6 4e       	sbci	r31, 0xE6	; 230
    48a8:	11 83       	std	Z+1, r17	; 0x01
    48aa:	00 83       	st	Z, r16
    48ac:	fc 01       	movw	r30, r24
    48ae:	e5 5f       	subi	r30, 0xF5	; 245
    48b0:	fd 4f       	sbci	r31, 0xFD	; 253
    48b2:	80 81       	ld	r24, Z
    48b4:	91 81       	ldd	r25, Z+1	; 0x01
    48b6:	d8 01       	movw	r26, r16
    48b8:	8d 93       	st	X+, r24
    48ba:	9c 93       	st	X, r25
    48bc:	6c 2d       	mov	r22, r12
    48be:	70 e0       	ldi	r23, 0x00	; 0
    48c0:	84 e0       	ldi	r24, 0x04	; 4
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	19 d7       	rcall	.+3634   	; 0x56f8 <calloc>
    48c6:	1c 01       	movw	r2, r24
    48c8:	61 e0       	ldi	r22, 0x01	; 1
    48ca:	70 e0       	ldi	r23, 0x00	; 0
    48cc:	86 e0       	ldi	r24, 0x06	; 6
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	13 d7       	rcall	.+3622   	; 0x56f8 <calloc>
    48d2:	7c 01       	movw	r14, r24
    48d4:	4c 2d       	mov	r20, r12
    48d6:	b1 01       	movw	r22, r2
    48d8:	2c d5       	rcall	.+2648   	; 0x5332 <fifo_init>
    48da:	f8 01       	movw	r30, r16
    48dc:	f5 82       	std	Z+5, r15	; 0x05
    48de:	e4 82       	std	Z+4, r14	; 0x04
    48e0:	6a 2d       	mov	r22, r10
    48e2:	70 e0       	ldi	r23, 0x00	; 0
    48e4:	84 e0       	ldi	r24, 0x04	; 4
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	07 d7       	rcall	.+3598   	; 0x56f8 <calloc>
    48ea:	1c 01       	movw	r2, r24
    48ec:	61 e0       	ldi	r22, 0x01	; 1
    48ee:	70 e0       	ldi	r23, 0x00	; 0
    48f0:	86 e0       	ldi	r24, 0x06	; 6
    48f2:	90 e0       	ldi	r25, 0x00	; 0
    48f4:	01 d7       	rcall	.+3586   	; 0x56f8 <calloc>
    48f6:	7c 01       	movw	r14, r24
    48f8:	4a 2d       	mov	r20, r10
    48fa:	b1 01       	movw	r22, r2
    48fc:	1a d5       	rcall	.+2612   	; 0x5332 <fifo_init>
    48fe:	d8 01       	movw	r26, r16
    4900:	13 96       	adiw	r26, 0x03	; 3
    4902:	fc 92       	st	X, r15
    4904:	ee 92       	st	-X, r14
    4906:	12 97       	sbiw	r26, 0x02	; 2
    4908:	17 96       	adiw	r26, 0x07	; 7
    490a:	9c 92       	st	X, r9
    490c:	8e 92       	st	-X, r8
    490e:	16 97       	sbiw	r26, 0x06	; 6
    4910:	ff b6       	in	r15, 0x3f	; 63
    4912:	f8 94       	cli
    4914:	ed 91       	ld	r30, X+
    4916:	fc 91       	ld	r31, X
    4918:	11 97       	sbiw	r26, 0x01	; 1
    491a:	36 97       	sbiw	r30, 0x06	; 6
    491c:	80 81       	ld	r24, Z
    491e:	82 60       	ori	r24, 0x02	; 2
    4920:	80 83       	st	Z, r24
    4922:	8d 90       	ld	r8, X+
    4924:	9c 90       	ld	r9, X
    4926:	c3 01       	movw	r24, r6
    4928:	b2 01       	movw	r22, r4
    492a:	f1 d5       	rcall	.+3042   	; 0x550e <__floatunsisf>
    492c:	20 e0       	ldi	r18, 0x00	; 0
    492e:	30 e0       	ldi	r19, 0x00	; 0
    4930:	40 e0       	ldi	r20, 0x00	; 0
    4932:	51 e4       	ldi	r21, 0x41	; 65
    4934:	51 d6       	rcall	.+3234   	; 0x55d8 <__mulsf3>
    4936:	9b 01       	movw	r18, r22
    4938:	ac 01       	movw	r20, r24
    493a:	60 e0       	ldi	r22, 0x00	; 0
    493c:	74 e2       	ldi	r23, 0x24	; 36
    493e:	84 e7       	ldi	r24, 0x74	; 116
    4940:	9b e4       	ldi	r25, 0x4B	; 75
    4942:	7a d5       	rcall	.+2804   	; 0x5438 <__divsf3>
    4944:	20 e0       	ldi	r18, 0x00	; 0
    4946:	30 e0       	ldi	r19, 0x00	; 0
    4948:	40 e8       	ldi	r20, 0x80	; 128
    494a:	5f e3       	ldi	r21, 0x3F	; 63
    494c:	0e d5       	rcall	.+2588   	; 0x536a <__subsf3>
    494e:	0e 94 30 1c 	call	0x3860	; 0x3860 <__fixunssfsi>
    4952:	f4 01       	movw	r30, r8
    4954:	32 97       	sbiw	r30, 0x02	; 2
    4956:	60 83       	st	Z, r22
    4958:	d8 01       	movw	r26, r16
    495a:	ed 91       	ld	r30, X+
    495c:	fc 91       	ld	r31, X
    495e:	11 97       	sbiw	r26, 0x01	; 1
    4960:	35 97       	sbiw	r30, 0x05	; 5
    4962:	88 e9       	ldi	r24, 0x98	; 152
    4964:	80 83       	st	Z, r24
    4966:	ed 91       	ld	r30, X+
    4968:	fc 91       	ld	r31, X
    496a:	34 97       	sbiw	r30, 0x04	; 4
    496c:	86 e0       	ldi	r24, 0x06	; 6
    496e:	80 83       	st	Z, r24
    4970:	ff be       	out	0x3f, r15	; 63
    4972:	c8 01       	movw	r24, r16
    4974:	df 91       	pop	r29
    4976:	cf 91       	pop	r28
    4978:	1f 91       	pop	r17
    497a:	0f 91       	pop	r16
    497c:	ff 90       	pop	r15
    497e:	ef 90       	pop	r14
    4980:	cf 90       	pop	r12
    4982:	af 90       	pop	r10
    4984:	9f 90       	pop	r9
    4986:	8f 90       	pop	r8
    4988:	7f 90       	pop	r7
    498a:	6f 90       	pop	r6
    498c:	5f 90       	pop	r5
    498e:	4f 90       	pop	r4
    4990:	3f 90       	pop	r3
    4992:	2f 90       	pop	r2
    4994:	08 95       	ret

00004996 <serial_send_byte>:
    4996:	cf 93       	push	r28
    4998:	df 93       	push	r29
    499a:	ec 01       	movw	r28, r24
    499c:	ea 81       	ldd	r30, Y+2	; 0x02
    499e:	fb 81       	ldd	r31, Y+3	; 0x03
    49a0:	93 81       	ldd	r25, Z+3	; 0x03
    49a2:	82 81       	ldd	r24, Z+2	; 0x02
    49a4:	25 81       	ldd	r18, Z+5	; 0x05
    49a6:	98 1b       	sub	r25, r24
    49a8:	92 23       	and	r25, r18
    49aa:	84 81       	ldd	r24, Z+4	; 0x04
    49ac:	98 17       	cp	r25, r24
    49ae:	a1 f0       	breq	.+40     	; 0x49d8 <serial_send_byte+0x42>
    49b0:	93 81       	ldd	r25, Z+3	; 0x03
    49b2:	26 95       	lsr	r18
    49b4:	29 23       	and	r18, r25
    49b6:	a0 81       	ld	r26, Z
    49b8:	b1 81       	ldd	r27, Z+1	; 0x01
    49ba:	a2 0f       	add	r26, r18
    49bc:	b1 1d       	adc	r27, r1
    49be:	6c 93       	st	X, r22
    49c0:	9f 5f       	subi	r25, 0xFF	; 255
    49c2:	25 81       	ldd	r18, Z+5	; 0x05
    49c4:	92 23       	and	r25, r18
    49c6:	93 83       	std	Z+3, r25	; 0x03
    49c8:	e8 81       	ld	r30, Y
    49ca:	f9 81       	ldd	r31, Y+1	; 0x01
    49cc:	35 97       	sbiw	r30, 0x05	; 5
    49ce:	80 81       	ld	r24, Z
    49d0:	80 62       	ori	r24, 0x20	; 32
    49d2:	80 83       	st	Z, r24
    49d4:	80 e0       	ldi	r24, 0x00	; 0
    49d6:	01 c0       	rjmp	.+2      	; 0x49da <serial_send_byte+0x44>
    49d8:	82 e0       	ldi	r24, 0x02	; 2
    49da:	df 91       	pop	r29
    49dc:	cf 91       	pop	r28
    49de:	08 95       	ret

000049e0 <serial_send_bytes>:
    49e0:	ef 92       	push	r14
    49e2:	ff 92       	push	r15
    49e4:	0f 93       	push	r16
    49e6:	1f 93       	push	r17
    49e8:	cf 93       	push	r28
    49ea:	df 93       	push	r29
    49ec:	7c 01       	movw	r14, r24
    49ee:	dc 01       	movw	r26, r24
    49f0:	12 96       	adiw	r26, 0x02	; 2
    49f2:	ed 91       	ld	r30, X+
    49f4:	fc 91       	ld	r31, X
    49f6:	13 97       	sbiw	r26, 0x03	; 3
    49f8:	93 81       	ldd	r25, Z+3	; 0x03
    49fa:	82 81       	ldd	r24, Z+2	; 0x02
    49fc:	98 1b       	sub	r25, r24
    49fe:	85 81       	ldd	r24, Z+5	; 0x05
    4a00:	98 23       	and	r25, r24
    4a02:	84 81       	ldd	r24, Z+4	; 0x04
    4a04:	89 1b       	sub	r24, r25
    4a06:	86 17       	cp	r24, r22
    4a08:	98 f1       	brcs	.+102    	; 0x4a70 <serial_send_bytes+0x90>
    4a0a:	66 23       	and	r22, r22
    4a0c:	41 f1       	breq	.+80     	; 0x4a5e <serial_send_bytes+0x7e>
    4a0e:	84 2f       	mov	r24, r20
    4a10:	95 2f       	mov	r25, r21
    4a12:	dc 01       	movw	r26, r24
    4a14:	61 50       	subi	r22, 0x01	; 1
    4a16:	46 2f       	mov	r20, r22
    4a18:	50 e0       	ldi	r21, 0x00	; 0
    4a1a:	4f 5f       	subi	r20, 0xFF	; 255
    4a1c:	5f 4f       	sbci	r21, 0xFF	; 255
    4a1e:	48 0f       	add	r20, r24
    4a20:	59 1f       	adc	r21, r25
    4a22:	e7 01       	movw	r28, r14
    4a24:	ea 81       	ldd	r30, Y+2	; 0x02
    4a26:	fb 81       	ldd	r31, Y+3	; 0x03
    4a28:	93 81       	ldd	r25, Z+3	; 0x03
    4a2a:	82 81       	ldd	r24, Z+2	; 0x02
    4a2c:	25 81       	ldd	r18, Z+5	; 0x05
    4a2e:	98 1b       	sub	r25, r24
    4a30:	92 23       	and	r25, r18
    4a32:	84 81       	ldd	r24, Z+4	; 0x04
    4a34:	98 17       	cp	r25, r24
    4a36:	79 f0       	breq	.+30     	; 0x4a56 <serial_send_bytes+0x76>
    4a38:	8c 91       	ld	r24, X
    4a3a:	93 81       	ldd	r25, Z+3	; 0x03
    4a3c:	26 95       	lsr	r18
    4a3e:	29 23       	and	r18, r25
    4a40:	60 81       	ld	r22, Z
    4a42:	71 81       	ldd	r23, Z+1	; 0x01
    4a44:	8b 01       	movw	r16, r22
    4a46:	02 0f       	add	r16, r18
    4a48:	11 1d       	adc	r17, r1
    4a4a:	e8 01       	movw	r28, r16
    4a4c:	88 83       	st	Y, r24
    4a4e:	9f 5f       	subi	r25, 0xFF	; 255
    4a50:	85 81       	ldd	r24, Z+5	; 0x05
    4a52:	98 23       	and	r25, r24
    4a54:	93 83       	std	Z+3, r25	; 0x03
    4a56:	11 96       	adiw	r26, 0x01	; 1
    4a58:	a4 17       	cp	r26, r20
    4a5a:	b5 07       	cpc	r27, r21
    4a5c:	11 f7       	brne	.-60     	; 0x4a22 <serial_send_bytes+0x42>
    4a5e:	d7 01       	movw	r26, r14
    4a60:	ed 91       	ld	r30, X+
    4a62:	fc 91       	ld	r31, X
    4a64:	35 97       	sbiw	r30, 0x05	; 5
    4a66:	80 81       	ld	r24, Z
    4a68:	80 62       	ori	r24, 0x20	; 32
    4a6a:	80 83       	st	Z, r24
    4a6c:	80 e0       	ldi	r24, 0x00	; 0
    4a6e:	01 c0       	rjmp	.+2      	; 0x4a72 <serial_send_bytes+0x92>
    4a70:	82 e0       	ldi	r24, 0x02	; 2
    4a72:	df 91       	pop	r29
    4a74:	cf 91       	pop	r28
    4a76:	1f 91       	pop	r17
    4a78:	0f 91       	pop	r16
    4a7a:	ff 90       	pop	r15
    4a7c:	ef 90       	pop	r14
    4a7e:	08 95       	ret

00004a80 <serial_get_byte>:
    4a80:	dc 01       	movw	r26, r24
    4a82:	14 96       	adiw	r26, 0x04	; 4
    4a84:	ed 91       	ld	r30, X+
    4a86:	fc 91       	ld	r31, X
    4a88:	15 97       	sbiw	r26, 0x05	; 5
    4a8a:	93 81       	ldd	r25, Z+3	; 0x03
    4a8c:	82 81       	ldd	r24, Z+2	; 0x02
    4a8e:	98 17       	cp	r25, r24
    4a90:	89 f0       	breq	.+34     	; 0x4ab4 <serial_get_byte+0x34>
    4a92:	92 81       	ldd	r25, Z+2	; 0x02
    4a94:	85 81       	ldd	r24, Z+5	; 0x05
    4a96:	86 95       	lsr	r24
    4a98:	89 23       	and	r24, r25
    4a9a:	a0 81       	ld	r26, Z
    4a9c:	b1 81       	ldd	r27, Z+1	; 0x01
    4a9e:	a8 0f       	add	r26, r24
    4aa0:	b1 1d       	adc	r27, r1
    4aa2:	8c 91       	ld	r24, X
    4aa4:	db 01       	movw	r26, r22
    4aa6:	8c 93       	st	X, r24
    4aa8:	9f 5f       	subi	r25, 0xFF	; 255
    4aaa:	85 81       	ldd	r24, Z+5	; 0x05
    4aac:	98 23       	and	r25, r24
    4aae:	92 83       	std	Z+2, r25	; 0x02
    4ab0:	80 e0       	ldi	r24, 0x00	; 0
    4ab2:	08 95       	ret
    4ab4:	83 e0       	ldi	r24, 0x03	; 3
    4ab6:	08 95       	ret

00004ab8 <__vector_25>:
    4ab8:	1f 92       	push	r1
    4aba:	0f 92       	push	r0
    4abc:	0f b6       	in	r0, 0x3f	; 63
    4abe:	0f 92       	push	r0
    4ac0:	11 24       	eor	r1, r1
    4ac2:	0b b6       	in	r0, 0x3b	; 59
    4ac4:	0f 92       	push	r0
    4ac6:	2f 93       	push	r18
    4ac8:	3f 93       	push	r19
    4aca:	4f 93       	push	r20
    4acc:	5f 93       	push	r21
    4ace:	6f 93       	push	r22
    4ad0:	7f 93       	push	r23
    4ad2:	8f 93       	push	r24
    4ad4:	9f 93       	push	r25
    4ad6:	af 93       	push	r26
    4ad8:	bf 93       	push	r27
    4ada:	cf 93       	push	r28
    4adc:	df 93       	push	r29
    4ade:	ef 93       	push	r30
    4ae0:	ff 93       	push	r31
    4ae2:	a0 91 95 19 	lds	r26, 0x1995	; 0x801995 <_ser_handle>
    4ae6:	b0 91 96 19 	lds	r27, 0x1996	; 0x801996 <_ser_handle+0x1>
    4aea:	10 97       	sbiw	r26, 0x00	; 0
    4aec:	11 f1       	breq	.+68     	; 0x4b32 <__vector_25+0x7a>
    4aee:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4af2:	14 96       	adiw	r26, 0x04	; 4
    4af4:	ed 91       	ld	r30, X+
    4af6:	fc 91       	ld	r31, X
    4af8:	15 97       	sbiw	r26, 0x05	; 5
    4afa:	93 81       	ldd	r25, Z+3	; 0x03
    4afc:	82 81       	ldd	r24, Z+2	; 0x02
    4afe:	25 81       	ldd	r18, Z+5	; 0x05
    4b00:	98 1b       	sub	r25, r24
    4b02:	92 23       	and	r25, r18
    4b04:	84 81       	ldd	r24, Z+4	; 0x04
    4b06:	98 17       	cp	r25, r24
    4b08:	61 f0       	breq	.+24     	; 0x4b22 <__vector_25+0x6a>
    4b0a:	83 81       	ldd	r24, Z+3	; 0x03
    4b0c:	26 95       	lsr	r18
    4b0e:	28 23       	and	r18, r24
    4b10:	c0 81       	ld	r28, Z
    4b12:	d1 81       	ldd	r29, Z+1	; 0x01
    4b14:	c2 0f       	add	r28, r18
    4b16:	d1 1d       	adc	r29, r1
    4b18:	68 83       	st	Y, r22
    4b1a:	8f 5f       	subi	r24, 0xFF	; 255
    4b1c:	95 81       	ldd	r25, Z+5	; 0x05
    4b1e:	89 23       	and	r24, r25
    4b20:	83 83       	std	Z+3, r24	; 0x03
    4b22:	16 96       	adiw	r26, 0x06	; 6
    4b24:	ed 91       	ld	r30, X+
    4b26:	fc 91       	ld	r31, X
    4b28:	17 97       	sbiw	r26, 0x07	; 7
    4b2a:	30 97       	sbiw	r30, 0x00	; 0
    4b2c:	11 f0       	breq	.+4      	; 0x4b32 <__vector_25+0x7a>
    4b2e:	cd 01       	movw	r24, r26
    4b30:	19 95       	eicall
    4b32:	ff 91       	pop	r31
    4b34:	ef 91       	pop	r30
    4b36:	df 91       	pop	r29
    4b38:	cf 91       	pop	r28
    4b3a:	bf 91       	pop	r27
    4b3c:	af 91       	pop	r26
    4b3e:	9f 91       	pop	r25
    4b40:	8f 91       	pop	r24
    4b42:	7f 91       	pop	r23
    4b44:	6f 91       	pop	r22
    4b46:	5f 91       	pop	r21
    4b48:	4f 91       	pop	r20
    4b4a:	3f 91       	pop	r19
    4b4c:	2f 91       	pop	r18
    4b4e:	0f 90       	pop	r0
    4b50:	0b be       	out	0x3b, r0	; 59
    4b52:	0f 90       	pop	r0
    4b54:	0f be       	out	0x3f, r0	; 63
    4b56:	0f 90       	pop	r0
    4b58:	1f 90       	pop	r1
    4b5a:	18 95       	reti

00004b5c <__vector_26>:
    4b5c:	1f 92       	push	r1
    4b5e:	0f 92       	push	r0
    4b60:	0f b6       	in	r0, 0x3f	; 63
    4b62:	0f 92       	push	r0
    4b64:	11 24       	eor	r1, r1
    4b66:	0b b6       	in	r0, 0x3b	; 59
    4b68:	0f 92       	push	r0
    4b6a:	2f 93       	push	r18
    4b6c:	8f 93       	push	r24
    4b6e:	9f 93       	push	r25
    4b70:	af 93       	push	r26
    4b72:	bf 93       	push	r27
    4b74:	ef 93       	push	r30
    4b76:	ff 93       	push	r31
    4b78:	e0 91 95 19 	lds	r30, 0x1995	; 0x801995 <_ser_handle>
    4b7c:	f0 91 96 19 	lds	r31, 0x1996	; 0x801996 <_ser_handle+0x1>
    4b80:	30 97       	sbiw	r30, 0x00	; 0
    4b82:	b9 f0       	breq	.+46     	; 0x4bb2 <__vector_26+0x56>
    4b84:	02 80       	ldd	r0, Z+2	; 0x02
    4b86:	f3 81       	ldd	r31, Z+3	; 0x03
    4b88:	e0 2d       	mov	r30, r0
    4b8a:	93 81       	ldd	r25, Z+3	; 0x03
    4b8c:	82 81       	ldd	r24, Z+2	; 0x02
    4b8e:	98 17       	cp	r25, r24
    4b90:	b1 f0       	breq	.+44     	; 0x4bbe <__vector_26+0x62>
    4b92:	92 81       	ldd	r25, Z+2	; 0x02
    4b94:	85 81       	ldd	r24, Z+5	; 0x05
    4b96:	28 2f       	mov	r18, r24
    4b98:	26 95       	lsr	r18
    4b9a:	29 23       	and	r18, r25
    4b9c:	a0 81       	ld	r26, Z
    4b9e:	b1 81       	ldd	r27, Z+1	; 0x01
    4ba0:	a2 0f       	add	r26, r18
    4ba2:	b1 1d       	adc	r27, r1
    4ba4:	2c 91       	ld	r18, X
    4ba6:	9f 5f       	subi	r25, 0xFF	; 255
    4ba8:	89 23       	and	r24, r25
    4baa:	82 83       	std	Z+2, r24	; 0x02
    4bac:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4bb0:	0b c0       	rjmp	.+22     	; 0x4bc8 <__vector_26+0x6c>
    4bb2:	e1 ec       	ldi	r30, 0xC1	; 193
    4bb4:	f0 e0       	ldi	r31, 0x00	; 0
    4bb6:	80 81       	ld	r24, Z
    4bb8:	8f 7d       	andi	r24, 0xDF	; 223
    4bba:	80 83       	st	Z, r24
    4bbc:	05 c0       	rjmp	.+10     	; 0x4bc8 <__vector_26+0x6c>
    4bbe:	e1 ec       	ldi	r30, 0xC1	; 193
    4bc0:	f0 e0       	ldi	r31, 0x00	; 0
    4bc2:	80 81       	ld	r24, Z
    4bc4:	8f 7d       	andi	r24, 0xDF	; 223
    4bc6:	80 83       	st	Z, r24
    4bc8:	ff 91       	pop	r31
    4bca:	ef 91       	pop	r30
    4bcc:	bf 91       	pop	r27
    4bce:	af 91       	pop	r26
    4bd0:	9f 91       	pop	r25
    4bd2:	8f 91       	pop	r24
    4bd4:	2f 91       	pop	r18
    4bd6:	0f 90       	pop	r0
    4bd8:	0b be       	out	0x3b, r0	; 59
    4bda:	0f 90       	pop	r0
    4bdc:	0f be       	out	0x3f, r0	; 63
    4bde:	0f 90       	pop	r0
    4be0:	1f 90       	pop	r1
    4be2:	18 95       	reti

00004be4 <__vector_36>:
    4be4:	1f 92       	push	r1
    4be6:	0f 92       	push	r0
    4be8:	0f b6       	in	r0, 0x3f	; 63
    4bea:	0f 92       	push	r0
    4bec:	11 24       	eor	r1, r1
    4bee:	0b b6       	in	r0, 0x3b	; 59
    4bf0:	0f 92       	push	r0
    4bf2:	2f 93       	push	r18
    4bf4:	3f 93       	push	r19
    4bf6:	4f 93       	push	r20
    4bf8:	5f 93       	push	r21
    4bfa:	6f 93       	push	r22
    4bfc:	7f 93       	push	r23
    4bfe:	8f 93       	push	r24
    4c00:	9f 93       	push	r25
    4c02:	af 93       	push	r26
    4c04:	bf 93       	push	r27
    4c06:	cf 93       	push	r28
    4c08:	df 93       	push	r29
    4c0a:	ef 93       	push	r30
    4c0c:	ff 93       	push	r31
    4c0e:	a0 91 97 19 	lds	r26, 0x1997	; 0x801997 <_ser_handle+0x2>
    4c12:	b0 91 98 19 	lds	r27, 0x1998	; 0x801998 <_ser_handle+0x3>
    4c16:	10 97       	sbiw	r26, 0x00	; 0
    4c18:	11 f1       	breq	.+68     	; 0x4c5e <__vector_36+0x7a>
    4c1a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4c1e:	14 96       	adiw	r26, 0x04	; 4
    4c20:	ed 91       	ld	r30, X+
    4c22:	fc 91       	ld	r31, X
    4c24:	15 97       	sbiw	r26, 0x05	; 5
    4c26:	93 81       	ldd	r25, Z+3	; 0x03
    4c28:	82 81       	ldd	r24, Z+2	; 0x02
    4c2a:	25 81       	ldd	r18, Z+5	; 0x05
    4c2c:	98 1b       	sub	r25, r24
    4c2e:	92 23       	and	r25, r18
    4c30:	84 81       	ldd	r24, Z+4	; 0x04
    4c32:	98 17       	cp	r25, r24
    4c34:	61 f0       	breq	.+24     	; 0x4c4e <__vector_36+0x6a>
    4c36:	83 81       	ldd	r24, Z+3	; 0x03
    4c38:	26 95       	lsr	r18
    4c3a:	28 23       	and	r18, r24
    4c3c:	c0 81       	ld	r28, Z
    4c3e:	d1 81       	ldd	r29, Z+1	; 0x01
    4c40:	c2 0f       	add	r28, r18
    4c42:	d1 1d       	adc	r29, r1
    4c44:	68 83       	st	Y, r22
    4c46:	8f 5f       	subi	r24, 0xFF	; 255
    4c48:	95 81       	ldd	r25, Z+5	; 0x05
    4c4a:	89 23       	and	r24, r25
    4c4c:	83 83       	std	Z+3, r24	; 0x03
    4c4e:	16 96       	adiw	r26, 0x06	; 6
    4c50:	ed 91       	ld	r30, X+
    4c52:	fc 91       	ld	r31, X
    4c54:	17 97       	sbiw	r26, 0x07	; 7
    4c56:	30 97       	sbiw	r30, 0x00	; 0
    4c58:	11 f0       	breq	.+4      	; 0x4c5e <__vector_36+0x7a>
    4c5a:	cd 01       	movw	r24, r26
    4c5c:	19 95       	eicall
    4c5e:	ff 91       	pop	r31
    4c60:	ef 91       	pop	r30
    4c62:	df 91       	pop	r29
    4c64:	cf 91       	pop	r28
    4c66:	bf 91       	pop	r27
    4c68:	af 91       	pop	r26
    4c6a:	9f 91       	pop	r25
    4c6c:	8f 91       	pop	r24
    4c6e:	7f 91       	pop	r23
    4c70:	6f 91       	pop	r22
    4c72:	5f 91       	pop	r21
    4c74:	4f 91       	pop	r20
    4c76:	3f 91       	pop	r19
    4c78:	2f 91       	pop	r18
    4c7a:	0f 90       	pop	r0
    4c7c:	0b be       	out	0x3b, r0	; 59
    4c7e:	0f 90       	pop	r0
    4c80:	0f be       	out	0x3f, r0	; 63
    4c82:	0f 90       	pop	r0
    4c84:	1f 90       	pop	r1
    4c86:	18 95       	reti

00004c88 <__vector_37>:
    4c88:	1f 92       	push	r1
    4c8a:	0f 92       	push	r0
    4c8c:	0f b6       	in	r0, 0x3f	; 63
    4c8e:	0f 92       	push	r0
    4c90:	11 24       	eor	r1, r1
    4c92:	0b b6       	in	r0, 0x3b	; 59
    4c94:	0f 92       	push	r0
    4c96:	2f 93       	push	r18
    4c98:	8f 93       	push	r24
    4c9a:	9f 93       	push	r25
    4c9c:	af 93       	push	r26
    4c9e:	bf 93       	push	r27
    4ca0:	ef 93       	push	r30
    4ca2:	ff 93       	push	r31
    4ca4:	e0 91 97 19 	lds	r30, 0x1997	; 0x801997 <_ser_handle+0x2>
    4ca8:	f0 91 98 19 	lds	r31, 0x1998	; 0x801998 <_ser_handle+0x3>
    4cac:	30 97       	sbiw	r30, 0x00	; 0
    4cae:	b9 f0       	breq	.+46     	; 0x4cde <__vector_37+0x56>
    4cb0:	02 80       	ldd	r0, Z+2	; 0x02
    4cb2:	f3 81       	ldd	r31, Z+3	; 0x03
    4cb4:	e0 2d       	mov	r30, r0
    4cb6:	93 81       	ldd	r25, Z+3	; 0x03
    4cb8:	82 81       	ldd	r24, Z+2	; 0x02
    4cba:	98 17       	cp	r25, r24
    4cbc:	b1 f0       	breq	.+44     	; 0x4cea <__vector_37+0x62>
    4cbe:	92 81       	ldd	r25, Z+2	; 0x02
    4cc0:	85 81       	ldd	r24, Z+5	; 0x05
    4cc2:	28 2f       	mov	r18, r24
    4cc4:	26 95       	lsr	r18
    4cc6:	29 23       	and	r18, r25
    4cc8:	a0 81       	ld	r26, Z
    4cca:	b1 81       	ldd	r27, Z+1	; 0x01
    4ccc:	a2 0f       	add	r26, r18
    4cce:	b1 1d       	adc	r27, r1
    4cd0:	2c 91       	ld	r18, X
    4cd2:	9f 5f       	subi	r25, 0xFF	; 255
    4cd4:	89 23       	and	r24, r25
    4cd6:	82 83       	std	Z+2, r24	; 0x02
    4cd8:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4cdc:	0b c0       	rjmp	.+22     	; 0x4cf4 <__vector_37+0x6c>
    4cde:	e9 ec       	ldi	r30, 0xC9	; 201
    4ce0:	f0 e0       	ldi	r31, 0x00	; 0
    4ce2:	80 81       	ld	r24, Z
    4ce4:	8f 7d       	andi	r24, 0xDF	; 223
    4ce6:	80 83       	st	Z, r24
    4ce8:	05 c0       	rjmp	.+10     	; 0x4cf4 <__vector_37+0x6c>
    4cea:	e9 ec       	ldi	r30, 0xC9	; 201
    4cec:	f0 e0       	ldi	r31, 0x00	; 0
    4cee:	80 81       	ld	r24, Z
    4cf0:	8f 7d       	andi	r24, 0xDF	; 223
    4cf2:	80 83       	st	Z, r24
    4cf4:	ff 91       	pop	r31
    4cf6:	ef 91       	pop	r30
    4cf8:	bf 91       	pop	r27
    4cfa:	af 91       	pop	r26
    4cfc:	9f 91       	pop	r25
    4cfe:	8f 91       	pop	r24
    4d00:	2f 91       	pop	r18
    4d02:	0f 90       	pop	r0
    4d04:	0b be       	out	0x3b, r0	; 59
    4d06:	0f 90       	pop	r0
    4d08:	0f be       	out	0x3f, r0	; 63
    4d0a:	0f 90       	pop	r0
    4d0c:	1f 90       	pop	r1
    4d0e:	18 95       	reti

00004d10 <__vector_51>:
    4d10:	1f 92       	push	r1
    4d12:	0f 92       	push	r0
    4d14:	0f b6       	in	r0, 0x3f	; 63
    4d16:	0f 92       	push	r0
    4d18:	11 24       	eor	r1, r1
    4d1a:	0b b6       	in	r0, 0x3b	; 59
    4d1c:	0f 92       	push	r0
    4d1e:	2f 93       	push	r18
    4d20:	3f 93       	push	r19
    4d22:	4f 93       	push	r20
    4d24:	5f 93       	push	r21
    4d26:	6f 93       	push	r22
    4d28:	7f 93       	push	r23
    4d2a:	8f 93       	push	r24
    4d2c:	9f 93       	push	r25
    4d2e:	af 93       	push	r26
    4d30:	bf 93       	push	r27
    4d32:	cf 93       	push	r28
    4d34:	df 93       	push	r29
    4d36:	ef 93       	push	r30
    4d38:	ff 93       	push	r31
    4d3a:	a0 91 99 19 	lds	r26, 0x1999	; 0x801999 <_ser_handle+0x4>
    4d3e:	b0 91 9a 19 	lds	r27, 0x199A	; 0x80199a <_ser_handle+0x5>
    4d42:	10 97       	sbiw	r26, 0x00	; 0
    4d44:	11 f1       	breq	.+68     	; 0x4d8a <__vector_51+0x7a>
    4d46:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4d4a:	14 96       	adiw	r26, 0x04	; 4
    4d4c:	ed 91       	ld	r30, X+
    4d4e:	fc 91       	ld	r31, X
    4d50:	15 97       	sbiw	r26, 0x05	; 5
    4d52:	93 81       	ldd	r25, Z+3	; 0x03
    4d54:	82 81       	ldd	r24, Z+2	; 0x02
    4d56:	25 81       	ldd	r18, Z+5	; 0x05
    4d58:	98 1b       	sub	r25, r24
    4d5a:	92 23       	and	r25, r18
    4d5c:	84 81       	ldd	r24, Z+4	; 0x04
    4d5e:	98 17       	cp	r25, r24
    4d60:	61 f0       	breq	.+24     	; 0x4d7a <__vector_51+0x6a>
    4d62:	83 81       	ldd	r24, Z+3	; 0x03
    4d64:	26 95       	lsr	r18
    4d66:	28 23       	and	r18, r24
    4d68:	c0 81       	ld	r28, Z
    4d6a:	d1 81       	ldd	r29, Z+1	; 0x01
    4d6c:	c2 0f       	add	r28, r18
    4d6e:	d1 1d       	adc	r29, r1
    4d70:	68 83       	st	Y, r22
    4d72:	8f 5f       	subi	r24, 0xFF	; 255
    4d74:	95 81       	ldd	r25, Z+5	; 0x05
    4d76:	89 23       	and	r24, r25
    4d78:	83 83       	std	Z+3, r24	; 0x03
    4d7a:	16 96       	adiw	r26, 0x06	; 6
    4d7c:	ed 91       	ld	r30, X+
    4d7e:	fc 91       	ld	r31, X
    4d80:	17 97       	sbiw	r26, 0x07	; 7
    4d82:	30 97       	sbiw	r30, 0x00	; 0
    4d84:	11 f0       	breq	.+4      	; 0x4d8a <__vector_51+0x7a>
    4d86:	cd 01       	movw	r24, r26
    4d88:	19 95       	eicall
    4d8a:	ff 91       	pop	r31
    4d8c:	ef 91       	pop	r30
    4d8e:	df 91       	pop	r29
    4d90:	cf 91       	pop	r28
    4d92:	bf 91       	pop	r27
    4d94:	af 91       	pop	r26
    4d96:	9f 91       	pop	r25
    4d98:	8f 91       	pop	r24
    4d9a:	7f 91       	pop	r23
    4d9c:	6f 91       	pop	r22
    4d9e:	5f 91       	pop	r21
    4da0:	4f 91       	pop	r20
    4da2:	3f 91       	pop	r19
    4da4:	2f 91       	pop	r18
    4da6:	0f 90       	pop	r0
    4da8:	0b be       	out	0x3b, r0	; 59
    4daa:	0f 90       	pop	r0
    4dac:	0f be       	out	0x3f, r0	; 63
    4dae:	0f 90       	pop	r0
    4db0:	1f 90       	pop	r1
    4db2:	18 95       	reti

00004db4 <__vector_52>:
    4db4:	1f 92       	push	r1
    4db6:	0f 92       	push	r0
    4db8:	0f b6       	in	r0, 0x3f	; 63
    4dba:	0f 92       	push	r0
    4dbc:	11 24       	eor	r1, r1
    4dbe:	0b b6       	in	r0, 0x3b	; 59
    4dc0:	0f 92       	push	r0
    4dc2:	2f 93       	push	r18
    4dc4:	8f 93       	push	r24
    4dc6:	9f 93       	push	r25
    4dc8:	af 93       	push	r26
    4dca:	bf 93       	push	r27
    4dcc:	ef 93       	push	r30
    4dce:	ff 93       	push	r31
    4dd0:	e0 91 99 19 	lds	r30, 0x1999	; 0x801999 <_ser_handle+0x4>
    4dd4:	f0 91 9a 19 	lds	r31, 0x199A	; 0x80199a <_ser_handle+0x5>
    4dd8:	30 97       	sbiw	r30, 0x00	; 0
    4dda:	b9 f0       	breq	.+46     	; 0x4e0a <__vector_52+0x56>
    4ddc:	02 80       	ldd	r0, Z+2	; 0x02
    4dde:	f3 81       	ldd	r31, Z+3	; 0x03
    4de0:	e0 2d       	mov	r30, r0
    4de2:	93 81       	ldd	r25, Z+3	; 0x03
    4de4:	82 81       	ldd	r24, Z+2	; 0x02
    4de6:	98 17       	cp	r25, r24
    4de8:	b1 f0       	breq	.+44     	; 0x4e16 <__vector_52+0x62>
    4dea:	92 81       	ldd	r25, Z+2	; 0x02
    4dec:	85 81       	ldd	r24, Z+5	; 0x05
    4dee:	28 2f       	mov	r18, r24
    4df0:	26 95       	lsr	r18
    4df2:	29 23       	and	r18, r25
    4df4:	a0 81       	ld	r26, Z
    4df6:	b1 81       	ldd	r27, Z+1	; 0x01
    4df8:	a2 0f       	add	r26, r18
    4dfa:	b1 1d       	adc	r27, r1
    4dfc:	2c 91       	ld	r18, X
    4dfe:	9f 5f       	subi	r25, 0xFF	; 255
    4e00:	89 23       	and	r24, r25
    4e02:	82 83       	std	Z+2, r24	; 0x02
    4e04:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4e08:	0b c0       	rjmp	.+22     	; 0x4e20 <__vector_52+0x6c>
    4e0a:	e1 ed       	ldi	r30, 0xD1	; 209
    4e0c:	f0 e0       	ldi	r31, 0x00	; 0
    4e0e:	80 81       	ld	r24, Z
    4e10:	8f 7d       	andi	r24, 0xDF	; 223
    4e12:	80 83       	st	Z, r24
    4e14:	05 c0       	rjmp	.+10     	; 0x4e20 <__vector_52+0x6c>
    4e16:	e1 ed       	ldi	r30, 0xD1	; 209
    4e18:	f0 e0       	ldi	r31, 0x00	; 0
    4e1a:	80 81       	ld	r24, Z
    4e1c:	8f 7d       	andi	r24, 0xDF	; 223
    4e1e:	80 83       	st	Z, r24
    4e20:	ff 91       	pop	r31
    4e22:	ef 91       	pop	r30
    4e24:	bf 91       	pop	r27
    4e26:	af 91       	pop	r26
    4e28:	9f 91       	pop	r25
    4e2a:	8f 91       	pop	r24
    4e2c:	2f 91       	pop	r18
    4e2e:	0f 90       	pop	r0
    4e30:	0b be       	out	0x3b, r0	; 59
    4e32:	0f 90       	pop	r0
    4e34:	0f be       	out	0x3f, r0	; 63
    4e36:	0f 90       	pop	r0
    4e38:	1f 90       	pop	r1
    4e3a:	18 95       	reti

00004e3c <__vector_54>:
    4e3c:	1f 92       	push	r1
    4e3e:	0f 92       	push	r0
    4e40:	0f b6       	in	r0, 0x3f	; 63
    4e42:	0f 92       	push	r0
    4e44:	11 24       	eor	r1, r1
    4e46:	0b b6       	in	r0, 0x3b	; 59
    4e48:	0f 92       	push	r0
    4e4a:	2f 93       	push	r18
    4e4c:	3f 93       	push	r19
    4e4e:	4f 93       	push	r20
    4e50:	5f 93       	push	r21
    4e52:	6f 93       	push	r22
    4e54:	7f 93       	push	r23
    4e56:	8f 93       	push	r24
    4e58:	9f 93       	push	r25
    4e5a:	af 93       	push	r26
    4e5c:	bf 93       	push	r27
    4e5e:	cf 93       	push	r28
    4e60:	df 93       	push	r29
    4e62:	ef 93       	push	r30
    4e64:	ff 93       	push	r31
    4e66:	a0 91 9b 19 	lds	r26, 0x199B	; 0x80199b <_ser_handle+0x6>
    4e6a:	b0 91 9c 19 	lds	r27, 0x199C	; 0x80199c <_ser_handle+0x7>
    4e6e:	10 97       	sbiw	r26, 0x00	; 0
    4e70:	11 f1       	breq	.+68     	; 0x4eb6 <__vector_54+0x7a>
    4e72:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4e76:	14 96       	adiw	r26, 0x04	; 4
    4e78:	ed 91       	ld	r30, X+
    4e7a:	fc 91       	ld	r31, X
    4e7c:	15 97       	sbiw	r26, 0x05	; 5
    4e7e:	93 81       	ldd	r25, Z+3	; 0x03
    4e80:	82 81       	ldd	r24, Z+2	; 0x02
    4e82:	25 81       	ldd	r18, Z+5	; 0x05
    4e84:	98 1b       	sub	r25, r24
    4e86:	92 23       	and	r25, r18
    4e88:	84 81       	ldd	r24, Z+4	; 0x04
    4e8a:	98 17       	cp	r25, r24
    4e8c:	61 f0       	breq	.+24     	; 0x4ea6 <__vector_54+0x6a>
    4e8e:	83 81       	ldd	r24, Z+3	; 0x03
    4e90:	26 95       	lsr	r18
    4e92:	28 23       	and	r18, r24
    4e94:	c0 81       	ld	r28, Z
    4e96:	d1 81       	ldd	r29, Z+1	; 0x01
    4e98:	c2 0f       	add	r28, r18
    4e9a:	d1 1d       	adc	r29, r1
    4e9c:	68 83       	st	Y, r22
    4e9e:	8f 5f       	subi	r24, 0xFF	; 255
    4ea0:	95 81       	ldd	r25, Z+5	; 0x05
    4ea2:	89 23       	and	r24, r25
    4ea4:	83 83       	std	Z+3, r24	; 0x03
    4ea6:	16 96       	adiw	r26, 0x06	; 6
    4ea8:	ed 91       	ld	r30, X+
    4eaa:	fc 91       	ld	r31, X
    4eac:	17 97       	sbiw	r26, 0x07	; 7
    4eae:	30 97       	sbiw	r30, 0x00	; 0
    4eb0:	11 f0       	breq	.+4      	; 0x4eb6 <__vector_54+0x7a>
    4eb2:	cd 01       	movw	r24, r26
    4eb4:	19 95       	eicall
    4eb6:	ff 91       	pop	r31
    4eb8:	ef 91       	pop	r30
    4eba:	df 91       	pop	r29
    4ebc:	cf 91       	pop	r28
    4ebe:	bf 91       	pop	r27
    4ec0:	af 91       	pop	r26
    4ec2:	9f 91       	pop	r25
    4ec4:	8f 91       	pop	r24
    4ec6:	7f 91       	pop	r23
    4ec8:	6f 91       	pop	r22
    4eca:	5f 91       	pop	r21
    4ecc:	4f 91       	pop	r20
    4ece:	3f 91       	pop	r19
    4ed0:	2f 91       	pop	r18
    4ed2:	0f 90       	pop	r0
    4ed4:	0b be       	out	0x3b, r0	; 59
    4ed6:	0f 90       	pop	r0
    4ed8:	0f be       	out	0x3f, r0	; 63
    4eda:	0f 90       	pop	r0
    4edc:	1f 90       	pop	r1
    4ede:	18 95       	reti

00004ee0 <__vector_55>:
    4ee0:	1f 92       	push	r1
    4ee2:	0f 92       	push	r0
    4ee4:	0f b6       	in	r0, 0x3f	; 63
    4ee6:	0f 92       	push	r0
    4ee8:	11 24       	eor	r1, r1
    4eea:	0b b6       	in	r0, 0x3b	; 59
    4eec:	0f 92       	push	r0
    4eee:	2f 93       	push	r18
    4ef0:	8f 93       	push	r24
    4ef2:	9f 93       	push	r25
    4ef4:	af 93       	push	r26
    4ef6:	bf 93       	push	r27
    4ef8:	ef 93       	push	r30
    4efa:	ff 93       	push	r31
    4efc:	e0 91 9b 19 	lds	r30, 0x199B	; 0x80199b <_ser_handle+0x6>
    4f00:	f0 91 9c 19 	lds	r31, 0x199C	; 0x80199c <_ser_handle+0x7>
    4f04:	30 97       	sbiw	r30, 0x00	; 0
    4f06:	b9 f0       	breq	.+46     	; 0x4f36 <__vector_55+0x56>
    4f08:	02 80       	ldd	r0, Z+2	; 0x02
    4f0a:	f3 81       	ldd	r31, Z+3	; 0x03
    4f0c:	e0 2d       	mov	r30, r0
    4f0e:	93 81       	ldd	r25, Z+3	; 0x03
    4f10:	82 81       	ldd	r24, Z+2	; 0x02
    4f12:	98 17       	cp	r25, r24
    4f14:	b1 f0       	breq	.+44     	; 0x4f42 <__vector_55+0x62>
    4f16:	92 81       	ldd	r25, Z+2	; 0x02
    4f18:	85 81       	ldd	r24, Z+5	; 0x05
    4f1a:	28 2f       	mov	r18, r24
    4f1c:	26 95       	lsr	r18
    4f1e:	29 23       	and	r18, r25
    4f20:	a0 81       	ld	r26, Z
    4f22:	b1 81       	ldd	r27, Z+1	; 0x01
    4f24:	a2 0f       	add	r26, r18
    4f26:	b1 1d       	adc	r27, r1
    4f28:	2c 91       	ld	r18, X
    4f2a:	9f 5f       	subi	r25, 0xFF	; 255
    4f2c:	89 23       	and	r24, r25
    4f2e:	82 83       	std	Z+2, r24	; 0x02
    4f30:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4f34:	0b c0       	rjmp	.+22     	; 0x4f4c <__vector_55+0x6c>
    4f36:	e1 e3       	ldi	r30, 0x31	; 49
    4f38:	f1 e0       	ldi	r31, 0x01	; 1
    4f3a:	80 81       	ld	r24, Z
    4f3c:	8f 7d       	andi	r24, 0xDF	; 223
    4f3e:	80 83       	st	Z, r24
    4f40:	05 c0       	rjmp	.+10     	; 0x4f4c <__vector_55+0x6c>
    4f42:	e1 e3       	ldi	r30, 0x31	; 49
    4f44:	f1 e0       	ldi	r31, 0x01	; 1
    4f46:	80 81       	ld	r24, Z
    4f48:	8f 7d       	andi	r24, 0xDF	; 223
    4f4a:	80 83       	st	Z, r24
    4f4c:	ff 91       	pop	r31
    4f4e:	ef 91       	pop	r30
    4f50:	bf 91       	pop	r27
    4f52:	af 91       	pop	r26
    4f54:	9f 91       	pop	r25
    4f56:	8f 91       	pop	r24
    4f58:	2f 91       	pop	r18
    4f5a:	0f 90       	pop	r0
    4f5c:	0b be       	out	0x3b, r0	; 59
    4f5e:	0f 90       	pop	r0
    4f60:	0f be       	out	0x3f, r0	; 63
    4f62:	0f 90       	pop	r0
    4f64:	1f 90       	pop	r1
    4f66:	18 95       	reti

00004f68 <usart_getchar>:
    4f68:	cf 93       	push	r28
    4f6a:	df 93       	push	r29
    4f6c:	1f 92       	push	r1
    4f6e:	cd b7       	in	r28, 0x3d	; 61
    4f70:	de b7       	in	r29, 0x3e	; 62
    4f72:	be 01       	movw	r22, r28
    4f74:	6f 5f       	subi	r22, 0xFF	; 255
    4f76:	7f 4f       	sbci	r23, 0xFF	; 255
    4f78:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <_com_serial_instance>
    4f7c:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <_com_serial_instance+0x1>
    4f80:	7f dd       	rcall	.-1282   	; 0x4a80 <serial_get_byte>
    4f82:	81 11       	cpse	r24, r1
    4f84:	f6 cf       	rjmp	.-20     	; 0x4f72 <usart_getchar+0xa>
    4f86:	89 81       	ldd	r24, Y+1	; 0x01
    4f88:	90 e0       	ldi	r25, 0x00	; 0
    4f8a:	0f 90       	pop	r0
    4f8c:	df 91       	pop	r29
    4f8e:	cf 91       	pop	r28
    4f90:	08 95       	ret

00004f92 <usart_putchar>:
    4f92:	68 2f       	mov	r22, r24
    4f94:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <_com_serial_instance>
    4f98:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <_com_serial_instance+0x1>
    4f9c:	fc dc       	rcall	.-1544   	; 0x4996 <serial_send_byte>
    4f9e:	80 e0       	ldi	r24, 0x00	; 0
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
    4fa2:	08 95       	ret

00004fa4 <stdioCreate>:
    4fa4:	8f 92       	push	r8
    4fa6:	9f 92       	push	r9
    4fa8:	af 92       	push	r10
    4faa:	cf 92       	push	r12
    4fac:	ef 92       	push	r14
    4fae:	0f 93       	push	r16
    4fb0:	81 2c       	mov	r8, r1
    4fb2:	91 2c       	mov	r9, r1
    4fb4:	68 94       	set
    4fb6:	aa 24       	eor	r10, r10
    4fb8:	a7 f8       	bld	r10, 7
    4fba:	68 94       	set
    4fbc:	cc 24       	eor	r12, r12
    4fbe:	c7 f8       	bld	r12, 7
    4fc0:	e1 2c       	mov	r14, r1
    4fc2:	00 e0       	ldi	r16, 0x00	; 0
    4fc4:	23 e0       	ldi	r18, 0x03	; 3
    4fc6:	40 e0       	ldi	r20, 0x00	; 0
    4fc8:	51 ee       	ldi	r21, 0xE1	; 225
    4fca:	60 e0       	ldi	r22, 0x00	; 0
    4fcc:	70 e0       	ldi	r23, 0x00	; 0
    4fce:	4c dc       	rcall	.-1896   	; 0x4868 <serial_new_instance>
    4fd0:	90 93 9e 19 	sts	0x199E, r25	; 0x80199e <_com_serial_instance+0x1>
    4fd4:	80 93 9d 19 	sts	0x199D, r24	; 0x80199d <_com_serial_instance>
    4fd8:	e1 e1       	ldi	r30, 0x11	; 17
    4fda:	fa e1       	ldi	r31, 0x1A	; 26
    4fdc:	83 e1       	ldi	r24, 0x13	; 19
    4fde:	92 e0       	ldi	r25, 0x02	; 2
    4fe0:	91 83       	std	Z+1, r25	; 0x01
    4fe2:	80 83       	st	Z, r24
    4fe4:	93 83       	std	Z+3, r25	; 0x03
    4fe6:	82 83       	std	Z+2, r24	; 0x02
    4fe8:	0f 91       	pop	r16
    4fea:	ef 90       	pop	r14
    4fec:	cf 90       	pop	r12
    4fee:	af 90       	pop	r10
    4ff0:	9f 90       	pop	r9
    4ff2:	8f 90       	pop	r8
    4ff4:	08 95       	ret

00004ff6 <_initTwiInterface>:
    4ff6:	80 91 ad 19 	lds	r24, 0x19AD	; 0x8019ad <_twiIsInitiated>
    4ffa:	81 11       	cpse	r24, r1
    4ffc:	0c c0       	rjmp	.+24     	; 0x5016 <_initTwiInterface+0x20>
    4ffe:	8c e0       	ldi	r24, 0x0C	; 12
    5000:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5004:	8f ef       	ldi	r24, 0xFF	; 255
    5006:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    500a:	84 e0       	ldi	r24, 0x04	; 4
    500c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5010:	81 e0       	ldi	r24, 0x01	; 1
    5012:	80 93 ad 19 	sts	0x19AD, r24	; 0x8019ad <_twiIsInitiated>
    5016:	08 95       	ret

00005018 <twiCreate>:
    5018:	af 92       	push	r10
    501a:	bf 92       	push	r11
    501c:	cf 92       	push	r12
    501e:	df 92       	push	r13
    5020:	ef 92       	push	r14
    5022:	ff 92       	push	r15
    5024:	0f 93       	push	r16
    5026:	1f 93       	push	r17
    5028:	cf 93       	push	r28
    502a:	df 93       	push	r29
    502c:	a8 2e       	mov	r10, r24
    502e:	b6 2e       	mov	r11, r22
    5030:	69 01       	movw	r12, r18
    5032:	7a 01       	movw	r14, r20
    5034:	84 e0       	ldi	r24, 0x04	; 4
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	79 d3       	rcall	.+1778   	; 0x572c <malloc>
    503a:	ec 01       	movw	r28, r24
    503c:	89 2b       	or	r24, r25
    503e:	61 f1       	breq	.+88     	; 0x5098 <twiCreate+0x80>
    5040:	a8 82       	st	Y, r10
    5042:	81 e0       	ldi	r24, 0x01	; 1
    5044:	b8 12       	cpse	r11, r24
    5046:	12 c0       	rjmp	.+36     	; 0x506c <twiCreate+0x54>
    5048:	c7 01       	movw	r24, r14
    504a:	b6 01       	movw	r22, r12
    504c:	20 ea       	ldi	r18, 0xA0	; 160
    504e:	36 e8       	ldi	r19, 0x86	; 134
    5050:	41 e0       	ldi	r20, 0x01	; 1
    5052:	50 e0       	ldi	r21, 0x00	; 0
    5054:	27 d3       	rcall	.+1614   	; 0x56a4 <__udivmodsi4>
    5056:	da 01       	movw	r26, r20
    5058:	c9 01       	movw	r24, r18
    505a:	40 97       	sbiw	r24, 0x10	; 16
    505c:	a1 09       	sbc	r26, r1
    505e:	b1 09       	sbc	r27, r1
    5060:	b6 95       	lsr	r27
    5062:	a7 95       	ror	r26
    5064:	97 95       	ror	r25
    5066:	87 95       	ror	r24
    5068:	89 83       	std	Y+1, r24	; 0x01
    506a:	11 c0       	rjmp	.+34     	; 0x508e <twiCreate+0x76>
    506c:	c7 01       	movw	r24, r14
    506e:	b6 01       	movw	r22, r12
    5070:	20 e8       	ldi	r18, 0x80	; 128
    5072:	3a e1       	ldi	r19, 0x1A	; 26
    5074:	46 e0       	ldi	r20, 0x06	; 6
    5076:	50 e0       	ldi	r21, 0x00	; 0
    5078:	15 d3       	rcall	.+1578   	; 0x56a4 <__udivmodsi4>
    507a:	da 01       	movw	r26, r20
    507c:	c9 01       	movw	r24, r18
    507e:	40 97       	sbiw	r24, 0x10	; 16
    5080:	a1 09       	sbc	r26, r1
    5082:	b1 09       	sbc	r27, r1
    5084:	b6 95       	lsr	r27
    5086:	a7 95       	ror	r26
    5088:	97 95       	ror	r25
    508a:	87 95       	ror	r24
    508c:	89 83       	std	Y+1, r24	; 0x01
    508e:	1b 83       	std	Y+3, r17	; 0x03
    5090:	0a 83       	std	Y+2, r16	; 0x02
    5092:	8c 2f       	mov	r24, r28
    5094:	9d 2f       	mov	r25, r29
    5096:	02 c0       	rjmp	.+4      	; 0x509c <twiCreate+0x84>
    5098:	80 e0       	ldi	r24, 0x00	; 0
    509a:	90 e0       	ldi	r25, 0x00	; 0
    509c:	df 91       	pop	r29
    509e:	cf 91       	pop	r28
    50a0:	1f 91       	pop	r17
    50a2:	0f 91       	pop	r16
    50a4:	ff 90       	pop	r15
    50a6:	ef 90       	pop	r14
    50a8:	df 90       	pop	r13
    50aa:	cf 90       	pop	r12
    50ac:	bf 90       	pop	r11
    50ae:	af 90       	pop	r10
    50b0:	08 95       	ret

000050b2 <twiIsBusy>:
    50b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    50b6:	81 70       	andi	r24, 0x01	; 1
    50b8:	08 95       	ret

000050ba <twiTransmit>:
    50ba:	ff 92       	push	r15
    50bc:	0f 93       	push	r16
    50be:	1f 93       	push	r17
    50c0:	cf 93       	push	r28
    50c2:	df 93       	push	r29
    50c4:	00 97       	sbiw	r24, 0x00	; 0
    50c6:	d1 f1       	breq	.+116    	; 0x513c <twiTransmit+0x82>
    50c8:	4a 30       	cpi	r20, 0x0A	; 10
    50ca:	d0 f5       	brcc	.+116    	; 0x5140 <twiTransmit+0x86>
    50cc:	f4 2e       	mov	r15, r20
    50ce:	8b 01       	movw	r16, r22
    50d0:	ec 01       	movw	r28, r24
    50d2:	ef df       	rcall	.-34     	; 0x50b2 <twiIsBusy>
    50d4:	81 11       	cpse	r24, r1
    50d6:	36 c0       	rjmp	.+108    	; 0x5144 <twiTransmit+0x8a>
    50d8:	80 91 a0 19 	lds	r24, 0x19A0	; 0x8019a0 <_twiCurrentHandler>
    50dc:	90 91 a1 19 	lds	r25, 0x19A1	; 0x8019a1 <_twiCurrentHandler+0x1>
    50e0:	c8 17       	cp	r28, r24
    50e2:	d9 07       	cpc	r29, r25
    50e4:	41 f0       	breq	.+16     	; 0x50f6 <twiTransmit+0x3c>
    50e6:	87 df       	rcall	.-242    	; 0x4ff6 <_initTwiInterface>
    50e8:	89 81       	ldd	r24, Y+1	; 0x01
    50ea:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    50ee:	d0 93 a1 19 	sts	0x19A1, r29	; 0x8019a1 <_twiCurrentHandler+0x1>
    50f2:	c0 93 a0 19 	sts	0x19A0, r28	; 0x8019a0 <_twiCurrentHandler>
    50f6:	81 e0       	ldi	r24, 0x01	; 1
    50f8:	8f 0d       	add	r24, r15
    50fa:	80 93 a2 19 	sts	0x19A2, r24	; 0x8019a2 <_twiMessageLen>
    50fe:	88 81       	ld	r24, Y
    5100:	88 0f       	add	r24, r24
    5102:	80 93 a3 19 	sts	0x19A3, r24	; 0x8019a3 <_twiMessageBuffer>
    5106:	ff 20       	and	r15, r15
    5108:	89 f0       	breq	.+34     	; 0x512c <twiTransmit+0x72>
    510a:	f8 01       	movw	r30, r16
    510c:	a4 ea       	ldi	r26, 0xA4	; 164
    510e:	b9 e1       	ldi	r27, 0x19	; 25
    5110:	4f ef       	ldi	r20, 0xFF	; 255
    5112:	4f 0d       	add	r20, r15
    5114:	64 2f       	mov	r22, r20
    5116:	70 e0       	ldi	r23, 0x00	; 0
    5118:	cb 01       	movw	r24, r22
    511a:	01 96       	adiw	r24, 0x01	; 1
    511c:	b8 01       	movw	r22, r16
    511e:	68 0f       	add	r22, r24
    5120:	79 1f       	adc	r23, r25
    5122:	81 91       	ld	r24, Z+
    5124:	8d 93       	st	X+, r24
    5126:	e6 17       	cp	r30, r22
    5128:	f7 07       	cpc	r31, r23
    512a:	d9 f7       	brne	.-10     	; 0x5122 <twiTransmit+0x68>
    512c:	88 ef       	ldi	r24, 0xF8	; 248
    512e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5132:	85 ea       	ldi	r24, 0xA5	; 165
    5134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5138:	84 e0       	ldi	r24, 0x04	; 4
    513a:	05 c0       	rjmp	.+10     	; 0x5146 <twiTransmit+0x8c>
    513c:	86 e0       	ldi	r24, 0x06	; 6
    513e:	03 c0       	rjmp	.+6      	; 0x5146 <twiTransmit+0x8c>
    5140:	87 e0       	ldi	r24, 0x07	; 7
    5142:	01 c0       	rjmp	.+2      	; 0x5146 <twiTransmit+0x8c>
    5144:	82 e0       	ldi	r24, 0x02	; 2
    5146:	df 91       	pop	r29
    5148:	cf 91       	pop	r28
    514a:	1f 91       	pop	r17
    514c:	0f 91       	pop	r16
    514e:	ff 90       	pop	r15
    5150:	08 95       	ret

00005152 <twiReceive>:
    5152:	1f 93       	push	r17
    5154:	cf 93       	push	r28
    5156:	df 93       	push	r29
    5158:	00 97       	sbiw	r24, 0x00	; 0
    515a:	29 f1       	breq	.+74     	; 0x51a6 <twiReceive+0x54>
    515c:	6b 30       	cpi	r22, 0x0B	; 11
    515e:	28 f5       	brcc	.+74     	; 0x51aa <twiReceive+0x58>
    5160:	16 2f       	mov	r17, r22
    5162:	ec 01       	movw	r28, r24
    5164:	a6 df       	rcall	.-180    	; 0x50b2 <twiIsBusy>
    5166:	81 11       	cpse	r24, r1
    5168:	22 c0       	rjmp	.+68     	; 0x51ae <twiReceive+0x5c>
    516a:	80 91 a0 19 	lds	r24, 0x19A0	; 0x8019a0 <_twiCurrentHandler>
    516e:	90 91 a1 19 	lds	r25, 0x19A1	; 0x8019a1 <_twiCurrentHandler+0x1>
    5172:	c8 17       	cp	r28, r24
    5174:	d9 07       	cpc	r29, r25
    5176:	41 f0       	breq	.+16     	; 0x5188 <twiReceive+0x36>
    5178:	3e df       	rcall	.-388    	; 0x4ff6 <_initTwiInterface>
    517a:	89 81       	ldd	r24, Y+1	; 0x01
    517c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5180:	d0 93 a1 19 	sts	0x19A1, r29	; 0x8019a1 <_twiCurrentHandler+0x1>
    5184:	c0 93 a0 19 	sts	0x19A0, r28	; 0x8019a0 <_twiCurrentHandler>
    5188:	10 93 a2 19 	sts	0x19A2, r17	; 0x8019a2 <_twiMessageLen>
    518c:	88 81       	ld	r24, Y
    518e:	88 0f       	add	r24, r24
    5190:	81 60       	ori	r24, 0x01	; 1
    5192:	80 93 a3 19 	sts	0x19A3, r24	; 0x8019a3 <_twiMessageBuffer>
    5196:	88 ef       	ldi	r24, 0xF8	; 248
    5198:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    519c:	85 ea       	ldi	r24, 0xA5	; 165
    519e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    51a2:	85 e0       	ldi	r24, 0x05	; 5
    51a4:	05 c0       	rjmp	.+10     	; 0x51b0 <twiReceive+0x5e>
    51a6:	86 e0       	ldi	r24, 0x06	; 6
    51a8:	03 c0       	rjmp	.+6      	; 0x51b0 <twiReceive+0x5e>
    51aa:	87 e0       	ldi	r24, 0x07	; 7
    51ac:	01 c0       	rjmp	.+2      	; 0x51b0 <twiReceive+0x5e>
    51ae:	82 e0       	ldi	r24, 0x02	; 2
    51b0:	df 91       	pop	r29
    51b2:	cf 91       	pop	r28
    51b4:	1f 91       	pop	r17
    51b6:	08 95       	ret

000051b8 <__vector_39>:
    51b8:	1f 92       	push	r1
    51ba:	0f 92       	push	r0
    51bc:	0f b6       	in	r0, 0x3f	; 63
    51be:	0f 92       	push	r0
    51c0:	11 24       	eor	r1, r1
    51c2:	0b b6       	in	r0, 0x3b	; 59
    51c4:	0f 92       	push	r0
    51c6:	2f 93       	push	r18
    51c8:	3f 93       	push	r19
    51ca:	4f 93       	push	r20
    51cc:	5f 93       	push	r21
    51ce:	6f 93       	push	r22
    51d0:	7f 93       	push	r23
    51d2:	8f 93       	push	r24
    51d4:	9f 93       	push	r25
    51d6:	af 93       	push	r26
    51d8:	bf 93       	push	r27
    51da:	ef 93       	push	r30
    51dc:	ff 93       	push	r31
    51de:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    51e2:	8e 2f       	mov	r24, r30
    51e4:	90 e0       	ldi	r25, 0x00	; 0
    51e6:	fc 01       	movw	r30, r24
    51e8:	38 97       	sbiw	r30, 0x08	; 8
    51ea:	e1 35       	cpi	r30, 0x51	; 81
    51ec:	f1 05       	cpc	r31, r1
    51ee:	08 f0       	brcs	.+2      	; 0x51f2 <__vector_39+0x3a>
    51f0:	75 c0       	rjmp	.+234    	; 0x52dc <__vector_39+0x124>
    51f2:	88 27       	eor	r24, r24
    51f4:	e4 58       	subi	r30, 0x84	; 132
    51f6:	ff 4f       	sbci	r31, 0xFF	; 255
    51f8:	8f 4f       	sbci	r24, 0xFF	; 255
    51fa:	76 c2       	rjmp	.+1260   	; 0x56e8 <__tablejump2__>
    51fc:	10 92 9f 19 	sts	0x199F, r1	; 0x80199f <_index.1885>
    5200:	e0 91 9f 19 	lds	r30, 0x199F	; 0x80199f <_index.1885>
    5204:	80 91 a2 19 	lds	r24, 0x19A2	; 0x8019a2 <_twiMessageLen>
    5208:	e8 17       	cp	r30, r24
    520a:	70 f4       	brcc	.+28     	; 0x5228 <__vector_39+0x70>
    520c:	81 e0       	ldi	r24, 0x01	; 1
    520e:	8e 0f       	add	r24, r30
    5210:	80 93 9f 19 	sts	0x199F, r24	; 0x80199f <_index.1885>
    5214:	f0 e0       	ldi	r31, 0x00	; 0
    5216:	ed 55       	subi	r30, 0x5D	; 93
    5218:	f6 4e       	sbci	r31, 0xE6	; 230
    521a:	80 81       	ld	r24, Z
    521c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5220:	85 e8       	ldi	r24, 0x85	; 133
    5222:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5226:	72 c0       	rjmp	.+228    	; 0x530c <__vector_39+0x154>
    5228:	84 e9       	ldi	r24, 0x94	; 148
    522a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    522e:	80 91 a0 19 	lds	r24, 0x19A0	; 0x8019a0 <_twiCurrentHandler>
    5232:	90 91 a1 19 	lds	r25, 0x19A1	; 0x8019a1 <_twiCurrentHandler+0x1>
    5236:	dc 01       	movw	r26, r24
    5238:	12 96       	adiw	r26, 0x02	; 2
    523a:	ed 91       	ld	r30, X+
    523c:	fc 91       	ld	r31, X
    523e:	13 97       	sbiw	r26, 0x03	; 3
    5240:	30 97       	sbiw	r30, 0x00	; 0
    5242:	09 f4       	brne	.+2      	; 0x5246 <__vector_39+0x8e>
    5244:	63 c0       	rjmp	.+198    	; 0x530c <__vector_39+0x154>
    5246:	20 e0       	ldi	r18, 0x00	; 0
    5248:	40 e0       	ldi	r20, 0x00	; 0
    524a:	50 e0       	ldi	r21, 0x00	; 0
    524c:	64 e0       	ldi	r22, 0x04	; 4
    524e:	19 95       	eicall
    5250:	5d c0       	rjmp	.+186    	; 0x530c <__vector_39+0x154>
    5252:	e0 91 9f 19 	lds	r30, 0x199F	; 0x80199f <_index.1885>
    5256:	81 e0       	ldi	r24, 0x01	; 1
    5258:	8e 0f       	add	r24, r30
    525a:	80 93 9f 19 	sts	0x199F, r24	; 0x80199f <_index.1885>
    525e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5262:	f0 e0       	ldi	r31, 0x00	; 0
    5264:	ed 55       	subi	r30, 0x5D	; 93
    5266:	f6 4e       	sbci	r31, 0xE6	; 230
    5268:	80 83       	st	Z, r24
    526a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    526e:	80 34       	cpi	r24, 0x40	; 64
    5270:	11 f4       	brne	.+4      	; 0x5276 <__vector_39+0xbe>
    5272:	10 92 9f 19 	sts	0x199F, r1	; 0x80199f <_index.1885>
    5276:	20 91 9f 19 	lds	r18, 0x199F	; 0x80199f <_index.1885>
    527a:	30 e0       	ldi	r19, 0x00	; 0
    527c:	80 91 a2 19 	lds	r24, 0x19A2	; 0x8019a2 <_twiMessageLen>
    5280:	90 e0       	ldi	r25, 0x00	; 0
    5282:	01 97       	sbiw	r24, 0x01	; 1
    5284:	28 17       	cp	r18, r24
    5286:	39 07       	cpc	r19, r25
    5288:	24 f4       	brge	.+8      	; 0x5292 <__vector_39+0xda>
    528a:	85 ec       	ldi	r24, 0xC5	; 197
    528c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5290:	3d c0       	rjmp	.+122    	; 0x530c <__vector_39+0x154>
    5292:	85 e8       	ldi	r24, 0x85	; 133
    5294:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5298:	39 c0       	rjmp	.+114    	; 0x530c <__vector_39+0x154>
    529a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    529e:	e0 91 9f 19 	lds	r30, 0x199F	; 0x80199f <_index.1885>
    52a2:	f0 e0       	ldi	r31, 0x00	; 0
    52a4:	ed 55       	subi	r30, 0x5D	; 93
    52a6:	f6 4e       	sbci	r31, 0xE6	; 230
    52a8:	80 83       	st	Z, r24
    52aa:	84 e9       	ldi	r24, 0x94	; 148
    52ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52b0:	80 91 a0 19 	lds	r24, 0x19A0	; 0x8019a0 <_twiCurrentHandler>
    52b4:	90 91 a1 19 	lds	r25, 0x19A1	; 0x8019a1 <_twiCurrentHandler+0x1>
    52b8:	dc 01       	movw	r26, r24
    52ba:	12 96       	adiw	r26, 0x02	; 2
    52bc:	ed 91       	ld	r30, X+
    52be:	fc 91       	ld	r31, X
    52c0:	13 97       	sbiw	r26, 0x03	; 3
    52c2:	30 97       	sbiw	r30, 0x00	; 0
    52c4:	19 f1       	breq	.+70     	; 0x530c <__vector_39+0x154>
    52c6:	20 91 a2 19 	lds	r18, 0x19A2	; 0x8019a2 <_twiMessageLen>
    52ca:	43 ea       	ldi	r20, 0xA3	; 163
    52cc:	59 e1       	ldi	r21, 0x19	; 25
    52ce:	65 e0       	ldi	r22, 0x05	; 5
    52d0:	19 95       	eicall
    52d2:	1c c0       	rjmp	.+56     	; 0x530c <__vector_39+0x154>
    52d4:	85 ea       	ldi	r24, 0xA5	; 165
    52d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52da:	18 c0       	rjmp	.+48     	; 0x530c <__vector_39+0x154>
    52dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    52e0:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    52e4:	84 e0       	ldi	r24, 0x04	; 4
    52e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52ea:	80 91 a0 19 	lds	r24, 0x19A0	; 0x8019a0 <_twiCurrentHandler>
    52ee:	90 91 a1 19 	lds	r25, 0x19A1	; 0x8019a1 <_twiCurrentHandler+0x1>
    52f2:	dc 01       	movw	r26, r24
    52f4:	12 96       	adiw	r26, 0x02	; 2
    52f6:	ed 91       	ld	r30, X+
    52f8:	fc 91       	ld	r31, X
    52fa:	13 97       	sbiw	r26, 0x03	; 3
    52fc:	30 97       	sbiw	r30, 0x00	; 0
    52fe:	31 f0       	breq	.+12     	; 0x530c <__vector_39+0x154>
    5300:	20 e0       	ldi	r18, 0x00	; 0
    5302:	40 e0       	ldi	r20, 0x00	; 0
    5304:	50 e0       	ldi	r21, 0x00	; 0
    5306:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    530a:	19 95       	eicall
    530c:	ff 91       	pop	r31
    530e:	ef 91       	pop	r30
    5310:	bf 91       	pop	r27
    5312:	af 91       	pop	r26
    5314:	9f 91       	pop	r25
    5316:	8f 91       	pop	r24
    5318:	7f 91       	pop	r23
    531a:	6f 91       	pop	r22
    531c:	5f 91       	pop	r21
    531e:	4f 91       	pop	r20
    5320:	3f 91       	pop	r19
    5322:	2f 91       	pop	r18
    5324:	0f 90       	pop	r0
    5326:	0b be       	out	0x3b, r0	; 59
    5328:	0f 90       	pop	r0
    532a:	0f be       	out	0x3f, r0	; 63
    532c:	0f 90       	pop	r0
    532e:	1f 90       	pop	r1
    5330:	18 95       	reti

00005332 <fifo_init>:
    5332:	fc 01       	movw	r30, r24
    5334:	41 11       	cpse	r20, r1
    5336:	01 c0       	rjmp	.+2      	; 0x533a <fifo_init+0x8>
    5338:	1a d3       	rcall	.+1588   	; 0x596e <abort>
    533a:	84 2f       	mov	r24, r20
    533c:	90 e0       	ldi	r25, 0x00	; 0
    533e:	9c 01       	movw	r18, r24
    5340:	21 50       	subi	r18, 0x01	; 1
    5342:	31 09       	sbc	r19, r1
    5344:	82 23       	and	r24, r18
    5346:	93 23       	and	r25, r19
    5348:	89 2b       	or	r24, r25
    534a:	09 f0       	breq	.+2      	; 0x534e <fifo_init+0x1c>
    534c:	10 d3       	rcall	.+1568   	; 0x596e <abort>
    534e:	41 38       	cpi	r20, 0x81	; 129
    5350:	08 f0       	brcs	.+2      	; 0x5354 <fifo_init+0x22>
    5352:	0d d3       	rcall	.+1562   	; 0x596e <abort>
    5354:	12 82       	std	Z+2, r1	; 0x02
    5356:	13 82       	std	Z+3, r1	; 0x03
    5358:	44 83       	std	Z+4, r20	; 0x04
    535a:	44 0f       	add	r20, r20
    535c:	41 50       	subi	r20, 0x01	; 1
    535e:	45 83       	std	Z+5, r20	; 0x05
    5360:	71 83       	std	Z+1, r23	; 0x01
    5362:	60 83       	st	Z, r22
    5364:	80 e0       	ldi	r24, 0x00	; 0
    5366:	90 e0       	ldi	r25, 0x00	; 0
    5368:	08 95       	ret

0000536a <__subsf3>:
    536a:	50 58       	subi	r21, 0x80	; 128

0000536c <__addsf3>:
    536c:	bb 27       	eor	r27, r27
    536e:	aa 27       	eor	r26, r26
    5370:	0e d0       	rcall	.+28     	; 0x538e <__addsf3x>
    5372:	21 c1       	rjmp	.+578    	; 0x55b6 <__fp_round>
    5374:	12 d1       	rcall	.+548    	; 0x559a <__fp_pscA>
    5376:	30 f0       	brcs	.+12     	; 0x5384 <__addsf3+0x18>
    5378:	17 d1       	rcall	.+558    	; 0x55a8 <__fp_pscB>
    537a:	20 f0       	brcs	.+8      	; 0x5384 <__addsf3+0x18>
    537c:	31 f4       	brne	.+12     	; 0x538a <__addsf3+0x1e>
    537e:	9f 3f       	cpi	r25, 0xFF	; 255
    5380:	11 f4       	brne	.+4      	; 0x5386 <__addsf3+0x1a>
    5382:	1e f4       	brtc	.+6      	; 0x538a <__addsf3+0x1e>
    5384:	07 c1       	rjmp	.+526    	; 0x5594 <__fp_nan>
    5386:	0e f4       	brtc	.+2      	; 0x538a <__addsf3+0x1e>
    5388:	e0 95       	com	r30
    538a:	e7 fb       	bst	r30, 7
    538c:	fd c0       	rjmp	.+506    	; 0x5588 <__fp_inf>

0000538e <__addsf3x>:
    538e:	e9 2f       	mov	r30, r25
    5390:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__fp_split3>
    5394:	78 f3       	brcs	.-34     	; 0x5374 <__addsf3+0x8>
    5396:	ba 17       	cp	r27, r26
    5398:	62 07       	cpc	r22, r18
    539a:	73 07       	cpc	r23, r19
    539c:	84 07       	cpc	r24, r20
    539e:	95 07       	cpc	r25, r21
    53a0:	20 f0       	brcs	.+8      	; 0x53aa <__addsf3x+0x1c>
    53a2:	79 f4       	brne	.+30     	; 0x53c2 <__addsf3x+0x34>
    53a4:	a6 f5       	brtc	.+104    	; 0x540e <__addsf3x+0x80>
    53a6:	0c 94 7e 1c 	jmp	0x38fc	; 0x38fc <__fp_zero>
    53aa:	0e f4       	brtc	.+2      	; 0x53ae <__addsf3x+0x20>
    53ac:	e0 95       	com	r30
    53ae:	0b 2e       	mov	r0, r27
    53b0:	ba 2f       	mov	r27, r26
    53b2:	a0 2d       	mov	r26, r0
    53b4:	0b 01       	movw	r0, r22
    53b6:	b9 01       	movw	r22, r18
    53b8:	90 01       	movw	r18, r0
    53ba:	0c 01       	movw	r0, r24
    53bc:	ca 01       	movw	r24, r20
    53be:	a0 01       	movw	r20, r0
    53c0:	11 24       	eor	r1, r1
    53c2:	ff 27       	eor	r31, r31
    53c4:	59 1b       	sub	r21, r25
    53c6:	99 f0       	breq	.+38     	; 0x53ee <__addsf3x+0x60>
    53c8:	59 3f       	cpi	r21, 0xF9	; 249
    53ca:	50 f4       	brcc	.+20     	; 0x53e0 <__addsf3x+0x52>
    53cc:	50 3e       	cpi	r21, 0xE0	; 224
    53ce:	68 f1       	brcs	.+90     	; 0x542a <__addsf3x+0x9c>
    53d0:	1a 16       	cp	r1, r26
    53d2:	f0 40       	sbci	r31, 0x00	; 0
    53d4:	a2 2f       	mov	r26, r18
    53d6:	23 2f       	mov	r18, r19
    53d8:	34 2f       	mov	r19, r20
    53da:	44 27       	eor	r20, r20
    53dc:	58 5f       	subi	r21, 0xF8	; 248
    53de:	f3 cf       	rjmp	.-26     	; 0x53c6 <__addsf3x+0x38>
    53e0:	46 95       	lsr	r20
    53e2:	37 95       	ror	r19
    53e4:	27 95       	ror	r18
    53e6:	a7 95       	ror	r26
    53e8:	f0 40       	sbci	r31, 0x00	; 0
    53ea:	53 95       	inc	r21
    53ec:	c9 f7       	brne	.-14     	; 0x53e0 <__addsf3x+0x52>
    53ee:	7e f4       	brtc	.+30     	; 0x540e <__addsf3x+0x80>
    53f0:	1f 16       	cp	r1, r31
    53f2:	ba 0b       	sbc	r27, r26
    53f4:	62 0b       	sbc	r22, r18
    53f6:	73 0b       	sbc	r23, r19
    53f8:	84 0b       	sbc	r24, r20
    53fa:	ba f0       	brmi	.+46     	; 0x542a <__addsf3x+0x9c>
    53fc:	91 50       	subi	r25, 0x01	; 1
    53fe:	a1 f0       	breq	.+40     	; 0x5428 <__addsf3x+0x9a>
    5400:	ff 0f       	add	r31, r31
    5402:	bb 1f       	adc	r27, r27
    5404:	66 1f       	adc	r22, r22
    5406:	77 1f       	adc	r23, r23
    5408:	88 1f       	adc	r24, r24
    540a:	c2 f7       	brpl	.-16     	; 0x53fc <__addsf3x+0x6e>
    540c:	0e c0       	rjmp	.+28     	; 0x542a <__addsf3x+0x9c>
    540e:	ba 0f       	add	r27, r26
    5410:	62 1f       	adc	r22, r18
    5412:	73 1f       	adc	r23, r19
    5414:	84 1f       	adc	r24, r20
    5416:	48 f4       	brcc	.+18     	; 0x542a <__addsf3x+0x9c>
    5418:	87 95       	ror	r24
    541a:	77 95       	ror	r23
    541c:	67 95       	ror	r22
    541e:	b7 95       	ror	r27
    5420:	f7 95       	ror	r31
    5422:	9e 3f       	cpi	r25, 0xFE	; 254
    5424:	08 f0       	brcs	.+2      	; 0x5428 <__addsf3x+0x9a>
    5426:	b1 cf       	rjmp	.-158    	; 0x538a <__addsf3+0x1e>
    5428:	93 95       	inc	r25
    542a:	88 0f       	add	r24, r24
    542c:	08 f0       	brcs	.+2      	; 0x5430 <__addsf3x+0xa2>
    542e:	99 27       	eor	r25, r25
    5430:	ee 0f       	add	r30, r30
    5432:	97 95       	ror	r25
    5434:	87 95       	ror	r24
    5436:	08 95       	ret

00005438 <__divsf3>:
    5438:	0d d0       	rcall	.+26     	; 0x5454 <__divsf3x>
    543a:	bd c0       	rjmp	.+378    	; 0x55b6 <__fp_round>
    543c:	b5 d0       	rcall	.+362    	; 0x55a8 <__fp_pscB>
    543e:	48 f0       	brcs	.+18     	; 0x5452 <__divsf3+0x1a>
    5440:	ac d0       	rcall	.+344    	; 0x559a <__fp_pscA>
    5442:	38 f0       	brcs	.+14     	; 0x5452 <__divsf3+0x1a>
    5444:	21 f4       	brne	.+8      	; 0x544e <__divsf3+0x16>
    5446:	5f 3f       	cpi	r21, 0xFF	; 255
    5448:	21 f0       	breq	.+8      	; 0x5452 <__divsf3+0x1a>
    544a:	9e c0       	rjmp	.+316    	; 0x5588 <__fp_inf>
    544c:	51 11       	cpse	r21, r1
    544e:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__fp_szero>
    5452:	a0 c0       	rjmp	.+320    	; 0x5594 <__fp_nan>

00005454 <__divsf3x>:
    5454:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__fp_split3>
    5458:	88 f3       	brcs	.-30     	; 0x543c <__divsf3+0x4>

0000545a <__divsf3_pse>:
    545a:	99 23       	and	r25, r25
    545c:	b9 f3       	breq	.-18     	; 0x544c <__divsf3+0x14>
    545e:	55 23       	and	r21, r21
    5460:	a1 f3       	breq	.-24     	; 0x544a <__divsf3+0x12>
    5462:	95 1b       	sub	r25, r21
    5464:	55 0b       	sbc	r21, r21
    5466:	bb 27       	eor	r27, r27
    5468:	aa 27       	eor	r26, r26
    546a:	62 17       	cp	r22, r18
    546c:	73 07       	cpc	r23, r19
    546e:	84 07       	cpc	r24, r20
    5470:	38 f0       	brcs	.+14     	; 0x5480 <__divsf3_pse+0x26>
    5472:	9f 5f       	subi	r25, 0xFF	; 255
    5474:	5f 4f       	sbci	r21, 0xFF	; 255
    5476:	22 0f       	add	r18, r18
    5478:	33 1f       	adc	r19, r19
    547a:	44 1f       	adc	r20, r20
    547c:	aa 1f       	adc	r26, r26
    547e:	a9 f3       	breq	.-22     	; 0x546a <__divsf3_pse+0x10>
    5480:	34 d0       	rcall	.+104    	; 0x54ea <__divsf3_pse+0x90>
    5482:	0e 2e       	mov	r0, r30
    5484:	3a f0       	brmi	.+14     	; 0x5494 <__divsf3_pse+0x3a>
    5486:	e0 e8       	ldi	r30, 0x80	; 128
    5488:	31 d0       	rcall	.+98     	; 0x54ec <__divsf3_pse+0x92>
    548a:	91 50       	subi	r25, 0x01	; 1
    548c:	50 40       	sbci	r21, 0x00	; 0
    548e:	e6 95       	lsr	r30
    5490:	00 1c       	adc	r0, r0
    5492:	ca f7       	brpl	.-14     	; 0x5486 <__divsf3_pse+0x2c>
    5494:	2a d0       	rcall	.+84     	; 0x54ea <__divsf3_pse+0x90>
    5496:	fe 2f       	mov	r31, r30
    5498:	28 d0       	rcall	.+80     	; 0x54ea <__divsf3_pse+0x90>
    549a:	66 0f       	add	r22, r22
    549c:	77 1f       	adc	r23, r23
    549e:	88 1f       	adc	r24, r24
    54a0:	bb 1f       	adc	r27, r27
    54a2:	26 17       	cp	r18, r22
    54a4:	37 07       	cpc	r19, r23
    54a6:	48 07       	cpc	r20, r24
    54a8:	ab 07       	cpc	r26, r27
    54aa:	b0 e8       	ldi	r27, 0x80	; 128
    54ac:	09 f0       	breq	.+2      	; 0x54b0 <__divsf3_pse+0x56>
    54ae:	bb 0b       	sbc	r27, r27
    54b0:	80 2d       	mov	r24, r0
    54b2:	bf 01       	movw	r22, r30
    54b4:	ff 27       	eor	r31, r31
    54b6:	93 58       	subi	r25, 0x83	; 131
    54b8:	5f 4f       	sbci	r21, 0xFF	; 255
    54ba:	32 f0       	brmi	.+12     	; 0x54c8 <__divsf3_pse+0x6e>
    54bc:	9e 3f       	cpi	r25, 0xFE	; 254
    54be:	51 05       	cpc	r21, r1
    54c0:	70 f0       	brcs	.+28     	; 0x54de <__divsf3_pse+0x84>
    54c2:	62 c0       	rjmp	.+196    	; 0x5588 <__fp_inf>
    54c4:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__fp_szero>
    54c8:	5f 3f       	cpi	r21, 0xFF	; 255
    54ca:	e4 f3       	brlt	.-8      	; 0x54c4 <__divsf3_pse+0x6a>
    54cc:	98 3e       	cpi	r25, 0xE8	; 232
    54ce:	d4 f3       	brlt	.-12     	; 0x54c4 <__divsf3_pse+0x6a>
    54d0:	86 95       	lsr	r24
    54d2:	77 95       	ror	r23
    54d4:	67 95       	ror	r22
    54d6:	b7 95       	ror	r27
    54d8:	f7 95       	ror	r31
    54da:	9f 5f       	subi	r25, 0xFF	; 255
    54dc:	c9 f7       	brne	.-14     	; 0x54d0 <__divsf3_pse+0x76>
    54de:	88 0f       	add	r24, r24
    54e0:	91 1d       	adc	r25, r1
    54e2:	96 95       	lsr	r25
    54e4:	87 95       	ror	r24
    54e6:	97 f9       	bld	r25, 7
    54e8:	08 95       	ret
    54ea:	e1 e0       	ldi	r30, 0x01	; 1
    54ec:	66 0f       	add	r22, r22
    54ee:	77 1f       	adc	r23, r23
    54f0:	88 1f       	adc	r24, r24
    54f2:	bb 1f       	adc	r27, r27
    54f4:	62 17       	cp	r22, r18
    54f6:	73 07       	cpc	r23, r19
    54f8:	84 07       	cpc	r24, r20
    54fa:	ba 07       	cpc	r27, r26
    54fc:	20 f0       	brcs	.+8      	; 0x5506 <__divsf3_pse+0xac>
    54fe:	62 1b       	sub	r22, r18
    5500:	73 0b       	sbc	r23, r19
    5502:	84 0b       	sbc	r24, r20
    5504:	ba 0b       	sbc	r27, r26
    5506:	ee 1f       	adc	r30, r30
    5508:	88 f7       	brcc	.-30     	; 0x54ec <__divsf3_pse+0x92>
    550a:	e0 95       	com	r30
    550c:	08 95       	ret

0000550e <__floatunsisf>:
    550e:	e8 94       	clt
    5510:	09 c0       	rjmp	.+18     	; 0x5524 <__floatsisf+0x12>

00005512 <__floatsisf>:
    5512:	97 fb       	bst	r25, 7
    5514:	3e f4       	brtc	.+14     	; 0x5524 <__floatsisf+0x12>
    5516:	90 95       	com	r25
    5518:	80 95       	com	r24
    551a:	70 95       	com	r23
    551c:	61 95       	neg	r22
    551e:	7f 4f       	sbci	r23, 0xFF	; 255
    5520:	8f 4f       	sbci	r24, 0xFF	; 255
    5522:	9f 4f       	sbci	r25, 0xFF	; 255
    5524:	99 23       	and	r25, r25
    5526:	a9 f0       	breq	.+42     	; 0x5552 <__floatsisf+0x40>
    5528:	f9 2f       	mov	r31, r25
    552a:	96 e9       	ldi	r25, 0x96	; 150
    552c:	bb 27       	eor	r27, r27
    552e:	93 95       	inc	r25
    5530:	f6 95       	lsr	r31
    5532:	87 95       	ror	r24
    5534:	77 95       	ror	r23
    5536:	67 95       	ror	r22
    5538:	b7 95       	ror	r27
    553a:	f1 11       	cpse	r31, r1
    553c:	f8 cf       	rjmp	.-16     	; 0x552e <__floatsisf+0x1c>
    553e:	fa f4       	brpl	.+62     	; 0x557e <__floatsisf+0x6c>
    5540:	bb 0f       	add	r27, r27
    5542:	11 f4       	brne	.+4      	; 0x5548 <__floatsisf+0x36>
    5544:	60 ff       	sbrs	r22, 0
    5546:	1b c0       	rjmp	.+54     	; 0x557e <__floatsisf+0x6c>
    5548:	6f 5f       	subi	r22, 0xFF	; 255
    554a:	7f 4f       	sbci	r23, 0xFF	; 255
    554c:	8f 4f       	sbci	r24, 0xFF	; 255
    554e:	9f 4f       	sbci	r25, 0xFF	; 255
    5550:	16 c0       	rjmp	.+44     	; 0x557e <__floatsisf+0x6c>
    5552:	88 23       	and	r24, r24
    5554:	11 f0       	breq	.+4      	; 0x555a <__floatsisf+0x48>
    5556:	96 e9       	ldi	r25, 0x96	; 150
    5558:	11 c0       	rjmp	.+34     	; 0x557c <__floatsisf+0x6a>
    555a:	77 23       	and	r23, r23
    555c:	21 f0       	breq	.+8      	; 0x5566 <__floatsisf+0x54>
    555e:	9e e8       	ldi	r25, 0x8E	; 142
    5560:	87 2f       	mov	r24, r23
    5562:	76 2f       	mov	r23, r22
    5564:	05 c0       	rjmp	.+10     	; 0x5570 <__floatsisf+0x5e>
    5566:	66 23       	and	r22, r22
    5568:	71 f0       	breq	.+28     	; 0x5586 <__floatsisf+0x74>
    556a:	96 e8       	ldi	r25, 0x86	; 134
    556c:	86 2f       	mov	r24, r22
    556e:	70 e0       	ldi	r23, 0x00	; 0
    5570:	60 e0       	ldi	r22, 0x00	; 0
    5572:	2a f0       	brmi	.+10     	; 0x557e <__floatsisf+0x6c>
    5574:	9a 95       	dec	r25
    5576:	66 0f       	add	r22, r22
    5578:	77 1f       	adc	r23, r23
    557a:	88 1f       	adc	r24, r24
    557c:	da f7       	brpl	.-10     	; 0x5574 <__floatsisf+0x62>
    557e:	88 0f       	add	r24, r24
    5580:	96 95       	lsr	r25
    5582:	87 95       	ror	r24
    5584:	97 f9       	bld	r25, 7
    5586:	08 95       	ret

00005588 <__fp_inf>:
    5588:	97 f9       	bld	r25, 7
    558a:	9f 67       	ori	r25, 0x7F	; 127
    558c:	80 e8       	ldi	r24, 0x80	; 128
    558e:	70 e0       	ldi	r23, 0x00	; 0
    5590:	60 e0       	ldi	r22, 0x00	; 0
    5592:	08 95       	ret

00005594 <__fp_nan>:
    5594:	9f ef       	ldi	r25, 0xFF	; 255
    5596:	80 ec       	ldi	r24, 0xC0	; 192
    5598:	08 95       	ret

0000559a <__fp_pscA>:
    559a:	00 24       	eor	r0, r0
    559c:	0a 94       	dec	r0
    559e:	16 16       	cp	r1, r22
    55a0:	17 06       	cpc	r1, r23
    55a2:	18 06       	cpc	r1, r24
    55a4:	09 06       	cpc	r0, r25
    55a6:	08 95       	ret

000055a8 <__fp_pscB>:
    55a8:	00 24       	eor	r0, r0
    55aa:	0a 94       	dec	r0
    55ac:	12 16       	cp	r1, r18
    55ae:	13 06       	cpc	r1, r19
    55b0:	14 06       	cpc	r1, r20
    55b2:	05 06       	cpc	r0, r21
    55b4:	08 95       	ret

000055b6 <__fp_round>:
    55b6:	09 2e       	mov	r0, r25
    55b8:	03 94       	inc	r0
    55ba:	00 0c       	add	r0, r0
    55bc:	11 f4       	brne	.+4      	; 0x55c2 <__fp_round+0xc>
    55be:	88 23       	and	r24, r24
    55c0:	52 f0       	brmi	.+20     	; 0x55d6 <__fp_round+0x20>
    55c2:	bb 0f       	add	r27, r27
    55c4:	40 f4       	brcc	.+16     	; 0x55d6 <__fp_round+0x20>
    55c6:	bf 2b       	or	r27, r31
    55c8:	11 f4       	brne	.+4      	; 0x55ce <__fp_round+0x18>
    55ca:	60 ff       	sbrs	r22, 0
    55cc:	04 c0       	rjmp	.+8      	; 0x55d6 <__fp_round+0x20>
    55ce:	6f 5f       	subi	r22, 0xFF	; 255
    55d0:	7f 4f       	sbci	r23, 0xFF	; 255
    55d2:	8f 4f       	sbci	r24, 0xFF	; 255
    55d4:	9f 4f       	sbci	r25, 0xFF	; 255
    55d6:	08 95       	ret

000055d8 <__mulsf3>:
    55d8:	0c d0       	rcall	.+24     	; 0x55f2 <__mulsf3x>
    55da:	ed cf       	rjmp	.-38     	; 0x55b6 <__fp_round>
    55dc:	de df       	rcall	.-68     	; 0x559a <__fp_pscA>
    55de:	28 f0       	brcs	.+10     	; 0x55ea <__mulsf3+0x12>
    55e0:	e3 df       	rcall	.-58     	; 0x55a8 <__fp_pscB>
    55e2:	18 f0       	brcs	.+6      	; 0x55ea <__mulsf3+0x12>
    55e4:	95 23       	and	r25, r21
    55e6:	09 f0       	breq	.+2      	; 0x55ea <__mulsf3+0x12>
    55e8:	cf cf       	rjmp	.-98     	; 0x5588 <__fp_inf>
    55ea:	d4 cf       	rjmp	.-88     	; 0x5594 <__fp_nan>
    55ec:	11 24       	eor	r1, r1
    55ee:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__fp_szero>

000055f2 <__mulsf3x>:
    55f2:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__fp_split3>
    55f6:	90 f3       	brcs	.-28     	; 0x55dc <__mulsf3+0x4>

000055f8 <__mulsf3_pse>:
    55f8:	95 9f       	mul	r25, r21
    55fa:	c1 f3       	breq	.-16     	; 0x55ec <__mulsf3+0x14>
    55fc:	95 0f       	add	r25, r21
    55fe:	50 e0       	ldi	r21, 0x00	; 0
    5600:	55 1f       	adc	r21, r21
    5602:	62 9f       	mul	r22, r18
    5604:	f0 01       	movw	r30, r0
    5606:	72 9f       	mul	r23, r18
    5608:	bb 27       	eor	r27, r27
    560a:	f0 0d       	add	r31, r0
    560c:	b1 1d       	adc	r27, r1
    560e:	63 9f       	mul	r22, r19
    5610:	aa 27       	eor	r26, r26
    5612:	f0 0d       	add	r31, r0
    5614:	b1 1d       	adc	r27, r1
    5616:	aa 1f       	adc	r26, r26
    5618:	64 9f       	mul	r22, r20
    561a:	66 27       	eor	r22, r22
    561c:	b0 0d       	add	r27, r0
    561e:	a1 1d       	adc	r26, r1
    5620:	66 1f       	adc	r22, r22
    5622:	82 9f       	mul	r24, r18
    5624:	22 27       	eor	r18, r18
    5626:	b0 0d       	add	r27, r0
    5628:	a1 1d       	adc	r26, r1
    562a:	62 1f       	adc	r22, r18
    562c:	73 9f       	mul	r23, r19
    562e:	b0 0d       	add	r27, r0
    5630:	a1 1d       	adc	r26, r1
    5632:	62 1f       	adc	r22, r18
    5634:	83 9f       	mul	r24, r19
    5636:	a0 0d       	add	r26, r0
    5638:	61 1d       	adc	r22, r1
    563a:	22 1f       	adc	r18, r18
    563c:	74 9f       	mul	r23, r20
    563e:	33 27       	eor	r19, r19
    5640:	a0 0d       	add	r26, r0
    5642:	61 1d       	adc	r22, r1
    5644:	23 1f       	adc	r18, r19
    5646:	84 9f       	mul	r24, r20
    5648:	60 0d       	add	r22, r0
    564a:	21 1d       	adc	r18, r1
    564c:	82 2f       	mov	r24, r18
    564e:	76 2f       	mov	r23, r22
    5650:	6a 2f       	mov	r22, r26
    5652:	11 24       	eor	r1, r1
    5654:	9f 57       	subi	r25, 0x7F	; 127
    5656:	50 40       	sbci	r21, 0x00	; 0
    5658:	92 f0       	brmi	.+36     	; 0x567e <__mulsf3_pse+0x86>
    565a:	e9 f0       	breq	.+58     	; 0x5696 <__mulsf3_pse+0x9e>
    565c:	88 23       	and	r24, r24
    565e:	4a f0       	brmi	.+18     	; 0x5672 <__mulsf3_pse+0x7a>
    5660:	ee 0f       	add	r30, r30
    5662:	ff 1f       	adc	r31, r31
    5664:	bb 1f       	adc	r27, r27
    5666:	66 1f       	adc	r22, r22
    5668:	77 1f       	adc	r23, r23
    566a:	88 1f       	adc	r24, r24
    566c:	91 50       	subi	r25, 0x01	; 1
    566e:	50 40       	sbci	r21, 0x00	; 0
    5670:	a9 f7       	brne	.-22     	; 0x565c <__mulsf3_pse+0x64>
    5672:	9e 3f       	cpi	r25, 0xFE	; 254
    5674:	51 05       	cpc	r21, r1
    5676:	78 f0       	brcs	.+30     	; 0x5696 <__mulsf3_pse+0x9e>
    5678:	87 cf       	rjmp	.-242    	; 0x5588 <__fp_inf>
    567a:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__fp_szero>
    567e:	5f 3f       	cpi	r21, 0xFF	; 255
    5680:	e4 f3       	brlt	.-8      	; 0x567a <__mulsf3_pse+0x82>
    5682:	98 3e       	cpi	r25, 0xE8	; 232
    5684:	d4 f3       	brlt	.-12     	; 0x567a <__mulsf3_pse+0x82>
    5686:	86 95       	lsr	r24
    5688:	77 95       	ror	r23
    568a:	67 95       	ror	r22
    568c:	b7 95       	ror	r27
    568e:	f7 95       	ror	r31
    5690:	e7 95       	ror	r30
    5692:	9f 5f       	subi	r25, 0xFF	; 255
    5694:	c1 f7       	brne	.-16     	; 0x5686 <__mulsf3_pse+0x8e>
    5696:	fe 2b       	or	r31, r30
    5698:	88 0f       	add	r24, r24
    569a:	91 1d       	adc	r25, r1
    569c:	96 95       	lsr	r25
    569e:	87 95       	ror	r24
    56a0:	97 f9       	bld	r25, 7
    56a2:	08 95       	ret

000056a4 <__udivmodsi4>:
    56a4:	a1 e2       	ldi	r26, 0x21	; 33
    56a6:	1a 2e       	mov	r1, r26
    56a8:	aa 1b       	sub	r26, r26
    56aa:	bb 1b       	sub	r27, r27
    56ac:	fd 01       	movw	r30, r26
    56ae:	0d c0       	rjmp	.+26     	; 0x56ca <__udivmodsi4_ep>

000056b0 <__udivmodsi4_loop>:
    56b0:	aa 1f       	adc	r26, r26
    56b2:	bb 1f       	adc	r27, r27
    56b4:	ee 1f       	adc	r30, r30
    56b6:	ff 1f       	adc	r31, r31
    56b8:	a2 17       	cp	r26, r18
    56ba:	b3 07       	cpc	r27, r19
    56bc:	e4 07       	cpc	r30, r20
    56be:	f5 07       	cpc	r31, r21
    56c0:	20 f0       	brcs	.+8      	; 0x56ca <__udivmodsi4_ep>
    56c2:	a2 1b       	sub	r26, r18
    56c4:	b3 0b       	sbc	r27, r19
    56c6:	e4 0b       	sbc	r30, r20
    56c8:	f5 0b       	sbc	r31, r21

000056ca <__udivmodsi4_ep>:
    56ca:	66 1f       	adc	r22, r22
    56cc:	77 1f       	adc	r23, r23
    56ce:	88 1f       	adc	r24, r24
    56d0:	99 1f       	adc	r25, r25
    56d2:	1a 94       	dec	r1
    56d4:	69 f7       	brne	.-38     	; 0x56b0 <__udivmodsi4_loop>
    56d6:	60 95       	com	r22
    56d8:	70 95       	com	r23
    56da:	80 95       	com	r24
    56dc:	90 95       	com	r25
    56de:	9b 01       	movw	r18, r22
    56e0:	ac 01       	movw	r20, r24
    56e2:	bd 01       	movw	r22, r26
    56e4:	cf 01       	movw	r24, r30
    56e6:	08 95       	ret

000056e8 <__tablejump2__>:
    56e8:	ee 0f       	add	r30, r30
    56ea:	ff 1f       	adc	r31, r31
    56ec:	88 1f       	adc	r24, r24
    56ee:	8b bf       	out	0x3b, r24	; 59
    56f0:	07 90       	elpm	r0, Z+
    56f2:	f6 91       	elpm	r31, Z
    56f4:	e0 2d       	mov	r30, r0
    56f6:	19 94       	eijmp

000056f8 <calloc>:
    56f8:	0f 93       	push	r16
    56fa:	1f 93       	push	r17
    56fc:	cf 93       	push	r28
    56fe:	df 93       	push	r29
    5700:	86 9f       	mul	r24, r22
    5702:	80 01       	movw	r16, r0
    5704:	87 9f       	mul	r24, r23
    5706:	10 0d       	add	r17, r0
    5708:	96 9f       	mul	r25, r22
    570a:	10 0d       	add	r17, r0
    570c:	11 24       	eor	r1, r1
    570e:	c8 01       	movw	r24, r16
    5710:	0d d0       	rcall	.+26     	; 0x572c <malloc>
    5712:	ec 01       	movw	r28, r24
    5714:	00 97       	sbiw	r24, 0x00	; 0
    5716:	21 f0       	breq	.+8      	; 0x5720 <calloc+0x28>
    5718:	a8 01       	movw	r20, r16
    571a:	60 e0       	ldi	r22, 0x00	; 0
    571c:	70 e0       	ldi	r23, 0x00	; 0
    571e:	34 d1       	rcall	.+616    	; 0x5988 <memset>
    5720:	ce 01       	movw	r24, r28
    5722:	df 91       	pop	r29
    5724:	cf 91       	pop	r28
    5726:	1f 91       	pop	r17
    5728:	0f 91       	pop	r16
    572a:	08 95       	ret

0000572c <malloc>:
    572c:	0f 93       	push	r16
    572e:	1f 93       	push	r17
    5730:	cf 93       	push	r28
    5732:	df 93       	push	r29
    5734:	82 30       	cpi	r24, 0x02	; 2
    5736:	91 05       	cpc	r25, r1
    5738:	10 f4       	brcc	.+4      	; 0x573e <malloc+0x12>
    573a:	82 e0       	ldi	r24, 0x02	; 2
    573c:	90 e0       	ldi	r25, 0x00	; 0
    573e:	e0 91 0f 1a 	lds	r30, 0x1A0F	; 0x801a0f <__flp>
    5742:	f0 91 10 1a 	lds	r31, 0x1A10	; 0x801a10 <__flp+0x1>
    5746:	20 e0       	ldi	r18, 0x00	; 0
    5748:	30 e0       	ldi	r19, 0x00	; 0
    574a:	a0 e0       	ldi	r26, 0x00	; 0
    574c:	b0 e0       	ldi	r27, 0x00	; 0
    574e:	30 97       	sbiw	r30, 0x00	; 0
    5750:	19 f1       	breq	.+70     	; 0x5798 <malloc+0x6c>
    5752:	40 81       	ld	r20, Z
    5754:	51 81       	ldd	r21, Z+1	; 0x01
    5756:	02 81       	ldd	r16, Z+2	; 0x02
    5758:	13 81       	ldd	r17, Z+3	; 0x03
    575a:	48 17       	cp	r20, r24
    575c:	59 07       	cpc	r21, r25
    575e:	c8 f0       	brcs	.+50     	; 0x5792 <malloc+0x66>
    5760:	84 17       	cp	r24, r20
    5762:	95 07       	cpc	r25, r21
    5764:	69 f4       	brne	.+26     	; 0x5780 <malloc+0x54>
    5766:	10 97       	sbiw	r26, 0x00	; 0
    5768:	31 f0       	breq	.+12     	; 0x5776 <malloc+0x4a>
    576a:	12 96       	adiw	r26, 0x02	; 2
    576c:	0c 93       	st	X, r16
    576e:	12 97       	sbiw	r26, 0x02	; 2
    5770:	13 96       	adiw	r26, 0x03	; 3
    5772:	1c 93       	st	X, r17
    5774:	27 c0       	rjmp	.+78     	; 0x57c4 <malloc+0x98>
    5776:	00 93 0f 1a 	sts	0x1A0F, r16	; 0x801a0f <__flp>
    577a:	10 93 10 1a 	sts	0x1A10, r17	; 0x801a10 <__flp+0x1>
    577e:	22 c0       	rjmp	.+68     	; 0x57c4 <malloc+0x98>
    5780:	21 15       	cp	r18, r1
    5782:	31 05       	cpc	r19, r1
    5784:	19 f0       	breq	.+6      	; 0x578c <malloc+0x60>
    5786:	42 17       	cp	r20, r18
    5788:	53 07       	cpc	r21, r19
    578a:	18 f4       	brcc	.+6      	; 0x5792 <malloc+0x66>
    578c:	9a 01       	movw	r18, r20
    578e:	bd 01       	movw	r22, r26
    5790:	ef 01       	movw	r28, r30
    5792:	df 01       	movw	r26, r30
    5794:	f8 01       	movw	r30, r16
    5796:	db cf       	rjmp	.-74     	; 0x574e <malloc+0x22>
    5798:	21 15       	cp	r18, r1
    579a:	31 05       	cpc	r19, r1
    579c:	f9 f0       	breq	.+62     	; 0x57dc <malloc+0xb0>
    579e:	28 1b       	sub	r18, r24
    57a0:	39 0b       	sbc	r19, r25
    57a2:	24 30       	cpi	r18, 0x04	; 4
    57a4:	31 05       	cpc	r19, r1
    57a6:	80 f4       	brcc	.+32     	; 0x57c8 <malloc+0x9c>
    57a8:	8a 81       	ldd	r24, Y+2	; 0x02
    57aa:	9b 81       	ldd	r25, Y+3	; 0x03
    57ac:	61 15       	cp	r22, r1
    57ae:	71 05       	cpc	r23, r1
    57b0:	21 f0       	breq	.+8      	; 0x57ba <malloc+0x8e>
    57b2:	fb 01       	movw	r30, r22
    57b4:	93 83       	std	Z+3, r25	; 0x03
    57b6:	82 83       	std	Z+2, r24	; 0x02
    57b8:	04 c0       	rjmp	.+8      	; 0x57c2 <malloc+0x96>
    57ba:	90 93 10 1a 	sts	0x1A10, r25	; 0x801a10 <__flp+0x1>
    57be:	80 93 0f 1a 	sts	0x1A0F, r24	; 0x801a0f <__flp>
    57c2:	fe 01       	movw	r30, r28
    57c4:	32 96       	adiw	r30, 0x02	; 2
    57c6:	44 c0       	rjmp	.+136    	; 0x5850 <malloc+0x124>
    57c8:	fe 01       	movw	r30, r28
    57ca:	e2 0f       	add	r30, r18
    57cc:	f3 1f       	adc	r31, r19
    57ce:	81 93       	st	Z+, r24
    57d0:	91 93       	st	Z+, r25
    57d2:	22 50       	subi	r18, 0x02	; 2
    57d4:	31 09       	sbc	r19, r1
    57d6:	39 83       	std	Y+1, r19	; 0x01
    57d8:	28 83       	st	Y, r18
    57da:	3a c0       	rjmp	.+116    	; 0x5850 <malloc+0x124>
    57dc:	20 91 0d 1a 	lds	r18, 0x1A0D	; 0x801a0d <__brkval>
    57e0:	30 91 0e 1a 	lds	r19, 0x1A0E	; 0x801a0e <__brkval+0x1>
    57e4:	23 2b       	or	r18, r19
    57e6:	41 f4       	brne	.+16     	; 0x57f8 <malloc+0xcc>
    57e8:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    57ec:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    57f0:	30 93 0e 1a 	sts	0x1A0E, r19	; 0x801a0e <__brkval+0x1>
    57f4:	20 93 0d 1a 	sts	0x1A0D, r18	; 0x801a0d <__brkval>
    57f8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    57fc:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5800:	21 15       	cp	r18, r1
    5802:	31 05       	cpc	r19, r1
    5804:	41 f4       	brne	.+16     	; 0x5816 <malloc+0xea>
    5806:	2d b7       	in	r18, 0x3d	; 61
    5808:	3e b7       	in	r19, 0x3e	; 62
    580a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    580e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5812:	24 1b       	sub	r18, r20
    5814:	35 0b       	sbc	r19, r21
    5816:	e0 91 0d 1a 	lds	r30, 0x1A0D	; 0x801a0d <__brkval>
    581a:	f0 91 0e 1a 	lds	r31, 0x1A0E	; 0x801a0e <__brkval+0x1>
    581e:	e2 17       	cp	r30, r18
    5820:	f3 07       	cpc	r31, r19
    5822:	a0 f4       	brcc	.+40     	; 0x584c <malloc+0x120>
    5824:	2e 1b       	sub	r18, r30
    5826:	3f 0b       	sbc	r19, r31
    5828:	28 17       	cp	r18, r24
    582a:	39 07       	cpc	r19, r25
    582c:	78 f0       	brcs	.+30     	; 0x584c <malloc+0x120>
    582e:	ac 01       	movw	r20, r24
    5830:	4e 5f       	subi	r20, 0xFE	; 254
    5832:	5f 4f       	sbci	r21, 0xFF	; 255
    5834:	24 17       	cp	r18, r20
    5836:	35 07       	cpc	r19, r21
    5838:	48 f0       	brcs	.+18     	; 0x584c <malloc+0x120>
    583a:	4e 0f       	add	r20, r30
    583c:	5f 1f       	adc	r21, r31
    583e:	50 93 0e 1a 	sts	0x1A0E, r21	; 0x801a0e <__brkval+0x1>
    5842:	40 93 0d 1a 	sts	0x1A0D, r20	; 0x801a0d <__brkval>
    5846:	81 93       	st	Z+, r24
    5848:	91 93       	st	Z+, r25
    584a:	02 c0       	rjmp	.+4      	; 0x5850 <malloc+0x124>
    584c:	e0 e0       	ldi	r30, 0x00	; 0
    584e:	f0 e0       	ldi	r31, 0x00	; 0
    5850:	cf 01       	movw	r24, r30
    5852:	df 91       	pop	r29
    5854:	cf 91       	pop	r28
    5856:	1f 91       	pop	r17
    5858:	0f 91       	pop	r16
    585a:	08 95       	ret

0000585c <free>:
    585c:	cf 93       	push	r28
    585e:	df 93       	push	r29
    5860:	00 97       	sbiw	r24, 0x00	; 0
    5862:	09 f4       	brne	.+2      	; 0x5866 <free+0xa>
    5864:	81 c0       	rjmp	.+258    	; 0x5968 <free+0x10c>
    5866:	fc 01       	movw	r30, r24
    5868:	32 97       	sbiw	r30, 0x02	; 2
    586a:	13 82       	std	Z+3, r1	; 0x03
    586c:	12 82       	std	Z+2, r1	; 0x02
    586e:	a0 91 0f 1a 	lds	r26, 0x1A0F	; 0x801a0f <__flp>
    5872:	b0 91 10 1a 	lds	r27, 0x1A10	; 0x801a10 <__flp+0x1>
    5876:	10 97       	sbiw	r26, 0x00	; 0
    5878:	81 f4       	brne	.+32     	; 0x589a <free+0x3e>
    587a:	20 81       	ld	r18, Z
    587c:	31 81       	ldd	r19, Z+1	; 0x01
    587e:	82 0f       	add	r24, r18
    5880:	93 1f       	adc	r25, r19
    5882:	20 91 0d 1a 	lds	r18, 0x1A0D	; 0x801a0d <__brkval>
    5886:	30 91 0e 1a 	lds	r19, 0x1A0E	; 0x801a0e <__brkval+0x1>
    588a:	28 17       	cp	r18, r24
    588c:	39 07       	cpc	r19, r25
    588e:	51 f5       	brne	.+84     	; 0x58e4 <free+0x88>
    5890:	f0 93 0e 1a 	sts	0x1A0E, r31	; 0x801a0e <__brkval+0x1>
    5894:	e0 93 0d 1a 	sts	0x1A0D, r30	; 0x801a0d <__brkval>
    5898:	67 c0       	rjmp	.+206    	; 0x5968 <free+0x10c>
    589a:	ed 01       	movw	r28, r26
    589c:	20 e0       	ldi	r18, 0x00	; 0
    589e:	30 e0       	ldi	r19, 0x00	; 0
    58a0:	ce 17       	cp	r28, r30
    58a2:	df 07       	cpc	r29, r31
    58a4:	40 f4       	brcc	.+16     	; 0x58b6 <free+0x5a>
    58a6:	4a 81       	ldd	r20, Y+2	; 0x02
    58a8:	5b 81       	ldd	r21, Y+3	; 0x03
    58aa:	9e 01       	movw	r18, r28
    58ac:	41 15       	cp	r20, r1
    58ae:	51 05       	cpc	r21, r1
    58b0:	f1 f0       	breq	.+60     	; 0x58ee <free+0x92>
    58b2:	ea 01       	movw	r28, r20
    58b4:	f5 cf       	rjmp	.-22     	; 0x58a0 <free+0x44>
    58b6:	d3 83       	std	Z+3, r29	; 0x03
    58b8:	c2 83       	std	Z+2, r28	; 0x02
    58ba:	40 81       	ld	r20, Z
    58bc:	51 81       	ldd	r21, Z+1	; 0x01
    58be:	84 0f       	add	r24, r20
    58c0:	95 1f       	adc	r25, r21
    58c2:	c8 17       	cp	r28, r24
    58c4:	d9 07       	cpc	r29, r25
    58c6:	59 f4       	brne	.+22     	; 0x58de <free+0x82>
    58c8:	88 81       	ld	r24, Y
    58ca:	99 81       	ldd	r25, Y+1	; 0x01
    58cc:	84 0f       	add	r24, r20
    58ce:	95 1f       	adc	r25, r21
    58d0:	02 96       	adiw	r24, 0x02	; 2
    58d2:	91 83       	std	Z+1, r25	; 0x01
    58d4:	80 83       	st	Z, r24
    58d6:	8a 81       	ldd	r24, Y+2	; 0x02
    58d8:	9b 81       	ldd	r25, Y+3	; 0x03
    58da:	93 83       	std	Z+3, r25	; 0x03
    58dc:	82 83       	std	Z+2, r24	; 0x02
    58de:	21 15       	cp	r18, r1
    58e0:	31 05       	cpc	r19, r1
    58e2:	29 f4       	brne	.+10     	; 0x58ee <free+0x92>
    58e4:	f0 93 10 1a 	sts	0x1A10, r31	; 0x801a10 <__flp+0x1>
    58e8:	e0 93 0f 1a 	sts	0x1A0F, r30	; 0x801a0f <__flp>
    58ec:	3d c0       	rjmp	.+122    	; 0x5968 <free+0x10c>
    58ee:	e9 01       	movw	r28, r18
    58f0:	fb 83       	std	Y+3, r31	; 0x03
    58f2:	ea 83       	std	Y+2, r30	; 0x02
    58f4:	49 91       	ld	r20, Y+
    58f6:	59 91       	ld	r21, Y+
    58f8:	c4 0f       	add	r28, r20
    58fa:	d5 1f       	adc	r29, r21
    58fc:	ec 17       	cp	r30, r28
    58fe:	fd 07       	cpc	r31, r29
    5900:	61 f4       	brne	.+24     	; 0x591a <free+0xbe>
    5902:	80 81       	ld	r24, Z
    5904:	91 81       	ldd	r25, Z+1	; 0x01
    5906:	84 0f       	add	r24, r20
    5908:	95 1f       	adc	r25, r21
    590a:	02 96       	adiw	r24, 0x02	; 2
    590c:	e9 01       	movw	r28, r18
    590e:	99 83       	std	Y+1, r25	; 0x01
    5910:	88 83       	st	Y, r24
    5912:	82 81       	ldd	r24, Z+2	; 0x02
    5914:	93 81       	ldd	r25, Z+3	; 0x03
    5916:	9b 83       	std	Y+3, r25	; 0x03
    5918:	8a 83       	std	Y+2, r24	; 0x02
    591a:	e0 e0       	ldi	r30, 0x00	; 0
    591c:	f0 e0       	ldi	r31, 0x00	; 0
    591e:	12 96       	adiw	r26, 0x02	; 2
    5920:	8d 91       	ld	r24, X+
    5922:	9c 91       	ld	r25, X
    5924:	13 97       	sbiw	r26, 0x03	; 3
    5926:	00 97       	sbiw	r24, 0x00	; 0
    5928:	19 f0       	breq	.+6      	; 0x5930 <free+0xd4>
    592a:	fd 01       	movw	r30, r26
    592c:	dc 01       	movw	r26, r24
    592e:	f7 cf       	rjmp	.-18     	; 0x591e <free+0xc2>
    5930:	8d 91       	ld	r24, X+
    5932:	9c 91       	ld	r25, X
    5934:	11 97       	sbiw	r26, 0x01	; 1
    5936:	9d 01       	movw	r18, r26
    5938:	2e 5f       	subi	r18, 0xFE	; 254
    593a:	3f 4f       	sbci	r19, 0xFF	; 255
    593c:	82 0f       	add	r24, r18
    593e:	93 1f       	adc	r25, r19
    5940:	20 91 0d 1a 	lds	r18, 0x1A0D	; 0x801a0d <__brkval>
    5944:	30 91 0e 1a 	lds	r19, 0x1A0E	; 0x801a0e <__brkval+0x1>
    5948:	28 17       	cp	r18, r24
    594a:	39 07       	cpc	r19, r25
    594c:	69 f4       	brne	.+26     	; 0x5968 <free+0x10c>
    594e:	30 97       	sbiw	r30, 0x00	; 0
    5950:	29 f4       	brne	.+10     	; 0x595c <free+0x100>
    5952:	10 92 10 1a 	sts	0x1A10, r1	; 0x801a10 <__flp+0x1>
    5956:	10 92 0f 1a 	sts	0x1A0F, r1	; 0x801a0f <__flp>
    595a:	02 c0       	rjmp	.+4      	; 0x5960 <free+0x104>
    595c:	13 82       	std	Z+3, r1	; 0x03
    595e:	12 82       	std	Z+2, r1	; 0x02
    5960:	b0 93 0e 1a 	sts	0x1A0E, r27	; 0x801a0e <__brkval+0x1>
    5964:	a0 93 0d 1a 	sts	0x1A0D, r26	; 0x801a0d <__brkval>
    5968:	df 91       	pop	r29
    596a:	cf 91       	pop	r28
    596c:	08 95       	ret

0000596e <abort>:
    596e:	81 e0       	ldi	r24, 0x01	; 1
    5970:	90 e0       	ldi	r25, 0x00	; 0
    5972:	f8 94       	cli
    5974:	7d c3       	rjmp	.+1786   	; 0x6070 <_exit>

00005976 <memcpy>:
    5976:	fb 01       	movw	r30, r22
    5978:	dc 01       	movw	r26, r24
    597a:	02 c0       	rjmp	.+4      	; 0x5980 <memcpy+0xa>
    597c:	01 90       	ld	r0, Z+
    597e:	0d 92       	st	X+, r0
    5980:	41 50       	subi	r20, 0x01	; 1
    5982:	50 40       	sbci	r21, 0x00	; 0
    5984:	d8 f7       	brcc	.-10     	; 0x597c <memcpy+0x6>
    5986:	08 95       	ret

00005988 <memset>:
    5988:	dc 01       	movw	r26, r24
    598a:	01 c0       	rjmp	.+2      	; 0x598e <memset+0x6>
    598c:	6d 93       	st	X+, r22
    598e:	41 50       	subi	r20, 0x01	; 1
    5990:	50 40       	sbci	r21, 0x00	; 0
    5992:	e0 f7       	brcc	.-8      	; 0x598c <memset+0x4>
    5994:	08 95       	ret

00005996 <strcasestr>:
    5996:	fb 01       	movw	r30, r22
    5998:	51 91       	ld	r21, Z+
    599a:	55 23       	and	r21, r21
    599c:	b1 f0       	breq	.+44     	; 0x59ca <strcasestr+0x34>
    599e:	bf 01       	movw	r22, r30
    59a0:	dc 01       	movw	r26, r24
    59a2:	05 2e       	mov	r0, r21
    59a4:	4d 91       	ld	r20, X+
    59a6:	44 23       	and	r20, r20
    59a8:	69 f0       	breq	.+26     	; 0x59c4 <strcasestr+0x2e>
    59aa:	10 d0       	rcall	.+32     	; 0x59cc <strcasestr+0x36>
    59ac:	d9 f7       	brne	.-10     	; 0x59a4 <strcasestr+0xe>
    59ae:	cd 01       	movw	r24, r26
    59b0:	01 90       	ld	r0, Z+
    59b2:	00 20       	and	r0, r0
    59b4:	49 f0       	breq	.+18     	; 0x59c8 <strcasestr+0x32>
    59b6:	4d 91       	ld	r20, X+
    59b8:	41 11       	cpse	r20, r1
    59ba:	08 d0       	rcall	.+16     	; 0x59cc <strcasestr+0x36>
    59bc:	c9 f3       	breq	.-14     	; 0x59b0 <strcasestr+0x1a>
    59be:	fb 01       	movw	r30, r22
    59c0:	41 11       	cpse	r20, r1
    59c2:	ee cf       	rjmp	.-36     	; 0x59a0 <strcasestr+0xa>
    59c4:	81 e0       	ldi	r24, 0x01	; 1
    59c6:	90 e0       	ldi	r25, 0x00	; 0
    59c8:	01 97       	sbiw	r24, 0x01	; 1
    59ca:	08 95       	ret
    59cc:	40 25       	eor	r20, r0
    59ce:	39 f0       	breq	.+14     	; 0x59de <strcasestr+0x48>
    59d0:	40 32       	cpi	r20, 0x20	; 32
    59d2:	29 f4       	brne	.+10     	; 0x59de <strcasestr+0x48>
    59d4:	40 29       	or	r20, r0
    59d6:	4b 57       	subi	r20, 0x7B	; 123
    59d8:	46 5e       	subi	r20, 0xE6	; 230
    59da:	08 f0       	brcs	.+2      	; 0x59de <strcasestr+0x48>
    59dc:	18 94       	sez
    59de:	08 95       	ret

000059e0 <strcat>:
    59e0:	fb 01       	movw	r30, r22
    59e2:	dc 01       	movw	r26, r24
    59e4:	0d 90       	ld	r0, X+
    59e6:	00 20       	and	r0, r0
    59e8:	e9 f7       	brne	.-6      	; 0x59e4 <strcat+0x4>
    59ea:	11 97       	sbiw	r26, 0x01	; 1
    59ec:	01 90       	ld	r0, Z+
    59ee:	0d 92       	st	X+, r0
    59f0:	00 20       	and	r0, r0
    59f2:	e1 f7       	brne	.-8      	; 0x59ec <strcat+0xc>
    59f4:	08 95       	ret

000059f6 <strcpy>:
    59f6:	fb 01       	movw	r30, r22
    59f8:	dc 01       	movw	r26, r24
    59fa:	01 90       	ld	r0, Z+
    59fc:	0d 92       	st	X+, r0
    59fe:	00 20       	and	r0, r0
    5a00:	e1 f7       	brne	.-8      	; 0x59fa <strcpy+0x4>
    5a02:	08 95       	ret

00005a04 <strncasecmp>:
    5a04:	fb 01       	movw	r30, r22
    5a06:	dc 01       	movw	r26, r24
    5a08:	41 50       	subi	r20, 0x01	; 1
    5a0a:	50 40       	sbci	r21, 0x00	; 0
    5a0c:	88 f0       	brcs	.+34     	; 0x5a30 <strncasecmp+0x2c>
    5a0e:	8d 91       	ld	r24, X+
    5a10:	81 34       	cpi	r24, 0x41	; 65
    5a12:	1c f0       	brlt	.+6      	; 0x5a1a <strncasecmp+0x16>
    5a14:	8b 35       	cpi	r24, 0x5B	; 91
    5a16:	0c f4       	brge	.+2      	; 0x5a1a <strncasecmp+0x16>
    5a18:	80 5e       	subi	r24, 0xE0	; 224
    5a1a:	61 91       	ld	r22, Z+
    5a1c:	61 34       	cpi	r22, 0x41	; 65
    5a1e:	1c f0       	brlt	.+6      	; 0x5a26 <strncasecmp+0x22>
    5a20:	6b 35       	cpi	r22, 0x5B	; 91
    5a22:	0c f4       	brge	.+2      	; 0x5a26 <strncasecmp+0x22>
    5a24:	60 5e       	subi	r22, 0xE0	; 224
    5a26:	86 1b       	sub	r24, r22
    5a28:	61 11       	cpse	r22, r1
    5a2a:	71 f3       	breq	.-36     	; 0x5a08 <strncasecmp+0x4>
    5a2c:	99 0b       	sbc	r25, r25
    5a2e:	08 95       	ret
    5a30:	88 1b       	sub	r24, r24
    5a32:	fc cf       	rjmp	.-8      	; 0x5a2c <strncasecmp+0x28>

00005a34 <printf>:
    5a34:	cf 93       	push	r28
    5a36:	df 93       	push	r29
    5a38:	cd b7       	in	r28, 0x3d	; 61
    5a3a:	de b7       	in	r29, 0x3e	; 62
    5a3c:	ae 01       	movw	r20, r28
    5a3e:	4a 5f       	subi	r20, 0xFA	; 250
    5a40:	5f 4f       	sbci	r21, 0xFF	; 255
    5a42:	fa 01       	movw	r30, r20
    5a44:	61 91       	ld	r22, Z+
    5a46:	71 91       	ld	r23, Z+
    5a48:	af 01       	movw	r20, r30
    5a4a:	80 91 13 1a 	lds	r24, 0x1A13	; 0x801a13 <__iob+0x2>
    5a4e:	90 91 14 1a 	lds	r25, 0x1A14	; 0x801a14 <__iob+0x3>
    5a52:	61 d0       	rcall	.+194    	; 0x5b16 <vfprintf>
    5a54:	df 91       	pop	r29
    5a56:	cf 91       	pop	r28
    5a58:	08 95       	ret

00005a5a <puts>:
    5a5a:	0f 93       	push	r16
    5a5c:	1f 93       	push	r17
    5a5e:	cf 93       	push	r28
    5a60:	df 93       	push	r29
    5a62:	e0 91 13 1a 	lds	r30, 0x1A13	; 0x801a13 <__iob+0x2>
    5a66:	f0 91 14 1a 	lds	r31, 0x1A14	; 0x801a14 <__iob+0x3>
    5a6a:	23 81       	ldd	r18, Z+3	; 0x03
    5a6c:	21 ff       	sbrs	r18, 1
    5a6e:	1b c0       	rjmp	.+54     	; 0x5aa6 <puts+0x4c>
    5a70:	8c 01       	movw	r16, r24
    5a72:	d0 e0       	ldi	r29, 0x00	; 0
    5a74:	c0 e0       	ldi	r28, 0x00	; 0
    5a76:	f8 01       	movw	r30, r16
    5a78:	81 91       	ld	r24, Z+
    5a7a:	8f 01       	movw	r16, r30
    5a7c:	60 91 13 1a 	lds	r22, 0x1A13	; 0x801a13 <__iob+0x2>
    5a80:	70 91 14 1a 	lds	r23, 0x1A14	; 0x801a14 <__iob+0x3>
    5a84:	db 01       	movw	r26, r22
    5a86:	18 96       	adiw	r26, 0x08	; 8
    5a88:	ed 91       	ld	r30, X+
    5a8a:	fc 91       	ld	r31, X
    5a8c:	19 97       	sbiw	r26, 0x09	; 9
    5a8e:	88 23       	and	r24, r24
    5a90:	31 f0       	breq	.+12     	; 0x5a9e <puts+0x44>
    5a92:	19 95       	eicall
    5a94:	89 2b       	or	r24, r25
    5a96:	79 f3       	breq	.-34     	; 0x5a76 <puts+0x1c>
    5a98:	df ef       	ldi	r29, 0xFF	; 255
    5a9a:	cf ef       	ldi	r28, 0xFF	; 255
    5a9c:	ec cf       	rjmp	.-40     	; 0x5a76 <puts+0x1c>
    5a9e:	8a e0       	ldi	r24, 0x0A	; 10
    5aa0:	19 95       	eicall
    5aa2:	89 2b       	or	r24, r25
    5aa4:	19 f0       	breq	.+6      	; 0x5aac <puts+0x52>
    5aa6:	8f ef       	ldi	r24, 0xFF	; 255
    5aa8:	9f ef       	ldi	r25, 0xFF	; 255
    5aaa:	02 c0       	rjmp	.+4      	; 0x5ab0 <puts+0x56>
    5aac:	8d 2f       	mov	r24, r29
    5aae:	9c 2f       	mov	r25, r28
    5ab0:	df 91       	pop	r29
    5ab2:	cf 91       	pop	r28
    5ab4:	1f 91       	pop	r17
    5ab6:	0f 91       	pop	r16
    5ab8:	08 95       	ret

00005aba <sprintf>:
    5aba:	0f 93       	push	r16
    5abc:	1f 93       	push	r17
    5abe:	cf 93       	push	r28
    5ac0:	df 93       	push	r29
    5ac2:	cd b7       	in	r28, 0x3d	; 61
    5ac4:	de b7       	in	r29, 0x3e	; 62
    5ac6:	2e 97       	sbiw	r28, 0x0e	; 14
    5ac8:	0f b6       	in	r0, 0x3f	; 63
    5aca:	f8 94       	cli
    5acc:	de bf       	out	0x3e, r29	; 62
    5ace:	0f be       	out	0x3f, r0	; 63
    5ad0:	cd bf       	out	0x3d, r28	; 61
    5ad2:	0e 89       	ldd	r16, Y+22	; 0x16
    5ad4:	1f 89       	ldd	r17, Y+23	; 0x17
    5ad6:	86 e0       	ldi	r24, 0x06	; 6
    5ad8:	8c 83       	std	Y+4, r24	; 0x04
    5ada:	1a 83       	std	Y+2, r17	; 0x02
    5adc:	09 83       	std	Y+1, r16	; 0x01
    5ade:	8f ef       	ldi	r24, 0xFF	; 255
    5ae0:	9f e7       	ldi	r25, 0x7F	; 127
    5ae2:	9e 83       	std	Y+6, r25	; 0x06
    5ae4:	8d 83       	std	Y+5, r24	; 0x05
    5ae6:	ae 01       	movw	r20, r28
    5ae8:	46 5e       	subi	r20, 0xE6	; 230
    5aea:	5f 4f       	sbci	r21, 0xFF	; 255
    5aec:	68 8d       	ldd	r22, Y+24	; 0x18
    5aee:	79 8d       	ldd	r23, Y+25	; 0x19
    5af0:	ce 01       	movw	r24, r28
    5af2:	01 96       	adiw	r24, 0x01	; 1
    5af4:	10 d0       	rcall	.+32     	; 0x5b16 <vfprintf>
    5af6:	ef 81       	ldd	r30, Y+7	; 0x07
    5af8:	f8 85       	ldd	r31, Y+8	; 0x08
    5afa:	e0 0f       	add	r30, r16
    5afc:	f1 1f       	adc	r31, r17
    5afe:	10 82       	st	Z, r1
    5b00:	2e 96       	adiw	r28, 0x0e	; 14
    5b02:	0f b6       	in	r0, 0x3f	; 63
    5b04:	f8 94       	cli
    5b06:	de bf       	out	0x3e, r29	; 62
    5b08:	0f be       	out	0x3f, r0	; 63
    5b0a:	cd bf       	out	0x3d, r28	; 61
    5b0c:	df 91       	pop	r29
    5b0e:	cf 91       	pop	r28
    5b10:	1f 91       	pop	r17
    5b12:	0f 91       	pop	r16
    5b14:	08 95       	ret

00005b16 <vfprintf>:
    5b16:	2f 92       	push	r2
    5b18:	3f 92       	push	r3
    5b1a:	4f 92       	push	r4
    5b1c:	5f 92       	push	r5
    5b1e:	6f 92       	push	r6
    5b20:	7f 92       	push	r7
    5b22:	8f 92       	push	r8
    5b24:	9f 92       	push	r9
    5b26:	af 92       	push	r10
    5b28:	bf 92       	push	r11
    5b2a:	cf 92       	push	r12
    5b2c:	df 92       	push	r13
    5b2e:	ef 92       	push	r14
    5b30:	ff 92       	push	r15
    5b32:	0f 93       	push	r16
    5b34:	1f 93       	push	r17
    5b36:	cf 93       	push	r28
    5b38:	df 93       	push	r29
    5b3a:	cd b7       	in	r28, 0x3d	; 61
    5b3c:	de b7       	in	r29, 0x3e	; 62
    5b3e:	2b 97       	sbiw	r28, 0x0b	; 11
    5b40:	0f b6       	in	r0, 0x3f	; 63
    5b42:	f8 94       	cli
    5b44:	de bf       	out	0x3e, r29	; 62
    5b46:	0f be       	out	0x3f, r0	; 63
    5b48:	cd bf       	out	0x3d, r28	; 61
    5b4a:	6c 01       	movw	r12, r24
    5b4c:	7b 01       	movw	r14, r22
    5b4e:	8a 01       	movw	r16, r20
    5b50:	fc 01       	movw	r30, r24
    5b52:	17 82       	std	Z+7, r1	; 0x07
    5b54:	16 82       	std	Z+6, r1	; 0x06
    5b56:	83 81       	ldd	r24, Z+3	; 0x03
    5b58:	81 ff       	sbrs	r24, 1
    5b5a:	bf c1       	rjmp	.+894    	; 0x5eda <vfprintf+0x3c4>
    5b5c:	ce 01       	movw	r24, r28
    5b5e:	01 96       	adiw	r24, 0x01	; 1
    5b60:	3c 01       	movw	r6, r24
    5b62:	f6 01       	movw	r30, r12
    5b64:	93 81       	ldd	r25, Z+3	; 0x03
    5b66:	f7 01       	movw	r30, r14
    5b68:	93 fd       	sbrc	r25, 3
    5b6a:	85 91       	lpm	r24, Z+
    5b6c:	93 ff       	sbrs	r25, 3
    5b6e:	81 91       	ld	r24, Z+
    5b70:	7f 01       	movw	r14, r30
    5b72:	88 23       	and	r24, r24
    5b74:	09 f4       	brne	.+2      	; 0x5b78 <vfprintf+0x62>
    5b76:	ad c1       	rjmp	.+858    	; 0x5ed2 <vfprintf+0x3bc>
    5b78:	85 32       	cpi	r24, 0x25	; 37
    5b7a:	39 f4       	brne	.+14     	; 0x5b8a <vfprintf+0x74>
    5b7c:	93 fd       	sbrc	r25, 3
    5b7e:	85 91       	lpm	r24, Z+
    5b80:	93 ff       	sbrs	r25, 3
    5b82:	81 91       	ld	r24, Z+
    5b84:	7f 01       	movw	r14, r30
    5b86:	85 32       	cpi	r24, 0x25	; 37
    5b88:	21 f4       	brne	.+8      	; 0x5b92 <vfprintf+0x7c>
    5b8a:	b6 01       	movw	r22, r12
    5b8c:	90 e0       	ldi	r25, 0x00	; 0
    5b8e:	d6 d1       	rcall	.+940    	; 0x5f3c <fputc>
    5b90:	e8 cf       	rjmp	.-48     	; 0x5b62 <vfprintf+0x4c>
    5b92:	91 2c       	mov	r9, r1
    5b94:	21 2c       	mov	r2, r1
    5b96:	31 2c       	mov	r3, r1
    5b98:	ff e1       	ldi	r31, 0x1F	; 31
    5b9a:	f3 15       	cp	r31, r3
    5b9c:	d8 f0       	brcs	.+54     	; 0x5bd4 <vfprintf+0xbe>
    5b9e:	8b 32       	cpi	r24, 0x2B	; 43
    5ba0:	79 f0       	breq	.+30     	; 0x5bc0 <vfprintf+0xaa>
    5ba2:	38 f4       	brcc	.+14     	; 0x5bb2 <vfprintf+0x9c>
    5ba4:	80 32       	cpi	r24, 0x20	; 32
    5ba6:	79 f0       	breq	.+30     	; 0x5bc6 <vfprintf+0xb0>
    5ba8:	83 32       	cpi	r24, 0x23	; 35
    5baa:	a1 f4       	brne	.+40     	; 0x5bd4 <vfprintf+0xbe>
    5bac:	23 2d       	mov	r18, r3
    5bae:	20 61       	ori	r18, 0x10	; 16
    5bb0:	1d c0       	rjmp	.+58     	; 0x5bec <vfprintf+0xd6>
    5bb2:	8d 32       	cpi	r24, 0x2D	; 45
    5bb4:	61 f0       	breq	.+24     	; 0x5bce <vfprintf+0xb8>
    5bb6:	80 33       	cpi	r24, 0x30	; 48
    5bb8:	69 f4       	brne	.+26     	; 0x5bd4 <vfprintf+0xbe>
    5bba:	23 2d       	mov	r18, r3
    5bbc:	21 60       	ori	r18, 0x01	; 1
    5bbe:	16 c0       	rjmp	.+44     	; 0x5bec <vfprintf+0xd6>
    5bc0:	83 2d       	mov	r24, r3
    5bc2:	82 60       	ori	r24, 0x02	; 2
    5bc4:	38 2e       	mov	r3, r24
    5bc6:	e3 2d       	mov	r30, r3
    5bc8:	e4 60       	ori	r30, 0x04	; 4
    5bca:	3e 2e       	mov	r3, r30
    5bcc:	2a c0       	rjmp	.+84     	; 0x5c22 <vfprintf+0x10c>
    5bce:	f3 2d       	mov	r31, r3
    5bd0:	f8 60       	ori	r31, 0x08	; 8
    5bd2:	1d c0       	rjmp	.+58     	; 0x5c0e <vfprintf+0xf8>
    5bd4:	37 fc       	sbrc	r3, 7
    5bd6:	2d c0       	rjmp	.+90     	; 0x5c32 <vfprintf+0x11c>
    5bd8:	20 ed       	ldi	r18, 0xD0	; 208
    5bda:	28 0f       	add	r18, r24
    5bdc:	2a 30       	cpi	r18, 0x0A	; 10
    5bde:	40 f0       	brcs	.+16     	; 0x5bf0 <vfprintf+0xda>
    5be0:	8e 32       	cpi	r24, 0x2E	; 46
    5be2:	b9 f4       	brne	.+46     	; 0x5c12 <vfprintf+0xfc>
    5be4:	36 fc       	sbrc	r3, 6
    5be6:	75 c1       	rjmp	.+746    	; 0x5ed2 <vfprintf+0x3bc>
    5be8:	23 2d       	mov	r18, r3
    5bea:	20 64       	ori	r18, 0x40	; 64
    5bec:	32 2e       	mov	r3, r18
    5bee:	19 c0       	rjmp	.+50     	; 0x5c22 <vfprintf+0x10c>
    5bf0:	36 fe       	sbrs	r3, 6
    5bf2:	06 c0       	rjmp	.+12     	; 0x5c00 <vfprintf+0xea>
    5bf4:	8a e0       	ldi	r24, 0x0A	; 10
    5bf6:	98 9e       	mul	r9, r24
    5bf8:	20 0d       	add	r18, r0
    5bfa:	11 24       	eor	r1, r1
    5bfc:	92 2e       	mov	r9, r18
    5bfe:	11 c0       	rjmp	.+34     	; 0x5c22 <vfprintf+0x10c>
    5c00:	ea e0       	ldi	r30, 0x0A	; 10
    5c02:	2e 9e       	mul	r2, r30
    5c04:	20 0d       	add	r18, r0
    5c06:	11 24       	eor	r1, r1
    5c08:	22 2e       	mov	r2, r18
    5c0a:	f3 2d       	mov	r31, r3
    5c0c:	f0 62       	ori	r31, 0x20	; 32
    5c0e:	3f 2e       	mov	r3, r31
    5c10:	08 c0       	rjmp	.+16     	; 0x5c22 <vfprintf+0x10c>
    5c12:	8c 36       	cpi	r24, 0x6C	; 108
    5c14:	21 f4       	brne	.+8      	; 0x5c1e <vfprintf+0x108>
    5c16:	83 2d       	mov	r24, r3
    5c18:	80 68       	ori	r24, 0x80	; 128
    5c1a:	38 2e       	mov	r3, r24
    5c1c:	02 c0       	rjmp	.+4      	; 0x5c22 <vfprintf+0x10c>
    5c1e:	88 36       	cpi	r24, 0x68	; 104
    5c20:	41 f4       	brne	.+16     	; 0x5c32 <vfprintf+0x11c>
    5c22:	f7 01       	movw	r30, r14
    5c24:	93 fd       	sbrc	r25, 3
    5c26:	85 91       	lpm	r24, Z+
    5c28:	93 ff       	sbrs	r25, 3
    5c2a:	81 91       	ld	r24, Z+
    5c2c:	7f 01       	movw	r14, r30
    5c2e:	81 11       	cpse	r24, r1
    5c30:	b3 cf       	rjmp	.-154    	; 0x5b98 <vfprintf+0x82>
    5c32:	98 2f       	mov	r25, r24
    5c34:	9f 7d       	andi	r25, 0xDF	; 223
    5c36:	95 54       	subi	r25, 0x45	; 69
    5c38:	93 30       	cpi	r25, 0x03	; 3
    5c3a:	28 f4       	brcc	.+10     	; 0x5c46 <vfprintf+0x130>
    5c3c:	0c 5f       	subi	r16, 0xFC	; 252
    5c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    5c40:	9f e3       	ldi	r25, 0x3F	; 63
    5c42:	99 83       	std	Y+1, r25	; 0x01
    5c44:	0d c0       	rjmp	.+26     	; 0x5c60 <vfprintf+0x14a>
    5c46:	83 36       	cpi	r24, 0x63	; 99
    5c48:	31 f0       	breq	.+12     	; 0x5c56 <vfprintf+0x140>
    5c4a:	83 37       	cpi	r24, 0x73	; 115
    5c4c:	71 f0       	breq	.+28     	; 0x5c6a <vfprintf+0x154>
    5c4e:	83 35       	cpi	r24, 0x53	; 83
    5c50:	09 f0       	breq	.+2      	; 0x5c54 <vfprintf+0x13e>
    5c52:	55 c0       	rjmp	.+170    	; 0x5cfe <vfprintf+0x1e8>
    5c54:	20 c0       	rjmp	.+64     	; 0x5c96 <vfprintf+0x180>
    5c56:	f8 01       	movw	r30, r16
    5c58:	80 81       	ld	r24, Z
    5c5a:	89 83       	std	Y+1, r24	; 0x01
    5c5c:	0e 5f       	subi	r16, 0xFE	; 254
    5c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    5c60:	88 24       	eor	r8, r8
    5c62:	83 94       	inc	r8
    5c64:	91 2c       	mov	r9, r1
    5c66:	53 01       	movw	r10, r6
    5c68:	12 c0       	rjmp	.+36     	; 0x5c8e <vfprintf+0x178>
    5c6a:	28 01       	movw	r4, r16
    5c6c:	f2 e0       	ldi	r31, 0x02	; 2
    5c6e:	4f 0e       	add	r4, r31
    5c70:	51 1c       	adc	r5, r1
    5c72:	f8 01       	movw	r30, r16
    5c74:	a0 80       	ld	r10, Z
    5c76:	b1 80       	ldd	r11, Z+1	; 0x01
    5c78:	36 fe       	sbrs	r3, 6
    5c7a:	03 c0       	rjmp	.+6      	; 0x5c82 <vfprintf+0x16c>
    5c7c:	69 2d       	mov	r22, r9
    5c7e:	70 e0       	ldi	r23, 0x00	; 0
    5c80:	02 c0       	rjmp	.+4      	; 0x5c86 <vfprintf+0x170>
    5c82:	6f ef       	ldi	r22, 0xFF	; 255
    5c84:	7f ef       	ldi	r23, 0xFF	; 255
    5c86:	c5 01       	movw	r24, r10
    5c88:	4e d1       	rcall	.+668    	; 0x5f26 <strnlen>
    5c8a:	4c 01       	movw	r8, r24
    5c8c:	82 01       	movw	r16, r4
    5c8e:	f3 2d       	mov	r31, r3
    5c90:	ff 77       	andi	r31, 0x7F	; 127
    5c92:	3f 2e       	mov	r3, r31
    5c94:	15 c0       	rjmp	.+42     	; 0x5cc0 <vfprintf+0x1aa>
    5c96:	28 01       	movw	r4, r16
    5c98:	22 e0       	ldi	r18, 0x02	; 2
    5c9a:	42 0e       	add	r4, r18
    5c9c:	51 1c       	adc	r5, r1
    5c9e:	f8 01       	movw	r30, r16
    5ca0:	a0 80       	ld	r10, Z
    5ca2:	b1 80       	ldd	r11, Z+1	; 0x01
    5ca4:	36 fe       	sbrs	r3, 6
    5ca6:	03 c0       	rjmp	.+6      	; 0x5cae <vfprintf+0x198>
    5ca8:	69 2d       	mov	r22, r9
    5caa:	70 e0       	ldi	r23, 0x00	; 0
    5cac:	02 c0       	rjmp	.+4      	; 0x5cb2 <vfprintf+0x19c>
    5cae:	6f ef       	ldi	r22, 0xFF	; 255
    5cb0:	7f ef       	ldi	r23, 0xFF	; 255
    5cb2:	c5 01       	movw	r24, r10
    5cb4:	2d d1       	rcall	.+602    	; 0x5f10 <strnlen_P>
    5cb6:	4c 01       	movw	r8, r24
    5cb8:	f3 2d       	mov	r31, r3
    5cba:	f0 68       	ori	r31, 0x80	; 128
    5cbc:	3f 2e       	mov	r3, r31
    5cbe:	82 01       	movw	r16, r4
    5cc0:	33 fc       	sbrc	r3, 3
    5cc2:	19 c0       	rjmp	.+50     	; 0x5cf6 <vfprintf+0x1e0>
    5cc4:	82 2d       	mov	r24, r2
    5cc6:	90 e0       	ldi	r25, 0x00	; 0
    5cc8:	88 16       	cp	r8, r24
    5cca:	99 06       	cpc	r9, r25
    5ccc:	a0 f4       	brcc	.+40     	; 0x5cf6 <vfprintf+0x1e0>
    5cce:	b6 01       	movw	r22, r12
    5cd0:	80 e2       	ldi	r24, 0x20	; 32
    5cd2:	90 e0       	ldi	r25, 0x00	; 0
    5cd4:	33 d1       	rcall	.+614    	; 0x5f3c <fputc>
    5cd6:	2a 94       	dec	r2
    5cd8:	f5 cf       	rjmp	.-22     	; 0x5cc4 <vfprintf+0x1ae>
    5cda:	f5 01       	movw	r30, r10
    5cdc:	37 fc       	sbrc	r3, 7
    5cde:	85 91       	lpm	r24, Z+
    5ce0:	37 fe       	sbrs	r3, 7
    5ce2:	81 91       	ld	r24, Z+
    5ce4:	5f 01       	movw	r10, r30
    5ce6:	b6 01       	movw	r22, r12
    5ce8:	90 e0       	ldi	r25, 0x00	; 0
    5cea:	28 d1       	rcall	.+592    	; 0x5f3c <fputc>
    5cec:	21 10       	cpse	r2, r1
    5cee:	2a 94       	dec	r2
    5cf0:	21 e0       	ldi	r18, 0x01	; 1
    5cf2:	82 1a       	sub	r8, r18
    5cf4:	91 08       	sbc	r9, r1
    5cf6:	81 14       	cp	r8, r1
    5cf8:	91 04       	cpc	r9, r1
    5cfa:	79 f7       	brne	.-34     	; 0x5cda <vfprintf+0x1c4>
    5cfc:	e1 c0       	rjmp	.+450    	; 0x5ec0 <vfprintf+0x3aa>
    5cfe:	84 36       	cpi	r24, 0x64	; 100
    5d00:	11 f0       	breq	.+4      	; 0x5d06 <vfprintf+0x1f0>
    5d02:	89 36       	cpi	r24, 0x69	; 105
    5d04:	39 f5       	brne	.+78     	; 0x5d54 <vfprintf+0x23e>
    5d06:	f8 01       	movw	r30, r16
    5d08:	37 fe       	sbrs	r3, 7
    5d0a:	07 c0       	rjmp	.+14     	; 0x5d1a <vfprintf+0x204>
    5d0c:	60 81       	ld	r22, Z
    5d0e:	71 81       	ldd	r23, Z+1	; 0x01
    5d10:	82 81       	ldd	r24, Z+2	; 0x02
    5d12:	93 81       	ldd	r25, Z+3	; 0x03
    5d14:	0c 5f       	subi	r16, 0xFC	; 252
    5d16:	1f 4f       	sbci	r17, 0xFF	; 255
    5d18:	08 c0       	rjmp	.+16     	; 0x5d2a <vfprintf+0x214>
    5d1a:	60 81       	ld	r22, Z
    5d1c:	71 81       	ldd	r23, Z+1	; 0x01
    5d1e:	07 2e       	mov	r0, r23
    5d20:	00 0c       	add	r0, r0
    5d22:	88 0b       	sbc	r24, r24
    5d24:	99 0b       	sbc	r25, r25
    5d26:	0e 5f       	subi	r16, 0xFE	; 254
    5d28:	1f 4f       	sbci	r17, 0xFF	; 255
    5d2a:	f3 2d       	mov	r31, r3
    5d2c:	ff 76       	andi	r31, 0x6F	; 111
    5d2e:	3f 2e       	mov	r3, r31
    5d30:	97 ff       	sbrs	r25, 7
    5d32:	09 c0       	rjmp	.+18     	; 0x5d46 <vfprintf+0x230>
    5d34:	90 95       	com	r25
    5d36:	80 95       	com	r24
    5d38:	70 95       	com	r23
    5d3a:	61 95       	neg	r22
    5d3c:	7f 4f       	sbci	r23, 0xFF	; 255
    5d3e:	8f 4f       	sbci	r24, 0xFF	; 255
    5d40:	9f 4f       	sbci	r25, 0xFF	; 255
    5d42:	f0 68       	ori	r31, 0x80	; 128
    5d44:	3f 2e       	mov	r3, r31
    5d46:	2a e0       	ldi	r18, 0x0A	; 10
    5d48:	30 e0       	ldi	r19, 0x00	; 0
    5d4a:	a3 01       	movw	r20, r6
    5d4c:	33 d1       	rcall	.+614    	; 0x5fb4 <__ultoa_invert>
    5d4e:	88 2e       	mov	r8, r24
    5d50:	86 18       	sub	r8, r6
    5d52:	44 c0       	rjmp	.+136    	; 0x5ddc <vfprintf+0x2c6>
    5d54:	85 37       	cpi	r24, 0x75	; 117
    5d56:	31 f4       	brne	.+12     	; 0x5d64 <vfprintf+0x24e>
    5d58:	23 2d       	mov	r18, r3
    5d5a:	2f 7e       	andi	r18, 0xEF	; 239
    5d5c:	b2 2e       	mov	r11, r18
    5d5e:	2a e0       	ldi	r18, 0x0A	; 10
    5d60:	30 e0       	ldi	r19, 0x00	; 0
    5d62:	25 c0       	rjmp	.+74     	; 0x5dae <vfprintf+0x298>
    5d64:	93 2d       	mov	r25, r3
    5d66:	99 7f       	andi	r25, 0xF9	; 249
    5d68:	b9 2e       	mov	r11, r25
    5d6a:	8f 36       	cpi	r24, 0x6F	; 111
    5d6c:	c1 f0       	breq	.+48     	; 0x5d9e <vfprintf+0x288>
    5d6e:	18 f4       	brcc	.+6      	; 0x5d76 <vfprintf+0x260>
    5d70:	88 35       	cpi	r24, 0x58	; 88
    5d72:	79 f0       	breq	.+30     	; 0x5d92 <vfprintf+0x27c>
    5d74:	ae c0       	rjmp	.+348    	; 0x5ed2 <vfprintf+0x3bc>
    5d76:	80 37       	cpi	r24, 0x70	; 112
    5d78:	19 f0       	breq	.+6      	; 0x5d80 <vfprintf+0x26a>
    5d7a:	88 37       	cpi	r24, 0x78	; 120
    5d7c:	21 f0       	breq	.+8      	; 0x5d86 <vfprintf+0x270>
    5d7e:	a9 c0       	rjmp	.+338    	; 0x5ed2 <vfprintf+0x3bc>
    5d80:	e9 2f       	mov	r30, r25
    5d82:	e0 61       	ori	r30, 0x10	; 16
    5d84:	be 2e       	mov	r11, r30
    5d86:	b4 fe       	sbrs	r11, 4
    5d88:	0d c0       	rjmp	.+26     	; 0x5da4 <vfprintf+0x28e>
    5d8a:	fb 2d       	mov	r31, r11
    5d8c:	f4 60       	ori	r31, 0x04	; 4
    5d8e:	bf 2e       	mov	r11, r31
    5d90:	09 c0       	rjmp	.+18     	; 0x5da4 <vfprintf+0x28e>
    5d92:	34 fe       	sbrs	r3, 4
    5d94:	0a c0       	rjmp	.+20     	; 0x5daa <vfprintf+0x294>
    5d96:	29 2f       	mov	r18, r25
    5d98:	26 60       	ori	r18, 0x06	; 6
    5d9a:	b2 2e       	mov	r11, r18
    5d9c:	06 c0       	rjmp	.+12     	; 0x5daa <vfprintf+0x294>
    5d9e:	28 e0       	ldi	r18, 0x08	; 8
    5da0:	30 e0       	ldi	r19, 0x00	; 0
    5da2:	05 c0       	rjmp	.+10     	; 0x5dae <vfprintf+0x298>
    5da4:	20 e1       	ldi	r18, 0x10	; 16
    5da6:	30 e0       	ldi	r19, 0x00	; 0
    5da8:	02 c0       	rjmp	.+4      	; 0x5dae <vfprintf+0x298>
    5daa:	20 e1       	ldi	r18, 0x10	; 16
    5dac:	32 e0       	ldi	r19, 0x02	; 2
    5dae:	f8 01       	movw	r30, r16
    5db0:	b7 fe       	sbrs	r11, 7
    5db2:	07 c0       	rjmp	.+14     	; 0x5dc2 <vfprintf+0x2ac>
    5db4:	60 81       	ld	r22, Z
    5db6:	71 81       	ldd	r23, Z+1	; 0x01
    5db8:	82 81       	ldd	r24, Z+2	; 0x02
    5dba:	93 81       	ldd	r25, Z+3	; 0x03
    5dbc:	0c 5f       	subi	r16, 0xFC	; 252
    5dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    5dc0:	06 c0       	rjmp	.+12     	; 0x5dce <vfprintf+0x2b8>
    5dc2:	60 81       	ld	r22, Z
    5dc4:	71 81       	ldd	r23, Z+1	; 0x01
    5dc6:	80 e0       	ldi	r24, 0x00	; 0
    5dc8:	90 e0       	ldi	r25, 0x00	; 0
    5dca:	0e 5f       	subi	r16, 0xFE	; 254
    5dcc:	1f 4f       	sbci	r17, 0xFF	; 255
    5dce:	a3 01       	movw	r20, r6
    5dd0:	f1 d0       	rcall	.+482    	; 0x5fb4 <__ultoa_invert>
    5dd2:	88 2e       	mov	r8, r24
    5dd4:	86 18       	sub	r8, r6
    5dd6:	fb 2d       	mov	r31, r11
    5dd8:	ff 77       	andi	r31, 0x7F	; 127
    5dda:	3f 2e       	mov	r3, r31
    5ddc:	36 fe       	sbrs	r3, 6
    5dde:	0d c0       	rjmp	.+26     	; 0x5dfa <vfprintf+0x2e4>
    5de0:	23 2d       	mov	r18, r3
    5de2:	2e 7f       	andi	r18, 0xFE	; 254
    5de4:	a2 2e       	mov	r10, r18
    5de6:	89 14       	cp	r8, r9
    5de8:	58 f4       	brcc	.+22     	; 0x5e00 <vfprintf+0x2ea>
    5dea:	34 fe       	sbrs	r3, 4
    5dec:	0b c0       	rjmp	.+22     	; 0x5e04 <vfprintf+0x2ee>
    5dee:	32 fc       	sbrc	r3, 2
    5df0:	09 c0       	rjmp	.+18     	; 0x5e04 <vfprintf+0x2ee>
    5df2:	83 2d       	mov	r24, r3
    5df4:	8e 7e       	andi	r24, 0xEE	; 238
    5df6:	a8 2e       	mov	r10, r24
    5df8:	05 c0       	rjmp	.+10     	; 0x5e04 <vfprintf+0x2ee>
    5dfa:	b8 2c       	mov	r11, r8
    5dfc:	a3 2c       	mov	r10, r3
    5dfe:	03 c0       	rjmp	.+6      	; 0x5e06 <vfprintf+0x2f0>
    5e00:	b8 2c       	mov	r11, r8
    5e02:	01 c0       	rjmp	.+2      	; 0x5e06 <vfprintf+0x2f0>
    5e04:	b9 2c       	mov	r11, r9
    5e06:	a4 fe       	sbrs	r10, 4
    5e08:	0f c0       	rjmp	.+30     	; 0x5e28 <vfprintf+0x312>
    5e0a:	fe 01       	movw	r30, r28
    5e0c:	e8 0d       	add	r30, r8
    5e0e:	f1 1d       	adc	r31, r1
    5e10:	80 81       	ld	r24, Z
    5e12:	80 33       	cpi	r24, 0x30	; 48
    5e14:	21 f4       	brne	.+8      	; 0x5e1e <vfprintf+0x308>
    5e16:	9a 2d       	mov	r25, r10
    5e18:	99 7e       	andi	r25, 0xE9	; 233
    5e1a:	a9 2e       	mov	r10, r25
    5e1c:	09 c0       	rjmp	.+18     	; 0x5e30 <vfprintf+0x31a>
    5e1e:	a2 fe       	sbrs	r10, 2
    5e20:	06 c0       	rjmp	.+12     	; 0x5e2e <vfprintf+0x318>
    5e22:	b3 94       	inc	r11
    5e24:	b3 94       	inc	r11
    5e26:	04 c0       	rjmp	.+8      	; 0x5e30 <vfprintf+0x31a>
    5e28:	8a 2d       	mov	r24, r10
    5e2a:	86 78       	andi	r24, 0x86	; 134
    5e2c:	09 f0       	breq	.+2      	; 0x5e30 <vfprintf+0x31a>
    5e2e:	b3 94       	inc	r11
    5e30:	a3 fc       	sbrc	r10, 3
    5e32:	10 c0       	rjmp	.+32     	; 0x5e54 <vfprintf+0x33e>
    5e34:	a0 fe       	sbrs	r10, 0
    5e36:	06 c0       	rjmp	.+12     	; 0x5e44 <vfprintf+0x32e>
    5e38:	b2 14       	cp	r11, r2
    5e3a:	80 f4       	brcc	.+32     	; 0x5e5c <vfprintf+0x346>
    5e3c:	28 0c       	add	r2, r8
    5e3e:	92 2c       	mov	r9, r2
    5e40:	9b 18       	sub	r9, r11
    5e42:	0d c0       	rjmp	.+26     	; 0x5e5e <vfprintf+0x348>
    5e44:	b2 14       	cp	r11, r2
    5e46:	58 f4       	brcc	.+22     	; 0x5e5e <vfprintf+0x348>
    5e48:	b6 01       	movw	r22, r12
    5e4a:	80 e2       	ldi	r24, 0x20	; 32
    5e4c:	90 e0       	ldi	r25, 0x00	; 0
    5e4e:	76 d0       	rcall	.+236    	; 0x5f3c <fputc>
    5e50:	b3 94       	inc	r11
    5e52:	f8 cf       	rjmp	.-16     	; 0x5e44 <vfprintf+0x32e>
    5e54:	b2 14       	cp	r11, r2
    5e56:	18 f4       	brcc	.+6      	; 0x5e5e <vfprintf+0x348>
    5e58:	2b 18       	sub	r2, r11
    5e5a:	02 c0       	rjmp	.+4      	; 0x5e60 <vfprintf+0x34a>
    5e5c:	98 2c       	mov	r9, r8
    5e5e:	21 2c       	mov	r2, r1
    5e60:	a4 fe       	sbrs	r10, 4
    5e62:	0f c0       	rjmp	.+30     	; 0x5e82 <vfprintf+0x36c>
    5e64:	b6 01       	movw	r22, r12
    5e66:	80 e3       	ldi	r24, 0x30	; 48
    5e68:	90 e0       	ldi	r25, 0x00	; 0
    5e6a:	68 d0       	rcall	.+208    	; 0x5f3c <fputc>
    5e6c:	a2 fe       	sbrs	r10, 2
    5e6e:	16 c0       	rjmp	.+44     	; 0x5e9c <vfprintf+0x386>
    5e70:	a1 fc       	sbrc	r10, 1
    5e72:	03 c0       	rjmp	.+6      	; 0x5e7a <vfprintf+0x364>
    5e74:	88 e7       	ldi	r24, 0x78	; 120
    5e76:	90 e0       	ldi	r25, 0x00	; 0
    5e78:	02 c0       	rjmp	.+4      	; 0x5e7e <vfprintf+0x368>
    5e7a:	88 e5       	ldi	r24, 0x58	; 88
    5e7c:	90 e0       	ldi	r25, 0x00	; 0
    5e7e:	b6 01       	movw	r22, r12
    5e80:	0c c0       	rjmp	.+24     	; 0x5e9a <vfprintf+0x384>
    5e82:	8a 2d       	mov	r24, r10
    5e84:	86 78       	andi	r24, 0x86	; 134
    5e86:	51 f0       	breq	.+20     	; 0x5e9c <vfprintf+0x386>
    5e88:	a1 fe       	sbrs	r10, 1
    5e8a:	02 c0       	rjmp	.+4      	; 0x5e90 <vfprintf+0x37a>
    5e8c:	8b e2       	ldi	r24, 0x2B	; 43
    5e8e:	01 c0       	rjmp	.+2      	; 0x5e92 <vfprintf+0x37c>
    5e90:	80 e2       	ldi	r24, 0x20	; 32
    5e92:	a7 fc       	sbrc	r10, 7
    5e94:	8d e2       	ldi	r24, 0x2D	; 45
    5e96:	b6 01       	movw	r22, r12
    5e98:	90 e0       	ldi	r25, 0x00	; 0
    5e9a:	50 d0       	rcall	.+160    	; 0x5f3c <fputc>
    5e9c:	89 14       	cp	r8, r9
    5e9e:	30 f4       	brcc	.+12     	; 0x5eac <vfprintf+0x396>
    5ea0:	b6 01       	movw	r22, r12
    5ea2:	80 e3       	ldi	r24, 0x30	; 48
    5ea4:	90 e0       	ldi	r25, 0x00	; 0
    5ea6:	4a d0       	rcall	.+148    	; 0x5f3c <fputc>
    5ea8:	9a 94       	dec	r9
    5eaa:	f8 cf       	rjmp	.-16     	; 0x5e9c <vfprintf+0x386>
    5eac:	8a 94       	dec	r8
    5eae:	f3 01       	movw	r30, r6
    5eb0:	e8 0d       	add	r30, r8
    5eb2:	f1 1d       	adc	r31, r1
    5eb4:	80 81       	ld	r24, Z
    5eb6:	b6 01       	movw	r22, r12
    5eb8:	90 e0       	ldi	r25, 0x00	; 0
    5eba:	40 d0       	rcall	.+128    	; 0x5f3c <fputc>
    5ebc:	81 10       	cpse	r8, r1
    5ebe:	f6 cf       	rjmp	.-20     	; 0x5eac <vfprintf+0x396>
    5ec0:	22 20       	and	r2, r2
    5ec2:	09 f4       	brne	.+2      	; 0x5ec6 <vfprintf+0x3b0>
    5ec4:	4e ce       	rjmp	.-868    	; 0x5b62 <vfprintf+0x4c>
    5ec6:	b6 01       	movw	r22, r12
    5ec8:	80 e2       	ldi	r24, 0x20	; 32
    5eca:	90 e0       	ldi	r25, 0x00	; 0
    5ecc:	37 d0       	rcall	.+110    	; 0x5f3c <fputc>
    5ece:	2a 94       	dec	r2
    5ed0:	f7 cf       	rjmp	.-18     	; 0x5ec0 <vfprintf+0x3aa>
    5ed2:	f6 01       	movw	r30, r12
    5ed4:	86 81       	ldd	r24, Z+6	; 0x06
    5ed6:	97 81       	ldd	r25, Z+7	; 0x07
    5ed8:	02 c0       	rjmp	.+4      	; 0x5ede <vfprintf+0x3c8>
    5eda:	8f ef       	ldi	r24, 0xFF	; 255
    5edc:	9f ef       	ldi	r25, 0xFF	; 255
    5ede:	2b 96       	adiw	r28, 0x0b	; 11
    5ee0:	0f b6       	in	r0, 0x3f	; 63
    5ee2:	f8 94       	cli
    5ee4:	de bf       	out	0x3e, r29	; 62
    5ee6:	0f be       	out	0x3f, r0	; 63
    5ee8:	cd bf       	out	0x3d, r28	; 61
    5eea:	df 91       	pop	r29
    5eec:	cf 91       	pop	r28
    5eee:	1f 91       	pop	r17
    5ef0:	0f 91       	pop	r16
    5ef2:	ff 90       	pop	r15
    5ef4:	ef 90       	pop	r14
    5ef6:	df 90       	pop	r13
    5ef8:	cf 90       	pop	r12
    5efa:	bf 90       	pop	r11
    5efc:	af 90       	pop	r10
    5efe:	9f 90       	pop	r9
    5f00:	8f 90       	pop	r8
    5f02:	7f 90       	pop	r7
    5f04:	6f 90       	pop	r6
    5f06:	5f 90       	pop	r5
    5f08:	4f 90       	pop	r4
    5f0a:	3f 90       	pop	r3
    5f0c:	2f 90       	pop	r2
    5f0e:	08 95       	ret

00005f10 <strnlen_P>:
    5f10:	fc 01       	movw	r30, r24
    5f12:	05 90       	lpm	r0, Z+
    5f14:	61 50       	subi	r22, 0x01	; 1
    5f16:	70 40       	sbci	r23, 0x00	; 0
    5f18:	01 10       	cpse	r0, r1
    5f1a:	d8 f7       	brcc	.-10     	; 0x5f12 <strnlen_P+0x2>
    5f1c:	80 95       	com	r24
    5f1e:	90 95       	com	r25
    5f20:	8e 0f       	add	r24, r30
    5f22:	9f 1f       	adc	r25, r31
    5f24:	08 95       	ret

00005f26 <strnlen>:
    5f26:	fc 01       	movw	r30, r24
    5f28:	61 50       	subi	r22, 0x01	; 1
    5f2a:	70 40       	sbci	r23, 0x00	; 0
    5f2c:	01 90       	ld	r0, Z+
    5f2e:	01 10       	cpse	r0, r1
    5f30:	d8 f7       	brcc	.-10     	; 0x5f28 <strnlen+0x2>
    5f32:	80 95       	com	r24
    5f34:	90 95       	com	r25
    5f36:	8e 0f       	add	r24, r30
    5f38:	9f 1f       	adc	r25, r31
    5f3a:	08 95       	ret

00005f3c <fputc>:
    5f3c:	0f 93       	push	r16
    5f3e:	1f 93       	push	r17
    5f40:	cf 93       	push	r28
    5f42:	df 93       	push	r29
    5f44:	fb 01       	movw	r30, r22
    5f46:	23 81       	ldd	r18, Z+3	; 0x03
    5f48:	21 fd       	sbrc	r18, 1
    5f4a:	03 c0       	rjmp	.+6      	; 0x5f52 <fputc+0x16>
    5f4c:	8f ef       	ldi	r24, 0xFF	; 255
    5f4e:	9f ef       	ldi	r25, 0xFF	; 255
    5f50:	2c c0       	rjmp	.+88     	; 0x5faa <fputc+0x6e>
    5f52:	22 ff       	sbrs	r18, 2
    5f54:	16 c0       	rjmp	.+44     	; 0x5f82 <fputc+0x46>
    5f56:	46 81       	ldd	r20, Z+6	; 0x06
    5f58:	57 81       	ldd	r21, Z+7	; 0x07
    5f5a:	24 81       	ldd	r18, Z+4	; 0x04
    5f5c:	35 81       	ldd	r19, Z+5	; 0x05
    5f5e:	42 17       	cp	r20, r18
    5f60:	53 07       	cpc	r21, r19
    5f62:	44 f4       	brge	.+16     	; 0x5f74 <fputc+0x38>
    5f64:	a0 81       	ld	r26, Z
    5f66:	b1 81       	ldd	r27, Z+1	; 0x01
    5f68:	9d 01       	movw	r18, r26
    5f6a:	2f 5f       	subi	r18, 0xFF	; 255
    5f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    5f6e:	31 83       	std	Z+1, r19	; 0x01
    5f70:	20 83       	st	Z, r18
    5f72:	8c 93       	st	X, r24
    5f74:	26 81       	ldd	r18, Z+6	; 0x06
    5f76:	37 81       	ldd	r19, Z+7	; 0x07
    5f78:	2f 5f       	subi	r18, 0xFF	; 255
    5f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    5f7c:	37 83       	std	Z+7, r19	; 0x07
    5f7e:	26 83       	std	Z+6, r18	; 0x06
    5f80:	14 c0       	rjmp	.+40     	; 0x5faa <fputc+0x6e>
    5f82:	8b 01       	movw	r16, r22
    5f84:	ec 01       	movw	r28, r24
    5f86:	fb 01       	movw	r30, r22
    5f88:	00 84       	ldd	r0, Z+8	; 0x08
    5f8a:	f1 85       	ldd	r31, Z+9	; 0x09
    5f8c:	e0 2d       	mov	r30, r0
    5f8e:	19 95       	eicall
    5f90:	89 2b       	or	r24, r25
    5f92:	e1 f6       	brne	.-72     	; 0x5f4c <fputc+0x10>
    5f94:	d8 01       	movw	r26, r16
    5f96:	16 96       	adiw	r26, 0x06	; 6
    5f98:	8d 91       	ld	r24, X+
    5f9a:	9c 91       	ld	r25, X
    5f9c:	17 97       	sbiw	r26, 0x07	; 7
    5f9e:	01 96       	adiw	r24, 0x01	; 1
    5fa0:	17 96       	adiw	r26, 0x07	; 7
    5fa2:	9c 93       	st	X, r25
    5fa4:	8e 93       	st	-X, r24
    5fa6:	16 97       	sbiw	r26, 0x06	; 6
    5fa8:	ce 01       	movw	r24, r28
    5faa:	df 91       	pop	r29
    5fac:	cf 91       	pop	r28
    5fae:	1f 91       	pop	r17
    5fb0:	0f 91       	pop	r16
    5fb2:	08 95       	ret

00005fb4 <__ultoa_invert>:
    5fb4:	fa 01       	movw	r30, r20
    5fb6:	aa 27       	eor	r26, r26
    5fb8:	28 30       	cpi	r18, 0x08	; 8
    5fba:	51 f1       	breq	.+84     	; 0x6010 <__ultoa_invert+0x5c>
    5fbc:	20 31       	cpi	r18, 0x10	; 16
    5fbe:	81 f1       	breq	.+96     	; 0x6020 <__ultoa_invert+0x6c>
    5fc0:	e8 94       	clt
    5fc2:	6f 93       	push	r22
    5fc4:	6e 7f       	andi	r22, 0xFE	; 254
    5fc6:	6e 5f       	subi	r22, 0xFE	; 254
    5fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    5fca:	8f 4f       	sbci	r24, 0xFF	; 255
    5fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    5fce:	af 4f       	sbci	r26, 0xFF	; 255
    5fd0:	b1 e0       	ldi	r27, 0x01	; 1
    5fd2:	3e d0       	rcall	.+124    	; 0x6050 <__ultoa_invert+0x9c>
    5fd4:	b4 e0       	ldi	r27, 0x04	; 4
    5fd6:	3c d0       	rcall	.+120    	; 0x6050 <__ultoa_invert+0x9c>
    5fd8:	67 0f       	add	r22, r23
    5fda:	78 1f       	adc	r23, r24
    5fdc:	89 1f       	adc	r24, r25
    5fde:	9a 1f       	adc	r25, r26
    5fe0:	a1 1d       	adc	r26, r1
    5fe2:	68 0f       	add	r22, r24
    5fe4:	79 1f       	adc	r23, r25
    5fe6:	8a 1f       	adc	r24, r26
    5fe8:	91 1d       	adc	r25, r1
    5fea:	a1 1d       	adc	r26, r1
    5fec:	6a 0f       	add	r22, r26
    5fee:	71 1d       	adc	r23, r1
    5ff0:	81 1d       	adc	r24, r1
    5ff2:	91 1d       	adc	r25, r1
    5ff4:	a1 1d       	adc	r26, r1
    5ff6:	20 d0       	rcall	.+64     	; 0x6038 <__ultoa_invert+0x84>
    5ff8:	09 f4       	brne	.+2      	; 0x5ffc <__ultoa_invert+0x48>
    5ffa:	68 94       	set
    5ffc:	3f 91       	pop	r19
    5ffe:	2a e0       	ldi	r18, 0x0A	; 10
    6000:	26 9f       	mul	r18, r22
    6002:	11 24       	eor	r1, r1
    6004:	30 19       	sub	r19, r0
    6006:	30 5d       	subi	r19, 0xD0	; 208
    6008:	31 93       	st	Z+, r19
    600a:	de f6       	brtc	.-74     	; 0x5fc2 <__ultoa_invert+0xe>
    600c:	cf 01       	movw	r24, r30
    600e:	08 95       	ret
    6010:	46 2f       	mov	r20, r22
    6012:	47 70       	andi	r20, 0x07	; 7
    6014:	40 5d       	subi	r20, 0xD0	; 208
    6016:	41 93       	st	Z+, r20
    6018:	b3 e0       	ldi	r27, 0x03	; 3
    601a:	0f d0       	rcall	.+30     	; 0x603a <__ultoa_invert+0x86>
    601c:	c9 f7       	brne	.-14     	; 0x6010 <__ultoa_invert+0x5c>
    601e:	f6 cf       	rjmp	.-20     	; 0x600c <__ultoa_invert+0x58>
    6020:	46 2f       	mov	r20, r22
    6022:	4f 70       	andi	r20, 0x0F	; 15
    6024:	40 5d       	subi	r20, 0xD0	; 208
    6026:	4a 33       	cpi	r20, 0x3A	; 58
    6028:	18 f0       	brcs	.+6      	; 0x6030 <__ultoa_invert+0x7c>
    602a:	49 5d       	subi	r20, 0xD9	; 217
    602c:	31 fd       	sbrc	r19, 1
    602e:	40 52       	subi	r20, 0x20	; 32
    6030:	41 93       	st	Z+, r20
    6032:	02 d0       	rcall	.+4      	; 0x6038 <__ultoa_invert+0x84>
    6034:	a9 f7       	brne	.-22     	; 0x6020 <__ultoa_invert+0x6c>
    6036:	ea cf       	rjmp	.-44     	; 0x600c <__ultoa_invert+0x58>
    6038:	b4 e0       	ldi	r27, 0x04	; 4
    603a:	a6 95       	lsr	r26
    603c:	97 95       	ror	r25
    603e:	87 95       	ror	r24
    6040:	77 95       	ror	r23
    6042:	67 95       	ror	r22
    6044:	ba 95       	dec	r27
    6046:	c9 f7       	brne	.-14     	; 0x603a <__ultoa_invert+0x86>
    6048:	00 97       	sbiw	r24, 0x00	; 0
    604a:	61 05       	cpc	r22, r1
    604c:	71 05       	cpc	r23, r1
    604e:	08 95       	ret
    6050:	9b 01       	movw	r18, r22
    6052:	ac 01       	movw	r20, r24
    6054:	0a 2e       	mov	r0, r26
    6056:	06 94       	lsr	r0
    6058:	57 95       	ror	r21
    605a:	47 95       	ror	r20
    605c:	37 95       	ror	r19
    605e:	27 95       	ror	r18
    6060:	ba 95       	dec	r27
    6062:	c9 f7       	brne	.-14     	; 0x6056 <__ultoa_invert+0xa2>
    6064:	62 0f       	add	r22, r18
    6066:	73 1f       	adc	r23, r19
    6068:	84 1f       	adc	r24, r20
    606a:	95 1f       	adc	r25, r21
    606c:	a0 1d       	adc	r26, r0
    606e:	08 95       	ret

00006070 <_exit>:
    6070:	f8 94       	cli

00006072 <__stop_program>:
    6072:	ff cf       	rjmp	.-2      	; 0x6072 <__stop_program>
