
IOT_test_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000656  00800200  00006088  0000611c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006088  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000125a  00800856  00800856  00006772  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006772  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000067d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b28  00000000  00000000  00006810  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e6a6  00000000  00000000  00007338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039d1  00000000  00000000  000159de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006b08  00000000  00000000  000193af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000025d8  00000000  00000000  0001feb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000043cf  00000000  00000000  00022490  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000cb66  00000000  00000000  0002685f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b78  00000000  00000000  000333c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c2       	rjmp	.+1170   	; 0x494 <__ctors_end>
       2:	00 00       	nop
       4:	68 c2       	rjmp	.+1232   	; 0x4d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c2       	rjmp	.+1228   	; 0x4d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c2       	rjmp	.+1224   	; 0x4d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c2       	rjmp	.+1220   	; 0x4d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c2       	rjmp	.+1216   	; 0x4d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c2       	rjmp	.+1212   	; 0x4d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c2       	rjmp	.+1208   	; 0x4d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c2       	rjmp	.+1204   	; 0x4d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c2       	rjmp	.+1200   	; 0x4d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c2       	rjmp	.+1196   	; 0x4d6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c2       	rjmp	.+1192   	; 0x4d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__vector_12>
      34:	50 c2       	rjmp	.+1184   	; 0x4d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c2       	rjmp	.+1180   	; 0x4d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c2       	rjmp	.+1176   	; 0x4d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c2       	rjmp	.+1172   	; 0x4d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c2       	rjmp	.+1168   	; 0x4d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c2       	rjmp	.+1164   	; 0x4d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c2       	rjmp	.+1160   	; 0x4d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c2       	rjmp	.+1156   	; 0x4d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c2       	rjmp	.+1152   	; 0x4d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c2       	rjmp	.+1148   	; 0x4d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c2       	rjmp	.+1144   	; 0x4d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c2       	rjmp	.+1140   	; 0x4d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 66 25 	jmp	0x4acc	; 0x4acc <__vector_25>
      68:	0c 94 b8 25 	jmp	0x4b70	; 0x4b70 <__vector_26>
      6c:	34 c2       	rjmp	.+1128   	; 0x4d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c2       	rjmp	.+1124   	; 0x4d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c2       	rjmp	.+1120   	; 0x4d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c2       	rjmp	.+1116   	; 0x4d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c2       	rjmp	.+1112   	; 0x4d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c2       	rjmp	.+1108   	; 0x4d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c2       	rjmp	.+1104   	; 0x4d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c2       	rjmp	.+1100   	; 0x4d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c2       	rjmp	.+1096   	; 0x4d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 fc 25 	jmp	0x4bf8	; 0x4bf8 <__vector_36>
      94:	0c 94 4e 26 	jmp	0x4c9c	; 0x4c9c <__vector_37>
      98:	1e c2       	rjmp	.+1084   	; 0x4d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 e6 28 	jmp	0x51cc	; 0x51cc <__vector_39>
      a0:	1a c2       	rjmp	.+1076   	; 0x4d6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	18 c2       	rjmp	.+1072   	; 0x4d6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	16 c2       	rjmp	.+1068   	; 0x4d6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	14 c2       	rjmp	.+1064   	; 0x4d6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	12 c2       	rjmp	.+1060   	; 0x4d6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	10 c2       	rjmp	.+1056   	; 0x4d6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0e c2       	rjmp	.+1052   	; 0x4d6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c c2       	rjmp	.+1048   	; 0x4d6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	0a c2       	rjmp	.+1044   	; 0x4d6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	08 c2       	rjmp	.+1040   	; 0x4d6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	06 c2       	rjmp	.+1036   	; 0x4d6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 92 26 	jmp	0x4d24	; 0x4d24 <__vector_51>
      d0:	0c 94 e4 26 	jmp	0x4dc8	; 0x4dc8 <__vector_52>
      d4:	00 c2       	rjmp	.+1024   	; 0x4d6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <__vector_54>
      dc:	0c 94 7a 27 	jmp	0x4ef4	; 0x4ef4 <__vector_55>
      e0:	fa c1       	rjmp	.+1012   	; 0x4d6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c0 01       	movw	r24, r0
      e6:	c0 01       	movw	r24, r0
      e8:	c0 01       	movw	r24, r0
      ea:	fa 01       	movw	r30, r20
      ec:	02 02       	muls	r16, r18
      ee:	18 02       	muls	r17, r24
      f0:	c0 01       	movw	r24, r0
      f2:	c0 01       	movw	r24, r0
      f4:	fa 01       	movw	r30, r20
      f6:	02 02       	muls	r16, r18
      f8:	08 29       	or	r16, r8
      fa:	78 29       	or	r23, r8
      fc:	78 29       	or	r23, r8
      fe:	78 29       	or	r23, r8
     100:	78 29       	or	r23, r8
     102:	78 29       	or	r23, r8
     104:	78 29       	or	r23, r8
     106:	78 29       	or	r23, r8
     108:	08 29       	or	r16, r8
     10a:	78 29       	or	r23, r8
     10c:	78 29       	or	r23, r8
     10e:	78 29       	or	r23, r8
     110:	78 29       	or	r23, r8
     112:	78 29       	or	r23, r8
     114:	78 29       	or	r23, r8
     116:	78 29       	or	r23, r8
     118:	0a 29       	or	r16, r10
     11a:	78 29       	or	r23, r8
     11c:	78 29       	or	r23, r8
     11e:	78 29       	or	r23, r8
     120:	78 29       	or	r23, r8
     122:	78 29       	or	r23, r8
     124:	78 29       	or	r23, r8
     126:	78 29       	or	r23, r8
     128:	78 29       	or	r23, r8
     12a:	78 29       	or	r23, r8
     12c:	78 29       	or	r23, r8
     12e:	78 29       	or	r23, r8
     130:	78 29       	or	r23, r8
     132:	78 29       	or	r23, r8
     134:	78 29       	or	r23, r8
     136:	78 29       	or	r23, r8
     138:	0a 29       	or	r16, r10
     13a:	78 29       	or	r23, r8
     13c:	78 29       	or	r23, r8
     13e:	78 29       	or	r23, r8
     140:	78 29       	or	r23, r8
     142:	78 29       	or	r23, r8
     144:	78 29       	or	r23, r8
     146:	78 29       	or	r23, r8
     148:	78 29       	or	r23, r8
     14a:	78 29       	or	r23, r8
     14c:	78 29       	or	r23, r8
     14e:	78 29       	or	r23, r8
     150:	78 29       	or	r23, r8
     152:	78 29       	or	r23, r8
     154:	78 29       	or	r23, r8
     156:	78 29       	or	r23, r8
     158:	74 29       	or	r23, r4
     15a:	78 29       	or	r23, r8
     15c:	78 29       	or	r23, r8
     15e:	78 29       	or	r23, r8
     160:	78 29       	or	r23, r8
     162:	78 29       	or	r23, r8
     164:	78 29       	or	r23, r8
     166:	78 29       	or	r23, r8
     168:	3f 29       	or	r19, r15
     16a:	78 29       	or	r23, r8
     16c:	78 29       	or	r23, r8
     16e:	78 29       	or	r23, r8
     170:	78 29       	or	r23, r8
     172:	78 29       	or	r23, r8
     174:	78 29       	or	r23, r8
     176:	78 29       	or	r23, r8
     178:	78 29       	or	r23, r8
     17a:	78 29       	or	r23, r8
     17c:	78 29       	or	r23, r8
     17e:	78 29       	or	r23, r8
     180:	78 29       	or	r23, r8
     182:	78 29       	or	r23, r8
     184:	78 29       	or	r23, r8
     186:	78 29       	or	r23, r8
     188:	33 29       	or	r19, r3
     18a:	78 29       	or	r23, r8
     18c:	78 29       	or	r23, r8
     18e:	78 29       	or	r23, r8
     190:	78 29       	or	r23, r8
     192:	78 29       	or	r23, r8
     194:	78 29       	or	r23, r8
     196:	78 29       	or	r23, r8
     198:	57 29       	or	r21, r7

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0d e9       	ldi	r16, 0x9D	; 157
     19c:	18 e1       	ldi	r17, 0x18	; 24
     19e:	0f 2e       	mov	r0, r31
     1a0:	fd ec       	ldi	r31, 0xCD	; 205
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 9c 18 	lds	r24, 0x189C	; 0x80189c <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	58 d7       	rcall	.+3760   	; 0x107c <uxListRemove>
     1cc:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 90 18 	sts	0x1890, r24	; 0x801890 <uxCurrentNumberOfTasks>
     1d6:	80 91 9c 18 	lds	r24, 0x189C	; 0x80189c <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 9c 18 	sts	0x189C, r24	; 0x80189c <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e8:	a5 d6       	rcall	.+3402   	; 0xf34 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	a3 d6       	rcall	.+3398   	; 0xf34 <vPortFree>
     1ee:	80 91 9c 18 	lds	r24, 0x189C	; 0x80189c <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	10 f0       	brcs	.+4      	; 0x202 <prvIdleTask+0x68>
     1fe:	0e 94 13 09 	call	0x1226	; 0x1226 <vPortYield>
     202:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vApplicationIdleHook>
     206:	d1 cf       	rjmp	.-94     	; 0x1aa <prvIdleTask+0x10>

00000208 <prvTimerTask>:
     208:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20a:	df 93       	push	r29
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	60 97       	sbiw	r28, 0x10	; 16
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	de bf       	out	0x3e, r29	; 62
     218:	0f be       	out	0x3f, r0	; 63
     21a:	cd bf       	out	0x3d, r28	; 61
     21c:	ce 01       	movw	r24, r28
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	9a 87       	std	Y+10, r25	; 0x0a
     222:	89 87       	std	Y+9, r24	; 0x09
     224:	81 2c       	mov	r8, r1
     226:	91 2c       	mov	r9, r1
     228:	a1 2c       	mov	r10, r1
     22a:	b1 2c       	mov	r11, r1
     22c:	69 84       	ldd	r6, Y+9	; 0x09
     22e:	7a 84       	ldd	r7, Y+10	; 0x0a
     230:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <pxCurrentTimerList>
     234:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <pxCurrentTimerList+0x1>
     238:	80 81       	ld	r24, Z
     23a:	88 23       	and	r24, r24
     23c:	09 f4       	brne	.+2      	; 0x240 <prvTimerTask+0x38>
     23e:	10 c1       	rjmp	.+544    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     240:	07 80       	ldd	r0, Z+7	; 0x07
     242:	f0 85       	ldd	r31, Z+8	; 0x08
     244:	e0 2d       	mov	r30, r0
     246:	20 80       	ld	r2, Z
     248:	31 80       	ldd	r3, Z+1	; 0x01
     24a:	42 80       	ldd	r4, Z+2	; 0x02
     24c:	53 80       	ldd	r5, Z+3	; 0x03
     24e:	0e 94 73 12 	call	0x24e6	; 0x24e6 <vTaskSuspendAll>
     252:	ce 01       	movw	r24, r28
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	0e 94 f6 19 	call	0x33ec	; 0x33ec <prvSampleTimeNow>
     25a:	6b 87       	std	Y+11, r22	; 0x0b
     25c:	7c 87       	std	Y+12, r23	; 0x0c
     25e:	8d 87       	std	Y+13, r24	; 0x0d
     260:	9e 87       	std	Y+14, r25	; 0x0e
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	81 11       	cpse	r24, r1
     266:	65 c0       	rjmp	.+202    	; 0x332 <prvTimerTask+0x12a>
     268:	8b 85       	ldd	r24, Y+11	; 0x0b
     26a:	9c 85       	ldd	r25, Y+12	; 0x0c
     26c:	ad 85       	ldd	r26, Y+13	; 0x0d
     26e:	be 85       	ldd	r27, Y+14	; 0x0e
     270:	82 15       	cp	r24, r2
     272:	93 05       	cpc	r25, r3
     274:	a4 05       	cpc	r26, r4
     276:	b5 05       	cpc	r27, r5
     278:	08 f4       	brcc	.+2      	; 0x27c <prvTimerTask+0x74>
     27a:	44 c0       	rjmp	.+136    	; 0x304 <prvTimerTask+0xfc>
     27c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <xTaskResumeAll>
     280:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <pxCurrentTimerList>
     284:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <pxCurrentTimerList+0x1>
     288:	07 80       	ldd	r0, Z+7	; 0x07
     28a:	f0 85       	ldd	r31, Z+8	; 0x08
     28c:	e0 2d       	mov	r30, r0
     28e:	a0 85       	ldd	r26, Z+8	; 0x08
     290:	b1 85       	ldd	r27, Z+9	; 0x09
     292:	b8 8b       	std	Y+16, r27	; 0x10
     294:	af 87       	std	Y+15, r26	; 0x0f
     296:	cd 01       	movw	r24, r26
     298:	02 96       	adiw	r24, 0x02	; 2
     29a:	f0 d6       	rcall	.+3552   	; 0x107c <uxListRemove>
     29c:	ef 85       	ldd	r30, Y+15	; 0x0f
     29e:	f8 89       	ldd	r31, Y+16	; 0x10
     2a0:	87 89       	ldd	r24, Z+23	; 0x17
     2a2:	82 ff       	sbrs	r24, 2
     2a4:	21 c0       	rjmp	.+66     	; 0x2e8 <prvTimerTask+0xe0>
     2a6:	46 85       	ldd	r20, Z+14	; 0x0e
     2a8:	57 85       	ldd	r21, Z+15	; 0x0f
     2aa:	60 89       	ldd	r22, Z+16	; 0x10
     2ac:	71 89       	ldd	r23, Z+17	; 0x11
     2ae:	42 0d       	add	r20, r2
     2b0:	53 1d       	adc	r21, r3
     2b2:	64 1d       	adc	r22, r4
     2b4:	75 1d       	adc	r23, r5
     2b6:	72 01       	movw	r14, r4
     2b8:	61 01       	movw	r12, r2
     2ba:	0b 85       	ldd	r16, Y+11	; 0x0b
     2bc:	1c 85       	ldd	r17, Y+12	; 0x0c
     2be:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c0:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c2:	cf 01       	movw	r24, r30
     2c4:	0e 94 05 19 	call	0x320a	; 0x320a <prvInsertTimerInActiveList>
     2c8:	88 23       	and	r24, r24
     2ca:	99 f0       	breq	.+38     	; 0x2f2 <prvTimerTask+0xea>
     2cc:	c8 2c       	mov	r12, r8
     2ce:	d9 2c       	mov	r13, r9
     2d0:	ea 2c       	mov	r14, r10
     2d2:	fb 2c       	mov	r15, r11
     2d4:	00 e0       	ldi	r16, 0x00	; 0
     2d6:	10 e0       	ldi	r17, 0x00	; 0
     2d8:	a2 01       	movw	r20, r4
     2da:	91 01       	movw	r18, r2
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e0:	98 89       	ldd	r25, Y+16	; 0x10
     2e2:	0e 94 98 19 	call	0x3330	; 0x3330 <xTimerGenericCommand>
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <prvTimerTask+0xea>
     2e8:	8e 7f       	andi	r24, 0xFE	; 254
     2ea:	af 85       	ldd	r26, Y+15	; 0x0f
     2ec:	b8 89       	ldd	r27, Y+16	; 0x10
     2ee:	57 96       	adiw	r26, 0x17	; 23
     2f0:	8c 93       	st	X, r24
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	54 96       	adiw	r26, 0x14	; 20
     2f8:	ed 91       	ld	r30, X+
     2fa:	fc 91       	ld	r31, X
     2fc:	55 97       	sbiw	r26, 0x15	; 21
     2fe:	cd 01       	movw	r24, r26
     300:	19 95       	eicall
     302:	9f c0       	rjmp	.+318    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	b2 01       	movw	r22, r4
     308:	a1 01       	movw	r20, r2
     30a:	8b 85       	ldd	r24, Y+11	; 0x0b
     30c:	9c 85       	ldd	r25, Y+12	; 0x0c
     30e:	ad 85       	ldd	r26, Y+13	; 0x0d
     310:	be 85       	ldd	r27, Y+14	; 0x0e
     312:	48 1b       	sub	r20, r24
     314:	59 0b       	sbc	r21, r25
     316:	6a 0b       	sbc	r22, r26
     318:	7b 0b       	sbc	r23, r27
     31a:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <xTimerQueue>
     31e:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <xTimerQueue+0x1>
     322:	0e 94 77 0d 	call	0x1aee	; 0x1aee <vQueueWaitForMessageRestricted>
     326:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <xTaskResumeAll>
     32a:	81 11       	cpse	r24, r1
     32c:	8a c0       	rjmp	.+276    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     32e:	7b d7       	rcall	.+3830   	; 0x1226 <vPortYield>
     330:	88 c0       	rjmp	.+272    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     332:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <xTaskResumeAll>
     336:	85 c0       	rjmp	.+266    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	88 23       	and	r24, r24
     33c:	0c f4       	brge	.+2      	; 0x340 <prvTimerTask+0x138>
     33e:	81 c0       	rjmp	.+258    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     340:	4e 80       	ldd	r4, Y+6	; 0x06
     342:	5f 80       	ldd	r5, Y+7	; 0x07
     344:	d2 01       	movw	r26, r4
     346:	1c 96       	adiw	r26, 0x0c	; 12
     348:	8d 91       	ld	r24, X+
     34a:	9c 91       	ld	r25, X
     34c:	1d 97       	sbiw	r26, 0x0d	; 13
     34e:	89 2b       	or	r24, r25
     350:	19 f0       	breq	.+6      	; 0x358 <prvTimerTask+0x150>
     352:	c2 01       	movw	r24, r4
     354:	02 96       	adiw	r24, 0x02	; 2
     356:	92 d6       	rcall	.+3364   	; 0x107c <uxListRemove>
     358:	ce 01       	movw	r24, r28
     35a:	08 96       	adiw	r24, 0x08	; 8
     35c:	0e 94 f6 19 	call	0x33ec	; 0x33ec <prvSampleTimeNow>
     360:	8b 01       	movw	r16, r22
     362:	9c 01       	movw	r18, r24
     364:	e9 81       	ldd	r30, Y+1	; 0x01
     366:	0e 2e       	mov	r0, r30
     368:	00 0c       	add	r0, r0
     36a:	ff 0b       	sbc	r31, r31
     36c:	ea 30       	cpi	r30, 0x0A	; 10
     36e:	f1 05       	cpc	r31, r1
     370:	08 f0       	brcs	.+2      	; 0x374 <prvTimerTask+0x16c>
     372:	67 c0       	rjmp	.+206    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     374:	88 27       	eor	r24, r24
     376:	ee 58       	subi	r30, 0x8E	; 142
     378:	ff 4f       	sbci	r31, 0xFF	; 255
     37a:	8f 4f       	sbci	r24, 0xFF	; 255
     37c:	0c 94 7e 2b 	jmp	0x56fc	; 0x56fc <__tablejump2__>
     380:	f2 01       	movw	r30, r4
     382:	87 89       	ldd	r24, Z+23	; 0x17
     384:	81 60       	ori	r24, 0x01	; 1
     386:	87 8b       	std	Z+23, r24	; 0x17
     388:	ca 80       	ldd	r12, Y+2	; 0x02
     38a:	db 80       	ldd	r13, Y+3	; 0x03
     38c:	ec 80       	ldd	r14, Y+4	; 0x04
     38e:	fd 80       	ldd	r15, Y+5	; 0x05
     390:	46 85       	ldd	r20, Z+14	; 0x0e
     392:	57 85       	ldd	r21, Z+15	; 0x0f
     394:	60 89       	ldd	r22, Z+16	; 0x10
     396:	71 89       	ldd	r23, Z+17	; 0x11
     398:	4c 0d       	add	r20, r12
     39a:	5d 1d       	adc	r21, r13
     39c:	6e 1d       	adc	r22, r14
     39e:	7f 1d       	adc	r23, r15
     3a0:	c2 01       	movw	r24, r4
     3a2:	0e 94 05 19 	call	0x320a	; 0x320a <prvInsertTimerInActiveList>
     3a6:	88 23       	and	r24, r24
     3a8:	09 f4       	brne	.+2      	; 0x3ac <prvTimerTask+0x1a4>
     3aa:	4b c0       	rjmp	.+150    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3ac:	d2 01       	movw	r26, r4
     3ae:	54 96       	adiw	r26, 0x14	; 20
     3b0:	ed 91       	ld	r30, X+
     3b2:	fc 91       	ld	r31, X
     3b4:	55 97       	sbiw	r26, 0x15	; 21
     3b6:	c2 01       	movw	r24, r4
     3b8:	19 95       	eicall
     3ba:	f2 01       	movw	r30, r4
     3bc:	87 89       	ldd	r24, Z+23	; 0x17
     3be:	82 ff       	sbrs	r24, 2
     3c0:	40 c0       	rjmp	.+128    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3c2:	4a 81       	ldd	r20, Y+2	; 0x02
     3c4:	5b 81       	ldd	r21, Y+3	; 0x03
     3c6:	6c 81       	ldd	r22, Y+4	; 0x04
     3c8:	7d 81       	ldd	r23, Y+5	; 0x05
     3ca:	86 85       	ldd	r24, Z+14	; 0x0e
     3cc:	97 85       	ldd	r25, Z+15	; 0x0f
     3ce:	a0 89       	ldd	r26, Z+16	; 0x10
     3d0:	b1 89       	ldd	r27, Z+17	; 0x11
     3d2:	9a 01       	movw	r18, r20
     3d4:	ab 01       	movw	r20, r22
     3d6:	28 0f       	add	r18, r24
     3d8:	39 1f       	adc	r19, r25
     3da:	4a 1f       	adc	r20, r26
     3dc:	5b 1f       	adc	r21, r27
     3de:	c8 2c       	mov	r12, r8
     3e0:	d9 2c       	mov	r13, r9
     3e2:	ea 2c       	mov	r14, r10
     3e4:	fb 2c       	mov	r15, r11
     3e6:	00 e0       	ldi	r16, 0x00	; 0
     3e8:	10 e0       	ldi	r17, 0x00	; 0
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	c2 01       	movw	r24, r4
     3ee:	0e 94 98 19 	call	0x3330	; 0x3330 <xTimerGenericCommand>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3f4:	d2 01       	movw	r26, r4
     3f6:	57 96       	adiw	r26, 0x17	; 23
     3f8:	8c 91       	ld	r24, X
     3fa:	57 97       	sbiw	r26, 0x17	; 23
     3fc:	8e 7f       	andi	r24, 0xFE	; 254
     3fe:	57 96       	adiw	r26, 0x17	; 23
     400:	8c 93       	st	X, r24
     402:	1f c0       	rjmp	.+62     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     404:	f2 01       	movw	r30, r4
     406:	87 89       	ldd	r24, Z+23	; 0x17
     408:	81 60       	ori	r24, 0x01	; 1
     40a:	87 8b       	std	Z+23, r24	; 0x17
     40c:	4a 81       	ldd	r20, Y+2	; 0x02
     40e:	5b 81       	ldd	r21, Y+3	; 0x03
     410:	6c 81       	ldd	r22, Y+4	; 0x04
     412:	7d 81       	ldd	r23, Y+5	; 0x05
     414:	46 87       	std	Z+14, r20	; 0x0e
     416:	57 87       	std	Z+15, r21	; 0x0f
     418:	60 8b       	std	Z+16, r22	; 0x10
     41a:	71 8b       	std	Z+17, r23	; 0x11
     41c:	40 0f       	add	r20, r16
     41e:	51 1f       	adc	r21, r17
     420:	62 1f       	adc	r22, r18
     422:	73 1f       	adc	r23, r19
     424:	68 01       	movw	r12, r16
     426:	79 01       	movw	r14, r18
     428:	c2 01       	movw	r24, r4
     42a:	0e 94 05 19 	call	0x320a	; 0x320a <prvInsertTimerInActiveList>
     42e:	09 c0       	rjmp	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     430:	f2 01       	movw	r30, r4
     432:	87 89       	ldd	r24, Z+23	; 0x17
     434:	81 fd       	sbrc	r24, 1
     436:	03 c0       	rjmp	.+6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     438:	c2 01       	movw	r24, r4
     43a:	7c d5       	rcall	.+2808   	; 0xf34 <vPortFree>
     43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     43e:	8e 7f       	andi	r24, 0xFE	; 254
     440:	87 8b       	std	Z+23, r24	; 0x17
     442:	28 2d       	mov	r18, r8
     444:	39 2d       	mov	r19, r9
     446:	4a 2d       	mov	r20, r10
     448:	5b 2d       	mov	r21, r11
     44a:	66 2d       	mov	r22, r6
     44c:	77 2d       	mov	r23, r7
     44e:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <xTimerQueue>
     452:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <xTimerQueue+0x1>
     456:	0e 94 11 0c 	call	0x1822	; 0x1822 <xQueueReceive>
     45a:	81 11       	cpse	r24, r1
     45c:	6d cf       	rjmp	.-294    	; 0x338 <prvTimerTask+0x130>
     45e:	e8 ce       	rjmp	.-560    	; 0x230 <prvTimerTask+0x28>
     460:	0e 94 73 12 	call	0x24e6	; 0x24e6 <vTaskSuspendAll>
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	0e 94 f6 19 	call	0x33ec	; 0x33ec <prvSampleTimeNow>
     46c:	6b 87       	std	Y+11, r22	; 0x0b
     46e:	7c 87       	std	Y+12, r23	; 0x0c
     470:	8d 87       	std	Y+13, r24	; 0x0d
     472:	9e 87       	std	Y+14, r25	; 0x0e
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	81 11       	cpse	r24, r1
     478:	5c cf       	rjmp	.-328    	; 0x332 <prvTimerTask+0x12a>
     47a:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <pxOverflowTimerList>
     47e:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <pxOverflowTimerList+0x1>
     482:	80 81       	ld	r24, Z
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	81 11       	cpse	r24, r1
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	28 2c       	mov	r2, r8
     48c:	39 2c       	mov	r3, r9
     48e:	4a 2c       	mov	r4, r10
     490:	5b 2c       	mov	r5, r11
     492:	39 cf       	rjmp	.-398    	; 0x306 <prvTimerTask+0xfe>

00000494 <__ctors_end>:
     494:	11 24       	eor	r1, r1
     496:	1f be       	out	0x3f, r1	; 63
     498:	cf ef       	ldi	r28, 0xFF	; 255
     49a:	d1 e2       	ldi	r29, 0x21	; 33
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	00 e0       	ldi	r16, 0x00	; 0
     4a2:	0c bf       	out	0x3c, r16	; 60

000004a4 <__do_copy_data>:
     4a4:	18 e0       	ldi	r17, 0x08	; 8
     4a6:	a0 e0       	ldi	r26, 0x00	; 0
     4a8:	b2 e0       	ldi	r27, 0x02	; 2
     4aa:	e8 e8       	ldi	r30, 0x88	; 136
     4ac:	f0 e6       	ldi	r31, 0x60	; 96
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0b bf       	out	0x3b, r16	; 59
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__do_copy_data+0x14>
     4b4:	07 90       	elpm	r0, Z+
     4b6:	0d 92       	st	X+, r0
     4b8:	a6 35       	cpi	r26, 0x56	; 86
     4ba:	b1 07       	cpc	r27, r17
     4bc:	d9 f7       	brne	.-10     	; 0x4b4 <__do_copy_data+0x10>

000004be <__do_clear_bss>:
     4be:	2a e1       	ldi	r18, 0x1A	; 26
     4c0:	a6 e5       	ldi	r26, 0x56	; 86
     4c2:	b8 e0       	ldi	r27, 0x08	; 8
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <.do_clear_bss_start>

000004c6 <.do_clear_bss_loop>:
     4c6:	1d 92       	st	X+, r1

000004c8 <.do_clear_bss_start>:
     4c8:	a0 3b       	cpi	r26, 0xB0	; 176
     4ca:	b2 07       	cpc	r27, r18
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <.do_clear_bss_loop>
     4ce:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <main>
     4d2:	0c 94 42 30 	jmp	0x6084	; 0x6084 <_exit>

000004d6 <__bad_interrupt>:
     4d6:	94 cd       	rjmp	.-1240   	; 0x0 <__vectors>

000004d8 <CO2_handler_task>:
				rc = mh_z19_take_meassuring();
				if (rc != MHZ19_OK)
				{
					printf("%s\n","Arduino measurement taking from sensor went wrong!"); 
				}
				 printf("%s%i\n","Arduino measurement CO2: ", (int)getCO2());	
     4d8:	0f 2e       	mov	r0, r31
     4da:	f1 ea       	ldi	r31, 0xA1	; 161
     4dc:	af 2e       	mov	r10, r31
     4de:	f2 e0       	ldi	r31, 0x02	; 2
     4e0:	bf 2e       	mov	r11, r31
     4e2:	f0 2d       	mov	r31, r0
     4e4:	cb eb       	ldi	r28, 0xBB	; 187
     4e6:	d2 e0       	ldi	r29, 0x02	; 2
{

	for (;;) 
	{
		
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, CO2_measure_bit, pdTRUE, pdTRUE, 500);
     4e8:	0f 2e       	mov	r0, r31
     4ea:	f4 ef       	ldi	r31, 0xF4	; 244
     4ec:	cf 2e       	mov	r12, r31
     4ee:	dd 24       	eor	r13, r13
     4f0:	d3 94       	inc	r13
     4f2:	e1 2c       	mov	r14, r1
     4f4:	f1 2c       	mov	r15, r1
     4f6:	f0 2d       	mov	r31, r0
     4f8:	01 e0       	ldi	r16, 0x01	; 1
     4fa:	21 e0       	ldi	r18, 0x01	; 1
     4fc:	41 e0       	ldi	r20, 0x01	; 1
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	80 91 7e 1a 	lds	r24, 0x1A7E	; 0x801a7e <Measure_event_group>
     508:	90 91 7f 1a 	lds	r25, 0x1A7F	; 0x801a7f <Measure_event_group+0x1>
     50c:	b4 d2       	rcall	.+1384   	; 0xa76 <xEventGroupWaitBits>
		if((measureBits & (CO2_measure_bit)) == (CO2_measure_bit))
     50e:	60 ff       	sbrs	r22, 0
     510:	eb cf       	rjmp	.-42     	; 0x4e8 <CO2_handler_task+0x10>
		{
				rc = mh_z19_take_meassuring();
     512:	0e 94 0f 24 	call	0x481e	; 0x481e <mh_z19_take_meassuring>
     516:	80 93 79 1a 	sts	0x1A79, r24	; 0x801a79 <rc>
				if (rc != MHZ19_OK)
     51a:	88 23       	and	r24, r24
     51c:	21 f0       	breq	.+8      	; 0x526 <CO2_handler_task+0x4e>
				{
					printf("%s\n","Arduino measurement taking from sensor went wrong!"); 
     51e:	8e e6       	ldi	r24, 0x6E	; 110
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <puts>
				}
				 printf("%s%i\n","Arduino measurement CO2: ", (int)getCO2());	
     526:	ac d1       	rcall	.+856    	; 0x880 <getCO2>
     528:	9f 93       	push	r25
     52a:	8f 93       	push	r24
     52c:	bf 92       	push	r11
     52e:	af 92       	push	r10
     530:	df 93       	push	r29
     532:	cf 93       	push	r28
     534:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <printf>
				xEventGroupSetBits(Data_event_group, CO2_data_bit);
     538:	44 e0       	ldi	r20, 0x04	; 4
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <Data_event_group>
     544:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <Data_event_group+0x1>
     548:	56 d3       	rcall	.+1708   	; 0xbf6 <xEventGroupSetBits>
				vTaskDelay(200);
     54a:	68 ec       	ldi	r22, 0xC8	; 200
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 36 14 	call	0x286c	; 0x286c <vTaskDelay>
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	c2 cf       	rjmp	.-124    	; 0x4e8 <CO2_handler_task+0x10>

00000564 <CO2Sensor_create>:
mh_z19_return_code_t rc;
	
void CO2_handler_task( void *pvParameters );

void CO2Sensor_create()
{
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
	mh_z19_create(ser_USART3, setCO2);
     56a:	63 e5       	ldi	r22, 0x53	; 83
     56c:	74 e0       	ldi	r23, 0x04	; 4
     56e:	83 e0       	ldi	r24, 0x03	; 3
     570:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <mh_z19_create>
	xTaskCreate(
     574:	e1 2c       	mov	r14, r1
     576:	f1 2c       	mov	r15, r1
     578:	03 e0       	ldi	r16, 0x03	; 3
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	48 e8       	ldi	r20, 0x88	; 136
     580:	51 e0       	ldi	r21, 0x01	; 1
     582:	61 ec       	ldi	r22, 0xC1	; 193
     584:	72 e0       	ldi	r23, 0x02	; 2
     586:	8c e6       	ldi	r24, 0x6C	; 108
     588:	92 e0       	ldi	r25, 0x02	; 2
     58a:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskCreate>
		configMINIMAL_STACK_SIZE+200,
		NULL,
		3,
		NULL 
	);
}
     58e:	0f 91       	pop	r16
     590:	ff 90       	pop	r15
     592:	ef 90       	pop	r14
     594:	08 95       	ret

00000596 <lora_handler_task>:
	}
}

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	00 d0       	rcall	.+0      	; 0x59c <lora_handler_task+0x6>
     59c:	1f 92       	push	r1
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
	static e_LoRa_return_code_t rc;
		
	
	
	// Hardware reset of LoRaWAN transceiver
	lora_driver_reset_rn2483(1);
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	0e 94 27 20 	call	0x404e	; 0x404e <lora_driver_reset_rn2483>
	vTaskDelay(2);
     5a8:	62 e0       	ldi	r22, 0x02	; 2
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 36 14 	call	0x286c	; 0x286c <vTaskDelay>
	lora_driver_reset_rn2483(0);
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	0e 94 27 20 	call	0x404e	; 0x404e <lora_driver_reset_rn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     5ba:	66 e9       	ldi	r22, 0x96	; 150
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 36 14 	call	0x286c	; 0x286c <vTaskDelay>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     5c6:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <lora_driver_flush_buffers>

static void _lora_setup(void)
{
	
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <led_slow_blink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     5d0:	0e 94 3b 20 	call	0x4076	; 0x4076 <lora_driver_rn2483_factory_reset>
     5d4:	0e 94 b8 22 	call	0x4570	; 0x4570 <lora_driver_map_return_code_to_text>
     5d8:	9f 93       	push	r25
     5da:	8f 93       	push	r24
     5dc:	8d ec       	ldi	r24, 0xCD	; 205
     5de:	92 e0       	ldi	r25, 0x02	; 2
     5e0:	9f 93       	push	r25
     5e2:	8f 93       	push	r24
     5e4:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <printf>
	

	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     5e8:	0e 94 b9 21 	call	0x4372	; 0x4372 <lora_driver_configure_to_eu868>
     5ec:	0e 94 b8 22 	call	0x4570	; 0x4570 <lora_driver_map_return_code_to_text>
     5f0:	9f 93       	push	r25
     5f2:	8f 93       	push	r24
     5f4:	80 ee       	ldi	r24, 0xE0	; 224
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	9f 93       	push	r25
     5fa:	8f 93       	push	r24
     5fc:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     600:	8c e6       	ldi	r24, 0x6C	; 108
     602:	98 e0       	ldi	r25, 0x08	; 8
     604:	0e 94 4d 20 	call	0x409a	; 0x409a <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     608:	0e 94 b8 22 	call	0x4570	; 0x4570 <lora_driver_map_return_code_to_text>
     60c:	0c e6       	ldi	r16, 0x6C	; 108
     60e:	18 e0       	ldi	r17, 0x08	; 8
     610:	1f 93       	push	r17
     612:	0f 93       	push	r16
     614:	9f 93       	push	r25
     616:	8f 93       	push	r24
     618:	89 ef       	ldi	r24, 0xF9	; 249
     61a:	92 e0       	ldi	r25, 0x02	; 2
     61c:	9f 93       	push	r25
     61e:	8f 93       	push	r24
     620:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     624:	c8 01       	movw	r24, r16
     626:	0e 94 69 20 	call	0x40d2	; 0x40d2 <lora_driver_set_device_identifier>
     62a:	0e 94 b8 22 	call	0x4570	; 0x4570 <lora_driver_map_return_code_to_text>
     62e:	9f 93       	push	r25
     630:	8f 93       	push	r24
     632:	1f 93       	push	r17
     634:	0f 93       	push	r16
     636:	8d e0       	ldi	r24, 0x0D	; 13
     638:	93 e0       	ldi	r25, 0x03	; 3
     63a:	9f 93       	push	r25
     63c:	8f 93       	push	r24
     63e:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     642:	a8 01       	movw	r20, r16
     644:	62 e2       	ldi	r22, 0x22	; 34
     646:	73 e0       	ldi	r23, 0x03	; 3
     648:	83 e4       	ldi	r24, 0x43	; 67
     64a:	93 e0       	ldi	r25, 0x03	; 3
     64c:	0e 94 97 22 	call	0x452e	; 0x452e <lora_driver_set_otaa_identity>
     650:	0e 94 b8 22 	call	0x4570	; 0x4570 <lora_driver_map_return_code_to_text>
     654:	9f 93       	push	r25
     656:	8f 93       	push	r24
     658:	1f 93       	push	r17
     65a:	0f 93       	push	r16
     65c:	82 e2       	ldi	r24, 0x22	; 34
     65e:	93 e0       	ldi	r25, 0x03	; 3
     660:	9f 93       	push	r25
     662:	8f 93       	push	r24
     664:	83 e4       	ldi	r24, 0x43	; 67
     666:	93 e0       	ldi	r25, 0x03	; 3
     668:	9f 93       	push	r25
     66a:	8f 93       	push	r24
     66c:	84 e5       	ldi	r24, 0x54	; 84
     66e:	93 e0       	ldi	r25, 0x03	; 3
     670:	9f 93       	push	r25
     672:	8f 93       	push	r24
     674:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     678:	0e 94 9c 20 	call	0x4138	; 0x4138 <lora_driver_save_mac>
     67c:	0e 94 b8 22 	call	0x4570	; 0x4570 <lora_driver_map_return_code_to_text>
     680:	9f 93       	push	r25
     682:	8f 93       	push	r24
     684:	8a e8       	ldi	r24, 0x8A	; 138
     686:	93 e0       	ldi	r25, 0x03	; 3
     688:	9f 93       	push	r25
     68a:	8f 93       	push	r24
     68c:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	de bf       	out	0x3e, r29	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	cd bf       	out	0x3d, r28	; 61
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	0e 94 96 21 	call	0x432c	; 0x432c <lora_driver_set_adaptive_data_rate>
     6a0:	0e 94 b8 22 	call	0x4570	; 0x4570 <lora_driver_map_return_code_to_text>
     6a4:	9f 93       	push	r25
     6a6:	8f 93       	push	r24
     6a8:	89 e9       	ldi	r24, 0x99	; 153
     6aa:	93 e0       	ldi	r25, 0x03	; 3
     6ac:	9f 93       	push	r25
     6ae:	8f 93       	push	r24
     6b0:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     6b4:	84 ef       	ldi	r24, 0xF4	; 244
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	0e 94 a1 21 	call	0x4342	; 0x4342 <lora_driver_set_receive_delay>
     6bc:	0e 94 b8 22 	call	0x4570	; 0x4570 <lora_driver_map_return_code_to_text>
     6c0:	9f 93       	push	r25
     6c2:	8f 93       	push	r24
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	8f 93       	push	r24
     6c8:	84 ef       	ldi	r24, 0xF4	; 244
     6ca:	8f 93       	push	r24
     6cc:	8a eb       	ldi	r24, 0xBA	; 186
     6ce:	93 e0       	ldi	r25, 0x03	; 3
     6d0:	9f 93       	push	r25
     6d2:	8f 93       	push	r24
     6d4:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <printf>
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	f8 94       	cli
     6dc:	de bf       	out	0x3e, r29	; 62
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	cd bf       	out	0x3d, r28	; 61
     6e2:	0a e0       	ldi	r16, 0x0A	; 10
     6e4:	10 e0       	ldi	r17, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     6e6:	0f 2e       	mov	r0, r31
     6e8:	fa ed       	ldi	r31, 0xDA	; 218
     6ea:	ef 2e       	mov	r14, r31
     6ec:	f3 e0       	ldi	r31, 0x03	; 3
     6ee:	ff 2e       	mov	r15, r31
     6f0:	f0 2d       	mov	r31, r0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	0e 94 a2 20 	call	0x4144	; 0x4144 <lora_driver_join>
     6f8:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     6fa:	0e 94 b8 22 	call	0x4570	; 0x4570 <lora_driver_map_return_code_to_text>
     6fe:	9f 93       	push	r25
     700:	8f 93       	push	r24
     702:	1f 93       	push	r17
     704:	0f 93       	push	r16
     706:	ff 92       	push	r15
     708:	ef 92       	push	r14
     70a:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <printf>

		if ( rc != LoRa_ACCEPTED)
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	f8 e0       	ldi	r31, 0x08	; 8
     71c:	df 16       	cp	r13, r31
     71e:	09 f4       	brne	.+2      	; 0x722 <lora_handler_task+0x18c>
     720:	79 c0       	rjmp	.+242    	; 0x814 <lora_handler_task+0x27e>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     728:	66 e3       	ldi	r22, 0x36	; 54
     72a:	71 e0       	ldi	r23, 0x01	; 1
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 36 14 	call	0x286c	; 0x286c <vTaskDelay>
     734:	01 50       	subi	r16, 0x01	; 1
     736:	11 09       	sbc	r17, r1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     738:	e1 f6       	brne	.-72     	; 0x6f2 <lora_handler_task+0x15c>
     73a:	65 c0       	rjmp	.+202    	; 0x806 <lora_handler_task+0x270>


		// Lets stay here
		while (1)
		{
			taskYIELD();
     73c:	74 d5       	rcall	.+2792   	; 0x1226 <vPortYield>
     73e:	fe cf       	rjmp	.-4      	; 0x73c <lora_handler_task+0x1a6>
	 const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
	 xLastWakeTime = xTaskGetTickCount();
	 
	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
     740:	44 e4       	ldi	r20, 0x44	; 68
     742:	57 e0       	ldi	r21, 0x07	; 7
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	ce 01       	movw	r24, r28
     74a:	01 96       	adiw	r24, 0x01	; 1
     74c:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <vTaskDelayUntil>

		
		xEventGroupSetBits(Measure_event_group, CO2_measure_bit|Hum_temp_measure_bit);
     750:	43 e0       	ldi	r20, 0x03	; 3
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	80 91 7e 1a 	lds	r24, 0x1A7E	; 0x801a7e <Measure_event_group>
     75c:	90 91 7f 1a 	lds	r25, 0x1A7F	; 0x801a7f <Measure_event_group+0x1>
     760:	4a d2       	rcall	.+1172   	; 0xbf6 <xEventGroupSetBits>
		
		
		EventBits_t dataBits = xEventGroupWaitBits(Data_event_group, CO2_data_bit|Hum_temp_data_bit, pdTRUE, pdTRUE, 500);
     762:	0f 2e       	mov	r0, r31
     764:	f4 ef       	ldi	r31, 0xF4	; 244
     766:	cf 2e       	mov	r12, r31
     768:	dd 24       	eor	r13, r13
     76a:	d3 94       	inc	r13
     76c:	e1 2c       	mov	r14, r1
     76e:	f1 2c       	mov	r15, r1
     770:	f0 2d       	mov	r31, r0
     772:	01 e0       	ldi	r16, 0x01	; 1
     774:	21 e0       	ldi	r18, 0x01	; 1
     776:	4c e0       	ldi	r20, 0x0C	; 12
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <Data_event_group>
     782:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <Data_event_group+0x1>
     786:	77 d1       	rcall	.+750    	; 0xa76 <xEventGroupWaitBits>
		
		if((dataBits & (CO2_data_bit|Hum_temp_data_bit)) == (CO2_data_bit|Hum_temp_data_bit)){
     788:	dc 01       	movw	r26, r24
     78a:	cb 01       	movw	r24, r22
     78c:	8c 70       	andi	r24, 0x0C	; 12
     78e:	99 27       	eor	r25, r25
     790:	aa 27       	eor	r26, r26
     792:	bb 27       	eor	r27, r27
     794:	0c 97       	sbiw	r24, 0x0c	; 12
     796:	a1 05       	cpc	r26, r1
     798:	b1 05       	cpc	r27, r1
			uint16_t hum = (int) getHumidity();
     79a:	91 f6       	brne	.-92     	; 0x740 <lora_handler_task+0x1aa>
     79c:	aa d0       	rcall	.+340    	; 0x8f2 <getHumidity>
     79e:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__fixsfsi>
     7a2:	f6 2e       	mov	r15, r22
			int16_t temp = (int) getTemperature();
     7a4:	e7 2e       	mov	r14, r23
     7a6:	eb d0       	rcall	.+470    	; 0x97e <getTemperature>
     7a8:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__fixsfsi>
     7ac:	16 2f       	mov	r17, r22
			uint16_t co2_ppm = getCO2();
     7ae:	07 2f       	mov	r16, r23
     7b0:	67 d0       	rcall	.+206    	; 0x880 <getCO2>
     7b2:	d8 2e       	mov	r13, r24
     7b4:	c9 2e       	mov	r12, r25

			
			printf("%i\t%i\n",hum,temp);
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	ef 92       	push	r14
     7bc:	ff 92       	push	r15
     7be:	7f 92       	push	r7
     7c0:	6f 92       	push	r6
     7c2:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <printf>

			_uplink_payload.bytes[0] = hum >> 8;
     7c6:	f5 01       	movw	r30, r10
     7c8:	e2 82       	std	Z+2, r14	; 0x02
			_uplink_payload.bytes[1] = hum & 0xFF;
     7ca:	f3 82       	std	Z+3, r15	; 0x03
			_uplink_payload.bytes[2] = temp >> 8;
     7cc:	04 83       	std	Z+4, r16	; 0x04
			_uplink_payload.bytes[3] = temp & 0xFF;
     7ce:	15 83       	std	Z+5, r17	; 0x05
			_uplink_payload.bytes[4] = co2_ppm >> 8;
     7d0:	c6 82       	std	Z+6, r12	; 0x06
			_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     7d2:	d7 82       	std	Z+7, r13	; 0x07
			lora_driver_sent_upload_message(false, &_uplink_payload);
     7d4:	b5 01       	movw	r22, r10
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	0e 94 cb 20 	call	0x4196	; 0x4196 <lora_driver_sent_upload_message>
			led_short_puls(led_ST4);
     7dc:	83 e0       	ldi	r24, 0x03	; 3
     7de:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <led_short_puls>
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     7e2:	b5 01       	movw	r22, r10
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	0e 94 cb 20 	call	0x4196	; 0x4196 <lora_driver_sent_upload_message>
     7ea:	0e 94 b8 22 	call	0x4570	; 0x4570 <lora_driver_map_return_code_to_text>
     7ee:	9f 93       	push	r25
     7f0:	8f 93       	push	r24
     7f2:	9f 92       	push	r9
     7f4:	8f 92       	push	r8
     7f6:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <printf>
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
     804:	9d cf       	rjmp	.-198    	; 0x740 <lora_handler_task+0x1aa>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <led_fast_blink>
     812:	94 cf       	rjmp	.-216    	; 0x73c <lora_handler_task+0x1a6>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <led_led_on>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!

	_lora_setup();

	_uplink_payload.len = 6;
     81a:	e6 e5       	ldi	r30, 0x56	; 86
     81c:	f8 e0       	ldi	r31, 0x08	; 8
     81e:	86 e0       	ldi	r24, 0x06	; 6
     820:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.port_no = 2;
     822:	82 e0       	ldi	r24, 0x02	; 2
     824:	80 83       	st	Z, r24

	 TickType_t xLastWakeTime;
	 const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
	 xLastWakeTime = xTaskGetTickCount();
     826:	0e 94 79 12 	call	0x24f2	; 0x24f2 <xTaskGetTickCount>
     82a:	69 83       	std	Y+1, r22	; 0x01
     82c:	7a 83       	std	Y+2, r23	; 0x02
     82e:	8b 83       	std	Y+3, r24	; 0x03
     830:	9c 83       	std	Y+4, r25	; 0x04
			uint16_t hum = (int) getHumidity();
			int16_t temp = (int) getTemperature();
			uint16_t co2_ppm = getCO2();

			
			printf("%i\t%i\n",hum,temp);
     832:	0f 2e       	mov	r0, r31
     834:	fa ef       	ldi	r31, 0xFA	; 250
     836:	6f 2e       	mov	r6, r31
     838:	f3 e0       	ldi	r31, 0x03	; 3
     83a:	7f 2e       	mov	r7, r31
     83c:	f0 2d       	mov	r31, r0

			_uplink_payload.bytes[0] = hum >> 8;
     83e:	0f 2e       	mov	r0, r31
     840:	f6 e5       	ldi	r31, 0x56	; 86
     842:	af 2e       	mov	r10, r31
     844:	f8 e0       	ldi	r31, 0x08	; 8
     846:	bf 2e       	mov	r11, r31
     848:	f0 2d       	mov	r31, r0
			_uplink_payload.bytes[3] = temp & 0xFF;
			_uplink_payload.bytes[4] = co2_ppm >> 8;
			_uplink_payload.bytes[5] = co2_ppm & 0xFF;
			lora_driver_sent_upload_message(false, &_uplink_payload);
			led_short_puls(led_ST4);
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     84a:	0f 2e       	mov	r0, r31
     84c:	f1 e0       	ldi	r31, 0x01	; 1
     84e:	8f 2e       	mov	r8, r31
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	9f 2e       	mov	r9, r31
     854:	f0 2d       	mov	r31, r0
     856:	74 cf       	rjmp	.-280    	; 0x740 <lora_handler_task+0x1aa>

00000858 <lora_handler_create>:
void lora_handler_task( void *pvParameters );

static lora_payload_t _uplink_payload;

void lora_handler_create(UBaseType_t lora_handler_task_priority)
{
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
	xTaskCreate(
     85e:	e1 2c       	mov	r14, r1
     860:	f1 2c       	mov	r15, r1
     862:	08 2f       	mov	r16, r24
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	48 e8       	ldi	r20, 0x88	; 136
     86a:	51 e0       	ldi	r21, 0x01	; 1
     86c:	66 e1       	ldi	r22, 0x16	; 22
     86e:	74 e0       	ldi	r23, 0x04	; 4
     870:	8b ec       	ldi	r24, 0xCB	; 203
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

}
     878:	0f 91       	pop	r16
     87a:	ff 90       	pop	r15
     87c:	ef 90       	pop	r14
     87e:	08 95       	ret

00000880 <getCO2>:
bool isTaken_temperature = 0;



uint16_t getCO2(){
	while(isTaken_CO2){	
     880:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <isTaken_CO2>
     884:	88 23       	and	r24, r24
     886:	51 f0       	breq	.+20     	; 0x89c <getCO2+0x1c>
		vTaskDelay(50);
     888:	62 e3       	ldi	r22, 0x32	; 50
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 36 14 	call	0x286c	; 0x286c <vTaskDelay>
bool isTaken_temperature = 0;



uint16_t getCO2(){
	while(isTaken_CO2){	
     894:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <isTaken_CO2>
     898:	81 11       	cpse	r24, r1
     89a:	f6 cf       	rjmp	.-20     	; 0x888 <getCO2+0x8>
		vTaskDelay(50);
	}
	return local_CO2;

}
     89c:	80 91 88 1a 	lds	r24, 0x1A88	; 0x801a88 <local_CO2>
     8a0:	90 91 89 1a 	lds	r25, 0x1A89	; 0x801a89 <local_CO2+0x1>
     8a4:	08 95       	ret

000008a6 <setCO2>:

void setCO2(uint16_t CO2){
     8a6:	0f 93       	push	r16
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	ec 01       	movw	r28, r24
	xSemaphoreTake(Mutex_CO2,1000);
     8ae:	48 ee       	ldi	r20, 0xE8	; 232
     8b0:	53 e0       	ldi	r21, 0x03	; 3
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	80 91 82 1a 	lds	r24, 0x1A82	; 0x801a82 <Mutex_CO2>
     8ba:	90 91 83 1a 	lds	r25, 0x1A83	; 0x801a83 <Mutex_CO2+0x1>
     8be:	0e 94 aa 0c 	call	0x1954	; 0x1954 <xQueueSemaphoreTake>
	isTaken_CO2 = 1;
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	80 93 d2 08 	sts	0x08D2, r24	; 0x8008d2 <isTaken_CO2>
	local_CO2 = CO2;
     8c8:	d0 93 89 1a 	sts	0x1A89, r29	; 0x801a89 <local_CO2+0x1>
     8cc:	c0 93 88 1a 	sts	0x1A88, r28	; 0x801a88 <local_CO2>
	xSemaphoreGive(Mutex_CO2);
     8d0:	00 e0       	ldi	r16, 0x00	; 0
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	a9 01       	movw	r20, r18
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	80 91 82 1a 	lds	r24, 0x1A82	; 0x801a82 <Mutex_CO2>
     8e0:	90 91 83 1a 	lds	r25, 0x1A83	; 0x801a83 <Mutex_CO2+0x1>
     8e4:	aa d6       	rcall	.+3412   	; 0x163a <xQueueGenericSend>
	isTaken_CO2 = 0;
     8e6:	10 92 d2 08 	sts	0x08D2, r1	; 0x8008d2 <isTaken_CO2>
}
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	0f 91       	pop	r16
     8f0:	08 95       	ret

000008f2 <getHumidity>:

float getHumidity(){
	while(isTaken_humidity){
     8f2:	80 91 d1 08 	lds	r24, 0x08D1	; 0x8008d1 <isTaken_humidity>
     8f6:	88 23       	and	r24, r24
     8f8:	51 f0       	breq	.+20     	; 0x90e <getHumidity+0x1c>
		vTaskDelay(50);
     8fa:	62 e3       	ldi	r22, 0x32	; 50
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 36 14 	call	0x286c	; 0x286c <vTaskDelay>
	xSemaphoreGive(Mutex_CO2);
	isTaken_CO2 = 0;
}

float getHumidity(){
	while(isTaken_humidity){
     906:	80 91 d1 08 	lds	r24, 0x08D1	; 0x8008d1 <isTaken_humidity>
     90a:	81 11       	cpse	r24, r1
     90c:	f6 cf       	rjmp	.-20     	; 0x8fa <getHumidity+0x8>
		vTaskDelay(50);
	}
	return local_humidity;
     90e:	60 91 8a 1a 	lds	r22, 0x1A8A	; 0x801a8a <local_humidity>
     912:	70 91 8b 1a 	lds	r23, 0x1A8B	; 0x801a8b <local_humidity+0x1>
     916:	80 91 8c 1a 	lds	r24, 0x1A8C	; 0x801a8c <local_humidity+0x2>
     91a:	90 91 8d 1a 	lds	r25, 0x1A8D	; 0x801a8d <local_humidity+0x3>
}
     91e:	08 95       	ret

00000920 <setHumidity>:
void setHumidity(float humidity_level){
     920:	cf 92       	push	r12
     922:	df 92       	push	r13
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	6b 01       	movw	r12, r22
     92c:	7c 01       	movw	r14, r24
	xSemaphoreTake(Mutex_humidity,1000);
     92e:	48 ee       	ldi	r20, 0xE8	; 232
     930:	53 e0       	ldi	r21, 0x03	; 3
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	80 91 7a 1a 	lds	r24, 0x1A7A	; 0x801a7a <Mutex_humidity>
     93a:	90 91 7b 1a 	lds	r25, 0x1A7B	; 0x801a7b <Mutex_humidity+0x1>
     93e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <xQueueSemaphoreTake>
	isTaken_humidity = 1;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	80 93 d1 08 	sts	0x08D1, r24	; 0x8008d1 <isTaken_humidity>
	local_humidity = humidity_level;
     948:	c0 92 8a 1a 	sts	0x1A8A, r12	; 0x801a8a <local_humidity>
     94c:	d0 92 8b 1a 	sts	0x1A8B, r13	; 0x801a8b <local_humidity+0x1>
     950:	e0 92 8c 1a 	sts	0x1A8C, r14	; 0x801a8c <local_humidity+0x2>
     954:	f0 92 8d 1a 	sts	0x1A8D, r15	; 0x801a8d <local_humidity+0x3>
	xSemaphoreGive(Mutex_humidity);
     958:	00 e0       	ldi	r16, 0x00	; 0
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	a9 01       	movw	r20, r18
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	80 91 7a 1a 	lds	r24, 0x1A7A	; 0x801a7a <Mutex_humidity>
     968:	90 91 7b 1a 	lds	r25, 0x1A7B	; 0x801a7b <Mutex_humidity+0x1>
     96c:	66 d6       	rcall	.+3276   	; 0x163a <xQueueGenericSend>
	isTaken_humidity = 0;
     96e:	10 92 d1 08 	sts	0x08D1, r1	; 0x8008d1 <isTaken_humidity>
}
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	df 90       	pop	r13
     97a:	cf 90       	pop	r12
     97c:	08 95       	ret

0000097e <getTemperature>:

float getTemperature(){
	while(isTaken_temperature){
     97e:	80 91 d0 08 	lds	r24, 0x08D0	; 0x8008d0 <isTaken_temperature>
     982:	88 23       	and	r24, r24
     984:	51 f0       	breq	.+20     	; 0x99a <getTemperature+0x1c>
		vTaskDelay(50);
     986:	62 e3       	ldi	r22, 0x32	; 50
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 36 14 	call	0x286c	; 0x286c <vTaskDelay>
	xSemaphoreGive(Mutex_humidity);
	isTaken_humidity = 0;
}

float getTemperature(){
	while(isTaken_temperature){
     992:	80 91 d0 08 	lds	r24, 0x08D0	; 0x8008d0 <isTaken_temperature>
     996:	81 11       	cpse	r24, r1
     998:	f6 cf       	rjmp	.-20     	; 0x986 <getTemperature+0x8>
		vTaskDelay(50);
	}
	return local_temperature;
     99a:	60 91 84 1a 	lds	r22, 0x1A84	; 0x801a84 <local_temperature>
     99e:	70 91 85 1a 	lds	r23, 0x1A85	; 0x801a85 <local_temperature+0x1>
     9a2:	80 91 86 1a 	lds	r24, 0x1A86	; 0x801a86 <local_temperature+0x2>
     9a6:	90 91 87 1a 	lds	r25, 0x1A87	; 0x801a87 <local_temperature+0x3>
}
     9aa:	08 95       	ret

000009ac <setTemperature>:
void setTemperature(float temperature_level){
     9ac:	cf 92       	push	r12
     9ae:	df 92       	push	r13
     9b0:	ef 92       	push	r14
     9b2:	ff 92       	push	r15
     9b4:	0f 93       	push	r16
     9b6:	6b 01       	movw	r12, r22
     9b8:	7c 01       	movw	r14, r24
	xSemaphoreTake(Mutex_temperature,1000);
     9ba:	48 ee       	ldi	r20, 0xE8	; 232
     9bc:	53 e0       	ldi	r21, 0x03	; 3
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	80 91 80 1a 	lds	r24, 0x1A80	; 0x801a80 <Mutex_temperature>
     9c6:	90 91 81 1a 	lds	r25, 0x1A81	; 0x801a81 <Mutex_temperature+0x1>
     9ca:	c4 d7       	rcall	.+3976   	; 0x1954 <xQueueSemaphoreTake>
	isTaken_temperature = 1;
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	80 93 d0 08 	sts	0x08D0, r24	; 0x8008d0 <isTaken_temperature>
	local_temperature = temperature_level;
     9d2:	c0 92 84 1a 	sts	0x1A84, r12	; 0x801a84 <local_temperature>
     9d6:	d0 92 85 1a 	sts	0x1A85, r13	; 0x801a85 <local_temperature+0x1>
     9da:	e0 92 86 1a 	sts	0x1A86, r14	; 0x801a86 <local_temperature+0x2>
     9de:	f0 92 87 1a 	sts	0x1A87, r15	; 0x801a87 <local_temperature+0x3>
	xSemaphoreGive(Mutex_temperature);
     9e2:	00 e0       	ldi	r16, 0x00	; 0
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	a9 01       	movw	r20, r18
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	80 91 80 1a 	lds	r24, 0x1A80	; 0x801a80 <Mutex_temperature>
     9f2:	90 91 81 1a 	lds	r25, 0x1A81	; 0x801a81 <Mutex_temperature+0x1>
     9f6:	21 d6       	rcall	.+3138   	; 0x163a <xQueueGenericSend>
	isTaken_temperature = 0;
     9f8:	10 92 d0 08 	sts	0x08D0, r1	; 0x8008d0 <isTaken_temperature>
}
     9fc:	0f 91       	pop	r16
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	df 90       	pop	r13
     a04:	cf 90       	pop	r12
     a06:	08 95       	ret

00000a08 <init_resources>:



void init_resources(){
	if(local_CO2 == NULL){
     a08:	80 91 88 1a 	lds	r24, 0x1A88	; 0x801a88 <local_CO2>
     a0c:	90 91 89 1a 	lds	r25, 0x1A89	; 0x801a89 <local_CO2+0x1>
     a10:	89 2b       	or	r24, r25
     a12:	39 f4       	brne	.+14     	; 0xa22 <init_resources+0x1a>
		 local_CO2 = (uint16_t)pvPortMalloc(sizeof(uint16_t));
     a14:	82 e0       	ldi	r24, 0x02	; 2
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	d4 d1       	rcall	.+936    	; 0xdc2 <pvPortMalloc>
     a1a:	90 93 89 1a 	sts	0x1A89, r25	; 0x801a89 <local_CO2+0x1>
     a1e:	80 93 88 1a 	sts	0x1A88, r24	; 0x801a88 <local_CO2>
     a22:	08 95       	ret

00000a24 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     a24:	e7 e0       	ldi	r30, 0x07	; 7
     a26:	f1 e0       	ldi	r31, 0x01	; 1
     a28:	80 81       	ld	r24, Z
     a2a:	8f 60       	ori	r24, 0x0F	; 15
     a2c:	80 83       	st	Z, r24
     a2e:	08 95       	ret

00000a30 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     a30:	e8 e0       	ldi	r30, 0x08	; 8
     a32:	f1 e0       	ldi	r31, 0x01	; 1
     a34:	90 81       	ld	r25, Z
     a36:	90 7f       	andi	r25, 0xF0	; 240
     a38:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     a3a:	90 81       	ld	r25, Z
     a3c:	8f 70       	andi	r24, 0x0F	; 15
     a3e:	98 2b       	or	r25, r24
     a40:	90 83       	st	Z, r25
     a42:	08 95       	ret

00000a44 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     a44:	e8 e0       	ldi	r30, 0x08	; 8
     a46:	f1 e0       	ldi	r31, 0x01	; 1
     a48:	80 81       	ld	r24, Z
     a4a:	80 7f       	andi	r24, 0xF0	; 240
     a4c:	80 83       	st	Z, r24
     a4e:	08 95       	ret

00000a50 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	80 e1       	ldi	r24, 0x10	; 16
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	b4 d1       	rcall	.+872    	; 0xdc2 <pvPortMalloc>
     a5a:	ec 01       	movw	r28, r24
     a5c:	00 97       	sbiw	r24, 0x00	; 0
     a5e:	39 f0       	breq	.+14     	; 0xa6e <xEventGroupCreate+0x1e>
     a60:	fc 01       	movw	r30, r24
     a62:	11 92       	st	Z+, r1
     a64:	11 92       	st	Z+, r1
     a66:	11 92       	st	Z+, r1
     a68:	11 92       	st	Z+, r1
     a6a:	cf 01       	movw	r24, r30
     a6c:	94 d2       	rcall	.+1320   	; 0xf96 <vListInitialise>
     a6e:	ce 01       	movw	r24, r28
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <xEventGroupWaitBits>:
     a76:	2f 92       	push	r2
     a78:	3f 92       	push	r3
     a7a:	4f 92       	push	r4
     a7c:	5f 92       	push	r5
     a7e:	6f 92       	push	r6
     a80:	7f 92       	push	r7
     a82:	8f 92       	push	r8
     a84:	9f 92       	push	r9
     a86:	af 92       	push	r10
     a88:	bf 92       	push	r11
     a8a:	cf 92       	push	r12
     a8c:	df 92       	push	r13
     a8e:	ef 92       	push	r14
     a90:	ff 92       	push	r15
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	ec 01       	movw	r28, r24
     a9c:	4a 01       	movw	r8, r20
     a9e:	5b 01       	movw	r10, r22
     aa0:	62 2e       	mov	r6, r18
     aa2:	70 2e       	mov	r7, r16
     aa4:	0e 94 73 12 	call	0x24e6	; 0x24e6 <vTaskSuspendAll>
     aa8:	28 80       	ld	r2, Y
     aaa:	39 80       	ldd	r3, Y+1	; 0x01
     aac:	4a 80       	ldd	r4, Y+2	; 0x02
     aae:	5b 80       	ldd	r5, Y+3	; 0x03
     ab0:	01 11       	cpse	r16, r1
     ab2:	0d c0       	rjmp	.+26     	; 0xace <xEventGroupWaitBits+0x58>
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	b2 01       	movw	r22, r4
     ab8:	a1 01       	movw	r20, r2
     aba:	48 21       	and	r20, r8
     abc:	59 21       	and	r21, r9
     abe:	6a 21       	and	r22, r10
     ac0:	7b 21       	and	r23, r11
     ac2:	45 2b       	or	r20, r21
     ac4:	46 2b       	or	r20, r22
     ac6:	47 2b       	or	r20, r23
     ac8:	79 f4       	brne	.+30     	; 0xae8 <xEventGroupWaitBits+0x72>
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	0d c0       	rjmp	.+26     	; 0xae8 <xEventGroupWaitBits+0x72>
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	b2 01       	movw	r22, r4
     ad2:	a1 01       	movw	r20, r2
     ad4:	48 21       	and	r20, r8
     ad6:	59 21       	and	r21, r9
     ad8:	6a 21       	and	r22, r10
     ada:	7b 21       	and	r23, r11
     adc:	48 15       	cp	r20, r8
     ade:	59 05       	cpc	r21, r9
     ae0:	6a 05       	cpc	r22, r10
     ae2:	7b 05       	cpc	r23, r11
     ae4:	09 f0       	breq	.+2      	; 0xae8 <xEventGroupWaitBits+0x72>
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	88 23       	and	r24, r24
     aea:	81 f0       	breq	.+32     	; 0xb0c <xEventGroupWaitBits+0x96>
     aec:	66 20       	and	r6, r6
     aee:	09 f4       	brne	.+2      	; 0xaf2 <xEventGroupWaitBits+0x7c>
     af0:	6b c0       	rjmp	.+214    	; 0xbc8 <xEventGroupWaitBits+0x152>
     af2:	80 94       	com	r8
     af4:	90 94       	com	r9
     af6:	a0 94       	com	r10
     af8:	b0 94       	com	r11
     afa:	82 20       	and	r8, r2
     afc:	93 20       	and	r9, r3
     afe:	a4 20       	and	r10, r4
     b00:	b5 20       	and	r11, r5
     b02:	88 82       	st	Y, r8
     b04:	99 82       	std	Y+1, r9	; 0x01
     b06:	aa 82       	std	Y+2, r10	; 0x02
     b08:	bb 82       	std	Y+3, r11	; 0x03
     b0a:	5e c0       	rjmp	.+188    	; 0xbc8 <xEventGroupWaitBits+0x152>
     b0c:	c1 14       	cp	r12, r1
     b0e:	d1 04       	cpc	r13, r1
     b10:	e1 04       	cpc	r14, r1
     b12:	f1 04       	cpc	r15, r1
     b14:	09 f4       	brne	.+2      	; 0xb18 <xEventGroupWaitBits+0xa2>
     b16:	58 c0       	rjmp	.+176    	; 0xbc8 <xEventGroupWaitBits+0x152>
     b18:	66 20       	and	r6, r6
     b1a:	29 f0       	breq	.+10     	; 0xb26 <xEventGroupWaitBits+0xb0>
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	71 e0       	ldi	r23, 0x01	; 1
     b24:	03 c0       	rjmp	.+6      	; 0xb2c <xEventGroupWaitBits+0xb6>
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	ba 01       	movw	r22, r20
     b2c:	71 10       	cpse	r7, r1
     b2e:	74 60       	ori	r23, 0x04	; 4
     b30:	48 29       	or	r20, r8
     b32:	59 29       	or	r21, r9
     b34:	6a 29       	or	r22, r10
     b36:	7b 29       	or	r23, r11
     b38:	97 01       	movw	r18, r14
     b3a:	86 01       	movw	r16, r12
     b3c:	ce 01       	movw	r24, r28
     b3e:	04 96       	adiw	r24, 0x04	; 4
     b40:	0e 94 e5 14 	call	0x29ca	; 0x29ca <vTaskPlaceOnUnorderedEventList>
     b44:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <xTaskResumeAll>
     b48:	81 11       	cpse	r24, r1
     b4a:	01 c0       	rjmp	.+2      	; 0xb4e <xEventGroupWaitBits+0xd8>
     b4c:	6c d3       	rcall	.+1752   	; 0x1226 <vPortYield>
     b4e:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <uxTaskResetEventItemValue>
     b52:	91 fd       	sbrc	r25, 1
     b54:	35 c0       	rjmp	.+106    	; 0xbc0 <xEventGroupWaitBits+0x14a>
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	0f 92       	push	r0
     b5c:	68 81       	ld	r22, Y
     b5e:	79 81       	ldd	r23, Y+1	; 0x01
     b60:	8a 81       	ldd	r24, Y+2	; 0x02
     b62:	9b 81       	ldd	r25, Y+3	; 0x03
     b64:	71 10       	cpse	r7, r1
     b66:	0d c0       	rjmp	.+26     	; 0xb82 <xEventGroupWaitBits+0x10c>
     b68:	21 e0       	ldi	r18, 0x01	; 1
     b6a:	75 01       	movw	r14, r10
     b6c:	64 01       	movw	r12, r8
     b6e:	c6 22       	and	r12, r22
     b70:	d7 22       	and	r13, r23
     b72:	e8 22       	and	r14, r24
     b74:	f9 22       	and	r15, r25
     b76:	cd 28       	or	r12, r13
     b78:	ce 28       	or	r12, r14
     b7a:	cf 28       	or	r12, r15
     b7c:	79 f4       	brne	.+30     	; 0xb9c <xEventGroupWaitBits+0x126>
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	0d c0       	rjmp	.+26     	; 0xb9c <xEventGroupWaitBits+0x126>
     b82:	21 e0       	ldi	r18, 0x01	; 1
     b84:	75 01       	movw	r14, r10
     b86:	64 01       	movw	r12, r8
     b88:	c6 22       	and	r12, r22
     b8a:	d7 22       	and	r13, r23
     b8c:	e8 22       	and	r14, r24
     b8e:	f9 22       	and	r15, r25
     b90:	c8 14       	cp	r12, r8
     b92:	d9 04       	cpc	r13, r9
     b94:	ea 04       	cpc	r14, r10
     b96:	fb 04       	cpc	r15, r11
     b98:	09 f0       	breq	.+2      	; 0xb9c <xEventGroupWaitBits+0x126>
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	22 23       	and	r18, r18
     b9e:	71 f0       	breq	.+28     	; 0xbbc <xEventGroupWaitBits+0x146>
     ba0:	66 20       	and	r6, r6
     ba2:	61 f0       	breq	.+24     	; 0xbbc <xEventGroupWaitBits+0x146>
     ba4:	80 94       	com	r8
     ba6:	90 94       	com	r9
     ba8:	a0 94       	com	r10
     baa:	b0 94       	com	r11
     bac:	86 22       	and	r8, r22
     bae:	97 22       	and	r9, r23
     bb0:	a8 22       	and	r10, r24
     bb2:	b9 22       	and	r11, r25
     bb4:	88 82       	st	Y, r8
     bb6:	99 82       	std	Y+1, r9	; 0x01
     bb8:	aa 82       	std	Y+2, r10	; 0x02
     bba:	bb 82       	std	Y+3, r11	; 0x03
     bbc:	0f 90       	pop	r0
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	1b 01       	movw	r2, r22
     bc2:	2c 01       	movw	r4, r24
     bc4:	55 24       	eor	r5, r5
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <xEventGroupWaitBits+0x156>
     bc8:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <xTaskResumeAll>
     bcc:	c2 01       	movw	r24, r4
     bce:	b1 01       	movw	r22, r2
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	cf 90       	pop	r12
     be0:	bf 90       	pop	r11
     be2:	af 90       	pop	r10
     be4:	9f 90       	pop	r9
     be6:	8f 90       	pop	r8
     be8:	7f 90       	pop	r7
     bea:	6f 90       	pop	r6
     bec:	5f 90       	pop	r5
     bee:	4f 90       	pop	r4
     bf0:	3f 90       	pop	r3
     bf2:	2f 90       	pop	r2
     bf4:	08 95       	ret

00000bf6 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     bf6:	4f 92       	push	r4
     bf8:	5f 92       	push	r5
     bfa:	6f 92       	push	r6
     bfc:	7f 92       	push	r7
     bfe:	8f 92       	push	r8
     c00:	9f 92       	push	r9
     c02:	af 92       	push	r10
     c04:	bf 92       	push	r11
     c06:	cf 92       	push	r12
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	ec 01       	movw	r28, r24
     c18:	6a 01       	movw	r12, r20
     c1a:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c1c:	8c 01       	movw	r16, r24
     c1e:	09 5f       	subi	r16, 0xF9	; 249
     c20:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     c22:	0e 94 73 12 	call	0x24e6	; 0x24e6 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     c26:	eb 85       	ldd	r30, Y+11	; 0x0b
     c28:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     c2a:	88 81       	ld	r24, Y
     c2c:	99 81       	ldd	r25, Y+1	; 0x01
     c2e:	aa 81       	ldd	r26, Y+2	; 0x02
     c30:	bb 81       	ldd	r27, Y+3	; 0x03
     c32:	c8 2a       	or	r12, r24
     c34:	d9 2a       	or	r13, r25
     c36:	ea 2a       	or	r14, r26
     c38:	fb 2a       	or	r15, r27
     c3a:	c8 82       	st	Y, r12
     c3c:	d9 82       	std	Y+1, r13	; 0x01
     c3e:	ea 82       	std	Y+2, r14	; 0x02
     c40:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     c42:	0e 17       	cp	r16, r30
     c44:	1f 07       	cpc	r17, r31
     c46:	09 f4       	brne	.+2      	; 0xc4a <xEventGroupSetBits+0x54>
     c48:	45 c0       	rjmp	.+138    	; 0xcd4 <xEventGroupSetBits+0xde>
     c4a:	c1 2c       	mov	r12, r1
     c4c:	d1 2c       	mov	r13, r1
     c4e:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     c50:	99 24       	eor	r9, r9
     c52:	93 94       	inc	r9
     c54:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
     c56:	a4 80       	ldd	r10, Z+4	; 0x04
     c58:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     c5a:	80 81       	ld	r24, Z
     c5c:	91 81       	ldd	r25, Z+1	; 0x01
     c5e:	a2 81       	ldd	r26, Z+2	; 0x02
     c60:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     c62:	ac 01       	movw	r20, r24
     c64:	bd 01       	movw	r22, r26
     c66:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     c68:	b2 fd       	sbrc	r27, 2
     c6a:	0f c0       	rjmp	.+30     	; 0xc8a <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     c6c:	48 80       	ld	r4, Y
     c6e:	59 80       	ldd	r5, Y+1	; 0x01
     c70:	6a 80       	ldd	r6, Y+2	; 0x02
     c72:	7b 80       	ldd	r7, Y+3	; 0x03
     c74:	44 22       	and	r4, r20
     c76:	55 22       	and	r5, r21
     c78:	66 22       	and	r6, r22
     c7a:	77 22       	and	r7, r23
     c7c:	29 2d       	mov	r18, r9
     c7e:	45 28       	or	r4, r5
     c80:	46 28       	or	r4, r6
     c82:	47 28       	or	r4, r7
     c84:	89 f4       	brne	.+34     	; 0xca8 <xEventGroupSetBits+0xb2>
     c86:	28 2d       	mov	r18, r8
     c88:	0f c0       	rjmp	.+30     	; 0xca8 <xEventGroupSetBits+0xb2>
     c8a:	48 80       	ld	r4, Y
     c8c:	59 80       	ldd	r5, Y+1	; 0x01
     c8e:	6a 80       	ldd	r6, Y+2	; 0x02
     c90:	7b 80       	ldd	r7, Y+3	; 0x03
     c92:	44 22       	and	r4, r20
     c94:	55 22       	and	r5, r21
     c96:	66 22       	and	r6, r22
     c98:	77 22       	and	r7, r23
     c9a:	29 2d       	mov	r18, r9
     c9c:	44 16       	cp	r4, r20
     c9e:	55 06       	cpc	r5, r21
     ca0:	66 06       	cpc	r6, r22
     ca2:	77 06       	cpc	r7, r23
     ca4:	09 f0       	breq	.+2      	; 0xca8 <xEventGroupSetBits+0xb2>
     ca6:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     ca8:	22 23       	and	r18, r18
     caa:	71 f0       	breq	.+28     	; 0xcc8 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     cac:	b0 ff       	sbrs	r27, 0
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     cb0:	c4 2a       	or	r12, r20
     cb2:	d5 2a       	or	r13, r21
     cb4:	e6 2a       	or	r14, r22
     cb6:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     cb8:	48 81       	ld	r20, Y
     cba:	59 81       	ldd	r21, Y+1	; 0x01
     cbc:	6a 81       	ldd	r22, Y+2	; 0x02
     cbe:	7b 81       	ldd	r23, Y+3	; 0x03
     cc0:	72 60       	ori	r23, 0x02	; 2
     cc2:	cf 01       	movw	r24, r30
     cc4:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <vTaskRemoveFromUnorderedEventList>
     cc8:	ea 2d       	mov	r30, r10
     cca:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     ccc:	0e 17       	cp	r16, r30
     cce:	1f 07       	cpc	r17, r31
     cd0:	11 f6       	brne	.-124    	; 0xc56 <xEventGroupSetBits+0x60>
     cd2:	03 c0       	rjmp	.+6      	; 0xcda <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     cd4:	c1 2c       	mov	r12, r1
     cd6:	d1 2c       	mov	r13, r1
     cd8:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     cda:	c0 94       	com	r12
     cdc:	d0 94       	com	r13
     cde:	e0 94       	com	r14
     ce0:	f0 94       	com	r15
     ce2:	88 81       	ld	r24, Y
     ce4:	99 81       	ldd	r25, Y+1	; 0x01
     ce6:	aa 81       	ldd	r26, Y+2	; 0x02
     ce8:	bb 81       	ldd	r27, Y+3	; 0x03
     cea:	c8 22       	and	r12, r24
     cec:	d9 22       	and	r13, r25
     cee:	ea 22       	and	r14, r26
     cf0:	fb 22       	and	r15, r27
     cf2:	c8 82       	st	Y, r12
     cf4:	d9 82       	std	Y+1, r13	; 0x01
     cf6:	ea 82       	std	Y+2, r14	; 0x02
     cf8:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     cfa:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     cfe:	68 81       	ld	r22, Y
     d00:	79 81       	ldd	r23, Y+1	; 0x01
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	9b 81       	ldd	r25, Y+3	; 0x03
}
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	ff 90       	pop	r15
     d10:	ef 90       	pop	r14
     d12:	df 90       	pop	r13
     d14:	cf 90       	pop	r12
     d16:	bf 90       	pop	r11
     d18:	af 90       	pop	r10
     d1a:	9f 90       	pop	r9
     d1c:	8f 90       	pop	r8
     d1e:	7f 90       	pop	r7
     d20:	6f 90       	pop	r6
     d22:	5f 90       	pop	r5
     d24:	4f 90       	pop	r4
     d26:	08 95       	ret

00000d28 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     d2e:	eb ed       	ldi	r30, 0xDB	; 219
     d30:	f8 e0       	ldi	r31, 0x08	; 8
     d32:	01 c0       	rjmp	.+2      	; 0xd36 <prvInsertBlockIntoFreeList+0xe>
     d34:	f9 01       	movw	r30, r18
     d36:	20 81       	ld	r18, Z
     d38:	31 81       	ldd	r19, Z+1	; 0x01
     d3a:	2a 17       	cp	r18, r26
     d3c:	3b 07       	cpc	r19, r27
     d3e:	d0 f3       	brcs	.-12     	; 0xd34 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     d40:	82 81       	ldd	r24, Z+2	; 0x02
     d42:	93 81       	ldd	r25, Z+3	; 0x03
     d44:	af 01       	movw	r20, r30
     d46:	48 0f       	add	r20, r24
     d48:	59 1f       	adc	r21, r25
     d4a:	a4 17       	cp	r26, r20
     d4c:	b5 07       	cpc	r27, r21
     d4e:	49 f4       	brne	.+18     	; 0xd62 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     d50:	12 96       	adiw	r26, 0x02	; 2
     d52:	4d 91       	ld	r20, X+
     d54:	5c 91       	ld	r21, X
     d56:	13 97       	sbiw	r26, 0x03	; 3
     d58:	84 0f       	add	r24, r20
     d5a:	95 1f       	adc	r25, r21
     d5c:	93 83       	std	Z+3, r25	; 0x03
     d5e:	82 83       	std	Z+2, r24	; 0x02
     d60:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     d62:	12 96       	adiw	r26, 0x02	; 2
     d64:	8d 91       	ld	r24, X+
     d66:	9c 91       	ld	r25, X
     d68:	13 97       	sbiw	r26, 0x03	; 3
     d6a:	ed 01       	movw	r28, r26
     d6c:	c8 0f       	add	r28, r24
     d6e:	d9 1f       	adc	r29, r25
     d70:	2c 17       	cp	r18, r28
     d72:	3d 07       	cpc	r19, r29
     d74:	d9 f4       	brne	.+54     	; 0xdac <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     d76:	20 91 d9 08 	lds	r18, 0x08D9	; 0x8008d9 <pxEnd>
     d7a:	30 91 da 08 	lds	r19, 0x08DA	; 0x8008da <pxEnd+0x1>
     d7e:	c2 17       	cp	r28, r18
     d80:	d3 07       	cpc	r29, r19
     d82:	81 f0       	breq	.+32     	; 0xda4 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     d84:	2a 81       	ldd	r18, Y+2	; 0x02
     d86:	3b 81       	ldd	r19, Y+3	; 0x03
     d88:	82 0f       	add	r24, r18
     d8a:	93 1f       	adc	r25, r19
     d8c:	13 96       	adiw	r26, 0x03	; 3
     d8e:	9c 93       	st	X, r25
     d90:	8e 93       	st	-X, r24
     d92:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     d94:	c0 81       	ld	r28, Z
     d96:	d1 81       	ldd	r29, Z+1	; 0x01
     d98:	88 81       	ld	r24, Y
     d9a:	99 81       	ldd	r25, Y+1	; 0x01
     d9c:	11 96       	adiw	r26, 0x01	; 1
     d9e:	9c 93       	st	X, r25
     da0:	8e 93       	st	-X, r24
     da2:	07 c0       	rjmp	.+14     	; 0xdb2 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     da4:	11 96       	adiw	r26, 0x01	; 1
     da6:	dc 93       	st	X, r29
     da8:	ce 93       	st	-X, r28
     daa:	03 c0       	rjmp	.+6      	; 0xdb2 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     dac:	11 96       	adiw	r26, 0x01	; 1
     dae:	3c 93       	st	X, r19
     db0:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     db2:	ae 17       	cp	r26, r30
     db4:	bf 07       	cpc	r27, r31
     db6:	11 f0       	breq	.+4      	; 0xdbc <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     db8:	b1 83       	std	Z+1, r27	; 0x01
     dba:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	08 95       	ret

00000dc2 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     dc2:	cf 92       	push	r12
     dc4:	df 92       	push	r13
     dc6:	ef 92       	push	r14
     dc8:	ff 92       	push	r15
     dca:	0f 93       	push	r16
     dcc:	1f 93       	push	r17
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
     dd4:	0e 94 73 12 	call	0x24e6	; 0x24e6 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     dd8:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <pxEnd>
     ddc:	90 91 da 08 	lds	r25, 0x08DA	; 0x8008da <pxEnd+0x1>
     de0:	89 2b       	or	r24, r25
     de2:	41 f5       	brne	.+80     	; 0xe34 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     de4:	eb ed       	ldi	r30, 0xDB	; 219
     de6:	f8 e0       	ldi	r31, 0x08	; 8
     de8:	af ed       	ldi	r26, 0xDF	; 223
     dea:	b8 e0       	ldi	r27, 0x08	; 8
     dec:	b1 83       	std	Z+1, r27	; 0x01
     dee:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
     df0:	13 82       	std	Z+3, r1	; 0x03
     df2:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     df4:	eb e7       	ldi	r30, 0x7B	; 123
     df6:	f8 e1       	ldi	r31, 0x18	; 24
     df8:	f0 93 da 08 	sts	0x08DA, r31	; 0x8008da <pxEnd+0x1>
     dfc:	e0 93 d9 08 	sts	0x08D9, r30	; 0x8008d9 <pxEnd>
	pxEnd->xBlockSize = 0;
     e00:	13 82       	std	Z+3, r1	; 0x03
     e02:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     e04:	11 82       	std	Z+1, r1	; 0x01
     e06:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     e08:	8c e9       	ldi	r24, 0x9C	; 156
     e0a:	9f e0       	ldi	r25, 0x0F	; 15
     e0c:	13 96       	adiw	r26, 0x03	; 3
     e0e:	9c 93       	st	X, r25
     e10:	8e 93       	st	-X, r24
     e12:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     e14:	ed 93       	st	X+, r30
     e16:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     e18:	90 93 d6 08 	sts	0x08D6, r25	; 0x8008d6 <xMinimumEverFreeBytesRemaining+0x1>
     e1c:	80 93 d5 08 	sts	0x08D5, r24	; 0x8008d5 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     e20:	90 93 d8 08 	sts	0x08D8, r25	; 0x8008d8 <xFreeBytesRemaining+0x1>
     e24:	80 93 d7 08 	sts	0x08D7, r24	; 0x8008d7 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e8       	ldi	r25, 0x80	; 128
     e2c:	90 93 d4 08 	sts	0x08D4, r25	; 0x8008d4 <xBlockAllocatedBit+0x1>
     e30:	80 93 d3 08 	sts	0x08D3, r24	; 0x8008d3 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     e34:	e0 90 d3 08 	lds	r14, 0x08D3	; 0x8008d3 <xBlockAllocatedBit>
     e38:	f0 90 d4 08 	lds	r15, 0x08D4	; 0x8008d4 <xBlockAllocatedBit+0x1>
     e3c:	c7 01       	movw	r24, r14
     e3e:	8c 23       	and	r24, r28
     e40:	9d 23       	and	r25, r29
     e42:	89 2b       	or	r24, r25
     e44:	09 f0       	breq	.+2      	; 0xe48 <pvPortMalloc+0x86>
     e46:	66 c0       	rjmp	.+204    	; 0xf14 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     e48:	20 97       	sbiw	r28, 0x00	; 0
     e4a:	09 f4       	brne	.+2      	; 0xe4e <pvPortMalloc+0x8c>
     e4c:	66 c0       	rjmp	.+204    	; 0xf1a <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
     e4e:	ae 01       	movw	r20, r28
     e50:	4c 5f       	subi	r20, 0xFC	; 252
     e52:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     e54:	09 f4       	brne	.+2      	; 0xe58 <pvPortMalloc+0x96>
     e56:	5e c0       	rjmp	.+188    	; 0xf14 <pvPortMalloc+0x152>
     e58:	00 91 d7 08 	lds	r16, 0x08D7	; 0x8008d7 <xFreeBytesRemaining>
     e5c:	10 91 d8 08 	lds	r17, 0x08D8	; 0x8008d8 <xFreeBytesRemaining+0x1>
     e60:	04 17       	cp	r16, r20
     e62:	15 07       	cpc	r17, r21
     e64:	08 f4       	brcc	.+2      	; 0xe68 <pvPortMalloc+0xa6>
     e66:	56 c0       	rjmp	.+172    	; 0xf14 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
     e68:	c0 91 db 08 	lds	r28, 0x08DB	; 0x8008db <xStart>
     e6c:	d0 91 dc 08 	lds	r29, 0x08DC	; 0x8008dc <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     e70:	eb ed       	ldi	r30, 0xDB	; 219
     e72:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <pvPortMalloc+0xb8>
     e76:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
     e78:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     e7a:	2a 81       	ldd	r18, Y+2	; 0x02
     e7c:	3b 81       	ldd	r19, Y+3	; 0x03
     e7e:	24 17       	cp	r18, r20
     e80:	35 07       	cpc	r19, r21
     e82:	28 f4       	brcc	.+10     	; 0xe8e <pvPortMalloc+0xcc>
     e84:	28 81       	ld	r18, Y
     e86:	39 81       	ldd	r19, Y+1	; 0x01
     e88:	21 15       	cp	r18, r1
     e8a:	31 05       	cpc	r19, r1
     e8c:	a1 f7       	brne	.-24     	; 0xe76 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     e8e:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <pxEnd>
     e92:	90 91 da 08 	lds	r25, 0x08DA	; 0x8008da <pxEnd+0x1>
     e96:	c8 17       	cp	r28, r24
     e98:	d9 07       	cpc	r29, r25
     e9a:	e1 f1       	breq	.+120    	; 0xf14 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     e9c:	c0 80       	ld	r12, Z
     e9e:	d1 80       	ldd	r13, Z+1	; 0x01
     ea0:	84 e0       	ldi	r24, 0x04	; 4
     ea2:	c8 0e       	add	r12, r24
     ea4:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     ea6:	88 81       	ld	r24, Y
     ea8:	99 81       	ldd	r25, Y+1	; 0x01
     eaa:	91 83       	std	Z+1, r25	; 0x01
     eac:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     eae:	2a 81       	ldd	r18, Y+2	; 0x02
     eb0:	3b 81       	ldd	r19, Y+3	; 0x03
     eb2:	24 1b       	sub	r18, r20
     eb4:	35 0b       	sbc	r19, r21
     eb6:	29 30       	cpi	r18, 0x09	; 9
     eb8:	31 05       	cpc	r19, r1
     eba:	48 f0       	brcs	.+18     	; 0xece <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     ebc:	ce 01       	movw	r24, r28
     ebe:	84 0f       	add	r24, r20
     ec0:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     ec2:	fc 01       	movw	r30, r24
     ec4:	33 83       	std	Z+3, r19	; 0x03
     ec6:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
     ec8:	5b 83       	std	Y+3, r21	; 0x03
     eca:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     ecc:	2d df       	rcall	.-422    	; 0xd28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	9b 81       	ldd	r25, Y+3	; 0x03
     ed2:	08 1b       	sub	r16, r24
     ed4:	19 0b       	sbc	r17, r25
     ed6:	10 93 d8 08 	sts	0x08D8, r17	; 0x8008d8 <xFreeBytesRemaining+0x1>
     eda:	00 93 d7 08 	sts	0x08D7, r16	; 0x8008d7 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     ede:	20 91 d5 08 	lds	r18, 0x08D5	; 0x8008d5 <xMinimumEverFreeBytesRemaining>
     ee2:	30 91 d6 08 	lds	r19, 0x08D6	; 0x8008d6 <xMinimumEverFreeBytesRemaining+0x1>
     ee6:	02 17       	cp	r16, r18
     ee8:	13 07       	cpc	r17, r19
     eea:	20 f4       	brcc	.+8      	; 0xef4 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     eec:	10 93 d6 08 	sts	0x08D6, r17	; 0x8008d6 <xMinimumEverFreeBytesRemaining+0x1>
     ef0:	00 93 d5 08 	sts	0x08D5, r16	; 0x8008d5 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     ef4:	e8 2a       	or	r14, r24
     ef6:	f9 2a       	or	r15, r25
     ef8:	fb 82       	std	Y+3, r15	; 0x03
     efa:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
     efc:	19 82       	std	Y+1, r1	; 0x01
     efe:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     f00:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     f04:	c1 14       	cp	r12, r1
     f06:	d1 04       	cpc	r13, r1
     f08:	59 f4       	brne	.+22     	; 0xf20 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     f0a:	0e 94 8d 1a 	call	0x351a	; 0x351a <vApplicationMallocFailedHook>
     f0e:	c1 2c       	mov	r12, r1
     f10:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
     f12:	06 c0       	rjmp	.+12     	; 0xf20 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     f14:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <xTaskResumeAll>
     f18:	f8 cf       	rjmp	.-16     	; 0xf0a <pvPortMalloc+0x148>
     f1a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <xTaskResumeAll>
     f1e:	f5 cf       	rjmp	.-22     	; 0xf0a <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
     f20:	c6 01       	movw	r24, r12
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
     f2e:	df 90       	pop	r13
     f30:	cf 90       	pop	r12
     f32:	08 95       	ret

00000f34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	51 f1       	breq	.+84     	; 0xf90 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     f3c:	fc 01       	movw	r30, r24
     f3e:	34 97       	sbiw	r30, 0x04	; 4
     f40:	22 81       	ldd	r18, Z+2	; 0x02
     f42:	33 81       	ldd	r19, Z+3	; 0x03
     f44:	40 91 d3 08 	lds	r20, 0x08D3	; 0x8008d3 <xBlockAllocatedBit>
     f48:	50 91 d4 08 	lds	r21, 0x08D4	; 0x8008d4 <xBlockAllocatedBit+0x1>
     f4c:	b9 01       	movw	r22, r18
     f4e:	64 23       	and	r22, r20
     f50:	75 23       	and	r23, r21
     f52:	67 2b       	or	r22, r23
     f54:	e9 f0       	breq	.+58     	; 0xf90 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
     f56:	60 81       	ld	r22, Z
     f58:	71 81       	ldd	r23, Z+1	; 0x01
     f5a:	67 2b       	or	r22, r23
     f5c:	c9 f4       	brne	.+50     	; 0xf90 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
     f5e:	ef 01       	movw	r28, r30
     f60:	40 95       	com	r20
     f62:	50 95       	com	r21
     f64:	24 23       	and	r18, r20
     f66:	35 23       	and	r19, r21
     f68:	33 83       	std	Z+3, r19	; 0x03
     f6a:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
     f6c:	0e 94 73 12 	call	0x24e6	; 0x24e6 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
     f70:	20 91 d7 08 	lds	r18, 0x08D7	; 0x8008d7 <xFreeBytesRemaining>
     f74:	30 91 d8 08 	lds	r19, 0x08D8	; 0x8008d8 <xFreeBytesRemaining+0x1>
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	9b 81       	ldd	r25, Y+3	; 0x03
     f7c:	82 0f       	add	r24, r18
     f7e:	93 1f       	adc	r25, r19
     f80:	90 93 d8 08 	sts	0x08D8, r25	; 0x8008d8 <xFreeBytesRemaining+0x1>
     f84:	80 93 d7 08 	sts	0x08D7, r24	; 0x8008d7 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     f88:	ce 01       	movw	r24, r28
     f8a:	ce de       	rcall	.-612    	; 0xd28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
     f8c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	08 95       	ret

00000f96 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     f96:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f98:	03 96       	adiw	r24, 0x03	; 3
     f9a:	92 83       	std	Z+2, r25	; 0x02
     f9c:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     f9e:	4f ef       	ldi	r20, 0xFF	; 255
     fa0:	5f ef       	ldi	r21, 0xFF	; 255
     fa2:	ba 01       	movw	r22, r20
     fa4:	43 83       	std	Z+3, r20	; 0x03
     fa6:	54 83       	std	Z+4, r21	; 0x04
     fa8:	65 83       	std	Z+5, r22	; 0x05
     faa:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fac:	90 87       	std	Z+8, r25	; 0x08
     fae:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fb0:	92 87       	std	Z+10, r25	; 0x0a
     fb2:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     fb4:	10 82       	st	Z, r1
     fb6:	08 95       	ret

00000fb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     fb8:	fc 01       	movw	r30, r24
     fba:	13 86       	std	Z+11, r1	; 0x0b
     fbc:	12 86       	std	Z+10, r1	; 0x0a
     fbe:	08 95       	ret

00000fc0 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	9c 01       	movw	r18, r24
     fc6:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     fc8:	dc 01       	movw	r26, r24
     fca:	11 96       	adiw	r26, 0x01	; 1
     fcc:	cd 91       	ld	r28, X+
     fce:	dc 91       	ld	r29, X
     fd0:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     fd2:	d5 83       	std	Z+5, r29	; 0x05
     fd4:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     fd6:	8e 81       	ldd	r24, Y+6	; 0x06
     fd8:	9f 81       	ldd	r25, Y+7	; 0x07
     fda:	97 83       	std	Z+7, r25	; 0x07
     fdc:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     fde:	8e 81       	ldd	r24, Y+6	; 0x06
     fe0:	9f 81       	ldd	r25, Y+7	; 0x07
     fe2:	dc 01       	movw	r26, r24
     fe4:	15 96       	adiw	r26, 0x05	; 5
     fe6:	7c 93       	st	X, r23
     fe8:	6e 93       	st	-X, r22
     fea:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
     fec:	7f 83       	std	Y+7, r23	; 0x07
     fee:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     ff0:	33 87       	std	Z+11, r19	; 0x0b
     ff2:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
     ff4:	f9 01       	movw	r30, r18
     ff6:	80 81       	ld	r24, Z
     ff8:	8f 5f       	subi	r24, 0xFF	; 255
     ffa:	80 83       	st	Z, r24
}
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	08 95       	ret

00001002 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1002:	0f 93       	push	r16
    1004:	1f 93       	push	r17
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    100c:	08 81       	ld	r16, Y
    100e:	19 81       	ldd	r17, Y+1	; 0x01
    1010:	2a 81       	ldd	r18, Y+2	; 0x02
    1012:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1014:	0f 3f       	cpi	r16, 0xFF	; 255
    1016:	4f ef       	ldi	r20, 0xFF	; 255
    1018:	14 07       	cpc	r17, r20
    101a:	24 07       	cpc	r18, r20
    101c:	34 07       	cpc	r19, r20
    101e:	21 f4       	brne	.+8      	; 0x1028 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1020:	fc 01       	movw	r30, r24
    1022:	a1 85       	ldd	r26, Z+9	; 0x09
    1024:	b2 85       	ldd	r27, Z+10	; 0x0a
    1026:	11 c0       	rjmp	.+34     	; 0x104a <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1028:	dc 01       	movw	r26, r24
    102a:	13 96       	adiw	r26, 0x03	; 3
    102c:	01 c0       	rjmp	.+2      	; 0x1030 <vListInsert+0x2e>
    102e:	df 01       	movw	r26, r30
    1030:	14 96       	adiw	r26, 0x04	; 4
    1032:	ed 91       	ld	r30, X+
    1034:	fc 91       	ld	r31, X
    1036:	15 97       	sbiw	r26, 0x05	; 5
    1038:	40 81       	ld	r20, Z
    103a:	51 81       	ldd	r21, Z+1	; 0x01
    103c:	62 81       	ldd	r22, Z+2	; 0x02
    103e:	73 81       	ldd	r23, Z+3	; 0x03
    1040:	04 17       	cp	r16, r20
    1042:	15 07       	cpc	r17, r21
    1044:	26 07       	cpc	r18, r22
    1046:	37 07       	cpc	r19, r23
    1048:	90 f7       	brcc	.-28     	; 0x102e <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    104a:	14 96       	adiw	r26, 0x04	; 4
    104c:	ed 91       	ld	r30, X+
    104e:	fc 91       	ld	r31, X
    1050:	15 97       	sbiw	r26, 0x05	; 5
    1052:	fd 83       	std	Y+5, r31	; 0x05
    1054:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1056:	d7 83       	std	Z+7, r29	; 0x07
    1058:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    105a:	bf 83       	std	Y+7, r27	; 0x07
    105c:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    105e:	15 96       	adiw	r26, 0x05	; 5
    1060:	dc 93       	st	X, r29
    1062:	ce 93       	st	-X, r28
    1064:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    1066:	9b 87       	std	Y+11, r25	; 0x0b
    1068:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    106a:	fc 01       	movw	r30, r24
    106c:	20 81       	ld	r18, Z
    106e:	2f 5f       	subi	r18, 0xFF	; 255
    1070:	20 83       	st	Z, r18
}
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	08 95       	ret

0000107c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    1082:	a2 85       	ldd	r26, Z+10	; 0x0a
    1084:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1086:	c4 81       	ldd	r28, Z+4	; 0x04
    1088:	d5 81       	ldd	r29, Z+5	; 0x05
    108a:	86 81       	ldd	r24, Z+6	; 0x06
    108c:	97 81       	ldd	r25, Z+7	; 0x07
    108e:	9f 83       	std	Y+7, r25	; 0x07
    1090:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1092:	c6 81       	ldd	r28, Z+6	; 0x06
    1094:	d7 81       	ldd	r29, Z+7	; 0x07
    1096:	84 81       	ldd	r24, Z+4	; 0x04
    1098:	95 81       	ldd	r25, Z+5	; 0x05
    109a:	9d 83       	std	Y+5, r25	; 0x05
    109c:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    109e:	11 96       	adiw	r26, 0x01	; 1
    10a0:	8d 91       	ld	r24, X+
    10a2:	9c 91       	ld	r25, X
    10a4:	12 97       	sbiw	r26, 0x02	; 2
    10a6:	e8 17       	cp	r30, r24
    10a8:	f9 07       	cpc	r31, r25
    10aa:	31 f4       	brne	.+12     	; 0x10b8 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    10ac:	86 81       	ldd	r24, Z+6	; 0x06
    10ae:	97 81       	ldd	r25, Z+7	; 0x07
    10b0:	12 96       	adiw	r26, 0x02	; 2
    10b2:	9c 93       	st	X, r25
    10b4:	8e 93       	st	-X, r24
    10b6:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    10b8:	13 86       	std	Z+11, r1	; 0x0b
    10ba:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    10bc:	8c 91       	ld	r24, X
    10be:	81 50       	subi	r24, 0x01	; 1
    10c0:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    10c2:	8c 91       	ld	r24, X
}
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    10ca:	31 e1       	ldi	r19, 0x11	; 17
    10cc:	fc 01       	movw	r30, r24
    10ce:	30 83       	st	Z, r19
    10d0:	31 97       	sbiw	r30, 0x01	; 1
    10d2:	22 e2       	ldi	r18, 0x22	; 34
    10d4:	20 83       	st	Z, r18
    10d6:	31 97       	sbiw	r30, 0x01	; 1
    10d8:	a3 e3       	ldi	r26, 0x33	; 51
    10da:	a0 83       	st	Z, r26
    10dc:	31 97       	sbiw	r30, 0x01	; 1
    10de:	60 83       	st	Z, r22
    10e0:	31 97       	sbiw	r30, 0x01	; 1
    10e2:	70 83       	st	Z, r23
    10e4:	31 97       	sbiw	r30, 0x01	; 1
    10e6:	10 82       	st	Z, r1
    10e8:	31 97       	sbiw	r30, 0x01	; 1
    10ea:	10 82       	st	Z, r1
    10ec:	31 97       	sbiw	r30, 0x01	; 1
    10ee:	60 e8       	ldi	r22, 0x80	; 128
    10f0:	60 83       	st	Z, r22
    10f2:	31 97       	sbiw	r30, 0x01	; 1
    10f4:	10 82       	st	Z, r1
    10f6:	31 97       	sbiw	r30, 0x01	; 1
    10f8:	10 82       	st	Z, r1
    10fa:	31 97       	sbiw	r30, 0x01	; 1
    10fc:	10 82       	st	Z, r1
    10fe:	31 97       	sbiw	r30, 0x01	; 1
    1100:	62 e0       	ldi	r22, 0x02	; 2
    1102:	60 83       	st	Z, r22
    1104:	31 97       	sbiw	r30, 0x01	; 1
    1106:	63 e0       	ldi	r22, 0x03	; 3
    1108:	60 83       	st	Z, r22
    110a:	31 97       	sbiw	r30, 0x01	; 1
    110c:	64 e0       	ldi	r22, 0x04	; 4
    110e:	60 83       	st	Z, r22
    1110:	31 97       	sbiw	r30, 0x01	; 1
    1112:	65 e0       	ldi	r22, 0x05	; 5
    1114:	60 83       	st	Z, r22
    1116:	31 97       	sbiw	r30, 0x01	; 1
    1118:	66 e0       	ldi	r22, 0x06	; 6
    111a:	60 83       	st	Z, r22
    111c:	31 97       	sbiw	r30, 0x01	; 1
    111e:	67 e0       	ldi	r22, 0x07	; 7
    1120:	60 83       	st	Z, r22
    1122:	31 97       	sbiw	r30, 0x01	; 1
    1124:	68 e0       	ldi	r22, 0x08	; 8
    1126:	60 83       	st	Z, r22
    1128:	31 97       	sbiw	r30, 0x01	; 1
    112a:	69 e0       	ldi	r22, 0x09	; 9
    112c:	60 83       	st	Z, r22
    112e:	31 97       	sbiw	r30, 0x01	; 1
    1130:	60 e1       	ldi	r22, 0x10	; 16
    1132:	60 83       	st	Z, r22
    1134:	31 97       	sbiw	r30, 0x01	; 1
    1136:	30 83       	st	Z, r19
    1138:	31 97       	sbiw	r30, 0x01	; 1
    113a:	32 e1       	ldi	r19, 0x12	; 18
    113c:	30 83       	st	Z, r19
    113e:	31 97       	sbiw	r30, 0x01	; 1
    1140:	33 e1       	ldi	r19, 0x13	; 19
    1142:	30 83       	st	Z, r19
    1144:	31 97       	sbiw	r30, 0x01	; 1
    1146:	34 e1       	ldi	r19, 0x14	; 20
    1148:	30 83       	st	Z, r19
    114a:	31 97       	sbiw	r30, 0x01	; 1
    114c:	35 e1       	ldi	r19, 0x15	; 21
    114e:	30 83       	st	Z, r19
    1150:	31 97       	sbiw	r30, 0x01	; 1
    1152:	36 e1       	ldi	r19, 0x16	; 22
    1154:	30 83       	st	Z, r19
    1156:	31 97       	sbiw	r30, 0x01	; 1
    1158:	37 e1       	ldi	r19, 0x17	; 23
    115a:	30 83       	st	Z, r19
    115c:	31 97       	sbiw	r30, 0x01	; 1
    115e:	38 e1       	ldi	r19, 0x18	; 24
    1160:	30 83       	st	Z, r19
    1162:	31 97       	sbiw	r30, 0x01	; 1
    1164:	39 e1       	ldi	r19, 0x19	; 25
    1166:	30 83       	st	Z, r19
    1168:	31 97       	sbiw	r30, 0x01	; 1
    116a:	30 e2       	ldi	r19, 0x20	; 32
    116c:	30 83       	st	Z, r19
    116e:	31 97       	sbiw	r30, 0x01	; 1
    1170:	31 e2       	ldi	r19, 0x21	; 33
    1172:	30 83       	st	Z, r19
    1174:	31 97       	sbiw	r30, 0x01	; 1
    1176:	20 83       	st	Z, r18
    1178:	31 97       	sbiw	r30, 0x01	; 1
    117a:	23 e2       	ldi	r18, 0x23	; 35
    117c:	20 83       	st	Z, r18
    117e:	31 97       	sbiw	r30, 0x01	; 1
    1180:	40 83       	st	Z, r20
    1182:	31 97       	sbiw	r30, 0x01	; 1
    1184:	50 83       	st	Z, r21
    1186:	31 97       	sbiw	r30, 0x01	; 1
    1188:	26 e2       	ldi	r18, 0x26	; 38
    118a:	20 83       	st	Z, r18
    118c:	31 97       	sbiw	r30, 0x01	; 1
    118e:	27 e2       	ldi	r18, 0x27	; 39
    1190:	20 83       	st	Z, r18
    1192:	31 97       	sbiw	r30, 0x01	; 1
    1194:	28 e2       	ldi	r18, 0x28	; 40
    1196:	20 83       	st	Z, r18
    1198:	31 97       	sbiw	r30, 0x01	; 1
    119a:	29 e2       	ldi	r18, 0x29	; 41
    119c:	20 83       	st	Z, r18
    119e:	31 97       	sbiw	r30, 0x01	; 1
    11a0:	20 e3       	ldi	r18, 0x30	; 48
    11a2:	20 83       	st	Z, r18
    11a4:	31 97       	sbiw	r30, 0x01	; 1
    11a6:	21 e3       	ldi	r18, 0x31	; 49
    11a8:	20 83       	st	Z, r18
    11aa:	89 97       	sbiw	r24, 0x29	; 41
    11ac:	08 95       	ret

000011ae <xPortStartScheduler>:
    11ae:	a8 95       	wdr
    11b0:	90 ec       	ldi	r25, 0xC0	; 192
    11b2:	88 e1       	ldi	r24, 0x18	; 24
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	a8 95       	wdr
    11ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    11c4:	a0 91 f9 18 	lds	r26, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    11c8:	b0 91 fa 18 	lds	r27, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    11cc:	cd 91       	ld	r28, X+
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	dd 91       	ld	r29, X+
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	ff 91       	pop	r31
    11d6:	ef 91       	pop	r30
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	bf 91       	pop	r27
    11de:	af 91       	pop	r26
    11e0:	9f 91       	pop	r25
    11e2:	8f 91       	pop	r24
    11e4:	7f 91       	pop	r23
    11e6:	6f 91       	pop	r22
    11e8:	5f 91       	pop	r21
    11ea:	4f 91       	pop	r20
    11ec:	3f 91       	pop	r19
    11ee:	2f 91       	pop	r18
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	df 90       	pop	r13
    11fa:	cf 90       	pop	r12
    11fc:	bf 90       	pop	r11
    11fe:	af 90       	pop	r10
    1200:	9f 90       	pop	r9
    1202:	8f 90       	pop	r8
    1204:	7f 90       	pop	r7
    1206:	6f 90       	pop	r6
    1208:	5f 90       	pop	r5
    120a:	4f 90       	pop	r4
    120c:	3f 90       	pop	r3
    120e:	2f 90       	pop	r2
    1210:	1f 90       	pop	r1
    1212:	0f 90       	pop	r0
    1214:	0c be       	out	0x3c, r0	; 60
    1216:	0f 90       	pop	r0
    1218:	0b be       	out	0x3b, r0	; 59
    121a:	0f 90       	pop	r0
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	0f 90       	pop	r0
    1220:	08 95       	ret
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	08 95       	ret

00001226 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1226:	0f 92       	push	r0
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	0f 92       	push	r0
    122e:	0b b6       	in	r0, 0x3b	; 59
    1230:	0f 92       	push	r0
    1232:	0c b6       	in	r0, 0x3c	; 60
    1234:	0f 92       	push	r0
    1236:	1f 92       	push	r1
    1238:	11 24       	eor	r1, r1
    123a:	2f 92       	push	r2
    123c:	3f 92       	push	r3
    123e:	4f 92       	push	r4
    1240:	5f 92       	push	r5
    1242:	6f 92       	push	r6
    1244:	7f 92       	push	r7
    1246:	8f 92       	push	r8
    1248:	9f 92       	push	r9
    124a:	af 92       	push	r10
    124c:	bf 92       	push	r11
    124e:	cf 92       	push	r12
    1250:	df 92       	push	r13
    1252:	ef 92       	push	r14
    1254:	ff 92       	push	r15
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	2f 93       	push	r18
    125c:	3f 93       	push	r19
    125e:	4f 93       	push	r20
    1260:	5f 93       	push	r21
    1262:	6f 93       	push	r22
    1264:	7f 93       	push	r23
    1266:	8f 93       	push	r24
    1268:	9f 93       	push	r25
    126a:	af 93       	push	r26
    126c:	bf 93       	push	r27
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	ef 93       	push	r30
    1274:	ff 93       	push	r31
    1276:	a0 91 f9 18 	lds	r26, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    127a:	b0 91 fa 18 	lds	r27, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    127e:	0d b6       	in	r0, 0x3d	; 61
    1280:	0d 92       	st	X+, r0
    1282:	0e b6       	in	r0, 0x3e	; 62
    1284:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1286:	0e 94 4f 14 	call	0x289e	; 0x289e <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    128a:	a0 91 f9 18 	lds	r26, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    128e:	b0 91 fa 18 	lds	r27, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    1292:	cd 91       	ld	r28, X+
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	dd 91       	ld	r29, X+
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	ff 91       	pop	r31
    129c:	ef 91       	pop	r30
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	bf 91       	pop	r27
    12a4:	af 91       	pop	r26
    12a6:	9f 91       	pop	r25
    12a8:	8f 91       	pop	r24
    12aa:	7f 91       	pop	r23
    12ac:	6f 91       	pop	r22
    12ae:	5f 91       	pop	r21
    12b0:	4f 91       	pop	r20
    12b2:	3f 91       	pop	r19
    12b4:	2f 91       	pop	r18
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	df 90       	pop	r13
    12c0:	cf 90       	pop	r12
    12c2:	bf 90       	pop	r11
    12c4:	af 90       	pop	r10
    12c6:	9f 90       	pop	r9
    12c8:	8f 90       	pop	r8
    12ca:	7f 90       	pop	r7
    12cc:	6f 90       	pop	r6
    12ce:	5f 90       	pop	r5
    12d0:	4f 90       	pop	r4
    12d2:	3f 90       	pop	r3
    12d4:	2f 90       	pop	r2
    12d6:	1f 90       	pop	r1
    12d8:	0f 90       	pop	r0
    12da:	0c be       	out	0x3c, r0	; 60
    12dc:	0f 90       	pop	r0
    12de:	0b be       	out	0x3b, r0	; 59
    12e0:	0f 90       	pop	r0
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    12e6:	08 95       	ret

000012e8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    12e8:	0f 92       	push	r0
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	0f 92       	push	r0
    12f0:	0b b6       	in	r0, 0x3b	; 59
    12f2:	0f 92       	push	r0
    12f4:	0c b6       	in	r0, 0x3c	; 60
    12f6:	0f 92       	push	r0
    12f8:	1f 92       	push	r1
    12fa:	11 24       	eor	r1, r1
    12fc:	2f 92       	push	r2
    12fe:	3f 92       	push	r3
    1300:	4f 92       	push	r4
    1302:	5f 92       	push	r5
    1304:	6f 92       	push	r6
    1306:	7f 92       	push	r7
    1308:	8f 92       	push	r8
    130a:	9f 92       	push	r9
    130c:	af 92       	push	r10
    130e:	bf 92       	push	r11
    1310:	cf 92       	push	r12
    1312:	df 92       	push	r13
    1314:	ef 92       	push	r14
    1316:	ff 92       	push	r15
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	2f 93       	push	r18
    131e:	3f 93       	push	r19
    1320:	4f 93       	push	r20
    1322:	5f 93       	push	r21
    1324:	6f 93       	push	r22
    1326:	7f 93       	push	r23
    1328:	8f 93       	push	r24
    132a:	9f 93       	push	r25
    132c:	af 93       	push	r26
    132e:	bf 93       	push	r27
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	ef 93       	push	r30
    1336:	ff 93       	push	r31
    1338:	a0 91 f9 18 	lds	r26, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    133c:	b0 91 fa 18 	lds	r27, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    1340:	0d b6       	in	r0, 0x3d	; 61
    1342:	0d 92       	st	X+, r0
    1344:	0e b6       	in	r0, 0x3e	; 62
    1346:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1348:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    134a:	0e 94 87 12 	call	0x250e	; 0x250e <xTaskIncrementTick>
    134e:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1350:	0e 94 4f 14 	call	0x289e	; 0x289e <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1354:	a0 91 f9 18 	lds	r26, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    1358:	b0 91 fa 18 	lds	r27, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    135c:	cd 91       	ld	r28, X+
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	dd 91       	ld	r29, X+
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	ff 91       	pop	r31
    1366:	ef 91       	pop	r30
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	bf 91       	pop	r27
    136e:	af 91       	pop	r26
    1370:	9f 91       	pop	r25
    1372:	8f 91       	pop	r24
    1374:	7f 91       	pop	r23
    1376:	6f 91       	pop	r22
    1378:	5f 91       	pop	r21
    137a:	4f 91       	pop	r20
    137c:	3f 91       	pop	r19
    137e:	2f 91       	pop	r18
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	ef 90       	pop	r14
    1388:	df 90       	pop	r13
    138a:	cf 90       	pop	r12
    138c:	bf 90       	pop	r11
    138e:	af 90       	pop	r10
    1390:	9f 90       	pop	r9
    1392:	8f 90       	pop	r8
    1394:	7f 90       	pop	r7
    1396:	6f 90       	pop	r6
    1398:	5f 90       	pop	r5
    139a:	4f 90       	pop	r4
    139c:	3f 90       	pop	r3
    139e:	2f 90       	pop	r2
    13a0:	1f 90       	pop	r1
    13a2:	0f 90       	pop	r0
    13a4:	0c be       	out	0x3c, r0	; 60
    13a6:	0f 90       	pop	r0
    13a8:	0b be       	out	0x3b, r0	; 59
    13aa:	0f 90       	pop	r0
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    13b0:	08 95       	ret

000013b2 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    13b2:	9a df       	rcall	.-204    	; 0x12e8 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    13b4:	18 95       	reti

000013b6 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	0f 92       	push	r0
    13bc:	fc 01       	movw	r30, r24
    13be:	96 8d       	ldd	r25, Z+30	; 0x1e
    13c0:	0f 90       	pop	r0
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	91 11       	cpse	r25, r1
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	08 95       	ret

000013cc <prvCopyDataToQueue>:
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	ec 01       	movw	r28, r24
    13d6:	04 2f       	mov	r16, r20
    13d8:	1e 8d       	ldd	r17, Y+30	; 0x1e
    13da:	48 a1       	ldd	r20, Y+32	; 0x20
    13dc:	41 11       	cpse	r20, r1
    13de:	0c c0       	rjmp	.+24     	; 0x13f8 <prvCopyDataToQueue+0x2c>
    13e0:	88 81       	ld	r24, Y
    13e2:	99 81       	ldd	r25, Y+1	; 0x01
    13e4:	89 2b       	or	r24, r25
    13e6:	09 f0       	breq	.+2      	; 0x13ea <prvCopyDataToQueue+0x1e>
    13e8:	42 c0       	rjmp	.+132    	; 0x146e <prvCopyDataToQueue+0xa2>
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	9d 81       	ldd	r25, Y+5	; 0x05
    13ee:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <xTaskPriorityDisinherit>
    13f2:	1d 82       	std	Y+5, r1	; 0x05
    13f4:	1c 82       	std	Y+4, r1	; 0x04
    13f6:	42 c0       	rjmp	.+132    	; 0x147c <prvCopyDataToQueue+0xb0>
    13f8:	01 11       	cpse	r16, r1
    13fa:	17 c0       	rjmp	.+46     	; 0x142a <prvCopyDataToQueue+0x5e>
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	9b 81       	ldd	r25, Y+3	; 0x03
    1402:	0e 94 c5 2c 	call	0x598a	; 0x598a <memcpy>
    1406:	28 a1       	ldd	r18, Y+32	; 0x20
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	9b 81       	ldd	r25, Y+3	; 0x03
    140c:	82 0f       	add	r24, r18
    140e:	91 1d       	adc	r25, r1
    1410:	9b 83       	std	Y+3, r25	; 0x03
    1412:	8a 83       	std	Y+2, r24	; 0x02
    1414:	2c 81       	ldd	r18, Y+4	; 0x04
    1416:	3d 81       	ldd	r19, Y+5	; 0x05
    1418:	82 17       	cp	r24, r18
    141a:	93 07       	cpc	r25, r19
    141c:	50 f1       	brcs	.+84     	; 0x1472 <prvCopyDataToQueue+0xa6>
    141e:	88 81       	ld	r24, Y
    1420:	99 81       	ldd	r25, Y+1	; 0x01
    1422:	9b 83       	std	Y+3, r25	; 0x03
    1424:	8a 83       	std	Y+2, r24	; 0x02
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	29 c0       	rjmp	.+82     	; 0x147c <prvCopyDataToQueue+0xb0>
    142a:	50 e0       	ldi	r21, 0x00	; 0
    142c:	8e 81       	ldd	r24, Y+6	; 0x06
    142e:	9f 81       	ldd	r25, Y+7	; 0x07
    1430:	0e 94 c5 2c 	call	0x598a	; 0x598a <memcpy>
    1434:	88 a1       	ldd	r24, Y+32	; 0x20
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	91 95       	neg	r25
    143a:	81 95       	neg	r24
    143c:	91 09       	sbc	r25, r1
    143e:	2e 81       	ldd	r18, Y+6	; 0x06
    1440:	3f 81       	ldd	r19, Y+7	; 0x07
    1442:	28 0f       	add	r18, r24
    1444:	39 1f       	adc	r19, r25
    1446:	3f 83       	std	Y+7, r19	; 0x07
    1448:	2e 83       	std	Y+6, r18	; 0x06
    144a:	48 81       	ld	r20, Y
    144c:	59 81       	ldd	r21, Y+1	; 0x01
    144e:	24 17       	cp	r18, r20
    1450:	35 07       	cpc	r19, r21
    1452:	30 f4       	brcc	.+12     	; 0x1460 <prvCopyDataToQueue+0x94>
    1454:	2c 81       	ldd	r18, Y+4	; 0x04
    1456:	3d 81       	ldd	r19, Y+5	; 0x05
    1458:	82 0f       	add	r24, r18
    145a:	93 1f       	adc	r25, r19
    145c:	9f 83       	std	Y+7, r25	; 0x07
    145e:	8e 83       	std	Y+6, r24	; 0x06
    1460:	02 30       	cpi	r16, 0x02	; 2
    1462:	49 f4       	brne	.+18     	; 0x1476 <prvCopyDataToQueue+0xaa>
    1464:	11 23       	and	r17, r17
    1466:	49 f0       	breq	.+18     	; 0x147a <prvCopyDataToQueue+0xae>
    1468:	11 50       	subi	r17, 0x01	; 1
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	07 c0       	rjmp	.+14     	; 0x147c <prvCopyDataToQueue+0xb0>
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	05 c0       	rjmp	.+10     	; 0x147c <prvCopyDataToQueue+0xb0>
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	03 c0       	rjmp	.+6      	; 0x147c <prvCopyDataToQueue+0xb0>
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	01 c0       	rjmp	.+2      	; 0x147c <prvCopyDataToQueue+0xb0>
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	1f 5f       	subi	r17, 0xFF	; 255
    147e:	1e 8f       	std	Y+30, r17	; 0x1e
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	1f 91       	pop	r17
    1486:	0f 91       	pop	r16
    1488:	08 95       	ret

0000148a <prvCopyDataFromQueue>:
    148a:	fc 01       	movw	r30, r24
    148c:	40 a1       	ldd	r20, Z+32	; 0x20
    148e:	44 23       	and	r20, r20
    1490:	a9 f0       	breq	.+42     	; 0x14bc <prvCopyDataFromQueue+0x32>
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	26 81       	ldd	r18, Z+6	; 0x06
    1496:	37 81       	ldd	r19, Z+7	; 0x07
    1498:	24 0f       	add	r18, r20
    149a:	35 1f       	adc	r19, r21
    149c:	37 83       	std	Z+7, r19	; 0x07
    149e:	26 83       	std	Z+6, r18	; 0x06
    14a0:	84 81       	ldd	r24, Z+4	; 0x04
    14a2:	95 81       	ldd	r25, Z+5	; 0x05
    14a4:	28 17       	cp	r18, r24
    14a6:	39 07       	cpc	r19, r25
    14a8:	20 f0       	brcs	.+8      	; 0x14b2 <prvCopyDataFromQueue+0x28>
    14aa:	80 81       	ld	r24, Z
    14ac:	91 81       	ldd	r25, Z+1	; 0x01
    14ae:	97 83       	std	Z+7, r25	; 0x07
    14b0:	86 83       	std	Z+6, r24	; 0x06
    14b2:	cb 01       	movw	r24, r22
    14b4:	66 81       	ldd	r22, Z+6	; 0x06
    14b6:	77 81       	ldd	r23, Z+7	; 0x07
    14b8:	0c 94 c5 2c 	jmp	0x598a	; 0x598a <memcpy>
    14bc:	08 95       	ret

000014be <prvUnlockQueue>:
    14be:	ef 92       	push	r14
    14c0:	ff 92       	push	r15
    14c2:	0f 93       	push	r16
    14c4:	1f 93       	push	r17
    14c6:	cf 93       	push	r28
    14c8:	8c 01       	movw	r16, r24
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	0f 92       	push	r0
    14d0:	fc 01       	movw	r30, r24
    14d2:	c2 a1       	ldd	r28, Z+34	; 0x22
    14d4:	1c 16       	cp	r1, r28
    14d6:	ac f4       	brge	.+42     	; 0x1502 <prvUnlockQueue+0x44>
    14d8:	83 89       	ldd	r24, Z+19	; 0x13
    14da:	81 11       	cpse	r24, r1
    14dc:	06 c0       	rjmp	.+12     	; 0x14ea <prvUnlockQueue+0x2c>
    14de:	11 c0       	rjmp	.+34     	; 0x1502 <prvUnlockQueue+0x44>
    14e0:	f8 01       	movw	r30, r16
    14e2:	83 89       	ldd	r24, Z+19	; 0x13
    14e4:	81 11       	cpse	r24, r1
    14e6:	05 c0       	rjmp	.+10     	; 0x14f2 <prvUnlockQueue+0x34>
    14e8:	0c c0       	rjmp	.+24     	; 0x1502 <prvUnlockQueue+0x44>
    14ea:	78 01       	movw	r14, r16
    14ec:	f3 e1       	ldi	r31, 0x13	; 19
    14ee:	ef 0e       	add	r14, r31
    14f0:	f1 1c       	adc	r15, r1
    14f2:	c7 01       	movw	r24, r14
    14f4:	0e 94 29 15 	call	0x2a52	; 0x2a52 <xTaskRemoveFromEventList>
    14f8:	81 11       	cpse	r24, r1
    14fa:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <vTaskMissedYield>
    14fe:	c1 50       	subi	r28, 0x01	; 1
    1500:	79 f7       	brne	.-34     	; 0x14e0 <prvUnlockQueue+0x22>
    1502:	8f ef       	ldi	r24, 0xFF	; 255
    1504:	f8 01       	movw	r30, r16
    1506:	82 a3       	std	Z+34, r24	; 0x22
    1508:	0f 90       	pop	r0
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	0f 92       	push	r0
    1512:	c1 a1       	ldd	r28, Z+33	; 0x21
    1514:	1c 16       	cp	r1, r28
    1516:	ac f4       	brge	.+42     	; 0x1542 <prvUnlockQueue+0x84>
    1518:	80 85       	ldd	r24, Z+8	; 0x08
    151a:	81 11       	cpse	r24, r1
    151c:	06 c0       	rjmp	.+12     	; 0x152a <prvUnlockQueue+0x6c>
    151e:	11 c0       	rjmp	.+34     	; 0x1542 <prvUnlockQueue+0x84>
    1520:	f8 01       	movw	r30, r16
    1522:	80 85       	ldd	r24, Z+8	; 0x08
    1524:	81 11       	cpse	r24, r1
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <prvUnlockQueue+0x74>
    1528:	0c c0       	rjmp	.+24     	; 0x1542 <prvUnlockQueue+0x84>
    152a:	78 01       	movw	r14, r16
    152c:	f8 e0       	ldi	r31, 0x08	; 8
    152e:	ef 0e       	add	r14, r31
    1530:	f1 1c       	adc	r15, r1
    1532:	c7 01       	movw	r24, r14
    1534:	0e 94 29 15 	call	0x2a52	; 0x2a52 <xTaskRemoveFromEventList>
    1538:	81 11       	cpse	r24, r1
    153a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <vTaskMissedYield>
    153e:	c1 50       	subi	r28, 0x01	; 1
    1540:	79 f7       	brne	.-34     	; 0x1520 <prvUnlockQueue+0x62>
    1542:	8f ef       	ldi	r24, 0xFF	; 255
    1544:	f8 01       	movw	r30, r16
    1546:	81 a3       	std	Z+33, r24	; 0x21
    1548:	0f 90       	pop	r0
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cf 91       	pop	r28
    154e:	1f 91       	pop	r17
    1550:	0f 91       	pop	r16
    1552:	ff 90       	pop	r15
    1554:	ef 90       	pop	r14
    1556:	08 95       	ret

00001558 <xQueueGenericReset>:
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	ec 01       	movw	r28, r24
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	0f 92       	push	r0
    1564:	e8 81       	ld	r30, Y
    1566:	f9 81       	ldd	r31, Y+1	; 0x01
    1568:	8f 8d       	ldd	r24, Y+31	; 0x1f
    156a:	28 a1       	ldd	r18, Y+32	; 0x20
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	82 9f       	mul	r24, r18
    1572:	a0 01       	movw	r20, r0
    1574:	83 9f       	mul	r24, r19
    1576:	50 0d       	add	r21, r0
    1578:	92 9f       	mul	r25, r18
    157a:	50 0d       	add	r21, r0
    157c:	11 24       	eor	r1, r1
    157e:	4e 0f       	add	r20, r30
    1580:	5f 1f       	adc	r21, r31
    1582:	5d 83       	std	Y+5, r21	; 0x05
    1584:	4c 83       	std	Y+4, r20	; 0x04
    1586:	1e 8e       	std	Y+30, r1	; 0x1e
    1588:	fb 83       	std	Y+3, r31	; 0x03
    158a:	ea 83       	std	Y+2, r30	; 0x02
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	82 9f       	mul	r24, r18
    1590:	a0 01       	movw	r20, r0
    1592:	83 9f       	mul	r24, r19
    1594:	50 0d       	add	r21, r0
    1596:	92 9f       	mul	r25, r18
    1598:	50 0d       	add	r21, r0
    159a:	11 24       	eor	r1, r1
    159c:	cf 01       	movw	r24, r30
    159e:	84 0f       	add	r24, r20
    15a0:	95 1f       	adc	r25, r21
    15a2:	9f 83       	std	Y+7, r25	; 0x07
    15a4:	8e 83       	std	Y+6, r24	; 0x06
    15a6:	8f ef       	ldi	r24, 0xFF	; 255
    15a8:	89 a3       	std	Y+33, r24	; 0x21
    15aa:	8a a3       	std	Y+34, r24	; 0x22
    15ac:	61 11       	cpse	r22, r1
    15ae:	0b c0       	rjmp	.+22     	; 0x15c6 <xQueueGenericReset+0x6e>
    15b0:	88 85       	ldd	r24, Y+8	; 0x08
    15b2:	88 23       	and	r24, r24
    15b4:	71 f0       	breq	.+28     	; 0x15d2 <xQueueGenericReset+0x7a>
    15b6:	ce 01       	movw	r24, r28
    15b8:	08 96       	adiw	r24, 0x08	; 8
    15ba:	0e 94 29 15 	call	0x2a52	; 0x2a52 <xTaskRemoveFromEventList>
    15be:	88 23       	and	r24, r24
    15c0:	41 f0       	breq	.+16     	; 0x15d2 <xQueueGenericReset+0x7a>
    15c2:	31 de       	rcall	.-926    	; 0x1226 <vPortYield>
    15c4:	06 c0       	rjmp	.+12     	; 0x15d2 <xQueueGenericReset+0x7a>
    15c6:	ce 01       	movw	r24, r28
    15c8:	08 96       	adiw	r24, 0x08	; 8
    15ca:	e5 dc       	rcall	.-1590   	; 0xf96 <vListInitialise>
    15cc:	ce 01       	movw	r24, r28
    15ce:	43 96       	adiw	r24, 0x13	; 19
    15d0:	e2 dc       	rcall	.-1596   	; 0xf96 <vListInitialise>
    15d2:	0f 90       	pop	r0
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	08 95       	ret

000015de <xQueueGenericCreate>:
    15de:	ff 92       	push	r15
    15e0:	0f 93       	push	r16
    15e2:	1f 93       	push	r17
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	08 2f       	mov	r16, r24
    15ea:	16 2f       	mov	r17, r22
    15ec:	f4 2e       	mov	r15, r20
    15ee:	66 23       	and	r22, r22
    15f0:	b9 f0       	breq	.+46     	; 0x1620 <xQueueGenericCreate+0x42>
    15f2:	86 9f       	mul	r24, r22
    15f4:	c0 01       	movw	r24, r0
    15f6:	11 24       	eor	r1, r1
    15f8:	85 96       	adiw	r24, 0x25	; 37
    15fa:	e3 db       	rcall	.-2106   	; 0xdc2 <pvPortMalloc>
    15fc:	ec 01       	movw	r28, r24
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	41 f4       	brne	.+16     	; 0x1612 <xQueueGenericCreate+0x34>
    1602:	14 c0       	rjmp	.+40     	; 0x162c <xQueueGenericCreate+0x4e>
    1604:	0f 8f       	std	Y+31, r16	; 0x1f
    1606:	18 a3       	std	Y+32, r17	; 0x20
    1608:	61 e0       	ldi	r22, 0x01	; 1
    160a:	ce 01       	movw	r24, r28
    160c:	a5 df       	rcall	.-182    	; 0x1558 <xQueueGenericReset>
    160e:	fc a2       	std	Y+36, r15	; 0x24
    1610:	0d c0       	rjmp	.+26     	; 0x162c <xQueueGenericCreate+0x4e>
    1612:	85 96       	adiw	r24, 0x25	; 37
    1614:	99 83       	std	Y+1, r25	; 0x01
    1616:	88 83       	st	Y, r24
    1618:	f5 cf       	rjmp	.-22     	; 0x1604 <xQueueGenericCreate+0x26>
    161a:	d9 83       	std	Y+1, r29	; 0x01
    161c:	c8 83       	st	Y, r28
    161e:	f2 cf       	rjmp	.-28     	; 0x1604 <xQueueGenericCreate+0x26>
    1620:	85 e2       	ldi	r24, 0x25	; 37
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	ce db       	rcall	.-2148   	; 0xdc2 <pvPortMalloc>
    1626:	ec 01       	movw	r28, r24
    1628:	89 2b       	or	r24, r25
    162a:	b9 f7       	brne	.-18     	; 0x161a <xQueueGenericCreate+0x3c>
    162c:	ce 01       	movw	r24, r28
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	08 95       	ret

0000163a <xQueueGenericSend>:
    163a:	9f 92       	push	r9
    163c:	af 92       	push	r10
    163e:	bf 92       	push	r11
    1640:	cf 92       	push	r12
    1642:	df 92       	push	r13
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	29 97       	sbiw	r28, 0x09	; 9
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	7c 01       	movw	r14, r24
    1662:	5b 01       	movw	r10, r22
    1664:	2e 83       	std	Y+6, r18	; 0x06
    1666:	3f 83       	std	Y+7, r19	; 0x07
    1668:	48 87       	std	Y+8, r20	; 0x08
    166a:	59 87       	std	Y+9, r21	; 0x09
    166c:	10 e0       	ldi	r17, 0x00	; 0
    166e:	99 24       	eor	r9, r9
    1670:	93 94       	inc	r9
    1672:	6c 01       	movw	r12, r24
    1674:	88 e0       	ldi	r24, 0x08	; 8
    1676:	c8 0e       	add	r12, r24
    1678:	d1 1c       	adc	r13, r1
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	0f 92       	push	r0
    1680:	f7 01       	movw	r30, r14
    1682:	96 8d       	ldd	r25, Z+30	; 0x1e
    1684:	87 8d       	ldd	r24, Z+31	; 0x1f
    1686:	98 17       	cp	r25, r24
    1688:	10 f0       	brcs	.+4      	; 0x168e <xQueueGenericSend+0x54>
    168a:	02 30       	cpi	r16, 0x02	; 2
    168c:	b1 f4       	brne	.+44     	; 0x16ba <xQueueGenericSend+0x80>
    168e:	40 2f       	mov	r20, r16
    1690:	b5 01       	movw	r22, r10
    1692:	c7 01       	movw	r24, r14
    1694:	9b de       	rcall	.-714    	; 0x13cc <prvCopyDataToQueue>
    1696:	f7 01       	movw	r30, r14
    1698:	93 89       	ldd	r25, Z+19	; 0x13
    169a:	99 23       	and	r25, r25
    169c:	41 f0       	breq	.+16     	; 0x16ae <xQueueGenericSend+0x74>
    169e:	c7 01       	movw	r24, r14
    16a0:	43 96       	adiw	r24, 0x13	; 19
    16a2:	0e 94 29 15 	call	0x2a52	; 0x2a52 <xTaskRemoveFromEventList>
    16a6:	88 23       	and	r24, r24
    16a8:	21 f0       	breq	.+8      	; 0x16b2 <xQueueGenericSend+0x78>
    16aa:	bd dd       	rcall	.-1158   	; 0x1226 <vPortYield>
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <xQueueGenericSend+0x78>
    16ae:	81 11       	cpse	r24, r1
    16b0:	ba dd       	rcall	.-1164   	; 0x1226 <vPortYield>
    16b2:	0f 90       	pop	r0
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	4e c0       	rjmp	.+156    	; 0x1756 <xQueueGenericSend+0x11c>
    16ba:	8e 81       	ldd	r24, Y+6	; 0x06
    16bc:	9f 81       	ldd	r25, Y+7	; 0x07
    16be:	a8 85       	ldd	r26, Y+8	; 0x08
    16c0:	b9 85       	ldd	r27, Y+9	; 0x09
    16c2:	89 2b       	or	r24, r25
    16c4:	8a 2b       	or	r24, r26
    16c6:	8b 2b       	or	r24, r27
    16c8:	21 f4       	brne	.+8      	; 0x16d2 <xQueueGenericSend+0x98>
    16ca:	0f 90       	pop	r0
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	42 c0       	rjmp	.+132    	; 0x1756 <xQueueGenericSend+0x11c>
    16d2:	11 11       	cpse	r17, r1
    16d4:	05 c0       	rjmp	.+10     	; 0x16e0 <xQueueGenericSend+0xa6>
    16d6:	ce 01       	movw	r24, r28
    16d8:	01 96       	adiw	r24, 0x01	; 1
    16da:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <vTaskInternalSetTimeOutState>
    16de:	19 2d       	mov	r17, r9
    16e0:	0f 90       	pop	r0
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	00 d7       	rcall	.+3584   	; 0x24e6 <vTaskSuspendAll>
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	0f 92       	push	r0
    16ec:	f7 01       	movw	r30, r14
    16ee:	81 a1       	ldd	r24, Z+33	; 0x21
    16f0:	8f 3f       	cpi	r24, 0xFF	; 255
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <xQueueGenericSend+0xbc>
    16f4:	11 a2       	std	Z+33, r1	; 0x21
    16f6:	f7 01       	movw	r30, r14
    16f8:	82 a1       	ldd	r24, Z+34	; 0x22
    16fa:	8f 3f       	cpi	r24, 0xFF	; 255
    16fc:	09 f4       	brne	.+2      	; 0x1700 <xQueueGenericSend+0xc6>
    16fe:	12 a2       	std	Z+34, r1	; 0x22
    1700:	0f 90       	pop	r0
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	be 01       	movw	r22, r28
    1706:	6a 5f       	subi	r22, 0xFA	; 250
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	ce 01       	movw	r24, r28
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <xTaskCheckForTimeOut>
    1712:	81 11       	cpse	r24, r1
    1714:	1c c0       	rjmp	.+56     	; 0x174e <xQueueGenericSend+0x114>
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	0f 92       	push	r0
    171c:	f7 01       	movw	r30, r14
    171e:	96 8d       	ldd	r25, Z+30	; 0x1e
    1720:	87 8d       	ldd	r24, Z+31	; 0x1f
    1722:	0f 90       	pop	r0
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	98 13       	cpse	r25, r24
    1728:	0e c0       	rjmp	.+28     	; 0x1746 <xQueueGenericSend+0x10c>
    172a:	4e 81       	ldd	r20, Y+6	; 0x06
    172c:	5f 81       	ldd	r21, Y+7	; 0x07
    172e:	68 85       	ldd	r22, Y+8	; 0x08
    1730:	79 85       	ldd	r23, Y+9	; 0x09
    1732:	c6 01       	movw	r24, r12
    1734:	0e 94 ce 14 	call	0x299c	; 0x299c <vTaskPlaceOnEventList>
    1738:	c7 01       	movw	r24, r14
    173a:	c1 de       	rcall	.-638    	; 0x14be <prvUnlockQueue>
    173c:	bd d7       	rcall	.+3962   	; 0x26b8 <xTaskResumeAll>
    173e:	81 11       	cpse	r24, r1
    1740:	9c cf       	rjmp	.-200    	; 0x167a <xQueueGenericSend+0x40>
    1742:	71 dd       	rcall	.-1310   	; 0x1226 <vPortYield>
    1744:	9a cf       	rjmp	.-204    	; 0x167a <xQueueGenericSend+0x40>
    1746:	c7 01       	movw	r24, r14
    1748:	ba de       	rcall	.-652    	; 0x14be <prvUnlockQueue>
    174a:	b6 d7       	rcall	.+3948   	; 0x26b8 <xTaskResumeAll>
    174c:	96 cf       	rjmp	.-212    	; 0x167a <xQueueGenericSend+0x40>
    174e:	c7 01       	movw	r24, r14
    1750:	b6 de       	rcall	.-660    	; 0x14be <prvUnlockQueue>
    1752:	b2 d7       	rcall	.+3940   	; 0x26b8 <xTaskResumeAll>
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	29 96       	adiw	r28, 0x09	; 9
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	ff 90       	pop	r15
    176c:	ef 90       	pop	r14
    176e:	df 90       	pop	r13
    1770:	cf 90       	pop	r12
    1772:	bf 90       	pop	r11
    1774:	af 90       	pop	r10
    1776:	9f 90       	pop	r9
    1778:	08 95       	ret

0000177a <xQueueCreateMutex>:
    177a:	0f 93       	push	r16
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	48 2f       	mov	r20, r24
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	2b df       	rcall	.-426    	; 0x15de <xQueueGenericCreate>
    1788:	ec 01       	movw	r28, r24
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	61 f0       	breq	.+24     	; 0x17a6 <xQueueCreateMutex+0x2c>
    178e:	1d 82       	std	Y+5, r1	; 0x05
    1790:	1c 82       	std	Y+4, r1	; 0x04
    1792:	19 82       	std	Y+1, r1	; 0x01
    1794:	18 82       	st	Y, r1
    1796:	1e 82       	std	Y+6, r1	; 0x06
    1798:	00 e0       	ldi	r16, 0x00	; 0
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	a9 01       	movw	r20, r18
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	4a df       	rcall	.-364    	; 0x163a <xQueueGenericSend>
    17a6:	ce 01       	movw	r24, r28
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	0f 91       	pop	r16
    17ae:	08 95       	ret

000017b0 <xQueueGenericSendFromISR>:
    17b0:	ef 92       	push	r14
    17b2:	ff 92       	push	r15
    17b4:	0f 93       	push	r16
    17b6:	1f 93       	push	r17
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	8a 01       	movw	r16, r20
    17be:	fc 01       	movw	r30, r24
    17c0:	56 8d       	ldd	r21, Z+30	; 0x1e
    17c2:	37 8d       	ldd	r19, Z+31	; 0x1f
    17c4:	53 17       	cp	r21, r19
    17c6:	10 f0       	brcs	.+4      	; 0x17cc <xQueueGenericSendFromISR+0x1c>
    17c8:	22 30       	cpi	r18, 0x02	; 2
    17ca:	e9 f4       	brne	.+58     	; 0x1806 <xQueueGenericSendFromISR+0x56>
    17cc:	42 2f       	mov	r20, r18
    17ce:	78 01       	movw	r14, r16
    17d0:	ec 01       	movw	r28, r24
    17d2:	1a a1       	ldd	r17, Y+34	; 0x22
    17d4:	fb dd       	rcall	.-1034   	; 0x13cc <prvCopyDataToQueue>
    17d6:	1f 3f       	cpi	r17, 0xFF	; 255
    17d8:	81 f4       	brne	.+32     	; 0x17fa <xQueueGenericSendFromISR+0x4a>
    17da:	8b 89       	ldd	r24, Y+19	; 0x13
    17dc:	88 23       	and	r24, r24
    17de:	a9 f0       	breq	.+42     	; 0x180a <xQueueGenericSendFromISR+0x5a>
    17e0:	ce 01       	movw	r24, r28
    17e2:	43 96       	adiw	r24, 0x13	; 19
    17e4:	0e 94 29 15 	call	0x2a52	; 0x2a52 <xTaskRemoveFromEventList>
    17e8:	88 23       	and	r24, r24
    17ea:	89 f0       	breq	.+34     	; 0x180e <xQueueGenericSendFromISR+0x5e>
    17ec:	e1 14       	cp	r14, r1
    17ee:	f1 04       	cpc	r15, r1
    17f0:	81 f0       	breq	.+32     	; 0x1812 <xQueueGenericSendFromISR+0x62>
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	f7 01       	movw	r30, r14
    17f6:	80 83       	st	Z, r24
    17f8:	0d c0       	rjmp	.+26     	; 0x1814 <xQueueGenericSendFromISR+0x64>
    17fa:	ff 24       	eor	r15, r15
    17fc:	f3 94       	inc	r15
    17fe:	f1 0e       	add	r15, r17
    1800:	fa a2       	std	Y+34, r15	; 0x22
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	07 c0       	rjmp	.+14     	; 0x1814 <xQueueGenericSendFromISR+0x64>
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	05 c0       	rjmp	.+10     	; 0x1814 <xQueueGenericSendFromISR+0x64>
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	03 c0       	rjmp	.+6      	; 0x1814 <xQueueGenericSendFromISR+0x64>
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	01 c0       	rjmp	.+2      	; 0x1814 <xQueueGenericSendFromISR+0x64>
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	08 95       	ret

00001822 <xQueueReceive>:
    1822:	9f 92       	push	r9
    1824:	af 92       	push	r10
    1826:	bf 92       	push	r11
    1828:	cf 92       	push	r12
    182a:	df 92       	push	r13
    182c:	ef 92       	push	r14
    182e:	ff 92       	push	r15
    1830:	0f 93       	push	r16
    1832:	1f 93       	push	r17
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	29 97       	sbiw	r28, 0x09	; 9
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	8c 01       	movw	r16, r24
    184a:	5b 01       	movw	r10, r22
    184c:	2e 83       	std	Y+6, r18	; 0x06
    184e:	3f 83       	std	Y+7, r19	; 0x07
    1850:	48 87       	std	Y+8, r20	; 0x08
    1852:	59 87       	std	Y+9, r21	; 0x09
    1854:	e1 2c       	mov	r14, r1
    1856:	99 24       	eor	r9, r9
    1858:	93 94       	inc	r9
    185a:	6c 01       	movw	r12, r24
    185c:	83 e1       	ldi	r24, 0x13	; 19
    185e:	c8 0e       	add	r12, r24
    1860:	d1 1c       	adc	r13, r1
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	0f 92       	push	r0
    1868:	f8 01       	movw	r30, r16
    186a:	f6 8c       	ldd	r15, Z+30	; 0x1e
    186c:	ff 20       	and	r15, r15
    186e:	99 f0       	breq	.+38     	; 0x1896 <xQueueReceive+0x74>
    1870:	b5 01       	movw	r22, r10
    1872:	c8 01       	movw	r24, r16
    1874:	0a de       	rcall	.-1004   	; 0x148a <prvCopyDataFromQueue>
    1876:	fa 94       	dec	r15
    1878:	f8 01       	movw	r30, r16
    187a:	f6 8e       	std	Z+30, r15	; 0x1e
    187c:	80 85       	ldd	r24, Z+8	; 0x08
    187e:	88 23       	and	r24, r24
    1880:	31 f0       	breq	.+12     	; 0x188e <xQueueReceive+0x6c>
    1882:	c8 01       	movw	r24, r16
    1884:	08 96       	adiw	r24, 0x08	; 8
    1886:	0e 94 29 15 	call	0x2a52	; 0x2a52 <xTaskRemoveFromEventList>
    188a:	81 11       	cpse	r24, r1
    188c:	cc dc       	rcall	.-1640   	; 0x1226 <vPortYield>
    188e:	0f 90       	pop	r0
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	4d c0       	rjmp	.+154    	; 0x1930 <xQueueReceive+0x10e>
    1896:	8e 81       	ldd	r24, Y+6	; 0x06
    1898:	9f 81       	ldd	r25, Y+7	; 0x07
    189a:	a8 85       	ldd	r26, Y+8	; 0x08
    189c:	b9 85       	ldd	r27, Y+9	; 0x09
    189e:	89 2b       	or	r24, r25
    18a0:	8a 2b       	or	r24, r26
    18a2:	8b 2b       	or	r24, r27
    18a4:	21 f4       	brne	.+8      	; 0x18ae <xQueueReceive+0x8c>
    18a6:	0f 90       	pop	r0
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	41 c0       	rjmp	.+130    	; 0x1930 <xQueueReceive+0x10e>
    18ae:	e1 10       	cpse	r14, r1
    18b0:	05 c0       	rjmp	.+10     	; 0x18bc <xQueueReceive+0x9a>
    18b2:	ce 01       	movw	r24, r28
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <vTaskInternalSetTimeOutState>
    18ba:	e9 2c       	mov	r14, r9
    18bc:	0f 90       	pop	r0
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	12 d6       	rcall	.+3108   	; 0x24e6 <vTaskSuspendAll>
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	0f 92       	push	r0
    18c8:	f8 01       	movw	r30, r16
    18ca:	81 a1       	ldd	r24, Z+33	; 0x21
    18cc:	8f 3f       	cpi	r24, 0xFF	; 255
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <xQueueReceive+0xb0>
    18d0:	11 a2       	std	Z+33, r1	; 0x21
    18d2:	f8 01       	movw	r30, r16
    18d4:	82 a1       	ldd	r24, Z+34	; 0x22
    18d6:	8f 3f       	cpi	r24, 0xFF	; 255
    18d8:	09 f4       	brne	.+2      	; 0x18dc <xQueueReceive+0xba>
    18da:	12 a2       	std	Z+34, r1	; 0x22
    18dc:	0f 90       	pop	r0
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	be 01       	movw	r22, r28
    18e2:	6a 5f       	subi	r22, 0xFA	; 250
    18e4:	7f 4f       	sbci	r23, 0xFF	; 255
    18e6:	ce 01       	movw	r24, r28
    18e8:	01 96       	adiw	r24, 0x01	; 1
    18ea:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <xTaskCheckForTimeOut>
    18ee:	81 11       	cpse	r24, r1
    18f0:	16 c0       	rjmp	.+44     	; 0x191e <xQueueReceive+0xfc>
    18f2:	c8 01       	movw	r24, r16
    18f4:	60 dd       	rcall	.-1344   	; 0x13b6 <prvIsQueueEmpty>
    18f6:	88 23       	and	r24, r24
    18f8:	71 f0       	breq	.+28     	; 0x1916 <xQueueReceive+0xf4>
    18fa:	4e 81       	ldd	r20, Y+6	; 0x06
    18fc:	5f 81       	ldd	r21, Y+7	; 0x07
    18fe:	68 85       	ldd	r22, Y+8	; 0x08
    1900:	79 85       	ldd	r23, Y+9	; 0x09
    1902:	c6 01       	movw	r24, r12
    1904:	0e 94 ce 14 	call	0x299c	; 0x299c <vTaskPlaceOnEventList>
    1908:	c8 01       	movw	r24, r16
    190a:	d9 dd       	rcall	.-1102   	; 0x14be <prvUnlockQueue>
    190c:	d5 d6       	rcall	.+3498   	; 0x26b8 <xTaskResumeAll>
    190e:	81 11       	cpse	r24, r1
    1910:	a8 cf       	rjmp	.-176    	; 0x1862 <xQueueReceive+0x40>
    1912:	89 dc       	rcall	.-1774   	; 0x1226 <vPortYield>
    1914:	a6 cf       	rjmp	.-180    	; 0x1862 <xQueueReceive+0x40>
    1916:	c8 01       	movw	r24, r16
    1918:	d2 dd       	rcall	.-1116   	; 0x14be <prvUnlockQueue>
    191a:	ce d6       	rcall	.+3484   	; 0x26b8 <xTaskResumeAll>
    191c:	a2 cf       	rjmp	.-188    	; 0x1862 <xQueueReceive+0x40>
    191e:	c8 01       	movw	r24, r16
    1920:	ce dd       	rcall	.-1124   	; 0x14be <prvUnlockQueue>
    1922:	ca d6       	rcall	.+3476   	; 0x26b8 <xTaskResumeAll>
    1924:	c8 01       	movw	r24, r16
    1926:	47 dd       	rcall	.-1394   	; 0x13b6 <prvIsQueueEmpty>
    1928:	88 23       	and	r24, r24
    192a:	09 f4       	brne	.+2      	; 0x192e <xQueueReceive+0x10c>
    192c:	9a cf       	rjmp	.-204    	; 0x1862 <xQueueReceive+0x40>
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	29 96       	adiw	r28, 0x09	; 9
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	ff 90       	pop	r15
    1946:	ef 90       	pop	r14
    1948:	df 90       	pop	r13
    194a:	cf 90       	pop	r12
    194c:	bf 90       	pop	r11
    194e:	af 90       	pop	r10
    1950:	9f 90       	pop	r9
    1952:	08 95       	ret

00001954 <xQueueSemaphoreTake>:
    1954:	bf 92       	push	r11
    1956:	cf 92       	push	r12
    1958:	df 92       	push	r13
    195a:	ef 92       	push	r14
    195c:	ff 92       	push	r15
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	29 97       	sbiw	r28, 0x09	; 9
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	8c 01       	movw	r16, r24
    1978:	4e 83       	std	Y+6, r20	; 0x06
    197a:	5f 83       	std	Y+7, r21	; 0x07
    197c:	68 87       	std	Y+8, r22	; 0x08
    197e:	79 87       	std	Y+9, r23	; 0x09
    1980:	b1 2c       	mov	r11, r1
    1982:	d1 2c       	mov	r13, r1
    1984:	cc 24       	eor	r12, r12
    1986:	c3 94       	inc	r12
    1988:	7c 01       	movw	r14, r24
    198a:	83 e1       	ldi	r24, 0x13	; 19
    198c:	e8 0e       	add	r14, r24
    198e:	f1 1c       	adc	r15, r1
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	0f 92       	push	r0
    1996:	d8 01       	movw	r26, r16
    1998:	5e 96       	adiw	r26, 0x1e	; 30
    199a:	8c 91       	ld	r24, X
    199c:	5e 97       	sbiw	r26, 0x1e	; 30
    199e:	88 23       	and	r24, r24
    19a0:	e1 f0       	breq	.+56     	; 0x19da <xQueueSemaphoreTake+0x86>
    19a2:	81 50       	subi	r24, 0x01	; 1
    19a4:	5e 96       	adiw	r26, 0x1e	; 30
    19a6:	8c 93       	st	X, r24
    19a8:	5e 97       	sbiw	r26, 0x1e	; 30
    19aa:	8d 91       	ld	r24, X+
    19ac:	9c 91       	ld	r25, X
    19ae:	89 2b       	or	r24, r25
    19b0:	29 f4       	brne	.+10     	; 0x19bc <xQueueSemaphoreTake+0x68>
    19b2:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <pvTaskIncrementMutexHeldCount>
    19b6:	f8 01       	movw	r30, r16
    19b8:	95 83       	std	Z+5, r25	; 0x05
    19ba:	84 83       	std	Z+4, r24	; 0x04
    19bc:	d8 01       	movw	r26, r16
    19be:	18 96       	adiw	r26, 0x08	; 8
    19c0:	8c 91       	ld	r24, X
    19c2:	88 23       	and	r24, r24
    19c4:	31 f0       	breq	.+12     	; 0x19d2 <xQueueSemaphoreTake+0x7e>
    19c6:	c8 01       	movw	r24, r16
    19c8:	08 96       	adiw	r24, 0x08	; 8
    19ca:	0e 94 29 15 	call	0x2a52	; 0x2a52 <xTaskRemoveFromEventList>
    19ce:	81 11       	cpse	r24, r1
    19d0:	2a dc       	rcall	.-1964   	; 0x1226 <vPortYield>
    19d2:	0f 90       	pop	r0
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	7a c0       	rjmp	.+244    	; 0x1ace <xQueueSemaphoreTake+0x17a>
    19da:	8e 81       	ldd	r24, Y+6	; 0x06
    19dc:	9f 81       	ldd	r25, Y+7	; 0x07
    19de:	a8 85       	ldd	r26, Y+8	; 0x08
    19e0:	b9 85       	ldd	r27, Y+9	; 0x09
    19e2:	89 2b       	or	r24, r25
    19e4:	8a 2b       	or	r24, r26
    19e6:	8b 2b       	or	r24, r27
    19e8:	21 f4       	brne	.+8      	; 0x19f2 <xQueueSemaphoreTake+0x9e>
    19ea:	0f 90       	pop	r0
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	6e c0       	rjmp	.+220    	; 0x1ace <xQueueSemaphoreTake+0x17a>
    19f2:	d1 10       	cpse	r13, r1
    19f4:	05 c0       	rjmp	.+10     	; 0x1a00 <xQueueSemaphoreTake+0xac>
    19f6:	ce 01       	movw	r24, r28
    19f8:	01 96       	adiw	r24, 0x01	; 1
    19fa:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <vTaskInternalSetTimeOutState>
    19fe:	dc 2c       	mov	r13, r12
    1a00:	0f 90       	pop	r0
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	70 d5       	rcall	.+2784   	; 0x24e6 <vTaskSuspendAll>
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	0f 92       	push	r0
    1a0c:	f8 01       	movw	r30, r16
    1a0e:	81 a1       	ldd	r24, Z+33	; 0x21
    1a10:	8f 3f       	cpi	r24, 0xFF	; 255
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <xQueueSemaphoreTake+0xc2>
    1a14:	11 a2       	std	Z+33, r1	; 0x21
    1a16:	d8 01       	movw	r26, r16
    1a18:	92 96       	adiw	r26, 0x22	; 34
    1a1a:	8c 91       	ld	r24, X
    1a1c:	92 97       	sbiw	r26, 0x22	; 34
    1a1e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a20:	11 f4       	brne	.+4      	; 0x1a26 <xQueueSemaphoreTake+0xd2>
    1a22:	92 96       	adiw	r26, 0x22	; 34
    1a24:	1c 92       	st	X, r1
    1a26:	0f 90       	pop	r0
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	be 01       	movw	r22, r28
    1a2c:	6a 5f       	subi	r22, 0xFA	; 250
    1a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a30:	ce 01       	movw	r24, r28
    1a32:	01 96       	adiw	r24, 0x01	; 1
    1a34:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <xTaskCheckForTimeOut>
    1a38:	81 11       	cpse	r24, r1
    1a3a:	24 c0       	rjmp	.+72     	; 0x1a84 <xQueueSemaphoreTake+0x130>
    1a3c:	c8 01       	movw	r24, r16
    1a3e:	bb dc       	rcall	.-1674   	; 0x13b6 <prvIsQueueEmpty>
    1a40:	88 23       	and	r24, r24
    1a42:	e1 f0       	breq	.+56     	; 0x1a7c <xQueueSemaphoreTake+0x128>
    1a44:	f8 01       	movw	r30, r16
    1a46:	80 81       	ld	r24, Z
    1a48:	91 81       	ldd	r25, Z+1	; 0x01
    1a4a:	89 2b       	or	r24, r25
    1a4c:	51 f4       	brne	.+20     	; 0x1a62 <xQueueSemaphoreTake+0x10e>
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	0f 92       	push	r0
    1a54:	84 81       	ldd	r24, Z+4	; 0x04
    1a56:	95 81       	ldd	r25, Z+5	; 0x05
    1a58:	0e 94 32 16 	call	0x2c64	; 0x2c64 <xTaskPriorityInherit>
    1a5c:	b8 2e       	mov	r11, r24
    1a5e:	0f 90       	pop	r0
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	4e 81       	ldd	r20, Y+6	; 0x06
    1a64:	5f 81       	ldd	r21, Y+7	; 0x07
    1a66:	68 85       	ldd	r22, Y+8	; 0x08
    1a68:	79 85       	ldd	r23, Y+9	; 0x09
    1a6a:	c7 01       	movw	r24, r14
    1a6c:	97 d7       	rcall	.+3886   	; 0x299c <vTaskPlaceOnEventList>
    1a6e:	c8 01       	movw	r24, r16
    1a70:	26 dd       	rcall	.-1460   	; 0x14be <prvUnlockQueue>
    1a72:	22 d6       	rcall	.+3140   	; 0x26b8 <xTaskResumeAll>
    1a74:	81 11       	cpse	r24, r1
    1a76:	8c cf       	rjmp	.-232    	; 0x1990 <xQueueSemaphoreTake+0x3c>
    1a78:	d6 db       	rcall	.-2132   	; 0x1226 <vPortYield>
    1a7a:	8a cf       	rjmp	.-236    	; 0x1990 <xQueueSemaphoreTake+0x3c>
    1a7c:	c8 01       	movw	r24, r16
    1a7e:	1f dd       	rcall	.-1474   	; 0x14be <prvUnlockQueue>
    1a80:	1b d6       	rcall	.+3126   	; 0x26b8 <xTaskResumeAll>
    1a82:	86 cf       	rjmp	.-244    	; 0x1990 <xQueueSemaphoreTake+0x3c>
    1a84:	c8 01       	movw	r24, r16
    1a86:	1b dd       	rcall	.-1482   	; 0x14be <prvUnlockQueue>
    1a88:	17 d6       	rcall	.+3118   	; 0x26b8 <xTaskResumeAll>
    1a8a:	c8 01       	movw	r24, r16
    1a8c:	94 dc       	rcall	.-1752   	; 0x13b6 <prvIsQueueEmpty>
    1a8e:	88 23       	and	r24, r24
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <xQueueSemaphoreTake+0x140>
    1a92:	7e cf       	rjmp	.-260    	; 0x1990 <xQueueSemaphoreTake+0x3c>
    1a94:	bb 20       	and	r11, r11
    1a96:	d1 f0       	breq	.+52     	; 0x1acc <xQueueSemaphoreTake+0x178>
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	0f 92       	push	r0
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	83 89       	ldd	r24, Z+19	; 0x13
    1aa2:	88 23       	and	r24, r24
    1aa4:	39 f0       	breq	.+14     	; 0x1ab4 <xQueueSemaphoreTake+0x160>
    1aa6:	02 8c       	ldd	r0, Z+26	; 0x1a
    1aa8:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1aaa:	e0 2d       	mov	r30, r0
    1aac:	80 81       	ld	r24, Z
    1aae:	64 e0       	ldi	r22, 0x04	; 4
    1ab0:	68 1b       	sub	r22, r24
    1ab2:	01 c0       	rjmp	.+2      	; 0x1ab6 <xQueueSemaphoreTake+0x162>
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	d8 01       	movw	r26, r16
    1ab8:	14 96       	adiw	r26, 0x04	; 4
    1aba:	8d 91       	ld	r24, X+
    1abc:	9c 91       	ld	r25, X
    1abe:	15 97       	sbiw	r26, 0x05	; 5
    1ac0:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <vTaskPriorityDisinheritAfterTimeout>
    1ac4:	0f 90       	pop	r0
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	01 c0       	rjmp	.+2      	; 0x1ace <xQueueSemaphoreTake+0x17a>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	29 96       	adiw	r28, 0x09	; 9
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	ff 90       	pop	r15
    1ae4:	ef 90       	pop	r14
    1ae6:	df 90       	pop	r13
    1ae8:	cf 90       	pop	r12
    1aea:	bf 90       	pop	r11
    1aec:	08 95       	ret

00001aee <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	0f 92       	push	r0
    1afa:	89 a1       	ldd	r24, Y+33	; 0x21
    1afc:	8f 3f       	cpi	r24, 0xFF	; 255
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <vQueueWaitForMessageRestricted+0x14>
    1b00:	19 a2       	std	Y+33, r1	; 0x21
    1b02:	8a a1       	ldd	r24, Y+34	; 0x22
    1b04:	8f 3f       	cpi	r24, 0xFF	; 255
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <vQueueWaitForMessageRestricted+0x1c>
    1b08:	1a a2       	std	Y+34, r1	; 0x22
    1b0a:	0f 90       	pop	r0
    1b0c:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1b0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b10:	81 11       	cpse	r24, r1
    1b12:	03 c0       	rjmp	.+6      	; 0x1b1a <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1b14:	ce 01       	movw	r24, r28
    1b16:	43 96       	adiw	r24, 0x13	; 19
    1b18:	7c d7       	rcall	.+3832   	; 0x2a12 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	d0 dc       	rcall	.-1632   	; 0x14be <prvUnlockQueue>
    }
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	08 95       	ret

00001b24 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1b24:	fc 01       	movw	r30, r24
    1b26:	44 81       	ldd	r20, Z+4	; 0x04
    1b28:	55 81       	ldd	r21, Z+5	; 0x05
    1b2a:	22 81       	ldd	r18, Z+2	; 0x02
    1b2c:	33 81       	ldd	r19, Z+3	; 0x03
    1b2e:	24 0f       	add	r18, r20
    1b30:	35 1f       	adc	r19, r21
    1b32:	80 81       	ld	r24, Z
    1b34:	91 81       	ldd	r25, Z+1	; 0x01
    1b36:	b9 01       	movw	r22, r18
    1b38:	68 1b       	sub	r22, r24
    1b3a:	79 0b       	sbc	r23, r25
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	64 17       	cp	r22, r20
    1b40:	75 07       	cpc	r23, r21
    1b42:	10 f0       	brcs	.+4      	; 0x1b48 <prvBytesInBuffer+0x24>
    1b44:	84 1b       	sub	r24, r20
    1b46:	95 0b       	sbc	r25, r21
    1b48:	08 95       	ret

00001b4a <prvWriteBytesToBuffer>:
    1b4a:	af 92       	push	r10
    1b4c:	bf 92       	push	r11
    1b4e:	cf 92       	push	r12
    1b50:	df 92       	push	r13
    1b52:	ef 92       	push	r14
    1b54:	ff 92       	push	r15
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	6c 01       	movw	r12, r24
    1b60:	5b 01       	movw	r10, r22
    1b62:	7a 01       	movw	r14, r20
    1b64:	fc 01       	movw	r30, r24
    1b66:	c2 81       	ldd	r28, Z+2	; 0x02
    1b68:	d3 81       	ldd	r29, Z+3	; 0x03
    1b6a:	04 81       	ldd	r16, Z+4	; 0x04
    1b6c:	15 81       	ldd	r17, Z+5	; 0x05
    1b6e:	0c 1b       	sub	r16, r28
    1b70:	1d 0b       	sbc	r17, r29
    1b72:	40 17       	cp	r20, r16
    1b74:	51 07       	cpc	r21, r17
    1b76:	08 f4       	brcc	.+2      	; 0x1b7a <prvWriteBytesToBuffer+0x30>
    1b78:	8a 01       	movw	r16, r20
    1b7a:	f6 01       	movw	r30, r12
    1b7c:	84 85       	ldd	r24, Z+12	; 0x0c
    1b7e:	95 85       	ldd	r25, Z+13	; 0x0d
    1b80:	a8 01       	movw	r20, r16
    1b82:	b5 01       	movw	r22, r10
    1b84:	8c 0f       	add	r24, r28
    1b86:	9d 1f       	adc	r25, r29
    1b88:	0e 94 c5 2c 	call	0x598a	; 0x598a <memcpy>
    1b8c:	0e 15       	cp	r16, r14
    1b8e:	1f 05       	cpc	r17, r15
    1b90:	58 f4       	brcc	.+22     	; 0x1ba8 <prvWriteBytesToBuffer+0x5e>
    1b92:	a7 01       	movw	r20, r14
    1b94:	40 1b       	sub	r20, r16
    1b96:	51 0b       	sbc	r21, r17
    1b98:	b5 01       	movw	r22, r10
    1b9a:	60 0f       	add	r22, r16
    1b9c:	71 1f       	adc	r23, r17
    1b9e:	f6 01       	movw	r30, r12
    1ba0:	84 85       	ldd	r24, Z+12	; 0x0c
    1ba2:	95 85       	ldd	r25, Z+13	; 0x0d
    1ba4:	0e 94 c5 2c 	call	0x598a	; 0x598a <memcpy>
    1ba8:	ce 01       	movw	r24, r28
    1baa:	8e 0d       	add	r24, r14
    1bac:	9f 1d       	adc	r25, r15
    1bae:	f6 01       	movw	r30, r12
    1bb0:	24 81       	ldd	r18, Z+4	; 0x04
    1bb2:	35 81       	ldd	r19, Z+5	; 0x05
    1bb4:	82 17       	cp	r24, r18
    1bb6:	93 07       	cpc	r25, r19
    1bb8:	10 f0       	brcs	.+4      	; 0x1bbe <prvWriteBytesToBuffer+0x74>
    1bba:	82 1b       	sub	r24, r18
    1bbc:	93 0b       	sbc	r25, r19
    1bbe:	f6 01       	movw	r30, r12
    1bc0:	93 83       	std	Z+3, r25	; 0x03
    1bc2:	82 83       	std	Z+2, r24	; 0x02
    1bc4:	c7 01       	movw	r24, r14
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	df 90       	pop	r13
    1bd4:	cf 90       	pop	r12
    1bd6:	bf 90       	pop	r11
    1bd8:	af 90       	pop	r10
    1bda:	08 95       	ret

00001bdc <prvWriteMessageToBuffer>:
    1bdc:	cf 92       	push	r12
    1bde:	df 92       	push	r13
    1be0:	ef 92       	push	r14
    1be2:	ff 92       	push	r15
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	1f 92       	push	r1
    1bee:	1f 92       	push	r1
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	5a 83       	std	Y+2, r21	; 0x02
    1bf6:	49 83       	std	Y+1, r20	; 0x01
    1bf8:	21 15       	cp	r18, r1
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	c9 f0       	breq	.+50     	; 0x1c30 <prvWriteMessageToBuffer+0x54>
    1bfe:	6b 01       	movw	r12, r22
    1c00:	7c 01       	movw	r14, r24
    1c02:	fc 01       	movw	r30, r24
    1c04:	86 85       	ldd	r24, Z+14	; 0x0e
    1c06:	80 fd       	sbrc	r24, 0
    1c08:	08 c0       	rjmp	.+16     	; 0x1c1a <prvWriteMessageToBuffer+0x3e>
    1c0a:	ca 01       	movw	r24, r20
    1c0c:	24 17       	cp	r18, r20
    1c0e:	35 07       	cpc	r19, r21
    1c10:	08 f4       	brcc	.+2      	; 0x1c14 <prvWriteMessageToBuffer+0x38>
    1c12:	c9 01       	movw	r24, r18
    1c14:	9a 83       	std	Y+2, r25	; 0x02
    1c16:	89 83       	std	Y+1, r24	; 0x01
    1c18:	11 c0       	rjmp	.+34     	; 0x1c3c <prvWriteMessageToBuffer+0x60>
    1c1a:	20 17       	cp	r18, r16
    1c1c:	31 07       	cpc	r19, r17
    1c1e:	58 f0       	brcs	.+22     	; 0x1c36 <prvWriteMessageToBuffer+0x5a>
    1c20:	42 e0       	ldi	r20, 0x02	; 2
    1c22:	50 e0       	ldi	r21, 0x00	; 0
    1c24:	be 01       	movw	r22, r28
    1c26:	6f 5f       	subi	r22, 0xFF	; 255
    1c28:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2a:	c7 01       	movw	r24, r14
    1c2c:	8e df       	rcall	.-228    	; 0x1b4a <prvWriteBytesToBuffer>
    1c2e:	06 c0       	rjmp	.+12     	; 0x1c3c <prvWriteMessageToBuffer+0x60>
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	08 c0       	rjmp	.+16     	; 0x1c46 <prvWriteMessageToBuffer+0x6a>
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	05 c0       	rjmp	.+10     	; 0x1c46 <prvWriteMessageToBuffer+0x6a>
    1c3c:	49 81       	ldd	r20, Y+1	; 0x01
    1c3e:	5a 81       	ldd	r21, Y+2	; 0x02
    1c40:	b6 01       	movw	r22, r12
    1c42:	c7 01       	movw	r24, r14
    1c44:	82 df       	rcall	.-252    	; 0x1b4a <prvWriteBytesToBuffer>
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	df 91       	pop	r29
    1c4c:	cf 91       	pop	r28
    1c4e:	1f 91       	pop	r17
    1c50:	0f 91       	pop	r16
    1c52:	ff 90       	pop	r15
    1c54:	ef 90       	pop	r14
    1c56:	df 90       	pop	r13
    1c58:	cf 90       	pop	r12
    1c5a:	08 95       	ret

00001c5c <prvReadBytesFromBuffer>:
    1c5c:	af 92       	push	r10
    1c5e:	bf 92       	push	r11
    1c60:	cf 92       	push	r12
    1c62:	df 92       	push	r13
    1c64:	ef 92       	push	r14
    1c66:	ff 92       	push	r15
    1c68:	0f 93       	push	r16
    1c6a:	1f 93       	push	r17
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	7c 01       	movw	r14, r24
    1c72:	5b 01       	movw	r10, r22
    1c74:	e9 01       	movw	r28, r18
    1c76:	42 17       	cp	r20, r18
    1c78:	53 07       	cpc	r21, r19
    1c7a:	08 f4       	brcc	.+2      	; 0x1c7e <prvReadBytesFromBuffer+0x22>
    1c7c:	ea 01       	movw	r28, r20
    1c7e:	20 97       	sbiw	r28, 0x00	; 0
    1c80:	79 f1       	breq	.+94     	; 0x1ce0 <prvReadBytesFromBuffer+0x84>
    1c82:	f7 01       	movw	r30, r14
    1c84:	00 81       	ld	r16, Z
    1c86:	11 81       	ldd	r17, Z+1	; 0x01
    1c88:	c4 80       	ldd	r12, Z+4	; 0x04
    1c8a:	d5 80       	ldd	r13, Z+5	; 0x05
    1c8c:	c0 1a       	sub	r12, r16
    1c8e:	d1 0a       	sbc	r13, r17
    1c90:	cc 15       	cp	r28, r12
    1c92:	dd 05       	cpc	r29, r13
    1c94:	08 f4       	brcc	.+2      	; 0x1c98 <prvReadBytesFromBuffer+0x3c>
    1c96:	6e 01       	movw	r12, r28
    1c98:	f7 01       	movw	r30, r14
    1c9a:	64 85       	ldd	r22, Z+12	; 0x0c
    1c9c:	75 85       	ldd	r23, Z+13	; 0x0d
    1c9e:	60 0f       	add	r22, r16
    1ca0:	71 1f       	adc	r23, r17
    1ca2:	a6 01       	movw	r20, r12
    1ca4:	c5 01       	movw	r24, r10
    1ca6:	0e 94 c5 2c 	call	0x598a	; 0x598a <memcpy>
    1caa:	cc 16       	cp	r12, r28
    1cac:	dd 06       	cpc	r13, r29
    1cae:	58 f4       	brcc	.+22     	; 0x1cc6 <prvReadBytesFromBuffer+0x6a>
    1cb0:	ae 01       	movw	r20, r28
    1cb2:	4c 19       	sub	r20, r12
    1cb4:	5d 09       	sbc	r21, r13
    1cb6:	f7 01       	movw	r30, r14
    1cb8:	64 85       	ldd	r22, Z+12	; 0x0c
    1cba:	75 85       	ldd	r23, Z+13	; 0x0d
    1cbc:	c5 01       	movw	r24, r10
    1cbe:	8c 0d       	add	r24, r12
    1cc0:	9d 1d       	adc	r25, r13
    1cc2:	0e 94 c5 2c 	call	0x598a	; 0x598a <memcpy>
    1cc6:	0c 0f       	add	r16, r28
    1cc8:	1d 1f       	adc	r17, r29
    1cca:	f7 01       	movw	r30, r14
    1ccc:	84 81       	ldd	r24, Z+4	; 0x04
    1cce:	95 81       	ldd	r25, Z+5	; 0x05
    1cd0:	08 17       	cp	r16, r24
    1cd2:	19 07       	cpc	r17, r25
    1cd4:	10 f0       	brcs	.+4      	; 0x1cda <prvReadBytesFromBuffer+0x7e>
    1cd6:	08 1b       	sub	r16, r24
    1cd8:	19 0b       	sbc	r17, r25
    1cda:	f7 01       	movw	r30, r14
    1cdc:	11 83       	std	Z+1, r17	; 0x01
    1cde:	00 83       	st	Z, r16
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	ff 90       	pop	r15
    1cec:	ef 90       	pop	r14
    1cee:	df 90       	pop	r13
    1cf0:	cf 90       	pop	r12
    1cf2:	bf 90       	pop	r11
    1cf4:	af 90       	pop	r10
    1cf6:	08 95       	ret

00001cf8 <xStreamBufferGenericCreate>:
    1cf8:	ef 92       	push	r14
    1cfa:	ff 92       	push	r15
    1cfc:	1f 93       	push	r17
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	eb 01       	movw	r28, r22
    1d04:	11 e0       	ldi	r17, 0x01	; 1
    1d06:	41 30       	cpi	r20, 0x01	; 1
    1d08:	09 f0       	breq	.+2      	; 0x1d0c <xStreamBufferGenericCreate+0x14>
    1d0a:	10 e0       	ldi	r17, 0x00	; 0
    1d0c:	20 97       	sbiw	r28, 0x00	; 0
    1d0e:	11 f4       	brne	.+4      	; 0x1d14 <xStreamBufferGenericCreate+0x1c>
    1d10:	c1 e0       	ldi	r28, 0x01	; 1
    1d12:	d0 e0       	ldi	r29, 0x00	; 0
    1d14:	7c 01       	movw	r14, r24
    1d16:	2f ef       	ldi	r18, 0xFF	; 255
    1d18:	e2 1a       	sub	r14, r18
    1d1a:	f2 0a       	sbc	r15, r18
    1d1c:	41 96       	adiw	r24, 0x11	; 17
    1d1e:	51 d8       	rcall	.-3934   	; 0xdc2 <pvPortMalloc>
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	81 f0       	breq	.+32     	; 0x1d44 <xStreamBufferGenericCreate+0x4c>
    1d24:	20 e1       	ldi	r18, 0x10	; 16
    1d26:	fc 01       	movw	r30, r24
    1d28:	11 92       	st	Z+, r1
    1d2a:	2a 95       	dec	r18
    1d2c:	e9 f7       	brne	.-6      	; 0x1d28 <xStreamBufferGenericCreate+0x30>
    1d2e:	9c 01       	movw	r18, r24
    1d30:	20 5f       	subi	r18, 0xF0	; 240
    1d32:	3f 4f       	sbci	r19, 0xFF	; 255
    1d34:	fc 01       	movw	r30, r24
    1d36:	35 87       	std	Z+13, r19	; 0x0d
    1d38:	24 87       	std	Z+12, r18	; 0x0c
    1d3a:	f5 82       	std	Z+5, r15	; 0x05
    1d3c:	e4 82       	std	Z+4, r14	; 0x04
    1d3e:	d7 83       	std	Z+7, r29	; 0x07
    1d40:	c6 83       	std	Z+6, r28	; 0x06
    1d42:	16 87       	std	Z+14, r17	; 0x0e
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	1f 91       	pop	r17
    1d4a:	ff 90       	pop	r15
    1d4c:	ef 90       	pop	r14
    1d4e:	08 95       	ret

00001d50 <xStreamBufferReset>:
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	fc 01       	movw	r30, r24
    1d56:	27 85       	ldd	r18, Z+15	; 0x0f
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	0f 92       	push	r0
    1d5e:	80 85       	ldd	r24, Z+8	; 0x08
    1d60:	91 85       	ldd	r25, Z+9	; 0x09
    1d62:	89 2b       	or	r24, r25
    1d64:	d1 f4       	brne	.+52     	; 0x1d9a <xStreamBufferReset+0x4a>
    1d66:	82 85       	ldd	r24, Z+10	; 0x0a
    1d68:	93 85       	ldd	r25, Z+11	; 0x0b
    1d6a:	89 2b       	or	r24, r25
    1d6c:	c1 f4       	brne	.+48     	; 0x1d9e <xStreamBufferReset+0x4e>
    1d6e:	86 85       	ldd	r24, Z+14	; 0x0e
    1d70:	46 81       	ldd	r20, Z+6	; 0x06
    1d72:	57 81       	ldd	r21, Z+7	; 0x07
    1d74:	64 81       	ldd	r22, Z+4	; 0x04
    1d76:	75 81       	ldd	r23, Z+5	; 0x05
    1d78:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d7a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d7c:	90 e1       	ldi	r25, 0x10	; 16
    1d7e:	ef 01       	movw	r28, r30
    1d80:	19 92       	st	Y+, r1
    1d82:	9a 95       	dec	r25
    1d84:	e9 f7       	brne	.-6      	; 0x1d80 <xStreamBufferReset+0x30>
    1d86:	b5 87       	std	Z+13, r27	; 0x0d
    1d88:	a4 87       	std	Z+12, r26	; 0x0c
    1d8a:	75 83       	std	Z+5, r23	; 0x05
    1d8c:	64 83       	std	Z+4, r22	; 0x04
    1d8e:	57 83       	std	Z+7, r21	; 0x07
    1d90:	46 83       	std	Z+6, r20	; 0x06
    1d92:	86 87       	std	Z+14, r24	; 0x0e
    1d94:	27 87       	std	Z+15, r18	; 0x0f
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	03 c0       	rjmp	.+6      	; 0x1da0 <xStreamBufferReset+0x50>
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	01 c0       	rjmp	.+2      	; 0x1da0 <xStreamBufferReset+0x50>
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	0f 90       	pop	r0
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	08 95       	ret

00001daa <xStreamBufferSpacesAvailable>:
    1daa:	fc 01       	movw	r30, r24
    1dac:	24 81       	ldd	r18, Z+4	; 0x04
    1dae:	35 81       	ldd	r19, Z+5	; 0x05
    1db0:	80 81       	ld	r24, Z
    1db2:	91 81       	ldd	r25, Z+1	; 0x01
    1db4:	42 81       	ldd	r20, Z+2	; 0x02
    1db6:	53 81       	ldd	r21, Z+3	; 0x03
    1db8:	82 0f       	add	r24, r18
    1dba:	93 1f       	adc	r25, r19
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	84 1b       	sub	r24, r20
    1dc0:	95 0b       	sbc	r25, r21
    1dc2:	82 17       	cp	r24, r18
    1dc4:	93 07       	cpc	r25, r19
    1dc6:	10 f0       	brcs	.+4      	; 0x1dcc <xStreamBufferSpacesAvailable+0x22>
    1dc8:	82 1b       	sub	r24, r18
    1dca:	93 0b       	sbc	r25, r19
    1dcc:	08 95       	ret

00001dce <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1dce:	2f 92       	push	r2
    1dd0:	3f 92       	push	r3
    1dd2:	4f 92       	push	r4
    1dd4:	5f 92       	push	r5
    1dd6:	6f 92       	push	r6
    1dd8:	7f 92       	push	r7
    1dda:	8f 92       	push	r8
    1ddc:	9f 92       	push	r9
    1dde:	af 92       	push	r10
    1de0:	bf 92       	push	r11
    1de2:	cf 92       	push	r12
    1de4:	df 92       	push	r13
    1de6:	ef 92       	push	r14
    1de8:	ff 92       	push	r15
    1dea:	0f 93       	push	r16
    1dec:	1f 93       	push	r17
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	29 97       	sbiw	r28, 0x09	; 9
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	cd bf       	out	0x3d, r28	; 61
    1e02:	5c 01       	movw	r10, r24
    1e04:	1b 01       	movw	r2, r22
    1e06:	2a 01       	movw	r4, r20
    1e08:	0e 83       	std	Y+6, r16	; 0x06
    1e0a:	1f 83       	std	Y+7, r17	; 0x07
    1e0c:	28 87       	std	Y+8, r18	; 0x08
    1e0e:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1e10:	fc 01       	movw	r30, r24
    1e12:	86 85       	ldd	r24, Z+14	; 0x0e
    1e14:	80 ff       	sbrs	r24, 0
    1e16:	05 c0       	rjmp	.+10     	; 0x1e22 <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1e18:	3a 01       	movw	r6, r20
    1e1a:	f2 e0       	ldi	r31, 0x02	; 2
    1e1c:	6f 0e       	add	r6, r31
    1e1e:	71 1c       	adc	r7, r1
    1e20:	01 c0       	rjmp	.+2      	; 0x1e24 <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    1e22:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1e24:	8e 81       	ldd	r24, Y+6	; 0x06
    1e26:	9f 81       	ldd	r25, Y+7	; 0x07
    1e28:	a8 85       	ldd	r26, Y+8	; 0x08
    1e2a:	b9 85       	ldd	r27, Y+9	; 0x09
    1e2c:	89 2b       	or	r24, r25
    1e2e:	8a 2b       	or	r24, r26
    1e30:	8b 2b       	or	r24, r27
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <xStreamBufferSend+0x68>
    1e34:	35 c0       	rjmp	.+106    	; 0x1ea0 <xStreamBufferSend+0xd2>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1e36:	ce 01       	movw	r24, r28
    1e38:	01 96       	adiw	r24, 0x01	; 1
    1e3a:	81 d6       	rcall	.+3330   	; 0x2b3e <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1e42:	c5 01       	movw	r24, r10
    1e44:	b2 df       	rcall	.-156    	; 0x1daa <xStreamBufferSpacesAvailable>
    1e46:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    1e48:	86 15       	cp	r24, r6
    1e4a:	97 05       	cpc	r25, r7
    1e4c:	20 f5       	brcc	.+72     	; 0x1e96 <xStreamBufferSend+0xc8>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1e56:	f3 d6       	rcall	.+3558   	; 0x2c3e <xTaskGetCurrentTaskHandle>
    1e58:	f5 01       	movw	r30, r10
    1e5a:	93 87       	std	Z+11, r25	; 0x0b
    1e5c:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1e5e:	0f 90       	pop	r0
    1e60:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1e62:	ce 80       	ldd	r12, Y+6	; 0x06
    1e64:	df 80       	ldd	r13, Y+7	; 0x07
    1e66:	e8 84       	ldd	r14, Y+8	; 0x08
    1e68:	f9 84       	ldd	r15, Y+9	; 0x09
    1e6a:	00 e0       	ldi	r16, 0x00	; 0
    1e6c:	10 e0       	ldi	r17, 0x00	; 0
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	a9 01       	movw	r20, r18
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	70 e0       	ldi	r23, 0x00	; 0
    1e78:	cb 01       	movw	r24, r22
    1e7a:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1e7e:	f5 01       	movw	r30, r10
    1e80:	13 86       	std	Z+11, r1	; 0x0b
    1e82:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1e84:	be 01       	movw	r22, r28
    1e86:	6a 5f       	subi	r22, 0xFA	; 250
    1e88:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	01 96       	adiw	r24, 0x01	; 1
    1e8e:	7e d6       	rcall	.+3324   	; 0x2b8c <xTaskCheckForTimeOut>
    1e90:	88 23       	and	r24, r24
    1e92:	a1 f2       	breq	.-88     	; 0x1e3c <xStreamBufferSend+0x6e>
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <xStreamBufferSend+0xcc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1e96:	0f 90       	pop	r0
    1e98:	0f be       	out	0x3f, r0	; 63
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1e9a:	81 14       	cp	r8, r1
    1e9c:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1e9e:	19 f4       	brne	.+6      	; 0x1ea6 <xStreamBufferSend+0xd8>
    1ea0:	c5 01       	movw	r24, r10
    1ea2:	83 df       	rcall	.-250    	; 0x1daa <xStreamBufferSpacesAvailable>
    1ea4:	4c 01       	movw	r8, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1ea6:	83 01       	movw	r16, r6
    1ea8:	94 01       	movw	r18, r8
    1eaa:	a2 01       	movw	r20, r4
    1eac:	b1 01       	movw	r22, r2
    1eae:	c5 01       	movw	r24, r10
    1eb0:	95 de       	rcall	.-726    	; 0x1bdc <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    1eb2:	7c 01       	movw	r14, r24
    1eb4:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1eb6:	e1 f0       	breq	.+56     	; 0x1ef0 <xStreamBufferSend+0x122>
    1eb8:	c5 01       	movw	r24, r10
    1eba:	34 de       	rcall	.-920    	; 0x1b24 <prvBytesInBuffer>
    1ebc:	f5 01       	movw	r30, r10
    1ebe:	26 81       	ldd	r18, Z+6	; 0x06
    1ec0:	37 81       	ldd	r19, Z+7	; 0x07
    1ec2:	82 17       	cp	r24, r18
    1ec4:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1ec6:	a0 f0       	brcs	.+40     	; 0x1ef0 <xStreamBufferSend+0x122>
    1ec8:	0e d3       	rcall	.+1564   	; 0x24e6 <vTaskSuspendAll>
    1eca:	f5 01       	movw	r30, r10
    1ecc:	80 85       	ldd	r24, Z+8	; 0x08
    1ece:	91 85       	ldd	r25, Z+9	; 0x09
    1ed0:	89 2b       	or	r24, r25
    1ed2:	69 f0       	breq	.+26     	; 0x1eee <xStreamBufferSend+0x120>
    1ed4:	80 85       	ldd	r24, Z+8	; 0x08
    1ed6:	91 85       	ldd	r25, Z+9	; 0x09
    1ed8:	00 e0       	ldi	r16, 0x00	; 0
    1eda:	10 e0       	ldi	r17, 0x00	; 0
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	40 e0       	ldi	r20, 0x00	; 0
    1ee0:	50 e0       	ldi	r21, 0x00	; 0
    1ee2:	ba 01       	movw	r22, r20
    1ee4:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <xTaskGenericNotify>
    1ee8:	f5 01       	movw	r30, r10
    1eea:	11 86       	std	Z+9, r1	; 0x09
    1eec:	10 86       	std	Z+8, r1	; 0x08
    1eee:	e4 d3       	rcall	.+1992   	; 0x26b8 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1ef0:	c7 01       	movw	r24, r14
    1ef2:	29 96       	adiw	r28, 0x09	; 9
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	df 90       	pop	r13
    1f0c:	cf 90       	pop	r12
    1f0e:	bf 90       	pop	r11
    1f10:	af 90       	pop	r10
    1f12:	9f 90       	pop	r9
    1f14:	8f 90       	pop	r8
    1f16:	7f 90       	pop	r7
    1f18:	6f 90       	pop	r6
    1f1a:	5f 90       	pop	r5
    1f1c:	4f 90       	pop	r4
    1f1e:	3f 90       	pop	r3
    1f20:	2f 90       	pop	r2
    1f22:	08 95       	ret

00001f24 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1f24:	af 92       	push	r10
    1f26:	bf 92       	push	r11
    1f28:	cf 92       	push	r12
    1f2a:	df 92       	push	r13
    1f2c:	ef 92       	push	r14
    1f2e:	ff 92       	push	r15
    1f30:	0f 93       	push	r16
    1f32:	1f 93       	push	r17
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	ec 01       	movw	r28, r24
    1f3a:	5b 01       	movw	r10, r22
    1f3c:	6a 01       	movw	r12, r20
    1f3e:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1f40:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f42:	80 ff       	sbrs	r24, 0
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1f46:	8a 01       	movw	r16, r20
    1f48:	0e 5f       	subi	r16, 0xFE	; 254
    1f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4c:	01 c0       	rjmp	.+2      	; 0x1f50 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    1f4e:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1f50:	ce 01       	movw	r24, r28
    1f52:	2b df       	rcall	.-426    	; 0x1daa <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1f54:	9c 01       	movw	r18, r24
    1f56:	a6 01       	movw	r20, r12
    1f58:	b5 01       	movw	r22, r10
    1f5a:	ce 01       	movw	r24, r28
    1f5c:	3f de       	rcall	.-898    	; 0x1bdc <prvWriteMessageToBuffer>
    1f5e:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1f60:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1f62:	b9 f0       	breq	.+46     	; 0x1f92 <xStreamBufferSendFromISR+0x6e>
    1f64:	ce 01       	movw	r24, r28
    1f66:	de dd       	rcall	.-1092   	; 0x1b24 <prvBytesInBuffer>
    1f68:	2e 81       	ldd	r18, Y+6	; 0x06
    1f6a:	3f 81       	ldd	r19, Y+7	; 0x07
    1f6c:	82 17       	cp	r24, r18
    1f6e:	93 07       	cpc	r25, r19
    1f70:	80 f0       	brcs	.+32     	; 0x1f92 <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1f72:	88 85       	ldd	r24, Y+8	; 0x08
    1f74:	99 85       	ldd	r25, Y+9	; 0x09
    1f76:	89 2b       	or	r24, r25
    1f78:	61 f0       	breq	.+24     	; 0x1f92 <xStreamBufferSendFromISR+0x6e>
    1f7a:	88 85       	ldd	r24, Y+8	; 0x08
    1f7c:	99 85       	ldd	r25, Y+9	; 0x09
    1f7e:	00 e0       	ldi	r16, 0x00	; 0
    1f80:	10 e0       	ldi	r17, 0x00	; 0
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	50 e0       	ldi	r21, 0x00	; 0
    1f88:	ba 01       	movw	r22, r20
    1f8a:	0e 94 68 18 	call	0x30d0	; 0x30d0 <xTaskGenericNotifyFromISR>
    1f8e:	19 86       	std	Y+9, r1	; 0x09
    1f90:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1f92:	c6 01       	movw	r24, r12
    1f94:	df 91       	pop	r29
    1f96:	cf 91       	pop	r28
    1f98:	1f 91       	pop	r17
    1f9a:	0f 91       	pop	r16
    1f9c:	ff 90       	pop	r15
    1f9e:	ef 90       	pop	r14
    1fa0:	df 90       	pop	r13
    1fa2:	cf 90       	pop	r12
    1fa4:	bf 90       	pop	r11
    1fa6:	af 90       	pop	r10
    1fa8:	08 95       	ret

00001faa <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1faa:	4f 92       	push	r4
    1fac:	5f 92       	push	r5
    1fae:	6f 92       	push	r6
    1fb0:	7f 92       	push	r7
    1fb2:	8f 92       	push	r8
    1fb4:	9f 92       	push	r9
    1fb6:	af 92       	push	r10
    1fb8:	bf 92       	push	r11
    1fba:	cf 92       	push	r12
    1fbc:	df 92       	push	r13
    1fbe:	ef 92       	push	r14
    1fc0:	ff 92       	push	r15
    1fc2:	0f 93       	push	r16
    1fc4:	1f 93       	push	r17
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	1f 92       	push	r1
    1fcc:	1f 92       	push	r1
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	5c 01       	movw	r10, r24
    1fd4:	2b 01       	movw	r4, r22
    1fd6:	3a 01       	movw	r6, r20
    1fd8:	68 01       	movw	r12, r16
    1fda:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1fdc:	fc 01       	movw	r30, r24
    1fde:	86 85       	ldd	r24, Z+14	; 0x0e
    1fe0:	80 fd       	sbrc	r24, 0
    1fe2:	03 c0       	rjmp	.+6      	; 0x1fea <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1fe4:	81 2c       	mov	r8, r1
    1fe6:	91 2c       	mov	r9, r1
    1fe8:	04 c0       	rjmp	.+8      	; 0x1ff2 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1fea:	68 94       	set
    1fec:	88 24       	eor	r8, r8
    1fee:	81 f8       	bld	r8, 1
    1ff0:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1ff2:	c1 14       	cp	r12, r1
    1ff4:	d1 04       	cpc	r13, r1
    1ff6:	e1 04       	cpc	r14, r1
    1ff8:	f1 04       	cpc	r15, r1
    1ffa:	31 f1       	breq	.+76     	; 0x2048 <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2002:	c5 01       	movw	r24, r10
    2004:	8f dd       	rcall	.-1250   	; 0x1b24 <prvBytesInBuffer>
    2006:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2008:	88 16       	cp	r8, r24
    200a:	99 06       	cpc	r9, r25
    200c:	40 f0       	brcs	.+16     	; 0x201e <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    2016:	13 d6       	rcall	.+3110   	; 0x2c3e <xTaskGetCurrentTaskHandle>
    2018:	f5 01       	movw	r30, r10
    201a:	91 87       	std	Z+9, r25	; 0x09
    201c:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    201e:	0f 90       	pop	r0
    2020:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2022:	80 16       	cp	r8, r16
    2024:	91 06       	cpc	r9, r17
    2026:	b0 f0       	brcs	.+44     	; 0x2054 <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2028:	00 e0       	ldi	r16, 0x00	; 0
    202a:	10 e0       	ldi	r17, 0x00	; 0
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	a9 01       	movw	r20, r18
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	70 e0       	ldi	r23, 0x00	; 0
    2036:	cb 01       	movw	r24, r22
    2038:	49 d7       	rcall	.+3730   	; 0x2ecc <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    203a:	f5 01       	movw	r30, r10
    203c:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    203e:	10 86       	std	Z+8, r1	; 0x08
    2040:	c5 01       	movw	r24, r10
    2042:	70 dd       	rcall	.-1312   	; 0x1b24 <prvBytesInBuffer>
    2044:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2046:	03 c0       	rjmp	.+6      	; 0x204e <xStreamBufferReceive+0xa4>
    2048:	c5 01       	movw	r24, r10
    204a:	6c dd       	rcall	.-1320   	; 0x1b24 <prvBytesInBuffer>
    204c:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    204e:	80 16       	cp	r8, r16
    2050:	91 06       	cpc	r9, r17
    2052:	b8 f5       	brcc	.+110    	; 0x20c2 <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    2054:	81 14       	cp	r8, r1
    2056:	91 04       	cpc	r9, r1
    2058:	c1 f0       	breq	.+48     	; 0x208a <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    205a:	f5 01       	movw	r30, r10
    205c:	e0 80       	ld	r14, Z
    205e:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    2060:	98 01       	movw	r18, r16
    2062:	a4 01       	movw	r20, r8
    2064:	be 01       	movw	r22, r28
    2066:	6f 5f       	subi	r22, 0xFF	; 255
    2068:	7f 4f       	sbci	r23, 0xFF	; 255
    206a:	c5 01       	movw	r24, r10
    206c:	f7 dd       	rcall	.-1042   	; 0x1c5c <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    2072:	08 19       	sub	r16, r8
    2074:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    2076:	68 16       	cp	r6, r24
    2078:	79 06       	cpc	r7, r25
    207a:	30 f4       	brcc	.+12     	; 0x2088 <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    207c:	f5 01       	movw	r30, r10
    207e:	f1 82       	std	Z+1, r15	; 0x01
    2080:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    2082:	61 2c       	mov	r6, r1
    2084:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2086:	01 c0       	rjmp	.+2      	; 0x208a <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    2088:	3c 01       	movw	r6, r24
    208a:	98 01       	movw	r18, r16
    208c:	a3 01       	movw	r20, r6
    208e:	b2 01       	movw	r22, r4
    2090:	c5 01       	movw	r24, r10
    2092:	e4 dd       	rcall	.-1080   	; 0x1c5c <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2094:	7c 01       	movw	r14, r24
    2096:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    2098:	b1 f0       	breq	.+44     	; 0x20c6 <xStreamBufferReceive+0x11c>
    209a:	25 d2       	rcall	.+1098   	; 0x24e6 <vTaskSuspendAll>
    209c:	f5 01       	movw	r30, r10
    209e:	82 85       	ldd	r24, Z+10	; 0x0a
    20a0:	93 85       	ldd	r25, Z+11	; 0x0b
    20a2:	89 2b       	or	r24, r25
    20a4:	61 f0       	breq	.+24     	; 0x20be <xStreamBufferReceive+0x114>
    20a6:	82 85       	ldd	r24, Z+10	; 0x0a
    20a8:	93 85       	ldd	r25, Z+11	; 0x0b
    20aa:	00 e0       	ldi	r16, 0x00	; 0
    20ac:	10 e0       	ldi	r17, 0x00	; 0
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	40 e0       	ldi	r20, 0x00	; 0
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	ba 01       	movw	r22, r20
    20b6:	94 d7       	rcall	.+3880   	; 0x2fe0 <xTaskGenericNotify>
    20b8:	f5 01       	movw	r30, r10
    20ba:	13 86       	std	Z+11, r1	; 0x0b
    20bc:	12 86       	std	Z+10, r1	; 0x0a
    20be:	fc d2       	rcall	.+1528   	; 0x26b8 <xTaskResumeAll>
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    20c2:	e1 2c       	mov	r14, r1
    20c4:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    20c6:	c7 01       	movw	r24, r14
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	df 91       	pop	r29
    20ce:	cf 91       	pop	r28
    20d0:	1f 91       	pop	r17
    20d2:	0f 91       	pop	r16
    20d4:	ff 90       	pop	r15
    20d6:	ef 90       	pop	r14
    20d8:	df 90       	pop	r13
    20da:	cf 90       	pop	r12
    20dc:	bf 90       	pop	r11
    20de:	af 90       	pop	r10
    20e0:	9f 90       	pop	r9
    20e2:	8f 90       	pop	r8
    20e4:	7f 90       	pop	r7
    20e6:	6f 90       	pop	r6
    20e8:	5f 90       	pop	r5
    20ea:	4f 90       	pop	r4
    20ec:	08 95       	ret

000020ee <prvResetNextTaskUnblockTime>:
    20ee:	e0 91 b5 18 	lds	r30, 0x18B5	; 0x8018b5 <pxDelayedTaskList>
    20f2:	f0 91 b6 18 	lds	r31, 0x18B6	; 0x8018b6 <pxDelayedTaskList+0x1>
    20f6:	80 81       	ld	r24, Z
    20f8:	81 11       	cpse	r24, r1
    20fa:	0c c0       	rjmp	.+24     	; 0x2114 <prvResetNextTaskUnblockTime+0x26>
    20fc:	8f ef       	ldi	r24, 0xFF	; 255
    20fe:	9f ef       	ldi	r25, 0xFF	; 255
    2100:	dc 01       	movw	r26, r24
    2102:	80 93 82 18 	sts	0x1882, r24	; 0x801882 <xNextTaskUnblockTime>
    2106:	90 93 83 18 	sts	0x1883, r25	; 0x801883 <xNextTaskUnblockTime+0x1>
    210a:	a0 93 84 18 	sts	0x1884, r26	; 0x801884 <xNextTaskUnblockTime+0x2>
    210e:	b0 93 85 18 	sts	0x1885, r27	; 0x801885 <xNextTaskUnblockTime+0x3>
    2112:	08 95       	ret
    2114:	e0 91 b5 18 	lds	r30, 0x18B5	; 0x8018b5 <pxDelayedTaskList>
    2118:	f0 91 b6 18 	lds	r31, 0x18B6	; 0x8018b6 <pxDelayedTaskList+0x1>
    211c:	07 80       	ldd	r0, Z+7	; 0x07
    211e:	f0 85       	ldd	r31, Z+8	; 0x08
    2120:	e0 2d       	mov	r30, r0
    2122:	00 84       	ldd	r0, Z+8	; 0x08
    2124:	f1 85       	ldd	r31, Z+9	; 0x09
    2126:	e0 2d       	mov	r30, r0
    2128:	82 81       	ldd	r24, Z+2	; 0x02
    212a:	93 81       	ldd	r25, Z+3	; 0x03
    212c:	a4 81       	ldd	r26, Z+4	; 0x04
    212e:	b5 81       	ldd	r27, Z+5	; 0x05
    2130:	80 93 82 18 	sts	0x1882, r24	; 0x801882 <xNextTaskUnblockTime>
    2134:	90 93 83 18 	sts	0x1883, r25	; 0x801883 <xNextTaskUnblockTime+0x1>
    2138:	a0 93 84 18 	sts	0x1884, r26	; 0x801884 <xNextTaskUnblockTime+0x2>
    213c:	b0 93 85 18 	sts	0x1885, r27	; 0x801885 <xNextTaskUnblockTime+0x3>
    2140:	08 95       	ret

00002142 <prvAddCurrentTaskToDelayedList>:
    2142:	8f 92       	push	r8
    2144:	9f 92       	push	r9
    2146:	af 92       	push	r10
    2148:	bf 92       	push	r11
    214a:	cf 92       	push	r12
    214c:	df 92       	push	r13
    214e:	ef 92       	push	r14
    2150:	ff 92       	push	r15
    2152:	cf 93       	push	r28
    2154:	6b 01       	movw	r12, r22
    2156:	7c 01       	movw	r14, r24
    2158:	c4 2f       	mov	r28, r20
    215a:	80 90 8c 18 	lds	r8, 0x188C	; 0x80188c <xTickCount>
    215e:	90 90 8d 18 	lds	r9, 0x188D	; 0x80188d <xTickCount+0x1>
    2162:	a0 90 8e 18 	lds	r10, 0x188E	; 0x80188e <xTickCount+0x2>
    2166:	b0 90 8f 18 	lds	r11, 0x188F	; 0x80188f <xTickCount+0x3>
    216a:	80 91 f9 18 	lds	r24, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    216e:	90 91 fa 18 	lds	r25, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2172:	02 96       	adiw	r24, 0x02	; 2
    2174:	0e 94 3e 08 	call	0x107c	; 0x107c <uxListRemove>
    2178:	8f ef       	ldi	r24, 0xFF	; 255
    217a:	c8 16       	cp	r12, r24
    217c:	d8 06       	cpc	r13, r24
    217e:	e8 06       	cpc	r14, r24
    2180:	f8 06       	cpc	r15, r24
    2182:	69 f4       	brne	.+26     	; 0x219e <prvAddCurrentTaskToDelayedList+0x5c>
    2184:	cc 23       	and	r28, r28
    2186:	59 f0       	breq	.+22     	; 0x219e <prvAddCurrentTaskToDelayedList+0x5c>
    2188:	60 91 f9 18 	lds	r22, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    218c:	70 91 fa 18 	lds	r23, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2190:	6e 5f       	subi	r22, 0xFE	; 254
    2192:	7f 4f       	sbci	r23, 0xFF	; 255
    2194:	81 e9       	ldi	r24, 0x91	; 145
    2196:	98 e1       	ldi	r25, 0x18	; 24
    2198:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vListInsertEnd>
    219c:	3f c0       	rjmp	.+126    	; 0x221c <__stack+0x1d>
    219e:	c8 0c       	add	r12, r8
    21a0:	d9 1c       	adc	r13, r9
    21a2:	ea 1c       	adc	r14, r10
    21a4:	fb 1c       	adc	r15, r11
    21a6:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    21aa:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    21ae:	c2 82       	std	Z+2, r12	; 0x02
    21b0:	d3 82       	std	Z+3, r13	; 0x03
    21b2:	e4 82       	std	Z+4, r14	; 0x04
    21b4:	f5 82       	std	Z+5, r15	; 0x05
    21b6:	c8 14       	cp	r12, r8
    21b8:	d9 04       	cpc	r13, r9
    21ba:	ea 04       	cpc	r14, r10
    21bc:	fb 04       	cpc	r15, r11
    21be:	68 f4       	brcc	.+26     	; 0x21da <prvAddCurrentTaskToDelayedList+0x98>
    21c0:	60 91 f9 18 	lds	r22, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    21c4:	70 91 fa 18 	lds	r23, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    21c8:	80 91 b3 18 	lds	r24, 0x18B3	; 0x8018b3 <pxOverflowDelayedTaskList>
    21cc:	90 91 b4 18 	lds	r25, 0x18B4	; 0x8018b4 <pxOverflowDelayedTaskList+0x1>
    21d0:	6e 5f       	subi	r22, 0xFE	; 254
    21d2:	7f 4f       	sbci	r23, 0xFF	; 255
    21d4:	0e 94 01 08 	call	0x1002	; 0x1002 <vListInsert>
    21d8:	21 c0       	rjmp	.+66     	; 0x221c <__stack+0x1d>
    21da:	60 91 f9 18 	lds	r22, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    21de:	70 91 fa 18 	lds	r23, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    21e2:	80 91 b5 18 	lds	r24, 0x18B5	; 0x8018b5 <pxDelayedTaskList>
    21e6:	90 91 b6 18 	lds	r25, 0x18B6	; 0x8018b6 <pxDelayedTaskList+0x1>
    21ea:	6e 5f       	subi	r22, 0xFE	; 254
    21ec:	7f 4f       	sbci	r23, 0xFF	; 255
    21ee:	0e 94 01 08 	call	0x1002	; 0x1002 <vListInsert>
    21f2:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <xNextTaskUnblockTime>
    21f6:	90 91 83 18 	lds	r25, 0x1883	; 0x801883 <xNextTaskUnblockTime+0x1>
    21fa:	a0 91 84 18 	lds	r26, 0x1884	; 0x801884 <xNextTaskUnblockTime+0x2>
    21fe:	b0 91 85 18 	lds	r27, 0x1885	; 0x801885 <xNextTaskUnblockTime+0x3>
    2202:	c8 16       	cp	r12, r24
    2204:	d9 06       	cpc	r13, r25
    2206:	ea 06       	cpc	r14, r26
    2208:	fb 06       	cpc	r15, r27
    220a:	40 f4       	brcc	.+16     	; 0x221c <__stack+0x1d>
    220c:	c0 92 82 18 	sts	0x1882, r12	; 0x801882 <xNextTaskUnblockTime>
    2210:	d0 92 83 18 	sts	0x1883, r13	; 0x801883 <xNextTaskUnblockTime+0x1>
    2214:	e0 92 84 18 	sts	0x1884, r14	; 0x801884 <xNextTaskUnblockTime+0x2>
    2218:	f0 92 85 18 	sts	0x1885, r15	; 0x801885 <xNextTaskUnblockTime+0x3>
    221c:	cf 91       	pop	r28
    221e:	ff 90       	pop	r15
    2220:	ef 90       	pop	r14
    2222:	df 90       	pop	r13
    2224:	cf 90       	pop	r12
    2226:	bf 90       	pop	r11
    2228:	af 90       	pop	r10
    222a:	9f 90       	pop	r9
    222c:	8f 90       	pop	r8
    222e:	08 95       	ret

00002230 <xTaskCreate>:
    2230:	4f 92       	push	r4
    2232:	5f 92       	push	r5
    2234:	6f 92       	push	r6
    2236:	7f 92       	push	r7
    2238:	8f 92       	push	r8
    223a:	9f 92       	push	r9
    223c:	af 92       	push	r10
    223e:	bf 92       	push	r11
    2240:	cf 92       	push	r12
    2242:	df 92       	push	r13
    2244:	ef 92       	push	r14
    2246:	ff 92       	push	r15
    2248:	0f 93       	push	r16
    224a:	cf 93       	push	r28
    224c:	df 93       	push	r29
    224e:	4c 01       	movw	r8, r24
    2250:	6b 01       	movw	r12, r22
    2252:	5a 01       	movw	r10, r20
    2254:	29 01       	movw	r4, r18
    2256:	ca 01       	movw	r24, r20
    2258:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <pvPortMalloc>
    225c:	3c 01       	movw	r6, r24
    225e:	89 2b       	or	r24, r25
    2260:	09 f4       	brne	.+2      	; 0x2264 <xTaskCreate+0x34>
    2262:	f4 c0       	rjmp	.+488    	; 0x244c <xTaskCreate+0x21c>
    2264:	80 e3       	ldi	r24, 0x30	; 48
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <pvPortMalloc>
    226c:	ec 01       	movw	r28, r24
    226e:	89 2b       	or	r24, r25
    2270:	99 f0       	breq	.+38     	; 0x2298 <xTaskCreate+0x68>
    2272:	7c 8e       	std	Y+28, r7	; 0x1c
    2274:	6b 8e       	std	Y+27, r6	; 0x1b
    2276:	a5 01       	movw	r20, r10
    2278:	65 ea       	ldi	r22, 0xA5	; 165
    227a:	70 e0       	ldi	r23, 0x00	; 0
    227c:	c3 01       	movw	r24, r6
    227e:	0e 94 ce 2c 	call	0x599c	; 0x599c <memset>
    2282:	21 e0       	ldi	r18, 0x01	; 1
    2284:	a2 1a       	sub	r10, r18
    2286:	b1 08       	sbc	r11, r1
    2288:	8b 8d       	ldd	r24, Y+27	; 0x1b
    228a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    228c:	a8 0e       	add	r10, r24
    228e:	b9 1e       	adc	r11, r25
    2290:	c1 14       	cp	r12, r1
    2292:	d1 04       	cpc	r13, r1
    2294:	29 f4       	brne	.+10     	; 0x22a0 <xTaskCreate+0x70>
    2296:	20 c0       	rjmp	.+64     	; 0x22d8 <xTaskCreate+0xa8>
    2298:	c3 01       	movw	r24, r6
    229a:	0e 94 9a 07 	call	0xf34	; 0xf34 <vPortFree>
    229e:	d6 c0       	rjmp	.+428    	; 0x244c <xTaskCreate+0x21c>
    22a0:	d6 01       	movw	r26, r12
    22a2:	8c 91       	ld	r24, X
    22a4:	8d 8f       	std	Y+29, r24	; 0x1d
    22a6:	8c 91       	ld	r24, X
    22a8:	88 23       	and	r24, r24
    22aa:	a1 f0       	breq	.+40     	; 0x22d4 <xTaskCreate+0xa4>
    22ac:	ae 01       	movw	r20, r28
    22ae:	42 5e       	subi	r20, 0xE2	; 226
    22b0:	5f 4f       	sbci	r21, 0xFF	; 255
    22b2:	f6 01       	movw	r30, r12
    22b4:	31 96       	adiw	r30, 0x01	; 1
    22b6:	b8 e0       	ldi	r27, 0x08	; 8
    22b8:	cb 0e       	add	r12, r27
    22ba:	d1 1c       	adc	r13, r1
    22bc:	cf 01       	movw	r24, r30
    22be:	21 91       	ld	r18, Z+
    22c0:	da 01       	movw	r26, r20
    22c2:	2d 93       	st	X+, r18
    22c4:	ad 01       	movw	r20, r26
    22c6:	dc 01       	movw	r26, r24
    22c8:	8c 91       	ld	r24, X
    22ca:	88 23       	and	r24, r24
    22cc:	19 f0       	breq	.+6      	; 0x22d4 <xTaskCreate+0xa4>
    22ce:	ec 15       	cp	r30, r12
    22d0:	fd 05       	cpc	r31, r13
    22d2:	a1 f7       	brne	.-24     	; 0x22bc <xTaskCreate+0x8c>
    22d4:	1c a2       	std	Y+36, r1	; 0x24
    22d6:	01 c0       	rjmp	.+2      	; 0x22da <xTaskCreate+0xaa>
    22d8:	1d 8e       	std	Y+29, r1	; 0x1d
    22da:	04 30       	cpi	r16, 0x04	; 4
    22dc:	08 f0       	brcs	.+2      	; 0x22e0 <xTaskCreate+0xb0>
    22de:	03 e0       	ldi	r16, 0x03	; 3
    22e0:	0a 8f       	std	Y+26, r16	; 0x1a
    22e2:	0f a3       	std	Y+39, r16	; 0x27
    22e4:	18 a6       	std	Y+40, r1	; 0x28
    22e6:	6e 01       	movw	r12, r28
    22e8:	b2 e0       	ldi	r27, 0x02	; 2
    22ea:	cb 0e       	add	r12, r27
    22ec:	d1 1c       	adc	r13, r1
    22ee:	c6 01       	movw	r24, r12
    22f0:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <vListInitialiseItem>
    22f4:	ce 01       	movw	r24, r28
    22f6:	0e 96       	adiw	r24, 0x0e	; 14
    22f8:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <vListInitialiseItem>
    22fc:	db 87       	std	Y+11, r29	; 0x0b
    22fe:	ca 87       	std	Y+10, r28	; 0x0a
    2300:	84 e0       	ldi	r24, 0x04	; 4
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	a0 e0       	ldi	r26, 0x00	; 0
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	80 1b       	sub	r24, r16
    230a:	91 09       	sbc	r25, r1
    230c:	a1 09       	sbc	r26, r1
    230e:	b1 09       	sbc	r27, r1
    2310:	8e 87       	std	Y+14, r24	; 0x0e
    2312:	9f 87       	std	Y+15, r25	; 0x0f
    2314:	a8 8b       	std	Y+16, r26	; 0x10
    2316:	b9 8b       	std	Y+17, r27	; 0x11
    2318:	df 8b       	std	Y+23, r29	; 0x17
    231a:	ce 8b       	std	Y+22, r28	; 0x16
    231c:	1a a6       	std	Y+42, r1	; 0x2a
    231e:	19 a6       	std	Y+41, r1	; 0x29
    2320:	1b a6       	std	Y+43, r1	; 0x2b
    2322:	1c a6       	std	Y+44, r1	; 0x2c
    2324:	1d a6       	std	Y+45, r1	; 0x2d
    2326:	1e a6       	std	Y+46, r1	; 0x2e
    2328:	1f a6       	std	Y+47, r1	; 0x2f
    232a:	a2 01       	movw	r20, r4
    232c:	b4 01       	movw	r22, r8
    232e:	c5 01       	movw	r24, r10
    2330:	0e 94 65 08 	call	0x10ca	; 0x10ca <pxPortInitialiseStack>
    2334:	99 83       	std	Y+1, r25	; 0x01
    2336:	88 83       	st	Y, r24
    2338:	e1 14       	cp	r14, r1
    233a:	f1 04       	cpc	r15, r1
    233c:	19 f0       	breq	.+6      	; 0x2344 <xTaskCreate+0x114>
    233e:	f7 01       	movw	r30, r14
    2340:	d1 83       	std	Z+1, r29	; 0x01
    2342:	c0 83       	st	Z, r28
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	0f 92       	push	r0
    234a:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <uxCurrentNumberOfTasks>
    234e:	8f 5f       	subi	r24, 0xFF	; 255
    2350:	80 93 90 18 	sts	0x1890, r24	; 0x801890 <uxCurrentNumberOfTasks>
    2354:	80 91 f9 18 	lds	r24, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2358:	90 91 fa 18 	lds	r25, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    235c:	89 2b       	or	r24, r25
    235e:	d1 f5       	brne	.+116    	; 0x23d4 <xTaskCreate+0x1a4>
    2360:	d0 93 fa 18 	sts	0x18FA, r29	; 0x8018fa <pxCurrentTCB+0x1>
    2364:	c0 93 f9 18 	sts	0x18F9, r28	; 0x8018f9 <pxCurrentTCB>
    2368:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <uxCurrentNumberOfTasks>
    236c:	81 30       	cpi	r24, 0x01	; 1
    236e:	09 f0       	breq	.+2      	; 0x2372 <xTaskCreate+0x142>
    2370:	41 c0       	rjmp	.+130    	; 0x23f4 <xTaskCreate+0x1c4>
    2372:	8d ec       	ldi	r24, 0xCD	; 205
    2374:	98 e1       	ldi	r25, 0x18	; 24
    2376:	0e 94 cb 07 	call	0xf96	; 0xf96 <vListInitialise>
    237a:	88 ed       	ldi	r24, 0xD8	; 216
    237c:	98 e1       	ldi	r25, 0x18	; 24
    237e:	0e 94 cb 07 	call	0xf96	; 0xf96 <vListInitialise>
    2382:	83 ee       	ldi	r24, 0xE3	; 227
    2384:	98 e1       	ldi	r25, 0x18	; 24
    2386:	0e 94 cb 07 	call	0xf96	; 0xf96 <vListInitialise>
    238a:	8e ee       	ldi	r24, 0xEE	; 238
    238c:	98 e1       	ldi	r25, 0x18	; 24
    238e:	0e 94 cb 07 	call	0xf96	; 0xf96 <vListInitialise>
    2392:	82 ec       	ldi	r24, 0xC2	; 194
    2394:	98 e1       	ldi	r25, 0x18	; 24
    2396:	0e 94 cb 07 	call	0xf96	; 0xf96 <vListInitialise>
    239a:	87 eb       	ldi	r24, 0xB7	; 183
    239c:	98 e1       	ldi	r25, 0x18	; 24
    239e:	0e 94 cb 07 	call	0xf96	; 0xf96 <vListInitialise>
    23a2:	88 ea       	ldi	r24, 0xA8	; 168
    23a4:	98 e1       	ldi	r25, 0x18	; 24
    23a6:	0e 94 cb 07 	call	0xf96	; 0xf96 <vListInitialise>
    23aa:	8d e9       	ldi	r24, 0x9D	; 157
    23ac:	98 e1       	ldi	r25, 0x18	; 24
    23ae:	0e 94 cb 07 	call	0xf96	; 0xf96 <vListInitialise>
    23b2:	81 e9       	ldi	r24, 0x91	; 145
    23b4:	98 e1       	ldi	r25, 0x18	; 24
    23b6:	0e 94 cb 07 	call	0xf96	; 0xf96 <vListInitialise>
    23ba:	82 ec       	ldi	r24, 0xC2	; 194
    23bc:	98 e1       	ldi	r25, 0x18	; 24
    23be:	90 93 b6 18 	sts	0x18B6, r25	; 0x8018b6 <pxDelayedTaskList+0x1>
    23c2:	80 93 b5 18 	sts	0x18B5, r24	; 0x8018b5 <pxDelayedTaskList>
    23c6:	87 eb       	ldi	r24, 0xB7	; 183
    23c8:	98 e1       	ldi	r25, 0x18	; 24
    23ca:	90 93 b4 18 	sts	0x18B4, r25	; 0x8018b4 <pxOverflowDelayedTaskList+0x1>
    23ce:	80 93 b3 18 	sts	0x18B3, r24	; 0x8018b3 <pxOverflowDelayedTaskList>
    23d2:	10 c0       	rjmp	.+32     	; 0x23f4 <xTaskCreate+0x1c4>
    23d4:	80 91 8a 18 	lds	r24, 0x188A	; 0x80188a <xSchedulerRunning>
    23d8:	81 11       	cpse	r24, r1
    23da:	0c c0       	rjmp	.+24     	; 0x23f4 <xTaskCreate+0x1c4>
    23dc:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    23e0:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    23e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    23e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23e8:	89 17       	cp	r24, r25
    23ea:	20 f0       	brcs	.+8      	; 0x23f4 <xTaskCreate+0x1c4>
    23ec:	d0 93 fa 18 	sts	0x18FA, r29	; 0x8018fa <pxCurrentTCB+0x1>
    23f0:	c0 93 f9 18 	sts	0x18F9, r28	; 0x8018f9 <pxCurrentTCB>
    23f4:	80 91 86 18 	lds	r24, 0x1886	; 0x801886 <uxTaskNumber>
    23f8:	8f 5f       	subi	r24, 0xFF	; 255
    23fa:	80 93 86 18 	sts	0x1886, r24	; 0x801886 <uxTaskNumber>
    23fe:	8d a3       	std	Y+37, r24	; 0x25
    2400:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2402:	90 91 8b 18 	lds	r25, 0x188B	; 0x80188b <uxTopReadyPriority>
    2406:	98 17       	cp	r25, r24
    2408:	10 f4       	brcc	.+4      	; 0x240e <xTaskCreate+0x1de>
    240a:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <uxTopReadyPriority>
    240e:	fb e0       	ldi	r31, 0x0B	; 11
    2410:	8f 9f       	mul	r24, r31
    2412:	c0 01       	movw	r24, r0
    2414:	11 24       	eor	r1, r1
    2416:	b6 01       	movw	r22, r12
    2418:	83 53       	subi	r24, 0x33	; 51
    241a:	97 4e       	sbci	r25, 0xE7	; 231
    241c:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vListInsertEnd>
    2420:	0f 90       	pop	r0
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	80 91 8a 18 	lds	r24, 0x188A	; 0x80188a <xSchedulerRunning>
    2428:	88 23       	and	r24, r24
    242a:	61 f0       	breq	.+24     	; 0x2444 <xTaskCreate+0x214>
    242c:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2430:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2434:	92 8d       	ldd	r25, Z+26	; 0x1a
    2436:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2438:	98 17       	cp	r25, r24
    243a:	30 f4       	brcc	.+12     	; 0x2448 <xTaskCreate+0x218>
    243c:	0e 94 13 09 	call	0x1226	; 0x1226 <vPortYield>
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	05 c0       	rjmp	.+10     	; 0x244e <xTaskCreate+0x21e>
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	03 c0       	rjmp	.+6      	; 0x244e <xTaskCreate+0x21e>
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	01 c0       	rjmp	.+2      	; 0x244e <xTaskCreate+0x21e>
    244c:	8f ef       	ldi	r24, 0xFF	; 255
    244e:	df 91       	pop	r29
    2450:	cf 91       	pop	r28
    2452:	0f 91       	pop	r16
    2454:	ff 90       	pop	r15
    2456:	ef 90       	pop	r14
    2458:	df 90       	pop	r13
    245a:	cf 90       	pop	r12
    245c:	bf 90       	pop	r11
    245e:	af 90       	pop	r10
    2460:	9f 90       	pop	r9
    2462:	8f 90       	pop	r8
    2464:	7f 90       	pop	r7
    2466:	6f 90       	pop	r6
    2468:	5f 90       	pop	r5
    246a:	4f 90       	pop	r4
    246c:	08 95       	ret

0000246e <vTaskStartScheduler>:
    246e:	ef 92       	push	r14
    2470:	ff 92       	push	r15
    2472:	0f 93       	push	r16
    2474:	0f 2e       	mov	r0, r31
    2476:	f0 e8       	ldi	r31, 0x80	; 128
    2478:	ef 2e       	mov	r14, r31
    247a:	f8 e1       	ldi	r31, 0x18	; 24
    247c:	ff 2e       	mov	r15, r31
    247e:	f0 2d       	mov	r31, r0
    2480:	00 e0       	ldi	r16, 0x00	; 0
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 ec       	ldi	r20, 0xC0	; 192
    2488:	50 e0       	ldi	r21, 0x00	; 0
    248a:	6d e1       	ldi	r22, 0x1D	; 29
    248c:	74 e0       	ldi	r23, 0x04	; 4
    248e:	8d ec       	ldi	r24, 0xCD	; 205
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	ce de       	rcall	.-612    	; 0x2230 <xTaskCreate>
    2494:	81 30       	cpi	r24, 0x01	; 1
    2496:	19 f5       	brne	.+70     	; 0x24de <vTaskStartScheduler+0x70>
    2498:	2a d7       	rcall	.+3668   	; 0x32ee <xTimerCreateTimerTask>
    249a:	81 30       	cpi	r24, 0x01	; 1
    249c:	01 f5       	brne	.+64     	; 0x24de <vTaskStartScheduler+0x70>
    249e:	f8 94       	cli
    24a0:	8f ef       	ldi	r24, 0xFF	; 255
    24a2:	9f ef       	ldi	r25, 0xFF	; 255
    24a4:	dc 01       	movw	r26, r24
    24a6:	80 93 82 18 	sts	0x1882, r24	; 0x801882 <xNextTaskUnblockTime>
    24aa:	90 93 83 18 	sts	0x1883, r25	; 0x801883 <xNextTaskUnblockTime+0x1>
    24ae:	a0 93 84 18 	sts	0x1884, r26	; 0x801884 <xNextTaskUnblockTime+0x2>
    24b2:	b0 93 85 18 	sts	0x1885, r27	; 0x801885 <xNextTaskUnblockTime+0x3>
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	80 93 8a 18 	sts	0x188A, r24	; 0x80188a <xSchedulerRunning>
    24bc:	10 92 8c 18 	sts	0x188C, r1	; 0x80188c <xTickCount>
    24c0:	10 92 8d 18 	sts	0x188D, r1	; 0x80188d <xTickCount+0x1>
    24c4:	10 92 8e 18 	sts	0x188E, r1	; 0x80188e <xTickCount+0x2>
    24c8:	10 92 8f 18 	sts	0x188F, r1	; 0x80188f <xTickCount+0x3>
    24cc:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    24d0:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    24d4:	81 a5       	ldd	r24, Z+41	; 0x29
    24d6:	0e 94 18 05 	call	0xa30	; 0xa30 <task_switch_in>
    24da:	0e 94 d7 08 	call	0x11ae	; 0x11ae <xPortStartScheduler>
    24de:	0f 91       	pop	r16
    24e0:	ff 90       	pop	r15
    24e2:	ef 90       	pop	r14
    24e4:	08 95       	ret

000024e6 <vTaskSuspendAll>:
    24e6:	80 91 7f 18 	lds	r24, 0x187F	; 0x80187f <uxSchedulerSuspended>
    24ea:	8f 5f       	subi	r24, 0xFF	; 255
    24ec:	80 93 7f 18 	sts	0x187F, r24	; 0x80187f <uxSchedulerSuspended>
    24f0:	08 95       	ret

000024f2 <xTaskGetTickCount>:
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	0f 92       	push	r0
    24f8:	60 91 8c 18 	lds	r22, 0x188C	; 0x80188c <xTickCount>
    24fc:	70 91 8d 18 	lds	r23, 0x188D	; 0x80188d <xTickCount+0x1>
    2500:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <xTickCount+0x2>
    2504:	90 91 8f 18 	lds	r25, 0x188F	; 0x80188f <xTickCount+0x3>
    2508:	0f 90       	pop	r0
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	08 95       	ret

0000250e <xTaskIncrementTick>:
    250e:	9f 92       	push	r9
    2510:	af 92       	push	r10
    2512:	bf 92       	push	r11
    2514:	cf 92       	push	r12
    2516:	df 92       	push	r13
    2518:	ef 92       	push	r14
    251a:	ff 92       	push	r15
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	80 91 7f 18 	lds	r24, 0x187F	; 0x80187f <uxSchedulerSuspended>
    2528:	81 11       	cpse	r24, r1
    252a:	ad c0       	rjmp	.+346    	; 0x2686 <xTaskIncrementTick+0x178>
    252c:	c0 90 8c 18 	lds	r12, 0x188C	; 0x80188c <xTickCount>
    2530:	d0 90 8d 18 	lds	r13, 0x188D	; 0x80188d <xTickCount+0x1>
    2534:	e0 90 8e 18 	lds	r14, 0x188E	; 0x80188e <xTickCount+0x2>
    2538:	f0 90 8f 18 	lds	r15, 0x188F	; 0x80188f <xTickCount+0x3>
    253c:	8f ef       	ldi	r24, 0xFF	; 255
    253e:	c8 1a       	sub	r12, r24
    2540:	d8 0a       	sbc	r13, r24
    2542:	e8 0a       	sbc	r14, r24
    2544:	f8 0a       	sbc	r15, r24
    2546:	c0 92 8c 18 	sts	0x188C, r12	; 0x80188c <xTickCount>
    254a:	d0 92 8d 18 	sts	0x188D, r13	; 0x80188d <xTickCount+0x1>
    254e:	e0 92 8e 18 	sts	0x188E, r14	; 0x80188e <xTickCount+0x2>
    2552:	f0 92 8f 18 	sts	0x188F, r15	; 0x80188f <xTickCount+0x3>
    2556:	c1 14       	cp	r12, r1
    2558:	d1 04       	cpc	r13, r1
    255a:	e1 04       	cpc	r14, r1
    255c:	f1 04       	cpc	r15, r1
    255e:	b1 f4       	brne	.+44     	; 0x258c <xTaskIncrementTick+0x7e>
    2560:	80 91 b5 18 	lds	r24, 0x18B5	; 0x8018b5 <pxDelayedTaskList>
    2564:	90 91 b6 18 	lds	r25, 0x18B6	; 0x8018b6 <pxDelayedTaskList+0x1>
    2568:	20 91 b3 18 	lds	r18, 0x18B3	; 0x8018b3 <pxOverflowDelayedTaskList>
    256c:	30 91 b4 18 	lds	r19, 0x18B4	; 0x8018b4 <pxOverflowDelayedTaskList+0x1>
    2570:	30 93 b6 18 	sts	0x18B6, r19	; 0x8018b6 <pxDelayedTaskList+0x1>
    2574:	20 93 b5 18 	sts	0x18B5, r18	; 0x8018b5 <pxDelayedTaskList>
    2578:	90 93 b4 18 	sts	0x18B4, r25	; 0x8018b4 <pxOverflowDelayedTaskList+0x1>
    257c:	80 93 b3 18 	sts	0x18B3, r24	; 0x8018b3 <pxOverflowDelayedTaskList>
    2580:	80 91 87 18 	lds	r24, 0x1887	; 0x801887 <xNumOfOverflows>
    2584:	8f 5f       	subi	r24, 0xFF	; 255
    2586:	80 93 87 18 	sts	0x1887, r24	; 0x801887 <xNumOfOverflows>
    258a:	b1 dd       	rcall	.-1182   	; 0x20ee <prvResetNextTaskUnblockTime>
    258c:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <xNextTaskUnblockTime>
    2590:	90 91 83 18 	lds	r25, 0x1883	; 0x801883 <xNextTaskUnblockTime+0x1>
    2594:	a0 91 84 18 	lds	r26, 0x1884	; 0x801884 <xNextTaskUnblockTime+0x2>
    2598:	b0 91 85 18 	lds	r27, 0x1885	; 0x801885 <xNextTaskUnblockTime+0x3>
    259c:	c8 16       	cp	r12, r24
    259e:	d9 06       	cpc	r13, r25
    25a0:	ea 06       	cpc	r14, r26
    25a2:	fb 06       	cpc	r15, r27
    25a4:	10 f4       	brcc	.+4      	; 0x25aa <xTaskIncrementTick+0x9c>
    25a6:	b1 2c       	mov	r11, r1
    25a8:	5d c0       	rjmp	.+186    	; 0x2664 <xTaskIncrementTick+0x156>
    25aa:	b1 2c       	mov	r11, r1
    25ac:	0f 2e       	mov	r0, r31
    25ae:	fb e0       	ldi	r31, 0x0B	; 11
    25b0:	af 2e       	mov	r10, r31
    25b2:	f0 2d       	mov	r31, r0
    25b4:	99 24       	eor	r9, r9
    25b6:	93 94       	inc	r9
    25b8:	e0 91 b5 18 	lds	r30, 0x18B5	; 0x8018b5 <pxDelayedTaskList>
    25bc:	f0 91 b6 18 	lds	r31, 0x18B6	; 0x8018b6 <pxDelayedTaskList+0x1>
    25c0:	80 81       	ld	r24, Z
    25c2:	81 11       	cpse	r24, r1
    25c4:	0c c0       	rjmp	.+24     	; 0x25de <xTaskIncrementTick+0xd0>
    25c6:	8f ef       	ldi	r24, 0xFF	; 255
    25c8:	9f ef       	ldi	r25, 0xFF	; 255
    25ca:	dc 01       	movw	r26, r24
    25cc:	80 93 82 18 	sts	0x1882, r24	; 0x801882 <xNextTaskUnblockTime>
    25d0:	90 93 83 18 	sts	0x1883, r25	; 0x801883 <xNextTaskUnblockTime+0x1>
    25d4:	a0 93 84 18 	sts	0x1884, r26	; 0x801884 <xNextTaskUnblockTime+0x2>
    25d8:	b0 93 85 18 	sts	0x1885, r27	; 0x801885 <xNextTaskUnblockTime+0x3>
    25dc:	43 c0       	rjmp	.+134    	; 0x2664 <xTaskIncrementTick+0x156>
    25de:	e0 91 b5 18 	lds	r30, 0x18B5	; 0x8018b5 <pxDelayedTaskList>
    25e2:	f0 91 b6 18 	lds	r31, 0x18B6	; 0x8018b6 <pxDelayedTaskList+0x1>
    25e6:	07 80       	ldd	r0, Z+7	; 0x07
    25e8:	f0 85       	ldd	r31, Z+8	; 0x08
    25ea:	e0 2d       	mov	r30, r0
    25ec:	c0 85       	ldd	r28, Z+8	; 0x08
    25ee:	d1 85       	ldd	r29, Z+9	; 0x09
    25f0:	8a 81       	ldd	r24, Y+2	; 0x02
    25f2:	9b 81       	ldd	r25, Y+3	; 0x03
    25f4:	ac 81       	ldd	r26, Y+4	; 0x04
    25f6:	bd 81       	ldd	r27, Y+5	; 0x05
    25f8:	c8 16       	cp	r12, r24
    25fa:	d9 06       	cpc	r13, r25
    25fc:	ea 06       	cpc	r14, r26
    25fe:	fb 06       	cpc	r15, r27
    2600:	48 f4       	brcc	.+18     	; 0x2614 <xTaskIncrementTick+0x106>
    2602:	80 93 82 18 	sts	0x1882, r24	; 0x801882 <xNextTaskUnblockTime>
    2606:	90 93 83 18 	sts	0x1883, r25	; 0x801883 <xNextTaskUnblockTime+0x1>
    260a:	a0 93 84 18 	sts	0x1884, r26	; 0x801884 <xNextTaskUnblockTime+0x2>
    260e:	b0 93 85 18 	sts	0x1885, r27	; 0x801885 <xNextTaskUnblockTime+0x3>
    2612:	28 c0       	rjmp	.+80     	; 0x2664 <xTaskIncrementTick+0x156>
    2614:	8e 01       	movw	r16, r28
    2616:	0e 5f       	subi	r16, 0xFE	; 254
    2618:	1f 4f       	sbci	r17, 0xFF	; 255
    261a:	c8 01       	movw	r24, r16
    261c:	0e 94 3e 08 	call	0x107c	; 0x107c <uxListRemove>
    2620:	88 8d       	ldd	r24, Y+24	; 0x18
    2622:	99 8d       	ldd	r25, Y+25	; 0x19
    2624:	89 2b       	or	r24, r25
    2626:	21 f0       	breq	.+8      	; 0x2630 <xTaskIncrementTick+0x122>
    2628:	ce 01       	movw	r24, r28
    262a:	0e 96       	adiw	r24, 0x0e	; 14
    262c:	0e 94 3e 08 	call	0x107c	; 0x107c <uxListRemove>
    2630:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2632:	90 91 8b 18 	lds	r25, 0x188B	; 0x80188b <uxTopReadyPriority>
    2636:	98 17       	cp	r25, r24
    2638:	10 f4       	brcc	.+4      	; 0x263e <xTaskIncrementTick+0x130>
    263a:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <uxTopReadyPriority>
    263e:	a8 9e       	mul	r10, r24
    2640:	c0 01       	movw	r24, r0
    2642:	11 24       	eor	r1, r1
    2644:	b8 01       	movw	r22, r16
    2646:	83 53       	subi	r24, 0x33	; 51
    2648:	97 4e       	sbci	r25, 0xE7	; 231
    264a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vListInsertEnd>
    264e:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2652:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2656:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2658:	82 8d       	ldd	r24, Z+26	; 0x1a
    265a:	98 17       	cp	r25, r24
    265c:	08 f4       	brcc	.+2      	; 0x2660 <xTaskIncrementTick+0x152>
    265e:	ac cf       	rjmp	.-168    	; 0x25b8 <xTaskIncrementTick+0xaa>
    2660:	b9 2c       	mov	r11, r9
    2662:	aa cf       	rjmp	.-172    	; 0x25b8 <xTaskIncrementTick+0xaa>
    2664:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2668:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    266c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    266e:	8b e0       	ldi	r24, 0x0B	; 11
    2670:	e8 9f       	mul	r30, r24
    2672:	f0 01       	movw	r30, r0
    2674:	11 24       	eor	r1, r1
    2676:	e3 53       	subi	r30, 0x33	; 51
    2678:	f7 4e       	sbci	r31, 0xE7	; 231
    267a:	80 81       	ld	r24, Z
    267c:	82 30       	cpi	r24, 0x02	; 2
    267e:	48 f0       	brcs	.+18     	; 0x2692 <xTaskIncrementTick+0x184>
    2680:	bb 24       	eor	r11, r11
    2682:	b3 94       	inc	r11
    2684:	06 c0       	rjmp	.+12     	; 0x2692 <xTaskIncrementTick+0x184>
    2686:	80 91 89 18 	lds	r24, 0x1889	; 0x801889 <uxPendedTicks>
    268a:	8f 5f       	subi	r24, 0xFF	; 255
    268c:	80 93 89 18 	sts	0x1889, r24	; 0x801889 <uxPendedTicks>
    2690:	b1 2c       	mov	r11, r1
    2692:	80 91 88 18 	lds	r24, 0x1888	; 0x801888 <xYieldPending>
    2696:	88 23       	and	r24, r24
    2698:	11 f0       	breq	.+4      	; 0x269e <xTaskIncrementTick+0x190>
    269a:	bb 24       	eor	r11, r11
    269c:	b3 94       	inc	r11
    269e:	8b 2d       	mov	r24, r11
    26a0:	df 91       	pop	r29
    26a2:	cf 91       	pop	r28
    26a4:	1f 91       	pop	r17
    26a6:	0f 91       	pop	r16
    26a8:	ff 90       	pop	r15
    26aa:	ef 90       	pop	r14
    26ac:	df 90       	pop	r13
    26ae:	cf 90       	pop	r12
    26b0:	bf 90       	pop	r11
    26b2:	af 90       	pop	r10
    26b4:	9f 90       	pop	r9
    26b6:	08 95       	ret

000026b8 <xTaskResumeAll>:
    26b8:	cf 92       	push	r12
    26ba:	df 92       	push	r13
    26bc:	ef 92       	push	r14
    26be:	ff 92       	push	r15
    26c0:	0f 93       	push	r16
    26c2:	1f 93       	push	r17
    26c4:	cf 93       	push	r28
    26c6:	df 93       	push	r29
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	0f 92       	push	r0
    26ce:	80 91 7f 18 	lds	r24, 0x187F	; 0x80187f <uxSchedulerSuspended>
    26d2:	81 50       	subi	r24, 0x01	; 1
    26d4:	80 93 7f 18 	sts	0x187F, r24	; 0x80187f <uxSchedulerSuspended>
    26d8:	80 91 7f 18 	lds	r24, 0x187F	; 0x80187f <uxSchedulerSuspended>
    26dc:	81 11       	cpse	r24, r1
    26de:	5a c0       	rjmp	.+180    	; 0x2794 <xTaskResumeAll+0xdc>
    26e0:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <uxCurrentNumberOfTasks>
    26e4:	81 11       	cpse	r24, r1
    26e6:	2c c0       	rjmp	.+88     	; 0x2740 <xTaskResumeAll+0x88>
    26e8:	58 c0       	rjmp	.+176    	; 0x279a <xTaskResumeAll+0xe2>
    26ea:	d7 01       	movw	r26, r14
    26ec:	17 96       	adiw	r26, 0x07	; 7
    26ee:	ed 91       	ld	r30, X+
    26f0:	fc 91       	ld	r31, X
    26f2:	18 97       	sbiw	r26, 0x08	; 8
    26f4:	c0 85       	ldd	r28, Z+8	; 0x08
    26f6:	d1 85       	ldd	r29, Z+9	; 0x09
    26f8:	ce 01       	movw	r24, r28
    26fa:	0e 96       	adiw	r24, 0x0e	; 14
    26fc:	0e 94 3e 08 	call	0x107c	; 0x107c <uxListRemove>
    2700:	8e 01       	movw	r16, r28
    2702:	0e 5f       	subi	r16, 0xFE	; 254
    2704:	1f 4f       	sbci	r17, 0xFF	; 255
    2706:	c8 01       	movw	r24, r16
    2708:	0e 94 3e 08 	call	0x107c	; 0x107c <uxListRemove>
    270c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    270e:	90 91 8b 18 	lds	r25, 0x188B	; 0x80188b <uxTopReadyPriority>
    2712:	98 17       	cp	r25, r24
    2714:	10 f4       	brcc	.+4      	; 0x271a <xTaskResumeAll+0x62>
    2716:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <uxTopReadyPriority>
    271a:	d8 9e       	mul	r13, r24
    271c:	c0 01       	movw	r24, r0
    271e:	11 24       	eor	r1, r1
    2720:	b8 01       	movw	r22, r16
    2722:	83 53       	subi	r24, 0x33	; 51
    2724:	97 4e       	sbci	r25, 0xE7	; 231
    2726:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vListInsertEnd>
    272a:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    272e:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2732:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2734:	82 8d       	ldd	r24, Z+26	; 0x1a
    2736:	98 17       	cp	r25, r24
    2738:	88 f0       	brcs	.+34     	; 0x275c <xTaskResumeAll+0xa4>
    273a:	c0 92 88 18 	sts	0x1888, r12	; 0x801888 <xYieldPending>
    273e:	0e c0       	rjmp	.+28     	; 0x275c <xTaskResumeAll+0xa4>
    2740:	c0 e0       	ldi	r28, 0x00	; 0
    2742:	d0 e0       	ldi	r29, 0x00	; 0
    2744:	0f 2e       	mov	r0, r31
    2746:	f8 ea       	ldi	r31, 0xA8	; 168
    2748:	ef 2e       	mov	r14, r31
    274a:	f8 e1       	ldi	r31, 0x18	; 24
    274c:	ff 2e       	mov	r15, r31
    274e:	f0 2d       	mov	r31, r0
    2750:	0f 2e       	mov	r0, r31
    2752:	fb e0       	ldi	r31, 0x0B	; 11
    2754:	df 2e       	mov	r13, r31
    2756:	f0 2d       	mov	r31, r0
    2758:	cc 24       	eor	r12, r12
    275a:	c3 94       	inc	r12
    275c:	f7 01       	movw	r30, r14
    275e:	80 81       	ld	r24, Z
    2760:	81 11       	cpse	r24, r1
    2762:	c3 cf       	rjmp	.-122    	; 0x26ea <xTaskResumeAll+0x32>
    2764:	cd 2b       	or	r28, r29
    2766:	09 f0       	breq	.+2      	; 0x276a <xTaskResumeAll+0xb2>
    2768:	c2 dc       	rcall	.-1660   	; 0x20ee <prvResetNextTaskUnblockTime>
    276a:	c0 91 89 18 	lds	r28, 0x1889	; 0x801889 <uxPendedTicks>
    276e:	cc 23       	and	r28, r28
    2770:	49 f0       	breq	.+18     	; 0x2784 <xTaskResumeAll+0xcc>
    2772:	d1 e0       	ldi	r29, 0x01	; 1
    2774:	cc de       	rcall	.-616    	; 0x250e <xTaskIncrementTick>
    2776:	81 11       	cpse	r24, r1
    2778:	d0 93 88 18 	sts	0x1888, r29	; 0x801888 <xYieldPending>
    277c:	c1 50       	subi	r28, 0x01	; 1
    277e:	d1 f7       	brne	.-12     	; 0x2774 <xTaskResumeAll+0xbc>
    2780:	10 92 89 18 	sts	0x1889, r1	; 0x801889 <uxPendedTicks>
    2784:	80 91 88 18 	lds	r24, 0x1888	; 0x801888 <xYieldPending>
    2788:	88 23       	and	r24, r24
    278a:	31 f0       	breq	.+12     	; 0x2798 <xTaskResumeAll+0xe0>
    278c:	0e 94 13 09 	call	0x1226	; 0x1226 <vPortYield>
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	03 c0       	rjmp	.+6      	; 0x279a <xTaskResumeAll+0xe2>
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	01 c0       	rjmp	.+2      	; 0x279a <xTaskResumeAll+0xe2>
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	0f 90       	pop	r0
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	df 91       	pop	r29
    27a0:	cf 91       	pop	r28
    27a2:	1f 91       	pop	r17
    27a4:	0f 91       	pop	r16
    27a6:	ff 90       	pop	r15
    27a8:	ef 90       	pop	r14
    27aa:	df 90       	pop	r13
    27ac:	cf 90       	pop	r12
    27ae:	08 95       	ret

000027b0 <vTaskDelayUntil>:
    27b0:	cf 92       	push	r12
    27b2:	df 92       	push	r13
    27b4:	ef 92       	push	r14
    27b6:	ff 92       	push	r15
    27b8:	0f 93       	push	r16
    27ba:	1f 93       	push	r17
    27bc:	cf 93       	push	r28
    27be:	df 93       	push	r29
    27c0:	ec 01       	movw	r28, r24
    27c2:	6a 01       	movw	r12, r20
    27c4:	7b 01       	movw	r14, r22
    27c6:	8f de       	rcall	.-738    	; 0x24e6 <vTaskSuspendAll>
    27c8:	00 91 8c 18 	lds	r16, 0x188C	; 0x80188c <xTickCount>
    27cc:	10 91 8d 18 	lds	r17, 0x188D	; 0x80188d <xTickCount+0x1>
    27d0:	20 91 8e 18 	lds	r18, 0x188E	; 0x80188e <xTickCount+0x2>
    27d4:	30 91 8f 18 	lds	r19, 0x188F	; 0x80188f <xTickCount+0x3>
    27d8:	88 81       	ld	r24, Y
    27da:	99 81       	ldd	r25, Y+1	; 0x01
    27dc:	aa 81       	ldd	r26, Y+2	; 0x02
    27de:	bb 81       	ldd	r27, Y+3	; 0x03
    27e0:	ac 01       	movw	r20, r24
    27e2:	bd 01       	movw	r22, r26
    27e4:	4c 0d       	add	r20, r12
    27e6:	5d 1d       	adc	r21, r13
    27e8:	6e 1d       	adc	r22, r14
    27ea:	7f 1d       	adc	r23, r15
    27ec:	08 17       	cp	r16, r24
    27ee:	19 07       	cpc	r17, r25
    27f0:	2a 07       	cpc	r18, r26
    27f2:	3b 07       	cpc	r19, r27
    27f4:	78 f4       	brcc	.+30     	; 0x2814 <vTaskDelayUntil+0x64>
    27f6:	48 17       	cp	r20, r24
    27f8:	59 07       	cpc	r21, r25
    27fa:	6a 07       	cpc	r22, r26
    27fc:	7b 07       	cpc	r23, r27
    27fe:	40 f5       	brcc	.+80     	; 0x2850 <vTaskDelayUntil+0xa0>
    2800:	48 83       	st	Y, r20
    2802:	59 83       	std	Y+1, r21	; 0x01
    2804:	6a 83       	std	Y+2, r22	; 0x02
    2806:	7b 83       	std	Y+3, r23	; 0x03
    2808:	04 17       	cp	r16, r20
    280a:	15 07       	cpc	r17, r21
    280c:	26 07       	cpc	r18, r22
    280e:	37 07       	cpc	r19, r23
    2810:	a0 f4       	brcc	.+40     	; 0x283a <vTaskDelayUntil+0x8a>
    2812:	0b c0       	rjmp	.+22     	; 0x282a <vTaskDelayUntil+0x7a>
    2814:	48 17       	cp	r20, r24
    2816:	59 07       	cpc	r21, r25
    2818:	6a 07       	cpc	r22, r26
    281a:	7b 07       	cpc	r23, r27
    281c:	a0 f0       	brcs	.+40     	; 0x2846 <vTaskDelayUntil+0x96>
    281e:	04 17       	cp	r16, r20
    2820:	15 07       	cpc	r17, r21
    2822:	26 07       	cpc	r18, r22
    2824:	37 07       	cpc	r19, r23
    2826:	78 f0       	brcs	.+30     	; 0x2846 <vTaskDelayUntil+0x96>
    2828:	13 c0       	rjmp	.+38     	; 0x2850 <vTaskDelayUntil+0xa0>
    282a:	cb 01       	movw	r24, r22
    282c:	ba 01       	movw	r22, r20
    282e:	60 1b       	sub	r22, r16
    2830:	71 0b       	sbc	r23, r17
    2832:	82 0b       	sbc	r24, r18
    2834:	93 0b       	sbc	r25, r19
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	84 dc       	rcall	.-1784   	; 0x2142 <prvAddCurrentTaskToDelayedList>
    283a:	3e df       	rcall	.-388    	; 0x26b8 <xTaskResumeAll>
    283c:	81 11       	cpse	r24, r1
    283e:	0d c0       	rjmp	.+26     	; 0x285a <vTaskDelayUntil+0xaa>
    2840:	0e 94 13 09 	call	0x1226	; 0x1226 <vPortYield>
    2844:	0a c0       	rjmp	.+20     	; 0x285a <vTaskDelayUntil+0xaa>
    2846:	48 83       	st	Y, r20
    2848:	59 83       	std	Y+1, r21	; 0x01
    284a:	6a 83       	std	Y+2, r22	; 0x02
    284c:	7b 83       	std	Y+3, r23	; 0x03
    284e:	ed cf       	rjmp	.-38     	; 0x282a <vTaskDelayUntil+0x7a>
    2850:	48 83       	st	Y, r20
    2852:	59 83       	std	Y+1, r21	; 0x01
    2854:	6a 83       	std	Y+2, r22	; 0x02
    2856:	7b 83       	std	Y+3, r23	; 0x03
    2858:	f0 cf       	rjmp	.-32     	; 0x283a <vTaskDelayUntil+0x8a>
    285a:	df 91       	pop	r29
    285c:	cf 91       	pop	r28
    285e:	1f 91       	pop	r17
    2860:	0f 91       	pop	r16
    2862:	ff 90       	pop	r15
    2864:	ef 90       	pop	r14
    2866:	df 90       	pop	r13
    2868:	cf 90       	pop	r12
    286a:	08 95       	ret

0000286c <vTaskDelay>:
    286c:	cf 92       	push	r12
    286e:	df 92       	push	r13
    2870:	ef 92       	push	r14
    2872:	ff 92       	push	r15
    2874:	6b 01       	movw	r12, r22
    2876:	7c 01       	movw	r14, r24
    2878:	67 2b       	or	r22, r23
    287a:	68 2b       	or	r22, r24
    287c:	69 2b       	or	r22, r25
    287e:	41 f0       	breq	.+16     	; 0x2890 <vTaskDelay+0x24>
    2880:	32 de       	rcall	.-924    	; 0x24e6 <vTaskSuspendAll>
    2882:	40 e0       	ldi	r20, 0x00	; 0
    2884:	c7 01       	movw	r24, r14
    2886:	b6 01       	movw	r22, r12
    2888:	5c dc       	rcall	.-1864   	; 0x2142 <prvAddCurrentTaskToDelayedList>
    288a:	16 df       	rcall	.-468    	; 0x26b8 <xTaskResumeAll>
    288c:	81 11       	cpse	r24, r1
    288e:	02 c0       	rjmp	.+4      	; 0x2894 <vTaskDelay+0x28>
    2890:	0e 94 13 09 	call	0x1226	; 0x1226 <vPortYield>
    2894:	ff 90       	pop	r15
    2896:	ef 90       	pop	r14
    2898:	df 90       	pop	r13
    289a:	cf 90       	pop	r12
    289c:	08 95       	ret

0000289e <vTaskSwitchContext>:
    289e:	80 91 7f 18 	lds	r24, 0x187F	; 0x80187f <uxSchedulerSuspended>
    28a2:	88 23       	and	r24, r24
    28a4:	21 f0       	breq	.+8      	; 0x28ae <vTaskSwitchContext+0x10>
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	80 93 88 18 	sts	0x1888, r24	; 0x801888 <xYieldPending>
    28ac:	08 95       	ret
    28ae:	10 92 88 18 	sts	0x1888, r1	; 0x801888 <xYieldPending>
    28b2:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    28b6:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    28ba:	81 a5       	ldd	r24, Z+41	; 0x29
    28bc:	0e 94 22 05 	call	0xa44	; 0xa44 <task_switch_out>
    28c0:	a0 91 f9 18 	lds	r26, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    28c4:	b0 91 fa 18 	lds	r27, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    28c8:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    28cc:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    28d0:	2d 91       	ld	r18, X+
    28d2:	3c 91       	ld	r19, X
    28d4:	83 8d       	ldd	r24, Z+27	; 0x1b
    28d6:	94 8d       	ldd	r25, Z+28	; 0x1c
    28d8:	82 17       	cp	r24, r18
    28da:	93 07       	cpc	r25, r19
    28dc:	58 f0       	brcs	.+22     	; 0x28f4 <vTaskSwitchContext+0x56>
    28de:	60 91 f9 18 	lds	r22, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    28e2:	70 91 fa 18 	lds	r23, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    28e6:	80 91 f9 18 	lds	r24, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    28ea:	90 91 fa 18 	lds	r25, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    28ee:	63 5e       	subi	r22, 0xE3	; 227
    28f0:	7f 4f       	sbci	r23, 0xFF	; 255
    28f2:	20 d6       	rcall	.+3136   	; 0x3534 <vApplicationStackOverflowHook>
    28f4:	80 91 8b 18 	lds	r24, 0x188B	; 0x80188b <uxTopReadyPriority>
    28f8:	28 2f       	mov	r18, r24
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	9b e0       	ldi	r25, 0x0B	; 11
    28fe:	89 9f       	mul	r24, r25
    2900:	f0 01       	movw	r30, r0
    2902:	11 24       	eor	r1, r1
    2904:	e3 53       	subi	r30, 0x33	; 51
    2906:	f7 4e       	sbci	r31, 0xE7	; 231
    2908:	90 81       	ld	r25, Z
    290a:	91 11       	cpse	r25, r1
    290c:	0e c0       	rjmp	.+28     	; 0x292a <vTaskSwitchContext+0x8c>
    290e:	4b e0       	ldi	r20, 0x0B	; 11
    2910:	81 50       	subi	r24, 0x01	; 1
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	42 9f       	mul	r20, r18
    2918:	f0 01       	movw	r30, r0
    291a:	43 9f       	mul	r20, r19
    291c:	f0 0d       	add	r31, r0
    291e:	11 24       	eor	r1, r1
    2920:	e3 53       	subi	r30, 0x33	; 51
    2922:	f7 4e       	sbci	r31, 0xE7	; 231
    2924:	90 81       	ld	r25, Z
    2926:	99 23       	and	r25, r25
    2928:	99 f3       	breq	.-26     	; 0x2910 <vTaskSwitchContext+0x72>
    292a:	9b e0       	ldi	r25, 0x0B	; 11
    292c:	92 9f       	mul	r25, r18
    292e:	a0 01       	movw	r20, r0
    2930:	93 9f       	mul	r25, r19
    2932:	50 0d       	add	r21, r0
    2934:	11 24       	eor	r1, r1
    2936:	da 01       	movw	r26, r20
    2938:	a3 53       	subi	r26, 0x33	; 51
    293a:	b7 4e       	sbci	r27, 0xE7	; 231
    293c:	11 96       	adiw	r26, 0x01	; 1
    293e:	ed 91       	ld	r30, X+
    2940:	fc 91       	ld	r31, X
    2942:	12 97       	sbiw	r26, 0x02	; 2
    2944:	04 80       	ldd	r0, Z+4	; 0x04
    2946:	f5 81       	ldd	r31, Z+5	; 0x05
    2948:	e0 2d       	mov	r30, r0
    294a:	12 96       	adiw	r26, 0x02	; 2
    294c:	fc 93       	st	X, r31
    294e:	ee 93       	st	-X, r30
    2950:	11 97       	sbiw	r26, 0x01	; 1
    2952:	40 53       	subi	r20, 0x30	; 48
    2954:	57 4e       	sbci	r21, 0xE7	; 231
    2956:	e4 17       	cp	r30, r20
    2958:	f5 07       	cpc	r31, r21
    295a:	29 f4       	brne	.+10     	; 0x2966 <vTaskSwitchContext+0xc8>
    295c:	44 81       	ldd	r20, Z+4	; 0x04
    295e:	55 81       	ldd	r21, Z+5	; 0x05
    2960:	fd 01       	movw	r30, r26
    2962:	52 83       	std	Z+2, r21	; 0x02
    2964:	41 83       	std	Z+1, r20	; 0x01
    2966:	9b e0       	ldi	r25, 0x0B	; 11
    2968:	92 9f       	mul	r25, r18
    296a:	f0 01       	movw	r30, r0
    296c:	93 9f       	mul	r25, r19
    296e:	f0 0d       	add	r31, r0
    2970:	11 24       	eor	r1, r1
    2972:	e3 53       	subi	r30, 0x33	; 51
    2974:	f7 4e       	sbci	r31, 0xE7	; 231
    2976:	01 80       	ldd	r0, Z+1	; 0x01
    2978:	f2 81       	ldd	r31, Z+2	; 0x02
    297a:	e0 2d       	mov	r30, r0
    297c:	20 85       	ldd	r18, Z+8	; 0x08
    297e:	31 85       	ldd	r19, Z+9	; 0x09
    2980:	30 93 fa 18 	sts	0x18FA, r19	; 0x8018fa <pxCurrentTCB+0x1>
    2984:	20 93 f9 18 	sts	0x18F9, r18	; 0x8018f9 <pxCurrentTCB>
    2988:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <uxTopReadyPriority>
    298c:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2990:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2994:	81 a5       	ldd	r24, Z+41	; 0x29
    2996:	0c 94 18 05 	jmp	0xa30	; 0xa30 <task_switch_in>
    299a:	08 95       	ret

0000299c <vTaskPlaceOnEventList>:
    299c:	cf 92       	push	r12
    299e:	df 92       	push	r13
    29a0:	ef 92       	push	r14
    29a2:	ff 92       	push	r15
    29a4:	6a 01       	movw	r12, r20
    29a6:	7b 01       	movw	r14, r22
    29a8:	60 91 f9 18 	lds	r22, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    29ac:	70 91 fa 18 	lds	r23, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    29b0:	62 5f       	subi	r22, 0xF2	; 242
    29b2:	7f 4f       	sbci	r23, 0xFF	; 255
    29b4:	0e 94 01 08 	call	0x1002	; 0x1002 <vListInsert>
    29b8:	41 e0       	ldi	r20, 0x01	; 1
    29ba:	c7 01       	movw	r24, r14
    29bc:	b6 01       	movw	r22, r12
    29be:	c1 db       	rcall	.-2174   	; 0x2142 <prvAddCurrentTaskToDelayedList>
    29c0:	ff 90       	pop	r15
    29c2:	ef 90       	pop	r14
    29c4:	df 90       	pop	r13
    29c6:	cf 90       	pop	r12
    29c8:	08 95       	ret

000029ca <vTaskPlaceOnUnorderedEventList>:
    29ca:	cf 92       	push	r12
    29cc:	df 92       	push	r13
    29ce:	ef 92       	push	r14
    29d0:	ff 92       	push	r15
    29d2:	0f 93       	push	r16
    29d4:	1f 93       	push	r17
    29d6:	68 01       	movw	r12, r16
    29d8:	79 01       	movw	r14, r18
    29da:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    29de:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    29e2:	70 68       	ori	r23, 0x80	; 128
    29e4:	46 87       	std	Z+14, r20	; 0x0e
    29e6:	57 87       	std	Z+15, r21	; 0x0f
    29e8:	60 8b       	std	Z+16, r22	; 0x10
    29ea:	71 8b       	std	Z+17, r23	; 0x11
    29ec:	60 91 f9 18 	lds	r22, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    29f0:	70 91 fa 18 	lds	r23, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    29f4:	62 5f       	subi	r22, 0xF2	; 242
    29f6:	7f 4f       	sbci	r23, 0xFF	; 255
    29f8:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vListInsertEnd>
    29fc:	41 e0       	ldi	r20, 0x01	; 1
    29fe:	c7 01       	movw	r24, r14
    2a00:	b6 01       	movw	r22, r12
    2a02:	9f db       	rcall	.-2242   	; 0x2142 <prvAddCurrentTaskToDelayedList>
    2a04:	1f 91       	pop	r17
    2a06:	0f 91       	pop	r16
    2a08:	ff 90       	pop	r15
    2a0a:	ef 90       	pop	r14
    2a0c:	df 90       	pop	r13
    2a0e:	cf 90       	pop	r12
    2a10:	08 95       	ret

00002a12 <vTaskPlaceOnEventListRestricted>:
    2a12:	cf 92       	push	r12
    2a14:	df 92       	push	r13
    2a16:	ef 92       	push	r14
    2a18:	ff 92       	push	r15
    2a1a:	cf 93       	push	r28
    2a1c:	6a 01       	movw	r12, r20
    2a1e:	7b 01       	movw	r14, r22
    2a20:	c2 2f       	mov	r28, r18
    2a22:	60 91 f9 18 	lds	r22, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2a26:	70 91 fa 18 	lds	r23, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2a2a:	62 5f       	subi	r22, 0xF2	; 242
    2a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vListInsertEnd>
    2a32:	cc 23       	and	r28, r28
    2a34:	21 f0       	breq	.+8      	; 0x2a3e <vTaskPlaceOnEventListRestricted+0x2c>
    2a36:	cc 24       	eor	r12, r12
    2a38:	ca 94       	dec	r12
    2a3a:	dc 2c       	mov	r13, r12
    2a3c:	76 01       	movw	r14, r12
    2a3e:	4c 2f       	mov	r20, r28
    2a40:	c7 01       	movw	r24, r14
    2a42:	b6 01       	movw	r22, r12
    2a44:	7e db       	rcall	.-2308   	; 0x2142 <prvAddCurrentTaskToDelayedList>
    2a46:	cf 91       	pop	r28
    2a48:	ff 90       	pop	r15
    2a4a:	ef 90       	pop	r14
    2a4c:	df 90       	pop	r13
    2a4e:	cf 90       	pop	r12
    2a50:	08 95       	ret

00002a52 <xTaskRemoveFromEventList>:
    2a52:	0f 93       	push	r16
    2a54:	1f 93       	push	r17
    2a56:	cf 93       	push	r28
    2a58:	df 93       	push	r29
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	17 96       	adiw	r26, 0x07	; 7
    2a5e:	ed 91       	ld	r30, X+
    2a60:	fc 91       	ld	r31, X
    2a62:	18 97       	sbiw	r26, 0x08	; 8
    2a64:	c0 85       	ldd	r28, Z+8	; 0x08
    2a66:	d1 85       	ldd	r29, Z+9	; 0x09
    2a68:	8e 01       	movw	r16, r28
    2a6a:	02 5f       	subi	r16, 0xF2	; 242
    2a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6e:	c8 01       	movw	r24, r16
    2a70:	0e 94 3e 08 	call	0x107c	; 0x107c <uxListRemove>
    2a74:	80 91 7f 18 	lds	r24, 0x187F	; 0x80187f <uxSchedulerSuspended>
    2a78:	81 11       	cpse	r24, r1
    2a7a:	16 c0       	rjmp	.+44     	; 0x2aa8 <xTaskRemoveFromEventList+0x56>
    2a7c:	0c 50       	subi	r16, 0x0C	; 12
    2a7e:	11 09       	sbc	r17, r1
    2a80:	c8 01       	movw	r24, r16
    2a82:	0e 94 3e 08 	call	0x107c	; 0x107c <uxListRemove>
    2a86:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a88:	90 91 8b 18 	lds	r25, 0x188B	; 0x80188b <uxTopReadyPriority>
    2a8c:	98 17       	cp	r25, r24
    2a8e:	10 f4       	brcc	.+4      	; 0x2a94 <xTaskRemoveFromEventList+0x42>
    2a90:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <uxTopReadyPriority>
    2a94:	bb e0       	ldi	r27, 0x0B	; 11
    2a96:	8b 9f       	mul	r24, r27
    2a98:	c0 01       	movw	r24, r0
    2a9a:	11 24       	eor	r1, r1
    2a9c:	b8 01       	movw	r22, r16
    2a9e:	83 53       	subi	r24, 0x33	; 51
    2aa0:	97 4e       	sbci	r25, 0xE7	; 231
    2aa2:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vListInsertEnd>
    2aa6:	05 c0       	rjmp	.+10     	; 0x2ab2 <xTaskRemoveFromEventList+0x60>
    2aa8:	b8 01       	movw	r22, r16
    2aaa:	88 ea       	ldi	r24, 0xA8	; 168
    2aac:	98 e1       	ldi	r25, 0x18	; 24
    2aae:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vListInsertEnd>
    2ab2:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2ab6:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2aba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2abc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2abe:	89 17       	cp	r24, r25
    2ac0:	20 f4       	brcc	.+8      	; 0x2aca <xTaskRemoveFromEventList+0x78>
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	80 93 88 18 	sts	0x1888, r24	; 0x801888 <xYieldPending>
    2ac8:	01 c0       	rjmp	.+2      	; 0x2acc <xTaskRemoveFromEventList+0x7a>
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	df 91       	pop	r29
    2ace:	cf 91       	pop	r28
    2ad0:	1f 91       	pop	r17
    2ad2:	0f 91       	pop	r16
    2ad4:	08 95       	ret

00002ad6 <vTaskRemoveFromUnorderedEventList>:
    2ad6:	0f 93       	push	r16
    2ad8:	1f 93       	push	r17
    2ada:	cf 93       	push	r28
    2adc:	df 93       	push	r29
    2ade:	70 68       	ori	r23, 0x80	; 128
    2ae0:	fc 01       	movw	r30, r24
    2ae2:	40 83       	st	Z, r20
    2ae4:	51 83       	std	Z+1, r21	; 0x01
    2ae6:	62 83       	std	Z+2, r22	; 0x02
    2ae8:	73 83       	std	Z+3, r23	; 0x03
    2aea:	c0 85       	ldd	r28, Z+8	; 0x08
    2aec:	d1 85       	ldd	r29, Z+9	; 0x09
    2aee:	0e 94 3e 08 	call	0x107c	; 0x107c <uxListRemove>
    2af2:	8e 01       	movw	r16, r28
    2af4:	0e 5f       	subi	r16, 0xFE	; 254
    2af6:	1f 4f       	sbci	r17, 0xFF	; 255
    2af8:	c8 01       	movw	r24, r16
    2afa:	0e 94 3e 08 	call	0x107c	; 0x107c <uxListRemove>
    2afe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b00:	90 91 8b 18 	lds	r25, 0x188B	; 0x80188b <uxTopReadyPriority>
    2b04:	98 17       	cp	r25, r24
    2b06:	10 f4       	brcc	.+4      	; 0x2b0c <vTaskRemoveFromUnorderedEventList+0x36>
    2b08:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <uxTopReadyPriority>
    2b0c:	fb e0       	ldi	r31, 0x0B	; 11
    2b0e:	8f 9f       	mul	r24, r31
    2b10:	c0 01       	movw	r24, r0
    2b12:	11 24       	eor	r1, r1
    2b14:	b8 01       	movw	r22, r16
    2b16:	83 53       	subi	r24, 0x33	; 51
    2b18:	97 4e       	sbci	r25, 0xE7	; 231
    2b1a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vListInsertEnd>
    2b1e:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2b22:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2b26:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b28:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b2a:	89 17       	cp	r24, r25
    2b2c:	18 f4       	brcc	.+6      	; 0x2b34 <vTaskRemoveFromUnorderedEventList+0x5e>
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	80 93 88 18 	sts	0x1888, r24	; 0x801888 <xYieldPending>
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	1f 91       	pop	r17
    2b3a:	0f 91       	pop	r16
    2b3c:	08 95       	ret

00002b3e <vTaskSetTimeOutState>:
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	0f 92       	push	r0
    2b44:	20 91 87 18 	lds	r18, 0x1887	; 0x801887 <xNumOfOverflows>
    2b48:	fc 01       	movw	r30, r24
    2b4a:	20 83       	st	Z, r18
    2b4c:	40 91 8c 18 	lds	r20, 0x188C	; 0x80188c <xTickCount>
    2b50:	50 91 8d 18 	lds	r21, 0x188D	; 0x80188d <xTickCount+0x1>
    2b54:	60 91 8e 18 	lds	r22, 0x188E	; 0x80188e <xTickCount+0x2>
    2b58:	70 91 8f 18 	lds	r23, 0x188F	; 0x80188f <xTickCount+0x3>
    2b5c:	41 83       	std	Z+1, r20	; 0x01
    2b5e:	52 83       	std	Z+2, r21	; 0x02
    2b60:	63 83       	std	Z+3, r22	; 0x03
    2b62:	74 83       	std	Z+4, r23	; 0x04
    2b64:	0f 90       	pop	r0
    2b66:	0f be       	out	0x3f, r0	; 63
    2b68:	08 95       	ret

00002b6a <vTaskInternalSetTimeOutState>:
    2b6a:	20 91 87 18 	lds	r18, 0x1887	; 0x801887 <xNumOfOverflows>
    2b6e:	fc 01       	movw	r30, r24
    2b70:	20 83       	st	Z, r18
    2b72:	40 91 8c 18 	lds	r20, 0x188C	; 0x80188c <xTickCount>
    2b76:	50 91 8d 18 	lds	r21, 0x188D	; 0x80188d <xTickCount+0x1>
    2b7a:	60 91 8e 18 	lds	r22, 0x188E	; 0x80188e <xTickCount+0x2>
    2b7e:	70 91 8f 18 	lds	r23, 0x188F	; 0x80188f <xTickCount+0x3>
    2b82:	41 83       	std	Z+1, r20	; 0x01
    2b84:	52 83       	std	Z+2, r21	; 0x02
    2b86:	63 83       	std	Z+3, r22	; 0x03
    2b88:	74 83       	std	Z+4, r23	; 0x04
    2b8a:	08 95       	ret

00002b8c <xTaskCheckForTimeOut>:
    2b8c:	cf 92       	push	r12
    2b8e:	df 92       	push	r13
    2b90:	ef 92       	push	r14
    2b92:	ff 92       	push	r15
    2b94:	0f 93       	push	r16
    2b96:	1f 93       	push	r17
    2b98:	cf 93       	push	r28
    2b9a:	df 93       	push	r29
    2b9c:	fb 01       	movw	r30, r22
    2b9e:	0f b6       	in	r0, 0x3f	; 63
    2ba0:	f8 94       	cli
    2ba2:	0f 92       	push	r0
    2ba4:	40 91 8c 18 	lds	r20, 0x188C	; 0x80188c <xTickCount>
    2ba8:	50 91 8d 18 	lds	r21, 0x188D	; 0x80188d <xTickCount+0x1>
    2bac:	60 91 8e 18 	lds	r22, 0x188E	; 0x80188e <xTickCount+0x2>
    2bb0:	70 91 8f 18 	lds	r23, 0x188F	; 0x80188f <xTickCount+0x3>
    2bb4:	00 81       	ld	r16, Z
    2bb6:	11 81       	ldd	r17, Z+1	; 0x01
    2bb8:	22 81       	ldd	r18, Z+2	; 0x02
    2bba:	33 81       	ldd	r19, Z+3	; 0x03
    2bbc:	0f 3f       	cpi	r16, 0xFF	; 255
    2bbe:	af ef       	ldi	r26, 0xFF	; 255
    2bc0:	1a 07       	cpc	r17, r26
    2bc2:	2a 07       	cpc	r18, r26
    2bc4:	3a 07       	cpc	r19, r26
    2bc6:	49 f1       	breq	.+82     	; 0x2c1a <xTaskCheckForTimeOut+0x8e>
    2bc8:	ec 01       	movw	r28, r24
    2bca:	c9 80       	ldd	r12, Y+1	; 0x01
    2bcc:	da 80       	ldd	r13, Y+2	; 0x02
    2bce:	eb 80       	ldd	r14, Y+3	; 0x03
    2bd0:	fc 80       	ldd	r15, Y+4	; 0x04
    2bd2:	a0 91 87 18 	lds	r26, 0x1887	; 0x801887 <xNumOfOverflows>
    2bd6:	b8 81       	ld	r27, Y
    2bd8:	ba 17       	cp	r27, r26
    2bda:	29 f0       	breq	.+10     	; 0x2be6 <xTaskCheckForTimeOut+0x5a>
    2bdc:	4c 15       	cp	r20, r12
    2bde:	5d 05       	cpc	r21, r13
    2be0:	6e 05       	cpc	r22, r14
    2be2:	7f 05       	cpc	r23, r15
    2be4:	e0 f4       	brcc	.+56     	; 0x2c1e <xTaskCheckForTimeOut+0x92>
    2be6:	4c 19       	sub	r20, r12
    2be8:	5d 09       	sbc	r21, r13
    2bea:	6e 09       	sbc	r22, r14
    2bec:	7f 09       	sbc	r23, r15
    2bee:	40 17       	cp	r20, r16
    2bf0:	51 07       	cpc	r21, r17
    2bf2:	62 07       	cpc	r22, r18
    2bf4:	73 07       	cpc	r23, r19
    2bf6:	58 f4       	brcc	.+22     	; 0x2c0e <xTaskCheckForTimeOut+0x82>
    2bf8:	04 1b       	sub	r16, r20
    2bfa:	15 0b       	sbc	r17, r21
    2bfc:	26 0b       	sbc	r18, r22
    2bfe:	37 0b       	sbc	r19, r23
    2c00:	00 83       	st	Z, r16
    2c02:	11 83       	std	Z+1, r17	; 0x01
    2c04:	22 83       	std	Z+2, r18	; 0x02
    2c06:	33 83       	std	Z+3, r19	; 0x03
    2c08:	b0 df       	rcall	.-160    	; 0x2b6a <vTaskInternalSetTimeOutState>
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	09 c0       	rjmp	.+18     	; 0x2c20 <xTaskCheckForTimeOut+0x94>
    2c0e:	10 82       	st	Z, r1
    2c10:	11 82       	std	Z+1, r1	; 0x01
    2c12:	12 82       	std	Z+2, r1	; 0x02
    2c14:	13 82       	std	Z+3, r1	; 0x03
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	03 c0       	rjmp	.+6      	; 0x2c20 <xTaskCheckForTimeOut+0x94>
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	01 c0       	rjmp	.+2      	; 0x2c20 <xTaskCheckForTimeOut+0x94>
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	0f 90       	pop	r0
    2c22:	0f be       	out	0x3f, r0	; 63
    2c24:	df 91       	pop	r29
    2c26:	cf 91       	pop	r28
    2c28:	1f 91       	pop	r17
    2c2a:	0f 91       	pop	r16
    2c2c:	ff 90       	pop	r15
    2c2e:	ef 90       	pop	r14
    2c30:	df 90       	pop	r13
    2c32:	cf 90       	pop	r12
    2c34:	08 95       	ret

00002c36 <vTaskMissedYield>:
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	80 93 88 18 	sts	0x1888, r24	; 0x801888 <xYieldPending>
    2c3c:	08 95       	ret

00002c3e <xTaskGetCurrentTaskHandle>:
    2c3e:	80 91 f9 18 	lds	r24, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2c42:	90 91 fa 18 	lds	r25, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2c46:	08 95       	ret

00002c48 <xTaskGetSchedulerState>:
    2c48:	80 91 8a 18 	lds	r24, 0x188A	; 0x80188a <xSchedulerRunning>
    2c4c:	88 23       	and	r24, r24
    2c4e:	31 f0       	breq	.+12     	; 0x2c5c <xTaskGetSchedulerState+0x14>
    2c50:	80 91 7f 18 	lds	r24, 0x187F	; 0x80187f <uxSchedulerSuspended>
    2c54:	88 23       	and	r24, r24
    2c56:	21 f0       	breq	.+8      	; 0x2c60 <xTaskGetSchedulerState+0x18>
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	08 95       	ret
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	08 95       	ret
    2c60:	82 e0       	ldi	r24, 0x02	; 2
    2c62:	08 95       	ret

00002c64 <xTaskPriorityInherit>:
    2c64:	0f 93       	push	r16
    2c66:	1f 93       	push	r17
    2c68:	cf 93       	push	r28
    2c6a:	df 93       	push	r29
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	89 2b       	or	r24, r25
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <xTaskPriorityInherit+0x10>
    2c72:	60 c0       	rjmp	.+192    	; 0x2d34 <xTaskPriorityInherit+0xd0>
    2c74:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c76:	a0 91 f9 18 	lds	r26, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2c7a:	b0 91 fa 18 	lds	r27, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2c7e:	5a 96       	adiw	r26, 0x1a	; 26
    2c80:	9c 91       	ld	r25, X
    2c82:	89 17       	cp	r24, r25
    2c84:	08 f0       	brcs	.+2      	; 0x2c88 <xTaskPriorityInherit+0x24>
    2c86:	4a c0       	rjmp	.+148    	; 0x2d1c <xTaskPriorityInherit+0xb8>
    2c88:	46 85       	ldd	r20, Z+14	; 0x0e
    2c8a:	57 85       	ldd	r21, Z+15	; 0x0f
    2c8c:	60 89       	ldd	r22, Z+16	; 0x10
    2c8e:	71 89       	ldd	r23, Z+17	; 0x11
    2c90:	77 23       	and	r23, r23
    2c92:	94 f0       	brlt	.+36     	; 0x2cb8 <xTaskPriorityInherit+0x54>
    2c94:	a0 91 f9 18 	lds	r26, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2c98:	b0 91 fa 18 	lds	r27, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2c9c:	5a 96       	adiw	r26, 0x1a	; 26
    2c9e:	9c 91       	ld	r25, X
    2ca0:	44 e0       	ldi	r20, 0x04	; 4
    2ca2:	50 e0       	ldi	r21, 0x00	; 0
    2ca4:	60 e0       	ldi	r22, 0x00	; 0
    2ca6:	70 e0       	ldi	r23, 0x00	; 0
    2ca8:	49 1b       	sub	r20, r25
    2caa:	51 09       	sbc	r21, r1
    2cac:	61 09       	sbc	r22, r1
    2cae:	71 09       	sbc	r23, r1
    2cb0:	46 87       	std	Z+14, r20	; 0x0e
    2cb2:	57 87       	std	Z+15, r21	; 0x0f
    2cb4:	60 8b       	std	Z+16, r22	; 0x10
    2cb6:	71 8b       	std	Z+17, r23	; 0x11
    2cb8:	2b e0       	ldi	r18, 0x0B	; 11
    2cba:	82 9f       	mul	r24, r18
    2cbc:	c0 01       	movw	r24, r0
    2cbe:	11 24       	eor	r1, r1
    2cc0:	83 53       	subi	r24, 0x33	; 51
    2cc2:	97 4e       	sbci	r25, 0xE7	; 231
    2cc4:	24 85       	ldd	r18, Z+12	; 0x0c
    2cc6:	35 85       	ldd	r19, Z+13	; 0x0d
    2cc8:	28 17       	cp	r18, r24
    2cca:	39 07       	cpc	r19, r25
    2ccc:	f1 f4       	brne	.+60     	; 0x2d0a <xTaskPriorityInherit+0xa6>
    2cce:	8f 01       	movw	r16, r30
    2cd0:	ef 01       	movw	r28, r30
    2cd2:	22 96       	adiw	r28, 0x02	; 2
    2cd4:	ce 01       	movw	r24, r28
    2cd6:	0e 94 3e 08 	call	0x107c	; 0x107c <uxListRemove>
    2cda:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2cde:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2ce2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ce4:	f8 01       	movw	r30, r16
    2ce6:	82 8f       	std	Z+26, r24	; 0x1a
    2ce8:	90 91 8b 18 	lds	r25, 0x188B	; 0x80188b <uxTopReadyPriority>
    2cec:	98 17       	cp	r25, r24
    2cee:	10 f4       	brcc	.+4      	; 0x2cf4 <xTaskPriorityInherit+0x90>
    2cf0:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <uxTopReadyPriority>
    2cf4:	fb e0       	ldi	r31, 0x0B	; 11
    2cf6:	8f 9f       	mul	r24, r31
    2cf8:	c0 01       	movw	r24, r0
    2cfa:	11 24       	eor	r1, r1
    2cfc:	be 01       	movw	r22, r28
    2cfe:	83 53       	subi	r24, 0x33	; 51
    2d00:	97 4e       	sbci	r25, 0xE7	; 231
    2d02:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vListInsertEnd>
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	16 c0       	rjmp	.+44     	; 0x2d36 <xTaskPriorityInherit+0xd2>
    2d0a:	a0 91 f9 18 	lds	r26, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2d0e:	b0 91 fa 18 	lds	r27, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2d12:	5a 96       	adiw	r26, 0x1a	; 26
    2d14:	8c 91       	ld	r24, X
    2d16:	82 8f       	std	Z+26, r24	; 0x1a
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	0d c0       	rjmp	.+26     	; 0x2d36 <xTaskPriorityInherit+0xd2>
    2d1c:	a0 91 f9 18 	lds	r26, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2d20:	b0 91 fa 18 	lds	r27, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	27 a1       	ldd	r18, Z+39	; 0x27
    2d28:	5a 96       	adiw	r26, 0x1a	; 26
    2d2a:	9c 91       	ld	r25, X
    2d2c:	29 17       	cp	r18, r25
    2d2e:	18 f0       	brcs	.+6      	; 0x2d36 <xTaskPriorityInherit+0xd2>
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	01 c0       	rjmp	.+2      	; 0x2d36 <xTaskPriorityInherit+0xd2>
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	df 91       	pop	r29
    2d38:	cf 91       	pop	r28
    2d3a:	1f 91       	pop	r17
    2d3c:	0f 91       	pop	r16
    2d3e:	08 95       	ret

00002d40 <xTaskPriorityDisinherit>:
    2d40:	0f 93       	push	r16
    2d42:	1f 93       	push	r17
    2d44:	cf 93       	push	r28
    2d46:	df 93       	push	r29
    2d48:	fc 01       	movw	r30, r24
    2d4a:	89 2b       	or	r24, r25
    2d4c:	79 f1       	breq	.+94     	; 0x2dac <xTaskPriorityDisinherit+0x6c>
    2d4e:	80 a5       	ldd	r24, Z+40	; 0x28
    2d50:	81 50       	subi	r24, 0x01	; 1
    2d52:	80 a7       	std	Z+40, r24	; 0x28
    2d54:	22 8d       	ldd	r18, Z+26	; 0x1a
    2d56:	97 a1       	ldd	r25, Z+39	; 0x27
    2d58:	29 17       	cp	r18, r25
    2d5a:	51 f1       	breq	.+84     	; 0x2db0 <xTaskPriorityDisinherit+0x70>
    2d5c:	81 11       	cpse	r24, r1
    2d5e:	2a c0       	rjmp	.+84     	; 0x2db4 <xTaskPriorityDisinherit+0x74>
    2d60:	ef 01       	movw	r28, r30
    2d62:	8f 01       	movw	r16, r30
    2d64:	0e 5f       	subi	r16, 0xFE	; 254
    2d66:	1f 4f       	sbci	r17, 0xFF	; 255
    2d68:	c8 01       	movw	r24, r16
    2d6a:	0e 94 3e 08 	call	0x107c	; 0x107c <uxListRemove>
    2d6e:	8f a1       	ldd	r24, Y+39	; 0x27
    2d70:	8a 8f       	std	Y+26, r24	; 0x1a
    2d72:	44 e0       	ldi	r20, 0x04	; 4
    2d74:	50 e0       	ldi	r21, 0x00	; 0
    2d76:	60 e0       	ldi	r22, 0x00	; 0
    2d78:	70 e0       	ldi	r23, 0x00	; 0
    2d7a:	48 1b       	sub	r20, r24
    2d7c:	51 09       	sbc	r21, r1
    2d7e:	61 09       	sbc	r22, r1
    2d80:	71 09       	sbc	r23, r1
    2d82:	4e 87       	std	Y+14, r20	; 0x0e
    2d84:	5f 87       	std	Y+15, r21	; 0x0f
    2d86:	68 8b       	std	Y+16, r22	; 0x10
    2d88:	79 8b       	std	Y+17, r23	; 0x11
    2d8a:	90 91 8b 18 	lds	r25, 0x188B	; 0x80188b <uxTopReadyPriority>
    2d8e:	98 17       	cp	r25, r24
    2d90:	10 f4       	brcc	.+4      	; 0x2d96 <xTaskPriorityDisinherit+0x56>
    2d92:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <uxTopReadyPriority>
    2d96:	2b e0       	ldi	r18, 0x0B	; 11
    2d98:	82 9f       	mul	r24, r18
    2d9a:	c0 01       	movw	r24, r0
    2d9c:	11 24       	eor	r1, r1
    2d9e:	b8 01       	movw	r22, r16
    2da0:	83 53       	subi	r24, 0x33	; 51
    2da2:	97 4e       	sbci	r25, 0xE7	; 231
    2da4:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vListInsertEnd>
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	05 c0       	rjmp	.+10     	; 0x2db6 <xTaskPriorityDisinherit+0x76>
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	03 c0       	rjmp	.+6      	; 0x2db6 <xTaskPriorityDisinherit+0x76>
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	01 c0       	rjmp	.+2      	; 0x2db6 <xTaskPriorityDisinherit+0x76>
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	df 91       	pop	r29
    2db8:	cf 91       	pop	r28
    2dba:	1f 91       	pop	r17
    2dbc:	0f 91       	pop	r16
    2dbe:	08 95       	ret

00002dc0 <vTaskPriorityDisinheritAfterTimeout>:
    2dc0:	0f 93       	push	r16
    2dc2:	1f 93       	push	r17
    2dc4:	cf 93       	push	r28
    2dc6:	df 93       	push	r29
    2dc8:	fc 01       	movw	r30, r24
    2dca:	89 2b       	or	r24, r25
    2dcc:	09 f4       	brne	.+2      	; 0x2dd0 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2dce:	3f c0       	rjmp	.+126    	; 0x2e4e <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2dd0:	87 a1       	ldd	r24, Z+39	; 0x27
    2dd2:	86 17       	cp	r24, r22
    2dd4:	08 f4       	brcc	.+2      	; 0x2dd8 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2dd6:	86 2f       	mov	r24, r22
    2dd8:	92 8d       	ldd	r25, Z+26	; 0x1a
    2dda:	98 17       	cp	r25, r24
    2ddc:	c1 f1       	breq	.+112    	; 0x2e4e <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2dde:	20 a5       	ldd	r18, Z+40	; 0x28
    2de0:	21 30       	cpi	r18, 0x01	; 1
    2de2:	a9 f5       	brne	.+106    	; 0x2e4e <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2de4:	82 8f       	std	Z+26, r24	; 0x1a
    2de6:	46 85       	ldd	r20, Z+14	; 0x0e
    2de8:	57 85       	ldd	r21, Z+15	; 0x0f
    2dea:	60 89       	ldd	r22, Z+16	; 0x10
    2dec:	71 89       	ldd	r23, Z+17	; 0x11
    2dee:	77 23       	and	r23, r23
    2df0:	64 f0       	brlt	.+24     	; 0x2e0a <vTaskPriorityDisinheritAfterTimeout+0x4a>
    2df2:	44 e0       	ldi	r20, 0x04	; 4
    2df4:	50 e0       	ldi	r21, 0x00	; 0
    2df6:	60 e0       	ldi	r22, 0x00	; 0
    2df8:	70 e0       	ldi	r23, 0x00	; 0
    2dfa:	48 1b       	sub	r20, r24
    2dfc:	51 09       	sbc	r21, r1
    2dfe:	61 09       	sbc	r22, r1
    2e00:	71 09       	sbc	r23, r1
    2e02:	46 87       	std	Z+14, r20	; 0x0e
    2e04:	57 87       	std	Z+15, r21	; 0x0f
    2e06:	60 8b       	std	Z+16, r22	; 0x10
    2e08:	71 8b       	std	Z+17, r23	; 0x11
    2e0a:	2b e0       	ldi	r18, 0x0B	; 11
    2e0c:	92 9f       	mul	r25, r18
    2e0e:	c0 01       	movw	r24, r0
    2e10:	11 24       	eor	r1, r1
    2e12:	83 53       	subi	r24, 0x33	; 51
    2e14:	97 4e       	sbci	r25, 0xE7	; 231
    2e16:	24 85       	ldd	r18, Z+12	; 0x0c
    2e18:	35 85       	ldd	r19, Z+13	; 0x0d
    2e1a:	28 17       	cp	r18, r24
    2e1c:	39 07       	cpc	r19, r25
    2e1e:	b9 f4       	brne	.+46     	; 0x2e4e <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2e20:	ef 01       	movw	r28, r30
    2e22:	8f 01       	movw	r16, r30
    2e24:	0e 5f       	subi	r16, 0xFE	; 254
    2e26:	1f 4f       	sbci	r17, 0xFF	; 255
    2e28:	c8 01       	movw	r24, r16
    2e2a:	0e 94 3e 08 	call	0x107c	; 0x107c <uxListRemove>
    2e2e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e30:	90 91 8b 18 	lds	r25, 0x188B	; 0x80188b <uxTopReadyPriority>
    2e34:	98 17       	cp	r25, r24
    2e36:	10 f4       	brcc	.+4      	; 0x2e3c <vTaskPriorityDisinheritAfterTimeout+0x7c>
    2e38:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <uxTopReadyPriority>
    2e3c:	2b e0       	ldi	r18, 0x0B	; 11
    2e3e:	82 9f       	mul	r24, r18
    2e40:	c0 01       	movw	r24, r0
    2e42:	11 24       	eor	r1, r1
    2e44:	b8 01       	movw	r22, r16
    2e46:	83 53       	subi	r24, 0x33	; 51
    2e48:	97 4e       	sbci	r25, 0xE7	; 231
    2e4a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vListInsertEnd>
    2e4e:	df 91       	pop	r29
    2e50:	cf 91       	pop	r28
    2e52:	1f 91       	pop	r17
    2e54:	0f 91       	pop	r16
    2e56:	08 95       	ret

00002e58 <uxTaskResetEventItemValue>:
    2e58:	cf 92       	push	r12
    2e5a:	df 92       	push	r13
    2e5c:	ef 92       	push	r14
    2e5e:	ff 92       	push	r15
    2e60:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2e64:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2e68:	66 85       	ldd	r22, Z+14	; 0x0e
    2e6a:	77 85       	ldd	r23, Z+15	; 0x0f
    2e6c:	80 89       	ldd	r24, Z+16	; 0x10
    2e6e:	91 89       	ldd	r25, Z+17	; 0x11
    2e70:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2e74:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2e78:	a0 91 f9 18 	lds	r26, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2e7c:	b0 91 fa 18 	lds	r27, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2e80:	5a 96       	adiw	r26, 0x1a	; 26
    2e82:	2c 91       	ld	r18, X
    2e84:	c1 2c       	mov	r12, r1
    2e86:	d1 2c       	mov	r13, r1
    2e88:	76 01       	movw	r14, r12
    2e8a:	68 94       	set
    2e8c:	c2 f8       	bld	r12, 2
    2e8e:	c2 1a       	sub	r12, r18
    2e90:	d1 08       	sbc	r13, r1
    2e92:	e1 08       	sbc	r14, r1
    2e94:	f1 08       	sbc	r15, r1
    2e96:	c6 86       	std	Z+14, r12	; 0x0e
    2e98:	d7 86       	std	Z+15, r13	; 0x0f
    2e9a:	e0 8a       	std	Z+16, r14	; 0x10
    2e9c:	f1 8a       	std	Z+17, r15	; 0x11
    2e9e:	ff 90       	pop	r15
    2ea0:	ef 90       	pop	r14
    2ea2:	df 90       	pop	r13
    2ea4:	cf 90       	pop	r12
    2ea6:	08 95       	ret

00002ea8 <pvTaskIncrementMutexHeldCount>:
    2ea8:	80 91 f9 18 	lds	r24, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2eac:	90 91 fa 18 	lds	r25, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2eb0:	89 2b       	or	r24, r25
    2eb2:	39 f0       	breq	.+14     	; 0x2ec2 <pvTaskIncrementMutexHeldCount+0x1a>
    2eb4:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2eb8:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2ebc:	80 a5       	ldd	r24, Z+40	; 0x28
    2ebe:	8f 5f       	subi	r24, 0xFF	; 255
    2ec0:	80 a7       	std	Z+40, r24	; 0x28
    2ec2:	80 91 f9 18 	lds	r24, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2ec6:	90 91 fa 18 	lds	r25, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2eca:	08 95       	ret

00002ecc <xTaskNotifyWait>:
    2ecc:	4f 92       	push	r4
    2ece:	5f 92       	push	r5
    2ed0:	6f 92       	push	r6
    2ed2:	7f 92       	push	r7
    2ed4:	8f 92       	push	r8
    2ed6:	9f 92       	push	r9
    2ed8:	af 92       	push	r10
    2eda:	bf 92       	push	r11
    2edc:	cf 92       	push	r12
    2ede:	df 92       	push	r13
    2ee0:	ef 92       	push	r14
    2ee2:	ff 92       	push	r15
    2ee4:	0f 93       	push	r16
    2ee6:	1f 93       	push	r17
    2ee8:	49 01       	movw	r8, r18
    2eea:	5a 01       	movw	r10, r20
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	0f 92       	push	r0
    2ef2:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2ef6:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2efa:	27 a5       	ldd	r18, Z+47	; 0x2f
    2efc:	22 30       	cpi	r18, 0x02	; 2
    2efe:	39 f1       	breq	.+78     	; 0x2f4e <xTaskNotifyWait+0x82>
    2f00:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2f04:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2f08:	43 a4       	ldd	r4, Z+43	; 0x2b
    2f0a:	54 a4       	ldd	r5, Z+44	; 0x2c
    2f0c:	65 a4       	ldd	r6, Z+45	; 0x2d
    2f0e:	76 a4       	ldd	r7, Z+46	; 0x2e
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	80 95       	com	r24
    2f16:	90 95       	com	r25
    2f18:	a0 95       	com	r26
    2f1a:	b0 95       	com	r27
    2f1c:	84 21       	and	r24, r4
    2f1e:	95 21       	and	r25, r5
    2f20:	a6 21       	and	r26, r6
    2f22:	b7 21       	and	r27, r7
    2f24:	83 a7       	std	Z+43, r24	; 0x2b
    2f26:	94 a7       	std	Z+44, r25	; 0x2c
    2f28:	a5 a7       	std	Z+45, r26	; 0x2d
    2f2a:	b6 a7       	std	Z+46, r27	; 0x2e
    2f2c:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2f30:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	87 a7       	std	Z+47, r24	; 0x2f
    2f38:	c1 14       	cp	r12, r1
    2f3a:	d1 04       	cpc	r13, r1
    2f3c:	e1 04       	cpc	r14, r1
    2f3e:	f1 04       	cpc	r15, r1
    2f40:	31 f0       	breq	.+12     	; 0x2f4e <xTaskNotifyWait+0x82>
    2f42:	41 e0       	ldi	r20, 0x01	; 1
    2f44:	c7 01       	movw	r24, r14
    2f46:	b6 01       	movw	r22, r12
    2f48:	fc d8       	rcall	.-3592   	; 0x2142 <prvAddCurrentTaskToDelayedList>
    2f4a:	0e 94 13 09 	call	0x1226	; 0x1226 <vPortYield>
    2f4e:	0f 90       	pop	r0
    2f50:	0f be       	out	0x3f, r0	; 63
    2f52:	0f b6       	in	r0, 0x3f	; 63
    2f54:	f8 94       	cli
    2f56:	0f 92       	push	r0
    2f58:	01 15       	cp	r16, r1
    2f5a:	11 05       	cpc	r17, r1
    2f5c:	69 f0       	breq	.+26     	; 0x2f78 <xTaskNotifyWait+0xac>
    2f5e:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2f62:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2f66:	83 a5       	ldd	r24, Z+43	; 0x2b
    2f68:	94 a5       	ldd	r25, Z+44	; 0x2c
    2f6a:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2f6c:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2f6e:	f8 01       	movw	r30, r16
    2f70:	80 83       	st	Z, r24
    2f72:	91 83       	std	Z+1, r25	; 0x01
    2f74:	a2 83       	std	Z+2, r26	; 0x02
    2f76:	b3 83       	std	Z+3, r27	; 0x03
    2f78:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2f7c:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2f80:	87 a5       	ldd	r24, Z+47	; 0x2f
    2f82:	82 30       	cpi	r24, 0x02	; 2
    2f84:	b1 f4       	brne	.+44     	; 0x2fb2 <xTaskNotifyWait+0xe6>
    2f86:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2f8a:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2f8e:	83 a5       	ldd	r24, Z+43	; 0x2b
    2f90:	94 a5       	ldd	r25, Z+44	; 0x2c
    2f92:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2f94:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2f96:	80 94       	com	r8
    2f98:	90 94       	com	r9
    2f9a:	a0 94       	com	r10
    2f9c:	b0 94       	com	r11
    2f9e:	88 22       	and	r8, r24
    2fa0:	99 22       	and	r9, r25
    2fa2:	aa 22       	and	r10, r26
    2fa4:	bb 22       	and	r11, r27
    2fa6:	83 a6       	std	Z+43, r8	; 0x2b
    2fa8:	94 a6       	std	Z+44, r9	; 0x2c
    2faa:	a5 a6       	std	Z+45, r10	; 0x2d
    2fac:	b6 a6       	std	Z+46, r11	; 0x2e
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	01 c0       	rjmp	.+2      	; 0x2fb4 <xTaskNotifyWait+0xe8>
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    2fb8:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    2fbc:	17 a6       	std	Z+47, r1	; 0x2f
    2fbe:	0f 90       	pop	r0
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	1f 91       	pop	r17
    2fc4:	0f 91       	pop	r16
    2fc6:	ff 90       	pop	r15
    2fc8:	ef 90       	pop	r14
    2fca:	df 90       	pop	r13
    2fcc:	cf 90       	pop	r12
    2fce:	bf 90       	pop	r11
    2fd0:	af 90       	pop	r10
    2fd2:	9f 90       	pop	r9
    2fd4:	8f 90       	pop	r8
    2fd6:	7f 90       	pop	r7
    2fd8:	6f 90       	pop	r6
    2fda:	5f 90       	pop	r5
    2fdc:	4f 90       	pop	r4
    2fde:	08 95       	ret

00002fe0 <xTaskGenericNotify>:
    2fe0:	0f 93       	push	r16
    2fe2:	1f 93       	push	r17
    2fe4:	cf 93       	push	r28
    2fe6:	df 93       	push	r29
    2fe8:	fc 01       	movw	r30, r24
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	0f 92       	push	r0
    2ff0:	01 15       	cp	r16, r1
    2ff2:	11 05       	cpc	r17, r1
    2ff4:	49 f0       	breq	.+18     	; 0x3008 <xTaskGenericNotify+0x28>
    2ff6:	83 a5       	ldd	r24, Z+43	; 0x2b
    2ff8:	94 a5       	ldd	r25, Z+44	; 0x2c
    2ffa:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2ffc:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2ffe:	e8 01       	movw	r28, r16
    3000:	88 83       	st	Y, r24
    3002:	99 83       	std	Y+1, r25	; 0x01
    3004:	aa 83       	std	Y+2, r26	; 0x02
    3006:	bb 83       	std	Y+3, r27	; 0x03
    3008:	87 a5       	ldd	r24, Z+47	; 0x2f
    300a:	92 e0       	ldi	r25, 0x02	; 2
    300c:	97 a7       	std	Z+47, r25	; 0x2f
    300e:	22 30       	cpi	r18, 0x02	; 2
    3010:	b1 f0       	breq	.+44     	; 0x303e <xTaskGenericNotify+0x5e>
    3012:	18 f4       	brcc	.+6      	; 0x301a <xTaskGenericNotify+0x3a>
    3014:	21 30       	cpi	r18, 0x01	; 1
    3016:	31 f0       	breq	.+12     	; 0x3024 <xTaskGenericNotify+0x44>
    3018:	2a c0       	rjmp	.+84     	; 0x306e <xTaskGenericNotify+0x8e>
    301a:	23 30       	cpi	r18, 0x03	; 3
    301c:	e9 f0       	breq	.+58     	; 0x3058 <xTaskGenericNotify+0x78>
    301e:	24 30       	cpi	r18, 0x04	; 4
    3020:	01 f1       	breq	.+64     	; 0x3062 <xTaskGenericNotify+0x82>
    3022:	25 c0       	rjmp	.+74     	; 0x306e <xTaskGenericNotify+0x8e>
    3024:	03 a5       	ldd	r16, Z+43	; 0x2b
    3026:	14 a5       	ldd	r17, Z+44	; 0x2c
    3028:	25 a5       	ldd	r18, Z+45	; 0x2d
    302a:	36 a5       	ldd	r19, Z+46	; 0x2e
    302c:	40 2b       	or	r20, r16
    302e:	51 2b       	or	r21, r17
    3030:	62 2b       	or	r22, r18
    3032:	73 2b       	or	r23, r19
    3034:	43 a7       	std	Z+43, r20	; 0x2b
    3036:	54 a7       	std	Z+44, r21	; 0x2c
    3038:	65 a7       	std	Z+45, r22	; 0x2d
    303a:	76 a7       	std	Z+46, r23	; 0x2e
    303c:	18 c0       	rjmp	.+48     	; 0x306e <xTaskGenericNotify+0x8e>
    303e:	43 a5       	ldd	r20, Z+43	; 0x2b
    3040:	54 a5       	ldd	r21, Z+44	; 0x2c
    3042:	65 a5       	ldd	r22, Z+45	; 0x2d
    3044:	76 a5       	ldd	r23, Z+46	; 0x2e
    3046:	4f 5f       	subi	r20, 0xFF	; 255
    3048:	5f 4f       	sbci	r21, 0xFF	; 255
    304a:	6f 4f       	sbci	r22, 0xFF	; 255
    304c:	7f 4f       	sbci	r23, 0xFF	; 255
    304e:	43 a7       	std	Z+43, r20	; 0x2b
    3050:	54 a7       	std	Z+44, r21	; 0x2c
    3052:	65 a7       	std	Z+45, r22	; 0x2d
    3054:	76 a7       	std	Z+46, r23	; 0x2e
    3056:	0b c0       	rjmp	.+22     	; 0x306e <xTaskGenericNotify+0x8e>
    3058:	43 a7       	std	Z+43, r20	; 0x2b
    305a:	54 a7       	std	Z+44, r21	; 0x2c
    305c:	65 a7       	std	Z+45, r22	; 0x2d
    305e:	76 a7       	std	Z+46, r23	; 0x2e
    3060:	06 c0       	rjmp	.+12     	; 0x306e <xTaskGenericNotify+0x8e>
    3062:	82 30       	cpi	r24, 0x02	; 2
    3064:	49 f1       	breq	.+82     	; 0x30b8 <xTaskGenericNotify+0xd8>
    3066:	43 a7       	std	Z+43, r20	; 0x2b
    3068:	54 a7       	std	Z+44, r21	; 0x2c
    306a:	65 a7       	std	Z+45, r22	; 0x2d
    306c:	76 a7       	std	Z+46, r23	; 0x2e
    306e:	81 30       	cpi	r24, 0x01	; 1
    3070:	29 f5       	brne	.+74     	; 0x30bc <xTaskGenericNotify+0xdc>
    3072:	ef 01       	movw	r28, r30
    3074:	8f 01       	movw	r16, r30
    3076:	0e 5f       	subi	r16, 0xFE	; 254
    3078:	1f 4f       	sbci	r17, 0xFF	; 255
    307a:	c8 01       	movw	r24, r16
    307c:	0e 94 3e 08 	call	0x107c	; 0x107c <uxListRemove>
    3080:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3082:	90 91 8b 18 	lds	r25, 0x188B	; 0x80188b <uxTopReadyPriority>
    3086:	98 17       	cp	r25, r24
    3088:	10 f4       	brcc	.+4      	; 0x308e <xTaskGenericNotify+0xae>
    308a:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <uxTopReadyPriority>
    308e:	2b e0       	ldi	r18, 0x0B	; 11
    3090:	82 9f       	mul	r24, r18
    3092:	c0 01       	movw	r24, r0
    3094:	11 24       	eor	r1, r1
    3096:	b8 01       	movw	r22, r16
    3098:	83 53       	subi	r24, 0x33	; 51
    309a:	97 4e       	sbci	r25, 0xE7	; 231
    309c:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vListInsertEnd>
    30a0:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    30a4:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    30a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    30ac:	89 17       	cp	r24, r25
    30ae:	40 f4       	brcc	.+16     	; 0x30c0 <xTaskGenericNotify+0xe0>
    30b0:	0e 94 13 09 	call	0x1226	; 0x1226 <vPortYield>
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	05 c0       	rjmp	.+10     	; 0x30c2 <xTaskGenericNotify+0xe2>
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	03 c0       	rjmp	.+6      	; 0x30c2 <xTaskGenericNotify+0xe2>
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	01 c0       	rjmp	.+2      	; 0x30c2 <xTaskGenericNotify+0xe2>
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	0f 90       	pop	r0
    30c4:	0f be       	out	0x3f, r0	; 63
    30c6:	df 91       	pop	r29
    30c8:	cf 91       	pop	r28
    30ca:	1f 91       	pop	r17
    30cc:	0f 91       	pop	r16
    30ce:	08 95       	ret

000030d0 <xTaskGenericNotifyFromISR>:
    30d0:	ef 92       	push	r14
    30d2:	ff 92       	push	r15
    30d4:	0f 93       	push	r16
    30d6:	1f 93       	push	r17
    30d8:	cf 93       	push	r28
    30da:	df 93       	push	r29
    30dc:	fc 01       	movw	r30, r24
    30de:	01 15       	cp	r16, r1
    30e0:	11 05       	cpc	r17, r1
    30e2:	49 f0       	breq	.+18     	; 0x30f6 <xTaskGenericNotifyFromISR+0x26>
    30e4:	83 a5       	ldd	r24, Z+43	; 0x2b
    30e6:	94 a5       	ldd	r25, Z+44	; 0x2c
    30e8:	a5 a5       	ldd	r26, Z+45	; 0x2d
    30ea:	b6 a5       	ldd	r27, Z+46	; 0x2e
    30ec:	e8 01       	movw	r28, r16
    30ee:	88 83       	st	Y, r24
    30f0:	99 83       	std	Y+1, r25	; 0x01
    30f2:	aa 83       	std	Y+2, r26	; 0x02
    30f4:	bb 83       	std	Y+3, r27	; 0x03
    30f6:	87 a5       	ldd	r24, Z+47	; 0x2f
    30f8:	92 e0       	ldi	r25, 0x02	; 2
    30fa:	97 a7       	std	Z+47, r25	; 0x2f
    30fc:	22 30       	cpi	r18, 0x02	; 2
    30fe:	b1 f0       	breq	.+44     	; 0x312c <xTaskGenericNotifyFromISR+0x5c>
    3100:	18 f4       	brcc	.+6      	; 0x3108 <xTaskGenericNotifyFromISR+0x38>
    3102:	21 30       	cpi	r18, 0x01	; 1
    3104:	31 f0       	breq	.+12     	; 0x3112 <xTaskGenericNotifyFromISR+0x42>
    3106:	2a c0       	rjmp	.+84     	; 0x315c <xTaskGenericNotifyFromISR+0x8c>
    3108:	23 30       	cpi	r18, 0x03	; 3
    310a:	e9 f0       	breq	.+58     	; 0x3146 <xTaskGenericNotifyFromISR+0x76>
    310c:	24 30       	cpi	r18, 0x04	; 4
    310e:	01 f1       	breq	.+64     	; 0x3150 <xTaskGenericNotifyFromISR+0x80>
    3110:	25 c0       	rjmp	.+74     	; 0x315c <xTaskGenericNotifyFromISR+0x8c>
    3112:	03 a5       	ldd	r16, Z+43	; 0x2b
    3114:	14 a5       	ldd	r17, Z+44	; 0x2c
    3116:	25 a5       	ldd	r18, Z+45	; 0x2d
    3118:	36 a5       	ldd	r19, Z+46	; 0x2e
    311a:	40 2b       	or	r20, r16
    311c:	51 2b       	or	r21, r17
    311e:	62 2b       	or	r22, r18
    3120:	73 2b       	or	r23, r19
    3122:	43 a7       	std	Z+43, r20	; 0x2b
    3124:	54 a7       	std	Z+44, r21	; 0x2c
    3126:	65 a7       	std	Z+45, r22	; 0x2d
    3128:	76 a7       	std	Z+46, r23	; 0x2e
    312a:	18 c0       	rjmp	.+48     	; 0x315c <xTaskGenericNotifyFromISR+0x8c>
    312c:	43 a5       	ldd	r20, Z+43	; 0x2b
    312e:	54 a5       	ldd	r21, Z+44	; 0x2c
    3130:	65 a5       	ldd	r22, Z+45	; 0x2d
    3132:	76 a5       	ldd	r23, Z+46	; 0x2e
    3134:	4f 5f       	subi	r20, 0xFF	; 255
    3136:	5f 4f       	sbci	r21, 0xFF	; 255
    3138:	6f 4f       	sbci	r22, 0xFF	; 255
    313a:	7f 4f       	sbci	r23, 0xFF	; 255
    313c:	43 a7       	std	Z+43, r20	; 0x2b
    313e:	54 a7       	std	Z+44, r21	; 0x2c
    3140:	65 a7       	std	Z+45, r22	; 0x2d
    3142:	76 a7       	std	Z+46, r23	; 0x2e
    3144:	0b c0       	rjmp	.+22     	; 0x315c <xTaskGenericNotifyFromISR+0x8c>
    3146:	43 a7       	std	Z+43, r20	; 0x2b
    3148:	54 a7       	std	Z+44, r21	; 0x2c
    314a:	65 a7       	std	Z+45, r22	; 0x2d
    314c:	76 a7       	std	Z+46, r23	; 0x2e
    314e:	06 c0       	rjmp	.+12     	; 0x315c <xTaskGenericNotifyFromISR+0x8c>
    3150:	82 30       	cpi	r24, 0x02	; 2
    3152:	d9 f1       	breq	.+118    	; 0x31ca <xTaskGenericNotifyFromISR+0xfa>
    3154:	43 a7       	std	Z+43, r20	; 0x2b
    3156:	54 a7       	std	Z+44, r21	; 0x2c
    3158:	65 a7       	std	Z+45, r22	; 0x2d
    315a:	76 a7       	std	Z+46, r23	; 0x2e
    315c:	81 30       	cpi	r24, 0x01	; 1
    315e:	b9 f5       	brne	.+110    	; 0x31ce <xTaskGenericNotifyFromISR+0xfe>
    3160:	ef 01       	movw	r28, r30
    3162:	80 91 7f 18 	lds	r24, 0x187F	; 0x80187f <uxSchedulerSuspended>
    3166:	81 11       	cpse	r24, r1
    3168:	17 c0       	rjmp	.+46     	; 0x3198 <xTaskGenericNotifyFromISR+0xc8>
    316a:	8f 01       	movw	r16, r30
    316c:	0e 5f       	subi	r16, 0xFE	; 254
    316e:	1f 4f       	sbci	r17, 0xFF	; 255
    3170:	c8 01       	movw	r24, r16
    3172:	0e 94 3e 08 	call	0x107c	; 0x107c <uxListRemove>
    3176:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3178:	90 91 8b 18 	lds	r25, 0x188B	; 0x80188b <uxTopReadyPriority>
    317c:	98 17       	cp	r25, r24
    317e:	10 f4       	brcc	.+4      	; 0x3184 <xTaskGenericNotifyFromISR+0xb4>
    3180:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <uxTopReadyPriority>
    3184:	eb e0       	ldi	r30, 0x0B	; 11
    3186:	8e 9f       	mul	r24, r30
    3188:	c0 01       	movw	r24, r0
    318a:	11 24       	eor	r1, r1
    318c:	b8 01       	movw	r22, r16
    318e:	83 53       	subi	r24, 0x33	; 51
    3190:	97 4e       	sbci	r25, 0xE7	; 231
    3192:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vListInsertEnd>
    3196:	07 c0       	rjmp	.+14     	; 0x31a6 <xTaskGenericNotifyFromISR+0xd6>
    3198:	bf 01       	movw	r22, r30
    319a:	62 5f       	subi	r22, 0xF2	; 242
    319c:	7f 4f       	sbci	r23, 0xFF	; 255
    319e:	88 ea       	ldi	r24, 0xA8	; 168
    31a0:	98 e1       	ldi	r25, 0x18	; 24
    31a2:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <vListInsertEnd>
    31a6:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    31aa:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>
    31ae:	9a 8d       	ldd	r25, Y+26	; 0x1a
    31b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    31b2:	89 17       	cp	r24, r25
    31b4:	70 f4       	brcc	.+28     	; 0x31d2 <xTaskGenericNotifyFromISR+0x102>
    31b6:	e1 14       	cp	r14, r1
    31b8:	f1 04       	cpc	r15, r1
    31ba:	19 f0       	breq	.+6      	; 0x31c2 <xTaskGenericNotifyFromISR+0xf2>
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	e7 01       	movw	r28, r14
    31c0:	88 83       	st	Y, r24
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	80 93 88 18 	sts	0x1888, r24	; 0x801888 <xYieldPending>
    31c8:	05 c0       	rjmp	.+10     	; 0x31d4 <xTaskGenericNotifyFromISR+0x104>
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	03 c0       	rjmp	.+6      	; 0x31d4 <xTaskGenericNotifyFromISR+0x104>
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	01 c0       	rjmp	.+2      	; 0x31d4 <xTaskGenericNotifyFromISR+0x104>
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	df 91       	pop	r29
    31d6:	cf 91       	pop	r28
    31d8:	1f 91       	pop	r17
    31da:	0f 91       	pop	r16
    31dc:	ff 90       	pop	r15
    31de:	ef 90       	pop	r14
    31e0:	08 95       	ret

000031e2 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    31e2:	00 97       	sbiw	r24, 0x00	; 0
    31e4:	21 f4       	brne	.+8      	; 0x31ee <xTaskNotifyStateClear+0xc>
    31e6:	80 91 f9 18 	lds	r24, 0x18F9	; 0x8018f9 <pxCurrentTCB>
    31ea:	90 91 fa 18 	lds	r25, 0x18FA	; 0x8018fa <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    31ee:	0f b6       	in	r0, 0x3f	; 63
    31f0:	f8 94       	cli
    31f2:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    31f4:	fc 01       	movw	r30, r24
    31f6:	27 a5       	ldd	r18, Z+47	; 0x2f
    31f8:	22 30       	cpi	r18, 0x02	; 2
    31fa:	19 f4       	brne	.+6      	; 0x3202 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    31fc:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	01 c0       	rjmp	.+2      	; 0x3204 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    3202:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3204:	0f 90       	pop	r0
    3206:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3208:	08 95       	ret

0000320a <prvInsertTimerInActiveList>:
    320a:	cf 92       	push	r12
    320c:	df 92       	push	r13
    320e:	ef 92       	push	r14
    3210:	ff 92       	push	r15
    3212:	0f 93       	push	r16
    3214:	1f 93       	push	r17
    3216:	fc 01       	movw	r30, r24
    3218:	42 83       	std	Z+2, r20	; 0x02
    321a:	53 83       	std	Z+3, r21	; 0x03
    321c:	64 83       	std	Z+4, r22	; 0x04
    321e:	75 83       	std	Z+5, r23	; 0x05
    3220:	93 87       	std	Z+11, r25	; 0x0b
    3222:	82 87       	std	Z+10, r24	; 0x0a
    3224:	04 17       	cp	r16, r20
    3226:	15 07       	cpc	r17, r21
    3228:	26 07       	cpc	r18, r22
    322a:	37 07       	cpc	r19, r23
    322c:	c0 f0       	brcs	.+48     	; 0x325e <prvInsertTimerInActiveList+0x54>
    322e:	0c 19       	sub	r16, r12
    3230:	1d 09       	sbc	r17, r13
    3232:	2e 09       	sbc	r18, r14
    3234:	3f 09       	sbc	r19, r15
    3236:	86 85       	ldd	r24, Z+14	; 0x0e
    3238:	97 85       	ldd	r25, Z+15	; 0x0f
    323a:	a0 89       	ldd	r26, Z+16	; 0x10
    323c:	b1 89       	ldd	r27, Z+17	; 0x11
    323e:	08 17       	cp	r16, r24
    3240:	19 07       	cpc	r17, r25
    3242:	2a 07       	cpc	r18, r26
    3244:	3b 07       	cpc	r19, r27
    3246:	00 f5       	brcc	.+64     	; 0x3288 <prvInsertTimerInActiveList+0x7e>
    3248:	bf 01       	movw	r22, r30
    324a:	6e 5f       	subi	r22, 0xFE	; 254
    324c:	7f 4f       	sbci	r23, 0xFF	; 255
    324e:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <pxOverflowTimerList>
    3252:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <pxOverflowTimerList+0x1>
    3256:	0e 94 01 08 	call	0x1002	; 0x1002 <vListInsert>
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	18 c0       	rjmp	.+48     	; 0x328e <prvInsertTimerInActiveList+0x84>
    325e:	0c 15       	cp	r16, r12
    3260:	1d 05       	cpc	r17, r13
    3262:	2e 05       	cpc	r18, r14
    3264:	3f 05       	cpc	r19, r15
    3266:	28 f4       	brcc	.+10     	; 0x3272 <prvInsertTimerInActiveList+0x68>
    3268:	4c 15       	cp	r20, r12
    326a:	5d 05       	cpc	r21, r13
    326c:	6e 05       	cpc	r22, r14
    326e:	7f 05       	cpc	r23, r15
    3270:	68 f4       	brcc	.+26     	; 0x328c <prvInsertTimerInActiveList+0x82>
    3272:	bf 01       	movw	r22, r30
    3274:	6e 5f       	subi	r22, 0xFE	; 254
    3276:	7f 4f       	sbci	r23, 0xFF	; 255
    3278:	80 91 05 19 	lds	r24, 0x1905	; 0x801905 <pxCurrentTimerList>
    327c:	90 91 06 19 	lds	r25, 0x1906	; 0x801906 <pxCurrentTimerList+0x1>
    3280:	0e 94 01 08 	call	0x1002	; 0x1002 <vListInsert>
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	03 c0       	rjmp	.+6      	; 0x328e <prvInsertTimerInActiveList+0x84>
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	01 c0       	rjmp	.+2      	; 0x328e <prvInsertTimerInActiveList+0x84>
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	1f 91       	pop	r17
    3290:	0f 91       	pop	r16
    3292:	ff 90       	pop	r15
    3294:	ef 90       	pop	r14
    3296:	df 90       	pop	r13
    3298:	cf 90       	pop	r12
    329a:	08 95       	ret

0000329c <prvCheckForValidListAndQueue>:
    329c:	0f b6       	in	r0, 0x3f	; 63
    329e:	f8 94       	cli
    32a0:	0f 92       	push	r0
    32a2:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <xTimerQueue>
    32a6:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <xTimerQueue+0x1>
    32aa:	89 2b       	or	r24, r25
    32ac:	e9 f4       	brne	.+58     	; 0x32e8 <prvCheckForValidListAndQueue+0x4c>
    32ae:	82 e1       	ldi	r24, 0x12	; 18
    32b0:	99 e1       	ldi	r25, 0x19	; 25
    32b2:	0e 94 cb 07 	call	0xf96	; 0xf96 <vListInitialise>
    32b6:	87 e0       	ldi	r24, 0x07	; 7
    32b8:	99 e1       	ldi	r25, 0x19	; 25
    32ba:	0e 94 cb 07 	call	0xf96	; 0xf96 <vListInitialise>
    32be:	82 e1       	ldi	r24, 0x12	; 18
    32c0:	99 e1       	ldi	r25, 0x19	; 25
    32c2:	90 93 06 19 	sts	0x1906, r25	; 0x801906 <pxCurrentTimerList+0x1>
    32c6:	80 93 05 19 	sts	0x1905, r24	; 0x801905 <pxCurrentTimerList>
    32ca:	87 e0       	ldi	r24, 0x07	; 7
    32cc:	99 e1       	ldi	r25, 0x19	; 25
    32ce:	90 93 04 19 	sts	0x1904, r25	; 0x801904 <pxOverflowTimerList+0x1>
    32d2:	80 93 03 19 	sts	0x1903, r24	; 0x801903 <pxOverflowTimerList>
    32d6:	40 e0       	ldi	r20, 0x00	; 0
    32d8:	67 e0       	ldi	r22, 0x07	; 7
    32da:	8a e0       	ldi	r24, 0x0A	; 10
    32dc:	0e 94 ef 0a 	call	0x15de	; 0x15de <xQueueGenericCreate>
    32e0:	90 93 02 19 	sts	0x1902, r25	; 0x801902 <xTimerQueue+0x1>
    32e4:	80 93 01 19 	sts	0x1901, r24	; 0x801901 <xTimerQueue>
    32e8:	0f 90       	pop	r0
    32ea:	0f be       	out	0x3f, r0	; 63
    32ec:	08 95       	ret

000032ee <xTimerCreateTimerTask>:
    32ee:	ef 92       	push	r14
    32f0:	ff 92       	push	r15
    32f2:	0f 93       	push	r16
    32f4:	d3 df       	rcall	.-90     	; 0x329c <prvCheckForValidListAndQueue>
    32f6:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <xTimerQueue>
    32fa:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <xTimerQueue+0x1>
    32fe:	89 2b       	or	r24, r25
    3300:	91 f0       	breq	.+36     	; 0x3326 <xTimerCreateTimerTask+0x38>
    3302:	0f 2e       	mov	r0, r31
    3304:	ff ef       	ldi	r31, 0xFF	; 255
    3306:	ef 2e       	mov	r14, r31
    3308:	f8 e1       	ldi	r31, 0x18	; 24
    330a:	ff 2e       	mov	r15, r31
    330c:	f0 2d       	mov	r31, r0
    330e:	03 e0       	ldi	r16, 0x03	; 3
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	45 e5       	ldi	r20, 0x55	; 85
    3316:	50 e0       	ldi	r21, 0x00	; 0
    3318:	62 e2       	ldi	r22, 0x22	; 34
    331a:	74 e0       	ldi	r23, 0x04	; 4
    331c:	84 e0       	ldi	r24, 0x04	; 4
    331e:	91 e0       	ldi	r25, 0x01	; 1
    3320:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskCreate>
    3324:	01 c0       	rjmp	.+2      	; 0x3328 <xTimerCreateTimerTask+0x3a>
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	0f 91       	pop	r16
    332a:	ff 90       	pop	r15
    332c:	ef 90       	pop	r14
    332e:	08 95       	ret

00003330 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3330:	8f 92       	push	r8
    3332:	9f 92       	push	r9
    3334:	af 92       	push	r10
    3336:	bf 92       	push	r11
    3338:	cf 92       	push	r12
    333a:	df 92       	push	r13
    333c:	ef 92       	push	r14
    333e:	ff 92       	push	r15
    3340:	0f 93       	push	r16
    3342:	1f 93       	push	r17
    3344:	cf 93       	push	r28
    3346:	df 93       	push	r29
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
    334c:	27 97       	sbiw	r28, 0x07	; 7
    334e:	0f b6       	in	r0, 0x3f	; 63
    3350:	f8 94       	cli
    3352:	de bf       	out	0x3e, r29	; 62
    3354:	0f be       	out	0x3f, r0	; 63
    3356:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    3358:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <xTimerQueue>
    335c:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <xTimerQueue+0x1>
    3360:	30 97       	sbiw	r30, 0x00	; 0
    3362:	81 f1       	breq	.+96     	; 0x33c4 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    3364:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3366:	2a 83       	std	Y+2, r18	; 0x02
    3368:	3b 83       	std	Y+3, r19	; 0x03
    336a:	4c 83       	std	Y+4, r20	; 0x04
    336c:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    336e:	9f 83       	std	Y+7, r25	; 0x07
    3370:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3372:	66 30       	cpi	r22, 0x06	; 6
    3374:	f4 f4       	brge	.+60     	; 0x33b2 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3376:	68 dc       	rcall	.-1840   	; 0x2c48 <xTaskGetSchedulerState>
    3378:	82 30       	cpi	r24, 0x02	; 2
    337a:	69 f4       	brne	.+26     	; 0x3396 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    337c:	00 e0       	ldi	r16, 0x00	; 0
    337e:	a7 01       	movw	r20, r14
    3380:	96 01       	movw	r18, r12
    3382:	be 01       	movw	r22, r28
    3384:	6f 5f       	subi	r22, 0xFF	; 255
    3386:	7f 4f       	sbci	r23, 0xFF	; 255
    3388:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <xTimerQueue>
    338c:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <xTimerQueue+0x1>
    3390:	0e 94 1d 0b 	call	0x163a	; 0x163a <xQueueGenericSend>
    3394:	18 c0       	rjmp	.+48     	; 0x33c6 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3396:	00 e0       	ldi	r16, 0x00	; 0
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	a9 01       	movw	r20, r18
    339e:	be 01       	movw	r22, r28
    33a0:	6f 5f       	subi	r22, 0xFF	; 255
    33a2:	7f 4f       	sbci	r23, 0xFF	; 255
    33a4:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <xTimerQueue>
    33a8:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <xTimerQueue+0x1>
    33ac:	0e 94 1d 0b 	call	0x163a	; 0x163a <xQueueGenericSend>
    33b0:	0a c0       	rjmp	.+20     	; 0x33c6 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	a8 01       	movw	r20, r16
    33b6:	be 01       	movw	r22, r28
    33b8:	6f 5f       	subi	r22, 0xFF	; 255
    33ba:	7f 4f       	sbci	r23, 0xFF	; 255
    33bc:	cf 01       	movw	r24, r30
    33be:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <xQueueGenericSendFromISR>
    33c2:	01 c0       	rjmp	.+2      	; 0x33c6 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    33c6:	27 96       	adiw	r28, 0x07	; 7
    33c8:	0f b6       	in	r0, 0x3f	; 63
    33ca:	f8 94       	cli
    33cc:	de bf       	out	0x3e, r29	; 62
    33ce:	0f be       	out	0x3f, r0	; 63
    33d0:	cd bf       	out	0x3d, r28	; 61
    33d2:	df 91       	pop	r29
    33d4:	cf 91       	pop	r28
    33d6:	1f 91       	pop	r17
    33d8:	0f 91       	pop	r16
    33da:	ff 90       	pop	r15
    33dc:	ef 90       	pop	r14
    33de:	df 90       	pop	r13
    33e0:	cf 90       	pop	r12
    33e2:	bf 90       	pop	r11
    33e4:	af 90       	pop	r10
    33e6:	9f 90       	pop	r9
    33e8:	8f 90       	pop	r8
    33ea:	08 95       	ret

000033ec <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    33ec:	2f 92       	push	r2
    33ee:	3f 92       	push	r3
    33f0:	4f 92       	push	r4
    33f2:	5f 92       	push	r5
    33f4:	6f 92       	push	r6
    33f6:	7f 92       	push	r7
    33f8:	8f 92       	push	r8
    33fa:	9f 92       	push	r9
    33fc:	af 92       	push	r10
    33fe:	bf 92       	push	r11
    3400:	cf 92       	push	r12
    3402:	df 92       	push	r13
    3404:	ef 92       	push	r14
    3406:	ff 92       	push	r15
    3408:	0f 93       	push	r16
    340a:	1f 93       	push	r17
    340c:	cf 93       	push	r28
    340e:	df 93       	push	r29
    3410:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3412:	6f d8       	rcall	.-3874   	; 0x24f2 <xTaskGetTickCount>
    3414:	2b 01       	movw	r4, r22
    3416:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3418:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <xLastTime.2432>
    341c:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <xLastTime.2432+0x1>
    3420:	a0 91 fd 18 	lds	r26, 0x18FD	; 0x8018fd <xLastTime.2432+0x2>
    3424:	b0 91 fe 18 	lds	r27, 0x18FE	; 0x8018fe <xLastTime.2432+0x3>
    3428:	48 16       	cp	r4, r24
    342a:	59 06       	cpc	r5, r25
    342c:	6a 06       	cpc	r6, r26
    342e:	7b 06       	cpc	r7, r27
    3430:	08 f0       	brcs	.+2      	; 0x3434 <prvSampleTimeNow+0x48>
    3432:	53 c0       	rjmp	.+166    	; 0x34da <prvSampleTimeNow+0xee>
    3434:	3b c0       	rjmp	.+118    	; 0x34ac <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3436:	07 80       	ldd	r0, Z+7	; 0x07
    3438:	f0 85       	ldd	r31, Z+8	; 0x08
    343a:	e0 2d       	mov	r30, r0
    343c:	80 80       	ld	r8, Z
    343e:	91 80       	ldd	r9, Z+1	; 0x01
    3440:	a2 80       	ldd	r10, Z+2	; 0x02
    3442:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3444:	c0 85       	ldd	r28, Z+8	; 0x08
    3446:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3448:	8e 01       	movw	r16, r28
    344a:	0e 5f       	subi	r16, 0xFE	; 254
    344c:	1f 4f       	sbci	r17, 0xFF	; 255
    344e:	c8 01       	movw	r24, r16
    3450:	0e 94 3e 08 	call	0x107c	; 0x107c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3454:	ec 89       	ldd	r30, Y+20	; 0x14
    3456:	fd 89       	ldd	r31, Y+21	; 0x15
    3458:	ce 01       	movw	r24, r28
    345a:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    345c:	8f 89       	ldd	r24, Y+23	; 0x17
    345e:	82 ff       	sbrs	r24, 2
    3460:	25 c0       	rjmp	.+74     	; 0x34ac <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3462:	8e 85       	ldd	r24, Y+14	; 0x0e
    3464:	9f 85       	ldd	r25, Y+15	; 0x0f
    3466:	a8 89       	ldd	r26, Y+16	; 0x10
    3468:	b9 89       	ldd	r27, Y+17	; 0x11
    346a:	88 0d       	add	r24, r8
    346c:	99 1d       	adc	r25, r9
    346e:	aa 1d       	adc	r26, r10
    3470:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    3472:	88 16       	cp	r8, r24
    3474:	99 06       	cpc	r9, r25
    3476:	aa 06       	cpc	r10, r26
    3478:	bb 06       	cpc	r11, r27
    347a:	70 f4       	brcc	.+28     	; 0x3498 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    347c:	8a 83       	std	Y+2, r24	; 0x02
    347e:	9b 83       	std	Y+3, r25	; 0x03
    3480:	ac 83       	std	Y+4, r26	; 0x04
    3482:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3484:	db 87       	std	Y+11, r29	; 0x0b
    3486:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3488:	b8 01       	movw	r22, r16
    348a:	80 91 05 19 	lds	r24, 0x1905	; 0x801905 <pxCurrentTimerList>
    348e:	90 91 06 19 	lds	r25, 0x1906	; 0x801906 <pxCurrentTimerList+0x1>
    3492:	0e 94 01 08 	call	0x1002	; 0x1002 <vListInsert>
    3496:	0a c0       	rjmp	.+20     	; 0x34ac <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3498:	c1 2c       	mov	r12, r1
    349a:	d1 2c       	mov	r13, r1
    349c:	76 01       	movw	r14, r12
    349e:	00 e0       	ldi	r16, 0x00	; 0
    34a0:	10 e0       	ldi	r17, 0x00	; 0
    34a2:	a5 01       	movw	r20, r10
    34a4:	94 01       	movw	r18, r8
    34a6:	60 e0       	ldi	r22, 0x00	; 0
    34a8:	ce 01       	movw	r24, r28
    34aa:	42 df       	rcall	.-380    	; 0x3330 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    34ac:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <pxCurrentTimerList>
    34b0:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <pxCurrentTimerList+0x1>
    34b4:	80 81       	ld	r24, Z
    34b6:	81 11       	cpse	r24, r1
    34b8:	be cf       	rjmp	.-132    	; 0x3436 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    34ba:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <pxOverflowTimerList>
    34be:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <pxOverflowTimerList+0x1>
    34c2:	90 93 06 19 	sts	0x1906, r25	; 0x801906 <pxCurrentTimerList+0x1>
    34c6:	80 93 05 19 	sts	0x1905, r24	; 0x801905 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    34ca:	f0 93 04 19 	sts	0x1904, r31	; 0x801904 <pxOverflowTimerList+0x1>
    34ce:	e0 93 03 19 	sts	0x1903, r30	; 0x801903 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	f1 01       	movw	r30, r2
    34d6:	80 83       	st	Z, r24
    34d8:	02 c0       	rjmp	.+4      	; 0x34de <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    34da:	f1 01       	movw	r30, r2
    34dc:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    34de:	40 92 fb 18 	sts	0x18FB, r4	; 0x8018fb <xLastTime.2432>
    34e2:	50 92 fc 18 	sts	0x18FC, r5	; 0x8018fc <xLastTime.2432+0x1>
    34e6:	60 92 fd 18 	sts	0x18FD, r6	; 0x8018fd <xLastTime.2432+0x2>
    34ea:	70 92 fe 18 	sts	0x18FE, r7	; 0x8018fe <xLastTime.2432+0x3>

    return xTimeNow;
}
    34ee:	c3 01       	movw	r24, r6
    34f0:	b2 01       	movw	r22, r4
    34f2:	df 91       	pop	r29
    34f4:	cf 91       	pop	r28
    34f6:	1f 91       	pop	r17
    34f8:	0f 91       	pop	r16
    34fa:	ff 90       	pop	r15
    34fc:	ef 90       	pop	r14
    34fe:	df 90       	pop	r13
    3500:	cf 90       	pop	r12
    3502:	bf 90       	pop	r11
    3504:	af 90       	pop	r10
    3506:	9f 90       	pop	r9
    3508:	8f 90       	pop	r8
    350a:	7f 90       	pop	r7
    350c:	6f 90       	pop	r6
    350e:	5f 90       	pop	r5
    3510:	4f 90       	pop	r4
    3512:	3f 90       	pop	r3
    3514:	2f 90       	pop	r2
    3516:	08 95       	ret

00003518 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3518:	08 95       	ret

0000351a <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    351a:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    351c:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    351e:	2f ef       	ldi	r18, 0xFF	; 255
    3520:	80 e7       	ldi	r24, 0x70	; 112
    3522:	92 e0       	ldi	r25, 0x02	; 2
    3524:	21 50       	subi	r18, 0x01	; 1
    3526:	80 40       	sbci	r24, 0x00	; 0
    3528:	90 40       	sbci	r25, 0x00	; 0
    352a:	e1 f7       	brne	.-8      	; 0x3524 <vApplicationMallocFailedHook+0xa>
    352c:	00 c0       	rjmp	.+0      	; 0x352e <vApplicationMallocFailedHook+0x14>
    352e:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3530:	1f 9a       	sbi	0x03, 7	; 3
    3532:	f5 cf       	rjmp	.-22     	; 0x351e <vApplicationMallocFailedHook+0x4>

00003534 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3534:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3536:	2f 9a       	sbi	0x05, 7	; 5
    3538:	2f ef       	ldi	r18, 0xFF	; 255
    353a:	87 ea       	ldi	r24, 0xA7	; 167
    353c:	91 e6       	ldi	r25, 0x61	; 97
    353e:	21 50       	subi	r18, 0x01	; 1
    3540:	80 40       	sbci	r24, 0x00	; 0
    3542:	90 40       	sbci	r25, 0x00	; 0
    3544:	e1 f7       	brne	.-8      	; 0x353e <vApplicationStackOverflowHook+0xa>
    3546:	00 c0       	rjmp	.+0      	; 0x3548 <vApplicationStackOverflowHook+0x14>
    3548:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    354a:	1f 9a       	sbi	0x03, 7	; 3
    354c:	f5 cf       	rjmp	.-22     	; 0x3538 <vApplicationStackOverflowHook+0x4>

0000354e <hum_temp_task>:
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, Hum_temp_measure_bit, pdTRUE, pdTRUE, 500);
		
		if((measureBits & (Hum_temp_measure_bit)) == (Hum_temp_measure_bit)){
				driver_ready_check = hih8120Wakeup();
				if (HIH8120_OK != driver_ready_check)
				printf("%s", "Something went wrong with HIH8120 wakeup call! Return value was: ", driver_ready_check);
    354e:	0f 2e       	mov	r0, r31
    3550:	fa e6       	ldi	r31, 0x6A	; 106
    3552:	2f 2e       	mov	r2, r31
    3554:	f6 e0       	ldi	r31, 0x06	; 6
    3556:	3f 2e       	mov	r3, r31
    3558:	f0 2d       	mov	r31, r0
				if (HIH8120_OK != driver_ready_check)
				printf("%s", "Something went wrong with HIH8120 Measure call! Return value was: ", driver_ready_check);
				setHumidity(hih8120GetHumidity());
				setTemperature(hih8120GetTemperature());
				
				printf("%s%i%s\n", "Arduino humidity level: ", (int)getHumidity(), "%");
    355a:	0f 2e       	mov	r0, r31
    355c:	ff ea       	ldi	r31, 0xAF	; 175
    355e:	6f 2e       	mov	r6, r31
    3560:	f4 e0       	ldi	r31, 0x04	; 4
    3562:	7f 2e       	mov	r7, r31
    3564:	f0 2d       	mov	r31, r0
    3566:	0f 2e       	mov	r0, r31
    3568:	f1 eb       	ldi	r31, 0xB1	; 177
    356a:	8f 2e       	mov	r8, r31
    356c:	f4 e0       	ldi	r31, 0x04	; 4
    356e:	9f 2e       	mov	r9, r31
    3570:	f0 2d       	mov	r31, r0
    3572:	ca ec       	ldi	r28, 0xCA	; 202
    3574:	d4 e0       	ldi	r29, 0x04	; 4
				printf("%s%i%s\n","Arduino temperature : ", (int)getTemperature(), "C");
    3576:	0f 2e       	mov	r0, r31
    3578:	f2 ed       	ldi	r31, 0xD2	; 210
    357a:	af 2e       	mov	r10, r31
    357c:	f4 e0       	ldi	r31, 0x04	; 4
    357e:	bf 2e       	mov	r11, r31
    3580:	f0 2d       	mov	r31, r0
    3582:	0f 2e       	mov	r0, r31
    3584:	f4 ed       	ldi	r31, 0xD4	; 212
    3586:	4f 2e       	mov	r4, r31
    3588:	f4 e0       	ldi	r31, 0x04	; 4
    358a:	5f 2e       	mov	r5, r31
    358c:	f0 2d       	mov	r31, r0
{

	for (;;) 
	{
		
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, Hum_temp_measure_bit, pdTRUE, pdTRUE, 500);
    358e:	0f 2e       	mov	r0, r31
    3590:	f4 ef       	ldi	r31, 0xF4	; 244
    3592:	cf 2e       	mov	r12, r31
    3594:	dd 24       	eor	r13, r13
    3596:	d3 94       	inc	r13
    3598:	e1 2c       	mov	r14, r1
    359a:	f1 2c       	mov	r15, r1
    359c:	f0 2d       	mov	r31, r0
    359e:	01 e0       	ldi	r16, 0x01	; 1
    35a0:	21 e0       	ldi	r18, 0x01	; 1
    35a2:	42 e0       	ldi	r20, 0x02	; 2
    35a4:	50 e0       	ldi	r21, 0x00	; 0
    35a6:	60 e0       	ldi	r22, 0x00	; 0
    35a8:	70 e0       	ldi	r23, 0x00	; 0
    35aa:	80 91 7e 1a 	lds	r24, 0x1A7E	; 0x801a7e <Measure_event_group>
    35ae:	90 91 7f 1a 	lds	r25, 0x1A7F	; 0x801a7f <Measure_event_group+0x1>
    35b2:	0e 94 3b 05 	call	0xa76	; 0xa76 <xEventGroupWaitBits>
		
		if((measureBits & (Hum_temp_measure_bit)) == (Hum_temp_measure_bit)){
    35b6:	61 ff       	sbrs	r22, 1
    35b8:	ea cf       	rjmp	.-44     	; 0x358e <hum_temp_task+0x40>
				driver_ready_check = hih8120Wakeup();
    35ba:	de d1       	rcall	.+956    	; 0x3978 <hih8120Wakeup>
    35bc:	28 2f       	mov	r18, r24
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	30 93 8f 1a 	sts	0x1A8F, r19	; 0x801a8f <driver_ready_check+0x1>
    35c4:	20 93 8e 1a 	sts	0x1A8E, r18	; 0x801a8e <driver_ready_check>
				if (HIH8120_OK != driver_ready_check)
    35c8:	23 2b       	or	r18, r19
    35ca:	81 f0       	breq	.+32     	; 0x35ec <hum_temp_task+0x9e>
				printf("%s", "Something went wrong with HIH8120 wakeup call! Return value was: ", driver_ready_check);
    35cc:	1f 92       	push	r1
    35ce:	8f 93       	push	r24
    35d0:	8a e2       	ldi	r24, 0x2A	; 42
    35d2:	94 e0       	ldi	r25, 0x04	; 4
    35d4:	9f 93       	push	r25
    35d6:	8f 93       	push	r24
    35d8:	3f 92       	push	r3
    35da:	2f 92       	push	r2
    35dc:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <printf>
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	0f 90       	pop	r0
    35e6:	0f 90       	pop	r0
    35e8:	0f 90       	pop	r0
    35ea:	0f 90       	pop	r0

				vTaskDelay(60); // necessary wait delay after calling wakeup
    35ec:	6c e3       	ldi	r22, 0x3C	; 60
    35ee:	70 e0       	ldi	r23, 0x00	; 0
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	90 e0       	ldi	r25, 0x00	; 0
				
				driver_ready_check = hih8120Meassure();
    35f4:	3b d9       	rcall	.-3466   	; 0x286c <vTaskDelay>
    35f6:	d5 d1       	rcall	.+938    	; 0x39a2 <hih8120Meassure>
    35f8:	28 2f       	mov	r18, r24
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	30 93 8f 1a 	sts	0x1A8F, r19	; 0x801a8f <driver_ready_check+0x1>
    3600:	20 93 8e 1a 	sts	0x1A8E, r18	; 0x801a8e <driver_ready_check>
				if (HIH8120_OK != driver_ready_check)
    3604:	23 2b       	or	r18, r19
    3606:	81 f0       	breq	.+32     	; 0x3628 <hum_temp_task+0xda>
				printf("%s", "Something went wrong with HIH8120 Measure call! Return value was: ", driver_ready_check);
    3608:	1f 92       	push	r1
    360a:	8f 93       	push	r24
    360c:	8c e6       	ldi	r24, 0x6C	; 108
    360e:	94 e0       	ldi	r25, 0x04	; 4
    3610:	9f 93       	push	r25
    3612:	8f 93       	push	r24
    3614:	3f 92       	push	r3
    3616:	2f 92       	push	r2
    3618:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <printf>
    361c:	0f 90       	pop	r0
    361e:	0f 90       	pop	r0
    3620:	0f 90       	pop	r0
    3622:	0f 90       	pop	r0
    3624:	0f 90       	pop	r0
				setHumidity(hih8120GetHumidity());
    3626:	0f 90       	pop	r0
    3628:	cd d1       	rcall	.+922    	; 0x39c4 <hih8120GetHumidity>
    362a:	0e 94 90 04 	call	0x920	; 0x920 <setHumidity>
				setTemperature(hih8120GetTemperature());
    362e:	df d1       	rcall	.+958    	; 0x39ee <hih8120GetTemperature>
    3630:	0e 94 d6 04 	call	0x9ac	; 0x9ac <setTemperature>
				
				printf("%s%i%s\n", "Arduino humidity level: ", (int)getHumidity(), "%");
    3634:	0e 94 79 04 	call	0x8f2	; 0x8f2 <getHumidity>
    3638:	7f 92       	push	r7
    363a:	6f 92       	push	r6
    363c:	cc d0       	rcall	.+408    	; 0x37d6 <__fixsfsi>
    363e:	7f 93       	push	r23
    3640:	6f 93       	push	r22
    3642:	9f 92       	push	r9
    3644:	8f 92       	push	r8
    3646:	df 93       	push	r29
    3648:	cf 93       	push	r28
    364a:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <printf>
				printf("%s%i%s\n","Arduino temperature : ", (int)getTemperature(), "C");
    364e:	0e 94 bf 04 	call	0x97e	; 0x97e <getTemperature>
    3652:	bf 92       	push	r11
    3654:	af 92       	push	r10
    3656:	bf d0       	rcall	.+382    	; 0x37d6 <__fixsfsi>
    3658:	7f 93       	push	r23
    365a:	6f 93       	push	r22
    365c:	5f 92       	push	r5
    365e:	4f 92       	push	r4
    3660:	df 93       	push	r29
    3662:	cf 93       	push	r28
    3664:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <printf>
				xEventGroupSetBits(Data_event_group, Hum_temp_data_bit);
    3668:	48 e0       	ldi	r20, 0x08	; 8
    366a:	50 e0       	ldi	r21, 0x00	; 0
    366c:	60 e0       	ldi	r22, 0x00	; 0
    366e:	70 e0       	ldi	r23, 0x00	; 0
    3670:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <Data_event_group>
    3674:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <Data_event_group+0x1>
    3678:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <xEventGroupSetBits>
				vTaskDelay(150);
    367c:	66 e9       	ldi	r22, 0x96	; 150
    367e:	70 e0       	ldi	r23, 0x00	; 0
    3680:	80 e0       	ldi	r24, 0x00	; 0
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	f3 d8       	rcall	.-3610   	; 0x286c <vTaskDelay>
    3686:	8d b7       	in	r24, 0x3d	; 61
    3688:	9e b7       	in	r25, 0x3e	; 62
    368a:	40 96       	adiw	r24, 0x10	; 16
    368c:	0f b6       	in	r0, 0x3f	; 63
    368e:	f8 94       	cli
    3690:	9e bf       	out	0x3e, r25	; 62
    3692:	0f be       	out	0x3f, r0	; 63
    3694:	8d bf       	out	0x3d, r24	; 61
    3696:	7b cf       	rjmp	.-266    	; 0x358e <hum_temp_task+0x40>

00003698 <HumidityTemperatureSensor_create>:

	
void hum_temp_task(void *pvParameters);

void HumidityTemperatureSensor_create()
{
    3698:	ef 92       	push	r14
    369a:	ff 92       	push	r15
    369c:	0f 93       	push	r16
	hih8120Create(); 
    369e:	54 d1       	rcall	.+680    	; 0x3948 <hih8120Create>
	
	xTaskCreate(
    36a0:	e1 2c       	mov	r14, r1
    36a2:	f1 2c       	mov	r15, r1
    36a4:	03 e0       	ldi	r16, 0x03	; 3
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	48 e8       	ldi	r20, 0x88	; 136
    36ac:	51 e0       	ldi	r21, 0x01	; 1
    36ae:	6b ee       	ldi	r22, 0xEB	; 235
    36b0:	74 e0       	ldi	r23, 0x04	; 4
    36b2:	87 ea       	ldi	r24, 0xA7	; 167
    36b4:	9a e1       	ldi	r25, 0x1A	; 26
    36b6:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskCreate>
		configMINIMAL_STACK_SIZE+200,  // This stack size can be checked & adjusted by reading the Stack Highwater
		NULL,
		3,  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
		NULL
	 );
}
    36ba:	0f 91       	pop	r16
    36bc:	ff 90       	pop	r15
    36be:	ef 90       	pop	r14
    36c0:	08 95       	ret

000036c2 <create_tasks_and_semaphores>:



/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{	
    36c2:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	
	if ( Mutex_CO2 == NULL )  // Check to confirm that the Semaphore has not already been created.
    36c4:	80 91 82 1a 	lds	r24, 0x1A82	; 0x801a82 <Mutex_CO2>
    36c8:	90 91 83 1a 	lds	r25, 0x1A83	; 0x801a83 <Mutex_CO2+0x1>
    36cc:	89 2b       	or	r24, r25
    36ce:	89 f4       	brne	.+34     	; 0x36f2 <create_tasks_and_semaphores+0x30>
	{
		Mutex_CO2 = xSemaphoreCreateMutex();  // Create a MUTEX semaphore.
    36d0:	81 e0       	ldi	r24, 0x01	; 1
    36d2:	0e 94 bd 0b 	call	0x177a	; 0x177a <xQueueCreateMutex>
    36d6:	90 93 83 1a 	sts	0x1A83, r25	; 0x801a83 <Mutex_CO2+0x1>
    36da:	80 93 82 1a 	sts	0x1A82, r24	; 0x801a82 <Mutex_CO2>
		if ( ( Mutex_CO2 ) != NULL )
    36de:	00 97       	sbiw	r24, 0x00	; 0
    36e0:	41 f0       	breq	.+16     	; 0x36f2 <create_tasks_and_semaphores+0x30>
		{
			xSemaphoreGive( ( Mutex_CO2 ) );  // Make the MUTEX available for use, by initially "Giving" the Semaphore.
    36e2:	00 e0       	ldi	r16, 0x00	; 0
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	a9 01       	movw	r20, r18
    36ea:	60 e0       	ldi	r22, 0x00	; 0
    36ec:	70 e0       	ldi	r23, 0x00	; 0
    36ee:	0e 94 1d 0b 	call	0x163a	; 0x163a <xQueueGenericSend>
		}
	}
	
	if ( Mutex_humidity == NULL )  // Check to confirm that the Semaphore has not already been created.
    36f2:	80 91 7a 1a 	lds	r24, 0x1A7A	; 0x801a7a <Mutex_humidity>
    36f6:	90 91 7b 1a 	lds	r25, 0x1A7B	; 0x801a7b <Mutex_humidity+0x1>
    36fa:	89 2b       	or	r24, r25
    36fc:	89 f4       	brne	.+34     	; 0x3720 <create_tasks_and_semaphores+0x5e>
	{
		Mutex_humidity = xSemaphoreCreateMutex();  // Create a MUTEX semaphore.
    36fe:	81 e0       	ldi	r24, 0x01	; 1
    3700:	0e 94 bd 0b 	call	0x177a	; 0x177a <xQueueCreateMutex>
    3704:	90 93 7b 1a 	sts	0x1A7B, r25	; 0x801a7b <Mutex_humidity+0x1>
    3708:	80 93 7a 1a 	sts	0x1A7A, r24	; 0x801a7a <Mutex_humidity>
		if ( ( Mutex_humidity ) != NULL )
    370c:	00 97       	sbiw	r24, 0x00	; 0
    370e:	41 f0       	breq	.+16     	; 0x3720 <create_tasks_and_semaphores+0x5e>
		{
			xSemaphoreGive( ( Mutex_humidity ) );  // Make the MUTEX available for use, by initially "Giving" the Semaphore.
    3710:	00 e0       	ldi	r16, 0x00	; 0
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	a9 01       	movw	r20, r18
    3718:	60 e0       	ldi	r22, 0x00	; 0
    371a:	70 e0       	ldi	r23, 0x00	; 0
    371c:	0e 94 1d 0b 	call	0x163a	; 0x163a <xQueueGenericSend>
		}
	}
	
	if ( Mutex_temperature == NULL )  // Check to confirm that the Semaphore has not already been created.
    3720:	80 91 80 1a 	lds	r24, 0x1A80	; 0x801a80 <Mutex_temperature>
    3724:	90 91 81 1a 	lds	r25, 0x1A81	; 0x801a81 <Mutex_temperature+0x1>
    3728:	89 2b       	or	r24, r25
    372a:	89 f4       	brne	.+34     	; 0x374e <create_tasks_and_semaphores+0x8c>
	{
		Mutex_temperature = xSemaphoreCreateMutex();  // Create a MUTEX semaphore.
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	0e 94 bd 0b 	call	0x177a	; 0x177a <xQueueCreateMutex>
    3732:	90 93 81 1a 	sts	0x1A81, r25	; 0x801a81 <Mutex_temperature+0x1>
    3736:	80 93 80 1a 	sts	0x1A80, r24	; 0x801a80 <Mutex_temperature>
		if ( ( Mutex_temperature ) != NULL )
    373a:	00 97       	sbiw	r24, 0x00	; 0
    373c:	41 f0       	breq	.+16     	; 0x374e <create_tasks_and_semaphores+0x8c>
		{
			xSemaphoreGive( ( Mutex_temperature ) );  // Make the MUTEX available for use, by initially "Giving" the Semaphore.
    373e:	00 e0       	ldi	r16, 0x00	; 0
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	a9 01       	movw	r20, r18
    3746:	60 e0       	ldi	r22, 0x00	; 0
    3748:	70 e0       	ldi	r23, 0x00	; 0
    374a:	0e 94 1d 0b 	call	0x163a	; 0x163a <xQueueGenericSend>
		}
	}
	
	init_resources();
    374e:	0e 94 04 05 	call	0xa08	; 0xa08 <init_resources>
	
		HumidityTemperatureSensor_create();
    3752:	a2 df       	rcall	.-188    	; 0x3698 <HumidityTemperatureSensor_create>
		CO2Sensor_create();
    3754:	0e 94 b2 02 	call	0x564	; 0x564 <CO2Sensor_create>
		
}
    3758:	0f 91       	pop	r16
    375a:	08 95       	ret

0000375c <create_Event_Groups>:

void create_Event_Groups()
{
	
	Measure_event_group = xEventGroupCreate();
    375c:	0e 94 28 05 	call	0xa50	; 0xa50 <xEventGroupCreate>
    3760:	90 93 7f 1a 	sts	0x1A7F, r25	; 0x801a7f <Measure_event_group+0x1>
    3764:	80 93 7e 1a 	sts	0x1A7E, r24	; 0x801a7e <Measure_event_group>
	if(Measure_event_group == NULL)
    3768:	89 2b       	or	r24, r25
    376a:	21 f4       	brne	.+8      	; 0x3774 <create_Event_Groups+0x18>
	{
			printf("%s\n","#ERROR - Measure_event_group was NOT created because there was insufficient FreeRTOS heap available");
    376c:	87 ef       	ldi	r24, 0xF7	; 247
    376e:	94 e0       	ldi	r25, 0x04	; 4
    3770:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <puts>
		}
	Data_event_group = xEventGroupCreate();
    3774:	0e 94 28 05 	call	0xa50	; 0xa50 <xEventGroupCreate>
    3778:	90 93 7d 1a 	sts	0x1A7D, r25	; 0x801a7d <Data_event_group+0x1>
    377c:	80 93 7c 1a 	sts	0x1A7C, r24	; 0x801a7c <Data_event_group>
	if(Data_event_group == NULL) 
    3780:	89 2b       	or	r24, r25
    3782:	21 f4       	brne	.+8      	; 0x378c <create_Event_Groups+0x30>
			printf("%s\n","#ERROR - Measure_event_group was NOT created because there was insufficient FreeRTOS heap available");
    3784:	87 ef       	ldi	r24, 0xF7	; 247
    3786:	94 e0       	ldi	r25, 0x04	; 4
    3788:	0c 94 37 2d 	jmp	0x5a6e	; 0x5a6e <puts>
    378c:	08 95       	ret

0000378e <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for LEDS used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    378e:	81 b1       	in	r24, 0x01	; 1
    3790:	81 68       	ori	r24, 0x81	; 129
    3792:	81 b9       	out	0x01, r24	; 1
	
	// Initialize the trace-driver to be used together with the R2R-Network
	trace_init();
    3794:	0e 94 12 05 	call	0xa24	; 0xa24 <trace_init>
	
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    3798:	80 e0       	ldi	r24, 0x00	; 0
    379a:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <stdioCreate>
	
	// Let's create some tasks
	create_Event_Groups();
    379e:	de df       	rcall	.-68     	; 0x375c <create_Event_Groups>
	create_tasks_and_semaphores();
    37a0:	90 df       	rcall	.-224    	; 0x36c2 <create_tasks_and_semaphores>
	

	// Initialize the HAL layer and use 5 for LED driver priority
	hal_create(5);
    37a2:	85 e0       	ldi	r24, 0x05	; 5
    37a4:	72 d0       	rcall	.+228    	; 0x388a <hal_create>
    37a6:	60 e0       	ldi	r22, 0x00	; 0
	
	// Initialize the LoRaWAN driver without down-link buffer
	lora_driver_create(LORA_USART, NULL);
    37a8:	70 e0       	ldi	r23, 0x00	; 0
    37aa:	81 e0       	ldi	r24, 0x01	; 1
    37ac:	0d d4       	rcall	.+2074   	; 0x3fc8 <lora_driver_create>
    37ae:	83 e0       	ldi	r24, 0x03	; 3
	
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_create(3);
    37b0:	0c 94 2c 04 	jmp	0x858	; 0x858 <lora_handler_create>
    37b4:	08 95       	ret

000037b6 <main>:
    37b6:	eb df       	rcall	.-42     	; 0x378e <initialiseSystem>
/*-----------------------------------------------------------*/
int main(void)
{	
	
	initialiseSystem(); 
	printf("START\n");
    37b8:	8b e5       	ldi	r24, 0x5B	; 91
    37ba:	95 e0       	ldi	r25, 0x05	; 5
    37bc:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    37c0:	0e 94 37 12 	call	0x246e	; 0x246e <vTaskStartScheduler>
	while (1)
	{
		printf("This bit of code shouldn't run!!");
    37c4:	c1 e6       	ldi	r28, 0x61	; 97
    37c6:	d5 e0       	ldi	r29, 0x05	; 5
    37c8:	df 93       	push	r29
    37ca:	cf 93       	push	r28
    37cc:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <printf>
    37d0:	0f 90       	pop	r0
    37d2:	0f 90       	pop	r0
    37d4:	f9 cf       	rjmp	.-14     	; 0x37c8 <main+0x12>

000037d6 <__fixsfsi>:
    37d6:	04 d0       	rcall	.+8      	; 0x37e0 <__fixunssfsi>
    37d8:	68 94       	set
    37da:	b1 11       	cpse	r27, r1
    37dc:	50 c0       	rjmp	.+160    	; 0x387e <__fp_szero>
    37de:	08 95       	ret

000037e0 <__fixunssfsi>:
    37e0:	33 d0       	rcall	.+102    	; 0x3848 <__fp_splitA>
    37e2:	88 f0       	brcs	.+34     	; 0x3806 <__fixunssfsi+0x26>
    37e4:	9f 57       	subi	r25, 0x7F	; 127
    37e6:	90 f0       	brcs	.+36     	; 0x380c <__fixunssfsi+0x2c>
    37e8:	b9 2f       	mov	r27, r25
    37ea:	99 27       	eor	r25, r25
    37ec:	b7 51       	subi	r27, 0x17	; 23
    37ee:	a0 f0       	brcs	.+40     	; 0x3818 <__fixunssfsi+0x38>
    37f0:	d1 f0       	breq	.+52     	; 0x3826 <__fixunssfsi+0x46>
    37f2:	66 0f       	add	r22, r22
    37f4:	77 1f       	adc	r23, r23
    37f6:	88 1f       	adc	r24, r24
    37f8:	99 1f       	adc	r25, r25
    37fa:	1a f0       	brmi	.+6      	; 0x3802 <__fixunssfsi+0x22>
    37fc:	ba 95       	dec	r27
    37fe:	c9 f7       	brne	.-14     	; 0x37f2 <__fixunssfsi+0x12>
    3800:	12 c0       	rjmp	.+36     	; 0x3826 <__fixunssfsi+0x46>
    3802:	b1 30       	cpi	r27, 0x01	; 1
    3804:	81 f0       	breq	.+32     	; 0x3826 <__fixunssfsi+0x46>
    3806:	3a d0       	rcall	.+116    	; 0x387c <__fp_zero>
    3808:	b1 e0       	ldi	r27, 0x01	; 1
    380a:	08 95       	ret
    380c:	37 c0       	rjmp	.+110    	; 0x387c <__fp_zero>
    380e:	67 2f       	mov	r22, r23
    3810:	78 2f       	mov	r23, r24
    3812:	88 27       	eor	r24, r24
    3814:	b8 5f       	subi	r27, 0xF8	; 248
    3816:	39 f0       	breq	.+14     	; 0x3826 <__fixunssfsi+0x46>
    3818:	b9 3f       	cpi	r27, 0xF9	; 249
    381a:	cc f3       	brlt	.-14     	; 0x380e <__fixunssfsi+0x2e>
    381c:	86 95       	lsr	r24
    381e:	77 95       	ror	r23
    3820:	67 95       	ror	r22
    3822:	b3 95       	inc	r27
    3824:	d9 f7       	brne	.-10     	; 0x381c <__fixunssfsi+0x3c>
    3826:	3e f4       	brtc	.+14     	; 0x3836 <__fixunssfsi+0x56>
    3828:	90 95       	com	r25
    382a:	80 95       	com	r24
    382c:	70 95       	com	r23
    382e:	61 95       	neg	r22
    3830:	7f 4f       	sbci	r23, 0xFF	; 255
    3832:	8f 4f       	sbci	r24, 0xFF	; 255
    3834:	9f 4f       	sbci	r25, 0xFF	; 255
    3836:	08 95       	ret

00003838 <__fp_split3>:
    3838:	57 fd       	sbrc	r21, 7
    383a:	90 58       	subi	r25, 0x80	; 128
    383c:	44 0f       	add	r20, r20
    383e:	55 1f       	adc	r21, r21
    3840:	59 f0       	breq	.+22     	; 0x3858 <__fp_splitA+0x10>
    3842:	5f 3f       	cpi	r21, 0xFF	; 255
    3844:	71 f0       	breq	.+28     	; 0x3862 <__fp_splitA+0x1a>
    3846:	47 95       	ror	r20

00003848 <__fp_splitA>:
    3848:	88 0f       	add	r24, r24
    384a:	97 fb       	bst	r25, 7
    384c:	99 1f       	adc	r25, r25
    384e:	61 f0       	breq	.+24     	; 0x3868 <__fp_splitA+0x20>
    3850:	9f 3f       	cpi	r25, 0xFF	; 255
    3852:	79 f0       	breq	.+30     	; 0x3872 <__fp_splitA+0x2a>
    3854:	87 95       	ror	r24
    3856:	08 95       	ret
    3858:	12 16       	cp	r1, r18
    385a:	13 06       	cpc	r1, r19
    385c:	14 06       	cpc	r1, r20
    385e:	55 1f       	adc	r21, r21
    3860:	f2 cf       	rjmp	.-28     	; 0x3846 <__fp_split3+0xe>
    3862:	46 95       	lsr	r20
    3864:	f1 df       	rcall	.-30     	; 0x3848 <__fp_splitA>
    3866:	08 c0       	rjmp	.+16     	; 0x3878 <__fp_splitA+0x30>
    3868:	16 16       	cp	r1, r22
    386a:	17 06       	cpc	r1, r23
    386c:	18 06       	cpc	r1, r24
    386e:	99 1f       	adc	r25, r25
    3870:	f1 cf       	rjmp	.-30     	; 0x3854 <__fp_splitA+0xc>
    3872:	86 95       	lsr	r24
    3874:	71 05       	cpc	r23, r1
    3876:	61 05       	cpc	r22, r1
    3878:	08 94       	sec
    387a:	08 95       	ret

0000387c <__fp_zero>:
    387c:	e8 94       	clt

0000387e <__fp_szero>:
    387e:	bb 27       	eor	r27, r27
    3880:	66 27       	eor	r22, r22
    3882:	77 27       	eor	r23, r23
    3884:	cb 01       	movw	r24, r22
    3886:	97 f9       	bld	r25, 7
    3888:	08 95       	ret

0000388a <hal_create>:
    388a:	e0 e9       	ldi	r30, 0x90	; 144
    388c:	fa e1       	ldi	r31, 0x1A	; 26
    388e:	29 e3       	ldi	r18, 0x39	; 57
    3890:	33 e2       	ldi	r19, 0x23	; 35
    3892:	31 83       	std	Z+1, r19	; 0x01
    3894:	20 83       	st	Z, r18
    3896:	2c e3       	ldi	r18, 0x3C	; 60
    3898:	33 e2       	ldi	r19, 0x23	; 35
    389a:	33 83       	std	Z+3, r19	; 0x03
    389c:	22 83       	std	Z+2, r18	; 0x02
    389e:	27 e4       	ldi	r18, 0x47	; 71
    38a0:	33 e2       	ldi	r19, 0x23	; 35
    38a2:	35 83       	std	Z+5, r19	; 0x05
    38a4:	24 83       	std	Z+4, r18	; 0x04
    38a6:	2b e4       	ldi	r18, 0x4B	; 75
    38a8:	33 e2       	ldi	r19, 0x23	; 35
    38aa:	37 83       	std	Z+7, r19	; 0x07
    38ac:	26 83       	std	Z+6, r18	; 0x06
    38ae:	21 e5       	ldi	r18, 0x51	; 81
    38b0:	33 e2       	ldi	r19, 0x23	; 35
    38b2:	31 87       	std	Z+9, r19	; 0x09
    38b4:	20 87       	std	Z+8, r18	; 0x08
    38b6:	2d e5       	ldi	r18, 0x5D	; 93
    38b8:	33 e2       	ldi	r19, 0x23	; 35
    38ba:	33 87       	std	Z+11, r19	; 0x0b
    38bc:	22 87       	std	Z+10, r18	; 0x0a
    38be:	22 e6       	ldi	r18, 0x62	; 98
    38c0:	33 e2       	ldi	r19, 0x23	; 35
    38c2:	35 87       	std	Z+13, r19	; 0x0d
    38c4:	24 87       	std	Z+12, r18	; 0x0c
    38c6:	2e e6       	ldi	r18, 0x6E	; 110
    38c8:	33 e2       	ldi	r19, 0x23	; 35
    38ca:	37 87       	std	Z+15, r19	; 0x0f
    38cc:	26 87       	std	Z+14, r18	; 0x0e
    38ce:	2e e4       	ldi	r18, 0x4E	; 78
    38d0:	33 e2       	ldi	r19, 0x23	; 35
    38d2:	31 8b       	std	Z+17, r19	; 0x11
    38d4:	20 8b       	std	Z+16, r18	; 0x10
    38d6:	23 e7       	ldi	r18, 0x73	; 115
    38d8:	33 e2       	ldi	r19, 0x23	; 35
    38da:	33 8b       	std	Z+19, r19	; 0x13
    38dc:	22 8b       	std	Z+18, r18	; 0x12
    38de:	20 e8       	ldi	r18, 0x80	; 128
    38e0:	33 e2       	ldi	r19, 0x23	; 35
    38e2:	35 8b       	std	Z+21, r19	; 0x15
    38e4:	24 8b       	std	Z+20, r18	; 0x14
    38e6:	68 2f       	mov	r22, r24
    38e8:	cf 01       	movw	r24, r30
    38ea:	3a c1       	rjmp	.+628    	; 0x3b60 <led_create>
    38ec:	08 95       	ret

000038ee <_hihTwiCallback>:
    38ee:	65 30       	cpi	r22, 0x05	; 5
    38f0:	f1 f4       	brne	.+60     	; 0x392e <_hihTwiCallback+0x40>
    38f2:	fa 01       	movw	r30, r20
    38f4:	80 81       	ld	r24, Z
    38f6:	8f 73       	andi	r24, 0x3F	; 63
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	98 2f       	mov	r25, r24
    38fc:	88 27       	eor	r24, r24
    38fe:	21 81       	ldd	r18, Z+1	; 0x01
    3900:	82 2b       	or	r24, r18
    3902:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3906:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    390a:	82 81       	ldd	r24, Z+2	; 0x02
    390c:	f0 e4       	ldi	r31, 0x40	; 64
    390e:	8f 9f       	mul	r24, r31
    3910:	c0 01       	movw	r24, r0
    3912:	11 24       	eor	r1, r1
    3914:	fa 01       	movw	r30, r20
    3916:	23 81       	ldd	r18, Z+3	; 0x03
    3918:	26 95       	lsr	r18
    391a:	26 95       	lsr	r18
    391c:	82 2b       	or	r24, r18
    391e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    3922:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	80 93 1d 19 	sts	0x191D, r24	; 0x80191d <_measuringIsReady>
    392c:	08 95       	ret
    392e:	64 30       	cpi	r22, 0x04	; 4
    3930:	51 f0       	breq	.+20     	; 0x3946 <_hihTwiCallback+0x58>
    3932:	80 e0       	ldi	r24, 0x00	; 0
    3934:	90 e4       	ldi	r25, 0x40	; 64
    3936:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    393a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    393e:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3942:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    3946:	08 95       	ret

00003948 <hih8120Create>:
    3948:	0f 93       	push	r16
    394a:	1f 93       	push	r17
    394c:	07 e7       	ldi	r16, 0x77	; 119
    394e:	1c e1       	ldi	r17, 0x1C	; 28
    3950:	20 e0       	ldi	r18, 0x00	; 0
    3952:	34 e2       	ldi	r19, 0x24	; 36
    3954:	44 ef       	ldi	r20, 0xF4	; 244
    3956:	50 e0       	ldi	r21, 0x00	; 0
    3958:	60 e0       	ldi	r22, 0x00	; 0
    395a:	87 e2       	ldi	r24, 0x27	; 39
    395c:	0e 94 16 28 	call	0x502c	; 0x502c <twiCreate>
    3960:	90 93 1f 19 	sts	0x191F, r25	; 0x80191f <_hih8120Handler+0x1>
    3964:	80 93 1e 19 	sts	0x191E, r24	; 0x80191e <_hih8120Handler>
    3968:	21 e0       	ldi	r18, 0x01	; 1
    396a:	89 2b       	or	r24, r25
    396c:	09 f0       	breq	.+2      	; 0x3970 <hih8120Create+0x28>
    396e:	20 e0       	ldi	r18, 0x00	; 0
    3970:	82 2f       	mov	r24, r18
    3972:	1f 91       	pop	r17
    3974:	0f 91       	pop	r16
    3976:	08 95       	ret

00003978 <hih8120Wakeup>:
    3978:	80 91 1e 19 	lds	r24, 0x191E	; 0x80191e <_hih8120Handler>
    397c:	90 91 1f 19 	lds	r25, 0x191F	; 0x80191f <_hih8120Handler+0x1>
    3980:	00 97       	sbiw	r24, 0x00	; 0
    3982:	59 f0       	breq	.+22     	; 0x399a <hih8120Wakeup+0x22>
    3984:	40 e0       	ldi	r20, 0x00	; 0
    3986:	60 e0       	ldi	r22, 0x00	; 0
    3988:	70 e0       	ldi	r23, 0x00	; 0
    398a:	0e 94 67 28 	call	0x50ce	; 0x50ce <twiTransmit>
    398e:	84 30       	cpi	r24, 0x04	; 4
    3990:	31 f4       	brne	.+12     	; 0x399e <hih8120Wakeup+0x26>
    3992:	10 92 1d 19 	sts	0x191D, r1	; 0x80191d <_measuringIsReady>
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	08 95       	ret
    399a:	82 e0       	ldi	r24, 0x02	; 2
    399c:	08 95       	ret
    399e:	83 e0       	ldi	r24, 0x03	; 3
    39a0:	08 95       	ret

000039a2 <hih8120Meassure>:
    39a2:	80 91 1e 19 	lds	r24, 0x191E	; 0x80191e <_hih8120Handler>
    39a6:	90 91 1f 19 	lds	r25, 0x191F	; 0x80191f <_hih8120Handler+0x1>
    39aa:	00 97       	sbiw	r24, 0x00	; 0
    39ac:	39 f0       	breq	.+14     	; 0x39bc <hih8120Meassure+0x1a>
    39ae:	64 e0       	ldi	r22, 0x04	; 4
    39b0:	0e 94 b3 28 	call	0x5166	; 0x5166 <twiReceive>
    39b4:	85 30       	cpi	r24, 0x05	; 5
    39b6:	21 f0       	breq	.+8      	; 0x39c0 <hih8120Meassure+0x1e>
    39b8:	83 e0       	ldi	r24, 0x03	; 3
    39ba:	08 95       	ret
    39bc:	82 e0       	ldi	r24, 0x02	; 2
    39be:	08 95       	ret
    39c0:	80 e0       	ldi	r24, 0x00	; 0
    39c2:	08 95       	ret

000039c4 <hih8120GetHumidity>:
    39c4:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    39c8:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    39cc:	80 e0       	ldi	r24, 0x00	; 0
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	0e 94 91 2a 	call	0x5522	; 0x5522 <__floatunsisf>
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	48 ec       	ldi	r20, 0xC8	; 200
    39da:	52 e4       	ldi	r21, 0x42	; 66
    39dc:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <__mulsf3>
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	38 ef       	ldi	r19, 0xF8	; 248
    39e4:	4f e7       	ldi	r20, 0x7F	; 127
    39e6:	56 e4       	ldi	r21, 0x46	; 70
    39e8:	0c 94 26 2a 	jmp	0x544c	; 0x544c <__divsf3>
    39ec:	08 95       	ret

000039ee <hih8120GetTemperature>:
    39ee:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    39f2:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	0e 94 91 2a 	call	0x5522	; 0x5522 <__floatunsisf>
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	45 e2       	ldi	r20, 0x25	; 37
    3a04:	53 e4       	ldi	r21, 0x43	; 67
    3a06:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <__mulsf3>
    3a0a:	20 e0       	ldi	r18, 0x00	; 0
    3a0c:	38 ef       	ldi	r19, 0xF8	; 248
    3a0e:	4f e7       	ldi	r20, 0x7F	; 127
    3a10:	56 e4       	ldi	r21, 0x46	; 70
    3a12:	0e 94 26 2a 	call	0x544c	; 0x544c <__divsf3>
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	30 e0       	ldi	r19, 0x00	; 0
    3a1a:	40 e2       	ldi	r20, 0x20	; 32
    3a1c:	52 e4       	ldi	r21, 0x42	; 66
    3a1e:	0c 94 bf 29 	jmp	0x537e	; 0x537e <__subsf3>
    3a22:	08 95       	ret

00003a24 <_turn_off>:
    3a24:	cf 93       	push	r28
    3a26:	df 93       	push	r29
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	fc 01       	movw	r30, r24
    3a2c:	ee 0f       	add	r30, r30
    3a2e:	ff 1f       	adc	r31, r31
    3a30:	e8 0f       	add	r30, r24
    3a32:	f9 1f       	adc	r31, r25
    3a34:	ee 0f       	add	r30, r30
    3a36:	ff 1f       	adc	r31, r31
    3a38:	e0 5e       	subi	r30, 0xE0	; 224
    3a3a:	f6 4e       	sbci	r31, 0xE6	; 230
    3a3c:	23 81       	ldd	r18, Z+3	; 0x03
    3a3e:	21 11       	cpse	r18, r1
    3a40:	0a c0       	rjmp	.+20     	; 0x3a56 <_turn_off+0x32>
    3a42:	ef 01       	movw	r28, r30
    3a44:	e0 91 98 1a 	lds	r30, 0x1A98	; 0x801a98 <register_access+0x8>
    3a48:	f0 91 99 1a 	lds	r31, 0x1A99	; 0x801a99 <register_access+0x9>
    3a4c:	6a 81       	ldd	r22, Y+2	; 0x02
    3a4e:	88 81       	ld	r24, Y
    3a50:	99 81       	ldd	r25, Y+1	; 0x01
    3a52:	19 95       	eicall
    3a54:	12 c0       	rjmp	.+36     	; 0x3a7a <_turn_off+0x56>
    3a56:	dc 01       	movw	r26, r24
    3a58:	aa 0f       	add	r26, r26
    3a5a:	bb 1f       	adc	r27, r27
    3a5c:	ed 01       	movw	r28, r26
    3a5e:	c8 0f       	add	r28, r24
    3a60:	d9 1f       	adc	r29, r25
    3a62:	cc 0f       	add	r28, r28
    3a64:	dd 1f       	adc	r29, r29
    3a66:	c0 5e       	subi	r28, 0xE0	; 224
    3a68:	d6 4e       	sbci	r29, 0xE6	; 230
    3a6a:	e0 91 a2 1a 	lds	r30, 0x1AA2	; 0x801aa2 <register_access+0x12>
    3a6e:	f0 91 a3 1a 	lds	r31, 0x1AA3	; 0x801aa3 <register_access+0x13>
    3a72:	6a 81       	ldd	r22, Y+2	; 0x02
    3a74:	88 81       	ld	r24, Y
    3a76:	99 81       	ldd	r25, Y+1	; 0x01
    3a78:	19 95       	eicall
    3a7a:	df 91       	pop	r29
    3a7c:	cf 91       	pop	r28
    3a7e:	08 95       	ret

00003a80 <_turn_on>:
    3a80:	cf 93       	push	r28
    3a82:	df 93       	push	r29
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	fc 01       	movw	r30, r24
    3a88:	ee 0f       	add	r30, r30
    3a8a:	ff 1f       	adc	r31, r31
    3a8c:	e8 0f       	add	r30, r24
    3a8e:	f9 1f       	adc	r31, r25
    3a90:	ee 0f       	add	r30, r30
    3a92:	ff 1f       	adc	r31, r31
    3a94:	e0 5e       	subi	r30, 0xE0	; 224
    3a96:	f6 4e       	sbci	r31, 0xE6	; 230
    3a98:	23 81       	ldd	r18, Z+3	; 0x03
    3a9a:	21 11       	cpse	r18, r1
    3a9c:	0a c0       	rjmp	.+20     	; 0x3ab2 <_turn_on+0x32>
    3a9e:	ef 01       	movw	r28, r30
    3aa0:	e0 91 a2 1a 	lds	r30, 0x1AA2	; 0x801aa2 <register_access+0x12>
    3aa4:	f0 91 a3 1a 	lds	r31, 0x1AA3	; 0x801aa3 <register_access+0x13>
    3aa8:	6a 81       	ldd	r22, Y+2	; 0x02
    3aaa:	88 81       	ld	r24, Y
    3aac:	99 81       	ldd	r25, Y+1	; 0x01
    3aae:	19 95       	eicall
    3ab0:	12 c0       	rjmp	.+36     	; 0x3ad6 <_turn_on+0x56>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	aa 0f       	add	r26, r26
    3ab6:	bb 1f       	adc	r27, r27
    3ab8:	ed 01       	movw	r28, r26
    3aba:	c8 0f       	add	r28, r24
    3abc:	d9 1f       	adc	r29, r25
    3abe:	cc 0f       	add	r28, r28
    3ac0:	dd 1f       	adc	r29, r29
    3ac2:	c0 5e       	subi	r28, 0xE0	; 224
    3ac4:	d6 4e       	sbci	r29, 0xE6	; 230
    3ac6:	e0 91 98 1a 	lds	r30, 0x1A98	; 0x801a98 <register_access+0x8>
    3aca:	f0 91 99 1a 	lds	r31, 0x1A99	; 0x801a99 <register_access+0x9>
    3ace:	6a 81       	ldd	r22, Y+2	; 0x02
    3ad0:	88 81       	ld	r24, Y
    3ad2:	99 81       	ldd	r25, Y+1	; 0x01
    3ad4:	19 95       	eicall
    3ad6:	df 91       	pop	r29
    3ad8:	cf 91       	pop	r28
    3ada:	08 95       	ret

00003adc <_hal_led_task>:
    3adc:	0f 2e       	mov	r0, r31
    3ade:	f0 e9       	ldi	r31, 0x90	; 144
    3ae0:	cf 2e       	mov	r12, r31
    3ae2:	fa e1       	ldi	r31, 0x1A	; 26
    3ae4:	df 2e       	mov	r13, r31
    3ae6:	f0 2d       	mov	r31, r0
    3ae8:	04 e0       	ldi	r16, 0x04	; 4
    3aea:	c0 e2       	ldi	r28, 0x20	; 32
    3aec:	d9 e1       	ldi	r29, 0x19	; 25
    3aee:	10 e0       	ldi	r17, 0x00	; 0
    3af0:	8c 81       	ldd	r24, Y+4	; 0x04
    3af2:	81 30       	cpi	r24, 0x01	; 1
    3af4:	69 f0       	breq	.+26     	; 0x3b10 <_hal_led_task+0x34>
    3af6:	e8 f0       	brcs	.+58     	; 0x3b32 <_hal_led_task+0x56>
    3af8:	82 30       	cpi	r24, 0x02	; 2
    3afa:	39 f5       	brne	.+78     	; 0x3b4a <_hal_led_task+0x6e>
    3afc:	d6 01       	movw	r26, r12
    3afe:	1c 96       	adiw	r26, 0x0c	; 12
    3b00:	ed 91       	ld	r30, X+
    3b02:	fc 91       	ld	r31, X
    3b04:	1d 97       	sbiw	r26, 0x0d	; 13
    3b06:	6a 81       	ldd	r22, Y+2	; 0x02
    3b08:	88 81       	ld	r24, Y
    3b0a:	99 81       	ldd	r25, Y+1	; 0x01
    3b0c:	19 95       	eicall
    3b0e:	1d c0       	rjmp	.+58     	; 0x3b4a <_hal_led_task+0x6e>
    3b10:	8d 81       	ldd	r24, Y+5	; 0x05
    3b12:	8f 5f       	subi	r24, 0xFF	; 255
    3b14:	8a 30       	cpi	r24, 0x0A	; 10
    3b16:	10 f4       	brcc	.+4      	; 0x3b1c <_hal_led_task+0x40>
    3b18:	8d 83       	std	Y+5, r24	; 0x05
    3b1a:	17 c0       	rjmp	.+46     	; 0x3b4a <_hal_led_task+0x6e>
    3b1c:	1d 82       	std	Y+5, r1	; 0x05
    3b1e:	d6 01       	movw	r26, r12
    3b20:	1c 96       	adiw	r26, 0x0c	; 12
    3b22:	ed 91       	ld	r30, X+
    3b24:	fc 91       	ld	r31, X
    3b26:	1d 97       	sbiw	r26, 0x0d	; 13
    3b28:	6a 81       	ldd	r22, Y+2	; 0x02
    3b2a:	88 81       	ld	r24, Y
    3b2c:	99 81       	ldd	r25, Y+1	; 0x01
    3b2e:	19 95       	eicall
    3b30:	0c c0       	rjmp	.+24     	; 0x3b4a <_hal_led_task+0x6e>
    3b32:	8d 81       	ldd	r24, Y+5	; 0x05
    3b34:	88 23       	and	r24, r24
    3b36:	31 f0       	breq	.+12     	; 0x3b44 <_hal_led_task+0x68>
    3b38:	81 2f       	mov	r24, r17
    3b3a:	a2 df       	rcall	.-188    	; 0x3a80 <_turn_on>
    3b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b3e:	81 50       	subi	r24, 0x01	; 1
    3b40:	8d 83       	std	Y+5, r24	; 0x05
    3b42:	03 c0       	rjmp	.+6      	; 0x3b4a <_hal_led_task+0x6e>
    3b44:	0c 83       	std	Y+4, r16	; 0x04
    3b46:	81 2f       	mov	r24, r17
    3b48:	6d df       	rcall	.-294    	; 0x3a24 <_turn_off>
    3b4a:	1f 5f       	subi	r17, 0xFF	; 255
    3b4c:	26 96       	adiw	r28, 0x06	; 6
    3b4e:	14 30       	cpi	r17, 0x04	; 4
    3b50:	79 f6       	brne	.-98     	; 0x3af0 <_hal_led_task+0x14>
    3b52:	65 e0       	ldi	r22, 0x05	; 5
    3b54:	70 e0       	ldi	r23, 0x00	; 0
    3b56:	80 e0       	ldi	r24, 0x00	; 0
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	0e 94 36 14 	call	0x286c	; 0x286c <vTaskDelay>
    3b5e:	c5 cf       	rjmp	.-118    	; 0x3aea <_hal_led_task+0xe>

00003b60 <led_create>:
    3b60:	cf 92       	push	r12
    3b62:	df 92       	push	r13
    3b64:	ef 92       	push	r14
    3b66:	ff 92       	push	r15
    3b68:	0f 93       	push	r16
    3b6a:	1f 93       	push	r17
    3b6c:	cf 93       	push	r28
    3b6e:	df 93       	push	r29
    3b70:	06 2f       	mov	r16, r22
    3b72:	0f 2e       	mov	r0, r31
    3b74:	f0 e9       	ldi	r31, 0x90	; 144
    3b76:	ef 2e       	mov	r14, r31
    3b78:	fa e1       	ldi	r31, 0x1A	; 26
    3b7a:	ff 2e       	mov	r15, r31
    3b7c:	f0 2d       	mov	r31, r0
    3b7e:	d7 01       	movw	r26, r14
    3b80:	18 96       	adiw	r26, 0x08	; 8
    3b82:	ed 91       	ld	r30, X+
    3b84:	fc 91       	ld	r31, X
    3b86:	19 97       	sbiw	r26, 0x09	; 9
    3b88:	66 e0       	ldi	r22, 0x06	; 6
    3b8a:	87 e2       	ldi	r24, 0x27	; 39
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	19 95       	eicall
    3b90:	c0 e2       	ldi	r28, 0x20	; 32
    3b92:	d9 e1       	ldi	r29, 0x19	; 25
    3b94:	0f 2e       	mov	r0, r31
    3b96:	f8 e2       	ldi	r31, 0x28	; 40
    3b98:	cf 2e       	mov	r12, r31
    3b9a:	d1 2c       	mov	r13, r1
    3b9c:	f0 2d       	mov	r31, r0
    3b9e:	d9 82       	std	Y+1, r13	; 0x01
    3ba0:	c8 82       	st	Y, r12
    3ba2:	86 e0       	ldi	r24, 0x06	; 6
    3ba4:	8a 83       	std	Y+2, r24	; 0x02
    3ba6:	1b 82       	std	Y+3, r1	; 0x03
    3ba8:	14 e0       	ldi	r17, 0x04	; 4
    3baa:	1c 83       	std	Y+4, r17	; 0x04
    3bac:	80 e0       	ldi	r24, 0x00	; 0
    3bae:	3a df       	rcall	.-396    	; 0x3a24 <_turn_off>
    3bb0:	d7 01       	movw	r26, r14
    3bb2:	18 96       	adiw	r26, 0x08	; 8
    3bb4:	ed 91       	ld	r30, X+
    3bb6:	fc 91       	ld	r31, X
    3bb8:	19 97       	sbiw	r26, 0x09	; 9
    3bba:	67 e0       	ldi	r22, 0x07	; 7
    3bbc:	87 e2       	ldi	r24, 0x27	; 39
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	19 95       	eicall
    3bc2:	df 82       	std	Y+7, r13	; 0x07
    3bc4:	ce 82       	std	Y+6, r12	; 0x06
    3bc6:	87 e0       	ldi	r24, 0x07	; 7
    3bc8:	88 87       	std	Y+8, r24	; 0x08
    3bca:	19 86       	std	Y+9, r1	; 0x09
    3bcc:	1a 87       	std	Y+10, r17	; 0x0a
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	29 df       	rcall	.-430    	; 0x3a24 <_turn_off>
    3bd2:	d7 01       	movw	r26, r14
    3bd4:	18 96       	adiw	r26, 0x08	; 8
    3bd6:	ed 91       	ld	r30, X+
    3bd8:	fc 91       	ld	r31, X
    3bda:	19 97       	sbiw	r26, 0x09	; 9
    3bdc:	65 e0       	ldi	r22, 0x05	; 5
    3bde:	83 e3       	ldi	r24, 0x33	; 51
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	19 95       	eicall
    3be4:	d7 01       	movw	r26, r14
    3be6:	18 96       	adiw	r26, 0x08	; 8
    3be8:	ed 91       	ld	r30, X+
    3bea:	fc 91       	ld	r31, X
    3bec:	19 97       	sbiw	r26, 0x09	; 9
    3bee:	61 e0       	ldi	r22, 0x01	; 1
    3bf0:	84 e3       	ldi	r24, 0x34	; 52
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	19 95       	eicall
    3bf6:	84 e3       	ldi	r24, 0x34	; 52
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	9d 87       	std	Y+13, r25	; 0x0d
    3bfc:	8c 87       	std	Y+12, r24	; 0x0c
    3bfe:	85 e0       	ldi	r24, 0x05	; 5
    3c00:	8e 87       	std	Y+14, r24	; 0x0e
    3c02:	1f 86       	std	Y+15, r1	; 0x0f
    3c04:	18 8b       	std	Y+16, r17	; 0x10
    3c06:	82 e0       	ldi	r24, 0x02	; 2
    3c08:	0d df       	rcall	.-486    	; 0x3a24 <_turn_off>
    3c0a:	d7 01       	movw	r26, r14
    3c0c:	18 96       	adiw	r26, 0x08	; 8
    3c0e:	ed 91       	ld	r30, X+
    3c10:	fc 91       	ld	r31, X
    3c12:	19 97       	sbiw	r26, 0x09	; 9
    3c14:	64 e0       	ldi	r22, 0x04	; 4
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	91 e0       	ldi	r25, 0x01	; 1
    3c1a:	19 95       	eicall
    3c1c:	d7 01       	movw	r26, r14
    3c1e:	18 96       	adiw	r26, 0x08	; 8
    3c20:	ed 91       	ld	r30, X+
    3c22:	fc 91       	ld	r31, X
    3c24:	19 97       	sbiw	r26, 0x09	; 9
    3c26:	61 e0       	ldi	r22, 0x01	; 1
    3c28:	82 e0       	ldi	r24, 0x02	; 2
    3c2a:	91 e0       	ldi	r25, 0x01	; 1
    3c2c:	19 95       	eicall
    3c2e:	82 e0       	ldi	r24, 0x02	; 2
    3c30:	91 e0       	ldi	r25, 0x01	; 1
    3c32:	9b 8b       	std	Y+19, r25	; 0x13
    3c34:	8a 8b       	std	Y+18, r24	; 0x12
    3c36:	1c 8b       	std	Y+20, r17	; 0x14
    3c38:	1d 8a       	std	Y+21, r1	; 0x15
    3c3a:	1e 8b       	std	Y+22, r17	; 0x16
    3c3c:	83 e0       	ldi	r24, 0x03	; 3
    3c3e:	f2 de       	rcall	.-540    	; 0x3a24 <_turn_off>
    3c40:	e1 2c       	mov	r14, r1
    3c42:	f1 2c       	mov	r15, r1
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	40 ec       	ldi	r20, 0xC0	; 192
    3c4a:	50 e0       	ldi	r21, 0x00	; 0
    3c4c:	62 e8       	ldi	r22, 0x82	; 130
    3c4e:	75 e0       	ldi	r23, 0x05	; 5
    3c50:	8e e6       	ldi	r24, 0x6E	; 110
    3c52:	9d e1       	ldi	r25, 0x1D	; 29
    3c54:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskCreate>
    3c58:	df 91       	pop	r29
    3c5a:	cf 91       	pop	r28
    3c5c:	1f 91       	pop	r17
    3c5e:	0f 91       	pop	r16
    3c60:	ff 90       	pop	r15
    3c62:	ef 90       	pop	r14
    3c64:	df 90       	pop	r13
    3c66:	cf 90       	pop	r12
    3c68:	08 95       	ret

00003c6a <led_slow_blink>:
    3c6a:	0f 93       	push	r16
    3c6c:	1f 93       	push	r17
    3c6e:	cf 93       	push	r28
    3c70:	df 93       	push	r29
    3c72:	c8 2f       	mov	r28, r24
    3c74:	d0 e0       	ldi	r29, 0x00	; 0
    3c76:	8e 01       	movw	r16, r28
    3c78:	00 0f       	add	r16, r16
    3c7a:	11 1f       	adc	r17, r17
    3c7c:	d8 01       	movw	r26, r16
    3c7e:	ac 0f       	add	r26, r28
    3c80:	bd 1f       	adc	r27, r29
    3c82:	aa 0f       	add	r26, r26
    3c84:	bb 1f       	adc	r27, r27
    3c86:	a0 5e       	subi	r26, 0xE0	; 224
    3c88:	b6 4e       	sbci	r27, 0xE6	; 230
    3c8a:	e0 91 9c 1a 	lds	r30, 0x1A9C	; 0x801a9c <register_access+0xc>
    3c8e:	f0 91 9d 1a 	lds	r31, 0x1A9D	; 0x801a9d <register_access+0xd>
    3c92:	12 96       	adiw	r26, 0x02	; 2
    3c94:	6c 91       	ld	r22, X
    3c96:	12 97       	sbiw	r26, 0x02	; 2
    3c98:	8d 91       	ld	r24, X+
    3c9a:	9c 91       	ld	r25, X
    3c9c:	19 95       	eicall
    3c9e:	c0 0f       	add	r28, r16
    3ca0:	d1 1f       	adc	r29, r17
    3ca2:	cc 0f       	add	r28, r28
    3ca4:	dd 1f       	adc	r29, r29
    3ca6:	c0 5e       	subi	r28, 0xE0	; 224
    3ca8:	d6 4e       	sbci	r29, 0xE6	; 230
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	8c 83       	std	Y+4, r24	; 0x04
    3cae:	df 91       	pop	r29
    3cb0:	cf 91       	pop	r28
    3cb2:	1f 91       	pop	r17
    3cb4:	0f 91       	pop	r16
    3cb6:	08 95       	ret

00003cb8 <led_fast_blink>:
    3cb8:	0f 93       	push	r16
    3cba:	1f 93       	push	r17
    3cbc:	cf 93       	push	r28
    3cbe:	df 93       	push	r29
    3cc0:	c8 2f       	mov	r28, r24
    3cc2:	d0 e0       	ldi	r29, 0x00	; 0
    3cc4:	8e 01       	movw	r16, r28
    3cc6:	00 0f       	add	r16, r16
    3cc8:	11 1f       	adc	r17, r17
    3cca:	d8 01       	movw	r26, r16
    3ccc:	ac 0f       	add	r26, r28
    3cce:	bd 1f       	adc	r27, r29
    3cd0:	aa 0f       	add	r26, r26
    3cd2:	bb 1f       	adc	r27, r27
    3cd4:	a0 5e       	subi	r26, 0xE0	; 224
    3cd6:	b6 4e       	sbci	r27, 0xE6	; 230
    3cd8:	e0 91 9c 1a 	lds	r30, 0x1A9C	; 0x801a9c <register_access+0xc>
    3cdc:	f0 91 9d 1a 	lds	r31, 0x1A9D	; 0x801a9d <register_access+0xd>
    3ce0:	12 96       	adiw	r26, 0x02	; 2
    3ce2:	6c 91       	ld	r22, X
    3ce4:	12 97       	sbiw	r26, 0x02	; 2
    3ce6:	8d 91       	ld	r24, X+
    3ce8:	9c 91       	ld	r25, X
    3cea:	19 95       	eicall
    3cec:	c0 0f       	add	r28, r16
    3cee:	d1 1f       	adc	r29, r17
    3cf0:	cc 0f       	add	r28, r28
    3cf2:	dd 1f       	adc	r29, r29
    3cf4:	c0 5e       	subi	r28, 0xE0	; 224
    3cf6:	d6 4e       	sbci	r29, 0xE6	; 230
    3cf8:	82 e0       	ldi	r24, 0x02	; 2
    3cfa:	8c 83       	std	Y+4, r24	; 0x04
    3cfc:	df 91       	pop	r29
    3cfe:	cf 91       	pop	r28
    3d00:	1f 91       	pop	r17
    3d02:	0f 91       	pop	r16
    3d04:	08 95       	ret

00003d06 <led_led_on>:
    3d06:	28 2f       	mov	r18, r24
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	f9 01       	movw	r30, r18
    3d0c:	ee 0f       	add	r30, r30
    3d0e:	ff 1f       	adc	r31, r31
    3d10:	e2 0f       	add	r30, r18
    3d12:	f3 1f       	adc	r31, r19
    3d14:	ee 0f       	add	r30, r30
    3d16:	ff 1f       	adc	r31, r31
    3d18:	e0 5e       	subi	r30, 0xE0	; 224
    3d1a:	f6 4e       	sbci	r31, 0xE6	; 230
    3d1c:	93 e0       	ldi	r25, 0x03	; 3
    3d1e:	94 83       	std	Z+4, r25	; 0x04
    3d20:	af ce       	rjmp	.-674    	; 0x3a80 <_turn_on>
    3d22:	08 95       	ret

00003d24 <led_led_off>:
    3d24:	28 2f       	mov	r18, r24
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	f9 01       	movw	r30, r18
    3d2a:	ee 0f       	add	r30, r30
    3d2c:	ff 1f       	adc	r31, r31
    3d2e:	e2 0f       	add	r30, r18
    3d30:	f3 1f       	adc	r31, r19
    3d32:	ee 0f       	add	r30, r30
    3d34:	ff 1f       	adc	r31, r31
    3d36:	e0 5e       	subi	r30, 0xE0	; 224
    3d38:	f6 4e       	sbci	r31, 0xE6	; 230
    3d3a:	94 e0       	ldi	r25, 0x04	; 4
    3d3c:	94 83       	std	Z+4, r25	; 0x04
    3d3e:	72 ce       	rjmp	.-796    	; 0x3a24 <_turn_off>
    3d40:	08 95       	ret

00003d42 <led_long_puls>:
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	fc 01       	movw	r30, r24
    3d46:	ee 0f       	add	r30, r30
    3d48:	ff 1f       	adc	r31, r31
    3d4a:	df 01       	movw	r26, r30
    3d4c:	a8 0f       	add	r26, r24
    3d4e:	b9 1f       	adc	r27, r25
    3d50:	aa 0f       	add	r26, r26
    3d52:	bb 1f       	adc	r27, r27
    3d54:	a0 5e       	subi	r26, 0xE0	; 224
    3d56:	b6 4e       	sbci	r27, 0xE6	; 230
    3d58:	24 e0       	ldi	r18, 0x04	; 4
    3d5a:	15 96       	adiw	r26, 0x05	; 5
    3d5c:	2c 93       	st	X, r18
    3d5e:	15 97       	sbiw	r26, 0x05	; 5
    3d60:	fd 01       	movw	r30, r26
    3d62:	14 82       	std	Z+4, r1	; 0x04
    3d64:	08 95       	ret

00003d66 <led_short_puls>:
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	fc 01       	movw	r30, r24
    3d6a:	ee 0f       	add	r30, r30
    3d6c:	ff 1f       	adc	r31, r31
    3d6e:	df 01       	movw	r26, r30
    3d70:	a8 0f       	add	r26, r24
    3d72:	b9 1f       	adc	r27, r25
    3d74:	aa 0f       	add	r26, r26
    3d76:	bb 1f       	adc	r27, r27
    3d78:	a0 5e       	subi	r26, 0xE0	; 224
    3d7a:	b6 4e       	sbci	r27, 0xE6	; 230
    3d7c:	21 e0       	ldi	r18, 0x01	; 1
    3d7e:	15 96       	adiw	r26, 0x05	; 5
    3d80:	2c 93       	st	X, r18
    3d82:	15 97       	sbiw	r26, 0x05	; 5
    3d84:	fd 01       	movw	r30, r26
    3d86:	14 82       	std	Z+4, r1	; 0x04
    3d88:	08 95       	ret

00003d8a <_serial_call_back>:
    3d8a:	0f 93       	push	r16
    3d8c:	1f 93       	push	r17
    3d8e:	cf 93       	push	r28
    3d90:	df 93       	push	r29
    3d92:	1f 92       	push	r1
    3d94:	1f 92       	push	r1
    3d96:	cd b7       	in	r28, 0x3d	; 61
    3d98:	de b7       	in	r29, 0x3e	; 62
    3d9a:	8c 01       	movw	r16, r24
    3d9c:	19 82       	std	Y+1, r1	; 0x01
    3d9e:	2d c0       	rjmp	.+90     	; 0x3dfa <_serial_call_back+0x70>
    3da0:	e0 91 9c 19 	lds	r30, 0x199C	; 0x80199c <rec_buf_inp.2947>
    3da4:	ec 32       	cpi	r30, 0x2C	; 44
    3da6:	50 f4       	brcc	.+20     	; 0x3dbc <_serial_call_back+0x32>
    3da8:	81 e0       	ldi	r24, 0x01	; 1
    3daa:	8e 0f       	add	r24, r30
    3dac:	80 93 9c 19 	sts	0x199C, r24	; 0x80199c <rec_buf_inp.2947>
    3db0:	f0 e0       	ldi	r31, 0x00	; 0
    3db2:	e2 53       	subi	r30, 0x32	; 50
    3db4:	f6 4e       	sbci	r31, 0xE6	; 230
    3db6:	8a 81       	ldd	r24, Y+2	; 0x02
    3db8:	80 83       	st	Z, r24
    3dba:	02 c0       	rjmp	.+4      	; 0x3dc0 <_serial_call_back+0x36>
    3dbc:	10 92 9c 19 	sts	0x199C, r1	; 0x80199c <rec_buf_inp.2947>
    3dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc2:	8a 30       	cpi	r24, 0x0A	; 10
    3dc4:	d1 f4       	brne	.+52     	; 0x3dfa <_serial_call_back+0x70>
    3dc6:	40 91 9c 19 	lds	r20, 0x199C	; 0x80199c <rec_buf_inp.2947>
    3dca:	50 e0       	ldi	r21, 0x00	; 0
    3dcc:	fa 01       	movw	r30, r20
    3dce:	e4 53       	subi	r30, 0x34	; 52
    3dd0:	f6 4e       	sbci	r31, 0xE6	; 230
    3dd2:	10 82       	st	Z, r1
    3dd4:	41 50       	subi	r20, 0x01	; 1
    3dd6:	51 09       	sbc	r21, r1
    3dd8:	9e 01       	movw	r18, r28
    3dda:	2f 5f       	subi	r18, 0xFF	; 255
    3ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    3dde:	6e ec       	ldi	r22, 0xCE	; 206
    3de0:	79 e1       	ldi	r23, 0x19	; 25
    3de2:	80 91 9f 19 	lds	r24, 0x199F	; 0x80199f <_serial_reply_buffer_handle>
    3de6:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <_serial_reply_buffer_handle+0x1>
    3dea:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <xStreamBufferSendFromISR>
    3dee:	89 81       	ldd	r24, Y+1	; 0x01
    3df0:	81 11       	cpse	r24, r1
    3df2:	0e 94 13 09 	call	0x1226	; 0x1226 <vPortYield>
    3df6:	10 92 9c 19 	sts	0x199C, r1	; 0x80199c <rec_buf_inp.2947>
    3dfa:	be 01       	movw	r22, r28
    3dfc:	6e 5f       	subi	r22, 0xFE	; 254
    3dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    3e00:	c8 01       	movw	r24, r16
    3e02:	48 d6       	rcall	.+3216   	; 0x4a94 <serial_get_byte>
    3e04:	88 23       	and	r24, r24
    3e06:	61 f2       	breq	.-104    	; 0x3da0 <_serial_call_back+0x16>
    3e08:	0f 90       	pop	r0
    3e0a:	0f 90       	pop	r0
    3e0c:	df 91       	pop	r29
    3e0e:	cf 91       	pop	r28
    3e10:	1f 91       	pop	r17
    3e12:	0f 91       	pop	r16
    3e14:	08 95       	ret

00003e16 <_upload_message>:
    3e16:	0f 93       	push	r16
    3e18:	1f 93       	push	r17
    3e1a:	cf 93       	push	r28
    3e1c:	df 93       	push	r29
    3e1e:	8c 01       	movw	r16, r24
    3e20:	eb 01       	movw	r28, r22
    3e22:	80 91 9f 19 	lds	r24, 0x199F	; 0x80199f <_serial_reply_buffer_handle>
    3e26:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <_serial_reply_buffer_handle+0x1>
    3e2a:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <xStreamBufferReset>
    3e2e:	b8 01       	movw	r22, r16
    3e30:	88 e3       	ldi	r24, 0x38	; 56
    3e32:	99 e1       	ldi	r25, 0x19	; 25
    3e34:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <strcpy>
    3e38:	20 97       	sbiw	r28, 0x00	; 0
    3e3a:	79 f0       	breq	.+30     	; 0x3e5a <_upload_message+0x44>
    3e3c:	e8 e3       	ldi	r30, 0x38	; 56
    3e3e:	f9 e1       	ldi	r31, 0x19	; 25
    3e40:	01 90       	ld	r0, Z+
    3e42:	00 20       	and	r0, r0
    3e44:	e9 f7       	brne	.-6      	; 0x3e40 <_upload_message+0x2a>
    3e46:	31 97       	sbiw	r30, 0x01	; 1
    3e48:	80 e2       	ldi	r24, 0x20	; 32
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	91 83       	std	Z+1, r25	; 0x01
    3e4e:	80 83       	st	Z, r24
    3e50:	be 01       	movw	r22, r28
    3e52:	88 e3       	ldi	r24, 0x38	; 56
    3e54:	99 e1       	ldi	r25, 0x19	; 25
    3e56:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <strcat>
    3e5a:	e8 e3       	ldi	r30, 0x38	; 56
    3e5c:	f9 e1       	ldi	r31, 0x19	; 25
    3e5e:	df 01       	movw	r26, r30
    3e60:	0d 90       	ld	r0, X+
    3e62:	00 20       	and	r0, r0
    3e64:	e9 f7       	brne	.-6      	; 0x3e60 <_upload_message+0x4a>
    3e66:	11 97       	sbiw	r26, 0x01	; 1
    3e68:	8d e0       	ldi	r24, 0x0D	; 13
    3e6a:	9a e0       	ldi	r25, 0x0A	; 10
    3e6c:	11 96       	adiw	r26, 0x01	; 1
    3e6e:	9c 93       	st	X, r25
    3e70:	8e 93       	st	-X, r24
    3e72:	12 96       	adiw	r26, 0x02	; 2
    3e74:	1c 92       	st	X, r1
    3e76:	01 90       	ld	r0, Z+
    3e78:	00 20       	and	r0, r0
    3e7a:	e9 f7       	brne	.-6      	; 0x3e76 <_upload_message+0x60>
    3e7c:	31 97       	sbiw	r30, 0x01	; 1
    3e7e:	e8 53       	subi	r30, 0x38	; 56
    3e80:	f9 41       	sbci	r31, 0x19	; 25
    3e82:	ae 2f       	mov	r26, r30
    3e84:	88 e3       	ldi	r24, 0x38	; 56
    3e86:	99 e1       	ldi	r25, 0x19	; 25
    3e88:	ac 01       	movw	r20, r24
    3e8a:	6a 2f       	mov	r22, r26
    3e8c:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <_rn2483_serial>
    3e90:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <_rn2483_serial+0x1>
    3e94:	af d5       	rcall	.+2910   	; 0x49f4 <serial_send_bytes>
    3e96:	81 11       	cpse	r24, r1
    3e98:	11 c0       	rjmp	.+34     	; 0x3ebc <_upload_message+0xa6>
    3e9a:	08 e2       	ldi	r16, 0x28	; 40
    3e9c:	15 e0       	ldi	r17, 0x05	; 5
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	4d e2       	ldi	r20, 0x2D	; 45
    3ea4:	50 e0       	ldi	r21, 0x00	; 0
    3ea6:	68 e2       	ldi	r22, 0x28	; 40
    3ea8:	7a e1       	ldi	r23, 0x1A	; 26
    3eaa:	80 91 9f 19 	lds	r24, 0x199F	; 0x80199f <_serial_reply_buffer_handle>
    3eae:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <_serial_reply_buffer_handle+0x1>
    3eb2:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <xStreamBufferReceive>
    3eb6:	88 e2       	ldi	r24, 0x28	; 40
    3eb8:	9a e1       	ldi	r25, 0x1A	; 26
    3eba:	02 c0       	rjmp	.+4      	; 0x3ec0 <_upload_message+0xaa>
    3ebc:	80 e0       	ldi	r24, 0x00	; 0
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	df 91       	pop	r29
    3ec2:	cf 91       	pop	r28
    3ec4:	1f 91       	pop	r17
    3ec6:	0f 91       	pop	r16
    3ec8:	08 95       	ret

00003eca <_reply2return_code>:
    3eca:	2f 92       	push	r2
    3ecc:	3f 92       	push	r3
    3ece:	4f 92       	push	r4
    3ed0:	5f 92       	push	r5
    3ed2:	6f 92       	push	r6
    3ed4:	7f 92       	push	r7
    3ed6:	8f 92       	push	r8
    3ed8:	9f 92       	push	r9
    3eda:	af 92       	push	r10
    3edc:	bf 92       	push	r11
    3ede:	cf 92       	push	r12
    3ee0:	df 92       	push	r13
    3ee2:	ef 92       	push	r14
    3ee4:	ff 92       	push	r15
    3ee6:	0f 93       	push	r16
    3ee8:	1f 93       	push	r17
    3eea:	cf 93       	push	r28
    3eec:	df 93       	push	r29
    3eee:	5c 01       	movw	r10, r24
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	01 90       	ld	r0, Z+
    3ef4:	00 20       	and	r0, r0
    3ef6:	e9 f7       	brne	.-6      	; 0x3ef2 <_reply2return_code+0x28>
    3ef8:	31 97       	sbiw	r30, 0x01	; 1
    3efa:	6f 01       	movw	r12, r30
    3efc:	c8 1a       	sub	r12, r24
    3efe:	d9 0a       	sbc	r13, r25
    3f00:	5c 2c       	mov	r5, r12
    3f02:	0f 2e       	mov	r0, r31
    3f04:	f3 e2       	ldi	r31, 0x23	; 35
    3f06:	8f 2e       	mov	r8, r31
    3f08:	f8 e0       	ldi	r31, 0x08	; 8
    3f0a:	9f 2e       	mov	r9, r31
    3f0c:	f0 2d       	mov	r31, r0
    3f0e:	e1 2c       	mov	r14, r1
    3f10:	f1 2c       	mov	r15, r1
    3f12:	4c 2c       	mov	r4, r12
    3f14:	37 01       	movw	r6, r14
    3f16:	f4 01       	movw	r30, r8
    3f18:	01 81       	ldd	r16, Z+1	; 0x01
    3f1a:	12 81       	ldd	r17, Z+2	; 0x02
    3f1c:	e8 01       	movw	r28, r16
    3f1e:	09 90       	ld	r0, Y+
    3f20:	00 20       	and	r0, r0
    3f22:	e9 f7       	brne	.-6      	; 0x3f1e <_reply2return_code+0x54>
    3f24:	21 97       	sbiw	r28, 0x01	; 1
    3f26:	c0 1b       	sub	r28, r16
    3f28:	d1 0b       	sbc	r29, r17
    3f2a:	3c 2e       	mov	r3, r28
    3f2c:	f9 e0       	ldi	r31, 0x09	; 9
    3f2e:	cf 16       	cp	r12, r31
    3f30:	d1 04       	cpc	r13, r1
    3f32:	58 f0       	brcs	.+22     	; 0x3f4a <_reply2return_code+0x80>
    3f34:	f4 01       	movw	r30, r8
    3f36:	20 80       	ld	r2, Z
    3f38:	fe e0       	ldi	r31, 0x0E	; 14
    3f3a:	2f 12       	cpse	r2, r31
    3f3c:	06 c0       	rjmp	.+12     	; 0x3f4a <_reply2return_code+0x80>
    3f3e:	b8 01       	movw	r22, r16
    3f40:	c5 01       	movw	r24, r10
    3f42:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcasestr>
    3f46:	89 2b       	or	r24, r25
    3f48:	09 f5       	brne	.+66     	; 0x3f8c <_reply2return_code+0xc2>
    3f4a:	44 2d       	mov	r20, r4
    3f4c:	35 14       	cp	r3, r5
    3f4e:	08 f4       	brcc	.+2      	; 0x3f52 <_reply2return_code+0x88>
    3f50:	4c 2f       	mov	r20, r28
    3f52:	50 e0       	ldi	r21, 0x00	; 0
    3f54:	b8 01       	movw	r22, r16
    3f56:	c5 01       	movw	r24, r10
    3f58:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <strncasecmp>
    3f5c:	89 2b       	or	r24, r25
    3f5e:	49 f4       	brne	.+18     	; 0x3f72 <_reply2return_code+0xa8>
    3f60:	f3 01       	movw	r30, r6
    3f62:	ee 0f       	add	r30, r30
    3f64:	ff 1f       	adc	r31, r31
    3f66:	e6 0d       	add	r30, r6
    3f68:	f7 1d       	adc	r31, r7
    3f6a:	ed 5d       	subi	r30, 0xDD	; 221
    3f6c:	f7 4f       	sbci	r31, 0xF7	; 247
    3f6e:	20 80       	ld	r2, Z
    3f70:	0d c0       	rjmp	.+26     	; 0x3f8c <_reply2return_code+0xc2>
    3f72:	8f ef       	ldi	r24, 0xFF	; 255
    3f74:	e8 1a       	sub	r14, r24
    3f76:	f8 0a       	sbc	r15, r24
    3f78:	e3 e0       	ldi	r30, 0x03	; 3
    3f7a:	8e 0e       	add	r8, r30
    3f7c:	91 1c       	adc	r9, r1
    3f7e:	f1 e1       	ldi	r31, 0x11	; 17
    3f80:	ef 16       	cp	r14, r31
    3f82:	f1 04       	cpc	r15, r1
    3f84:	39 f6       	brne	.-114    	; 0x3f14 <_reply2return_code+0x4a>
    3f86:	68 94       	set
    3f88:	22 24       	eor	r2, r2
    3f8a:	24 f8       	bld	r2, 4
    3f8c:	82 2d       	mov	r24, r2
    3f8e:	df 91       	pop	r29
    3f90:	cf 91       	pop	r28
    3f92:	1f 91       	pop	r17
    3f94:	0f 91       	pop	r16
    3f96:	ff 90       	pop	r15
    3f98:	ef 90       	pop	r14
    3f9a:	df 90       	pop	r13
    3f9c:	cf 90       	pop	r12
    3f9e:	bf 90       	pop	r11
    3fa0:	af 90       	pop	r10
    3fa2:	9f 90       	pop	r9
    3fa4:	8f 90       	pop	r8
    3fa6:	7f 90       	pop	r7
    3fa8:	6f 90       	pop	r6
    3faa:	5f 90       	pop	r5
    3fac:	4f 90       	pop	r4
    3fae:	3f 90       	pop	r3
    3fb0:	2f 90       	pop	r2
    3fb2:	08 95       	ret

00003fb4 <_upload_message_rc>:
    3fb4:	30 df       	rcall	.-416    	; 0x3e16 <_upload_message>
    3fb6:	89 cf       	rjmp	.-238    	; 0x3eca <_reply2return_code>
    3fb8:	08 95       	ret

00003fba <lora_driver_flush_buffers>:
    3fba:	80 91 9f 19 	lds	r24, 0x199F	; 0x80199f <_serial_reply_buffer_handle>
    3fbe:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <_serial_reply_buffer_handle+0x1>
    3fc2:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <xStreamBufferReset>
    3fc6:	08 95       	ret

00003fc8 <lora_driver_create>:
    3fc8:	8f 92       	push	r8
    3fca:	9f 92       	push	r9
    3fcc:	af 92       	push	r10
    3fce:	cf 92       	push	r12
    3fd0:	ef 92       	push	r14
    3fd2:	0f 93       	push	r16
    3fd4:	1f 93       	push	r17
    3fd6:	cf 93       	push	r28
    3fd8:	c8 2f       	mov	r28, r24
    3fda:	8b 01       	movw	r16, r22
    3fdc:	41 e0       	ldi	r20, 0x01	; 1
    3fde:	60 e0       	ldi	r22, 0x00	; 0
    3fe0:	70 e0       	ldi	r23, 0x00	; 0
    3fe2:	88 ec       	ldi	r24, 0xC8	; 200
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <xStreamBufferGenericCreate>
    3fea:	90 93 a0 19 	sts	0x19A0, r25	; 0x8019a0 <_serial_reply_buffer_handle+0x1>
    3fee:	80 93 9f 19 	sts	0x199F, r24	; 0x80199f <_serial_reply_buffer_handle>
    3ff2:	10 93 9e 19 	sts	0x199E, r17	; 0x80199e <_downlinkMessageBuffer+0x1>
    3ff6:	00 93 9d 19 	sts	0x199D, r16	; 0x80199d <_downlinkMessageBuffer>
    3ffa:	0f 2e       	mov	r0, r31
    3ffc:	f5 ec       	ldi	r31, 0xC5	; 197
    3ffe:	8f 2e       	mov	r8, r31
    4000:	fe e1       	ldi	r31, 0x1E	; 30
    4002:	9f 2e       	mov	r9, r31
    4004:	f0 2d       	mov	r31, r0
    4006:	68 94       	set
    4008:	aa 24       	eor	r10, r10
    400a:	a6 f8       	bld	r10, 6
    400c:	68 94       	set
    400e:	cc 24       	eor	r12, r12
    4010:	c6 f8       	bld	r12, 6
    4012:	e1 2c       	mov	r14, r1
    4014:	00 e0       	ldi	r16, 0x00	; 0
    4016:	23 e0       	ldi	r18, 0x03	; 3
    4018:	40 e0       	ldi	r20, 0x00	; 0
    401a:	51 ee       	ldi	r21, 0xE1	; 225
    401c:	60 e0       	ldi	r22, 0x00	; 0
    401e:	70 e0       	ldi	r23, 0x00	; 0
    4020:	8c 2f       	mov	r24, r28
    4022:	2c d4       	rcall	.+2136   	; 0x487c <serial_new_instance>
    4024:	90 93 a2 19 	sts	0x19A2, r25	; 0x8019a2 <_rn2483_serial+0x1>
    4028:	80 93 a1 19 	sts	0x19A1, r24	; 0x8019a1 <_rn2483_serial>
    402c:	e0 91 98 1a 	lds	r30, 0x1A98	; 0x801a98 <register_access+0x8>
    4030:	f0 91 99 1a 	lds	r31, 0x1A99	; 0x801a99 <register_access+0x9>
    4034:	64 e0       	ldi	r22, 0x04	; 4
    4036:	87 e0       	ldi	r24, 0x07	; 7
    4038:	91 e0       	ldi	r25, 0x01	; 1
    403a:	19 95       	eicall
    403c:	cf 91       	pop	r28
    403e:	1f 91       	pop	r17
    4040:	0f 91       	pop	r16
    4042:	ef 90       	pop	r14
    4044:	cf 90       	pop	r12
    4046:	af 90       	pop	r10
    4048:	9f 90       	pop	r9
    404a:	8f 90       	pop	r8
    404c:	08 95       	ret

0000404e <lora_driver_reset_rn2483>:
    404e:	88 23       	and	r24, r24
    4050:	49 f0       	breq	.+18     	; 0x4064 <lora_driver_reset_rn2483+0x16>
    4052:	e0 91 a2 1a 	lds	r30, 0x1AA2	; 0x801aa2 <register_access+0x12>
    4056:	f0 91 a3 1a 	lds	r31, 0x1AA3	; 0x801aa3 <register_access+0x13>
    405a:	64 e0       	ldi	r22, 0x04	; 4
    405c:	88 e0       	ldi	r24, 0x08	; 8
    405e:	91 e0       	ldi	r25, 0x01	; 1
    4060:	19 95       	eicall
    4062:	08 95       	ret
    4064:	e0 91 98 1a 	lds	r30, 0x1A98	; 0x801a98 <register_access+0x8>
    4068:	f0 91 99 1a 	lds	r31, 0x1A99	; 0x801a99 <register_access+0x9>
    406c:	64 e0       	ldi	r22, 0x04	; 4
    406e:	88 e0       	ldi	r24, 0x08	; 8
    4070:	91 e0       	ldi	r25, 0x01	; 1
    4072:	19 95       	eicall
    4074:	08 95       	ret

00004076 <lora_driver_rn2483_factory_reset>:
    4076:	60 e0       	ldi	r22, 0x00	; 0
    4078:	70 e0       	ldi	r23, 0x00	; 0
    407a:	89 ea       	ldi	r24, 0xA9	; 169
    407c:	95 e0       	ldi	r25, 0x05	; 5
    407e:	cb de       	rcall	.-618    	; 0x3e16 <_upload_message>
    4080:	e8 e2       	ldi	r30, 0x28	; 40
    4082:	fa e1       	ldi	r31, 0x1A	; 26
    4084:	01 90       	ld	r0, Z+
    4086:	00 20       	and	r0, r0
    4088:	e9 f7       	brne	.-6      	; 0x4084 <lora_driver_rn2483_factory_reset+0xe>
    408a:	31 97       	sbiw	r30, 0x01	; 1
    408c:	e8 52       	subi	r30, 0x28	; 40
    408e:	fa 41       	sbci	r31, 0x1A	; 26
    4090:	81 e0       	ldi	r24, 0x01	; 1
    4092:	75 97       	sbiw	r30, 0x15	; 21
    4094:	08 f0       	brcs	.+2      	; 0x4098 <lora_driver_rn2483_factory_reset+0x22>
    4096:	80 e0       	ldi	r24, 0x00	; 0
    4098:	08 95       	ret

0000409a <lora_driver_get_rn2483_hweui>:
    409a:	cf 93       	push	r28
    409c:	df 93       	push	r29
    409e:	ec 01       	movw	r28, r24
    40a0:	60 e0       	ldi	r22, 0x00	; 0
    40a2:	70 e0       	ldi	r23, 0x00	; 0
    40a4:	8a eb       	ldi	r24, 0xBA	; 186
    40a6:	95 e0       	ldi	r25, 0x05	; 5
    40a8:	b6 de       	rcall	.-660    	; 0x3e16 <_upload_message>
    40aa:	e8 e2       	ldi	r30, 0x28	; 40
    40ac:	fa e1       	ldi	r31, 0x1A	; 26
    40ae:	01 90       	ld	r0, Z+
    40b0:	00 20       	and	r0, r0
    40b2:	e9 f7       	brne	.-6      	; 0x40ae <lora_driver_get_rn2483_hweui+0x14>
    40b4:	e9 53       	subi	r30, 0x39	; 57
    40b6:	fa 41       	sbci	r31, 0x1A	; 26
    40b8:	39 f4       	brne	.+14     	; 0x40c8 <lora_driver_get_rn2483_hweui+0x2e>
    40ba:	68 e2       	ldi	r22, 0x28	; 40
    40bc:	7a e1       	ldi	r23, 0x1A	; 26
    40be:	ce 01       	movw	r24, r28
    40c0:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <strcpy>
    40c4:	80 e0       	ldi	r24, 0x00	; 0
    40c6:	02 c0       	rjmp	.+4      	; 0x40cc <lora_driver_get_rn2483_hweui+0x32>
    40c8:	18 82       	st	Y, r1
    40ca:	81 e0       	ldi	r24, 0x01	; 1
    40cc:	df 91       	pop	r29
    40ce:	cf 91       	pop	r28
    40d0:	08 95       	ret

000040d2 <lora_driver_set_device_identifier>:
    40d2:	fc 01       	movw	r30, r24
    40d4:	01 90       	ld	r0, Z+
    40d6:	00 20       	and	r0, r0
    40d8:	e9 f7       	brne	.-6      	; 0x40d4 <lora_driver_set_device_identifier+0x2>
    40da:	9f 01       	movw	r18, r30
    40dc:	21 51       	subi	r18, 0x11	; 17
    40de:	31 09       	sbc	r19, r1
    40e0:	28 17       	cp	r18, r24
    40e2:	39 07       	cpc	r19, r25
    40e4:	29 f4       	brne	.+10     	; 0x40f0 <lora_driver_set_device_identifier+0x1e>
    40e6:	bc 01       	movw	r22, r24
    40e8:	88 ee       	ldi	r24, 0xE8	; 232
    40ea:	95 e0       	ldi	r25, 0x05	; 5
    40ec:	63 cf       	rjmp	.-314    	; 0x3fb4 <_upload_message_rc>
    40ee:	08 95       	ret
    40f0:	89 e0       	ldi	r24, 0x09	; 9
    40f2:	08 95       	ret

000040f4 <lora_driver_set_application_identifier>:
    40f4:	fc 01       	movw	r30, r24
    40f6:	01 90       	ld	r0, Z+
    40f8:	00 20       	and	r0, r0
    40fa:	e9 f7       	brne	.-6      	; 0x40f6 <lora_driver_set_application_identifier+0x2>
    40fc:	9f 01       	movw	r18, r30
    40fe:	21 51       	subi	r18, 0x11	; 17
    4100:	31 09       	sbc	r19, r1
    4102:	28 17       	cp	r18, r24
    4104:	39 07       	cpc	r19, r25
    4106:	29 f4       	brne	.+10     	; 0x4112 <lora_driver_set_application_identifier+0x1e>
    4108:	bc 01       	movw	r22, r24
    410a:	87 ef       	ldi	r24, 0xF7	; 247
    410c:	95 e0       	ldi	r25, 0x05	; 5
    410e:	52 cf       	rjmp	.-348    	; 0x3fb4 <_upload_message_rc>
    4110:	08 95       	ret
    4112:	89 e0       	ldi	r24, 0x09	; 9
    4114:	08 95       	ret

00004116 <lora_driver_set_application_key>:
    4116:	fc 01       	movw	r30, r24
    4118:	01 90       	ld	r0, Z+
    411a:	00 20       	and	r0, r0
    411c:	e9 f7       	brne	.-6      	; 0x4118 <lora_driver_set_application_key+0x2>
    411e:	9f 01       	movw	r18, r30
    4120:	21 52       	subi	r18, 0x21	; 33
    4122:	31 09       	sbc	r19, r1
    4124:	28 17       	cp	r18, r24
    4126:	39 07       	cpc	r19, r25
    4128:	29 f4       	brne	.+10     	; 0x4134 <lora_driver_set_application_key+0x1e>
    412a:	bc 01       	movw	r22, r24
    412c:	86 e0       	ldi	r24, 0x06	; 6
    412e:	96 e0       	ldi	r25, 0x06	; 6
    4130:	41 cf       	rjmp	.-382    	; 0x3fb4 <_upload_message_rc>
    4132:	08 95       	ret
    4134:	89 e0       	ldi	r24, 0x09	; 9
    4136:	08 95       	ret

00004138 <lora_driver_save_mac>:
    4138:	60 e0       	ldi	r22, 0x00	; 0
    413a:	70 e0       	ldi	r23, 0x00	; 0
    413c:	85 e4       	ldi	r24, 0x45	; 69
    413e:	96 e0       	ldi	r25, 0x06	; 6
    4140:	39 cf       	rjmp	.-398    	; 0x3fb4 <_upload_message_rc>
    4142:	08 95       	ret

00004144 <lora_driver_join>:
    4144:	0f 93       	push	r16
    4146:	1f 93       	push	r17
    4148:	e8 2f       	mov	r30, r24
    414a:	f0 e0       	ldi	r31, 0x00	; 0
    414c:	ee 0f       	add	r30, r30
    414e:	ff 1f       	adc	r31, r31
    4150:	e1 5e       	subi	r30, 0xE1	; 225
    4152:	f7 4f       	sbci	r31, 0xF7	; 247
    4154:	60 81       	ld	r22, Z
    4156:	71 81       	ldd	r23, Z+1	; 0x01
    4158:	8e e4       	ldi	r24, 0x4E	; 78
    415a:	96 e0       	ldi	r25, 0x06	; 6
    415c:	2b df       	rcall	.-426    	; 0x3fb4 <_upload_message_rc>
    415e:	81 11       	cpse	r24, r1
    4160:	14 c0       	rjmp	.+40     	; 0x418a <lora_driver_join+0x46>
    4162:	08 e2       	ldi	r16, 0x28	; 40
    4164:	15 e0       	ldi	r17, 0x05	; 5
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	4d e2       	ldi	r20, 0x2D	; 45
    416c:	50 e0       	ldi	r21, 0x00	; 0
    416e:	68 e2       	ldi	r22, 0x28	; 40
    4170:	7a e1       	ldi	r23, 0x1A	; 26
    4172:	80 91 9f 19 	lds	r24, 0x199F	; 0x80199f <_serial_reply_buffer_handle>
    4176:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <_serial_reply_buffer_handle+0x1>
    417a:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <xStreamBufferReceive>
    417e:	88 23       	and	r24, r24
    4180:	21 f0       	breq	.+8      	; 0x418a <lora_driver_join+0x46>
    4182:	88 e2       	ldi	r24, 0x28	; 40
    4184:	9a e1       	ldi	r25, 0x1A	; 26
    4186:	a1 de       	rcall	.-702    	; 0x3eca <_reply2return_code>
    4188:	03 c0       	rjmp	.+6      	; 0x4190 <lora_driver_join+0x4c>
    418a:	88 e2       	ldi	r24, 0x28	; 40
    418c:	9a e1       	ldi	r25, 0x1A	; 26
    418e:	9d de       	rcall	.-710    	; 0x3eca <_reply2return_code>
    4190:	1f 91       	pop	r17
    4192:	0f 91       	pop	r16
    4194:	08 95       	ret

00004196 <lora_driver_sent_upload_message>:
    4196:	0f 93       	push	r16
    4198:	1f 93       	push	r17
    419a:	cf 93       	push	r28
    419c:	df 93       	push	r29
    419e:	1f 92       	push	r1
    41a0:	cd b7       	in	r28, 0x3d	; 61
    41a2:	de b7       	in	r29, 0x3e	; 62
    41a4:	db 01       	movw	r26, r22
    41a6:	11 96       	adiw	r26, 0x01	; 1
    41a8:	9c 91       	ld	r25, X
    41aa:	11 97       	sbiw	r26, 0x01	; 1
    41ac:	95 31       	cpi	r25, 0x15	; 21
    41ae:	08 f0       	brcs	.+2      	; 0x41b2 <lora_driver_sent_upload_message+0x1c>
    41b0:	b4 c0       	rjmp	.+360    	; 0x431a <lora_driver_sent_upload_message+0x184>
    41b2:	99 23       	and	r25, r25
    41b4:	81 f1       	breq	.+96     	; 0x4216 <lora_driver_sent_upload_message+0x80>
    41b6:	60 e0       	ldi	r22, 0x00	; 0
    41b8:	70 e0       	ldi	r23, 0x00	; 0
    41ba:	27 2f       	mov	r18, r23
    41bc:	30 e0       	ldi	r19, 0x00	; 0
    41be:	46 2f       	mov	r20, r22
    41c0:	50 e0       	ldi	r21, 0x00	; 0
    41c2:	fd 01       	movw	r30, r26
    41c4:	e4 0f       	add	r30, r20
    41c6:	f5 1f       	adc	r31, r21
    41c8:	92 81       	ldd	r25, Z+2	; 0x02
    41ca:	92 95       	swap	r25
    41cc:	9f 70       	andi	r25, 0x0F	; 15
    41ce:	9a 30       	cpi	r25, 0x0A	; 10
    41d0:	10 f0       	brcs	.+4      	; 0x41d6 <lora_driver_sent_upload_message+0x40>
    41d2:	99 5c       	subi	r25, 0xC9	; 201
    41d4:	01 c0       	rjmp	.+2      	; 0x41d8 <lora_driver_sent_upload_message+0x42>
    41d6:	90 5d       	subi	r25, 0xD0	; 208
    41d8:	f9 01       	movw	r30, r18
    41da:	e7 54       	subi	r30, 0x47	; 71
    41dc:	f6 4e       	sbci	r31, 0xE6	; 230
    41de:	90 83       	st	Z, r25
    41e0:	2f 5f       	subi	r18, 0xFF	; 255
    41e2:	3f 4f       	sbci	r19, 0xFF	; 255
    41e4:	fd 01       	movw	r30, r26
    41e6:	e4 0f       	add	r30, r20
    41e8:	f5 1f       	adc	r31, r21
    41ea:	92 81       	ldd	r25, Z+2	; 0x02
    41ec:	9f 70       	andi	r25, 0x0F	; 15
    41ee:	49 2f       	mov	r20, r25
    41f0:	50 e0       	ldi	r21, 0x00	; 0
    41f2:	4a 30       	cpi	r20, 0x0A	; 10
    41f4:	51 05       	cpc	r21, r1
    41f6:	14 f0       	brlt	.+4      	; 0x41fc <lora_driver_sent_upload_message+0x66>
    41f8:	99 5c       	subi	r25, 0xC9	; 201
    41fa:	01 c0       	rjmp	.+2      	; 0x41fe <lora_driver_sent_upload_message+0x68>
    41fc:	90 5d       	subi	r25, 0xD0	; 208
    41fe:	f9 01       	movw	r30, r18
    4200:	e7 54       	subi	r30, 0x47	; 71
    4202:	f6 4e       	sbci	r31, 0xE6	; 230
    4204:	90 83       	st	Z, r25
    4206:	7e 5f       	subi	r23, 0xFE	; 254
    4208:	6f 5f       	subi	r22, 0xFF	; 255
    420a:	11 96       	adiw	r26, 0x01	; 1
    420c:	9c 91       	ld	r25, X
    420e:	11 97       	sbiw	r26, 0x01	; 1
    4210:	69 17       	cp	r22, r25
    4212:	98 f2       	brcs	.-90     	; 0x41ba <lora_driver_sent_upload_message+0x24>
    4214:	01 c0       	rjmp	.+2      	; 0x4218 <lora_driver_sent_upload_message+0x82>
    4216:	70 e0       	ldi	r23, 0x00	; 0
    4218:	e7 2f       	mov	r30, r23
    421a:	f0 e0       	ldi	r31, 0x00	; 0
    421c:	e7 54       	subi	r30, 0x47	; 71
    421e:	f6 4e       	sbci	r31, 0xE6	; 230
    4220:	10 82       	st	Z, r1
    4222:	4c 91       	ld	r20, X
    4224:	81 11       	cpse	r24, r1
    4226:	03 c0       	rjmp	.+6      	; 0x422e <lora_driver_sent_upload_message+0x98>
    4228:	87 e5       	ldi	r24, 0x57	; 87
    422a:	96 e0       	ldi	r25, 0x06	; 6
    422c:	02 c0       	rjmp	.+4      	; 0x4232 <lora_driver_sent_upload_message+0x9c>
    422e:	89 e5       	ldi	r24, 0x59	; 89
    4230:	96 e0       	ldi	r25, 0x06	; 6
    4232:	29 eb       	ldi	r18, 0xB9	; 185
    4234:	39 e1       	ldi	r19, 0x19	; 25
    4236:	3f 93       	push	r19
    4238:	2f 93       	push	r18
    423a:	1f 92       	push	r1
    423c:	4f 93       	push	r20
    423e:	9f 93       	push	r25
    4240:	8f 93       	push	r24
    4242:	8d e5       	ldi	r24, 0x5D	; 93
    4244:	96 e0       	ldi	r25, 0x06	; 6
    4246:	9f 93       	push	r25
    4248:	8f 93       	push	r24
    424a:	8b ef       	ldi	r24, 0xFB	; 251
    424c:	99 e1       	ldi	r25, 0x19	; 25
    424e:	9f 93       	push	r25
    4250:	8f 93       	push	r24
    4252:	0e 94 67 2d 	call	0x5ace	; 0x5ace <sprintf>
    4256:	60 e0       	ldi	r22, 0x00	; 0
    4258:	70 e0       	ldi	r23, 0x00	; 0
    425a:	8b ef       	ldi	r24, 0xFB	; 251
    425c:	99 e1       	ldi	r25, 0x19	; 25
    425e:	aa de       	rcall	.-684    	; 0x3fb4 <_upload_message_rc>
    4260:	0f b6       	in	r0, 0x3f	; 63
    4262:	f8 94       	cli
    4264:	de bf       	out	0x3e, r29	; 62
    4266:	0f be       	out	0x3f, r0	; 63
    4268:	cd bf       	out	0x3d, r28	; 61
    426a:	81 11       	cpse	r24, r1
    426c:	59 c0       	rjmp	.+178    	; 0x4320 <lora_driver_sent_upload_message+0x18a>
    426e:	08 e2       	ldi	r16, 0x28	; 40
    4270:	15 e0       	ldi	r17, 0x05	; 5
    4272:	20 e0       	ldi	r18, 0x00	; 0
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	4d e2       	ldi	r20, 0x2D	; 45
    4278:	50 e0       	ldi	r21, 0x00	; 0
    427a:	68 e2       	ldi	r22, 0x28	; 40
    427c:	7a e1       	ldi	r23, 0x1A	; 26
    427e:	80 91 9f 19 	lds	r24, 0x199F	; 0x80199f <_serial_reply_buffer_handle>
    4282:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <_serial_reply_buffer_handle+0x1>
    4286:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <xStreamBufferReceive>
    428a:	88 23       	and	r24, r24
    428c:	09 f4       	brne	.+2      	; 0x4290 <lora_driver_sent_upload_message+0xfa>
    428e:	47 c0       	rjmp	.+142    	; 0x431e <lora_driver_sent_upload_message+0x188>
    4290:	88 e2       	ldi	r24, 0x28	; 40
    4292:	9a e1       	ldi	r25, 0x1A	; 26
    4294:	1a de       	rcall	.-972    	; 0x3eca <_reply2return_code>
    4296:	8e 30       	cpi	r24, 0x0E	; 14
    4298:	09 f0       	breq	.+2      	; 0x429c <lora_driver_sent_upload_message+0x106>
    429a:	42 c0       	rjmp	.+132    	; 0x4320 <lora_driver_sent_upload_message+0x18a>
    429c:	87 e0       	ldi	r24, 0x07	; 7
    429e:	89 83       	std	Y+1, r24	; 0x01
    42a0:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <_downlinkMessageBuffer>
    42a4:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <_downlinkMessageBuffer+0x1>
    42a8:	89 2b       	or	r24, r25
    42aa:	a9 f1       	breq	.+106    	; 0x4316 <lora_driver_sent_upload_message+0x180>
    42ac:	be 01       	movw	r22, r28
    42ae:	6f 5f       	subi	r22, 0xFF	; 255
    42b0:	7f 4f       	sbci	r23, 0xFF	; 255
    42b2:	88 e2       	ldi	r24, 0x28	; 40
    42b4:	9a e1       	ldi	r25, 0x1A	; 26
    42b6:	68 d1       	rcall	.+720    	; 0x4588 <decode_port_no>
    42b8:	80 93 a3 19 	sts	0x19A3, r24	; 0x8019a3 <_downlink_payload>
    42bc:	e9 81       	ldd	r30, Y+1	; 0x01
    42be:	f0 e0       	ldi	r31, 0x00	; 0
    42c0:	e8 5d       	subi	r30, 0xD8	; 216
    42c2:	f5 4e       	sbci	r31, 0xE5	; 229
    42c4:	df 01       	movw	r26, r30
    42c6:	0d 90       	ld	r0, X+
    42c8:	00 20       	and	r0, r0
    42ca:	e9 f7       	brne	.-6      	; 0x42c6 <lora_driver_sent_upload_message+0x130>
    42cc:	11 97       	sbiw	r26, 0x01	; 1
    42ce:	ae 1b       	sub	r26, r30
    42d0:	bf 0b       	sbc	r27, r31
    42d2:	aa 23       	and	r26, r26
    42d4:	91 f0       	breq	.+36     	; 0x42fa <lora_driver_sent_upload_message+0x164>
    42d6:	bb 27       	eor	r27, r27
    42d8:	cd 01       	movw	r24, r26
    42da:	01 97       	sbiw	r24, 0x01	; 1
    42dc:	9c 01       	movw	r18, r24
    42de:	12 f4       	brpl	.+4      	; 0x42e4 <lora_driver_sent_upload_message+0x14e>
    42e0:	2f 5f       	subi	r18, 0xFF	; 255
    42e2:	3f 4f       	sbci	r19, 0xFF	; 255
    42e4:	35 95       	asr	r19
    42e6:	27 95       	ror	r18
    42e8:	20 93 a4 19 	sts	0x19A4, r18	; 0x8019a4 <_downlink_payload+0x1>
    42ec:	af 01       	movw	r20, r30
    42ee:	4f 5f       	subi	r20, 0xFF	; 255
    42f0:	5f 4f       	sbci	r21, 0xFF	; 255
    42f2:	64 e1       	ldi	r22, 0x14	; 20
    42f4:	85 ea       	ldi	r24, 0xA5	; 165
    42f6:	99 e1       	ldi	r25, 0x19	; 25
    42f8:	73 d1       	rcall	.+742    	; 0x45e0 <decode_hexadecimal_string_bytes>
    42fa:	01 e0       	ldi	r16, 0x01	; 1
    42fc:	10 e0       	ldi	r17, 0x00	; 0
    42fe:	20 e0       	ldi	r18, 0x00	; 0
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	46 e1       	ldi	r20, 0x16	; 22
    4304:	50 e0       	ldi	r21, 0x00	; 0
    4306:	63 ea       	ldi	r22, 0xA3	; 163
    4308:	79 e1       	ldi	r23, 0x19	; 25
    430a:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <_downlinkMessageBuffer>
    430e:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <_downlinkMessageBuffer+0x1>
    4312:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <xStreamBufferSend>
    4316:	8e e0       	ldi	r24, 0x0E	; 14
    4318:	03 c0       	rjmp	.+6      	; 0x4320 <lora_driver_sent_upload_message+0x18a>
    431a:	84 e1       	ldi	r24, 0x14	; 20
    431c:	01 c0       	rjmp	.+2      	; 0x4320 <lora_driver_sent_upload_message+0x18a>
    431e:	80 e0       	ldi	r24, 0x00	; 0
    4320:	0f 90       	pop	r0
    4322:	df 91       	pop	r29
    4324:	cf 91       	pop	r28
    4326:	1f 91       	pop	r17
    4328:	0f 91       	pop	r16
    432a:	08 95       	ret

0000432c <lora_driver_set_adaptive_data_rate>:
    432c:	81 30       	cpi	r24, 0x01	; 1
    432e:	19 f0       	breq	.+6      	; 0x4336 <lora_driver_set_adaptive_data_rate+0xa>
    4330:	6d e6       	ldi	r22, 0x6D	; 109
    4332:	76 e0       	ldi	r23, 0x06	; 6
    4334:	02 c0       	rjmp	.+4      	; 0x433a <lora_driver_set_adaptive_data_rate+0xe>
    4336:	66 e4       	ldi	r22, 0x46	; 70
    4338:	77 e0       	ldi	r23, 0x07	; 7
    433a:	81 e7       	ldi	r24, 0x71	; 113
    433c:	96 e0       	ldi	r25, 0x06	; 6
    433e:	3a ce       	rjmp	.-908    	; 0x3fb4 <_upload_message_rc>
    4340:	08 95       	ret

00004342 <lora_driver_set_receive_delay>:
    4342:	9f 93       	push	r25
    4344:	8f 93       	push	r24
    4346:	82 ea       	ldi	r24, 0xA2	; 162
    4348:	96 e0       	ldi	r25, 0x06	; 6
    434a:	9f 93       	push	r25
    434c:	8f 93       	push	r24
    434e:	8b ef       	ldi	r24, 0xFB	; 251
    4350:	99 e1       	ldi	r25, 0x19	; 25
    4352:	9f 93       	push	r25
    4354:	8f 93       	push	r24
    4356:	0e 94 67 2d 	call	0x5ace	; 0x5ace <sprintf>
    435a:	60 e0       	ldi	r22, 0x00	; 0
    435c:	70 e0       	ldi	r23, 0x00	; 0
    435e:	8b ef       	ldi	r24, 0xFB	; 251
    4360:	99 e1       	ldi	r25, 0x19	; 25
    4362:	28 de       	rcall	.-944    	; 0x3fb4 <_upload_message_rc>
    4364:	0f 90       	pop	r0
    4366:	0f 90       	pop	r0
    4368:	0f 90       	pop	r0
    436a:	0f 90       	pop	r0
    436c:	0f 90       	pop	r0
    436e:	0f 90       	pop	r0
    4370:	08 95       	ret

00004372 <lora_driver_configure_to_eu868>:
    4372:	2f 92       	push	r2
    4374:	3f 92       	push	r3
    4376:	4f 92       	push	r4
    4378:	5f 92       	push	r5
    437a:	6f 92       	push	r6
    437c:	7f 92       	push	r7
    437e:	8f 92       	push	r8
    4380:	9f 92       	push	r9
    4382:	af 92       	push	r10
    4384:	bf 92       	push	r11
    4386:	cf 92       	push	r12
    4388:	df 92       	push	r13
    438a:	ef 92       	push	r14
    438c:	ff 92       	push	r15
    438e:	0f 93       	push	r16
    4390:	1f 93       	push	r17
    4392:	cf 93       	push	r28
    4394:	df 93       	push	r29
    4396:	cd b7       	in	r28, 0x3d	; 61
    4398:	de b7       	in	r29, 0x3e	; 62
    439a:	a0 97       	sbiw	r28, 0x20	; 32
    439c:	0f b6       	in	r0, 0x3f	; 63
    439e:	f8 94       	cli
    43a0:	de bf       	out	0x3e, r29	; 62
    43a2:	0f be       	out	0x3f, r0	; 63
    43a4:	cd bf       	out	0x3d, r28	; 61
    43a6:	6f ec       	ldi	r22, 0xCF	; 207
    43a8:	76 e0       	ldi	r23, 0x06	; 6
    43aa:	8b ed       	ldi	r24, 0xDB	; 219
    43ac:	96 e0       	ldi	r25, 0x06	; 6
    43ae:	33 dd       	rcall	.-1434   	; 0x3e16 <_upload_message>
    43b0:	8c dd       	rcall	.-1256   	; 0x3eca <_reply2return_code>
    43b2:	81 11       	cpse	r24, r1
    43b4:	a3 c0       	rjmp	.+326    	; 0x44fc <lora_driver_configure_to_eu868+0x18a>
    43b6:	80 e2       	ldi	r24, 0x20	; 32
    43b8:	e1 e2       	ldi	r30, 0x21	; 33
    43ba:	f2 e0       	ldi	r31, 0x02	; 2
    43bc:	de 01       	movw	r26, r28
    43be:	11 96       	adiw	r26, 0x01	; 1
    43c0:	01 90       	ld	r0, Z+
    43c2:	0d 92       	st	X+, r0
    43c4:	8a 95       	dec	r24
    43c6:	e1 f7       	brne	.-8      	; 0x43c0 <lora_driver_configure_to_eu868+0x4e>
    43c8:	9e 01       	movw	r18, r28
    43ca:	2f 5f       	subi	r18, 0xFF	; 255
    43cc:	3f 4f       	sbci	r19, 0xFF	; 255
    43ce:	69 01       	movw	r12, r18
    43d0:	e1 2c       	mov	r14, r1
    43d2:	f1 2c       	mov	r15, r1
    43d4:	0f 2e       	mov	r0, r31
    43d6:	f7 ee       	ldi	r31, 0xE7	; 231
    43d8:	af 2e       	mov	r10, r31
    43da:	f6 e0       	ldi	r31, 0x06	; 6
    43dc:	bf 2e       	mov	r11, r31
    43de:	f0 2d       	mov	r31, r0
    43e0:	0b ef       	ldi	r16, 0xFB	; 251
    43e2:	19 e1       	ldi	r17, 0x19	; 25
    43e4:	0f 2e       	mov	r0, r31
    43e6:	f0 e0       	ldi	r31, 0x00	; 0
    43e8:	4f 2e       	mov	r4, r31
    43ea:	f7 e0       	ldi	r31, 0x07	; 7
    43ec:	5f 2e       	mov	r5, r31
    43ee:	f0 2d       	mov	r31, r0
    43f0:	0f 2e       	mov	r0, r31
    43f2:	f7 e1       	ldi	r31, 0x17	; 23
    43f4:	8f 2e       	mov	r8, r31
    43f6:	f7 e0       	ldi	r31, 0x07	; 7
    43f8:	9f 2e       	mov	r9, r31
    43fa:	f0 2d       	mov	r31, r0
    43fc:	0f 2e       	mov	r0, r31
    43fe:	f1 e3       	ldi	r31, 0x31	; 49
    4400:	6f 2e       	mov	r6, r31
    4402:	f7 e0       	ldi	r31, 0x07	; 7
    4404:	7f 2e       	mov	r7, r31
    4406:	f0 2d       	mov	r31, r0
    4408:	3e 2c       	mov	r3, r14
    440a:	2f 2c       	mov	r2, r15
    440c:	ff 92       	push	r15
    440e:	ef 92       	push	r14
    4410:	bf 92       	push	r11
    4412:	af 92       	push	r10
    4414:	1f 93       	push	r17
    4416:	0f 93       	push	r16
    4418:	0e 94 67 2d 	call	0x5ace	; 0x5ace <sprintf>
    441c:	60 e0       	ldi	r22, 0x00	; 0
    441e:	70 e0       	ldi	r23, 0x00	; 0
    4420:	c8 01       	movw	r24, r16
    4422:	f9 dc       	rcall	.-1550   	; 0x3e16 <_upload_message>
    4424:	52 dd       	rcall	.-1372   	; 0x3eca <_reply2return_code>
    4426:	0f 90       	pop	r0
    4428:	0f 90       	pop	r0
    442a:	0f 90       	pop	r0
    442c:	0f 90       	pop	r0
    442e:	0f 90       	pop	r0
    4430:	0f 90       	pop	r0
    4432:	81 11       	cpse	r24, r1
    4434:	63 c0       	rjmp	.+198    	; 0x44fc <lora_driver_configure_to_eu868+0x18a>
    4436:	32 e0       	ldi	r19, 0x02	; 2
    4438:	3e 15       	cp	r19, r14
    443a:	e8 f4       	brcc	.+58     	; 0x4476 <lora_driver_configure_to_eu868+0x104>
    443c:	f6 01       	movw	r30, r12
    443e:	83 81       	ldd	r24, Z+3	; 0x03
    4440:	8f 93       	push	r24
    4442:	82 81       	ldd	r24, Z+2	; 0x02
    4444:	8f 93       	push	r24
    4446:	81 81       	ldd	r24, Z+1	; 0x01
    4448:	8f 93       	push	r24
    444a:	80 81       	ld	r24, Z
    444c:	8f 93       	push	r24
    444e:	ff 92       	push	r15
    4450:	ef 92       	push	r14
    4452:	5f 92       	push	r5
    4454:	4f 92       	push	r4
    4456:	1f 93       	push	r17
    4458:	0f 93       	push	r16
    445a:	0e 94 67 2d 	call	0x5ace	; 0x5ace <sprintf>
    445e:	60 e0       	ldi	r22, 0x00	; 0
    4460:	70 e0       	ldi	r23, 0x00	; 0
    4462:	c8 01       	movw	r24, r16
    4464:	d8 dc       	rcall	.-1616   	; 0x3e16 <_upload_message>
    4466:	31 dd       	rcall	.-1438   	; 0x3eca <_reply2return_code>
    4468:	0f b6       	in	r0, 0x3f	; 63
    446a:	f8 94       	cli
    446c:	de bf       	out	0x3e, r29	; 62
    446e:	0f be       	out	0x3f, r0	; 63
    4470:	cd bf       	out	0x3d, r28	; 61
    4472:	81 11       	cpse	r24, r1
    4474:	43 c0       	rjmp	.+134    	; 0x44fc <lora_driver_configure_to_eu868+0x18a>
    4476:	2f 92       	push	r2
    4478:	3f 92       	push	r3
    447a:	9f 92       	push	r9
    447c:	8f 92       	push	r8
    447e:	1f 93       	push	r17
    4480:	0f 93       	push	r16
    4482:	0e 94 67 2d 	call	0x5ace	; 0x5ace <sprintf>
    4486:	60 e0       	ldi	r22, 0x00	; 0
    4488:	70 e0       	ldi	r23, 0x00	; 0
    448a:	c8 01       	movw	r24, r16
    448c:	c4 dc       	rcall	.-1656   	; 0x3e16 <_upload_message>
    448e:	1d dd       	rcall	.-1478   	; 0x3eca <_reply2return_code>
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	0f 90       	pop	r0
    4496:	0f 90       	pop	r0
    4498:	0f 90       	pop	r0
    449a:	0f 90       	pop	r0
    449c:	81 11       	cpse	r24, r1
    449e:	2e c0       	rjmp	.+92     	; 0x44fc <lora_driver_configure_to_eu868+0x18a>
    44a0:	2f 92       	push	r2
    44a2:	3f 92       	push	r3
    44a4:	7f 92       	push	r7
    44a6:	6f 92       	push	r6
    44a8:	1f 93       	push	r17
    44aa:	0f 93       	push	r16
    44ac:	0e 94 67 2d 	call	0x5ace	; 0x5ace <sprintf>
    44b0:	60 e0       	ldi	r22, 0x00	; 0
    44b2:	70 e0       	ldi	r23, 0x00	; 0
    44b4:	c8 01       	movw	r24, r16
    44b6:	af dc       	rcall	.-1698   	; 0x3e16 <_upload_message>
    44b8:	08 dd       	rcall	.-1520   	; 0x3eca <_reply2return_code>
    44ba:	0f 90       	pop	r0
    44bc:	0f 90       	pop	r0
    44be:	0f 90       	pop	r0
    44c0:	0f 90       	pop	r0
    44c2:	0f 90       	pop	r0
    44c4:	0f 90       	pop	r0
    44c6:	81 11       	cpse	r24, r1
    44c8:	19 c0       	rjmp	.+50     	; 0x44fc <lora_driver_configure_to_eu868+0x18a>
    44ca:	3f ef       	ldi	r19, 0xFF	; 255
    44cc:	e3 1a       	sub	r14, r19
    44ce:	f3 0a       	sbc	r15, r19
    44d0:	84 e0       	ldi	r24, 0x04	; 4
    44d2:	c8 0e       	add	r12, r24
    44d4:	d1 1c       	adc	r13, r1
    44d6:	98 e0       	ldi	r25, 0x08	; 8
    44d8:	e9 16       	cp	r14, r25
    44da:	f1 04       	cpc	r15, r1
    44dc:	09 f0       	breq	.+2      	; 0x44e0 <lora_driver_configure_to_eu868+0x16e>
    44de:	94 cf       	rjmp	.-216    	; 0x4408 <lora_driver_configure_to_eu868+0x96>
    44e0:	60 e0       	ldi	r22, 0x00	; 0
    44e2:	70 e0       	ldi	r23, 0x00	; 0
    44e4:	89 e4       	ldi	r24, 0x49	; 73
    44e6:	97 e0       	ldi	r25, 0x07	; 7
    44e8:	96 dc       	rcall	.-1748   	; 0x3e16 <_upload_message>
    44ea:	ef dc       	rcall	.-1570   	; 0x3eca <_reply2return_code>
    44ec:	81 11       	cpse	r24, r1
    44ee:	06 c0       	rjmp	.+12     	; 0x44fc <lora_driver_configure_to_eu868+0x18a>
    44f0:	60 e0       	ldi	r22, 0x00	; 0
    44f2:	70 e0       	ldi	r23, 0x00	; 0
    44f4:	8a e5       	ldi	r24, 0x5A	; 90
    44f6:	97 e0       	ldi	r25, 0x07	; 7
    44f8:	8e dc       	rcall	.-1764   	; 0x3e16 <_upload_message>
    44fa:	e7 dc       	rcall	.-1586   	; 0x3eca <_reply2return_code>
    44fc:	a0 96       	adiw	r28, 0x20	; 32
    44fe:	0f b6       	in	r0, 0x3f	; 63
    4500:	f8 94       	cli
    4502:	de bf       	out	0x3e, r29	; 62
    4504:	0f be       	out	0x3f, r0	; 63
    4506:	cd bf       	out	0x3d, r28	; 61
    4508:	df 91       	pop	r29
    450a:	cf 91       	pop	r28
    450c:	1f 91       	pop	r17
    450e:	0f 91       	pop	r16
    4510:	ff 90       	pop	r15
    4512:	ef 90       	pop	r14
    4514:	df 90       	pop	r13
    4516:	cf 90       	pop	r12
    4518:	bf 90       	pop	r11
    451a:	af 90       	pop	r10
    451c:	9f 90       	pop	r9
    451e:	8f 90       	pop	r8
    4520:	7f 90       	pop	r7
    4522:	6f 90       	pop	r6
    4524:	5f 90       	pop	r5
    4526:	4f 90       	pop	r4
    4528:	3f 90       	pop	r3
    452a:	2f 90       	pop	r2
    452c:	08 95       	ret

0000452e <lora_driver_set_otaa_identity>:
    452e:	ef 92       	push	r14
    4530:	ff 92       	push	r15
    4532:	0f 93       	push	r16
    4534:	1f 93       	push	r17
    4536:	cf 93       	push	r28
    4538:	df 93       	push	r29
    453a:	ec 01       	movw	r28, r24
    453c:	8b 01       	movw	r16, r22
    453e:	7a 01       	movw	r14, r20
    4540:	81 e0       	ldi	r24, 0x01	; 1
    4542:	f4 de       	rcall	.-536    	; 0x432c <lora_driver_set_adaptive_data_rate>
    4544:	81 11       	cpse	r24, r1
    4546:	0d c0       	rjmp	.+26     	; 0x4562 <lora_driver_set_otaa_identity+0x34>
    4548:	ce 01       	movw	r24, r28
    454a:	d4 dd       	rcall	.-1112   	; 0x40f4 <lora_driver_set_application_identifier>
    454c:	81 11       	cpse	r24, r1
    454e:	09 c0       	rjmp	.+18     	; 0x4562 <lora_driver_set_otaa_identity+0x34>
    4550:	c8 01       	movw	r24, r16
    4552:	e1 dd       	rcall	.-1086   	; 0x4116 <lora_driver_set_application_key>
    4554:	81 11       	cpse	r24, r1
    4556:	05 c0       	rjmp	.+10     	; 0x4562 <lora_driver_set_otaa_identity+0x34>
    4558:	c7 01       	movw	r24, r14
    455a:	bb dd       	rcall	.-1162   	; 0x40d2 <lora_driver_set_device_identifier>
    455c:	81 11       	cpse	r24, r1
    455e:	01 c0       	rjmp	.+2      	; 0x4562 <lora_driver_set_otaa_identity+0x34>
    4560:	eb dd       	rcall	.-1066   	; 0x4138 <lora_driver_save_mac>
    4562:	df 91       	pop	r29
    4564:	cf 91       	pop	r28
    4566:	1f 91       	pop	r17
    4568:	0f 91       	pop	r16
    456a:	ff 90       	pop	r15
    456c:	ef 90       	pop	r14
    456e:	08 95       	ret

00004570 <lora_driver_map_return_code_to_text>:
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	fc 01       	movw	r30, r24
    4574:	ee 0f       	add	r30, r30
    4576:	ff 1f       	adc	r31, r31
    4578:	8e 0f       	add	r24, r30
    457a:	9f 1f       	adc	r25, r31
    457c:	fc 01       	movw	r30, r24
    457e:	ed 5d       	subi	r30, 0xDD	; 221
    4580:	f7 4f       	sbci	r31, 0xF7	; 247
    4582:	81 81       	ldd	r24, Z+1	; 0x01
    4584:	92 81       	ldd	r25, Z+2	; 0x02
    4586:	08 95       	ret

00004588 <decode_port_no>:
    4588:	dc 01       	movw	r26, r24
    458a:	00 97       	sbiw	r24, 0x00	; 0
    458c:	29 f1       	breq	.+74     	; 0x45d8 <decode_port_no+0x50>
    458e:	fb 01       	movw	r30, r22
    4590:	20 81       	ld	r18, Z
    4592:	fc 01       	movw	r30, r24
    4594:	01 90       	ld	r0, Z+
    4596:	00 20       	and	r0, r0
    4598:	e9 f7       	brne	.-6      	; 0x4594 <decode_port_no+0xc>
    459a:	31 97       	sbiw	r30, 0x01	; 1
    459c:	e8 1b       	sub	r30, r24
    459e:	f9 0b       	sbc	r31, r25
    45a0:	82 2f       	mov	r24, r18
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	e8 17       	cp	r30, r24
    45a6:	f9 07       	cpc	r31, r25
    45a8:	c8 f0       	brcs	.+50     	; 0x45dc <decode_port_no+0x54>
    45aa:	80 e0       	ldi	r24, 0x00	; 0
    45ac:	08 c0       	rjmp	.+16     	; 0x45be <decode_port_no+0x36>
    45ae:	88 0f       	add	r24, r24
    45b0:	38 2f       	mov	r19, r24
    45b2:	33 0f       	add	r19, r19
    45b4:	33 0f       	add	r19, r19
    45b6:	83 0f       	add	r24, r19
    45b8:	80 53       	subi	r24, 0x30	; 48
    45ba:	89 0f       	add	r24, r25
    45bc:	2f 5f       	subi	r18, 0xFF	; 255
    45be:	fd 01       	movw	r30, r26
    45c0:	e2 0f       	add	r30, r18
    45c2:	f1 1d       	adc	r31, r1
    45c4:	90 81       	ld	r25, Z
    45c6:	30 ed       	ldi	r19, 0xD0	; 208
    45c8:	39 0f       	add	r19, r25
    45ca:	3a 30       	cpi	r19, 0x0A	; 10
    45cc:	10 f4       	brcc	.+4      	; 0x45d2 <decode_port_no+0x4a>
    45ce:	91 11       	cpse	r25, r1
    45d0:	ee cf       	rjmp	.-36     	; 0x45ae <decode_port_no+0x26>
    45d2:	fb 01       	movw	r30, r22
    45d4:	20 83       	st	Z, r18
    45d6:	08 95       	ret
    45d8:	80 e0       	ldi	r24, 0x00	; 0
    45da:	08 95       	ret
    45dc:	80 e0       	ldi	r24, 0x00	; 0
    45de:	08 95       	ret

000045e0 <decode_hexadecimal_string_bytes>:
    45e0:	0f 93       	push	r16
    45e2:	1f 93       	push	r17
    45e4:	cf 93       	push	r28
    45e6:	df 93       	push	r29
    45e8:	dc 01       	movw	r26, r24
    45ea:	ea 01       	movw	r28, r20
    45ec:	20 97       	sbiw	r28, 0x00	; 0
    45ee:	e1 f1       	breq	.+120    	; 0x4668 <decode_hexadecimal_string_bytes+0x88>
    45f0:	fa 01       	movw	r30, r20
    45f2:	01 90       	ld	r0, Z+
    45f4:	00 20       	and	r0, r0
    45f6:	e9 f7       	brne	.-6      	; 0x45f2 <decode_hexadecimal_string_bytes+0x12>
    45f8:	31 97       	sbiw	r30, 0x01	; 1
    45fa:	e4 1b       	sub	r30, r20
    45fc:	f5 0b       	sbc	r31, r21
    45fe:	32 97       	sbiw	r30, 0x02	; 2
    4600:	10 f5       	brcc	.+68     	; 0x4646 <decode_hexadecimal_string_bytes+0x66>
    4602:	32 c0       	rjmp	.+100    	; 0x4668 <decode_hexadecimal_string_bytes+0x88>
    4604:	8d 01       	movw	r16, r26
    4606:	04 0f       	add	r16, r20
    4608:	15 1f       	adc	r17, r21
    460a:	30 e0       	ldi	r19, 0x00	; 0
    460c:	ae 01       	movw	r20, r28
    460e:	42 0f       	add	r20, r18
    4610:	53 1f       	adc	r21, r19
    4612:	fa 01       	movw	r30, r20
    4614:	90 81       	ld	r25, Z
    4616:	91 34       	cpi	r25, 0x41	; 65
    4618:	28 f0       	brcs	.+10     	; 0x4624 <decode_hexadecimal_string_bytes+0x44>
    461a:	97 53       	subi	r25, 0x37	; 55
    461c:	59 2f       	mov	r21, r25
    461e:	52 95       	swap	r21
    4620:	50 7f       	andi	r21, 0xF0	; 240
    4622:	03 c0       	rjmp	.+6      	; 0x462a <decode_hexadecimal_string_bytes+0x4a>
    4624:	59 2f       	mov	r21, r25
    4626:	52 95       	swap	r21
    4628:	50 7f       	andi	r21, 0xF0	; 240
    462a:	2c 0f       	add	r18, r28
    462c:	3d 1f       	adc	r19, r29
    462e:	f9 01       	movw	r30, r18
    4630:	91 81       	ldd	r25, Z+1	; 0x01
    4632:	91 34       	cpi	r25, 0x41	; 65
    4634:	10 f0       	brcs	.+4      	; 0x463a <decode_hexadecimal_string_bytes+0x5a>
    4636:	97 53       	subi	r25, 0x37	; 55
    4638:	01 c0       	rjmp	.+2      	; 0x463c <decode_hexadecimal_string_bytes+0x5c>
    463a:	90 53       	subi	r25, 0x30	; 48
    463c:	95 0f       	add	r25, r21
    463e:	f8 01       	movw	r30, r16
    4640:	90 83       	st	Z, r25
    4642:	8f 5f       	subi	r24, 0xFF	; 255
    4644:	01 c0       	rjmp	.+2      	; 0x4648 <decode_hexadecimal_string_bytes+0x68>
    4646:	80 e0       	ldi	r24, 0x00	; 0
    4648:	28 2f       	mov	r18, r24
    464a:	22 0f       	add	r18, r18
    464c:	48 2f       	mov	r20, r24
    464e:	50 e0       	ldi	r21, 0x00	; 0
    4650:	fe 01       	movw	r30, r28
    4652:	01 90       	ld	r0, Z+
    4654:	00 20       	and	r0, r0
    4656:	e9 f7       	brne	.-6      	; 0x4652 <decode_hexadecimal_string_bytes+0x72>
    4658:	31 97       	sbiw	r30, 0x01	; 1
    465a:	ec 1b       	sub	r30, r28
    465c:	fd 0b       	sbc	r31, r29
    465e:	4e 17       	cp	r20, r30
    4660:	5f 07       	cpc	r21, r31
    4662:	10 f4       	brcc	.+4      	; 0x4668 <decode_hexadecimal_string_bytes+0x88>
    4664:	86 13       	cpse	r24, r22
    4666:	ce cf       	rjmp	.-100    	; 0x4604 <decode_hexadecimal_string_bytes+0x24>
    4668:	df 91       	pop	r29
    466a:	cf 91       	pop	r28
    466c:	1f 91       	pop	r17
    466e:	0f 91       	pop	r16
    4670:	08 95       	ret

00004672 <reg_read_register>:
    4672:	fc 01       	movw	r30, r24
    4674:	80 81       	ld	r24, Z
    4676:	08 95       	ret

00004678 <reg_read_bit>:
    4678:	fc 01       	movw	r30, r24
    467a:	20 81       	ld	r18, Z
    467c:	81 e0       	ldi	r24, 0x01	; 1
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	02 c0       	rjmp	.+4      	; 0x4686 <reg_read_bit+0xe>
    4682:	88 0f       	add	r24, r24
    4684:	99 1f       	adc	r25, r25
    4686:	6a 95       	dec	r22
    4688:	e2 f7       	brpl	.-8      	; 0x4682 <reg_read_bit+0xa>
    468a:	82 23       	and	r24, r18
    468c:	08 95       	ret

0000468e <reg_read_bits>:
    468e:	fc 01       	movw	r30, r24
    4690:	80 81       	ld	r24, Z
    4692:	86 23       	and	r24, r22
    4694:	08 95       	ret

00004696 <reg_set_register>:
    4696:	fc 01       	movw	r30, r24
    4698:	60 83       	st	Z, r22
    469a:	08 95       	ret

0000469c <reg_clear_register>:
    469c:	fc 01       	movw	r30, r24
    469e:	10 82       	st	Z, r1
    46a0:	08 95       	ret

000046a2 <reg_set_bit>:
    46a2:	fc 01       	movw	r30, r24
    46a4:	40 81       	ld	r20, Z
    46a6:	21 e0       	ldi	r18, 0x01	; 1
    46a8:	30 e0       	ldi	r19, 0x00	; 0
    46aa:	02 c0       	rjmp	.+4      	; 0x46b0 <reg_set_bit+0xe>
    46ac:	22 0f       	add	r18, r18
    46ae:	33 1f       	adc	r19, r19
    46b0:	6a 95       	dec	r22
    46b2:	e2 f7       	brpl	.-8      	; 0x46ac <reg_set_bit+0xa>
    46b4:	24 2b       	or	r18, r20
    46b6:	20 83       	st	Z, r18
    46b8:	08 95       	ret

000046ba <reg_set_bits>:
    46ba:	fc 01       	movw	r30, r24
    46bc:	20 81       	ld	r18, Z
    46be:	62 2b       	or	r22, r18
    46c0:	60 83       	st	Z, r22
    46c2:	08 95       	ret

000046c4 <reg_toggle_bit>:
    46c4:	fc 01       	movw	r30, r24
    46c6:	40 81       	ld	r20, Z
    46c8:	21 e0       	ldi	r18, 0x01	; 1
    46ca:	30 e0       	ldi	r19, 0x00	; 0
    46cc:	02 c0       	rjmp	.+4      	; 0x46d2 <reg_toggle_bit+0xe>
    46ce:	22 0f       	add	r18, r18
    46d0:	33 1f       	adc	r19, r19
    46d2:	6a 95       	dec	r22
    46d4:	e2 f7       	brpl	.-8      	; 0x46ce <reg_toggle_bit+0xa>
    46d6:	24 27       	eor	r18, r20
    46d8:	20 83       	st	Z, r18
    46da:	08 95       	ret

000046dc <reg_toggle_bits>:
    46dc:	fc 01       	movw	r30, r24
    46de:	20 81       	ld	r18, Z
    46e0:	62 27       	eor	r22, r18
    46e2:	60 83       	st	Z, r22
    46e4:	08 95       	ret

000046e6 <reg_clear_bit>:
    46e6:	fc 01       	movw	r30, r24
    46e8:	90 81       	ld	r25, Z
    46ea:	21 e0       	ldi	r18, 0x01	; 1
    46ec:	30 e0       	ldi	r19, 0x00	; 0
    46ee:	02 c0       	rjmp	.+4      	; 0x46f4 <reg_clear_bit+0xe>
    46f0:	22 0f       	add	r18, r18
    46f2:	33 1f       	adc	r19, r19
    46f4:	6a 95       	dec	r22
    46f6:	e2 f7       	brpl	.-8      	; 0x46f0 <reg_clear_bit+0xa>
    46f8:	20 95       	com	r18
    46fa:	29 23       	and	r18, r25
    46fc:	20 83       	st	Z, r18
    46fe:	08 95       	ret

00004700 <reg_clear_bits>:
    4700:	fc 01       	movw	r30, r24
    4702:	90 81       	ld	r25, Z
    4704:	60 95       	com	r22
    4706:	69 23       	and	r22, r25
    4708:	60 83       	st	Z, r22
    470a:	08 95       	ret

0000470c <_serial_call_back>:
    470c:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <crc_sum.1941>
    4710:	86 0f       	add	r24, r22
    4712:	80 93 58 1a 	sts	0x1A58, r24	; 0x801a58 <crc_sum.1941>
    4716:	90 91 5b 1a 	lds	r25, 0x1A5B	; 0x801a5b <_mh_state>
    471a:	91 30       	cpi	r25, 0x01	; 1
    471c:	79 f0       	breq	.+30     	; 0x473c <_serial_call_back+0x30>
    471e:	28 f0       	brcs	.+10     	; 0x472a <_serial_call_back+0x1e>
    4720:	92 30       	cpi	r25, 0x02	; 2
    4722:	a9 f0       	breq	.+42     	; 0x474e <_serial_call_back+0x42>
    4724:	93 30       	cpi	r25, 0x03	; 3
    4726:	19 f1       	breq	.+70     	; 0x476e <_serial_call_back+0x62>
    4728:	08 95       	ret
    472a:	6f 3f       	cpi	r22, 0xFF	; 255
    472c:	09 f0       	breq	.+2      	; 0x4730 <_serial_call_back+0x24>
    472e:	48 c0       	rjmp	.+144    	; 0x47c0 <_serial_call_back+0xb4>
    4730:	10 92 58 1a 	sts	0x1A58, r1	; 0x801a58 <crc_sum.1941>
    4734:	81 e0       	ldi	r24, 0x01	; 1
    4736:	80 93 5b 1a 	sts	0x1A5B, r24	; 0x801a5b <_mh_state>
    473a:	08 95       	ret
    473c:	66 38       	cpi	r22, 0x86	; 134
    473e:	09 f0       	breq	.+2      	; 0x4742 <_serial_call_back+0x36>
    4740:	3f c0       	rjmp	.+126    	; 0x47c0 <_serial_call_back+0xb4>
    4742:	10 92 57 1a 	sts	0x1A57, r1	; 0x801a57 <inDex.1939>
    4746:	82 e0       	ldi	r24, 0x02	; 2
    4748:	80 93 5b 1a 	sts	0x1A5B, r24	; 0x801a5b <_mh_state>
    474c:	08 95       	ret
    474e:	e0 91 57 1a 	lds	r30, 0x1A57	; 0x801a57 <inDex.1939>
    4752:	81 e0       	ldi	r24, 0x01	; 1
    4754:	8e 0f       	add	r24, r30
    4756:	80 93 57 1a 	sts	0x1A57, r24	; 0x801a57 <inDex.1939>
    475a:	f0 e0       	ldi	r31, 0x00	; 0
    475c:	eb 5a       	subi	r30, 0xAB	; 171
    475e:	f5 4e       	sbci	r31, 0xE5	; 229
    4760:	60 83       	st	Z, r22
    4762:	82 30       	cpi	r24, 0x02	; 2
    4764:	69 f5       	brne	.+90     	; 0x47c0 <_serial_call_back+0xb4>
    4766:	83 e0       	ldi	r24, 0x03	; 3
    4768:	80 93 5b 1a 	sts	0x1A5B, r24	; 0x801a5b <_mh_state>
    476c:	08 95       	ret
    476e:	90 91 57 1a 	lds	r25, 0x1A57	; 0x801a57 <inDex.1939>
    4772:	21 e0       	ldi	r18, 0x01	; 1
    4774:	29 0f       	add	r18, r25
    4776:	20 93 57 1a 	sts	0x1A57, r18	; 0x801a57 <inDex.1939>
    477a:	96 30       	cpi	r25, 0x06	; 6
    477c:	09 f5       	brne	.+66     	; 0x47c0 <_serial_call_back+0xb4>
    477e:	81 11       	cpse	r24, r1
    4780:	0e c0       	rjmp	.+28     	; 0x479e <_serial_call_back+0x92>
    4782:	e5 e5       	ldi	r30, 0x55	; 85
    4784:	fa e1       	ldi	r31, 0x1A	; 26
    4786:	80 81       	ld	r24, Z
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	98 2f       	mov	r25, r24
    478c:	88 27       	eor	r24, r24
    478e:	21 81       	ldd	r18, Z+1	; 0x01
    4790:	82 0f       	add	r24, r18
    4792:	91 1d       	adc	r25, r1
    4794:	90 93 5d 1a 	sts	0x1A5D, r25	; 0x801a5d <_ppm+0x1>
    4798:	80 93 5c 1a 	sts	0x1A5C, r24	; 0x801a5c <_ppm>
    479c:	04 c0       	rjmp	.+8      	; 0x47a6 <_serial_call_back+0x9a>
    479e:	10 92 5d 1a 	sts	0x1A5D, r1	; 0x801a5d <_ppm+0x1>
    47a2:	10 92 5c 1a 	sts	0x1A5C, r1	; 0x801a5c <_ppm>
    47a6:	10 92 5b 1a 	sts	0x1A5B, r1	; 0x801a5b <_mh_state>
    47aa:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <_app_call_back>
    47ae:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <_app_call_back+0x1>
    47b2:	30 97       	sbiw	r30, 0x00	; 0
    47b4:	29 f0       	breq	.+10     	; 0x47c0 <_serial_call_back+0xb4>
    47b6:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <_ppm>
    47ba:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <_ppm+0x1>
    47be:	19 95       	eicall
    47c0:	08 95       	ret

000047c2 <mh_z19_create>:
    47c2:	8f 92       	push	r8
    47c4:	9f 92       	push	r9
    47c6:	af 92       	push	r10
    47c8:	cf 92       	push	r12
    47ca:	ef 92       	push	r14
    47cc:	0f 93       	push	r16
    47ce:	cf 93       	push	r28
    47d0:	df 93       	push	r29
    47d2:	eb 01       	movw	r28, r22
    47d4:	0f 2e       	mov	r0, r31
    47d6:	f6 e8       	ldi	r31, 0x86	; 134
    47d8:	8f 2e       	mov	r8, r31
    47da:	f3 e2       	ldi	r31, 0x23	; 35
    47dc:	9f 2e       	mov	r9, r31
    47de:	f0 2d       	mov	r31, r0
    47e0:	68 94       	set
    47e2:	aa 24       	eor	r10, r10
    47e4:	a4 f8       	bld	r10, 4
    47e6:	68 94       	set
    47e8:	cc 24       	eor	r12, r12
    47ea:	c4 f8       	bld	r12, 4
    47ec:	e1 2c       	mov	r14, r1
    47ee:	00 e0       	ldi	r16, 0x00	; 0
    47f0:	23 e0       	ldi	r18, 0x03	; 3
    47f2:	40 e8       	ldi	r20, 0x80	; 128
    47f4:	55 e2       	ldi	r21, 0x25	; 37
    47f6:	60 e0       	ldi	r22, 0x00	; 0
    47f8:	70 e0       	ldi	r23, 0x00	; 0
    47fa:	40 d0       	rcall	.+128    	; 0x487c <serial_new_instance>
    47fc:	90 93 5f 1a 	sts	0x1A5F, r25	; 0x801a5f <_serial+0x1>
    4800:	80 93 5e 1a 	sts	0x1A5E, r24	; 0x801a5e <_serial>
    4804:	d0 93 5a 1a 	sts	0x1A5A, r29	; 0x801a5a <_app_call_back+0x1>
    4808:	c0 93 59 1a 	sts	0x1A59, r28	; 0x801a59 <_app_call_back>
    480c:	df 91       	pop	r29
    480e:	cf 91       	pop	r28
    4810:	0f 91       	pop	r16
    4812:	ef 90       	pop	r14
    4814:	cf 90       	pop	r12
    4816:	af 90       	pop	r10
    4818:	9f 90       	pop	r9
    481a:	8f 90       	pop	r8
    481c:	08 95       	ret

0000481e <mh_z19_take_meassuring>:
    481e:	cf 93       	push	r28
    4820:	df 93       	push	r29
    4822:	cd b7       	in	r28, 0x3d	; 61
    4824:	de b7       	in	r29, 0x3e	; 62
    4826:	29 97       	sbiw	r28, 0x09	; 9
    4828:	0f b6       	in	r0, 0x3f	; 63
    482a:	f8 94       	cli
    482c:	de bf       	out	0x3e, r29	; 62
    482e:	0f be       	out	0x3f, r0	; 63
    4830:	cd bf       	out	0x3d, r28	; 61
    4832:	89 e0       	ldi	r24, 0x09	; 9
    4834:	e1 e4       	ldi	r30, 0x41	; 65
    4836:	f2 e0       	ldi	r31, 0x02	; 2
    4838:	9e 01       	movw	r18, r28
    483a:	2f 5f       	subi	r18, 0xFF	; 255
    483c:	3f 4f       	sbci	r19, 0xFF	; 255
    483e:	d9 01       	movw	r26, r18
    4840:	01 90       	ld	r0, Z+
    4842:	0d 92       	st	X+, r0
    4844:	8a 95       	dec	r24
    4846:	e1 f7       	brne	.-8      	; 0x4840 <mh_z19_take_meassuring+0x22>
    4848:	10 92 5d 1a 	sts	0x1A5D, r1	; 0x801a5d <_ppm+0x1>
    484c:	10 92 5c 1a 	sts	0x1A5C, r1	; 0x801a5c <_ppm>
    4850:	80 91 5e 1a 	lds	r24, 0x1A5E	; 0x801a5e <_serial>
    4854:	90 91 5f 1a 	lds	r25, 0x1A5F	; 0x801a5f <_serial+0x1>
    4858:	00 97       	sbiw	r24, 0x00	; 0
    485a:	31 f0       	breq	.+12     	; 0x4868 <mh_z19_take_meassuring+0x4a>
    485c:	42 2f       	mov	r20, r18
    485e:	53 2f       	mov	r21, r19
    4860:	69 e0       	ldi	r22, 0x09	; 9
    4862:	c8 d0       	rcall	.+400    	; 0x49f4 <serial_send_bytes>
    4864:	80 e0       	ldi	r24, 0x00	; 0
    4866:	01 c0       	rjmp	.+2      	; 0x486a <mh_z19_take_meassuring+0x4c>
    4868:	82 e0       	ldi	r24, 0x02	; 2
    486a:	29 96       	adiw	r28, 0x09	; 9
    486c:	0f b6       	in	r0, 0x3f	; 63
    486e:	f8 94       	cli
    4870:	de bf       	out	0x3e, r29	; 62
    4872:	0f be       	out	0x3f, r0	; 63
    4874:	cd bf       	out	0x3d, r28	; 61
    4876:	df 91       	pop	r29
    4878:	cf 91       	pop	r28
    487a:	08 95       	ret

0000487c <serial_new_instance>:
    487c:	2f 92       	push	r2
    487e:	3f 92       	push	r3
    4880:	4f 92       	push	r4
    4882:	5f 92       	push	r5
    4884:	6f 92       	push	r6
    4886:	7f 92       	push	r7
    4888:	8f 92       	push	r8
    488a:	9f 92       	push	r9
    488c:	af 92       	push	r10
    488e:	cf 92       	push	r12
    4890:	ef 92       	push	r14
    4892:	ff 92       	push	r15
    4894:	0f 93       	push	r16
    4896:	1f 93       	push	r17
    4898:	cf 93       	push	r28
    489a:	df 93       	push	r29
    489c:	cd b7       	in	r28, 0x3d	; 61
    489e:	de b7       	in	r29, 0x3e	; 62
    48a0:	f8 2e       	mov	r15, r24
    48a2:	2a 01       	movw	r4, r20
    48a4:	3b 01       	movw	r6, r22
    48a6:	88 e0       	ldi	r24, 0x08	; 8
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	4a d7       	rcall	.+3732   	; 0x5740 <malloc>
    48ac:	8c 01       	movw	r16, r24
    48ae:	8f 2d       	mov	r24, r15
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	88 0f       	add	r24, r24
    48b4:	99 1f       	adc	r25, r25
    48b6:	fc 01       	movw	r30, r24
    48b8:	e0 5a       	subi	r30, 0xA0	; 160
    48ba:	f5 4e       	sbci	r31, 0xE5	; 229
    48bc:	11 83       	std	Z+1, r17	; 0x01
    48be:	00 83       	st	Z, r16
    48c0:	fc 01       	movw	r30, r24
    48c2:	e6 5f       	subi	r30, 0xF6	; 246
    48c4:	fd 4f       	sbci	r31, 0xFD	; 253
    48c6:	80 81       	ld	r24, Z
    48c8:	91 81       	ldd	r25, Z+1	; 0x01
    48ca:	d8 01       	movw	r26, r16
    48cc:	8d 93       	st	X+, r24
    48ce:	9c 93       	st	X, r25
    48d0:	6c 2d       	mov	r22, r12
    48d2:	70 e0       	ldi	r23, 0x00	; 0
    48d4:	84 e0       	ldi	r24, 0x04	; 4
    48d6:	90 e0       	ldi	r25, 0x00	; 0
    48d8:	19 d7       	rcall	.+3634   	; 0x570c <calloc>
    48da:	1c 01       	movw	r2, r24
    48dc:	61 e0       	ldi	r22, 0x01	; 1
    48de:	70 e0       	ldi	r23, 0x00	; 0
    48e0:	86 e0       	ldi	r24, 0x06	; 6
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	13 d7       	rcall	.+3622   	; 0x570c <calloc>
    48e6:	7c 01       	movw	r14, r24
    48e8:	4c 2d       	mov	r20, r12
    48ea:	b1 01       	movw	r22, r2
    48ec:	2c d5       	rcall	.+2648   	; 0x5346 <fifo_init>
    48ee:	f8 01       	movw	r30, r16
    48f0:	f5 82       	std	Z+5, r15	; 0x05
    48f2:	e4 82       	std	Z+4, r14	; 0x04
    48f4:	6a 2d       	mov	r22, r10
    48f6:	70 e0       	ldi	r23, 0x00	; 0
    48f8:	84 e0       	ldi	r24, 0x04	; 4
    48fa:	90 e0       	ldi	r25, 0x00	; 0
    48fc:	07 d7       	rcall	.+3598   	; 0x570c <calloc>
    48fe:	1c 01       	movw	r2, r24
    4900:	61 e0       	ldi	r22, 0x01	; 1
    4902:	70 e0       	ldi	r23, 0x00	; 0
    4904:	86 e0       	ldi	r24, 0x06	; 6
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	01 d7       	rcall	.+3586   	; 0x570c <calloc>
    490a:	7c 01       	movw	r14, r24
    490c:	4a 2d       	mov	r20, r10
    490e:	b1 01       	movw	r22, r2
    4910:	1a d5       	rcall	.+2612   	; 0x5346 <fifo_init>
    4912:	d8 01       	movw	r26, r16
    4914:	13 96       	adiw	r26, 0x03	; 3
    4916:	fc 92       	st	X, r15
    4918:	ee 92       	st	-X, r14
    491a:	12 97       	sbiw	r26, 0x02	; 2
    491c:	17 96       	adiw	r26, 0x07	; 7
    491e:	9c 92       	st	X, r9
    4920:	8e 92       	st	-X, r8
    4922:	16 97       	sbiw	r26, 0x06	; 6
    4924:	ff b6       	in	r15, 0x3f	; 63
    4926:	f8 94       	cli
    4928:	ed 91       	ld	r30, X+
    492a:	fc 91       	ld	r31, X
    492c:	11 97       	sbiw	r26, 0x01	; 1
    492e:	36 97       	sbiw	r30, 0x06	; 6
    4930:	80 81       	ld	r24, Z
    4932:	82 60       	ori	r24, 0x02	; 2
    4934:	80 83       	st	Z, r24
    4936:	8d 90       	ld	r8, X+
    4938:	9c 90       	ld	r9, X
    493a:	c3 01       	movw	r24, r6
    493c:	b2 01       	movw	r22, r4
    493e:	f1 d5       	rcall	.+3042   	; 0x5522 <__floatunsisf>
    4940:	20 e0       	ldi	r18, 0x00	; 0
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	40 e0       	ldi	r20, 0x00	; 0
    4946:	51 e4       	ldi	r21, 0x41	; 65
    4948:	51 d6       	rcall	.+3234   	; 0x55ec <__mulsf3>
    494a:	9b 01       	movw	r18, r22
    494c:	ac 01       	movw	r20, r24
    494e:	60 e0       	ldi	r22, 0x00	; 0
    4950:	74 e2       	ldi	r23, 0x24	; 36
    4952:	84 e7       	ldi	r24, 0x74	; 116
    4954:	9b e4       	ldi	r25, 0x4B	; 75
    4956:	7a d5       	rcall	.+2804   	; 0x544c <__divsf3>
    4958:	20 e0       	ldi	r18, 0x00	; 0
    495a:	30 e0       	ldi	r19, 0x00	; 0
    495c:	40 e8       	ldi	r20, 0x80	; 128
    495e:	5f e3       	ldi	r21, 0x3F	; 63
    4960:	0e d5       	rcall	.+2588   	; 0x537e <__subsf3>
    4962:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <__fixunssfsi>
    4966:	f4 01       	movw	r30, r8
    4968:	32 97       	sbiw	r30, 0x02	; 2
    496a:	60 83       	st	Z, r22
    496c:	d8 01       	movw	r26, r16
    496e:	ed 91       	ld	r30, X+
    4970:	fc 91       	ld	r31, X
    4972:	11 97       	sbiw	r26, 0x01	; 1
    4974:	35 97       	sbiw	r30, 0x05	; 5
    4976:	88 e9       	ldi	r24, 0x98	; 152
    4978:	80 83       	st	Z, r24
    497a:	ed 91       	ld	r30, X+
    497c:	fc 91       	ld	r31, X
    497e:	34 97       	sbiw	r30, 0x04	; 4
    4980:	86 e0       	ldi	r24, 0x06	; 6
    4982:	80 83       	st	Z, r24
    4984:	ff be       	out	0x3f, r15	; 63
    4986:	c8 01       	movw	r24, r16
    4988:	df 91       	pop	r29
    498a:	cf 91       	pop	r28
    498c:	1f 91       	pop	r17
    498e:	0f 91       	pop	r16
    4990:	ff 90       	pop	r15
    4992:	ef 90       	pop	r14
    4994:	cf 90       	pop	r12
    4996:	af 90       	pop	r10
    4998:	9f 90       	pop	r9
    499a:	8f 90       	pop	r8
    499c:	7f 90       	pop	r7
    499e:	6f 90       	pop	r6
    49a0:	5f 90       	pop	r5
    49a2:	4f 90       	pop	r4
    49a4:	3f 90       	pop	r3
    49a6:	2f 90       	pop	r2
    49a8:	08 95       	ret

000049aa <serial_send_byte>:
    49aa:	cf 93       	push	r28
    49ac:	df 93       	push	r29
    49ae:	ec 01       	movw	r28, r24
    49b0:	ea 81       	ldd	r30, Y+2	; 0x02
    49b2:	fb 81       	ldd	r31, Y+3	; 0x03
    49b4:	93 81       	ldd	r25, Z+3	; 0x03
    49b6:	82 81       	ldd	r24, Z+2	; 0x02
    49b8:	25 81       	ldd	r18, Z+5	; 0x05
    49ba:	98 1b       	sub	r25, r24
    49bc:	92 23       	and	r25, r18
    49be:	84 81       	ldd	r24, Z+4	; 0x04
    49c0:	98 17       	cp	r25, r24
    49c2:	a1 f0       	breq	.+40     	; 0x49ec <serial_send_byte+0x42>
    49c4:	93 81       	ldd	r25, Z+3	; 0x03
    49c6:	26 95       	lsr	r18
    49c8:	29 23       	and	r18, r25
    49ca:	a0 81       	ld	r26, Z
    49cc:	b1 81       	ldd	r27, Z+1	; 0x01
    49ce:	a2 0f       	add	r26, r18
    49d0:	b1 1d       	adc	r27, r1
    49d2:	6c 93       	st	X, r22
    49d4:	9f 5f       	subi	r25, 0xFF	; 255
    49d6:	25 81       	ldd	r18, Z+5	; 0x05
    49d8:	92 23       	and	r25, r18
    49da:	93 83       	std	Z+3, r25	; 0x03
    49dc:	e8 81       	ld	r30, Y
    49de:	f9 81       	ldd	r31, Y+1	; 0x01
    49e0:	35 97       	sbiw	r30, 0x05	; 5
    49e2:	80 81       	ld	r24, Z
    49e4:	80 62       	ori	r24, 0x20	; 32
    49e6:	80 83       	st	Z, r24
    49e8:	80 e0       	ldi	r24, 0x00	; 0
    49ea:	01 c0       	rjmp	.+2      	; 0x49ee <serial_send_byte+0x44>
    49ec:	82 e0       	ldi	r24, 0x02	; 2
    49ee:	df 91       	pop	r29
    49f0:	cf 91       	pop	r28
    49f2:	08 95       	ret

000049f4 <serial_send_bytes>:
    49f4:	ef 92       	push	r14
    49f6:	ff 92       	push	r15
    49f8:	0f 93       	push	r16
    49fa:	1f 93       	push	r17
    49fc:	cf 93       	push	r28
    49fe:	df 93       	push	r29
    4a00:	7c 01       	movw	r14, r24
    4a02:	dc 01       	movw	r26, r24
    4a04:	12 96       	adiw	r26, 0x02	; 2
    4a06:	ed 91       	ld	r30, X+
    4a08:	fc 91       	ld	r31, X
    4a0a:	13 97       	sbiw	r26, 0x03	; 3
    4a0c:	93 81       	ldd	r25, Z+3	; 0x03
    4a0e:	82 81       	ldd	r24, Z+2	; 0x02
    4a10:	98 1b       	sub	r25, r24
    4a12:	85 81       	ldd	r24, Z+5	; 0x05
    4a14:	98 23       	and	r25, r24
    4a16:	84 81       	ldd	r24, Z+4	; 0x04
    4a18:	89 1b       	sub	r24, r25
    4a1a:	86 17       	cp	r24, r22
    4a1c:	98 f1       	brcs	.+102    	; 0x4a84 <serial_send_bytes+0x90>
    4a1e:	66 23       	and	r22, r22
    4a20:	41 f1       	breq	.+80     	; 0x4a72 <serial_send_bytes+0x7e>
    4a22:	84 2f       	mov	r24, r20
    4a24:	95 2f       	mov	r25, r21
    4a26:	dc 01       	movw	r26, r24
    4a28:	61 50       	subi	r22, 0x01	; 1
    4a2a:	46 2f       	mov	r20, r22
    4a2c:	50 e0       	ldi	r21, 0x00	; 0
    4a2e:	4f 5f       	subi	r20, 0xFF	; 255
    4a30:	5f 4f       	sbci	r21, 0xFF	; 255
    4a32:	48 0f       	add	r20, r24
    4a34:	59 1f       	adc	r21, r25
    4a36:	e7 01       	movw	r28, r14
    4a38:	ea 81       	ldd	r30, Y+2	; 0x02
    4a3a:	fb 81       	ldd	r31, Y+3	; 0x03
    4a3c:	93 81       	ldd	r25, Z+3	; 0x03
    4a3e:	82 81       	ldd	r24, Z+2	; 0x02
    4a40:	25 81       	ldd	r18, Z+5	; 0x05
    4a42:	98 1b       	sub	r25, r24
    4a44:	92 23       	and	r25, r18
    4a46:	84 81       	ldd	r24, Z+4	; 0x04
    4a48:	98 17       	cp	r25, r24
    4a4a:	79 f0       	breq	.+30     	; 0x4a6a <serial_send_bytes+0x76>
    4a4c:	8c 91       	ld	r24, X
    4a4e:	93 81       	ldd	r25, Z+3	; 0x03
    4a50:	26 95       	lsr	r18
    4a52:	29 23       	and	r18, r25
    4a54:	60 81       	ld	r22, Z
    4a56:	71 81       	ldd	r23, Z+1	; 0x01
    4a58:	8b 01       	movw	r16, r22
    4a5a:	02 0f       	add	r16, r18
    4a5c:	11 1d       	adc	r17, r1
    4a5e:	e8 01       	movw	r28, r16
    4a60:	88 83       	st	Y, r24
    4a62:	9f 5f       	subi	r25, 0xFF	; 255
    4a64:	85 81       	ldd	r24, Z+5	; 0x05
    4a66:	98 23       	and	r25, r24
    4a68:	93 83       	std	Z+3, r25	; 0x03
    4a6a:	11 96       	adiw	r26, 0x01	; 1
    4a6c:	a4 17       	cp	r26, r20
    4a6e:	b5 07       	cpc	r27, r21
    4a70:	11 f7       	brne	.-60     	; 0x4a36 <serial_send_bytes+0x42>
    4a72:	d7 01       	movw	r26, r14
    4a74:	ed 91       	ld	r30, X+
    4a76:	fc 91       	ld	r31, X
    4a78:	35 97       	sbiw	r30, 0x05	; 5
    4a7a:	80 81       	ld	r24, Z
    4a7c:	80 62       	ori	r24, 0x20	; 32
    4a7e:	80 83       	st	Z, r24
    4a80:	80 e0       	ldi	r24, 0x00	; 0
    4a82:	01 c0       	rjmp	.+2      	; 0x4a86 <serial_send_bytes+0x92>
    4a84:	82 e0       	ldi	r24, 0x02	; 2
    4a86:	df 91       	pop	r29
    4a88:	cf 91       	pop	r28
    4a8a:	1f 91       	pop	r17
    4a8c:	0f 91       	pop	r16
    4a8e:	ff 90       	pop	r15
    4a90:	ef 90       	pop	r14
    4a92:	08 95       	ret

00004a94 <serial_get_byte>:
    4a94:	dc 01       	movw	r26, r24
    4a96:	14 96       	adiw	r26, 0x04	; 4
    4a98:	ed 91       	ld	r30, X+
    4a9a:	fc 91       	ld	r31, X
    4a9c:	15 97       	sbiw	r26, 0x05	; 5
    4a9e:	93 81       	ldd	r25, Z+3	; 0x03
    4aa0:	82 81       	ldd	r24, Z+2	; 0x02
    4aa2:	98 17       	cp	r25, r24
    4aa4:	89 f0       	breq	.+34     	; 0x4ac8 <serial_get_byte+0x34>
    4aa6:	92 81       	ldd	r25, Z+2	; 0x02
    4aa8:	85 81       	ldd	r24, Z+5	; 0x05
    4aaa:	86 95       	lsr	r24
    4aac:	89 23       	and	r24, r25
    4aae:	a0 81       	ld	r26, Z
    4ab0:	b1 81       	ldd	r27, Z+1	; 0x01
    4ab2:	a8 0f       	add	r26, r24
    4ab4:	b1 1d       	adc	r27, r1
    4ab6:	8c 91       	ld	r24, X
    4ab8:	db 01       	movw	r26, r22
    4aba:	8c 93       	st	X, r24
    4abc:	9f 5f       	subi	r25, 0xFF	; 255
    4abe:	85 81       	ldd	r24, Z+5	; 0x05
    4ac0:	98 23       	and	r25, r24
    4ac2:	92 83       	std	Z+2, r25	; 0x02
    4ac4:	80 e0       	ldi	r24, 0x00	; 0
    4ac6:	08 95       	ret
    4ac8:	83 e0       	ldi	r24, 0x03	; 3
    4aca:	08 95       	ret

00004acc <__vector_25>:
    4acc:	1f 92       	push	r1
    4ace:	0f 92       	push	r0
    4ad0:	0f b6       	in	r0, 0x3f	; 63
    4ad2:	0f 92       	push	r0
    4ad4:	11 24       	eor	r1, r1
    4ad6:	0b b6       	in	r0, 0x3b	; 59
    4ad8:	0f 92       	push	r0
    4ada:	2f 93       	push	r18
    4adc:	3f 93       	push	r19
    4ade:	4f 93       	push	r20
    4ae0:	5f 93       	push	r21
    4ae2:	6f 93       	push	r22
    4ae4:	7f 93       	push	r23
    4ae6:	8f 93       	push	r24
    4ae8:	9f 93       	push	r25
    4aea:	af 93       	push	r26
    4aec:	bf 93       	push	r27
    4aee:	cf 93       	push	r28
    4af0:	df 93       	push	r29
    4af2:	ef 93       	push	r30
    4af4:	ff 93       	push	r31
    4af6:	a0 91 60 1a 	lds	r26, 0x1A60	; 0x801a60 <_ser_handle>
    4afa:	b0 91 61 1a 	lds	r27, 0x1A61	; 0x801a61 <_ser_handle+0x1>
    4afe:	10 97       	sbiw	r26, 0x00	; 0
    4b00:	11 f1       	breq	.+68     	; 0x4b46 <__vector_25+0x7a>
    4b02:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4b06:	14 96       	adiw	r26, 0x04	; 4
    4b08:	ed 91       	ld	r30, X+
    4b0a:	fc 91       	ld	r31, X
    4b0c:	15 97       	sbiw	r26, 0x05	; 5
    4b0e:	93 81       	ldd	r25, Z+3	; 0x03
    4b10:	82 81       	ldd	r24, Z+2	; 0x02
    4b12:	25 81       	ldd	r18, Z+5	; 0x05
    4b14:	98 1b       	sub	r25, r24
    4b16:	92 23       	and	r25, r18
    4b18:	84 81       	ldd	r24, Z+4	; 0x04
    4b1a:	98 17       	cp	r25, r24
    4b1c:	61 f0       	breq	.+24     	; 0x4b36 <__vector_25+0x6a>
    4b1e:	83 81       	ldd	r24, Z+3	; 0x03
    4b20:	26 95       	lsr	r18
    4b22:	28 23       	and	r18, r24
    4b24:	c0 81       	ld	r28, Z
    4b26:	d1 81       	ldd	r29, Z+1	; 0x01
    4b28:	c2 0f       	add	r28, r18
    4b2a:	d1 1d       	adc	r29, r1
    4b2c:	68 83       	st	Y, r22
    4b2e:	8f 5f       	subi	r24, 0xFF	; 255
    4b30:	95 81       	ldd	r25, Z+5	; 0x05
    4b32:	89 23       	and	r24, r25
    4b34:	83 83       	std	Z+3, r24	; 0x03
    4b36:	16 96       	adiw	r26, 0x06	; 6
    4b38:	ed 91       	ld	r30, X+
    4b3a:	fc 91       	ld	r31, X
    4b3c:	17 97       	sbiw	r26, 0x07	; 7
    4b3e:	30 97       	sbiw	r30, 0x00	; 0
    4b40:	11 f0       	breq	.+4      	; 0x4b46 <__vector_25+0x7a>
    4b42:	cd 01       	movw	r24, r26
    4b44:	19 95       	eicall
    4b46:	ff 91       	pop	r31
    4b48:	ef 91       	pop	r30
    4b4a:	df 91       	pop	r29
    4b4c:	cf 91       	pop	r28
    4b4e:	bf 91       	pop	r27
    4b50:	af 91       	pop	r26
    4b52:	9f 91       	pop	r25
    4b54:	8f 91       	pop	r24
    4b56:	7f 91       	pop	r23
    4b58:	6f 91       	pop	r22
    4b5a:	5f 91       	pop	r21
    4b5c:	4f 91       	pop	r20
    4b5e:	3f 91       	pop	r19
    4b60:	2f 91       	pop	r18
    4b62:	0f 90       	pop	r0
    4b64:	0b be       	out	0x3b, r0	; 59
    4b66:	0f 90       	pop	r0
    4b68:	0f be       	out	0x3f, r0	; 63
    4b6a:	0f 90       	pop	r0
    4b6c:	1f 90       	pop	r1
    4b6e:	18 95       	reti

00004b70 <__vector_26>:
    4b70:	1f 92       	push	r1
    4b72:	0f 92       	push	r0
    4b74:	0f b6       	in	r0, 0x3f	; 63
    4b76:	0f 92       	push	r0
    4b78:	11 24       	eor	r1, r1
    4b7a:	0b b6       	in	r0, 0x3b	; 59
    4b7c:	0f 92       	push	r0
    4b7e:	2f 93       	push	r18
    4b80:	8f 93       	push	r24
    4b82:	9f 93       	push	r25
    4b84:	af 93       	push	r26
    4b86:	bf 93       	push	r27
    4b88:	ef 93       	push	r30
    4b8a:	ff 93       	push	r31
    4b8c:	e0 91 60 1a 	lds	r30, 0x1A60	; 0x801a60 <_ser_handle>
    4b90:	f0 91 61 1a 	lds	r31, 0x1A61	; 0x801a61 <_ser_handle+0x1>
    4b94:	30 97       	sbiw	r30, 0x00	; 0
    4b96:	b9 f0       	breq	.+46     	; 0x4bc6 <__vector_26+0x56>
    4b98:	02 80       	ldd	r0, Z+2	; 0x02
    4b9a:	f3 81       	ldd	r31, Z+3	; 0x03
    4b9c:	e0 2d       	mov	r30, r0
    4b9e:	93 81       	ldd	r25, Z+3	; 0x03
    4ba0:	82 81       	ldd	r24, Z+2	; 0x02
    4ba2:	98 17       	cp	r25, r24
    4ba4:	b1 f0       	breq	.+44     	; 0x4bd2 <__vector_26+0x62>
    4ba6:	92 81       	ldd	r25, Z+2	; 0x02
    4ba8:	85 81       	ldd	r24, Z+5	; 0x05
    4baa:	28 2f       	mov	r18, r24
    4bac:	26 95       	lsr	r18
    4bae:	29 23       	and	r18, r25
    4bb0:	a0 81       	ld	r26, Z
    4bb2:	b1 81       	ldd	r27, Z+1	; 0x01
    4bb4:	a2 0f       	add	r26, r18
    4bb6:	b1 1d       	adc	r27, r1
    4bb8:	2c 91       	ld	r18, X
    4bba:	9f 5f       	subi	r25, 0xFF	; 255
    4bbc:	89 23       	and	r24, r25
    4bbe:	82 83       	std	Z+2, r24	; 0x02
    4bc0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4bc4:	0b c0       	rjmp	.+22     	; 0x4bdc <__vector_26+0x6c>
    4bc6:	e1 ec       	ldi	r30, 0xC1	; 193
    4bc8:	f0 e0       	ldi	r31, 0x00	; 0
    4bca:	80 81       	ld	r24, Z
    4bcc:	8f 7d       	andi	r24, 0xDF	; 223
    4bce:	80 83       	st	Z, r24
    4bd0:	05 c0       	rjmp	.+10     	; 0x4bdc <__vector_26+0x6c>
    4bd2:	e1 ec       	ldi	r30, 0xC1	; 193
    4bd4:	f0 e0       	ldi	r31, 0x00	; 0
    4bd6:	80 81       	ld	r24, Z
    4bd8:	8f 7d       	andi	r24, 0xDF	; 223
    4bda:	80 83       	st	Z, r24
    4bdc:	ff 91       	pop	r31
    4bde:	ef 91       	pop	r30
    4be0:	bf 91       	pop	r27
    4be2:	af 91       	pop	r26
    4be4:	9f 91       	pop	r25
    4be6:	8f 91       	pop	r24
    4be8:	2f 91       	pop	r18
    4bea:	0f 90       	pop	r0
    4bec:	0b be       	out	0x3b, r0	; 59
    4bee:	0f 90       	pop	r0
    4bf0:	0f be       	out	0x3f, r0	; 63
    4bf2:	0f 90       	pop	r0
    4bf4:	1f 90       	pop	r1
    4bf6:	18 95       	reti

00004bf8 <__vector_36>:
    4bf8:	1f 92       	push	r1
    4bfa:	0f 92       	push	r0
    4bfc:	0f b6       	in	r0, 0x3f	; 63
    4bfe:	0f 92       	push	r0
    4c00:	11 24       	eor	r1, r1
    4c02:	0b b6       	in	r0, 0x3b	; 59
    4c04:	0f 92       	push	r0
    4c06:	2f 93       	push	r18
    4c08:	3f 93       	push	r19
    4c0a:	4f 93       	push	r20
    4c0c:	5f 93       	push	r21
    4c0e:	6f 93       	push	r22
    4c10:	7f 93       	push	r23
    4c12:	8f 93       	push	r24
    4c14:	9f 93       	push	r25
    4c16:	af 93       	push	r26
    4c18:	bf 93       	push	r27
    4c1a:	cf 93       	push	r28
    4c1c:	df 93       	push	r29
    4c1e:	ef 93       	push	r30
    4c20:	ff 93       	push	r31
    4c22:	a0 91 62 1a 	lds	r26, 0x1A62	; 0x801a62 <_ser_handle+0x2>
    4c26:	b0 91 63 1a 	lds	r27, 0x1A63	; 0x801a63 <_ser_handle+0x3>
    4c2a:	10 97       	sbiw	r26, 0x00	; 0
    4c2c:	11 f1       	breq	.+68     	; 0x4c72 <__vector_36+0x7a>
    4c2e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4c32:	14 96       	adiw	r26, 0x04	; 4
    4c34:	ed 91       	ld	r30, X+
    4c36:	fc 91       	ld	r31, X
    4c38:	15 97       	sbiw	r26, 0x05	; 5
    4c3a:	93 81       	ldd	r25, Z+3	; 0x03
    4c3c:	82 81       	ldd	r24, Z+2	; 0x02
    4c3e:	25 81       	ldd	r18, Z+5	; 0x05
    4c40:	98 1b       	sub	r25, r24
    4c42:	92 23       	and	r25, r18
    4c44:	84 81       	ldd	r24, Z+4	; 0x04
    4c46:	98 17       	cp	r25, r24
    4c48:	61 f0       	breq	.+24     	; 0x4c62 <__vector_36+0x6a>
    4c4a:	83 81       	ldd	r24, Z+3	; 0x03
    4c4c:	26 95       	lsr	r18
    4c4e:	28 23       	and	r18, r24
    4c50:	c0 81       	ld	r28, Z
    4c52:	d1 81       	ldd	r29, Z+1	; 0x01
    4c54:	c2 0f       	add	r28, r18
    4c56:	d1 1d       	adc	r29, r1
    4c58:	68 83       	st	Y, r22
    4c5a:	8f 5f       	subi	r24, 0xFF	; 255
    4c5c:	95 81       	ldd	r25, Z+5	; 0x05
    4c5e:	89 23       	and	r24, r25
    4c60:	83 83       	std	Z+3, r24	; 0x03
    4c62:	16 96       	adiw	r26, 0x06	; 6
    4c64:	ed 91       	ld	r30, X+
    4c66:	fc 91       	ld	r31, X
    4c68:	17 97       	sbiw	r26, 0x07	; 7
    4c6a:	30 97       	sbiw	r30, 0x00	; 0
    4c6c:	11 f0       	breq	.+4      	; 0x4c72 <__vector_36+0x7a>
    4c6e:	cd 01       	movw	r24, r26
    4c70:	19 95       	eicall
    4c72:	ff 91       	pop	r31
    4c74:	ef 91       	pop	r30
    4c76:	df 91       	pop	r29
    4c78:	cf 91       	pop	r28
    4c7a:	bf 91       	pop	r27
    4c7c:	af 91       	pop	r26
    4c7e:	9f 91       	pop	r25
    4c80:	8f 91       	pop	r24
    4c82:	7f 91       	pop	r23
    4c84:	6f 91       	pop	r22
    4c86:	5f 91       	pop	r21
    4c88:	4f 91       	pop	r20
    4c8a:	3f 91       	pop	r19
    4c8c:	2f 91       	pop	r18
    4c8e:	0f 90       	pop	r0
    4c90:	0b be       	out	0x3b, r0	; 59
    4c92:	0f 90       	pop	r0
    4c94:	0f be       	out	0x3f, r0	; 63
    4c96:	0f 90       	pop	r0
    4c98:	1f 90       	pop	r1
    4c9a:	18 95       	reti

00004c9c <__vector_37>:
    4c9c:	1f 92       	push	r1
    4c9e:	0f 92       	push	r0
    4ca0:	0f b6       	in	r0, 0x3f	; 63
    4ca2:	0f 92       	push	r0
    4ca4:	11 24       	eor	r1, r1
    4ca6:	0b b6       	in	r0, 0x3b	; 59
    4ca8:	0f 92       	push	r0
    4caa:	2f 93       	push	r18
    4cac:	8f 93       	push	r24
    4cae:	9f 93       	push	r25
    4cb0:	af 93       	push	r26
    4cb2:	bf 93       	push	r27
    4cb4:	ef 93       	push	r30
    4cb6:	ff 93       	push	r31
    4cb8:	e0 91 62 1a 	lds	r30, 0x1A62	; 0x801a62 <_ser_handle+0x2>
    4cbc:	f0 91 63 1a 	lds	r31, 0x1A63	; 0x801a63 <_ser_handle+0x3>
    4cc0:	30 97       	sbiw	r30, 0x00	; 0
    4cc2:	b9 f0       	breq	.+46     	; 0x4cf2 <__vector_37+0x56>
    4cc4:	02 80       	ldd	r0, Z+2	; 0x02
    4cc6:	f3 81       	ldd	r31, Z+3	; 0x03
    4cc8:	e0 2d       	mov	r30, r0
    4cca:	93 81       	ldd	r25, Z+3	; 0x03
    4ccc:	82 81       	ldd	r24, Z+2	; 0x02
    4cce:	98 17       	cp	r25, r24
    4cd0:	b1 f0       	breq	.+44     	; 0x4cfe <__vector_37+0x62>
    4cd2:	92 81       	ldd	r25, Z+2	; 0x02
    4cd4:	85 81       	ldd	r24, Z+5	; 0x05
    4cd6:	28 2f       	mov	r18, r24
    4cd8:	26 95       	lsr	r18
    4cda:	29 23       	and	r18, r25
    4cdc:	a0 81       	ld	r26, Z
    4cde:	b1 81       	ldd	r27, Z+1	; 0x01
    4ce0:	a2 0f       	add	r26, r18
    4ce2:	b1 1d       	adc	r27, r1
    4ce4:	2c 91       	ld	r18, X
    4ce6:	9f 5f       	subi	r25, 0xFF	; 255
    4ce8:	89 23       	and	r24, r25
    4cea:	82 83       	std	Z+2, r24	; 0x02
    4cec:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4cf0:	0b c0       	rjmp	.+22     	; 0x4d08 <__vector_37+0x6c>
    4cf2:	e9 ec       	ldi	r30, 0xC9	; 201
    4cf4:	f0 e0       	ldi	r31, 0x00	; 0
    4cf6:	80 81       	ld	r24, Z
    4cf8:	8f 7d       	andi	r24, 0xDF	; 223
    4cfa:	80 83       	st	Z, r24
    4cfc:	05 c0       	rjmp	.+10     	; 0x4d08 <__vector_37+0x6c>
    4cfe:	e9 ec       	ldi	r30, 0xC9	; 201
    4d00:	f0 e0       	ldi	r31, 0x00	; 0
    4d02:	80 81       	ld	r24, Z
    4d04:	8f 7d       	andi	r24, 0xDF	; 223
    4d06:	80 83       	st	Z, r24
    4d08:	ff 91       	pop	r31
    4d0a:	ef 91       	pop	r30
    4d0c:	bf 91       	pop	r27
    4d0e:	af 91       	pop	r26
    4d10:	9f 91       	pop	r25
    4d12:	8f 91       	pop	r24
    4d14:	2f 91       	pop	r18
    4d16:	0f 90       	pop	r0
    4d18:	0b be       	out	0x3b, r0	; 59
    4d1a:	0f 90       	pop	r0
    4d1c:	0f be       	out	0x3f, r0	; 63
    4d1e:	0f 90       	pop	r0
    4d20:	1f 90       	pop	r1
    4d22:	18 95       	reti

00004d24 <__vector_51>:
    4d24:	1f 92       	push	r1
    4d26:	0f 92       	push	r0
    4d28:	0f b6       	in	r0, 0x3f	; 63
    4d2a:	0f 92       	push	r0
    4d2c:	11 24       	eor	r1, r1
    4d2e:	0b b6       	in	r0, 0x3b	; 59
    4d30:	0f 92       	push	r0
    4d32:	2f 93       	push	r18
    4d34:	3f 93       	push	r19
    4d36:	4f 93       	push	r20
    4d38:	5f 93       	push	r21
    4d3a:	6f 93       	push	r22
    4d3c:	7f 93       	push	r23
    4d3e:	8f 93       	push	r24
    4d40:	9f 93       	push	r25
    4d42:	af 93       	push	r26
    4d44:	bf 93       	push	r27
    4d46:	cf 93       	push	r28
    4d48:	df 93       	push	r29
    4d4a:	ef 93       	push	r30
    4d4c:	ff 93       	push	r31
    4d4e:	a0 91 64 1a 	lds	r26, 0x1A64	; 0x801a64 <_ser_handle+0x4>
    4d52:	b0 91 65 1a 	lds	r27, 0x1A65	; 0x801a65 <_ser_handle+0x5>
    4d56:	10 97       	sbiw	r26, 0x00	; 0
    4d58:	11 f1       	breq	.+68     	; 0x4d9e <__vector_51+0x7a>
    4d5a:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4d5e:	14 96       	adiw	r26, 0x04	; 4
    4d60:	ed 91       	ld	r30, X+
    4d62:	fc 91       	ld	r31, X
    4d64:	15 97       	sbiw	r26, 0x05	; 5
    4d66:	93 81       	ldd	r25, Z+3	; 0x03
    4d68:	82 81       	ldd	r24, Z+2	; 0x02
    4d6a:	25 81       	ldd	r18, Z+5	; 0x05
    4d6c:	98 1b       	sub	r25, r24
    4d6e:	92 23       	and	r25, r18
    4d70:	84 81       	ldd	r24, Z+4	; 0x04
    4d72:	98 17       	cp	r25, r24
    4d74:	61 f0       	breq	.+24     	; 0x4d8e <__vector_51+0x6a>
    4d76:	83 81       	ldd	r24, Z+3	; 0x03
    4d78:	26 95       	lsr	r18
    4d7a:	28 23       	and	r18, r24
    4d7c:	c0 81       	ld	r28, Z
    4d7e:	d1 81       	ldd	r29, Z+1	; 0x01
    4d80:	c2 0f       	add	r28, r18
    4d82:	d1 1d       	adc	r29, r1
    4d84:	68 83       	st	Y, r22
    4d86:	8f 5f       	subi	r24, 0xFF	; 255
    4d88:	95 81       	ldd	r25, Z+5	; 0x05
    4d8a:	89 23       	and	r24, r25
    4d8c:	83 83       	std	Z+3, r24	; 0x03
    4d8e:	16 96       	adiw	r26, 0x06	; 6
    4d90:	ed 91       	ld	r30, X+
    4d92:	fc 91       	ld	r31, X
    4d94:	17 97       	sbiw	r26, 0x07	; 7
    4d96:	30 97       	sbiw	r30, 0x00	; 0
    4d98:	11 f0       	breq	.+4      	; 0x4d9e <__vector_51+0x7a>
    4d9a:	cd 01       	movw	r24, r26
    4d9c:	19 95       	eicall
    4d9e:	ff 91       	pop	r31
    4da0:	ef 91       	pop	r30
    4da2:	df 91       	pop	r29
    4da4:	cf 91       	pop	r28
    4da6:	bf 91       	pop	r27
    4da8:	af 91       	pop	r26
    4daa:	9f 91       	pop	r25
    4dac:	8f 91       	pop	r24
    4dae:	7f 91       	pop	r23
    4db0:	6f 91       	pop	r22
    4db2:	5f 91       	pop	r21
    4db4:	4f 91       	pop	r20
    4db6:	3f 91       	pop	r19
    4db8:	2f 91       	pop	r18
    4dba:	0f 90       	pop	r0
    4dbc:	0b be       	out	0x3b, r0	; 59
    4dbe:	0f 90       	pop	r0
    4dc0:	0f be       	out	0x3f, r0	; 63
    4dc2:	0f 90       	pop	r0
    4dc4:	1f 90       	pop	r1
    4dc6:	18 95       	reti

00004dc8 <__vector_52>:
    4dc8:	1f 92       	push	r1
    4dca:	0f 92       	push	r0
    4dcc:	0f b6       	in	r0, 0x3f	; 63
    4dce:	0f 92       	push	r0
    4dd0:	11 24       	eor	r1, r1
    4dd2:	0b b6       	in	r0, 0x3b	; 59
    4dd4:	0f 92       	push	r0
    4dd6:	2f 93       	push	r18
    4dd8:	8f 93       	push	r24
    4dda:	9f 93       	push	r25
    4ddc:	af 93       	push	r26
    4dde:	bf 93       	push	r27
    4de0:	ef 93       	push	r30
    4de2:	ff 93       	push	r31
    4de4:	e0 91 64 1a 	lds	r30, 0x1A64	; 0x801a64 <_ser_handle+0x4>
    4de8:	f0 91 65 1a 	lds	r31, 0x1A65	; 0x801a65 <_ser_handle+0x5>
    4dec:	30 97       	sbiw	r30, 0x00	; 0
    4dee:	b9 f0       	breq	.+46     	; 0x4e1e <__vector_52+0x56>
    4df0:	02 80       	ldd	r0, Z+2	; 0x02
    4df2:	f3 81       	ldd	r31, Z+3	; 0x03
    4df4:	e0 2d       	mov	r30, r0
    4df6:	93 81       	ldd	r25, Z+3	; 0x03
    4df8:	82 81       	ldd	r24, Z+2	; 0x02
    4dfa:	98 17       	cp	r25, r24
    4dfc:	b1 f0       	breq	.+44     	; 0x4e2a <__vector_52+0x62>
    4dfe:	92 81       	ldd	r25, Z+2	; 0x02
    4e00:	85 81       	ldd	r24, Z+5	; 0x05
    4e02:	28 2f       	mov	r18, r24
    4e04:	26 95       	lsr	r18
    4e06:	29 23       	and	r18, r25
    4e08:	a0 81       	ld	r26, Z
    4e0a:	b1 81       	ldd	r27, Z+1	; 0x01
    4e0c:	a2 0f       	add	r26, r18
    4e0e:	b1 1d       	adc	r27, r1
    4e10:	2c 91       	ld	r18, X
    4e12:	9f 5f       	subi	r25, 0xFF	; 255
    4e14:	89 23       	and	r24, r25
    4e16:	82 83       	std	Z+2, r24	; 0x02
    4e18:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4e1c:	0b c0       	rjmp	.+22     	; 0x4e34 <__vector_52+0x6c>
    4e1e:	e1 ed       	ldi	r30, 0xD1	; 209
    4e20:	f0 e0       	ldi	r31, 0x00	; 0
    4e22:	80 81       	ld	r24, Z
    4e24:	8f 7d       	andi	r24, 0xDF	; 223
    4e26:	80 83       	st	Z, r24
    4e28:	05 c0       	rjmp	.+10     	; 0x4e34 <__vector_52+0x6c>
    4e2a:	e1 ed       	ldi	r30, 0xD1	; 209
    4e2c:	f0 e0       	ldi	r31, 0x00	; 0
    4e2e:	80 81       	ld	r24, Z
    4e30:	8f 7d       	andi	r24, 0xDF	; 223
    4e32:	80 83       	st	Z, r24
    4e34:	ff 91       	pop	r31
    4e36:	ef 91       	pop	r30
    4e38:	bf 91       	pop	r27
    4e3a:	af 91       	pop	r26
    4e3c:	9f 91       	pop	r25
    4e3e:	8f 91       	pop	r24
    4e40:	2f 91       	pop	r18
    4e42:	0f 90       	pop	r0
    4e44:	0b be       	out	0x3b, r0	; 59
    4e46:	0f 90       	pop	r0
    4e48:	0f be       	out	0x3f, r0	; 63
    4e4a:	0f 90       	pop	r0
    4e4c:	1f 90       	pop	r1
    4e4e:	18 95       	reti

00004e50 <__vector_54>:
    4e50:	1f 92       	push	r1
    4e52:	0f 92       	push	r0
    4e54:	0f b6       	in	r0, 0x3f	; 63
    4e56:	0f 92       	push	r0
    4e58:	11 24       	eor	r1, r1
    4e5a:	0b b6       	in	r0, 0x3b	; 59
    4e5c:	0f 92       	push	r0
    4e5e:	2f 93       	push	r18
    4e60:	3f 93       	push	r19
    4e62:	4f 93       	push	r20
    4e64:	5f 93       	push	r21
    4e66:	6f 93       	push	r22
    4e68:	7f 93       	push	r23
    4e6a:	8f 93       	push	r24
    4e6c:	9f 93       	push	r25
    4e6e:	af 93       	push	r26
    4e70:	bf 93       	push	r27
    4e72:	cf 93       	push	r28
    4e74:	df 93       	push	r29
    4e76:	ef 93       	push	r30
    4e78:	ff 93       	push	r31
    4e7a:	a0 91 66 1a 	lds	r26, 0x1A66	; 0x801a66 <_ser_handle+0x6>
    4e7e:	b0 91 67 1a 	lds	r27, 0x1A67	; 0x801a67 <_ser_handle+0x7>
    4e82:	10 97       	sbiw	r26, 0x00	; 0
    4e84:	11 f1       	breq	.+68     	; 0x4eca <__vector_54+0x7a>
    4e86:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4e8a:	14 96       	adiw	r26, 0x04	; 4
    4e8c:	ed 91       	ld	r30, X+
    4e8e:	fc 91       	ld	r31, X
    4e90:	15 97       	sbiw	r26, 0x05	; 5
    4e92:	93 81       	ldd	r25, Z+3	; 0x03
    4e94:	82 81       	ldd	r24, Z+2	; 0x02
    4e96:	25 81       	ldd	r18, Z+5	; 0x05
    4e98:	98 1b       	sub	r25, r24
    4e9a:	92 23       	and	r25, r18
    4e9c:	84 81       	ldd	r24, Z+4	; 0x04
    4e9e:	98 17       	cp	r25, r24
    4ea0:	61 f0       	breq	.+24     	; 0x4eba <__vector_54+0x6a>
    4ea2:	83 81       	ldd	r24, Z+3	; 0x03
    4ea4:	26 95       	lsr	r18
    4ea6:	28 23       	and	r18, r24
    4ea8:	c0 81       	ld	r28, Z
    4eaa:	d1 81       	ldd	r29, Z+1	; 0x01
    4eac:	c2 0f       	add	r28, r18
    4eae:	d1 1d       	adc	r29, r1
    4eb0:	68 83       	st	Y, r22
    4eb2:	8f 5f       	subi	r24, 0xFF	; 255
    4eb4:	95 81       	ldd	r25, Z+5	; 0x05
    4eb6:	89 23       	and	r24, r25
    4eb8:	83 83       	std	Z+3, r24	; 0x03
    4eba:	16 96       	adiw	r26, 0x06	; 6
    4ebc:	ed 91       	ld	r30, X+
    4ebe:	fc 91       	ld	r31, X
    4ec0:	17 97       	sbiw	r26, 0x07	; 7
    4ec2:	30 97       	sbiw	r30, 0x00	; 0
    4ec4:	11 f0       	breq	.+4      	; 0x4eca <__vector_54+0x7a>
    4ec6:	cd 01       	movw	r24, r26
    4ec8:	19 95       	eicall
    4eca:	ff 91       	pop	r31
    4ecc:	ef 91       	pop	r30
    4ece:	df 91       	pop	r29
    4ed0:	cf 91       	pop	r28
    4ed2:	bf 91       	pop	r27
    4ed4:	af 91       	pop	r26
    4ed6:	9f 91       	pop	r25
    4ed8:	8f 91       	pop	r24
    4eda:	7f 91       	pop	r23
    4edc:	6f 91       	pop	r22
    4ede:	5f 91       	pop	r21
    4ee0:	4f 91       	pop	r20
    4ee2:	3f 91       	pop	r19
    4ee4:	2f 91       	pop	r18
    4ee6:	0f 90       	pop	r0
    4ee8:	0b be       	out	0x3b, r0	; 59
    4eea:	0f 90       	pop	r0
    4eec:	0f be       	out	0x3f, r0	; 63
    4eee:	0f 90       	pop	r0
    4ef0:	1f 90       	pop	r1
    4ef2:	18 95       	reti

00004ef4 <__vector_55>:
    4ef4:	1f 92       	push	r1
    4ef6:	0f 92       	push	r0
    4ef8:	0f b6       	in	r0, 0x3f	; 63
    4efa:	0f 92       	push	r0
    4efc:	11 24       	eor	r1, r1
    4efe:	0b b6       	in	r0, 0x3b	; 59
    4f00:	0f 92       	push	r0
    4f02:	2f 93       	push	r18
    4f04:	8f 93       	push	r24
    4f06:	9f 93       	push	r25
    4f08:	af 93       	push	r26
    4f0a:	bf 93       	push	r27
    4f0c:	ef 93       	push	r30
    4f0e:	ff 93       	push	r31
    4f10:	e0 91 66 1a 	lds	r30, 0x1A66	; 0x801a66 <_ser_handle+0x6>
    4f14:	f0 91 67 1a 	lds	r31, 0x1A67	; 0x801a67 <_ser_handle+0x7>
    4f18:	30 97       	sbiw	r30, 0x00	; 0
    4f1a:	b9 f0       	breq	.+46     	; 0x4f4a <__vector_55+0x56>
    4f1c:	02 80       	ldd	r0, Z+2	; 0x02
    4f1e:	f3 81       	ldd	r31, Z+3	; 0x03
    4f20:	e0 2d       	mov	r30, r0
    4f22:	93 81       	ldd	r25, Z+3	; 0x03
    4f24:	82 81       	ldd	r24, Z+2	; 0x02
    4f26:	98 17       	cp	r25, r24
    4f28:	b1 f0       	breq	.+44     	; 0x4f56 <__vector_55+0x62>
    4f2a:	92 81       	ldd	r25, Z+2	; 0x02
    4f2c:	85 81       	ldd	r24, Z+5	; 0x05
    4f2e:	28 2f       	mov	r18, r24
    4f30:	26 95       	lsr	r18
    4f32:	29 23       	and	r18, r25
    4f34:	a0 81       	ld	r26, Z
    4f36:	b1 81       	ldd	r27, Z+1	; 0x01
    4f38:	a2 0f       	add	r26, r18
    4f3a:	b1 1d       	adc	r27, r1
    4f3c:	2c 91       	ld	r18, X
    4f3e:	9f 5f       	subi	r25, 0xFF	; 255
    4f40:	89 23       	and	r24, r25
    4f42:	82 83       	std	Z+2, r24	; 0x02
    4f44:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4f48:	0b c0       	rjmp	.+22     	; 0x4f60 <__vector_55+0x6c>
    4f4a:	e1 e3       	ldi	r30, 0x31	; 49
    4f4c:	f1 e0       	ldi	r31, 0x01	; 1
    4f4e:	80 81       	ld	r24, Z
    4f50:	8f 7d       	andi	r24, 0xDF	; 223
    4f52:	80 83       	st	Z, r24
    4f54:	05 c0       	rjmp	.+10     	; 0x4f60 <__vector_55+0x6c>
    4f56:	e1 e3       	ldi	r30, 0x31	; 49
    4f58:	f1 e0       	ldi	r31, 0x01	; 1
    4f5a:	80 81       	ld	r24, Z
    4f5c:	8f 7d       	andi	r24, 0xDF	; 223
    4f5e:	80 83       	st	Z, r24
    4f60:	ff 91       	pop	r31
    4f62:	ef 91       	pop	r30
    4f64:	bf 91       	pop	r27
    4f66:	af 91       	pop	r26
    4f68:	9f 91       	pop	r25
    4f6a:	8f 91       	pop	r24
    4f6c:	2f 91       	pop	r18
    4f6e:	0f 90       	pop	r0
    4f70:	0b be       	out	0x3b, r0	; 59
    4f72:	0f 90       	pop	r0
    4f74:	0f be       	out	0x3f, r0	; 63
    4f76:	0f 90       	pop	r0
    4f78:	1f 90       	pop	r1
    4f7a:	18 95       	reti

00004f7c <usart_getchar>:
    4f7c:	cf 93       	push	r28
    4f7e:	df 93       	push	r29
    4f80:	1f 92       	push	r1
    4f82:	cd b7       	in	r28, 0x3d	; 61
    4f84:	de b7       	in	r29, 0x3e	; 62
    4f86:	be 01       	movw	r22, r28
    4f88:	6f 5f       	subi	r22, 0xFF	; 255
    4f8a:	7f 4f       	sbci	r23, 0xFF	; 255
    4f8c:	80 91 68 1a 	lds	r24, 0x1A68	; 0x801a68 <_com_serial_instance>
    4f90:	90 91 69 1a 	lds	r25, 0x1A69	; 0x801a69 <_com_serial_instance+0x1>
    4f94:	7f dd       	rcall	.-1282   	; 0x4a94 <serial_get_byte>
    4f96:	81 11       	cpse	r24, r1
    4f98:	f6 cf       	rjmp	.-20     	; 0x4f86 <usart_getchar+0xa>
    4f9a:	89 81       	ldd	r24, Y+1	; 0x01
    4f9c:	90 e0       	ldi	r25, 0x00	; 0
    4f9e:	0f 90       	pop	r0
    4fa0:	df 91       	pop	r29
    4fa2:	cf 91       	pop	r28
    4fa4:	08 95       	ret

00004fa6 <usart_putchar>:
    4fa6:	68 2f       	mov	r22, r24
    4fa8:	80 91 68 1a 	lds	r24, 0x1A68	; 0x801a68 <_com_serial_instance>
    4fac:	90 91 69 1a 	lds	r25, 0x1A69	; 0x801a69 <_com_serial_instance+0x1>
    4fb0:	fc dc       	rcall	.-1544   	; 0x49aa <serial_send_byte>
    4fb2:	80 e0       	ldi	r24, 0x00	; 0
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	08 95       	ret

00004fb8 <stdioCreate>:
    4fb8:	8f 92       	push	r8
    4fba:	9f 92       	push	r9
    4fbc:	af 92       	push	r10
    4fbe:	cf 92       	push	r12
    4fc0:	ef 92       	push	r14
    4fc2:	0f 93       	push	r16
    4fc4:	81 2c       	mov	r8, r1
    4fc6:	91 2c       	mov	r9, r1
    4fc8:	68 94       	set
    4fca:	aa 24       	eor	r10, r10
    4fcc:	a7 f8       	bld	r10, 7
    4fce:	68 94       	set
    4fd0:	cc 24       	eor	r12, r12
    4fd2:	c7 f8       	bld	r12, 7
    4fd4:	e1 2c       	mov	r14, r1
    4fd6:	00 e0       	ldi	r16, 0x00	; 0
    4fd8:	23 e0       	ldi	r18, 0x03	; 3
    4fda:	40 e0       	ldi	r20, 0x00	; 0
    4fdc:	51 ee       	ldi	r21, 0xE1	; 225
    4fde:	60 e0       	ldi	r22, 0x00	; 0
    4fe0:	70 e0       	ldi	r23, 0x00	; 0
    4fe2:	4c dc       	rcall	.-1896   	; 0x487c <serial_new_instance>
    4fe4:	90 93 69 1a 	sts	0x1A69, r25	; 0x801a69 <_com_serial_instance+0x1>
    4fe8:	80 93 68 1a 	sts	0x1A68, r24	; 0x801a68 <_com_serial_instance>
    4fec:	ea ea       	ldi	r30, 0xAA	; 170
    4fee:	fa e1       	ldi	r31, 0x1A	; 26
    4ff0:	82 e1       	ldi	r24, 0x12	; 18
    4ff2:	92 e0       	ldi	r25, 0x02	; 2
    4ff4:	91 83       	std	Z+1, r25	; 0x01
    4ff6:	80 83       	st	Z, r24
    4ff8:	93 83       	std	Z+3, r25	; 0x03
    4ffa:	82 83       	std	Z+2, r24	; 0x02
    4ffc:	0f 91       	pop	r16
    4ffe:	ef 90       	pop	r14
    5000:	cf 90       	pop	r12
    5002:	af 90       	pop	r10
    5004:	9f 90       	pop	r9
    5006:	8f 90       	pop	r8
    5008:	08 95       	ret

0000500a <_initTwiInterface>:
    500a:	80 91 78 1a 	lds	r24, 0x1A78	; 0x801a78 <_twiIsInitiated>
    500e:	81 11       	cpse	r24, r1
    5010:	0c c0       	rjmp	.+24     	; 0x502a <_initTwiInterface+0x20>
    5012:	8c e0       	ldi	r24, 0x0C	; 12
    5014:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5018:	8f ef       	ldi	r24, 0xFF	; 255
    501a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    501e:	84 e0       	ldi	r24, 0x04	; 4
    5020:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5024:	81 e0       	ldi	r24, 0x01	; 1
    5026:	80 93 78 1a 	sts	0x1A78, r24	; 0x801a78 <_twiIsInitiated>
    502a:	08 95       	ret

0000502c <twiCreate>:
    502c:	af 92       	push	r10
    502e:	bf 92       	push	r11
    5030:	cf 92       	push	r12
    5032:	df 92       	push	r13
    5034:	ef 92       	push	r14
    5036:	ff 92       	push	r15
    5038:	0f 93       	push	r16
    503a:	1f 93       	push	r17
    503c:	cf 93       	push	r28
    503e:	df 93       	push	r29
    5040:	a8 2e       	mov	r10, r24
    5042:	b6 2e       	mov	r11, r22
    5044:	69 01       	movw	r12, r18
    5046:	7a 01       	movw	r14, r20
    5048:	84 e0       	ldi	r24, 0x04	; 4
    504a:	90 e0       	ldi	r25, 0x00	; 0
    504c:	79 d3       	rcall	.+1778   	; 0x5740 <malloc>
    504e:	ec 01       	movw	r28, r24
    5050:	89 2b       	or	r24, r25
    5052:	61 f1       	breq	.+88     	; 0x50ac <twiCreate+0x80>
    5054:	a8 82       	st	Y, r10
    5056:	81 e0       	ldi	r24, 0x01	; 1
    5058:	b8 12       	cpse	r11, r24
    505a:	12 c0       	rjmp	.+36     	; 0x5080 <twiCreate+0x54>
    505c:	c7 01       	movw	r24, r14
    505e:	b6 01       	movw	r22, r12
    5060:	20 ea       	ldi	r18, 0xA0	; 160
    5062:	36 e8       	ldi	r19, 0x86	; 134
    5064:	41 e0       	ldi	r20, 0x01	; 1
    5066:	50 e0       	ldi	r21, 0x00	; 0
    5068:	27 d3       	rcall	.+1614   	; 0x56b8 <__udivmodsi4>
    506a:	da 01       	movw	r26, r20
    506c:	c9 01       	movw	r24, r18
    506e:	40 97       	sbiw	r24, 0x10	; 16
    5070:	a1 09       	sbc	r26, r1
    5072:	b1 09       	sbc	r27, r1
    5074:	b6 95       	lsr	r27
    5076:	a7 95       	ror	r26
    5078:	97 95       	ror	r25
    507a:	87 95       	ror	r24
    507c:	89 83       	std	Y+1, r24	; 0x01
    507e:	11 c0       	rjmp	.+34     	; 0x50a2 <twiCreate+0x76>
    5080:	c7 01       	movw	r24, r14
    5082:	b6 01       	movw	r22, r12
    5084:	20 e8       	ldi	r18, 0x80	; 128
    5086:	3a e1       	ldi	r19, 0x1A	; 26
    5088:	46 e0       	ldi	r20, 0x06	; 6
    508a:	50 e0       	ldi	r21, 0x00	; 0
    508c:	15 d3       	rcall	.+1578   	; 0x56b8 <__udivmodsi4>
    508e:	da 01       	movw	r26, r20
    5090:	c9 01       	movw	r24, r18
    5092:	40 97       	sbiw	r24, 0x10	; 16
    5094:	a1 09       	sbc	r26, r1
    5096:	b1 09       	sbc	r27, r1
    5098:	b6 95       	lsr	r27
    509a:	a7 95       	ror	r26
    509c:	97 95       	ror	r25
    509e:	87 95       	ror	r24
    50a0:	89 83       	std	Y+1, r24	; 0x01
    50a2:	1b 83       	std	Y+3, r17	; 0x03
    50a4:	0a 83       	std	Y+2, r16	; 0x02
    50a6:	8c 2f       	mov	r24, r28
    50a8:	9d 2f       	mov	r25, r29
    50aa:	02 c0       	rjmp	.+4      	; 0x50b0 <twiCreate+0x84>
    50ac:	80 e0       	ldi	r24, 0x00	; 0
    50ae:	90 e0       	ldi	r25, 0x00	; 0
    50b0:	df 91       	pop	r29
    50b2:	cf 91       	pop	r28
    50b4:	1f 91       	pop	r17
    50b6:	0f 91       	pop	r16
    50b8:	ff 90       	pop	r15
    50ba:	ef 90       	pop	r14
    50bc:	df 90       	pop	r13
    50be:	cf 90       	pop	r12
    50c0:	bf 90       	pop	r11
    50c2:	af 90       	pop	r10
    50c4:	08 95       	ret

000050c6 <twiIsBusy>:
    50c6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    50ca:	81 70       	andi	r24, 0x01	; 1
    50cc:	08 95       	ret

000050ce <twiTransmit>:
    50ce:	ff 92       	push	r15
    50d0:	0f 93       	push	r16
    50d2:	1f 93       	push	r17
    50d4:	cf 93       	push	r28
    50d6:	df 93       	push	r29
    50d8:	00 97       	sbiw	r24, 0x00	; 0
    50da:	d1 f1       	breq	.+116    	; 0x5150 <twiTransmit+0x82>
    50dc:	4a 30       	cpi	r20, 0x0A	; 10
    50de:	d0 f5       	brcc	.+116    	; 0x5154 <twiTransmit+0x86>
    50e0:	f4 2e       	mov	r15, r20
    50e2:	8b 01       	movw	r16, r22
    50e4:	ec 01       	movw	r28, r24
    50e6:	ef df       	rcall	.-34     	; 0x50c6 <twiIsBusy>
    50e8:	81 11       	cpse	r24, r1
    50ea:	36 c0       	rjmp	.+108    	; 0x5158 <twiTransmit+0x8a>
    50ec:	80 91 6b 1a 	lds	r24, 0x1A6B	; 0x801a6b <_twiCurrentHandler>
    50f0:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <_twiCurrentHandler+0x1>
    50f4:	c8 17       	cp	r28, r24
    50f6:	d9 07       	cpc	r29, r25
    50f8:	41 f0       	breq	.+16     	; 0x510a <twiTransmit+0x3c>
    50fa:	87 df       	rcall	.-242    	; 0x500a <_initTwiInterface>
    50fc:	89 81       	ldd	r24, Y+1	; 0x01
    50fe:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5102:	d0 93 6c 1a 	sts	0x1A6C, r29	; 0x801a6c <_twiCurrentHandler+0x1>
    5106:	c0 93 6b 1a 	sts	0x1A6B, r28	; 0x801a6b <_twiCurrentHandler>
    510a:	81 e0       	ldi	r24, 0x01	; 1
    510c:	8f 0d       	add	r24, r15
    510e:	80 93 6d 1a 	sts	0x1A6D, r24	; 0x801a6d <_twiMessageLen>
    5112:	88 81       	ld	r24, Y
    5114:	88 0f       	add	r24, r24
    5116:	80 93 6e 1a 	sts	0x1A6E, r24	; 0x801a6e <_twiMessageBuffer>
    511a:	ff 20       	and	r15, r15
    511c:	89 f0       	breq	.+34     	; 0x5140 <twiTransmit+0x72>
    511e:	f8 01       	movw	r30, r16
    5120:	af e6       	ldi	r26, 0x6F	; 111
    5122:	ba e1       	ldi	r27, 0x1A	; 26
    5124:	4f ef       	ldi	r20, 0xFF	; 255
    5126:	4f 0d       	add	r20, r15
    5128:	64 2f       	mov	r22, r20
    512a:	70 e0       	ldi	r23, 0x00	; 0
    512c:	cb 01       	movw	r24, r22
    512e:	01 96       	adiw	r24, 0x01	; 1
    5130:	b8 01       	movw	r22, r16
    5132:	68 0f       	add	r22, r24
    5134:	79 1f       	adc	r23, r25
    5136:	81 91       	ld	r24, Z+
    5138:	8d 93       	st	X+, r24
    513a:	e6 17       	cp	r30, r22
    513c:	f7 07       	cpc	r31, r23
    513e:	d9 f7       	brne	.-10     	; 0x5136 <twiTransmit+0x68>
    5140:	88 ef       	ldi	r24, 0xF8	; 248
    5142:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    5146:	85 ea       	ldi	r24, 0xA5	; 165
    5148:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    514c:	84 e0       	ldi	r24, 0x04	; 4
    514e:	05 c0       	rjmp	.+10     	; 0x515a <twiTransmit+0x8c>
    5150:	86 e0       	ldi	r24, 0x06	; 6
    5152:	03 c0       	rjmp	.+6      	; 0x515a <twiTransmit+0x8c>
    5154:	87 e0       	ldi	r24, 0x07	; 7
    5156:	01 c0       	rjmp	.+2      	; 0x515a <twiTransmit+0x8c>
    5158:	82 e0       	ldi	r24, 0x02	; 2
    515a:	df 91       	pop	r29
    515c:	cf 91       	pop	r28
    515e:	1f 91       	pop	r17
    5160:	0f 91       	pop	r16
    5162:	ff 90       	pop	r15
    5164:	08 95       	ret

00005166 <twiReceive>:
    5166:	1f 93       	push	r17
    5168:	cf 93       	push	r28
    516a:	df 93       	push	r29
    516c:	00 97       	sbiw	r24, 0x00	; 0
    516e:	29 f1       	breq	.+74     	; 0x51ba <twiReceive+0x54>
    5170:	6b 30       	cpi	r22, 0x0B	; 11
    5172:	28 f5       	brcc	.+74     	; 0x51be <twiReceive+0x58>
    5174:	16 2f       	mov	r17, r22
    5176:	ec 01       	movw	r28, r24
    5178:	a6 df       	rcall	.-180    	; 0x50c6 <twiIsBusy>
    517a:	81 11       	cpse	r24, r1
    517c:	22 c0       	rjmp	.+68     	; 0x51c2 <twiReceive+0x5c>
    517e:	80 91 6b 1a 	lds	r24, 0x1A6B	; 0x801a6b <_twiCurrentHandler>
    5182:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <_twiCurrentHandler+0x1>
    5186:	c8 17       	cp	r28, r24
    5188:	d9 07       	cpc	r29, r25
    518a:	41 f0       	breq	.+16     	; 0x519c <twiReceive+0x36>
    518c:	3e df       	rcall	.-388    	; 0x500a <_initTwiInterface>
    518e:	89 81       	ldd	r24, Y+1	; 0x01
    5190:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5194:	d0 93 6c 1a 	sts	0x1A6C, r29	; 0x801a6c <_twiCurrentHandler+0x1>
    5198:	c0 93 6b 1a 	sts	0x1A6B, r28	; 0x801a6b <_twiCurrentHandler>
    519c:	10 93 6d 1a 	sts	0x1A6D, r17	; 0x801a6d <_twiMessageLen>
    51a0:	88 81       	ld	r24, Y
    51a2:	88 0f       	add	r24, r24
    51a4:	81 60       	ori	r24, 0x01	; 1
    51a6:	80 93 6e 1a 	sts	0x1A6E, r24	; 0x801a6e <_twiMessageBuffer>
    51aa:	88 ef       	ldi	r24, 0xF8	; 248
    51ac:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    51b0:	85 ea       	ldi	r24, 0xA5	; 165
    51b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    51b6:	85 e0       	ldi	r24, 0x05	; 5
    51b8:	05 c0       	rjmp	.+10     	; 0x51c4 <twiReceive+0x5e>
    51ba:	86 e0       	ldi	r24, 0x06	; 6
    51bc:	03 c0       	rjmp	.+6      	; 0x51c4 <twiReceive+0x5e>
    51be:	87 e0       	ldi	r24, 0x07	; 7
    51c0:	01 c0       	rjmp	.+2      	; 0x51c4 <twiReceive+0x5e>
    51c2:	82 e0       	ldi	r24, 0x02	; 2
    51c4:	df 91       	pop	r29
    51c6:	cf 91       	pop	r28
    51c8:	1f 91       	pop	r17
    51ca:	08 95       	ret

000051cc <__vector_39>:
    51cc:	1f 92       	push	r1
    51ce:	0f 92       	push	r0
    51d0:	0f b6       	in	r0, 0x3f	; 63
    51d2:	0f 92       	push	r0
    51d4:	11 24       	eor	r1, r1
    51d6:	0b b6       	in	r0, 0x3b	; 59
    51d8:	0f 92       	push	r0
    51da:	2f 93       	push	r18
    51dc:	3f 93       	push	r19
    51de:	4f 93       	push	r20
    51e0:	5f 93       	push	r21
    51e2:	6f 93       	push	r22
    51e4:	7f 93       	push	r23
    51e6:	8f 93       	push	r24
    51e8:	9f 93       	push	r25
    51ea:	af 93       	push	r26
    51ec:	bf 93       	push	r27
    51ee:	ef 93       	push	r30
    51f0:	ff 93       	push	r31
    51f2:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    51f6:	8e 2f       	mov	r24, r30
    51f8:	90 e0       	ldi	r25, 0x00	; 0
    51fa:	fc 01       	movw	r30, r24
    51fc:	38 97       	sbiw	r30, 0x08	; 8
    51fe:	e1 35       	cpi	r30, 0x51	; 81
    5200:	f1 05       	cpc	r31, r1
    5202:	08 f0       	brcs	.+2      	; 0x5206 <__vector_39+0x3a>
    5204:	75 c0       	rjmp	.+234    	; 0x52f0 <__vector_39+0x124>
    5206:	88 27       	eor	r24, r24
    5208:	e4 58       	subi	r30, 0x84	; 132
    520a:	ff 4f       	sbci	r31, 0xFF	; 255
    520c:	8f 4f       	sbci	r24, 0xFF	; 255
    520e:	76 c2       	rjmp	.+1260   	; 0x56fc <__tablejump2__>
    5210:	10 92 6a 1a 	sts	0x1A6A, r1	; 0x801a6a <_index.1885>
    5214:	e0 91 6a 1a 	lds	r30, 0x1A6A	; 0x801a6a <_index.1885>
    5218:	80 91 6d 1a 	lds	r24, 0x1A6D	; 0x801a6d <_twiMessageLen>
    521c:	e8 17       	cp	r30, r24
    521e:	70 f4       	brcc	.+28     	; 0x523c <__vector_39+0x70>
    5220:	81 e0       	ldi	r24, 0x01	; 1
    5222:	8e 0f       	add	r24, r30
    5224:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <_index.1885>
    5228:	f0 e0       	ldi	r31, 0x00	; 0
    522a:	e2 59       	subi	r30, 0x92	; 146
    522c:	f5 4e       	sbci	r31, 0xE5	; 229
    522e:	80 81       	ld	r24, Z
    5230:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5234:	85 e8       	ldi	r24, 0x85	; 133
    5236:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    523a:	72 c0       	rjmp	.+228    	; 0x5320 <__vector_39+0x154>
    523c:	84 e9       	ldi	r24, 0x94	; 148
    523e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5242:	80 91 6b 1a 	lds	r24, 0x1A6B	; 0x801a6b <_twiCurrentHandler>
    5246:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <_twiCurrentHandler+0x1>
    524a:	dc 01       	movw	r26, r24
    524c:	12 96       	adiw	r26, 0x02	; 2
    524e:	ed 91       	ld	r30, X+
    5250:	fc 91       	ld	r31, X
    5252:	13 97       	sbiw	r26, 0x03	; 3
    5254:	30 97       	sbiw	r30, 0x00	; 0
    5256:	09 f4       	brne	.+2      	; 0x525a <__vector_39+0x8e>
    5258:	63 c0       	rjmp	.+198    	; 0x5320 <__vector_39+0x154>
    525a:	20 e0       	ldi	r18, 0x00	; 0
    525c:	40 e0       	ldi	r20, 0x00	; 0
    525e:	50 e0       	ldi	r21, 0x00	; 0
    5260:	64 e0       	ldi	r22, 0x04	; 4
    5262:	19 95       	eicall
    5264:	5d c0       	rjmp	.+186    	; 0x5320 <__vector_39+0x154>
    5266:	e0 91 6a 1a 	lds	r30, 0x1A6A	; 0x801a6a <_index.1885>
    526a:	81 e0       	ldi	r24, 0x01	; 1
    526c:	8e 0f       	add	r24, r30
    526e:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <_index.1885>
    5272:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5276:	f0 e0       	ldi	r31, 0x00	; 0
    5278:	e2 59       	subi	r30, 0x92	; 146
    527a:	f5 4e       	sbci	r31, 0xE5	; 229
    527c:	80 83       	st	Z, r24
    527e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5282:	80 34       	cpi	r24, 0x40	; 64
    5284:	11 f4       	brne	.+4      	; 0x528a <__vector_39+0xbe>
    5286:	10 92 6a 1a 	sts	0x1A6A, r1	; 0x801a6a <_index.1885>
    528a:	20 91 6a 1a 	lds	r18, 0x1A6A	; 0x801a6a <_index.1885>
    528e:	30 e0       	ldi	r19, 0x00	; 0
    5290:	80 91 6d 1a 	lds	r24, 0x1A6D	; 0x801a6d <_twiMessageLen>
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	01 97       	sbiw	r24, 0x01	; 1
    5298:	28 17       	cp	r18, r24
    529a:	39 07       	cpc	r19, r25
    529c:	24 f4       	brge	.+8      	; 0x52a6 <__vector_39+0xda>
    529e:	85 ec       	ldi	r24, 0xC5	; 197
    52a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52a4:	3d c0       	rjmp	.+122    	; 0x5320 <__vector_39+0x154>
    52a6:	85 e8       	ldi	r24, 0x85	; 133
    52a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52ac:	39 c0       	rjmp	.+114    	; 0x5320 <__vector_39+0x154>
    52ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    52b2:	e0 91 6a 1a 	lds	r30, 0x1A6A	; 0x801a6a <_index.1885>
    52b6:	f0 e0       	ldi	r31, 0x00	; 0
    52b8:	e2 59       	subi	r30, 0x92	; 146
    52ba:	f5 4e       	sbci	r31, 0xE5	; 229
    52bc:	80 83       	st	Z, r24
    52be:	84 e9       	ldi	r24, 0x94	; 148
    52c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52c4:	80 91 6b 1a 	lds	r24, 0x1A6B	; 0x801a6b <_twiCurrentHandler>
    52c8:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <_twiCurrentHandler+0x1>
    52cc:	dc 01       	movw	r26, r24
    52ce:	12 96       	adiw	r26, 0x02	; 2
    52d0:	ed 91       	ld	r30, X+
    52d2:	fc 91       	ld	r31, X
    52d4:	13 97       	sbiw	r26, 0x03	; 3
    52d6:	30 97       	sbiw	r30, 0x00	; 0
    52d8:	19 f1       	breq	.+70     	; 0x5320 <__vector_39+0x154>
    52da:	20 91 6d 1a 	lds	r18, 0x1A6D	; 0x801a6d <_twiMessageLen>
    52de:	4e e6       	ldi	r20, 0x6E	; 110
    52e0:	5a e1       	ldi	r21, 0x1A	; 26
    52e2:	65 e0       	ldi	r22, 0x05	; 5
    52e4:	19 95       	eicall
    52e6:	1c c0       	rjmp	.+56     	; 0x5320 <__vector_39+0x154>
    52e8:	85 ea       	ldi	r24, 0xA5	; 165
    52ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52ee:	18 c0       	rjmp	.+48     	; 0x5320 <__vector_39+0x154>
    52f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    52f4:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    52f8:	84 e0       	ldi	r24, 0x04	; 4
    52fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52fe:	80 91 6b 1a 	lds	r24, 0x1A6B	; 0x801a6b <_twiCurrentHandler>
    5302:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <_twiCurrentHandler+0x1>
    5306:	dc 01       	movw	r26, r24
    5308:	12 96       	adiw	r26, 0x02	; 2
    530a:	ed 91       	ld	r30, X+
    530c:	fc 91       	ld	r31, X
    530e:	13 97       	sbiw	r26, 0x03	; 3
    5310:	30 97       	sbiw	r30, 0x00	; 0
    5312:	31 f0       	breq	.+12     	; 0x5320 <__vector_39+0x154>
    5314:	20 e0       	ldi	r18, 0x00	; 0
    5316:	40 e0       	ldi	r20, 0x00	; 0
    5318:	50 e0       	ldi	r21, 0x00	; 0
    531a:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    531e:	19 95       	eicall
    5320:	ff 91       	pop	r31
    5322:	ef 91       	pop	r30
    5324:	bf 91       	pop	r27
    5326:	af 91       	pop	r26
    5328:	9f 91       	pop	r25
    532a:	8f 91       	pop	r24
    532c:	7f 91       	pop	r23
    532e:	6f 91       	pop	r22
    5330:	5f 91       	pop	r21
    5332:	4f 91       	pop	r20
    5334:	3f 91       	pop	r19
    5336:	2f 91       	pop	r18
    5338:	0f 90       	pop	r0
    533a:	0b be       	out	0x3b, r0	; 59
    533c:	0f 90       	pop	r0
    533e:	0f be       	out	0x3f, r0	; 63
    5340:	0f 90       	pop	r0
    5342:	1f 90       	pop	r1
    5344:	18 95       	reti

00005346 <fifo_init>:
    5346:	fc 01       	movw	r30, r24
    5348:	41 11       	cpse	r20, r1
    534a:	01 c0       	rjmp	.+2      	; 0x534e <fifo_init+0x8>
    534c:	1a d3       	rcall	.+1588   	; 0x5982 <abort>
    534e:	84 2f       	mov	r24, r20
    5350:	90 e0       	ldi	r25, 0x00	; 0
    5352:	9c 01       	movw	r18, r24
    5354:	21 50       	subi	r18, 0x01	; 1
    5356:	31 09       	sbc	r19, r1
    5358:	82 23       	and	r24, r18
    535a:	93 23       	and	r25, r19
    535c:	89 2b       	or	r24, r25
    535e:	09 f0       	breq	.+2      	; 0x5362 <fifo_init+0x1c>
    5360:	10 d3       	rcall	.+1568   	; 0x5982 <abort>
    5362:	41 38       	cpi	r20, 0x81	; 129
    5364:	08 f0       	brcs	.+2      	; 0x5368 <fifo_init+0x22>
    5366:	0d d3       	rcall	.+1562   	; 0x5982 <abort>
    5368:	12 82       	std	Z+2, r1	; 0x02
    536a:	13 82       	std	Z+3, r1	; 0x03
    536c:	44 83       	std	Z+4, r20	; 0x04
    536e:	44 0f       	add	r20, r20
    5370:	41 50       	subi	r20, 0x01	; 1
    5372:	45 83       	std	Z+5, r20	; 0x05
    5374:	71 83       	std	Z+1, r23	; 0x01
    5376:	60 83       	st	Z, r22
    5378:	80 e0       	ldi	r24, 0x00	; 0
    537a:	90 e0       	ldi	r25, 0x00	; 0
    537c:	08 95       	ret

0000537e <__subsf3>:
    537e:	50 58       	subi	r21, 0x80	; 128

00005380 <__addsf3>:
    5380:	bb 27       	eor	r27, r27
    5382:	aa 27       	eor	r26, r26
    5384:	0e d0       	rcall	.+28     	; 0x53a2 <__addsf3x>
    5386:	21 c1       	rjmp	.+578    	; 0x55ca <__fp_round>
    5388:	12 d1       	rcall	.+548    	; 0x55ae <__fp_pscA>
    538a:	30 f0       	brcs	.+12     	; 0x5398 <__addsf3+0x18>
    538c:	17 d1       	rcall	.+558    	; 0x55bc <__fp_pscB>
    538e:	20 f0       	brcs	.+8      	; 0x5398 <__addsf3+0x18>
    5390:	31 f4       	brne	.+12     	; 0x539e <__addsf3+0x1e>
    5392:	9f 3f       	cpi	r25, 0xFF	; 255
    5394:	11 f4       	brne	.+4      	; 0x539a <__addsf3+0x1a>
    5396:	1e f4       	brtc	.+6      	; 0x539e <__addsf3+0x1e>
    5398:	07 c1       	rjmp	.+526    	; 0x55a8 <__fp_nan>
    539a:	0e f4       	brtc	.+2      	; 0x539e <__addsf3+0x1e>
    539c:	e0 95       	com	r30
    539e:	e7 fb       	bst	r30, 7
    53a0:	fd c0       	rjmp	.+506    	; 0x559c <__fp_inf>

000053a2 <__addsf3x>:
    53a2:	e9 2f       	mov	r30, r25
    53a4:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__fp_split3>
    53a8:	78 f3       	brcs	.-34     	; 0x5388 <__addsf3+0x8>
    53aa:	ba 17       	cp	r27, r26
    53ac:	62 07       	cpc	r22, r18
    53ae:	73 07       	cpc	r23, r19
    53b0:	84 07       	cpc	r24, r20
    53b2:	95 07       	cpc	r25, r21
    53b4:	20 f0       	brcs	.+8      	; 0x53be <__addsf3x+0x1c>
    53b6:	79 f4       	brne	.+30     	; 0x53d6 <__addsf3x+0x34>
    53b8:	a6 f5       	brtc	.+104    	; 0x5422 <__addsf3x+0x80>
    53ba:	0c 94 3e 1c 	jmp	0x387c	; 0x387c <__fp_zero>
    53be:	0e f4       	brtc	.+2      	; 0x53c2 <__addsf3x+0x20>
    53c0:	e0 95       	com	r30
    53c2:	0b 2e       	mov	r0, r27
    53c4:	ba 2f       	mov	r27, r26
    53c6:	a0 2d       	mov	r26, r0
    53c8:	0b 01       	movw	r0, r22
    53ca:	b9 01       	movw	r22, r18
    53cc:	90 01       	movw	r18, r0
    53ce:	0c 01       	movw	r0, r24
    53d0:	ca 01       	movw	r24, r20
    53d2:	a0 01       	movw	r20, r0
    53d4:	11 24       	eor	r1, r1
    53d6:	ff 27       	eor	r31, r31
    53d8:	59 1b       	sub	r21, r25
    53da:	99 f0       	breq	.+38     	; 0x5402 <__addsf3x+0x60>
    53dc:	59 3f       	cpi	r21, 0xF9	; 249
    53de:	50 f4       	brcc	.+20     	; 0x53f4 <__addsf3x+0x52>
    53e0:	50 3e       	cpi	r21, 0xE0	; 224
    53e2:	68 f1       	brcs	.+90     	; 0x543e <__addsf3x+0x9c>
    53e4:	1a 16       	cp	r1, r26
    53e6:	f0 40       	sbci	r31, 0x00	; 0
    53e8:	a2 2f       	mov	r26, r18
    53ea:	23 2f       	mov	r18, r19
    53ec:	34 2f       	mov	r19, r20
    53ee:	44 27       	eor	r20, r20
    53f0:	58 5f       	subi	r21, 0xF8	; 248
    53f2:	f3 cf       	rjmp	.-26     	; 0x53da <__addsf3x+0x38>
    53f4:	46 95       	lsr	r20
    53f6:	37 95       	ror	r19
    53f8:	27 95       	ror	r18
    53fa:	a7 95       	ror	r26
    53fc:	f0 40       	sbci	r31, 0x00	; 0
    53fe:	53 95       	inc	r21
    5400:	c9 f7       	brne	.-14     	; 0x53f4 <__addsf3x+0x52>
    5402:	7e f4       	brtc	.+30     	; 0x5422 <__addsf3x+0x80>
    5404:	1f 16       	cp	r1, r31
    5406:	ba 0b       	sbc	r27, r26
    5408:	62 0b       	sbc	r22, r18
    540a:	73 0b       	sbc	r23, r19
    540c:	84 0b       	sbc	r24, r20
    540e:	ba f0       	brmi	.+46     	; 0x543e <__addsf3x+0x9c>
    5410:	91 50       	subi	r25, 0x01	; 1
    5412:	a1 f0       	breq	.+40     	; 0x543c <__addsf3x+0x9a>
    5414:	ff 0f       	add	r31, r31
    5416:	bb 1f       	adc	r27, r27
    5418:	66 1f       	adc	r22, r22
    541a:	77 1f       	adc	r23, r23
    541c:	88 1f       	adc	r24, r24
    541e:	c2 f7       	brpl	.-16     	; 0x5410 <__addsf3x+0x6e>
    5420:	0e c0       	rjmp	.+28     	; 0x543e <__addsf3x+0x9c>
    5422:	ba 0f       	add	r27, r26
    5424:	62 1f       	adc	r22, r18
    5426:	73 1f       	adc	r23, r19
    5428:	84 1f       	adc	r24, r20
    542a:	48 f4       	brcc	.+18     	; 0x543e <__addsf3x+0x9c>
    542c:	87 95       	ror	r24
    542e:	77 95       	ror	r23
    5430:	67 95       	ror	r22
    5432:	b7 95       	ror	r27
    5434:	f7 95       	ror	r31
    5436:	9e 3f       	cpi	r25, 0xFE	; 254
    5438:	08 f0       	brcs	.+2      	; 0x543c <__addsf3x+0x9a>
    543a:	b1 cf       	rjmp	.-158    	; 0x539e <__addsf3+0x1e>
    543c:	93 95       	inc	r25
    543e:	88 0f       	add	r24, r24
    5440:	08 f0       	brcs	.+2      	; 0x5444 <__addsf3x+0xa2>
    5442:	99 27       	eor	r25, r25
    5444:	ee 0f       	add	r30, r30
    5446:	97 95       	ror	r25
    5448:	87 95       	ror	r24
    544a:	08 95       	ret

0000544c <__divsf3>:
    544c:	0d d0       	rcall	.+26     	; 0x5468 <__divsf3x>
    544e:	bd c0       	rjmp	.+378    	; 0x55ca <__fp_round>
    5450:	b5 d0       	rcall	.+362    	; 0x55bc <__fp_pscB>
    5452:	48 f0       	brcs	.+18     	; 0x5466 <__divsf3+0x1a>
    5454:	ac d0       	rcall	.+344    	; 0x55ae <__fp_pscA>
    5456:	38 f0       	brcs	.+14     	; 0x5466 <__divsf3+0x1a>
    5458:	21 f4       	brne	.+8      	; 0x5462 <__divsf3+0x16>
    545a:	5f 3f       	cpi	r21, 0xFF	; 255
    545c:	21 f0       	breq	.+8      	; 0x5466 <__divsf3+0x1a>
    545e:	9e c0       	rjmp	.+316    	; 0x559c <__fp_inf>
    5460:	51 11       	cpse	r21, r1
    5462:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <__fp_szero>
    5466:	a0 c0       	rjmp	.+320    	; 0x55a8 <__fp_nan>

00005468 <__divsf3x>:
    5468:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__fp_split3>
    546c:	88 f3       	brcs	.-30     	; 0x5450 <__divsf3+0x4>

0000546e <__divsf3_pse>:
    546e:	99 23       	and	r25, r25
    5470:	b9 f3       	breq	.-18     	; 0x5460 <__divsf3+0x14>
    5472:	55 23       	and	r21, r21
    5474:	a1 f3       	breq	.-24     	; 0x545e <__divsf3+0x12>
    5476:	95 1b       	sub	r25, r21
    5478:	55 0b       	sbc	r21, r21
    547a:	bb 27       	eor	r27, r27
    547c:	aa 27       	eor	r26, r26
    547e:	62 17       	cp	r22, r18
    5480:	73 07       	cpc	r23, r19
    5482:	84 07       	cpc	r24, r20
    5484:	38 f0       	brcs	.+14     	; 0x5494 <__divsf3_pse+0x26>
    5486:	9f 5f       	subi	r25, 0xFF	; 255
    5488:	5f 4f       	sbci	r21, 0xFF	; 255
    548a:	22 0f       	add	r18, r18
    548c:	33 1f       	adc	r19, r19
    548e:	44 1f       	adc	r20, r20
    5490:	aa 1f       	adc	r26, r26
    5492:	a9 f3       	breq	.-22     	; 0x547e <__divsf3_pse+0x10>
    5494:	34 d0       	rcall	.+104    	; 0x54fe <__divsf3_pse+0x90>
    5496:	0e 2e       	mov	r0, r30
    5498:	3a f0       	brmi	.+14     	; 0x54a8 <__divsf3_pse+0x3a>
    549a:	e0 e8       	ldi	r30, 0x80	; 128
    549c:	31 d0       	rcall	.+98     	; 0x5500 <__divsf3_pse+0x92>
    549e:	91 50       	subi	r25, 0x01	; 1
    54a0:	50 40       	sbci	r21, 0x00	; 0
    54a2:	e6 95       	lsr	r30
    54a4:	00 1c       	adc	r0, r0
    54a6:	ca f7       	brpl	.-14     	; 0x549a <__divsf3_pse+0x2c>
    54a8:	2a d0       	rcall	.+84     	; 0x54fe <__divsf3_pse+0x90>
    54aa:	fe 2f       	mov	r31, r30
    54ac:	28 d0       	rcall	.+80     	; 0x54fe <__divsf3_pse+0x90>
    54ae:	66 0f       	add	r22, r22
    54b0:	77 1f       	adc	r23, r23
    54b2:	88 1f       	adc	r24, r24
    54b4:	bb 1f       	adc	r27, r27
    54b6:	26 17       	cp	r18, r22
    54b8:	37 07       	cpc	r19, r23
    54ba:	48 07       	cpc	r20, r24
    54bc:	ab 07       	cpc	r26, r27
    54be:	b0 e8       	ldi	r27, 0x80	; 128
    54c0:	09 f0       	breq	.+2      	; 0x54c4 <__divsf3_pse+0x56>
    54c2:	bb 0b       	sbc	r27, r27
    54c4:	80 2d       	mov	r24, r0
    54c6:	bf 01       	movw	r22, r30
    54c8:	ff 27       	eor	r31, r31
    54ca:	93 58       	subi	r25, 0x83	; 131
    54cc:	5f 4f       	sbci	r21, 0xFF	; 255
    54ce:	32 f0       	brmi	.+12     	; 0x54dc <__divsf3_pse+0x6e>
    54d0:	9e 3f       	cpi	r25, 0xFE	; 254
    54d2:	51 05       	cpc	r21, r1
    54d4:	70 f0       	brcs	.+28     	; 0x54f2 <__divsf3_pse+0x84>
    54d6:	62 c0       	rjmp	.+196    	; 0x559c <__fp_inf>
    54d8:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <__fp_szero>
    54dc:	5f 3f       	cpi	r21, 0xFF	; 255
    54de:	e4 f3       	brlt	.-8      	; 0x54d8 <__divsf3_pse+0x6a>
    54e0:	98 3e       	cpi	r25, 0xE8	; 232
    54e2:	d4 f3       	brlt	.-12     	; 0x54d8 <__divsf3_pse+0x6a>
    54e4:	86 95       	lsr	r24
    54e6:	77 95       	ror	r23
    54e8:	67 95       	ror	r22
    54ea:	b7 95       	ror	r27
    54ec:	f7 95       	ror	r31
    54ee:	9f 5f       	subi	r25, 0xFF	; 255
    54f0:	c9 f7       	brne	.-14     	; 0x54e4 <__divsf3_pse+0x76>
    54f2:	88 0f       	add	r24, r24
    54f4:	91 1d       	adc	r25, r1
    54f6:	96 95       	lsr	r25
    54f8:	87 95       	ror	r24
    54fa:	97 f9       	bld	r25, 7
    54fc:	08 95       	ret
    54fe:	e1 e0       	ldi	r30, 0x01	; 1
    5500:	66 0f       	add	r22, r22
    5502:	77 1f       	adc	r23, r23
    5504:	88 1f       	adc	r24, r24
    5506:	bb 1f       	adc	r27, r27
    5508:	62 17       	cp	r22, r18
    550a:	73 07       	cpc	r23, r19
    550c:	84 07       	cpc	r24, r20
    550e:	ba 07       	cpc	r27, r26
    5510:	20 f0       	brcs	.+8      	; 0x551a <__divsf3_pse+0xac>
    5512:	62 1b       	sub	r22, r18
    5514:	73 0b       	sbc	r23, r19
    5516:	84 0b       	sbc	r24, r20
    5518:	ba 0b       	sbc	r27, r26
    551a:	ee 1f       	adc	r30, r30
    551c:	88 f7       	brcc	.-30     	; 0x5500 <__divsf3_pse+0x92>
    551e:	e0 95       	com	r30
    5520:	08 95       	ret

00005522 <__floatunsisf>:
    5522:	e8 94       	clt
    5524:	09 c0       	rjmp	.+18     	; 0x5538 <__floatsisf+0x12>

00005526 <__floatsisf>:
    5526:	97 fb       	bst	r25, 7
    5528:	3e f4       	brtc	.+14     	; 0x5538 <__floatsisf+0x12>
    552a:	90 95       	com	r25
    552c:	80 95       	com	r24
    552e:	70 95       	com	r23
    5530:	61 95       	neg	r22
    5532:	7f 4f       	sbci	r23, 0xFF	; 255
    5534:	8f 4f       	sbci	r24, 0xFF	; 255
    5536:	9f 4f       	sbci	r25, 0xFF	; 255
    5538:	99 23       	and	r25, r25
    553a:	a9 f0       	breq	.+42     	; 0x5566 <__floatsisf+0x40>
    553c:	f9 2f       	mov	r31, r25
    553e:	96 e9       	ldi	r25, 0x96	; 150
    5540:	bb 27       	eor	r27, r27
    5542:	93 95       	inc	r25
    5544:	f6 95       	lsr	r31
    5546:	87 95       	ror	r24
    5548:	77 95       	ror	r23
    554a:	67 95       	ror	r22
    554c:	b7 95       	ror	r27
    554e:	f1 11       	cpse	r31, r1
    5550:	f8 cf       	rjmp	.-16     	; 0x5542 <__floatsisf+0x1c>
    5552:	fa f4       	brpl	.+62     	; 0x5592 <__floatsisf+0x6c>
    5554:	bb 0f       	add	r27, r27
    5556:	11 f4       	brne	.+4      	; 0x555c <__floatsisf+0x36>
    5558:	60 ff       	sbrs	r22, 0
    555a:	1b c0       	rjmp	.+54     	; 0x5592 <__floatsisf+0x6c>
    555c:	6f 5f       	subi	r22, 0xFF	; 255
    555e:	7f 4f       	sbci	r23, 0xFF	; 255
    5560:	8f 4f       	sbci	r24, 0xFF	; 255
    5562:	9f 4f       	sbci	r25, 0xFF	; 255
    5564:	16 c0       	rjmp	.+44     	; 0x5592 <__floatsisf+0x6c>
    5566:	88 23       	and	r24, r24
    5568:	11 f0       	breq	.+4      	; 0x556e <__floatsisf+0x48>
    556a:	96 e9       	ldi	r25, 0x96	; 150
    556c:	11 c0       	rjmp	.+34     	; 0x5590 <__floatsisf+0x6a>
    556e:	77 23       	and	r23, r23
    5570:	21 f0       	breq	.+8      	; 0x557a <__floatsisf+0x54>
    5572:	9e e8       	ldi	r25, 0x8E	; 142
    5574:	87 2f       	mov	r24, r23
    5576:	76 2f       	mov	r23, r22
    5578:	05 c0       	rjmp	.+10     	; 0x5584 <__floatsisf+0x5e>
    557a:	66 23       	and	r22, r22
    557c:	71 f0       	breq	.+28     	; 0x559a <__floatsisf+0x74>
    557e:	96 e8       	ldi	r25, 0x86	; 134
    5580:	86 2f       	mov	r24, r22
    5582:	70 e0       	ldi	r23, 0x00	; 0
    5584:	60 e0       	ldi	r22, 0x00	; 0
    5586:	2a f0       	brmi	.+10     	; 0x5592 <__floatsisf+0x6c>
    5588:	9a 95       	dec	r25
    558a:	66 0f       	add	r22, r22
    558c:	77 1f       	adc	r23, r23
    558e:	88 1f       	adc	r24, r24
    5590:	da f7       	brpl	.-10     	; 0x5588 <__floatsisf+0x62>
    5592:	88 0f       	add	r24, r24
    5594:	96 95       	lsr	r25
    5596:	87 95       	ror	r24
    5598:	97 f9       	bld	r25, 7
    559a:	08 95       	ret

0000559c <__fp_inf>:
    559c:	97 f9       	bld	r25, 7
    559e:	9f 67       	ori	r25, 0x7F	; 127
    55a0:	80 e8       	ldi	r24, 0x80	; 128
    55a2:	70 e0       	ldi	r23, 0x00	; 0
    55a4:	60 e0       	ldi	r22, 0x00	; 0
    55a6:	08 95       	ret

000055a8 <__fp_nan>:
    55a8:	9f ef       	ldi	r25, 0xFF	; 255
    55aa:	80 ec       	ldi	r24, 0xC0	; 192
    55ac:	08 95       	ret

000055ae <__fp_pscA>:
    55ae:	00 24       	eor	r0, r0
    55b0:	0a 94       	dec	r0
    55b2:	16 16       	cp	r1, r22
    55b4:	17 06       	cpc	r1, r23
    55b6:	18 06       	cpc	r1, r24
    55b8:	09 06       	cpc	r0, r25
    55ba:	08 95       	ret

000055bc <__fp_pscB>:
    55bc:	00 24       	eor	r0, r0
    55be:	0a 94       	dec	r0
    55c0:	12 16       	cp	r1, r18
    55c2:	13 06       	cpc	r1, r19
    55c4:	14 06       	cpc	r1, r20
    55c6:	05 06       	cpc	r0, r21
    55c8:	08 95       	ret

000055ca <__fp_round>:
    55ca:	09 2e       	mov	r0, r25
    55cc:	03 94       	inc	r0
    55ce:	00 0c       	add	r0, r0
    55d0:	11 f4       	brne	.+4      	; 0x55d6 <__fp_round+0xc>
    55d2:	88 23       	and	r24, r24
    55d4:	52 f0       	brmi	.+20     	; 0x55ea <__fp_round+0x20>
    55d6:	bb 0f       	add	r27, r27
    55d8:	40 f4       	brcc	.+16     	; 0x55ea <__fp_round+0x20>
    55da:	bf 2b       	or	r27, r31
    55dc:	11 f4       	brne	.+4      	; 0x55e2 <__fp_round+0x18>
    55de:	60 ff       	sbrs	r22, 0
    55e0:	04 c0       	rjmp	.+8      	; 0x55ea <__fp_round+0x20>
    55e2:	6f 5f       	subi	r22, 0xFF	; 255
    55e4:	7f 4f       	sbci	r23, 0xFF	; 255
    55e6:	8f 4f       	sbci	r24, 0xFF	; 255
    55e8:	9f 4f       	sbci	r25, 0xFF	; 255
    55ea:	08 95       	ret

000055ec <__mulsf3>:
    55ec:	0c d0       	rcall	.+24     	; 0x5606 <__mulsf3x>
    55ee:	ed cf       	rjmp	.-38     	; 0x55ca <__fp_round>
    55f0:	de df       	rcall	.-68     	; 0x55ae <__fp_pscA>
    55f2:	28 f0       	brcs	.+10     	; 0x55fe <__mulsf3+0x12>
    55f4:	e3 df       	rcall	.-58     	; 0x55bc <__fp_pscB>
    55f6:	18 f0       	brcs	.+6      	; 0x55fe <__mulsf3+0x12>
    55f8:	95 23       	and	r25, r21
    55fa:	09 f0       	breq	.+2      	; 0x55fe <__mulsf3+0x12>
    55fc:	cf cf       	rjmp	.-98     	; 0x559c <__fp_inf>
    55fe:	d4 cf       	rjmp	.-88     	; 0x55a8 <__fp_nan>
    5600:	11 24       	eor	r1, r1
    5602:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <__fp_szero>

00005606 <__mulsf3x>:
    5606:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__fp_split3>
    560a:	90 f3       	brcs	.-28     	; 0x55f0 <__mulsf3+0x4>

0000560c <__mulsf3_pse>:
    560c:	95 9f       	mul	r25, r21
    560e:	c1 f3       	breq	.-16     	; 0x5600 <__mulsf3+0x14>
    5610:	95 0f       	add	r25, r21
    5612:	50 e0       	ldi	r21, 0x00	; 0
    5614:	55 1f       	adc	r21, r21
    5616:	62 9f       	mul	r22, r18
    5618:	f0 01       	movw	r30, r0
    561a:	72 9f       	mul	r23, r18
    561c:	bb 27       	eor	r27, r27
    561e:	f0 0d       	add	r31, r0
    5620:	b1 1d       	adc	r27, r1
    5622:	63 9f       	mul	r22, r19
    5624:	aa 27       	eor	r26, r26
    5626:	f0 0d       	add	r31, r0
    5628:	b1 1d       	adc	r27, r1
    562a:	aa 1f       	adc	r26, r26
    562c:	64 9f       	mul	r22, r20
    562e:	66 27       	eor	r22, r22
    5630:	b0 0d       	add	r27, r0
    5632:	a1 1d       	adc	r26, r1
    5634:	66 1f       	adc	r22, r22
    5636:	82 9f       	mul	r24, r18
    5638:	22 27       	eor	r18, r18
    563a:	b0 0d       	add	r27, r0
    563c:	a1 1d       	adc	r26, r1
    563e:	62 1f       	adc	r22, r18
    5640:	73 9f       	mul	r23, r19
    5642:	b0 0d       	add	r27, r0
    5644:	a1 1d       	adc	r26, r1
    5646:	62 1f       	adc	r22, r18
    5648:	83 9f       	mul	r24, r19
    564a:	a0 0d       	add	r26, r0
    564c:	61 1d       	adc	r22, r1
    564e:	22 1f       	adc	r18, r18
    5650:	74 9f       	mul	r23, r20
    5652:	33 27       	eor	r19, r19
    5654:	a0 0d       	add	r26, r0
    5656:	61 1d       	adc	r22, r1
    5658:	23 1f       	adc	r18, r19
    565a:	84 9f       	mul	r24, r20
    565c:	60 0d       	add	r22, r0
    565e:	21 1d       	adc	r18, r1
    5660:	82 2f       	mov	r24, r18
    5662:	76 2f       	mov	r23, r22
    5664:	6a 2f       	mov	r22, r26
    5666:	11 24       	eor	r1, r1
    5668:	9f 57       	subi	r25, 0x7F	; 127
    566a:	50 40       	sbci	r21, 0x00	; 0
    566c:	92 f0       	brmi	.+36     	; 0x5692 <__mulsf3_pse+0x86>
    566e:	e9 f0       	breq	.+58     	; 0x56aa <__mulsf3_pse+0x9e>
    5670:	88 23       	and	r24, r24
    5672:	4a f0       	brmi	.+18     	; 0x5686 <__mulsf3_pse+0x7a>
    5674:	ee 0f       	add	r30, r30
    5676:	ff 1f       	adc	r31, r31
    5678:	bb 1f       	adc	r27, r27
    567a:	66 1f       	adc	r22, r22
    567c:	77 1f       	adc	r23, r23
    567e:	88 1f       	adc	r24, r24
    5680:	91 50       	subi	r25, 0x01	; 1
    5682:	50 40       	sbci	r21, 0x00	; 0
    5684:	a9 f7       	brne	.-22     	; 0x5670 <__mulsf3_pse+0x64>
    5686:	9e 3f       	cpi	r25, 0xFE	; 254
    5688:	51 05       	cpc	r21, r1
    568a:	78 f0       	brcs	.+30     	; 0x56aa <__mulsf3_pse+0x9e>
    568c:	87 cf       	rjmp	.-242    	; 0x559c <__fp_inf>
    568e:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <__fp_szero>
    5692:	5f 3f       	cpi	r21, 0xFF	; 255
    5694:	e4 f3       	brlt	.-8      	; 0x568e <__mulsf3_pse+0x82>
    5696:	98 3e       	cpi	r25, 0xE8	; 232
    5698:	d4 f3       	brlt	.-12     	; 0x568e <__mulsf3_pse+0x82>
    569a:	86 95       	lsr	r24
    569c:	77 95       	ror	r23
    569e:	67 95       	ror	r22
    56a0:	b7 95       	ror	r27
    56a2:	f7 95       	ror	r31
    56a4:	e7 95       	ror	r30
    56a6:	9f 5f       	subi	r25, 0xFF	; 255
    56a8:	c1 f7       	brne	.-16     	; 0x569a <__mulsf3_pse+0x8e>
    56aa:	fe 2b       	or	r31, r30
    56ac:	88 0f       	add	r24, r24
    56ae:	91 1d       	adc	r25, r1
    56b0:	96 95       	lsr	r25
    56b2:	87 95       	ror	r24
    56b4:	97 f9       	bld	r25, 7
    56b6:	08 95       	ret

000056b8 <__udivmodsi4>:
    56b8:	a1 e2       	ldi	r26, 0x21	; 33
    56ba:	1a 2e       	mov	r1, r26
    56bc:	aa 1b       	sub	r26, r26
    56be:	bb 1b       	sub	r27, r27
    56c0:	fd 01       	movw	r30, r26
    56c2:	0d c0       	rjmp	.+26     	; 0x56de <__udivmodsi4_ep>

000056c4 <__udivmodsi4_loop>:
    56c4:	aa 1f       	adc	r26, r26
    56c6:	bb 1f       	adc	r27, r27
    56c8:	ee 1f       	adc	r30, r30
    56ca:	ff 1f       	adc	r31, r31
    56cc:	a2 17       	cp	r26, r18
    56ce:	b3 07       	cpc	r27, r19
    56d0:	e4 07       	cpc	r30, r20
    56d2:	f5 07       	cpc	r31, r21
    56d4:	20 f0       	brcs	.+8      	; 0x56de <__udivmodsi4_ep>
    56d6:	a2 1b       	sub	r26, r18
    56d8:	b3 0b       	sbc	r27, r19
    56da:	e4 0b       	sbc	r30, r20
    56dc:	f5 0b       	sbc	r31, r21

000056de <__udivmodsi4_ep>:
    56de:	66 1f       	adc	r22, r22
    56e0:	77 1f       	adc	r23, r23
    56e2:	88 1f       	adc	r24, r24
    56e4:	99 1f       	adc	r25, r25
    56e6:	1a 94       	dec	r1
    56e8:	69 f7       	brne	.-38     	; 0x56c4 <__udivmodsi4_loop>
    56ea:	60 95       	com	r22
    56ec:	70 95       	com	r23
    56ee:	80 95       	com	r24
    56f0:	90 95       	com	r25
    56f2:	9b 01       	movw	r18, r22
    56f4:	ac 01       	movw	r20, r24
    56f6:	bd 01       	movw	r22, r26
    56f8:	cf 01       	movw	r24, r30
    56fa:	08 95       	ret

000056fc <__tablejump2__>:
    56fc:	ee 0f       	add	r30, r30
    56fe:	ff 1f       	adc	r31, r31
    5700:	88 1f       	adc	r24, r24
    5702:	8b bf       	out	0x3b, r24	; 59
    5704:	07 90       	elpm	r0, Z+
    5706:	f6 91       	elpm	r31, Z
    5708:	e0 2d       	mov	r30, r0
    570a:	19 94       	eijmp

0000570c <calloc>:
    570c:	0f 93       	push	r16
    570e:	1f 93       	push	r17
    5710:	cf 93       	push	r28
    5712:	df 93       	push	r29
    5714:	86 9f       	mul	r24, r22
    5716:	80 01       	movw	r16, r0
    5718:	87 9f       	mul	r24, r23
    571a:	10 0d       	add	r17, r0
    571c:	96 9f       	mul	r25, r22
    571e:	10 0d       	add	r17, r0
    5720:	11 24       	eor	r1, r1
    5722:	c8 01       	movw	r24, r16
    5724:	0d d0       	rcall	.+26     	; 0x5740 <malloc>
    5726:	ec 01       	movw	r28, r24
    5728:	00 97       	sbiw	r24, 0x00	; 0
    572a:	21 f0       	breq	.+8      	; 0x5734 <calloc+0x28>
    572c:	a8 01       	movw	r20, r16
    572e:	60 e0       	ldi	r22, 0x00	; 0
    5730:	70 e0       	ldi	r23, 0x00	; 0
    5732:	34 d1       	rcall	.+616    	; 0x599c <memset>
    5734:	ce 01       	movw	r24, r28
    5736:	df 91       	pop	r29
    5738:	cf 91       	pop	r28
    573a:	1f 91       	pop	r17
    573c:	0f 91       	pop	r16
    573e:	08 95       	ret

00005740 <malloc>:
    5740:	0f 93       	push	r16
    5742:	1f 93       	push	r17
    5744:	cf 93       	push	r28
    5746:	df 93       	push	r29
    5748:	82 30       	cpi	r24, 0x02	; 2
    574a:	91 05       	cpc	r25, r1
    574c:	10 f4       	brcc	.+4      	; 0x5752 <malloc+0x12>
    574e:	82 e0       	ldi	r24, 0x02	; 2
    5750:	90 e0       	ldi	r25, 0x00	; 0
    5752:	e0 91 a8 1a 	lds	r30, 0x1AA8	; 0x801aa8 <__flp>
    5756:	f0 91 a9 1a 	lds	r31, 0x1AA9	; 0x801aa9 <__flp+0x1>
    575a:	20 e0       	ldi	r18, 0x00	; 0
    575c:	30 e0       	ldi	r19, 0x00	; 0
    575e:	a0 e0       	ldi	r26, 0x00	; 0
    5760:	b0 e0       	ldi	r27, 0x00	; 0
    5762:	30 97       	sbiw	r30, 0x00	; 0
    5764:	19 f1       	breq	.+70     	; 0x57ac <malloc+0x6c>
    5766:	40 81       	ld	r20, Z
    5768:	51 81       	ldd	r21, Z+1	; 0x01
    576a:	02 81       	ldd	r16, Z+2	; 0x02
    576c:	13 81       	ldd	r17, Z+3	; 0x03
    576e:	48 17       	cp	r20, r24
    5770:	59 07       	cpc	r21, r25
    5772:	c8 f0       	brcs	.+50     	; 0x57a6 <malloc+0x66>
    5774:	84 17       	cp	r24, r20
    5776:	95 07       	cpc	r25, r21
    5778:	69 f4       	brne	.+26     	; 0x5794 <malloc+0x54>
    577a:	10 97       	sbiw	r26, 0x00	; 0
    577c:	31 f0       	breq	.+12     	; 0x578a <malloc+0x4a>
    577e:	12 96       	adiw	r26, 0x02	; 2
    5780:	0c 93       	st	X, r16
    5782:	12 97       	sbiw	r26, 0x02	; 2
    5784:	13 96       	adiw	r26, 0x03	; 3
    5786:	1c 93       	st	X, r17
    5788:	27 c0       	rjmp	.+78     	; 0x57d8 <malloc+0x98>
    578a:	00 93 a8 1a 	sts	0x1AA8, r16	; 0x801aa8 <__flp>
    578e:	10 93 a9 1a 	sts	0x1AA9, r17	; 0x801aa9 <__flp+0x1>
    5792:	22 c0       	rjmp	.+68     	; 0x57d8 <malloc+0x98>
    5794:	21 15       	cp	r18, r1
    5796:	31 05       	cpc	r19, r1
    5798:	19 f0       	breq	.+6      	; 0x57a0 <malloc+0x60>
    579a:	42 17       	cp	r20, r18
    579c:	53 07       	cpc	r21, r19
    579e:	18 f4       	brcc	.+6      	; 0x57a6 <malloc+0x66>
    57a0:	9a 01       	movw	r18, r20
    57a2:	bd 01       	movw	r22, r26
    57a4:	ef 01       	movw	r28, r30
    57a6:	df 01       	movw	r26, r30
    57a8:	f8 01       	movw	r30, r16
    57aa:	db cf       	rjmp	.-74     	; 0x5762 <malloc+0x22>
    57ac:	21 15       	cp	r18, r1
    57ae:	31 05       	cpc	r19, r1
    57b0:	f9 f0       	breq	.+62     	; 0x57f0 <malloc+0xb0>
    57b2:	28 1b       	sub	r18, r24
    57b4:	39 0b       	sbc	r19, r25
    57b6:	24 30       	cpi	r18, 0x04	; 4
    57b8:	31 05       	cpc	r19, r1
    57ba:	80 f4       	brcc	.+32     	; 0x57dc <malloc+0x9c>
    57bc:	8a 81       	ldd	r24, Y+2	; 0x02
    57be:	9b 81       	ldd	r25, Y+3	; 0x03
    57c0:	61 15       	cp	r22, r1
    57c2:	71 05       	cpc	r23, r1
    57c4:	21 f0       	breq	.+8      	; 0x57ce <malloc+0x8e>
    57c6:	fb 01       	movw	r30, r22
    57c8:	93 83       	std	Z+3, r25	; 0x03
    57ca:	82 83       	std	Z+2, r24	; 0x02
    57cc:	04 c0       	rjmp	.+8      	; 0x57d6 <malloc+0x96>
    57ce:	90 93 a9 1a 	sts	0x1AA9, r25	; 0x801aa9 <__flp+0x1>
    57d2:	80 93 a8 1a 	sts	0x1AA8, r24	; 0x801aa8 <__flp>
    57d6:	fe 01       	movw	r30, r28
    57d8:	32 96       	adiw	r30, 0x02	; 2
    57da:	44 c0       	rjmp	.+136    	; 0x5864 <malloc+0x124>
    57dc:	fe 01       	movw	r30, r28
    57de:	e2 0f       	add	r30, r18
    57e0:	f3 1f       	adc	r31, r19
    57e2:	81 93       	st	Z+, r24
    57e4:	91 93       	st	Z+, r25
    57e6:	22 50       	subi	r18, 0x02	; 2
    57e8:	31 09       	sbc	r19, r1
    57ea:	39 83       	std	Y+1, r19	; 0x01
    57ec:	28 83       	st	Y, r18
    57ee:	3a c0       	rjmp	.+116    	; 0x5864 <malloc+0x124>
    57f0:	20 91 a6 1a 	lds	r18, 0x1AA6	; 0x801aa6 <__brkval>
    57f4:	30 91 a7 1a 	lds	r19, 0x1AA7	; 0x801aa7 <__brkval+0x1>
    57f8:	23 2b       	or	r18, r19
    57fa:	41 f4       	brne	.+16     	; 0x580c <malloc+0xcc>
    57fc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5800:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5804:	30 93 a7 1a 	sts	0x1AA7, r19	; 0x801aa7 <__brkval+0x1>
    5808:	20 93 a6 1a 	sts	0x1AA6, r18	; 0x801aa6 <__brkval>
    580c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5810:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5814:	21 15       	cp	r18, r1
    5816:	31 05       	cpc	r19, r1
    5818:	41 f4       	brne	.+16     	; 0x582a <malloc+0xea>
    581a:	2d b7       	in	r18, 0x3d	; 61
    581c:	3e b7       	in	r19, 0x3e	; 62
    581e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5822:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5826:	24 1b       	sub	r18, r20
    5828:	35 0b       	sbc	r19, r21
    582a:	e0 91 a6 1a 	lds	r30, 0x1AA6	; 0x801aa6 <__brkval>
    582e:	f0 91 a7 1a 	lds	r31, 0x1AA7	; 0x801aa7 <__brkval+0x1>
    5832:	e2 17       	cp	r30, r18
    5834:	f3 07       	cpc	r31, r19
    5836:	a0 f4       	brcc	.+40     	; 0x5860 <malloc+0x120>
    5838:	2e 1b       	sub	r18, r30
    583a:	3f 0b       	sbc	r19, r31
    583c:	28 17       	cp	r18, r24
    583e:	39 07       	cpc	r19, r25
    5840:	78 f0       	brcs	.+30     	; 0x5860 <malloc+0x120>
    5842:	ac 01       	movw	r20, r24
    5844:	4e 5f       	subi	r20, 0xFE	; 254
    5846:	5f 4f       	sbci	r21, 0xFF	; 255
    5848:	24 17       	cp	r18, r20
    584a:	35 07       	cpc	r19, r21
    584c:	48 f0       	brcs	.+18     	; 0x5860 <malloc+0x120>
    584e:	4e 0f       	add	r20, r30
    5850:	5f 1f       	adc	r21, r31
    5852:	50 93 a7 1a 	sts	0x1AA7, r21	; 0x801aa7 <__brkval+0x1>
    5856:	40 93 a6 1a 	sts	0x1AA6, r20	; 0x801aa6 <__brkval>
    585a:	81 93       	st	Z+, r24
    585c:	91 93       	st	Z+, r25
    585e:	02 c0       	rjmp	.+4      	; 0x5864 <malloc+0x124>
    5860:	e0 e0       	ldi	r30, 0x00	; 0
    5862:	f0 e0       	ldi	r31, 0x00	; 0
    5864:	cf 01       	movw	r24, r30
    5866:	df 91       	pop	r29
    5868:	cf 91       	pop	r28
    586a:	1f 91       	pop	r17
    586c:	0f 91       	pop	r16
    586e:	08 95       	ret

00005870 <free>:
    5870:	cf 93       	push	r28
    5872:	df 93       	push	r29
    5874:	00 97       	sbiw	r24, 0x00	; 0
    5876:	09 f4       	brne	.+2      	; 0x587a <free+0xa>
    5878:	81 c0       	rjmp	.+258    	; 0x597c <free+0x10c>
    587a:	fc 01       	movw	r30, r24
    587c:	32 97       	sbiw	r30, 0x02	; 2
    587e:	13 82       	std	Z+3, r1	; 0x03
    5880:	12 82       	std	Z+2, r1	; 0x02
    5882:	a0 91 a8 1a 	lds	r26, 0x1AA8	; 0x801aa8 <__flp>
    5886:	b0 91 a9 1a 	lds	r27, 0x1AA9	; 0x801aa9 <__flp+0x1>
    588a:	10 97       	sbiw	r26, 0x00	; 0
    588c:	81 f4       	brne	.+32     	; 0x58ae <free+0x3e>
    588e:	20 81       	ld	r18, Z
    5890:	31 81       	ldd	r19, Z+1	; 0x01
    5892:	82 0f       	add	r24, r18
    5894:	93 1f       	adc	r25, r19
    5896:	20 91 a6 1a 	lds	r18, 0x1AA6	; 0x801aa6 <__brkval>
    589a:	30 91 a7 1a 	lds	r19, 0x1AA7	; 0x801aa7 <__brkval+0x1>
    589e:	28 17       	cp	r18, r24
    58a0:	39 07       	cpc	r19, r25
    58a2:	51 f5       	brne	.+84     	; 0x58f8 <free+0x88>
    58a4:	f0 93 a7 1a 	sts	0x1AA7, r31	; 0x801aa7 <__brkval+0x1>
    58a8:	e0 93 a6 1a 	sts	0x1AA6, r30	; 0x801aa6 <__brkval>
    58ac:	67 c0       	rjmp	.+206    	; 0x597c <free+0x10c>
    58ae:	ed 01       	movw	r28, r26
    58b0:	20 e0       	ldi	r18, 0x00	; 0
    58b2:	30 e0       	ldi	r19, 0x00	; 0
    58b4:	ce 17       	cp	r28, r30
    58b6:	df 07       	cpc	r29, r31
    58b8:	40 f4       	brcc	.+16     	; 0x58ca <free+0x5a>
    58ba:	4a 81       	ldd	r20, Y+2	; 0x02
    58bc:	5b 81       	ldd	r21, Y+3	; 0x03
    58be:	9e 01       	movw	r18, r28
    58c0:	41 15       	cp	r20, r1
    58c2:	51 05       	cpc	r21, r1
    58c4:	f1 f0       	breq	.+60     	; 0x5902 <free+0x92>
    58c6:	ea 01       	movw	r28, r20
    58c8:	f5 cf       	rjmp	.-22     	; 0x58b4 <free+0x44>
    58ca:	d3 83       	std	Z+3, r29	; 0x03
    58cc:	c2 83       	std	Z+2, r28	; 0x02
    58ce:	40 81       	ld	r20, Z
    58d0:	51 81       	ldd	r21, Z+1	; 0x01
    58d2:	84 0f       	add	r24, r20
    58d4:	95 1f       	adc	r25, r21
    58d6:	c8 17       	cp	r28, r24
    58d8:	d9 07       	cpc	r29, r25
    58da:	59 f4       	brne	.+22     	; 0x58f2 <free+0x82>
    58dc:	88 81       	ld	r24, Y
    58de:	99 81       	ldd	r25, Y+1	; 0x01
    58e0:	84 0f       	add	r24, r20
    58e2:	95 1f       	adc	r25, r21
    58e4:	02 96       	adiw	r24, 0x02	; 2
    58e6:	91 83       	std	Z+1, r25	; 0x01
    58e8:	80 83       	st	Z, r24
    58ea:	8a 81       	ldd	r24, Y+2	; 0x02
    58ec:	9b 81       	ldd	r25, Y+3	; 0x03
    58ee:	93 83       	std	Z+3, r25	; 0x03
    58f0:	82 83       	std	Z+2, r24	; 0x02
    58f2:	21 15       	cp	r18, r1
    58f4:	31 05       	cpc	r19, r1
    58f6:	29 f4       	brne	.+10     	; 0x5902 <free+0x92>
    58f8:	f0 93 a9 1a 	sts	0x1AA9, r31	; 0x801aa9 <__flp+0x1>
    58fc:	e0 93 a8 1a 	sts	0x1AA8, r30	; 0x801aa8 <__flp>
    5900:	3d c0       	rjmp	.+122    	; 0x597c <free+0x10c>
    5902:	e9 01       	movw	r28, r18
    5904:	fb 83       	std	Y+3, r31	; 0x03
    5906:	ea 83       	std	Y+2, r30	; 0x02
    5908:	49 91       	ld	r20, Y+
    590a:	59 91       	ld	r21, Y+
    590c:	c4 0f       	add	r28, r20
    590e:	d5 1f       	adc	r29, r21
    5910:	ec 17       	cp	r30, r28
    5912:	fd 07       	cpc	r31, r29
    5914:	61 f4       	brne	.+24     	; 0x592e <free+0xbe>
    5916:	80 81       	ld	r24, Z
    5918:	91 81       	ldd	r25, Z+1	; 0x01
    591a:	84 0f       	add	r24, r20
    591c:	95 1f       	adc	r25, r21
    591e:	02 96       	adiw	r24, 0x02	; 2
    5920:	e9 01       	movw	r28, r18
    5922:	99 83       	std	Y+1, r25	; 0x01
    5924:	88 83       	st	Y, r24
    5926:	82 81       	ldd	r24, Z+2	; 0x02
    5928:	93 81       	ldd	r25, Z+3	; 0x03
    592a:	9b 83       	std	Y+3, r25	; 0x03
    592c:	8a 83       	std	Y+2, r24	; 0x02
    592e:	e0 e0       	ldi	r30, 0x00	; 0
    5930:	f0 e0       	ldi	r31, 0x00	; 0
    5932:	12 96       	adiw	r26, 0x02	; 2
    5934:	8d 91       	ld	r24, X+
    5936:	9c 91       	ld	r25, X
    5938:	13 97       	sbiw	r26, 0x03	; 3
    593a:	00 97       	sbiw	r24, 0x00	; 0
    593c:	19 f0       	breq	.+6      	; 0x5944 <free+0xd4>
    593e:	fd 01       	movw	r30, r26
    5940:	dc 01       	movw	r26, r24
    5942:	f7 cf       	rjmp	.-18     	; 0x5932 <free+0xc2>
    5944:	8d 91       	ld	r24, X+
    5946:	9c 91       	ld	r25, X
    5948:	11 97       	sbiw	r26, 0x01	; 1
    594a:	9d 01       	movw	r18, r26
    594c:	2e 5f       	subi	r18, 0xFE	; 254
    594e:	3f 4f       	sbci	r19, 0xFF	; 255
    5950:	82 0f       	add	r24, r18
    5952:	93 1f       	adc	r25, r19
    5954:	20 91 a6 1a 	lds	r18, 0x1AA6	; 0x801aa6 <__brkval>
    5958:	30 91 a7 1a 	lds	r19, 0x1AA7	; 0x801aa7 <__brkval+0x1>
    595c:	28 17       	cp	r18, r24
    595e:	39 07       	cpc	r19, r25
    5960:	69 f4       	brne	.+26     	; 0x597c <free+0x10c>
    5962:	30 97       	sbiw	r30, 0x00	; 0
    5964:	29 f4       	brne	.+10     	; 0x5970 <free+0x100>
    5966:	10 92 a9 1a 	sts	0x1AA9, r1	; 0x801aa9 <__flp+0x1>
    596a:	10 92 a8 1a 	sts	0x1AA8, r1	; 0x801aa8 <__flp>
    596e:	02 c0       	rjmp	.+4      	; 0x5974 <free+0x104>
    5970:	13 82       	std	Z+3, r1	; 0x03
    5972:	12 82       	std	Z+2, r1	; 0x02
    5974:	b0 93 a7 1a 	sts	0x1AA7, r27	; 0x801aa7 <__brkval+0x1>
    5978:	a0 93 a6 1a 	sts	0x1AA6, r26	; 0x801aa6 <__brkval>
    597c:	df 91       	pop	r29
    597e:	cf 91       	pop	r28
    5980:	08 95       	ret

00005982 <abort>:
    5982:	81 e0       	ldi	r24, 0x01	; 1
    5984:	90 e0       	ldi	r25, 0x00	; 0
    5986:	f8 94       	cli
    5988:	7d c3       	rjmp	.+1786   	; 0x6084 <_exit>

0000598a <memcpy>:
    598a:	fb 01       	movw	r30, r22
    598c:	dc 01       	movw	r26, r24
    598e:	02 c0       	rjmp	.+4      	; 0x5994 <memcpy+0xa>
    5990:	01 90       	ld	r0, Z+
    5992:	0d 92       	st	X+, r0
    5994:	41 50       	subi	r20, 0x01	; 1
    5996:	50 40       	sbci	r21, 0x00	; 0
    5998:	d8 f7       	brcc	.-10     	; 0x5990 <memcpy+0x6>
    599a:	08 95       	ret

0000599c <memset>:
    599c:	dc 01       	movw	r26, r24
    599e:	01 c0       	rjmp	.+2      	; 0x59a2 <memset+0x6>
    59a0:	6d 93       	st	X+, r22
    59a2:	41 50       	subi	r20, 0x01	; 1
    59a4:	50 40       	sbci	r21, 0x00	; 0
    59a6:	e0 f7       	brcc	.-8      	; 0x59a0 <memset+0x4>
    59a8:	08 95       	ret

000059aa <strcasestr>:
    59aa:	fb 01       	movw	r30, r22
    59ac:	51 91       	ld	r21, Z+
    59ae:	55 23       	and	r21, r21
    59b0:	b1 f0       	breq	.+44     	; 0x59de <strcasestr+0x34>
    59b2:	bf 01       	movw	r22, r30
    59b4:	dc 01       	movw	r26, r24
    59b6:	05 2e       	mov	r0, r21
    59b8:	4d 91       	ld	r20, X+
    59ba:	44 23       	and	r20, r20
    59bc:	69 f0       	breq	.+26     	; 0x59d8 <strcasestr+0x2e>
    59be:	10 d0       	rcall	.+32     	; 0x59e0 <strcasestr+0x36>
    59c0:	d9 f7       	brne	.-10     	; 0x59b8 <strcasestr+0xe>
    59c2:	cd 01       	movw	r24, r26
    59c4:	01 90       	ld	r0, Z+
    59c6:	00 20       	and	r0, r0
    59c8:	49 f0       	breq	.+18     	; 0x59dc <strcasestr+0x32>
    59ca:	4d 91       	ld	r20, X+
    59cc:	41 11       	cpse	r20, r1
    59ce:	08 d0       	rcall	.+16     	; 0x59e0 <strcasestr+0x36>
    59d0:	c9 f3       	breq	.-14     	; 0x59c4 <strcasestr+0x1a>
    59d2:	fb 01       	movw	r30, r22
    59d4:	41 11       	cpse	r20, r1
    59d6:	ee cf       	rjmp	.-36     	; 0x59b4 <strcasestr+0xa>
    59d8:	81 e0       	ldi	r24, 0x01	; 1
    59da:	90 e0       	ldi	r25, 0x00	; 0
    59dc:	01 97       	sbiw	r24, 0x01	; 1
    59de:	08 95       	ret
    59e0:	40 25       	eor	r20, r0
    59e2:	39 f0       	breq	.+14     	; 0x59f2 <strcasestr+0x48>
    59e4:	40 32       	cpi	r20, 0x20	; 32
    59e6:	29 f4       	brne	.+10     	; 0x59f2 <strcasestr+0x48>
    59e8:	40 29       	or	r20, r0
    59ea:	4b 57       	subi	r20, 0x7B	; 123
    59ec:	46 5e       	subi	r20, 0xE6	; 230
    59ee:	08 f0       	brcs	.+2      	; 0x59f2 <strcasestr+0x48>
    59f0:	18 94       	sez
    59f2:	08 95       	ret

000059f4 <strcat>:
    59f4:	fb 01       	movw	r30, r22
    59f6:	dc 01       	movw	r26, r24
    59f8:	0d 90       	ld	r0, X+
    59fa:	00 20       	and	r0, r0
    59fc:	e9 f7       	brne	.-6      	; 0x59f8 <strcat+0x4>
    59fe:	11 97       	sbiw	r26, 0x01	; 1
    5a00:	01 90       	ld	r0, Z+
    5a02:	0d 92       	st	X+, r0
    5a04:	00 20       	and	r0, r0
    5a06:	e1 f7       	brne	.-8      	; 0x5a00 <strcat+0xc>
    5a08:	08 95       	ret

00005a0a <strcpy>:
    5a0a:	fb 01       	movw	r30, r22
    5a0c:	dc 01       	movw	r26, r24
    5a0e:	01 90       	ld	r0, Z+
    5a10:	0d 92       	st	X+, r0
    5a12:	00 20       	and	r0, r0
    5a14:	e1 f7       	brne	.-8      	; 0x5a0e <strcpy+0x4>
    5a16:	08 95       	ret

00005a18 <strncasecmp>:
    5a18:	fb 01       	movw	r30, r22
    5a1a:	dc 01       	movw	r26, r24
    5a1c:	41 50       	subi	r20, 0x01	; 1
    5a1e:	50 40       	sbci	r21, 0x00	; 0
    5a20:	88 f0       	brcs	.+34     	; 0x5a44 <strncasecmp+0x2c>
    5a22:	8d 91       	ld	r24, X+
    5a24:	81 34       	cpi	r24, 0x41	; 65
    5a26:	1c f0       	brlt	.+6      	; 0x5a2e <strncasecmp+0x16>
    5a28:	8b 35       	cpi	r24, 0x5B	; 91
    5a2a:	0c f4       	brge	.+2      	; 0x5a2e <strncasecmp+0x16>
    5a2c:	80 5e       	subi	r24, 0xE0	; 224
    5a2e:	61 91       	ld	r22, Z+
    5a30:	61 34       	cpi	r22, 0x41	; 65
    5a32:	1c f0       	brlt	.+6      	; 0x5a3a <strncasecmp+0x22>
    5a34:	6b 35       	cpi	r22, 0x5B	; 91
    5a36:	0c f4       	brge	.+2      	; 0x5a3a <strncasecmp+0x22>
    5a38:	60 5e       	subi	r22, 0xE0	; 224
    5a3a:	86 1b       	sub	r24, r22
    5a3c:	61 11       	cpse	r22, r1
    5a3e:	71 f3       	breq	.-36     	; 0x5a1c <strncasecmp+0x4>
    5a40:	99 0b       	sbc	r25, r25
    5a42:	08 95       	ret
    5a44:	88 1b       	sub	r24, r24
    5a46:	fc cf       	rjmp	.-8      	; 0x5a40 <strncasecmp+0x28>

00005a48 <printf>:
    5a48:	cf 93       	push	r28
    5a4a:	df 93       	push	r29
    5a4c:	cd b7       	in	r28, 0x3d	; 61
    5a4e:	de b7       	in	r29, 0x3e	; 62
    5a50:	ae 01       	movw	r20, r28
    5a52:	4a 5f       	subi	r20, 0xFA	; 250
    5a54:	5f 4f       	sbci	r21, 0xFF	; 255
    5a56:	fa 01       	movw	r30, r20
    5a58:	61 91       	ld	r22, Z+
    5a5a:	71 91       	ld	r23, Z+
    5a5c:	af 01       	movw	r20, r30
    5a5e:	80 91 ac 1a 	lds	r24, 0x1AAC	; 0x801aac <__iob+0x2>
    5a62:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <__iob+0x3>
    5a66:	61 d0       	rcall	.+194    	; 0x5b2a <vfprintf>
    5a68:	df 91       	pop	r29
    5a6a:	cf 91       	pop	r28
    5a6c:	08 95       	ret

00005a6e <puts>:
    5a6e:	0f 93       	push	r16
    5a70:	1f 93       	push	r17
    5a72:	cf 93       	push	r28
    5a74:	df 93       	push	r29
    5a76:	e0 91 ac 1a 	lds	r30, 0x1AAC	; 0x801aac <__iob+0x2>
    5a7a:	f0 91 ad 1a 	lds	r31, 0x1AAD	; 0x801aad <__iob+0x3>
    5a7e:	23 81       	ldd	r18, Z+3	; 0x03
    5a80:	21 ff       	sbrs	r18, 1
    5a82:	1b c0       	rjmp	.+54     	; 0x5aba <puts+0x4c>
    5a84:	8c 01       	movw	r16, r24
    5a86:	d0 e0       	ldi	r29, 0x00	; 0
    5a88:	c0 e0       	ldi	r28, 0x00	; 0
    5a8a:	f8 01       	movw	r30, r16
    5a8c:	81 91       	ld	r24, Z+
    5a8e:	8f 01       	movw	r16, r30
    5a90:	60 91 ac 1a 	lds	r22, 0x1AAC	; 0x801aac <__iob+0x2>
    5a94:	70 91 ad 1a 	lds	r23, 0x1AAD	; 0x801aad <__iob+0x3>
    5a98:	db 01       	movw	r26, r22
    5a9a:	18 96       	adiw	r26, 0x08	; 8
    5a9c:	ed 91       	ld	r30, X+
    5a9e:	fc 91       	ld	r31, X
    5aa0:	19 97       	sbiw	r26, 0x09	; 9
    5aa2:	88 23       	and	r24, r24
    5aa4:	31 f0       	breq	.+12     	; 0x5ab2 <puts+0x44>
    5aa6:	19 95       	eicall
    5aa8:	89 2b       	or	r24, r25
    5aaa:	79 f3       	breq	.-34     	; 0x5a8a <puts+0x1c>
    5aac:	df ef       	ldi	r29, 0xFF	; 255
    5aae:	cf ef       	ldi	r28, 0xFF	; 255
    5ab0:	ec cf       	rjmp	.-40     	; 0x5a8a <puts+0x1c>
    5ab2:	8a e0       	ldi	r24, 0x0A	; 10
    5ab4:	19 95       	eicall
    5ab6:	89 2b       	or	r24, r25
    5ab8:	19 f0       	breq	.+6      	; 0x5ac0 <puts+0x52>
    5aba:	8f ef       	ldi	r24, 0xFF	; 255
    5abc:	9f ef       	ldi	r25, 0xFF	; 255
    5abe:	02 c0       	rjmp	.+4      	; 0x5ac4 <puts+0x56>
    5ac0:	8d 2f       	mov	r24, r29
    5ac2:	9c 2f       	mov	r25, r28
    5ac4:	df 91       	pop	r29
    5ac6:	cf 91       	pop	r28
    5ac8:	1f 91       	pop	r17
    5aca:	0f 91       	pop	r16
    5acc:	08 95       	ret

00005ace <sprintf>:
    5ace:	0f 93       	push	r16
    5ad0:	1f 93       	push	r17
    5ad2:	cf 93       	push	r28
    5ad4:	df 93       	push	r29
    5ad6:	cd b7       	in	r28, 0x3d	; 61
    5ad8:	de b7       	in	r29, 0x3e	; 62
    5ada:	2e 97       	sbiw	r28, 0x0e	; 14
    5adc:	0f b6       	in	r0, 0x3f	; 63
    5ade:	f8 94       	cli
    5ae0:	de bf       	out	0x3e, r29	; 62
    5ae2:	0f be       	out	0x3f, r0	; 63
    5ae4:	cd bf       	out	0x3d, r28	; 61
    5ae6:	0e 89       	ldd	r16, Y+22	; 0x16
    5ae8:	1f 89       	ldd	r17, Y+23	; 0x17
    5aea:	86 e0       	ldi	r24, 0x06	; 6
    5aec:	8c 83       	std	Y+4, r24	; 0x04
    5aee:	1a 83       	std	Y+2, r17	; 0x02
    5af0:	09 83       	std	Y+1, r16	; 0x01
    5af2:	8f ef       	ldi	r24, 0xFF	; 255
    5af4:	9f e7       	ldi	r25, 0x7F	; 127
    5af6:	9e 83       	std	Y+6, r25	; 0x06
    5af8:	8d 83       	std	Y+5, r24	; 0x05
    5afa:	ae 01       	movw	r20, r28
    5afc:	46 5e       	subi	r20, 0xE6	; 230
    5afe:	5f 4f       	sbci	r21, 0xFF	; 255
    5b00:	68 8d       	ldd	r22, Y+24	; 0x18
    5b02:	79 8d       	ldd	r23, Y+25	; 0x19
    5b04:	ce 01       	movw	r24, r28
    5b06:	01 96       	adiw	r24, 0x01	; 1
    5b08:	10 d0       	rcall	.+32     	; 0x5b2a <vfprintf>
    5b0a:	ef 81       	ldd	r30, Y+7	; 0x07
    5b0c:	f8 85       	ldd	r31, Y+8	; 0x08
    5b0e:	e0 0f       	add	r30, r16
    5b10:	f1 1f       	adc	r31, r17
    5b12:	10 82       	st	Z, r1
    5b14:	2e 96       	adiw	r28, 0x0e	; 14
    5b16:	0f b6       	in	r0, 0x3f	; 63
    5b18:	f8 94       	cli
    5b1a:	de bf       	out	0x3e, r29	; 62
    5b1c:	0f be       	out	0x3f, r0	; 63
    5b1e:	cd bf       	out	0x3d, r28	; 61
    5b20:	df 91       	pop	r29
    5b22:	cf 91       	pop	r28
    5b24:	1f 91       	pop	r17
    5b26:	0f 91       	pop	r16
    5b28:	08 95       	ret

00005b2a <vfprintf>:
    5b2a:	2f 92       	push	r2
    5b2c:	3f 92       	push	r3
    5b2e:	4f 92       	push	r4
    5b30:	5f 92       	push	r5
    5b32:	6f 92       	push	r6
    5b34:	7f 92       	push	r7
    5b36:	8f 92       	push	r8
    5b38:	9f 92       	push	r9
    5b3a:	af 92       	push	r10
    5b3c:	bf 92       	push	r11
    5b3e:	cf 92       	push	r12
    5b40:	df 92       	push	r13
    5b42:	ef 92       	push	r14
    5b44:	ff 92       	push	r15
    5b46:	0f 93       	push	r16
    5b48:	1f 93       	push	r17
    5b4a:	cf 93       	push	r28
    5b4c:	df 93       	push	r29
    5b4e:	cd b7       	in	r28, 0x3d	; 61
    5b50:	de b7       	in	r29, 0x3e	; 62
    5b52:	2b 97       	sbiw	r28, 0x0b	; 11
    5b54:	0f b6       	in	r0, 0x3f	; 63
    5b56:	f8 94       	cli
    5b58:	de bf       	out	0x3e, r29	; 62
    5b5a:	0f be       	out	0x3f, r0	; 63
    5b5c:	cd bf       	out	0x3d, r28	; 61
    5b5e:	6c 01       	movw	r12, r24
    5b60:	7b 01       	movw	r14, r22
    5b62:	8a 01       	movw	r16, r20
    5b64:	fc 01       	movw	r30, r24
    5b66:	17 82       	std	Z+7, r1	; 0x07
    5b68:	16 82       	std	Z+6, r1	; 0x06
    5b6a:	83 81       	ldd	r24, Z+3	; 0x03
    5b6c:	81 ff       	sbrs	r24, 1
    5b6e:	bf c1       	rjmp	.+894    	; 0x5eee <vfprintf+0x3c4>
    5b70:	ce 01       	movw	r24, r28
    5b72:	01 96       	adiw	r24, 0x01	; 1
    5b74:	3c 01       	movw	r6, r24
    5b76:	f6 01       	movw	r30, r12
    5b78:	93 81       	ldd	r25, Z+3	; 0x03
    5b7a:	f7 01       	movw	r30, r14
    5b7c:	93 fd       	sbrc	r25, 3
    5b7e:	85 91       	lpm	r24, Z+
    5b80:	93 ff       	sbrs	r25, 3
    5b82:	81 91       	ld	r24, Z+
    5b84:	7f 01       	movw	r14, r30
    5b86:	88 23       	and	r24, r24
    5b88:	09 f4       	brne	.+2      	; 0x5b8c <vfprintf+0x62>
    5b8a:	ad c1       	rjmp	.+858    	; 0x5ee6 <vfprintf+0x3bc>
    5b8c:	85 32       	cpi	r24, 0x25	; 37
    5b8e:	39 f4       	brne	.+14     	; 0x5b9e <vfprintf+0x74>
    5b90:	93 fd       	sbrc	r25, 3
    5b92:	85 91       	lpm	r24, Z+
    5b94:	93 ff       	sbrs	r25, 3
    5b96:	81 91       	ld	r24, Z+
    5b98:	7f 01       	movw	r14, r30
    5b9a:	85 32       	cpi	r24, 0x25	; 37
    5b9c:	21 f4       	brne	.+8      	; 0x5ba6 <vfprintf+0x7c>
    5b9e:	b6 01       	movw	r22, r12
    5ba0:	90 e0       	ldi	r25, 0x00	; 0
    5ba2:	d6 d1       	rcall	.+940    	; 0x5f50 <fputc>
    5ba4:	e8 cf       	rjmp	.-48     	; 0x5b76 <vfprintf+0x4c>
    5ba6:	91 2c       	mov	r9, r1
    5ba8:	21 2c       	mov	r2, r1
    5baa:	31 2c       	mov	r3, r1
    5bac:	ff e1       	ldi	r31, 0x1F	; 31
    5bae:	f3 15       	cp	r31, r3
    5bb0:	d8 f0       	brcs	.+54     	; 0x5be8 <vfprintf+0xbe>
    5bb2:	8b 32       	cpi	r24, 0x2B	; 43
    5bb4:	79 f0       	breq	.+30     	; 0x5bd4 <vfprintf+0xaa>
    5bb6:	38 f4       	brcc	.+14     	; 0x5bc6 <vfprintf+0x9c>
    5bb8:	80 32       	cpi	r24, 0x20	; 32
    5bba:	79 f0       	breq	.+30     	; 0x5bda <vfprintf+0xb0>
    5bbc:	83 32       	cpi	r24, 0x23	; 35
    5bbe:	a1 f4       	brne	.+40     	; 0x5be8 <vfprintf+0xbe>
    5bc0:	23 2d       	mov	r18, r3
    5bc2:	20 61       	ori	r18, 0x10	; 16
    5bc4:	1d c0       	rjmp	.+58     	; 0x5c00 <vfprintf+0xd6>
    5bc6:	8d 32       	cpi	r24, 0x2D	; 45
    5bc8:	61 f0       	breq	.+24     	; 0x5be2 <vfprintf+0xb8>
    5bca:	80 33       	cpi	r24, 0x30	; 48
    5bcc:	69 f4       	brne	.+26     	; 0x5be8 <vfprintf+0xbe>
    5bce:	23 2d       	mov	r18, r3
    5bd0:	21 60       	ori	r18, 0x01	; 1
    5bd2:	16 c0       	rjmp	.+44     	; 0x5c00 <vfprintf+0xd6>
    5bd4:	83 2d       	mov	r24, r3
    5bd6:	82 60       	ori	r24, 0x02	; 2
    5bd8:	38 2e       	mov	r3, r24
    5bda:	e3 2d       	mov	r30, r3
    5bdc:	e4 60       	ori	r30, 0x04	; 4
    5bde:	3e 2e       	mov	r3, r30
    5be0:	2a c0       	rjmp	.+84     	; 0x5c36 <vfprintf+0x10c>
    5be2:	f3 2d       	mov	r31, r3
    5be4:	f8 60       	ori	r31, 0x08	; 8
    5be6:	1d c0       	rjmp	.+58     	; 0x5c22 <vfprintf+0xf8>
    5be8:	37 fc       	sbrc	r3, 7
    5bea:	2d c0       	rjmp	.+90     	; 0x5c46 <vfprintf+0x11c>
    5bec:	20 ed       	ldi	r18, 0xD0	; 208
    5bee:	28 0f       	add	r18, r24
    5bf0:	2a 30       	cpi	r18, 0x0A	; 10
    5bf2:	40 f0       	brcs	.+16     	; 0x5c04 <vfprintf+0xda>
    5bf4:	8e 32       	cpi	r24, 0x2E	; 46
    5bf6:	b9 f4       	brne	.+46     	; 0x5c26 <vfprintf+0xfc>
    5bf8:	36 fc       	sbrc	r3, 6
    5bfa:	75 c1       	rjmp	.+746    	; 0x5ee6 <vfprintf+0x3bc>
    5bfc:	23 2d       	mov	r18, r3
    5bfe:	20 64       	ori	r18, 0x40	; 64
    5c00:	32 2e       	mov	r3, r18
    5c02:	19 c0       	rjmp	.+50     	; 0x5c36 <vfprintf+0x10c>
    5c04:	36 fe       	sbrs	r3, 6
    5c06:	06 c0       	rjmp	.+12     	; 0x5c14 <vfprintf+0xea>
    5c08:	8a e0       	ldi	r24, 0x0A	; 10
    5c0a:	98 9e       	mul	r9, r24
    5c0c:	20 0d       	add	r18, r0
    5c0e:	11 24       	eor	r1, r1
    5c10:	92 2e       	mov	r9, r18
    5c12:	11 c0       	rjmp	.+34     	; 0x5c36 <vfprintf+0x10c>
    5c14:	ea e0       	ldi	r30, 0x0A	; 10
    5c16:	2e 9e       	mul	r2, r30
    5c18:	20 0d       	add	r18, r0
    5c1a:	11 24       	eor	r1, r1
    5c1c:	22 2e       	mov	r2, r18
    5c1e:	f3 2d       	mov	r31, r3
    5c20:	f0 62       	ori	r31, 0x20	; 32
    5c22:	3f 2e       	mov	r3, r31
    5c24:	08 c0       	rjmp	.+16     	; 0x5c36 <vfprintf+0x10c>
    5c26:	8c 36       	cpi	r24, 0x6C	; 108
    5c28:	21 f4       	brne	.+8      	; 0x5c32 <vfprintf+0x108>
    5c2a:	83 2d       	mov	r24, r3
    5c2c:	80 68       	ori	r24, 0x80	; 128
    5c2e:	38 2e       	mov	r3, r24
    5c30:	02 c0       	rjmp	.+4      	; 0x5c36 <vfprintf+0x10c>
    5c32:	88 36       	cpi	r24, 0x68	; 104
    5c34:	41 f4       	brne	.+16     	; 0x5c46 <vfprintf+0x11c>
    5c36:	f7 01       	movw	r30, r14
    5c38:	93 fd       	sbrc	r25, 3
    5c3a:	85 91       	lpm	r24, Z+
    5c3c:	93 ff       	sbrs	r25, 3
    5c3e:	81 91       	ld	r24, Z+
    5c40:	7f 01       	movw	r14, r30
    5c42:	81 11       	cpse	r24, r1
    5c44:	b3 cf       	rjmp	.-154    	; 0x5bac <vfprintf+0x82>
    5c46:	98 2f       	mov	r25, r24
    5c48:	9f 7d       	andi	r25, 0xDF	; 223
    5c4a:	95 54       	subi	r25, 0x45	; 69
    5c4c:	93 30       	cpi	r25, 0x03	; 3
    5c4e:	28 f4       	brcc	.+10     	; 0x5c5a <vfprintf+0x130>
    5c50:	0c 5f       	subi	r16, 0xFC	; 252
    5c52:	1f 4f       	sbci	r17, 0xFF	; 255
    5c54:	9f e3       	ldi	r25, 0x3F	; 63
    5c56:	99 83       	std	Y+1, r25	; 0x01
    5c58:	0d c0       	rjmp	.+26     	; 0x5c74 <vfprintf+0x14a>
    5c5a:	83 36       	cpi	r24, 0x63	; 99
    5c5c:	31 f0       	breq	.+12     	; 0x5c6a <vfprintf+0x140>
    5c5e:	83 37       	cpi	r24, 0x73	; 115
    5c60:	71 f0       	breq	.+28     	; 0x5c7e <vfprintf+0x154>
    5c62:	83 35       	cpi	r24, 0x53	; 83
    5c64:	09 f0       	breq	.+2      	; 0x5c68 <vfprintf+0x13e>
    5c66:	55 c0       	rjmp	.+170    	; 0x5d12 <vfprintf+0x1e8>
    5c68:	20 c0       	rjmp	.+64     	; 0x5caa <vfprintf+0x180>
    5c6a:	f8 01       	movw	r30, r16
    5c6c:	80 81       	ld	r24, Z
    5c6e:	89 83       	std	Y+1, r24	; 0x01
    5c70:	0e 5f       	subi	r16, 0xFE	; 254
    5c72:	1f 4f       	sbci	r17, 0xFF	; 255
    5c74:	88 24       	eor	r8, r8
    5c76:	83 94       	inc	r8
    5c78:	91 2c       	mov	r9, r1
    5c7a:	53 01       	movw	r10, r6
    5c7c:	12 c0       	rjmp	.+36     	; 0x5ca2 <vfprintf+0x178>
    5c7e:	28 01       	movw	r4, r16
    5c80:	f2 e0       	ldi	r31, 0x02	; 2
    5c82:	4f 0e       	add	r4, r31
    5c84:	51 1c       	adc	r5, r1
    5c86:	f8 01       	movw	r30, r16
    5c88:	a0 80       	ld	r10, Z
    5c8a:	b1 80       	ldd	r11, Z+1	; 0x01
    5c8c:	36 fe       	sbrs	r3, 6
    5c8e:	03 c0       	rjmp	.+6      	; 0x5c96 <vfprintf+0x16c>
    5c90:	69 2d       	mov	r22, r9
    5c92:	70 e0       	ldi	r23, 0x00	; 0
    5c94:	02 c0       	rjmp	.+4      	; 0x5c9a <vfprintf+0x170>
    5c96:	6f ef       	ldi	r22, 0xFF	; 255
    5c98:	7f ef       	ldi	r23, 0xFF	; 255
    5c9a:	c5 01       	movw	r24, r10
    5c9c:	4e d1       	rcall	.+668    	; 0x5f3a <strnlen>
    5c9e:	4c 01       	movw	r8, r24
    5ca0:	82 01       	movw	r16, r4
    5ca2:	f3 2d       	mov	r31, r3
    5ca4:	ff 77       	andi	r31, 0x7F	; 127
    5ca6:	3f 2e       	mov	r3, r31
    5ca8:	15 c0       	rjmp	.+42     	; 0x5cd4 <vfprintf+0x1aa>
    5caa:	28 01       	movw	r4, r16
    5cac:	22 e0       	ldi	r18, 0x02	; 2
    5cae:	42 0e       	add	r4, r18
    5cb0:	51 1c       	adc	r5, r1
    5cb2:	f8 01       	movw	r30, r16
    5cb4:	a0 80       	ld	r10, Z
    5cb6:	b1 80       	ldd	r11, Z+1	; 0x01
    5cb8:	36 fe       	sbrs	r3, 6
    5cba:	03 c0       	rjmp	.+6      	; 0x5cc2 <vfprintf+0x198>
    5cbc:	69 2d       	mov	r22, r9
    5cbe:	70 e0       	ldi	r23, 0x00	; 0
    5cc0:	02 c0       	rjmp	.+4      	; 0x5cc6 <vfprintf+0x19c>
    5cc2:	6f ef       	ldi	r22, 0xFF	; 255
    5cc4:	7f ef       	ldi	r23, 0xFF	; 255
    5cc6:	c5 01       	movw	r24, r10
    5cc8:	2d d1       	rcall	.+602    	; 0x5f24 <strnlen_P>
    5cca:	4c 01       	movw	r8, r24
    5ccc:	f3 2d       	mov	r31, r3
    5cce:	f0 68       	ori	r31, 0x80	; 128
    5cd0:	3f 2e       	mov	r3, r31
    5cd2:	82 01       	movw	r16, r4
    5cd4:	33 fc       	sbrc	r3, 3
    5cd6:	19 c0       	rjmp	.+50     	; 0x5d0a <vfprintf+0x1e0>
    5cd8:	82 2d       	mov	r24, r2
    5cda:	90 e0       	ldi	r25, 0x00	; 0
    5cdc:	88 16       	cp	r8, r24
    5cde:	99 06       	cpc	r9, r25
    5ce0:	a0 f4       	brcc	.+40     	; 0x5d0a <vfprintf+0x1e0>
    5ce2:	b6 01       	movw	r22, r12
    5ce4:	80 e2       	ldi	r24, 0x20	; 32
    5ce6:	90 e0       	ldi	r25, 0x00	; 0
    5ce8:	33 d1       	rcall	.+614    	; 0x5f50 <fputc>
    5cea:	2a 94       	dec	r2
    5cec:	f5 cf       	rjmp	.-22     	; 0x5cd8 <vfprintf+0x1ae>
    5cee:	f5 01       	movw	r30, r10
    5cf0:	37 fc       	sbrc	r3, 7
    5cf2:	85 91       	lpm	r24, Z+
    5cf4:	37 fe       	sbrs	r3, 7
    5cf6:	81 91       	ld	r24, Z+
    5cf8:	5f 01       	movw	r10, r30
    5cfa:	b6 01       	movw	r22, r12
    5cfc:	90 e0       	ldi	r25, 0x00	; 0
    5cfe:	28 d1       	rcall	.+592    	; 0x5f50 <fputc>
    5d00:	21 10       	cpse	r2, r1
    5d02:	2a 94       	dec	r2
    5d04:	21 e0       	ldi	r18, 0x01	; 1
    5d06:	82 1a       	sub	r8, r18
    5d08:	91 08       	sbc	r9, r1
    5d0a:	81 14       	cp	r8, r1
    5d0c:	91 04       	cpc	r9, r1
    5d0e:	79 f7       	brne	.-34     	; 0x5cee <vfprintf+0x1c4>
    5d10:	e1 c0       	rjmp	.+450    	; 0x5ed4 <vfprintf+0x3aa>
    5d12:	84 36       	cpi	r24, 0x64	; 100
    5d14:	11 f0       	breq	.+4      	; 0x5d1a <vfprintf+0x1f0>
    5d16:	89 36       	cpi	r24, 0x69	; 105
    5d18:	39 f5       	brne	.+78     	; 0x5d68 <vfprintf+0x23e>
    5d1a:	f8 01       	movw	r30, r16
    5d1c:	37 fe       	sbrs	r3, 7
    5d1e:	07 c0       	rjmp	.+14     	; 0x5d2e <vfprintf+0x204>
    5d20:	60 81       	ld	r22, Z
    5d22:	71 81       	ldd	r23, Z+1	; 0x01
    5d24:	82 81       	ldd	r24, Z+2	; 0x02
    5d26:	93 81       	ldd	r25, Z+3	; 0x03
    5d28:	0c 5f       	subi	r16, 0xFC	; 252
    5d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    5d2c:	08 c0       	rjmp	.+16     	; 0x5d3e <vfprintf+0x214>
    5d2e:	60 81       	ld	r22, Z
    5d30:	71 81       	ldd	r23, Z+1	; 0x01
    5d32:	07 2e       	mov	r0, r23
    5d34:	00 0c       	add	r0, r0
    5d36:	88 0b       	sbc	r24, r24
    5d38:	99 0b       	sbc	r25, r25
    5d3a:	0e 5f       	subi	r16, 0xFE	; 254
    5d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    5d3e:	f3 2d       	mov	r31, r3
    5d40:	ff 76       	andi	r31, 0x6F	; 111
    5d42:	3f 2e       	mov	r3, r31
    5d44:	97 ff       	sbrs	r25, 7
    5d46:	09 c0       	rjmp	.+18     	; 0x5d5a <vfprintf+0x230>
    5d48:	90 95       	com	r25
    5d4a:	80 95       	com	r24
    5d4c:	70 95       	com	r23
    5d4e:	61 95       	neg	r22
    5d50:	7f 4f       	sbci	r23, 0xFF	; 255
    5d52:	8f 4f       	sbci	r24, 0xFF	; 255
    5d54:	9f 4f       	sbci	r25, 0xFF	; 255
    5d56:	f0 68       	ori	r31, 0x80	; 128
    5d58:	3f 2e       	mov	r3, r31
    5d5a:	2a e0       	ldi	r18, 0x0A	; 10
    5d5c:	30 e0       	ldi	r19, 0x00	; 0
    5d5e:	a3 01       	movw	r20, r6
    5d60:	33 d1       	rcall	.+614    	; 0x5fc8 <__ultoa_invert>
    5d62:	88 2e       	mov	r8, r24
    5d64:	86 18       	sub	r8, r6
    5d66:	44 c0       	rjmp	.+136    	; 0x5df0 <vfprintf+0x2c6>
    5d68:	85 37       	cpi	r24, 0x75	; 117
    5d6a:	31 f4       	brne	.+12     	; 0x5d78 <vfprintf+0x24e>
    5d6c:	23 2d       	mov	r18, r3
    5d6e:	2f 7e       	andi	r18, 0xEF	; 239
    5d70:	b2 2e       	mov	r11, r18
    5d72:	2a e0       	ldi	r18, 0x0A	; 10
    5d74:	30 e0       	ldi	r19, 0x00	; 0
    5d76:	25 c0       	rjmp	.+74     	; 0x5dc2 <vfprintf+0x298>
    5d78:	93 2d       	mov	r25, r3
    5d7a:	99 7f       	andi	r25, 0xF9	; 249
    5d7c:	b9 2e       	mov	r11, r25
    5d7e:	8f 36       	cpi	r24, 0x6F	; 111
    5d80:	c1 f0       	breq	.+48     	; 0x5db2 <vfprintf+0x288>
    5d82:	18 f4       	brcc	.+6      	; 0x5d8a <vfprintf+0x260>
    5d84:	88 35       	cpi	r24, 0x58	; 88
    5d86:	79 f0       	breq	.+30     	; 0x5da6 <vfprintf+0x27c>
    5d88:	ae c0       	rjmp	.+348    	; 0x5ee6 <vfprintf+0x3bc>
    5d8a:	80 37       	cpi	r24, 0x70	; 112
    5d8c:	19 f0       	breq	.+6      	; 0x5d94 <vfprintf+0x26a>
    5d8e:	88 37       	cpi	r24, 0x78	; 120
    5d90:	21 f0       	breq	.+8      	; 0x5d9a <vfprintf+0x270>
    5d92:	a9 c0       	rjmp	.+338    	; 0x5ee6 <vfprintf+0x3bc>
    5d94:	e9 2f       	mov	r30, r25
    5d96:	e0 61       	ori	r30, 0x10	; 16
    5d98:	be 2e       	mov	r11, r30
    5d9a:	b4 fe       	sbrs	r11, 4
    5d9c:	0d c0       	rjmp	.+26     	; 0x5db8 <vfprintf+0x28e>
    5d9e:	fb 2d       	mov	r31, r11
    5da0:	f4 60       	ori	r31, 0x04	; 4
    5da2:	bf 2e       	mov	r11, r31
    5da4:	09 c0       	rjmp	.+18     	; 0x5db8 <vfprintf+0x28e>
    5da6:	34 fe       	sbrs	r3, 4
    5da8:	0a c0       	rjmp	.+20     	; 0x5dbe <vfprintf+0x294>
    5daa:	29 2f       	mov	r18, r25
    5dac:	26 60       	ori	r18, 0x06	; 6
    5dae:	b2 2e       	mov	r11, r18
    5db0:	06 c0       	rjmp	.+12     	; 0x5dbe <vfprintf+0x294>
    5db2:	28 e0       	ldi	r18, 0x08	; 8
    5db4:	30 e0       	ldi	r19, 0x00	; 0
    5db6:	05 c0       	rjmp	.+10     	; 0x5dc2 <vfprintf+0x298>
    5db8:	20 e1       	ldi	r18, 0x10	; 16
    5dba:	30 e0       	ldi	r19, 0x00	; 0
    5dbc:	02 c0       	rjmp	.+4      	; 0x5dc2 <vfprintf+0x298>
    5dbe:	20 e1       	ldi	r18, 0x10	; 16
    5dc0:	32 e0       	ldi	r19, 0x02	; 2
    5dc2:	f8 01       	movw	r30, r16
    5dc4:	b7 fe       	sbrs	r11, 7
    5dc6:	07 c0       	rjmp	.+14     	; 0x5dd6 <vfprintf+0x2ac>
    5dc8:	60 81       	ld	r22, Z
    5dca:	71 81       	ldd	r23, Z+1	; 0x01
    5dcc:	82 81       	ldd	r24, Z+2	; 0x02
    5dce:	93 81       	ldd	r25, Z+3	; 0x03
    5dd0:	0c 5f       	subi	r16, 0xFC	; 252
    5dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    5dd4:	06 c0       	rjmp	.+12     	; 0x5de2 <vfprintf+0x2b8>
    5dd6:	60 81       	ld	r22, Z
    5dd8:	71 81       	ldd	r23, Z+1	; 0x01
    5dda:	80 e0       	ldi	r24, 0x00	; 0
    5ddc:	90 e0       	ldi	r25, 0x00	; 0
    5dde:	0e 5f       	subi	r16, 0xFE	; 254
    5de0:	1f 4f       	sbci	r17, 0xFF	; 255
    5de2:	a3 01       	movw	r20, r6
    5de4:	f1 d0       	rcall	.+482    	; 0x5fc8 <__ultoa_invert>
    5de6:	88 2e       	mov	r8, r24
    5de8:	86 18       	sub	r8, r6
    5dea:	fb 2d       	mov	r31, r11
    5dec:	ff 77       	andi	r31, 0x7F	; 127
    5dee:	3f 2e       	mov	r3, r31
    5df0:	36 fe       	sbrs	r3, 6
    5df2:	0d c0       	rjmp	.+26     	; 0x5e0e <vfprintf+0x2e4>
    5df4:	23 2d       	mov	r18, r3
    5df6:	2e 7f       	andi	r18, 0xFE	; 254
    5df8:	a2 2e       	mov	r10, r18
    5dfa:	89 14       	cp	r8, r9
    5dfc:	58 f4       	brcc	.+22     	; 0x5e14 <vfprintf+0x2ea>
    5dfe:	34 fe       	sbrs	r3, 4
    5e00:	0b c0       	rjmp	.+22     	; 0x5e18 <vfprintf+0x2ee>
    5e02:	32 fc       	sbrc	r3, 2
    5e04:	09 c0       	rjmp	.+18     	; 0x5e18 <vfprintf+0x2ee>
    5e06:	83 2d       	mov	r24, r3
    5e08:	8e 7e       	andi	r24, 0xEE	; 238
    5e0a:	a8 2e       	mov	r10, r24
    5e0c:	05 c0       	rjmp	.+10     	; 0x5e18 <vfprintf+0x2ee>
    5e0e:	b8 2c       	mov	r11, r8
    5e10:	a3 2c       	mov	r10, r3
    5e12:	03 c0       	rjmp	.+6      	; 0x5e1a <vfprintf+0x2f0>
    5e14:	b8 2c       	mov	r11, r8
    5e16:	01 c0       	rjmp	.+2      	; 0x5e1a <vfprintf+0x2f0>
    5e18:	b9 2c       	mov	r11, r9
    5e1a:	a4 fe       	sbrs	r10, 4
    5e1c:	0f c0       	rjmp	.+30     	; 0x5e3c <vfprintf+0x312>
    5e1e:	fe 01       	movw	r30, r28
    5e20:	e8 0d       	add	r30, r8
    5e22:	f1 1d       	adc	r31, r1
    5e24:	80 81       	ld	r24, Z
    5e26:	80 33       	cpi	r24, 0x30	; 48
    5e28:	21 f4       	brne	.+8      	; 0x5e32 <vfprintf+0x308>
    5e2a:	9a 2d       	mov	r25, r10
    5e2c:	99 7e       	andi	r25, 0xE9	; 233
    5e2e:	a9 2e       	mov	r10, r25
    5e30:	09 c0       	rjmp	.+18     	; 0x5e44 <vfprintf+0x31a>
    5e32:	a2 fe       	sbrs	r10, 2
    5e34:	06 c0       	rjmp	.+12     	; 0x5e42 <vfprintf+0x318>
    5e36:	b3 94       	inc	r11
    5e38:	b3 94       	inc	r11
    5e3a:	04 c0       	rjmp	.+8      	; 0x5e44 <vfprintf+0x31a>
    5e3c:	8a 2d       	mov	r24, r10
    5e3e:	86 78       	andi	r24, 0x86	; 134
    5e40:	09 f0       	breq	.+2      	; 0x5e44 <vfprintf+0x31a>
    5e42:	b3 94       	inc	r11
    5e44:	a3 fc       	sbrc	r10, 3
    5e46:	10 c0       	rjmp	.+32     	; 0x5e68 <vfprintf+0x33e>
    5e48:	a0 fe       	sbrs	r10, 0
    5e4a:	06 c0       	rjmp	.+12     	; 0x5e58 <vfprintf+0x32e>
    5e4c:	b2 14       	cp	r11, r2
    5e4e:	80 f4       	brcc	.+32     	; 0x5e70 <vfprintf+0x346>
    5e50:	28 0c       	add	r2, r8
    5e52:	92 2c       	mov	r9, r2
    5e54:	9b 18       	sub	r9, r11
    5e56:	0d c0       	rjmp	.+26     	; 0x5e72 <vfprintf+0x348>
    5e58:	b2 14       	cp	r11, r2
    5e5a:	58 f4       	brcc	.+22     	; 0x5e72 <vfprintf+0x348>
    5e5c:	b6 01       	movw	r22, r12
    5e5e:	80 e2       	ldi	r24, 0x20	; 32
    5e60:	90 e0       	ldi	r25, 0x00	; 0
    5e62:	76 d0       	rcall	.+236    	; 0x5f50 <fputc>
    5e64:	b3 94       	inc	r11
    5e66:	f8 cf       	rjmp	.-16     	; 0x5e58 <vfprintf+0x32e>
    5e68:	b2 14       	cp	r11, r2
    5e6a:	18 f4       	brcc	.+6      	; 0x5e72 <vfprintf+0x348>
    5e6c:	2b 18       	sub	r2, r11
    5e6e:	02 c0       	rjmp	.+4      	; 0x5e74 <vfprintf+0x34a>
    5e70:	98 2c       	mov	r9, r8
    5e72:	21 2c       	mov	r2, r1
    5e74:	a4 fe       	sbrs	r10, 4
    5e76:	0f c0       	rjmp	.+30     	; 0x5e96 <vfprintf+0x36c>
    5e78:	b6 01       	movw	r22, r12
    5e7a:	80 e3       	ldi	r24, 0x30	; 48
    5e7c:	90 e0       	ldi	r25, 0x00	; 0
    5e7e:	68 d0       	rcall	.+208    	; 0x5f50 <fputc>
    5e80:	a2 fe       	sbrs	r10, 2
    5e82:	16 c0       	rjmp	.+44     	; 0x5eb0 <vfprintf+0x386>
    5e84:	a1 fc       	sbrc	r10, 1
    5e86:	03 c0       	rjmp	.+6      	; 0x5e8e <vfprintf+0x364>
    5e88:	88 e7       	ldi	r24, 0x78	; 120
    5e8a:	90 e0       	ldi	r25, 0x00	; 0
    5e8c:	02 c0       	rjmp	.+4      	; 0x5e92 <vfprintf+0x368>
    5e8e:	88 e5       	ldi	r24, 0x58	; 88
    5e90:	90 e0       	ldi	r25, 0x00	; 0
    5e92:	b6 01       	movw	r22, r12
    5e94:	0c c0       	rjmp	.+24     	; 0x5eae <vfprintf+0x384>
    5e96:	8a 2d       	mov	r24, r10
    5e98:	86 78       	andi	r24, 0x86	; 134
    5e9a:	51 f0       	breq	.+20     	; 0x5eb0 <vfprintf+0x386>
    5e9c:	a1 fe       	sbrs	r10, 1
    5e9e:	02 c0       	rjmp	.+4      	; 0x5ea4 <vfprintf+0x37a>
    5ea0:	8b e2       	ldi	r24, 0x2B	; 43
    5ea2:	01 c0       	rjmp	.+2      	; 0x5ea6 <vfprintf+0x37c>
    5ea4:	80 e2       	ldi	r24, 0x20	; 32
    5ea6:	a7 fc       	sbrc	r10, 7
    5ea8:	8d e2       	ldi	r24, 0x2D	; 45
    5eaa:	b6 01       	movw	r22, r12
    5eac:	90 e0       	ldi	r25, 0x00	; 0
    5eae:	50 d0       	rcall	.+160    	; 0x5f50 <fputc>
    5eb0:	89 14       	cp	r8, r9
    5eb2:	30 f4       	brcc	.+12     	; 0x5ec0 <vfprintf+0x396>
    5eb4:	b6 01       	movw	r22, r12
    5eb6:	80 e3       	ldi	r24, 0x30	; 48
    5eb8:	90 e0       	ldi	r25, 0x00	; 0
    5eba:	4a d0       	rcall	.+148    	; 0x5f50 <fputc>
    5ebc:	9a 94       	dec	r9
    5ebe:	f8 cf       	rjmp	.-16     	; 0x5eb0 <vfprintf+0x386>
    5ec0:	8a 94       	dec	r8
    5ec2:	f3 01       	movw	r30, r6
    5ec4:	e8 0d       	add	r30, r8
    5ec6:	f1 1d       	adc	r31, r1
    5ec8:	80 81       	ld	r24, Z
    5eca:	b6 01       	movw	r22, r12
    5ecc:	90 e0       	ldi	r25, 0x00	; 0
    5ece:	40 d0       	rcall	.+128    	; 0x5f50 <fputc>
    5ed0:	81 10       	cpse	r8, r1
    5ed2:	f6 cf       	rjmp	.-20     	; 0x5ec0 <vfprintf+0x396>
    5ed4:	22 20       	and	r2, r2
    5ed6:	09 f4       	brne	.+2      	; 0x5eda <vfprintf+0x3b0>
    5ed8:	4e ce       	rjmp	.-868    	; 0x5b76 <vfprintf+0x4c>
    5eda:	b6 01       	movw	r22, r12
    5edc:	80 e2       	ldi	r24, 0x20	; 32
    5ede:	90 e0       	ldi	r25, 0x00	; 0
    5ee0:	37 d0       	rcall	.+110    	; 0x5f50 <fputc>
    5ee2:	2a 94       	dec	r2
    5ee4:	f7 cf       	rjmp	.-18     	; 0x5ed4 <vfprintf+0x3aa>
    5ee6:	f6 01       	movw	r30, r12
    5ee8:	86 81       	ldd	r24, Z+6	; 0x06
    5eea:	97 81       	ldd	r25, Z+7	; 0x07
    5eec:	02 c0       	rjmp	.+4      	; 0x5ef2 <vfprintf+0x3c8>
    5eee:	8f ef       	ldi	r24, 0xFF	; 255
    5ef0:	9f ef       	ldi	r25, 0xFF	; 255
    5ef2:	2b 96       	adiw	r28, 0x0b	; 11
    5ef4:	0f b6       	in	r0, 0x3f	; 63
    5ef6:	f8 94       	cli
    5ef8:	de bf       	out	0x3e, r29	; 62
    5efa:	0f be       	out	0x3f, r0	; 63
    5efc:	cd bf       	out	0x3d, r28	; 61
    5efe:	df 91       	pop	r29
    5f00:	cf 91       	pop	r28
    5f02:	1f 91       	pop	r17
    5f04:	0f 91       	pop	r16
    5f06:	ff 90       	pop	r15
    5f08:	ef 90       	pop	r14
    5f0a:	df 90       	pop	r13
    5f0c:	cf 90       	pop	r12
    5f0e:	bf 90       	pop	r11
    5f10:	af 90       	pop	r10
    5f12:	9f 90       	pop	r9
    5f14:	8f 90       	pop	r8
    5f16:	7f 90       	pop	r7
    5f18:	6f 90       	pop	r6
    5f1a:	5f 90       	pop	r5
    5f1c:	4f 90       	pop	r4
    5f1e:	3f 90       	pop	r3
    5f20:	2f 90       	pop	r2
    5f22:	08 95       	ret

00005f24 <strnlen_P>:
    5f24:	fc 01       	movw	r30, r24
    5f26:	05 90       	lpm	r0, Z+
    5f28:	61 50       	subi	r22, 0x01	; 1
    5f2a:	70 40       	sbci	r23, 0x00	; 0
    5f2c:	01 10       	cpse	r0, r1
    5f2e:	d8 f7       	brcc	.-10     	; 0x5f26 <strnlen_P+0x2>
    5f30:	80 95       	com	r24
    5f32:	90 95       	com	r25
    5f34:	8e 0f       	add	r24, r30
    5f36:	9f 1f       	adc	r25, r31
    5f38:	08 95       	ret

00005f3a <strnlen>:
    5f3a:	fc 01       	movw	r30, r24
    5f3c:	61 50       	subi	r22, 0x01	; 1
    5f3e:	70 40       	sbci	r23, 0x00	; 0
    5f40:	01 90       	ld	r0, Z+
    5f42:	01 10       	cpse	r0, r1
    5f44:	d8 f7       	brcc	.-10     	; 0x5f3c <strnlen+0x2>
    5f46:	80 95       	com	r24
    5f48:	90 95       	com	r25
    5f4a:	8e 0f       	add	r24, r30
    5f4c:	9f 1f       	adc	r25, r31
    5f4e:	08 95       	ret

00005f50 <fputc>:
    5f50:	0f 93       	push	r16
    5f52:	1f 93       	push	r17
    5f54:	cf 93       	push	r28
    5f56:	df 93       	push	r29
    5f58:	fb 01       	movw	r30, r22
    5f5a:	23 81       	ldd	r18, Z+3	; 0x03
    5f5c:	21 fd       	sbrc	r18, 1
    5f5e:	03 c0       	rjmp	.+6      	; 0x5f66 <fputc+0x16>
    5f60:	8f ef       	ldi	r24, 0xFF	; 255
    5f62:	9f ef       	ldi	r25, 0xFF	; 255
    5f64:	2c c0       	rjmp	.+88     	; 0x5fbe <fputc+0x6e>
    5f66:	22 ff       	sbrs	r18, 2
    5f68:	16 c0       	rjmp	.+44     	; 0x5f96 <fputc+0x46>
    5f6a:	46 81       	ldd	r20, Z+6	; 0x06
    5f6c:	57 81       	ldd	r21, Z+7	; 0x07
    5f6e:	24 81       	ldd	r18, Z+4	; 0x04
    5f70:	35 81       	ldd	r19, Z+5	; 0x05
    5f72:	42 17       	cp	r20, r18
    5f74:	53 07       	cpc	r21, r19
    5f76:	44 f4       	brge	.+16     	; 0x5f88 <fputc+0x38>
    5f78:	a0 81       	ld	r26, Z
    5f7a:	b1 81       	ldd	r27, Z+1	; 0x01
    5f7c:	9d 01       	movw	r18, r26
    5f7e:	2f 5f       	subi	r18, 0xFF	; 255
    5f80:	3f 4f       	sbci	r19, 0xFF	; 255
    5f82:	31 83       	std	Z+1, r19	; 0x01
    5f84:	20 83       	st	Z, r18
    5f86:	8c 93       	st	X, r24
    5f88:	26 81       	ldd	r18, Z+6	; 0x06
    5f8a:	37 81       	ldd	r19, Z+7	; 0x07
    5f8c:	2f 5f       	subi	r18, 0xFF	; 255
    5f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    5f90:	37 83       	std	Z+7, r19	; 0x07
    5f92:	26 83       	std	Z+6, r18	; 0x06
    5f94:	14 c0       	rjmp	.+40     	; 0x5fbe <fputc+0x6e>
    5f96:	8b 01       	movw	r16, r22
    5f98:	ec 01       	movw	r28, r24
    5f9a:	fb 01       	movw	r30, r22
    5f9c:	00 84       	ldd	r0, Z+8	; 0x08
    5f9e:	f1 85       	ldd	r31, Z+9	; 0x09
    5fa0:	e0 2d       	mov	r30, r0
    5fa2:	19 95       	eicall
    5fa4:	89 2b       	or	r24, r25
    5fa6:	e1 f6       	brne	.-72     	; 0x5f60 <fputc+0x10>
    5fa8:	d8 01       	movw	r26, r16
    5faa:	16 96       	adiw	r26, 0x06	; 6
    5fac:	8d 91       	ld	r24, X+
    5fae:	9c 91       	ld	r25, X
    5fb0:	17 97       	sbiw	r26, 0x07	; 7
    5fb2:	01 96       	adiw	r24, 0x01	; 1
    5fb4:	17 96       	adiw	r26, 0x07	; 7
    5fb6:	9c 93       	st	X, r25
    5fb8:	8e 93       	st	-X, r24
    5fba:	16 97       	sbiw	r26, 0x06	; 6
    5fbc:	ce 01       	movw	r24, r28
    5fbe:	df 91       	pop	r29
    5fc0:	cf 91       	pop	r28
    5fc2:	1f 91       	pop	r17
    5fc4:	0f 91       	pop	r16
    5fc6:	08 95       	ret

00005fc8 <__ultoa_invert>:
    5fc8:	fa 01       	movw	r30, r20
    5fca:	aa 27       	eor	r26, r26
    5fcc:	28 30       	cpi	r18, 0x08	; 8
    5fce:	51 f1       	breq	.+84     	; 0x6024 <__ultoa_invert+0x5c>
    5fd0:	20 31       	cpi	r18, 0x10	; 16
    5fd2:	81 f1       	breq	.+96     	; 0x6034 <__ultoa_invert+0x6c>
    5fd4:	e8 94       	clt
    5fd6:	6f 93       	push	r22
    5fd8:	6e 7f       	andi	r22, 0xFE	; 254
    5fda:	6e 5f       	subi	r22, 0xFE	; 254
    5fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    5fde:	8f 4f       	sbci	r24, 0xFF	; 255
    5fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    5fe2:	af 4f       	sbci	r26, 0xFF	; 255
    5fe4:	b1 e0       	ldi	r27, 0x01	; 1
    5fe6:	3e d0       	rcall	.+124    	; 0x6064 <__ultoa_invert+0x9c>
    5fe8:	b4 e0       	ldi	r27, 0x04	; 4
    5fea:	3c d0       	rcall	.+120    	; 0x6064 <__ultoa_invert+0x9c>
    5fec:	67 0f       	add	r22, r23
    5fee:	78 1f       	adc	r23, r24
    5ff0:	89 1f       	adc	r24, r25
    5ff2:	9a 1f       	adc	r25, r26
    5ff4:	a1 1d       	adc	r26, r1
    5ff6:	68 0f       	add	r22, r24
    5ff8:	79 1f       	adc	r23, r25
    5ffa:	8a 1f       	adc	r24, r26
    5ffc:	91 1d       	adc	r25, r1
    5ffe:	a1 1d       	adc	r26, r1
    6000:	6a 0f       	add	r22, r26
    6002:	71 1d       	adc	r23, r1
    6004:	81 1d       	adc	r24, r1
    6006:	91 1d       	adc	r25, r1
    6008:	a1 1d       	adc	r26, r1
    600a:	20 d0       	rcall	.+64     	; 0x604c <__ultoa_invert+0x84>
    600c:	09 f4       	brne	.+2      	; 0x6010 <__ultoa_invert+0x48>
    600e:	68 94       	set
    6010:	3f 91       	pop	r19
    6012:	2a e0       	ldi	r18, 0x0A	; 10
    6014:	26 9f       	mul	r18, r22
    6016:	11 24       	eor	r1, r1
    6018:	30 19       	sub	r19, r0
    601a:	30 5d       	subi	r19, 0xD0	; 208
    601c:	31 93       	st	Z+, r19
    601e:	de f6       	brtc	.-74     	; 0x5fd6 <__ultoa_invert+0xe>
    6020:	cf 01       	movw	r24, r30
    6022:	08 95       	ret
    6024:	46 2f       	mov	r20, r22
    6026:	47 70       	andi	r20, 0x07	; 7
    6028:	40 5d       	subi	r20, 0xD0	; 208
    602a:	41 93       	st	Z+, r20
    602c:	b3 e0       	ldi	r27, 0x03	; 3
    602e:	0f d0       	rcall	.+30     	; 0x604e <__ultoa_invert+0x86>
    6030:	c9 f7       	brne	.-14     	; 0x6024 <__ultoa_invert+0x5c>
    6032:	f6 cf       	rjmp	.-20     	; 0x6020 <__ultoa_invert+0x58>
    6034:	46 2f       	mov	r20, r22
    6036:	4f 70       	andi	r20, 0x0F	; 15
    6038:	40 5d       	subi	r20, 0xD0	; 208
    603a:	4a 33       	cpi	r20, 0x3A	; 58
    603c:	18 f0       	brcs	.+6      	; 0x6044 <__ultoa_invert+0x7c>
    603e:	49 5d       	subi	r20, 0xD9	; 217
    6040:	31 fd       	sbrc	r19, 1
    6042:	40 52       	subi	r20, 0x20	; 32
    6044:	41 93       	st	Z+, r20
    6046:	02 d0       	rcall	.+4      	; 0x604c <__ultoa_invert+0x84>
    6048:	a9 f7       	brne	.-22     	; 0x6034 <__ultoa_invert+0x6c>
    604a:	ea cf       	rjmp	.-44     	; 0x6020 <__ultoa_invert+0x58>
    604c:	b4 e0       	ldi	r27, 0x04	; 4
    604e:	a6 95       	lsr	r26
    6050:	97 95       	ror	r25
    6052:	87 95       	ror	r24
    6054:	77 95       	ror	r23
    6056:	67 95       	ror	r22
    6058:	ba 95       	dec	r27
    605a:	c9 f7       	brne	.-14     	; 0x604e <__ultoa_invert+0x86>
    605c:	00 97       	sbiw	r24, 0x00	; 0
    605e:	61 05       	cpc	r22, r1
    6060:	71 05       	cpc	r23, r1
    6062:	08 95       	ret
    6064:	9b 01       	movw	r18, r22
    6066:	ac 01       	movw	r20, r24
    6068:	0a 2e       	mov	r0, r26
    606a:	06 94       	lsr	r0
    606c:	57 95       	ror	r21
    606e:	47 95       	ror	r20
    6070:	37 95       	ror	r19
    6072:	27 95       	ror	r18
    6074:	ba 95       	dec	r27
    6076:	c9 f7       	brne	.-14     	; 0x606a <__ultoa_invert+0xa2>
    6078:	62 0f       	add	r22, r18
    607a:	73 1f       	adc	r23, r19
    607c:	84 1f       	adc	r24, r20
    607e:	95 1f       	adc	r25, r21
    6080:	a0 1d       	adc	r26, r0
    6082:	08 95       	ret

00006084 <_exit>:
    6084:	f8 94       	cli

00006086 <__stop_program>:
    6086:	ff cf       	rjmp	.-2      	; 0x6086 <__stop_program>
