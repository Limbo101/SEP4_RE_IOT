
IOT_test_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000658  00800200  00006042  000060d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006042  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000125b  00800858  00800858  0000672e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000672e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000678c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b28  00000000  00000000  000067cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e4bf  00000000  00000000  000072f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000395b  00000000  00000000  000157b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006b36  00000000  00000000  0001910e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000026b4  00000000  00000000  0001fc44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000043be  00000000  00000000  000222f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ce98  00000000  00000000  000266b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b60  00000000  00000000  0003354e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c2       	rjmp	.+1170   	; 0x494 <__ctors_end>
       2:	00 00       	nop
       4:	68 c2       	rjmp	.+1232   	; 0x4d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c2       	rjmp	.+1228   	; 0x4d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c2       	rjmp	.+1224   	; 0x4d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c2       	rjmp	.+1220   	; 0x4d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c2       	rjmp	.+1216   	; 0x4d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c2       	rjmp	.+1212   	; 0x4d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c2       	rjmp	.+1208   	; 0x4d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c2       	rjmp	.+1204   	; 0x4d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c2       	rjmp	.+1200   	; 0x4d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c2       	rjmp	.+1196   	; 0x4d6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c2       	rjmp	.+1192   	; 0x4d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__vector_12>
      34:	50 c2       	rjmp	.+1184   	; 0x4d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c2       	rjmp	.+1180   	; 0x4d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c2       	rjmp	.+1176   	; 0x4d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c2       	rjmp	.+1172   	; 0x4d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c2       	rjmp	.+1168   	; 0x4d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c2       	rjmp	.+1164   	; 0x4d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c2       	rjmp	.+1160   	; 0x4d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c2       	rjmp	.+1156   	; 0x4d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c2       	rjmp	.+1152   	; 0x4d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c2       	rjmp	.+1148   	; 0x4d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c2       	rjmp	.+1144   	; 0x4d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c2       	rjmp	.+1140   	; 0x4d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 43 25 	jmp	0x4a86	; 0x4a86 <__vector_25>
      68:	0c 94 95 25 	jmp	0x4b2a	; 0x4b2a <__vector_26>
      6c:	34 c2       	rjmp	.+1128   	; 0x4d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c2       	rjmp	.+1124   	; 0x4d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c2       	rjmp	.+1120   	; 0x4d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c2       	rjmp	.+1116   	; 0x4d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c2       	rjmp	.+1112   	; 0x4d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c2       	rjmp	.+1108   	; 0x4d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c2       	rjmp	.+1104   	; 0x4d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c2       	rjmp	.+1100   	; 0x4d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c2       	rjmp	.+1096   	; 0x4d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 d9 25 	jmp	0x4bb2	; 0x4bb2 <__vector_36>
      94:	0c 94 2b 26 	jmp	0x4c56	; 0x4c56 <__vector_37>
      98:	1e c2       	rjmp	.+1084   	; 0x4d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 c3 28 	jmp	0x5186	; 0x5186 <__vector_39>
      a0:	1a c2       	rjmp	.+1076   	; 0x4d6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	18 c2       	rjmp	.+1072   	; 0x4d6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	16 c2       	rjmp	.+1068   	; 0x4d6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	14 c2       	rjmp	.+1064   	; 0x4d6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	12 c2       	rjmp	.+1060   	; 0x4d6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	10 c2       	rjmp	.+1056   	; 0x4d6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0e c2       	rjmp	.+1052   	; 0x4d6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c c2       	rjmp	.+1048   	; 0x4d6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	0a c2       	rjmp	.+1044   	; 0x4d6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	08 c2       	rjmp	.+1040   	; 0x4d6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	06 c2       	rjmp	.+1036   	; 0x4d6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 6f 26 	jmp	0x4cde	; 0x4cde <__vector_51>
      d0:	0c 94 c1 26 	jmp	0x4d82	; 0x4d82 <__vector_52>
      d4:	00 c2       	rjmp	.+1024   	; 0x4d6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 05 27 	jmp	0x4e0a	; 0x4e0a <__vector_54>
      dc:	0c 94 57 27 	jmp	0x4eae	; 0x4eae <__vector_55>
      e0:	fa c1       	rjmp	.+1012   	; 0x4d6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c0 01       	movw	r24, r0
      e6:	c0 01       	movw	r24, r0
      e8:	c0 01       	movw	r24, r0
      ea:	fa 01       	movw	r30, r20
      ec:	02 02       	muls	r16, r18
      ee:	18 02       	muls	r17, r24
      f0:	c0 01       	movw	r24, r0
      f2:	c0 01       	movw	r24, r0
      f4:	fa 01       	movw	r30, r20
      f6:	02 02       	muls	r16, r18
      f8:	e5 28       	or	r14, r5
      fa:	55 29       	or	r21, r5
      fc:	55 29       	or	r21, r5
      fe:	55 29       	or	r21, r5
     100:	55 29       	or	r21, r5
     102:	55 29       	or	r21, r5
     104:	55 29       	or	r21, r5
     106:	55 29       	or	r21, r5
     108:	e5 28       	or	r14, r5
     10a:	55 29       	or	r21, r5
     10c:	55 29       	or	r21, r5
     10e:	55 29       	or	r21, r5
     110:	55 29       	or	r21, r5
     112:	55 29       	or	r21, r5
     114:	55 29       	or	r21, r5
     116:	55 29       	or	r21, r5
     118:	e7 28       	or	r14, r7
     11a:	55 29       	or	r21, r5
     11c:	55 29       	or	r21, r5
     11e:	55 29       	or	r21, r5
     120:	55 29       	or	r21, r5
     122:	55 29       	or	r21, r5
     124:	55 29       	or	r21, r5
     126:	55 29       	or	r21, r5
     128:	55 29       	or	r21, r5
     12a:	55 29       	or	r21, r5
     12c:	55 29       	or	r21, r5
     12e:	55 29       	or	r21, r5
     130:	55 29       	or	r21, r5
     132:	55 29       	or	r21, r5
     134:	55 29       	or	r21, r5
     136:	55 29       	or	r21, r5
     138:	e7 28       	or	r14, r7
     13a:	55 29       	or	r21, r5
     13c:	55 29       	or	r21, r5
     13e:	55 29       	or	r21, r5
     140:	55 29       	or	r21, r5
     142:	55 29       	or	r21, r5
     144:	55 29       	or	r21, r5
     146:	55 29       	or	r21, r5
     148:	55 29       	or	r21, r5
     14a:	55 29       	or	r21, r5
     14c:	55 29       	or	r21, r5
     14e:	55 29       	or	r21, r5
     150:	55 29       	or	r21, r5
     152:	55 29       	or	r21, r5
     154:	55 29       	or	r21, r5
     156:	55 29       	or	r21, r5
     158:	51 29       	or	r21, r1
     15a:	55 29       	or	r21, r5
     15c:	55 29       	or	r21, r5
     15e:	55 29       	or	r21, r5
     160:	55 29       	or	r21, r5
     162:	55 29       	or	r21, r5
     164:	55 29       	or	r21, r5
     166:	55 29       	or	r21, r5
     168:	1c 29       	or	r17, r12
     16a:	55 29       	or	r21, r5
     16c:	55 29       	or	r21, r5
     16e:	55 29       	or	r21, r5
     170:	55 29       	or	r21, r5
     172:	55 29       	or	r21, r5
     174:	55 29       	or	r21, r5
     176:	55 29       	or	r21, r5
     178:	55 29       	or	r21, r5
     17a:	55 29       	or	r21, r5
     17c:	55 29       	or	r21, r5
     17e:	55 29       	or	r21, r5
     180:	55 29       	or	r21, r5
     182:	55 29       	or	r21, r5
     184:	55 29       	or	r21, r5
     186:	55 29       	or	r21, r5
     188:	10 29       	or	r17, r0
     18a:	55 29       	or	r21, r5
     18c:	55 29       	or	r21, r5
     18e:	55 29       	or	r21, r5
     190:	55 29       	or	r21, r5
     192:	55 29       	or	r21, r5
     194:	55 29       	or	r21, r5
     196:	55 29       	or	r21, r5
     198:	34 29       	or	r19, r4

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	00 ea       	ldi	r16, 0xA0	; 160
     19c:	18 e1       	ldi	r17, 0x18	; 24
     19e:	0f 2e       	mov	r0, r31
     1a0:	f0 ed       	ldi	r31, 0xD0	; 208
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	7f d7       	rcall	.+3838   	; 0x10ca <uxListRemove>
     1cc:	80 91 93 18 	lds	r24, 0x1893	; 0x801893 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 93 18 	sts	0x1893, r24	; 0x801893 <uxCurrentNumberOfTasks>
     1d6:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 9f 18 	sts	0x189F, r24	; 0x80189f <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e8:	cc d6       	rcall	.+3480   	; 0xf82 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	ca d6       	rcall	.+3476   	; 0xf82 <vPortFree>
     1ee:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	10 f0       	brcs	.+4      	; 0x202 <prvIdleTask+0x68>
     1fe:	0e 94 3a 09 	call	0x1274	; 0x1274 <vPortYield>
     202:	0e 94 b3 1a 	call	0x3566	; 0x3566 <vApplicationIdleHook>
     206:	d1 cf       	rjmp	.-94     	; 0x1aa <prvIdleTask+0x10>

00000208 <prvTimerTask>:
     208:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20a:	df 93       	push	r29
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	60 97       	sbiw	r28, 0x10	; 16
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	de bf       	out	0x3e, r29	; 62
     218:	0f be       	out	0x3f, r0	; 63
     21a:	cd bf       	out	0x3d, r28	; 61
     21c:	ce 01       	movw	r24, r28
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	9a 87       	std	Y+10, r25	; 0x0a
     222:	89 87       	std	Y+9, r24	; 0x09
     224:	81 2c       	mov	r8, r1
     226:	91 2c       	mov	r9, r1
     228:	a1 2c       	mov	r10, r1
     22a:	b1 2c       	mov	r11, r1
     22c:	69 84       	ldd	r6, Y+9	; 0x09
     22e:	7a 84       	ldd	r7, Y+10	; 0x0a
     230:	e0 91 08 19 	lds	r30, 0x1908	; 0x801908 <pxCurrentTimerList>
     234:	f0 91 09 19 	lds	r31, 0x1909	; 0x801909 <pxCurrentTimerList+0x1>
     238:	80 81       	ld	r24, Z
     23a:	88 23       	and	r24, r24
     23c:	09 f4       	brne	.+2      	; 0x240 <prvTimerTask+0x38>
     23e:	10 c1       	rjmp	.+544    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     240:	07 80       	ldd	r0, Z+7	; 0x07
     242:	f0 85       	ldd	r31, Z+8	; 0x08
     244:	e0 2d       	mov	r30, r0
     246:	20 80       	ld	r2, Z
     248:	31 80       	ldd	r3, Z+1	; 0x01
     24a:	42 80       	ldd	r4, Z+2	; 0x02
     24c:	53 80       	ldd	r5, Z+3	; 0x03
     24e:	0e 94 9a 12 	call	0x2534	; 0x2534 <vTaskSuspendAll>
     252:	ce 01       	movw	r24, r28
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	0e 94 1d 1a 	call	0x343a	; 0x343a <prvSampleTimeNow>
     25a:	6b 87       	std	Y+11, r22	; 0x0b
     25c:	7c 87       	std	Y+12, r23	; 0x0c
     25e:	8d 87       	std	Y+13, r24	; 0x0d
     260:	9e 87       	std	Y+14, r25	; 0x0e
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	81 11       	cpse	r24, r1
     266:	65 c0       	rjmp	.+202    	; 0x332 <prvTimerTask+0x12a>
     268:	8b 85       	ldd	r24, Y+11	; 0x0b
     26a:	9c 85       	ldd	r25, Y+12	; 0x0c
     26c:	ad 85       	ldd	r26, Y+13	; 0x0d
     26e:	be 85       	ldd	r27, Y+14	; 0x0e
     270:	82 15       	cp	r24, r2
     272:	93 05       	cpc	r25, r3
     274:	a4 05       	cpc	r26, r4
     276:	b5 05       	cpc	r27, r5
     278:	08 f4       	brcc	.+2      	; 0x27c <prvTimerTask+0x74>
     27a:	44 c0       	rjmp	.+136    	; 0x304 <prvTimerTask+0xfc>
     27c:	0e 94 83 13 	call	0x2706	; 0x2706 <xTaskResumeAll>
     280:	e0 91 08 19 	lds	r30, 0x1908	; 0x801908 <pxCurrentTimerList>
     284:	f0 91 09 19 	lds	r31, 0x1909	; 0x801909 <pxCurrentTimerList+0x1>
     288:	07 80       	ldd	r0, Z+7	; 0x07
     28a:	f0 85       	ldd	r31, Z+8	; 0x08
     28c:	e0 2d       	mov	r30, r0
     28e:	a0 85       	ldd	r26, Z+8	; 0x08
     290:	b1 85       	ldd	r27, Z+9	; 0x09
     292:	b8 8b       	std	Y+16, r27	; 0x10
     294:	af 87       	std	Y+15, r26	; 0x0f
     296:	cd 01       	movw	r24, r26
     298:	02 96       	adiw	r24, 0x02	; 2
     29a:	17 d7       	rcall	.+3630   	; 0x10ca <uxListRemove>
     29c:	ef 85       	ldd	r30, Y+15	; 0x0f
     29e:	f8 89       	ldd	r31, Y+16	; 0x10
     2a0:	87 89       	ldd	r24, Z+23	; 0x17
     2a2:	82 ff       	sbrs	r24, 2
     2a4:	21 c0       	rjmp	.+66     	; 0x2e8 <prvTimerTask+0xe0>
     2a6:	46 85       	ldd	r20, Z+14	; 0x0e
     2a8:	57 85       	ldd	r21, Z+15	; 0x0f
     2aa:	60 89       	ldd	r22, Z+16	; 0x10
     2ac:	71 89       	ldd	r23, Z+17	; 0x11
     2ae:	42 0d       	add	r20, r2
     2b0:	53 1d       	adc	r21, r3
     2b2:	64 1d       	adc	r22, r4
     2b4:	75 1d       	adc	r23, r5
     2b6:	72 01       	movw	r14, r4
     2b8:	61 01       	movw	r12, r2
     2ba:	0b 85       	ldd	r16, Y+11	; 0x0b
     2bc:	1c 85       	ldd	r17, Y+12	; 0x0c
     2be:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c0:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c2:	cf 01       	movw	r24, r30
     2c4:	0e 94 2c 19 	call	0x3258	; 0x3258 <prvInsertTimerInActiveList>
     2c8:	88 23       	and	r24, r24
     2ca:	99 f0       	breq	.+38     	; 0x2f2 <prvTimerTask+0xea>
     2cc:	c8 2c       	mov	r12, r8
     2ce:	d9 2c       	mov	r13, r9
     2d0:	ea 2c       	mov	r14, r10
     2d2:	fb 2c       	mov	r15, r11
     2d4:	00 e0       	ldi	r16, 0x00	; 0
     2d6:	10 e0       	ldi	r17, 0x00	; 0
     2d8:	a2 01       	movw	r20, r4
     2da:	91 01       	movw	r18, r2
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e0:	98 89       	ldd	r25, Y+16	; 0x10
     2e2:	0e 94 bf 19 	call	0x337e	; 0x337e <xTimerGenericCommand>
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <prvTimerTask+0xea>
     2e8:	8e 7f       	andi	r24, 0xFE	; 254
     2ea:	af 85       	ldd	r26, Y+15	; 0x0f
     2ec:	b8 89       	ldd	r27, Y+16	; 0x10
     2ee:	57 96       	adiw	r26, 0x17	; 23
     2f0:	8c 93       	st	X, r24
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	54 96       	adiw	r26, 0x14	; 20
     2f8:	ed 91       	ld	r30, X+
     2fa:	fc 91       	ld	r31, X
     2fc:	55 97       	sbiw	r26, 0x15	; 21
     2fe:	cd 01       	movw	r24, r26
     300:	19 95       	eicall
     302:	9f c0       	rjmp	.+318    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	b2 01       	movw	r22, r4
     308:	a1 01       	movw	r20, r2
     30a:	8b 85       	ldd	r24, Y+11	; 0x0b
     30c:	9c 85       	ldd	r25, Y+12	; 0x0c
     30e:	ad 85       	ldd	r26, Y+13	; 0x0d
     310:	be 85       	ldd	r27, Y+14	; 0x0e
     312:	48 1b       	sub	r20, r24
     314:	59 0b       	sbc	r21, r25
     316:	6a 0b       	sbc	r22, r26
     318:	7b 0b       	sbc	r23, r27
     31a:	80 91 04 19 	lds	r24, 0x1904	; 0x801904 <xTimerQueue>
     31e:	90 91 05 19 	lds	r25, 0x1905	; 0x801905 <xTimerQueue+0x1>
     322:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <vQueueWaitForMessageRestricted>
     326:	0e 94 83 13 	call	0x2706	; 0x2706 <xTaskResumeAll>
     32a:	81 11       	cpse	r24, r1
     32c:	8a c0       	rjmp	.+276    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     32e:	a2 d7       	rcall	.+3908   	; 0x1274 <vPortYield>
     330:	88 c0       	rjmp	.+272    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     332:	0e 94 83 13 	call	0x2706	; 0x2706 <xTaskResumeAll>
     336:	85 c0       	rjmp	.+266    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	88 23       	and	r24, r24
     33c:	0c f4       	brge	.+2      	; 0x340 <prvTimerTask+0x138>
     33e:	81 c0       	rjmp	.+258    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     340:	4e 80       	ldd	r4, Y+6	; 0x06
     342:	5f 80       	ldd	r5, Y+7	; 0x07
     344:	d2 01       	movw	r26, r4
     346:	1c 96       	adiw	r26, 0x0c	; 12
     348:	8d 91       	ld	r24, X+
     34a:	9c 91       	ld	r25, X
     34c:	1d 97       	sbiw	r26, 0x0d	; 13
     34e:	89 2b       	or	r24, r25
     350:	19 f0       	breq	.+6      	; 0x358 <prvTimerTask+0x150>
     352:	c2 01       	movw	r24, r4
     354:	02 96       	adiw	r24, 0x02	; 2
     356:	b9 d6       	rcall	.+3442   	; 0x10ca <uxListRemove>
     358:	ce 01       	movw	r24, r28
     35a:	08 96       	adiw	r24, 0x08	; 8
     35c:	0e 94 1d 1a 	call	0x343a	; 0x343a <prvSampleTimeNow>
     360:	8b 01       	movw	r16, r22
     362:	9c 01       	movw	r18, r24
     364:	e9 81       	ldd	r30, Y+1	; 0x01
     366:	0e 2e       	mov	r0, r30
     368:	00 0c       	add	r0, r0
     36a:	ff 0b       	sbc	r31, r31
     36c:	ea 30       	cpi	r30, 0x0A	; 10
     36e:	f1 05       	cpc	r31, r1
     370:	08 f0       	brcs	.+2      	; 0x374 <prvTimerTask+0x16c>
     372:	67 c0       	rjmp	.+206    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     374:	88 27       	eor	r24, r24
     376:	ee 58       	subi	r30, 0x8E	; 142
     378:	ff 4f       	sbci	r31, 0xFF	; 255
     37a:	8f 4f       	sbci	r24, 0xFF	; 255
     37c:	0c 94 5b 2b 	jmp	0x56b6	; 0x56b6 <__tablejump2__>
     380:	f2 01       	movw	r30, r4
     382:	87 89       	ldd	r24, Z+23	; 0x17
     384:	81 60       	ori	r24, 0x01	; 1
     386:	87 8b       	std	Z+23, r24	; 0x17
     388:	ca 80       	ldd	r12, Y+2	; 0x02
     38a:	db 80       	ldd	r13, Y+3	; 0x03
     38c:	ec 80       	ldd	r14, Y+4	; 0x04
     38e:	fd 80       	ldd	r15, Y+5	; 0x05
     390:	46 85       	ldd	r20, Z+14	; 0x0e
     392:	57 85       	ldd	r21, Z+15	; 0x0f
     394:	60 89       	ldd	r22, Z+16	; 0x10
     396:	71 89       	ldd	r23, Z+17	; 0x11
     398:	4c 0d       	add	r20, r12
     39a:	5d 1d       	adc	r21, r13
     39c:	6e 1d       	adc	r22, r14
     39e:	7f 1d       	adc	r23, r15
     3a0:	c2 01       	movw	r24, r4
     3a2:	0e 94 2c 19 	call	0x3258	; 0x3258 <prvInsertTimerInActiveList>
     3a6:	88 23       	and	r24, r24
     3a8:	09 f4       	brne	.+2      	; 0x3ac <prvTimerTask+0x1a4>
     3aa:	4b c0       	rjmp	.+150    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3ac:	d2 01       	movw	r26, r4
     3ae:	54 96       	adiw	r26, 0x14	; 20
     3b0:	ed 91       	ld	r30, X+
     3b2:	fc 91       	ld	r31, X
     3b4:	55 97       	sbiw	r26, 0x15	; 21
     3b6:	c2 01       	movw	r24, r4
     3b8:	19 95       	eicall
     3ba:	f2 01       	movw	r30, r4
     3bc:	87 89       	ldd	r24, Z+23	; 0x17
     3be:	82 ff       	sbrs	r24, 2
     3c0:	40 c0       	rjmp	.+128    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3c2:	4a 81       	ldd	r20, Y+2	; 0x02
     3c4:	5b 81       	ldd	r21, Y+3	; 0x03
     3c6:	6c 81       	ldd	r22, Y+4	; 0x04
     3c8:	7d 81       	ldd	r23, Y+5	; 0x05
     3ca:	86 85       	ldd	r24, Z+14	; 0x0e
     3cc:	97 85       	ldd	r25, Z+15	; 0x0f
     3ce:	a0 89       	ldd	r26, Z+16	; 0x10
     3d0:	b1 89       	ldd	r27, Z+17	; 0x11
     3d2:	9a 01       	movw	r18, r20
     3d4:	ab 01       	movw	r20, r22
     3d6:	28 0f       	add	r18, r24
     3d8:	39 1f       	adc	r19, r25
     3da:	4a 1f       	adc	r20, r26
     3dc:	5b 1f       	adc	r21, r27
     3de:	c8 2c       	mov	r12, r8
     3e0:	d9 2c       	mov	r13, r9
     3e2:	ea 2c       	mov	r14, r10
     3e4:	fb 2c       	mov	r15, r11
     3e6:	00 e0       	ldi	r16, 0x00	; 0
     3e8:	10 e0       	ldi	r17, 0x00	; 0
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	c2 01       	movw	r24, r4
     3ee:	0e 94 bf 19 	call	0x337e	; 0x337e <xTimerGenericCommand>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3f4:	d2 01       	movw	r26, r4
     3f6:	57 96       	adiw	r26, 0x17	; 23
     3f8:	8c 91       	ld	r24, X
     3fa:	57 97       	sbiw	r26, 0x17	; 23
     3fc:	8e 7f       	andi	r24, 0xFE	; 254
     3fe:	57 96       	adiw	r26, 0x17	; 23
     400:	8c 93       	st	X, r24
     402:	1f c0       	rjmp	.+62     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     404:	f2 01       	movw	r30, r4
     406:	87 89       	ldd	r24, Z+23	; 0x17
     408:	81 60       	ori	r24, 0x01	; 1
     40a:	87 8b       	std	Z+23, r24	; 0x17
     40c:	4a 81       	ldd	r20, Y+2	; 0x02
     40e:	5b 81       	ldd	r21, Y+3	; 0x03
     410:	6c 81       	ldd	r22, Y+4	; 0x04
     412:	7d 81       	ldd	r23, Y+5	; 0x05
     414:	46 87       	std	Z+14, r20	; 0x0e
     416:	57 87       	std	Z+15, r21	; 0x0f
     418:	60 8b       	std	Z+16, r22	; 0x10
     41a:	71 8b       	std	Z+17, r23	; 0x11
     41c:	40 0f       	add	r20, r16
     41e:	51 1f       	adc	r21, r17
     420:	62 1f       	adc	r22, r18
     422:	73 1f       	adc	r23, r19
     424:	68 01       	movw	r12, r16
     426:	79 01       	movw	r14, r18
     428:	c2 01       	movw	r24, r4
     42a:	0e 94 2c 19 	call	0x3258	; 0x3258 <prvInsertTimerInActiveList>
     42e:	09 c0       	rjmp	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     430:	f2 01       	movw	r30, r4
     432:	87 89       	ldd	r24, Z+23	; 0x17
     434:	81 fd       	sbrc	r24, 1
     436:	03 c0       	rjmp	.+6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     438:	c2 01       	movw	r24, r4
     43a:	a3 d5       	rcall	.+2886   	; 0xf82 <vPortFree>
     43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     43e:	8e 7f       	andi	r24, 0xFE	; 254
     440:	87 8b       	std	Z+23, r24	; 0x17
     442:	28 2d       	mov	r18, r8
     444:	39 2d       	mov	r19, r9
     446:	4a 2d       	mov	r20, r10
     448:	5b 2d       	mov	r21, r11
     44a:	66 2d       	mov	r22, r6
     44c:	77 2d       	mov	r23, r7
     44e:	80 91 04 19 	lds	r24, 0x1904	; 0x801904 <xTimerQueue>
     452:	90 91 05 19 	lds	r25, 0x1905	; 0x801905 <xTimerQueue+0x1>
     456:	0e 94 38 0c 	call	0x1870	; 0x1870 <xQueueReceive>
     45a:	81 11       	cpse	r24, r1
     45c:	6d cf       	rjmp	.-294    	; 0x338 <prvTimerTask+0x130>
     45e:	e8 ce       	rjmp	.-560    	; 0x230 <prvTimerTask+0x28>
     460:	0e 94 9a 12 	call	0x2534	; 0x2534 <vTaskSuspendAll>
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	0e 94 1d 1a 	call	0x343a	; 0x343a <prvSampleTimeNow>
     46c:	6b 87       	std	Y+11, r22	; 0x0b
     46e:	7c 87       	std	Y+12, r23	; 0x0c
     470:	8d 87       	std	Y+13, r24	; 0x0d
     472:	9e 87       	std	Y+14, r25	; 0x0e
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	81 11       	cpse	r24, r1
     478:	5c cf       	rjmp	.-328    	; 0x332 <prvTimerTask+0x12a>
     47a:	e0 91 06 19 	lds	r30, 0x1906	; 0x801906 <pxOverflowTimerList>
     47e:	f0 91 07 19 	lds	r31, 0x1907	; 0x801907 <pxOverflowTimerList+0x1>
     482:	80 81       	ld	r24, Z
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	81 11       	cpse	r24, r1
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	28 2c       	mov	r2, r8
     48c:	39 2c       	mov	r3, r9
     48e:	4a 2c       	mov	r4, r10
     490:	5b 2c       	mov	r5, r11
     492:	39 cf       	rjmp	.-398    	; 0x306 <prvTimerTask+0xfe>

00000494 <__ctors_end>:
     494:	11 24       	eor	r1, r1
     496:	1f be       	out	0x3f, r1	; 63
     498:	cf ef       	ldi	r28, 0xFF	; 255
     49a:	d1 e2       	ldi	r29, 0x21	; 33
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	00 e0       	ldi	r16, 0x00	; 0
     4a2:	0c bf       	out	0x3c, r16	; 60

000004a4 <__do_copy_data>:
     4a4:	18 e0       	ldi	r17, 0x08	; 8
     4a6:	a0 e0       	ldi	r26, 0x00	; 0
     4a8:	b2 e0       	ldi	r27, 0x02	; 2
     4aa:	e2 e4       	ldi	r30, 0x42	; 66
     4ac:	f0 e6       	ldi	r31, 0x60	; 96
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0b bf       	out	0x3b, r16	; 59
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__do_copy_data+0x14>
     4b4:	07 90       	elpm	r0, Z+
     4b6:	0d 92       	st	X+, r0
     4b8:	a8 35       	cpi	r26, 0x58	; 88
     4ba:	b1 07       	cpc	r27, r17
     4bc:	d9 f7       	brne	.-10     	; 0x4b4 <__do_copy_data+0x10>

000004be <__do_clear_bss>:
     4be:	2a e1       	ldi	r18, 0x1A	; 26
     4c0:	a8 e5       	ldi	r26, 0x58	; 88
     4c2:	b8 e0       	ldi	r27, 0x08	; 8
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <.do_clear_bss_start>

000004c6 <.do_clear_bss_loop>:
     4c6:	1d 92       	st	X+, r1

000004c8 <.do_clear_bss_start>:
     4c8:	a3 3b       	cpi	r26, 0xB3	; 179
     4ca:	b2 07       	cpc	r27, r18
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <.do_clear_bss_loop>
     4ce:	0e 94 24 1c 	call	0x3848	; 0x3848 <main>
     4d2:	0c 94 1f 30 	jmp	0x603e	; 0x603e <_exit>

000004d6 <__bad_interrupt>:
     4d6:	94 cd       	rjmp	.-1240   	; 0x0 <__vectors>

000004d8 <CO2_handler_task>:
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, CO2_measure_bit, pdTRUE, pdTRUE, 500);
		if((measureBits & (CO2_measure_bit)) == (CO2_measure_bit))
		{
				return_code = mh_z19_take_meassuring();
				while(return_code != MHZ19_OK){
					printf("%s%i%s\n","Arduino CO2 measuring error! Return value: ",return_code," . Retrying..."); 
     4d8:	0f 2e       	mov	r0, r31
     4da:	fe e6       	ldi	r31, 0x6E	; 110
     4dc:	8f 2e       	mov	r8, r31
     4de:	f2 e0       	ldi	r31, 0x02	; 2
     4e0:	9f 2e       	mov	r9, r31
     4e2:	f0 2d       	mov	r31, r0
     4e4:	0f 2e       	mov	r0, r31
     4e6:	fd e7       	ldi	r31, 0x7D	; 125
     4e8:	af 2e       	mov	r10, r31
     4ea:	f2 e0       	ldi	r31, 0x02	; 2
     4ec:	bf 2e       	mov	r11, r31
     4ee:	f0 2d       	mov	r31, r0
     4f0:	c9 ea       	ldi	r28, 0xA9	; 169
     4f2:	d2 e0       	ldi	r29, 0x02	; 2
					vTaskDelay(50);
					return_code = mh_z19_take_meassuring();
				}
				vTaskDelay(20); // giving it some time to set the values
				printf("%s%i\n","Arduino measurement CO2: ", getCO2());	
     4f4:	0f 2e       	mov	r0, r31
     4f6:	f1 eb       	ldi	r31, 0xB1	; 177
     4f8:	6f 2e       	mov	r6, r31
     4fa:	f2 e0       	ldi	r31, 0x02	; 2
     4fc:	7f 2e       	mov	r7, r31
     4fe:	f0 2d       	mov	r31, r0
     500:	0f 2e       	mov	r0, r31
     502:	fb ec       	ldi	r31, 0xCB	; 203
     504:	4f 2e       	mov	r4, r31
     506:	f2 e0       	ldi	r31, 0x02	; 2
     508:	5f 2e       	mov	r5, r31
     50a:	f0 2d       	mov	r31, r0
{

	for (;;) 
	{
		
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, CO2_measure_bit, pdTRUE, pdTRUE, 500);
     50c:	0f 2e       	mov	r0, r31
     50e:	f4 ef       	ldi	r31, 0xF4	; 244
     510:	cf 2e       	mov	r12, r31
     512:	dd 24       	eor	r13, r13
     514:	d3 94       	inc	r13
     516:	e1 2c       	mov	r14, r1
     518:	f1 2c       	mov	r15, r1
     51a:	f0 2d       	mov	r31, r0
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	21 e0       	ldi	r18, 0x01	; 1
     520:	41 e0       	ldi	r20, 0x01	; 1
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	80 91 80 1a 	lds	r24, 0x1A80	; 0x801a80 <Measure_event_group>
     52c:	90 91 81 1a 	lds	r25, 0x1A81	; 0x801a81 <Measure_event_group+0x1>
     530:	c9 d2       	rcall	.+1426   	; 0xac4 <xEventGroupWaitBits>
		if((measureBits & (CO2_measure_bit)) == (CO2_measure_bit))
     532:	60 ff       	sbrs	r22, 0
     534:	eb cf       	rjmp	.-42     	; 0x50c <CO2_handler_task+0x34>
		{
				return_code = mh_z19_take_meassuring();
     536:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <mh_z19_take_meassuring>
     53a:	80 93 82 1a 	sts	0x1A82, r24	; 0x801a82 <return_code>
				while(return_code != MHZ19_OK){
     53e:	88 23       	and	r24, r24
     540:	f9 f0       	breq	.+62     	; 0x580 <CO2_handler_task+0xa8>
					printf("%s%i%s\n","Arduino CO2 measuring error! Return value: ",return_code," . Retrying..."); 
     542:	9f 92       	push	r9
     544:	8f 92       	push	r8
     546:	1f 92       	push	r1
     548:	8f 93       	push	r24
     54a:	bf 92       	push	r11
     54c:	af 92       	push	r10
     54e:	df 93       	push	r29
     550:	cf 93       	push	r28
     552:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <printf>
					vTaskDelay(50);
     556:	62 e3       	ldi	r22, 0x32	; 50
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 5d 14 	call	0x28ba	; 0x28ba <vTaskDelay>
					return_code = mh_z19_take_meassuring();
     562:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <mh_z19_take_meassuring>
     566:	80 93 82 1a 	sts	0x1A82, r24	; 0x801a82 <return_code>
		
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, CO2_measure_bit, pdTRUE, pdTRUE, 500);
		if((measureBits & (CO2_measure_bit)) == (CO2_measure_bit))
		{
				return_code = mh_z19_take_meassuring();
				while(return_code != MHZ19_OK){
     56a:	2d b7       	in	r18, 0x3d	; 61
     56c:	3e b7       	in	r19, 0x3e	; 62
     56e:	28 5f       	subi	r18, 0xF8	; 248
     570:	3f 4f       	sbci	r19, 0xFF	; 255
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	3e bf       	out	0x3e, r19	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	2d bf       	out	0x3d, r18	; 61
     57c:	81 11       	cpse	r24, r1
     57e:	e1 cf       	rjmp	.-62     	; 0x542 <CO2_handler_task+0x6a>
					printf("%s%i%s\n","Arduino CO2 measuring error! Return value: ",return_code," . Retrying..."); 
					vTaskDelay(50);
					return_code = mh_z19_take_meassuring();
				}
				vTaskDelay(20); // giving it some time to set the values
     580:	64 e1       	ldi	r22, 0x14	; 20
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 5d 14 	call	0x28ba	; 0x28ba <vTaskDelay>
				printf("%s%i\n","Arduino measurement CO2: ", getCO2());	
     58c:	a6 d1       	rcall	.+844    	; 0x8da <getCO2>
     58e:	9f 93       	push	r25
     590:	8f 93       	push	r24
     592:	7f 92       	push	r7
     594:	6f 92       	push	r6
     596:	5f 92       	push	r5
     598:	4f 92       	push	r4
     59a:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <printf>
				xEventGroupSetBits(Data_event_group, CO2_data_bit);
     59e:	44 e0       	ldi	r20, 0x04	; 4
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	80 91 7e 1a 	lds	r24, 0x1A7E	; 0x801a7e <Data_event_group>
     5aa:	90 91 7f 1a 	lds	r25, 0x1A7F	; 0x801a7f <Data_event_group+0x1>
     5ae:	4a d3       	rcall	.+1684   	; 0xc44 <xEventGroupSetBits>
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	a7 cf       	rjmp	.-178    	; 0x50c <CO2_handler_task+0x34>

000005be <CO2Sensor_create>:
mh_z19_return_code_t return_code;
	
void CO2_handler_task( void *pvParameters );

void CO2Sensor_create()
{
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
	mh_z19_create(ser_USART3, setCO2);
     5c4:	60 e8       	ldi	r22, 0x80	; 128
     5c6:	74 e0       	ldi	r23, 0x04	; 4
     5c8:	83 e0       	ldi	r24, 0x03	; 3
     5ca:	0e 94 be 23 	call	0x477c	; 0x477c <mh_z19_create>
	xTaskCreate(
     5ce:	e1 2c       	mov	r14, r1
     5d0:	f1 2c       	mov	r15, r1
     5d2:	02 e0       	ldi	r16, 0x02	; 2
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	48 e8       	ldi	r20, 0x88	; 136
     5da:	51 e0       	ldi	r21, 0x01	; 1
     5dc:	61 ed       	ldi	r22, 0xD1	; 209
     5de:	72 e0       	ldi	r23, 0x02	; 2
     5e0:	8c e6       	ldi	r24, 0x6C	; 108
     5e2:	92 e0       	ldi	r25, 0x02	; 2
     5e4:	0e 94 3f 11 	call	0x227e	; 0x227e <xTaskCreate>
		configMINIMAL_STACK_SIZE+200,
		NULL,
		2,
		NULL 
	);
}
     5e8:	0f 91       	pop	r16
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	08 95       	ret

000005f0 <lora_handler_create>:
void lora_handler_task( void *pvParameters );

static lora_payload_t _uplink_payload;

void lora_handler_create(UBaseType_t lora_handler_task_priority)
{
     5f0:	ef 92       	push	r14
     5f2:	ff 92       	push	r15
     5f4:	0f 93       	push	r16
	xTaskCreate(
     5f6:	e1 2c       	mov	r14, r1
     5f8:	f1 2c       	mov	r15, r1
     5fa:	08 2f       	mov	r16, r24
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	48 e8       	ldi	r20, 0x88	; 136
     602:	51 e0       	ldi	r21, 0x01	; 1
     604:	6d ed       	ldi	r22, 0xDD	; 221
     606:	72 e0       	ldi	r23, 0x02	; 2
     608:	86 ed       	ldi	r24, 0xD6	; 214
     60a:	93 e0       	ldi	r25, 0x03	; 3
     60c:	0e 94 3f 11 	call	0x227e	; 0x227e <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

}
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	ef 90       	pop	r14
     616:	08 95       	ret

00000618 <lora_setup>:
}

*/


bool lora_setup(){
     618:	ef 92       	push	r14
     61a:	ff 92       	push	r15
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
	e_LoRa_return_code_t return_code;
	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     622:	0e 94 18 20 	call	0x4030	; 0x4030 <lora_driver_rn2483_factory_reset>
     626:	0e 94 95 22 	call	0x452a	; 0x452a <lora_driver_map_return_code_to_text>
     62a:	9f 93       	push	r25
     62c:	8f 93       	push	r24
     62e:	84 ee       	ldi	r24, 0xE4	; 228
     630:	92 e0       	ldi	r25, 0x02	; 2
     632:	9f 93       	push	r25
     634:	8f 93       	push	r24
     636:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <printf>
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     63a:	0e 94 96 21 	call	0x432c	; 0x432c <lora_driver_configure_to_eu868>
     63e:	0e 94 95 22 	call	0x452a	; 0x452a <lora_driver_map_return_code_to_text>
     642:	9f 93       	push	r25
     644:	8f 93       	push	r24
     646:	87 ef       	ldi	r24, 0xF7	; 247
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	9f 93       	push	r25
     64c:	8f 93       	push	r24
     64e:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <printf>
	// Get the transceivers HW EUI
	return_code = lora_driver_get_rn2483_hweui(_out_buf);
     652:	8f e6       	ldi	r24, 0x6F	; 111
     654:	98 e0       	ldi	r25, 0x08	; 8
     656:	0e 94 2a 20 	call	0x4054	; 0x4054 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(return_code), _out_buf);
     65a:	0e 94 95 22 	call	0x452a	; 0x452a <lora_driver_map_return_code_to_text>
     65e:	cf e6       	ldi	r28, 0x6F	; 111
     660:	d8 e0       	ldi	r29, 0x08	; 8
     662:	df 93       	push	r29
     664:	cf 93       	push	r28
     666:	9f 93       	push	r25
     668:	8f 93       	push	r24
     66a:	80 e1       	ldi	r24, 0x10	; 16
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	9f 93       	push	r25
     670:	8f 93       	push	r24
     672:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <printf>
	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     676:	ce 01       	movw	r24, r28
     678:	0e 94 46 20 	call	0x408c	; 0x408c <lora_driver_set_device_identifier>
     67c:	0e 94 95 22 	call	0x452a	; 0x452a <lora_driver_map_return_code_to_text>
     680:	9f 93       	push	r25
     682:	8f 93       	push	r24
     684:	df 93       	push	r29
     686:	cf 93       	push	r28
     688:	84 e2       	ldi	r24, 0x24	; 36
     68a:	93 e0       	ldi	r25, 0x03	; 3
     68c:	9f 93       	push	r25
     68e:	8f 93       	push	r24
     690:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <printf>
	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     694:	ae 01       	movw	r20, r28
     696:	69 e3       	ldi	r22, 0x39	; 57
     698:	73 e0       	ldi	r23, 0x03	; 3
     69a:	8a e5       	ldi	r24, 0x5A	; 90
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	0e 94 74 22 	call	0x44e8	; 0x44e8 <lora_driver_set_otaa_identity>
     6a2:	0e 94 95 22 	call	0x452a	; 0x452a <lora_driver_map_return_code_to_text>
     6a6:	9f 93       	push	r25
     6a8:	8f 93       	push	r24
     6aa:	df 93       	push	r29
     6ac:	cf 93       	push	r28
     6ae:	89 e3       	ldi	r24, 0x39	; 57
     6b0:	93 e0       	ldi	r25, 0x03	; 3
     6b2:	9f 93       	push	r25
     6b4:	8f 93       	push	r24
     6b6:	8a e5       	ldi	r24, 0x5A	; 90
     6b8:	93 e0       	ldi	r25, 0x03	; 3
     6ba:	9f 93       	push	r25
     6bc:	8f 93       	push	r24
     6be:	8b e6       	ldi	r24, 0x6B	; 107
     6c0:	93 e0       	ldi	r25, 0x03	; 3
     6c2:	9f 93       	push	r25
     6c4:	8f 93       	push	r24
     6c6:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <printf>
	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     6ca:	0e 94 79 20 	call	0x40f2	; 0x40f2 <lora_driver_save_mac>
     6ce:	0e 94 95 22 	call	0x452a	; 0x452a <lora_driver_map_return_code_to_text>
     6d2:	9f 93       	push	r25
     6d4:	8f 93       	push	r24
     6d6:	81 ea       	ldi	r24, 0xA1	; 161
     6d8:	93 e0       	ldi	r25, 0x03	; 3
     6da:	9f 93       	push	r25
     6dc:	8f 93       	push	r24
     6de:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <printf>
	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     6e2:	8d b7       	in	r24, 0x3d	; 61
     6e4:	9e b7       	in	r25, 0x3e	; 62
     6e6:	82 96       	adiw	r24, 0x22	; 34
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	9e bf       	out	0x3e, r25	; 62
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	8d bf       	out	0x3d, r24	; 61
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	0e 94 73 21 	call	0x42e6	; 0x42e6 <lora_driver_set_adaptive_data_rate>
     6f8:	0e 94 95 22 	call	0x452a	; 0x452a <lora_driver_map_return_code_to_text>
     6fc:	9f 93       	push	r25
     6fe:	8f 93       	push	r24
     700:	80 eb       	ldi	r24, 0xB0	; 176
     702:	93 e0       	ldi	r25, 0x03	; 3
     704:	9f 93       	push	r25
     706:	8f 93       	push	r24
     708:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <printf>
	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     70c:	84 ef       	ldi	r24, 0xF4	; 244
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	0e 94 7e 21 	call	0x42fc	; 0x42fc <lora_driver_set_receive_delay>
     714:	0e 94 95 22 	call	0x452a	; 0x452a <lora_driver_map_return_code_to_text>
     718:	9f 93       	push	r25
     71a:	8f 93       	push	r24
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	8f 93       	push	r24
     720:	84 ef       	ldi	r24, 0xF4	; 244
     722:	8f 93       	push	r24
     724:	81 ed       	ldi	r24, 0xD1	; 209
     726:	93 e0       	ldi	r25, 0x03	; 3
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <printf>
     730:	8d b7       	in	r24, 0x3d	; 61
     732:	9e b7       	in	r25, 0x3e	; 62
     734:	0a 96       	adiw	r24, 0x0a	; 10
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	f8 94       	cli
     73a:	9e bf       	out	0x3e, r25	; 62
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	8d bf       	out	0x3d, r24	; 61
     740:	c3 e0       	ldi	r28, 0x03	; 3
     742:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 3; // This is 3 because after 3rd connection attempt Loriot responds "no free channel"
	
		do {
			return_code = lora_driver_join(LoRa_OTAA);
			printf("Join Network TriesLeft: %d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(return_code));
     744:	0f 2e       	mov	r0, r31
     746:	f1 ef       	ldi	r31, 0xF1	; 241
     748:	ef 2e       	mov	r14, r31
     74a:	f3 e0       	ldi	r31, 0x03	; 3
     74c:	ff 2e       	mov	r15, r31
     74e:	f0 2d       	mov	r31, r0
	
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 3; // This is 3 because after 3rd connection attempt Loriot responds "no free channel"
	
		do {
			return_code = lora_driver_join(LoRa_OTAA);
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	0e 94 7f 20 	call	0x40fe	; 0x40fe <lora_driver_join>
     756:	18 2f       	mov	r17, r24
			printf("Join Network TriesLeft: %d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(return_code));
     758:	0e 94 95 22 	call	0x452a	; 0x452a <lora_driver_map_return_code_to_text>
     75c:	9f 93       	push	r25
     75e:	8f 93       	push	r24
     760:	df 93       	push	r29
     762:	cf 93       	push	r28
     764:	ff 92       	push	r15
     766:	ef 92       	push	r14
     768:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <printf>

			if(return_code == LoRa_NO_FREE_CH){
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	13 30       	cpi	r17, 0x03	; 3
     77a:	79 f0       	breq	.+30     	; 0x79a <lora_setup+0x182>
				return 0;
			}

			else if ( return_code != LoRa_ACCEPTED && return_code != LoRa_NO_FREE_CH)
     77c:	18 30       	cpi	r17, 0x08	; 8
     77e:	79 f0       	breq	.+30     	; 0x79e <lora_setup+0x186>
			{
				// Make the red led pulse to tell something went wrong
				led_long_puls(led_ST1); // OPTIONAL
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <led_long_puls>
				// Wait 5 sec and lets try again
				vTaskDelay(pdMS_TO_TICKS(5000UL));
     786:	66 e3       	ldi	r22, 0x36	; 54
     788:	71 e0       	ldi	r23, 0x01	; 1
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 5d 14 	call	0x28ba	; 0x28ba <vTaskDelay>
     792:	21 97       	sbiw	r28, 0x01	; 1
			else if(return_code == LoRa_ACCEPTED)
			{
				return 1;
			}
			
		} while (--maxJoinTriesLeft);
     794:	e9 f6       	brne	.-70     	; 0x750 <lora_setup+0x138>
		
		
			return 0;
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	03 c0       	rjmp	.+6      	; 0x7a0 <lora_setup+0x188>
		do {
			return_code = lora_driver_join(LoRa_OTAA);
			printf("Join Network TriesLeft: %d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(return_code));

			if(return_code == LoRa_NO_FREE_CH){
				return 0;
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	01 c0       	rjmp	.+2      	; 0x7a0 <lora_setup+0x188>
				vTaskDelay(pdMS_TO_TICKS(5000UL));
			}
			
			else if(return_code == LoRa_ACCEPTED)
			{
				return 1;
     79e:	81 e0       	ldi	r24, 0x01	; 1
			
		} while (--maxJoinTriesLeft);
		
		
			return 0;
}
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	08 95       	ret

000007ac <lora_handler_task>:

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <lora_handler_task+0x6>
     7b2:	1f 92       	push	r1
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
		setup_value = lora_setup();	
	}
		
	

	_uplink_payload.len = 6;
     7b8:	0f 2e       	mov	r0, r31
     7ba:	f9 e5       	ldi	r31, 0x59	; 89
     7bc:	af 2e       	mov	r10, r31
     7be:	f8 e0       	ldi	r31, 0x08	; 8
     7c0:	bf 2e       	mov	r11, r31
     7c2:	f0 2d       	mov	r31, r0
     7c4:	0f 2e       	mov	r0, r31
     7c6:	f6 e0       	ldi	r31, 0x06	; 6
     7c8:	5f 2e       	mov	r5, r31
     7ca:	f0 2d       	mov	r31, r0
	_uplink_payload.port_no = 2;
     7cc:	68 94       	set
     7ce:	66 24       	eor	r6, r6
     7d0:	61 f8       	bld	r6, 1
			_uplink_payload.bytes[2] = temp >> 8;
			_uplink_payload.bytes[3] = temp & 0xFF;
			_uplink_payload.bytes[4] = co2_ppm >> 8;
			_uplink_payload.bytes[5] = co2_ppm & 0xFF;
			rc = lora_driver_sent_upload_message(false, &_uplink_payload);
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(rc));
     7d2:	0f 2e       	mov	r0, r31
     7d4:	f2 e1       	ldi	r31, 0x12	; 18
     7d6:	8f 2e       	mov	r8, r31
     7d8:	f4 e0       	ldi	r31, 0x04	; 4
     7da:	9f 2e       	mov	r9, r31
     7dc:	f0 2d       	mov	r31, r0
		if((dataBits & (CO2_data_bit|Hum_temp_data_bit)) == (CO2_data_bit|Hum_temp_data_bit)){
			uint16_t hum = (int) getHumidity();
			int16_t temp = (int) getTemperature();
			uint16_t co2_ppm = getCO2();

			_uplink_payload.bytes[0] = hum >> 8;
     7de:	7a 2c       	mov	r7, r10
     7e0:	1b 2d       	mov	r17, r11
	{
		
	static e_LoRa_return_code_t rc;

	// Hardware reset of LoRaWAN transceiver
	lora_driver_reset_rn2483(1);
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	0e 94 04 20 	call	0x4008	; 0x4008 <lora_driver_reset_rn2483>
	vTaskDelay(2);
     7e8:	62 e0       	ldi	r22, 0x02	; 2
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 5d 14 	call	0x28ba	; 0x28ba <vTaskDelay>
	lora_driver_reset_rn2483(0);
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	0e 94 04 20 	call	0x4008	; 0x4008 <lora_driver_reset_rn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     7fa:	66 e9       	ldi	r22, 0x96	; 150
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 5d 14 	call	0x28ba	; 0x28ba <vTaskDelay>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     806:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <lora_driver_flush_buffers>
	
	bool setup_value = 0;
	
	while(setup_value == 0){
		setup_value = lora_setup();	
     80a:	06 df       	rcall	.-500    	; 0x618 <lora_setup>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
	
	bool setup_value = 0;
	
	while(setup_value == 0){
     80c:	88 23       	and	r24, r24
     80e:	e9 f3       	breq	.-6      	; 0x80a <lora_handler_task+0x5e>
		setup_value = lora_setup();	
	}
		
	

	_uplink_payload.len = 6;
     810:	f5 01       	movw	r30, r10
     812:	51 82       	std	Z+1, r5	; 0x01
	_uplink_payload.port_no = 2;
     814:	60 82       	st	Z, r6

	 TickType_t xLastWakeTime;
	 const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
	 xLastWakeTime = xTaskGetTickCount();
     816:	0e 94 a0 12 	call	0x2540	; 0x2540 <xTaskGetTickCount>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
	 
	while(1)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
     822:	44 e4       	ldi	r20, 0x44	; 68
     824:	57 e0       	ldi	r21, 0x07	; 7
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	ce 01       	movw	r24, r28
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	0e 94 ff 13 	call	0x27fe	; 0x27fe <vTaskDelayUntil>
		xEventGroupSetBits(Measure_event_group, CO2_measure_bit|Hum_temp_measure_bit);
     832:	43 e0       	ldi	r20, 0x03	; 3
     834:	50 e0       	ldi	r21, 0x00	; 0
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	80 91 80 1a 	lds	r24, 0x1A80	; 0x801a80 <Measure_event_group>
     83e:	90 91 81 1a 	lds	r25, 0x1A81	; 0x801a81 <Measure_event_group+0x1>
     842:	00 d2       	rcall	.+1024   	; 0xc44 <xEventGroupSetBits>
		
		
		EventBits_t dataBits = xEventGroupWaitBits(Data_event_group, CO2_data_bit|Hum_temp_data_bit, pdTRUE, pdTRUE, 500);
     844:	0f 2e       	mov	r0, r31
     846:	f4 ef       	ldi	r31, 0xF4	; 244
     848:	cf 2e       	mov	r12, r31
     84a:	dd 24       	eor	r13, r13
     84c:	d3 94       	inc	r13
     84e:	e1 2c       	mov	r14, r1
     850:	f1 2c       	mov	r15, r1
     852:	f0 2d       	mov	r31, r0
     854:	01 e0       	ldi	r16, 0x01	; 1
     856:	21 e0       	ldi	r18, 0x01	; 1
     858:	4c e0       	ldi	r20, 0x0C	; 12
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	80 91 7e 1a 	lds	r24, 0x1A7E	; 0x801a7e <Data_event_group>
     864:	90 91 7f 1a 	lds	r25, 0x1A7F	; 0x801a7f <Data_event_group+0x1>
     868:	2d d1       	rcall	.+602    	; 0xac4 <xEventGroupWaitBits>
		
		if((dataBits & (CO2_data_bit|Hum_temp_data_bit)) == (CO2_data_bit|Hum_temp_data_bit)){
     86a:	dc 01       	movw	r26, r24
     86c:	cb 01       	movw	r24, r22
     86e:	8c 70       	andi	r24, 0x0C	; 12
     870:	99 27       	eor	r25, r25
     872:	aa 27       	eor	r26, r26
     874:	bb 27       	eor	r27, r27
     876:	0c 97       	sbiw	r24, 0x0c	; 12
     878:	a1 05       	cpc	r26, r1
     87a:	b1 05       	cpc	r27, r1
			uint16_t hum = (int) getHumidity();
     87c:	91 f6       	brne	.-92     	; 0x822 <lora_handler_task+0x76>
     87e:	66 d0       	rcall	.+204    	; 0x94c <getHumidity>
     880:	0e 94 34 1c 	call	0x3868	; 0x3868 <__fixsfsi>
     884:	e6 2e       	mov	r14, r22
			int16_t temp = (int) getTemperature();
     886:	d7 2e       	mov	r13, r23
     888:	a7 d0       	rcall	.+334    	; 0x9d8 <getTemperature>
     88a:	0e 94 34 1c 	call	0x3868	; 0x3868 <__fixsfsi>
     88e:	06 2f       	mov	r16, r22
			uint16_t co2_ppm = getCO2();
     890:	f7 2e       	mov	r15, r23
     892:	23 d0       	rcall	.+70     	; 0x8da <getCO2>

			_uplink_payload.bytes[0] = hum >> 8;
     894:	f5 01       	movw	r30, r10
     896:	d2 82       	std	Z+2, r13	; 0x02
			_uplink_payload.bytes[1] = hum & 0xFF;
     898:	e3 82       	std	Z+3, r14	; 0x03
			_uplink_payload.bytes[2] = temp >> 8;
     89a:	f4 82       	std	Z+4, r15	; 0x04
			_uplink_payload.bytes[3] = temp & 0xFF;
     89c:	05 83       	std	Z+5, r16	; 0x05
			_uplink_payload.bytes[4] = co2_ppm >> 8;
     89e:	96 83       	std	Z+6, r25	; 0x06
			_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     8a0:	87 83       	std	Z+7, r24	; 0x07
			rc = lora_driver_sent_upload_message(false, &_uplink_payload);
     8a2:	67 2d       	mov	r22, r7
     8a4:	71 2f       	mov	r23, r17
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	0e 94 a8 20 	call	0x4150	; 0x4150 <lora_driver_sent_upload_message>
     8ac:	80 93 58 08 	sts	0x0858, r24	; 0x800858 <__data_end>
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(rc));
     8b0:	0e 94 95 22 	call	0x452a	; 0x452a <lora_driver_map_return_code_to_text>
     8b4:	9f 93       	push	r25
     8b6:	8f 93       	push	r24
     8b8:	9f 92       	push	r9
     8ba:	8f 92       	push	r8
     8bc:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <printf>
			if(rc == LoRa_NO_FREE_CH){
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <__data_end>
     8cc:	83 30       	cpi	r24, 0x03	; 3
     8ce:	09 f4       	brne	.+2      	; 0x8d2 <lora_handler_task+0x126>
     8d0:	88 cf       	rjmp	.-240    	; 0x7e2 <lora_handler_task+0x36>
				break;
			}
			led_short_puls(led_ST4);
     8d2:	83 e0       	ldi	r24, 0x03	; 3
     8d4:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <led_short_puls>
     8d8:	a4 cf       	rjmp	.-184    	; 0x822 <lora_handler_task+0x76>

000008da <getCO2>:
bool isTaken_temperature = 0;



uint16_t getCO2(){
	while(isTaken_CO2){	
     8da:	80 91 d5 08 	lds	r24, 0x08D5	; 0x8008d5 <isTaken_CO2>
     8de:	88 23       	and	r24, r24
     8e0:	51 f0       	breq	.+20     	; 0x8f6 <getCO2+0x1c>
		vTaskDelay(50);
     8e2:	62 e3       	ldi	r22, 0x32	; 50
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 5d 14 	call	0x28ba	; 0x28ba <vTaskDelay>
bool isTaken_temperature = 0;



uint16_t getCO2(){
	while(isTaken_CO2){	
     8ee:	80 91 d5 08 	lds	r24, 0x08D5	; 0x8008d5 <isTaken_CO2>
     8f2:	81 11       	cpse	r24, r1
     8f4:	f6 cf       	rjmp	.-20     	; 0x8e2 <getCO2+0x8>
		vTaskDelay(50);
	}
	return local_CO2;

}
     8f6:	80 91 8b 1a 	lds	r24, 0x1A8B	; 0x801a8b <local_CO2>
     8fa:	90 91 8c 1a 	lds	r25, 0x1A8C	; 0x801a8c <local_CO2+0x1>
     8fe:	08 95       	ret

00000900 <setCO2>:

void setCO2(uint16_t CO2){
     900:	0f 93       	push	r16
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	xSemaphoreTake(Mutex_CO2,1000);
     908:	48 ee       	ldi	r20, 0xE8	; 232
     90a:	53 e0       	ldi	r21, 0x03	; 3
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	80 91 85 1a 	lds	r24, 0x1A85	; 0x801a85 <Mutex_CO2>
     914:	90 91 86 1a 	lds	r25, 0x1A86	; 0x801a86 <Mutex_CO2+0x1>
     918:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <xQueueSemaphoreTake>
	isTaken_CO2 = 1;
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	80 93 d5 08 	sts	0x08D5, r24	; 0x8008d5 <isTaken_CO2>
	local_CO2 = CO2;
     922:	d0 93 8c 1a 	sts	0x1A8C, r29	; 0x801a8c <local_CO2+0x1>
     926:	c0 93 8b 1a 	sts	0x1A8B, r28	; 0x801a8b <local_CO2>
	xSemaphoreGive(Mutex_CO2);
     92a:	00 e0       	ldi	r16, 0x00	; 0
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	a9 01       	movw	r20, r18
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	80 91 85 1a 	lds	r24, 0x1A85	; 0x801a85 <Mutex_CO2>
     93a:	90 91 86 1a 	lds	r25, 0x1A86	; 0x801a86 <Mutex_CO2+0x1>
     93e:	a4 d6       	rcall	.+3400   	; 0x1688 <xQueueGenericSend>
	isTaken_CO2 = 0;
     940:	10 92 d5 08 	sts	0x08D5, r1	; 0x8008d5 <isTaken_CO2>
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	0f 91       	pop	r16
     94a:	08 95       	ret

0000094c <getHumidity>:

float getHumidity(){
	while(isTaken_humidity){
     94c:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <isTaken_humidity>
     950:	88 23       	and	r24, r24
     952:	51 f0       	breq	.+20     	; 0x968 <getHumidity+0x1c>
		vTaskDelay(50);
     954:	62 e3       	ldi	r22, 0x32	; 50
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	0e 94 5d 14 	call	0x28ba	; 0x28ba <vTaskDelay>
	xSemaphoreGive(Mutex_CO2);
	isTaken_CO2 = 0;
}

float getHumidity(){
	while(isTaken_humidity){
     960:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <isTaken_humidity>
     964:	81 11       	cpse	r24, r1
     966:	f6 cf       	rjmp	.-20     	; 0x954 <getHumidity+0x8>
		vTaskDelay(50);
	}
	return local_humidity;
     968:	60 91 8d 1a 	lds	r22, 0x1A8D	; 0x801a8d <local_humidity>
     96c:	70 91 8e 1a 	lds	r23, 0x1A8E	; 0x801a8e <local_humidity+0x1>
     970:	80 91 8f 1a 	lds	r24, 0x1A8F	; 0x801a8f <local_humidity+0x2>
     974:	90 91 90 1a 	lds	r25, 0x1A90	; 0x801a90 <local_humidity+0x3>
}
     978:	08 95       	ret

0000097a <setHumidity>:
void setHumidity(float humidity_level){
     97a:	cf 92       	push	r12
     97c:	df 92       	push	r13
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	6b 01       	movw	r12, r22
     986:	7c 01       	movw	r14, r24
	xSemaphoreTake(Mutex_humidity,1000);
     988:	48 ee       	ldi	r20, 0xE8	; 232
     98a:	53 e0       	ldi	r21, 0x03	; 3
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <Mutex_humidity>
     994:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <Mutex_humidity+0x1>
     998:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <xQueueSemaphoreTake>
	isTaken_humidity = 1;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	80 93 d4 08 	sts	0x08D4, r24	; 0x8008d4 <isTaken_humidity>
	local_humidity = humidity_level;
     9a2:	c0 92 8d 1a 	sts	0x1A8D, r12	; 0x801a8d <local_humidity>
     9a6:	d0 92 8e 1a 	sts	0x1A8E, r13	; 0x801a8e <local_humidity+0x1>
     9aa:	e0 92 8f 1a 	sts	0x1A8F, r14	; 0x801a8f <local_humidity+0x2>
     9ae:	f0 92 90 1a 	sts	0x1A90, r15	; 0x801a90 <local_humidity+0x3>
	xSemaphoreGive(Mutex_humidity);
     9b2:	00 e0       	ldi	r16, 0x00	; 0
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	a9 01       	movw	r20, r18
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <Mutex_humidity>
     9c2:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <Mutex_humidity+0x1>
     9c6:	60 d6       	rcall	.+3264   	; 0x1688 <xQueueGenericSend>
	isTaken_humidity = 0;
     9c8:	10 92 d4 08 	sts	0x08D4, r1	; 0x8008d4 <isTaken_humidity>
}
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	df 90       	pop	r13
     9d4:	cf 90       	pop	r12
     9d6:	08 95       	ret

000009d8 <getTemperature>:

float getTemperature(){
	while(isTaken_temperature){
     9d8:	80 91 d3 08 	lds	r24, 0x08D3	; 0x8008d3 <isTaken_temperature>
     9dc:	88 23       	and	r24, r24
     9de:	51 f0       	breq	.+20     	; 0x9f4 <getTemperature+0x1c>
		vTaskDelay(50);
     9e0:	62 e3       	ldi	r22, 0x32	; 50
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 5d 14 	call	0x28ba	; 0x28ba <vTaskDelay>
	xSemaphoreGive(Mutex_humidity);
	isTaken_humidity = 0;
}

float getTemperature(){
	while(isTaken_temperature){
     9ec:	80 91 d3 08 	lds	r24, 0x08D3	; 0x8008d3 <isTaken_temperature>
     9f0:	81 11       	cpse	r24, r1
     9f2:	f6 cf       	rjmp	.-20     	; 0x9e0 <getTemperature+0x8>
		vTaskDelay(50);
	}
	return local_temperature;
     9f4:	60 91 87 1a 	lds	r22, 0x1A87	; 0x801a87 <local_temperature>
     9f8:	70 91 88 1a 	lds	r23, 0x1A88	; 0x801a88 <local_temperature+0x1>
     9fc:	80 91 89 1a 	lds	r24, 0x1A89	; 0x801a89 <local_temperature+0x2>
     a00:	90 91 8a 1a 	lds	r25, 0x1A8A	; 0x801a8a <local_temperature+0x3>
}
     a04:	08 95       	ret

00000a06 <setTemperature>:
void setTemperature(float temperature_level){
     a06:	cf 92       	push	r12
     a08:	df 92       	push	r13
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	6b 01       	movw	r12, r22
     a12:	7c 01       	movw	r14, r24
	xSemaphoreTake(Mutex_temperature,1000);
     a14:	48 ee       	ldi	r20, 0xE8	; 232
     a16:	53 e0       	ldi	r21, 0x03	; 3
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	80 91 83 1a 	lds	r24, 0x1A83	; 0x801a83 <Mutex_temperature>
     a20:	90 91 84 1a 	lds	r25, 0x1A84	; 0x801a84 <Mutex_temperature+0x1>
     a24:	be d7       	rcall	.+3964   	; 0x19a2 <xQueueSemaphoreTake>
	isTaken_temperature = 1;
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	80 93 d3 08 	sts	0x08D3, r24	; 0x8008d3 <isTaken_temperature>
	local_temperature = temperature_level;
     a2c:	c0 92 87 1a 	sts	0x1A87, r12	; 0x801a87 <local_temperature>
     a30:	d0 92 88 1a 	sts	0x1A88, r13	; 0x801a88 <local_temperature+0x1>
     a34:	e0 92 89 1a 	sts	0x1A89, r14	; 0x801a89 <local_temperature+0x2>
     a38:	f0 92 8a 1a 	sts	0x1A8A, r15	; 0x801a8a <local_temperature+0x3>
	xSemaphoreGive(Mutex_temperature);
     a3c:	00 e0       	ldi	r16, 0x00	; 0
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	a9 01       	movw	r20, r18
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	80 91 83 1a 	lds	r24, 0x1A83	; 0x801a83 <Mutex_temperature>
     a4c:	90 91 84 1a 	lds	r25, 0x1A84	; 0x801a84 <Mutex_temperature+0x1>
     a50:	1b d6       	rcall	.+3126   	; 0x1688 <xQueueGenericSend>
	isTaken_temperature = 0;
     a52:	10 92 d3 08 	sts	0x08D3, r1	; 0x8008d3 <isTaken_temperature>
}
     a56:	0f 91       	pop	r16
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	df 90       	pop	r13
     a5e:	cf 90       	pop	r12
     a60:	08 95       	ret

00000a62 <init_resources>:



void init_resources(){
	
	 local_CO2 = (uint16_t)pvPortMalloc(sizeof(uint16_t));
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	d4 d1       	rcall	.+936    	; 0xe10 <pvPortMalloc>
     a68:	90 93 8c 1a 	sts	0x1A8C, r25	; 0x801a8c <local_CO2+0x1>
     a6c:	80 93 8b 1a 	sts	0x1A8B, r24	; 0x801a8b <local_CO2>
     a70:	08 95       	ret

00000a72 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     a72:	e7 e0       	ldi	r30, 0x07	; 7
     a74:	f1 e0       	ldi	r31, 0x01	; 1
     a76:	80 81       	ld	r24, Z
     a78:	8f 60       	ori	r24, 0x0F	; 15
     a7a:	80 83       	st	Z, r24
     a7c:	08 95       	ret

00000a7e <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     a7e:	e8 e0       	ldi	r30, 0x08	; 8
     a80:	f1 e0       	ldi	r31, 0x01	; 1
     a82:	90 81       	ld	r25, Z
     a84:	90 7f       	andi	r25, 0xF0	; 240
     a86:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     a88:	90 81       	ld	r25, Z
     a8a:	8f 70       	andi	r24, 0x0F	; 15
     a8c:	98 2b       	or	r25, r24
     a8e:	90 83       	st	Z, r25
     a90:	08 95       	ret

00000a92 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     a92:	e8 e0       	ldi	r30, 0x08	; 8
     a94:	f1 e0       	ldi	r31, 0x01	; 1
     a96:	80 81       	ld	r24, Z
     a98:	80 7f       	andi	r24, 0xF0	; 240
     a9a:	80 83       	st	Z, r24
     a9c:	08 95       	ret

00000a9e <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	80 e1       	ldi	r24, 0x10	; 16
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	b4 d1       	rcall	.+872    	; 0xe10 <pvPortMalloc>
     aa8:	ec 01       	movw	r28, r24
     aaa:	00 97       	sbiw	r24, 0x00	; 0
     aac:	39 f0       	breq	.+14     	; 0xabc <xEventGroupCreate+0x1e>
     aae:	fc 01       	movw	r30, r24
     ab0:	11 92       	st	Z+, r1
     ab2:	11 92       	st	Z+, r1
     ab4:	11 92       	st	Z+, r1
     ab6:	11 92       	st	Z+, r1
     ab8:	cf 01       	movw	r24, r30
     aba:	94 d2       	rcall	.+1320   	; 0xfe4 <vListInitialise>
     abc:	ce 01       	movw	r24, r28
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	08 95       	ret

00000ac4 <xEventGroupWaitBits>:
     ac4:	2f 92       	push	r2
     ac6:	3f 92       	push	r3
     ac8:	4f 92       	push	r4
     aca:	5f 92       	push	r5
     acc:	6f 92       	push	r6
     ace:	7f 92       	push	r7
     ad0:	8f 92       	push	r8
     ad2:	9f 92       	push	r9
     ad4:	af 92       	push	r10
     ad6:	bf 92       	push	r11
     ad8:	cf 92       	push	r12
     ada:	df 92       	push	r13
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	ec 01       	movw	r28, r24
     aea:	4a 01       	movw	r8, r20
     aec:	5b 01       	movw	r10, r22
     aee:	62 2e       	mov	r6, r18
     af0:	70 2e       	mov	r7, r16
     af2:	0e 94 9a 12 	call	0x2534	; 0x2534 <vTaskSuspendAll>
     af6:	28 80       	ld	r2, Y
     af8:	39 80       	ldd	r3, Y+1	; 0x01
     afa:	4a 80       	ldd	r4, Y+2	; 0x02
     afc:	5b 80       	ldd	r5, Y+3	; 0x03
     afe:	01 11       	cpse	r16, r1
     b00:	0d c0       	rjmp	.+26     	; 0xb1c <xEventGroupWaitBits+0x58>
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	b2 01       	movw	r22, r4
     b06:	a1 01       	movw	r20, r2
     b08:	48 21       	and	r20, r8
     b0a:	59 21       	and	r21, r9
     b0c:	6a 21       	and	r22, r10
     b0e:	7b 21       	and	r23, r11
     b10:	45 2b       	or	r20, r21
     b12:	46 2b       	or	r20, r22
     b14:	47 2b       	or	r20, r23
     b16:	79 f4       	brne	.+30     	; 0xb36 <xEventGroupWaitBits+0x72>
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	0d c0       	rjmp	.+26     	; 0xb36 <xEventGroupWaitBits+0x72>
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	b2 01       	movw	r22, r4
     b20:	a1 01       	movw	r20, r2
     b22:	48 21       	and	r20, r8
     b24:	59 21       	and	r21, r9
     b26:	6a 21       	and	r22, r10
     b28:	7b 21       	and	r23, r11
     b2a:	48 15       	cp	r20, r8
     b2c:	59 05       	cpc	r21, r9
     b2e:	6a 05       	cpc	r22, r10
     b30:	7b 05       	cpc	r23, r11
     b32:	09 f0       	breq	.+2      	; 0xb36 <xEventGroupWaitBits+0x72>
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	88 23       	and	r24, r24
     b38:	81 f0       	breq	.+32     	; 0xb5a <xEventGroupWaitBits+0x96>
     b3a:	66 20       	and	r6, r6
     b3c:	09 f4       	brne	.+2      	; 0xb40 <xEventGroupWaitBits+0x7c>
     b3e:	6b c0       	rjmp	.+214    	; 0xc16 <xEventGroupWaitBits+0x152>
     b40:	80 94       	com	r8
     b42:	90 94       	com	r9
     b44:	a0 94       	com	r10
     b46:	b0 94       	com	r11
     b48:	82 20       	and	r8, r2
     b4a:	93 20       	and	r9, r3
     b4c:	a4 20       	and	r10, r4
     b4e:	b5 20       	and	r11, r5
     b50:	88 82       	st	Y, r8
     b52:	99 82       	std	Y+1, r9	; 0x01
     b54:	aa 82       	std	Y+2, r10	; 0x02
     b56:	bb 82       	std	Y+3, r11	; 0x03
     b58:	5e c0       	rjmp	.+188    	; 0xc16 <xEventGroupWaitBits+0x152>
     b5a:	c1 14       	cp	r12, r1
     b5c:	d1 04       	cpc	r13, r1
     b5e:	e1 04       	cpc	r14, r1
     b60:	f1 04       	cpc	r15, r1
     b62:	09 f4       	brne	.+2      	; 0xb66 <xEventGroupWaitBits+0xa2>
     b64:	58 c0       	rjmp	.+176    	; 0xc16 <xEventGroupWaitBits+0x152>
     b66:	66 20       	and	r6, r6
     b68:	29 f0       	breq	.+10     	; 0xb74 <xEventGroupWaitBits+0xb0>
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	71 e0       	ldi	r23, 0x01	; 1
     b72:	03 c0       	rjmp	.+6      	; 0xb7a <xEventGroupWaitBits+0xb6>
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	ba 01       	movw	r22, r20
     b7a:	71 10       	cpse	r7, r1
     b7c:	74 60       	ori	r23, 0x04	; 4
     b7e:	48 29       	or	r20, r8
     b80:	59 29       	or	r21, r9
     b82:	6a 29       	or	r22, r10
     b84:	7b 29       	or	r23, r11
     b86:	97 01       	movw	r18, r14
     b88:	86 01       	movw	r16, r12
     b8a:	ce 01       	movw	r24, r28
     b8c:	04 96       	adiw	r24, 0x04	; 4
     b8e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <vTaskPlaceOnUnorderedEventList>
     b92:	0e 94 83 13 	call	0x2706	; 0x2706 <xTaskResumeAll>
     b96:	81 11       	cpse	r24, r1
     b98:	01 c0       	rjmp	.+2      	; 0xb9c <xEventGroupWaitBits+0xd8>
     b9a:	6c d3       	rcall	.+1752   	; 0x1274 <vPortYield>
     b9c:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <uxTaskResetEventItemValue>
     ba0:	91 fd       	sbrc	r25, 1
     ba2:	35 c0       	rjmp	.+106    	; 0xc0e <xEventGroupWaitBits+0x14a>
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	f8 94       	cli
     ba8:	0f 92       	push	r0
     baa:	68 81       	ld	r22, Y
     bac:	79 81       	ldd	r23, Y+1	; 0x01
     bae:	8a 81       	ldd	r24, Y+2	; 0x02
     bb0:	9b 81       	ldd	r25, Y+3	; 0x03
     bb2:	71 10       	cpse	r7, r1
     bb4:	0d c0       	rjmp	.+26     	; 0xbd0 <xEventGroupWaitBits+0x10c>
     bb6:	21 e0       	ldi	r18, 0x01	; 1
     bb8:	75 01       	movw	r14, r10
     bba:	64 01       	movw	r12, r8
     bbc:	c6 22       	and	r12, r22
     bbe:	d7 22       	and	r13, r23
     bc0:	e8 22       	and	r14, r24
     bc2:	f9 22       	and	r15, r25
     bc4:	cd 28       	or	r12, r13
     bc6:	ce 28       	or	r12, r14
     bc8:	cf 28       	or	r12, r15
     bca:	79 f4       	brne	.+30     	; 0xbea <xEventGroupWaitBits+0x126>
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	0d c0       	rjmp	.+26     	; 0xbea <xEventGroupWaitBits+0x126>
     bd0:	21 e0       	ldi	r18, 0x01	; 1
     bd2:	75 01       	movw	r14, r10
     bd4:	64 01       	movw	r12, r8
     bd6:	c6 22       	and	r12, r22
     bd8:	d7 22       	and	r13, r23
     bda:	e8 22       	and	r14, r24
     bdc:	f9 22       	and	r15, r25
     bde:	c8 14       	cp	r12, r8
     be0:	d9 04       	cpc	r13, r9
     be2:	ea 04       	cpc	r14, r10
     be4:	fb 04       	cpc	r15, r11
     be6:	09 f0       	breq	.+2      	; 0xbea <xEventGroupWaitBits+0x126>
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	22 23       	and	r18, r18
     bec:	71 f0       	breq	.+28     	; 0xc0a <xEventGroupWaitBits+0x146>
     bee:	66 20       	and	r6, r6
     bf0:	61 f0       	breq	.+24     	; 0xc0a <xEventGroupWaitBits+0x146>
     bf2:	80 94       	com	r8
     bf4:	90 94       	com	r9
     bf6:	a0 94       	com	r10
     bf8:	b0 94       	com	r11
     bfa:	86 22       	and	r8, r22
     bfc:	97 22       	and	r9, r23
     bfe:	a8 22       	and	r10, r24
     c00:	b9 22       	and	r11, r25
     c02:	88 82       	st	Y, r8
     c04:	99 82       	std	Y+1, r9	; 0x01
     c06:	aa 82       	std	Y+2, r10	; 0x02
     c08:	bb 82       	std	Y+3, r11	; 0x03
     c0a:	0f 90       	pop	r0
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	1b 01       	movw	r2, r22
     c10:	2c 01       	movw	r4, r24
     c12:	55 24       	eor	r5, r5
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <xEventGroupWaitBits+0x156>
     c16:	0e 94 83 13 	call	0x2706	; 0x2706 <xTaskResumeAll>
     c1a:	c2 01       	movw	r24, r4
     c1c:	b1 01       	movw	r22, r2
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	df 90       	pop	r13
     c2c:	cf 90       	pop	r12
     c2e:	bf 90       	pop	r11
     c30:	af 90       	pop	r10
     c32:	9f 90       	pop	r9
     c34:	8f 90       	pop	r8
     c36:	7f 90       	pop	r7
     c38:	6f 90       	pop	r6
     c3a:	5f 90       	pop	r5
     c3c:	4f 90       	pop	r4
     c3e:	3f 90       	pop	r3
     c40:	2f 90       	pop	r2
     c42:	08 95       	ret

00000c44 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     c44:	4f 92       	push	r4
     c46:	5f 92       	push	r5
     c48:	6f 92       	push	r6
     c4a:	7f 92       	push	r7
     c4c:	8f 92       	push	r8
     c4e:	9f 92       	push	r9
     c50:	af 92       	push	r10
     c52:	bf 92       	push	r11
     c54:	cf 92       	push	r12
     c56:	df 92       	push	r13
     c58:	ef 92       	push	r14
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	ec 01       	movw	r28, r24
     c66:	6a 01       	movw	r12, r20
     c68:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c6a:	8c 01       	movw	r16, r24
     c6c:	09 5f       	subi	r16, 0xF9	; 249
     c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     c70:	0e 94 9a 12 	call	0x2534	; 0x2534 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     c74:	eb 85       	ldd	r30, Y+11	; 0x0b
     c76:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     c78:	88 81       	ld	r24, Y
     c7a:	99 81       	ldd	r25, Y+1	; 0x01
     c7c:	aa 81       	ldd	r26, Y+2	; 0x02
     c7e:	bb 81       	ldd	r27, Y+3	; 0x03
     c80:	c8 2a       	or	r12, r24
     c82:	d9 2a       	or	r13, r25
     c84:	ea 2a       	or	r14, r26
     c86:	fb 2a       	or	r15, r27
     c88:	c8 82       	st	Y, r12
     c8a:	d9 82       	std	Y+1, r13	; 0x01
     c8c:	ea 82       	std	Y+2, r14	; 0x02
     c8e:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     c90:	0e 17       	cp	r16, r30
     c92:	1f 07       	cpc	r17, r31
     c94:	09 f4       	brne	.+2      	; 0xc98 <xEventGroupSetBits+0x54>
     c96:	45 c0       	rjmp	.+138    	; 0xd22 <xEventGroupSetBits+0xde>
     c98:	c1 2c       	mov	r12, r1
     c9a:	d1 2c       	mov	r13, r1
     c9c:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     c9e:	99 24       	eor	r9, r9
     ca0:	93 94       	inc	r9
     ca2:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
     ca4:	a4 80       	ldd	r10, Z+4	; 0x04
     ca6:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     ca8:	80 81       	ld	r24, Z
     caa:	91 81       	ldd	r25, Z+1	; 0x01
     cac:	a2 81       	ldd	r26, Z+2	; 0x02
     cae:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     cb0:	ac 01       	movw	r20, r24
     cb2:	bd 01       	movw	r22, r26
     cb4:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     cb6:	b2 fd       	sbrc	r27, 2
     cb8:	0f c0       	rjmp	.+30     	; 0xcd8 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     cba:	48 80       	ld	r4, Y
     cbc:	59 80       	ldd	r5, Y+1	; 0x01
     cbe:	6a 80       	ldd	r6, Y+2	; 0x02
     cc0:	7b 80       	ldd	r7, Y+3	; 0x03
     cc2:	44 22       	and	r4, r20
     cc4:	55 22       	and	r5, r21
     cc6:	66 22       	and	r6, r22
     cc8:	77 22       	and	r7, r23
     cca:	29 2d       	mov	r18, r9
     ccc:	45 28       	or	r4, r5
     cce:	46 28       	or	r4, r6
     cd0:	47 28       	or	r4, r7
     cd2:	89 f4       	brne	.+34     	; 0xcf6 <xEventGroupSetBits+0xb2>
     cd4:	28 2d       	mov	r18, r8
     cd6:	0f c0       	rjmp	.+30     	; 0xcf6 <xEventGroupSetBits+0xb2>
     cd8:	48 80       	ld	r4, Y
     cda:	59 80       	ldd	r5, Y+1	; 0x01
     cdc:	6a 80       	ldd	r6, Y+2	; 0x02
     cde:	7b 80       	ldd	r7, Y+3	; 0x03
     ce0:	44 22       	and	r4, r20
     ce2:	55 22       	and	r5, r21
     ce4:	66 22       	and	r6, r22
     ce6:	77 22       	and	r7, r23
     ce8:	29 2d       	mov	r18, r9
     cea:	44 16       	cp	r4, r20
     cec:	55 06       	cpc	r5, r21
     cee:	66 06       	cpc	r6, r22
     cf0:	77 06       	cpc	r7, r23
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <xEventGroupSetBits+0xb2>
     cf4:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     cf6:	22 23       	and	r18, r18
     cf8:	71 f0       	breq	.+28     	; 0xd16 <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     cfa:	b0 ff       	sbrs	r27, 0
     cfc:	04 c0       	rjmp	.+8      	; 0xd06 <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     cfe:	c4 2a       	or	r12, r20
     d00:	d5 2a       	or	r13, r21
     d02:	e6 2a       	or	r14, r22
     d04:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     d06:	48 81       	ld	r20, Y
     d08:	59 81       	ldd	r21, Y+1	; 0x01
     d0a:	6a 81       	ldd	r22, Y+2	; 0x02
     d0c:	7b 81       	ldd	r23, Y+3	; 0x03
     d0e:	72 60       	ori	r23, 0x02	; 2
     d10:	cf 01       	movw	r24, r30
     d12:	0e 94 92 15 	call	0x2b24	; 0x2b24 <vTaskRemoveFromUnorderedEventList>
     d16:	ea 2d       	mov	r30, r10
     d18:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     d1a:	0e 17       	cp	r16, r30
     d1c:	1f 07       	cpc	r17, r31
     d1e:	11 f6       	brne	.-124    	; 0xca4 <xEventGroupSetBits+0x60>
     d20:	03 c0       	rjmp	.+6      	; 0xd28 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     d22:	c1 2c       	mov	r12, r1
     d24:	d1 2c       	mov	r13, r1
     d26:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     d28:	c0 94       	com	r12
     d2a:	d0 94       	com	r13
     d2c:	e0 94       	com	r14
     d2e:	f0 94       	com	r15
     d30:	88 81       	ld	r24, Y
     d32:	99 81       	ldd	r25, Y+1	; 0x01
     d34:	aa 81       	ldd	r26, Y+2	; 0x02
     d36:	bb 81       	ldd	r27, Y+3	; 0x03
     d38:	c8 22       	and	r12, r24
     d3a:	d9 22       	and	r13, r25
     d3c:	ea 22       	and	r14, r26
     d3e:	fb 22       	and	r15, r27
     d40:	c8 82       	st	Y, r12
     d42:	d9 82       	std	Y+1, r13	; 0x01
     d44:	ea 82       	std	Y+2, r14	; 0x02
     d46:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     d48:	0e 94 83 13 	call	0x2706	; 0x2706 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     d4c:	68 81       	ld	r22, Y
     d4e:	79 81       	ldd	r23, Y+1	; 0x01
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	9b 81       	ldd	r25, Y+3	; 0x03
}
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	ff 90       	pop	r15
     d5e:	ef 90       	pop	r14
     d60:	df 90       	pop	r13
     d62:	cf 90       	pop	r12
     d64:	bf 90       	pop	r11
     d66:	af 90       	pop	r10
     d68:	9f 90       	pop	r9
     d6a:	8f 90       	pop	r8
     d6c:	7f 90       	pop	r7
     d6e:	6f 90       	pop	r6
     d70:	5f 90       	pop	r5
     d72:	4f 90       	pop	r4
     d74:	08 95       	ret

00000d76 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     d7c:	ee ed       	ldi	r30, 0xDE	; 222
     d7e:	f8 e0       	ldi	r31, 0x08	; 8
     d80:	01 c0       	rjmp	.+2      	; 0xd84 <prvInsertBlockIntoFreeList+0xe>
     d82:	f9 01       	movw	r30, r18
     d84:	20 81       	ld	r18, Z
     d86:	31 81       	ldd	r19, Z+1	; 0x01
     d88:	2a 17       	cp	r18, r26
     d8a:	3b 07       	cpc	r19, r27
     d8c:	d0 f3       	brcs	.-12     	; 0xd82 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	93 81       	ldd	r25, Z+3	; 0x03
     d92:	af 01       	movw	r20, r30
     d94:	48 0f       	add	r20, r24
     d96:	59 1f       	adc	r21, r25
     d98:	a4 17       	cp	r26, r20
     d9a:	b5 07       	cpc	r27, r21
     d9c:	49 f4       	brne	.+18     	; 0xdb0 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     d9e:	12 96       	adiw	r26, 0x02	; 2
     da0:	4d 91       	ld	r20, X+
     da2:	5c 91       	ld	r21, X
     da4:	13 97       	sbiw	r26, 0x03	; 3
     da6:	84 0f       	add	r24, r20
     da8:	95 1f       	adc	r25, r21
     daa:	93 83       	std	Z+3, r25	; 0x03
     dac:	82 83       	std	Z+2, r24	; 0x02
     dae:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     db0:	12 96       	adiw	r26, 0x02	; 2
     db2:	8d 91       	ld	r24, X+
     db4:	9c 91       	ld	r25, X
     db6:	13 97       	sbiw	r26, 0x03	; 3
     db8:	ed 01       	movw	r28, r26
     dba:	c8 0f       	add	r28, r24
     dbc:	d9 1f       	adc	r29, r25
     dbe:	2c 17       	cp	r18, r28
     dc0:	3d 07       	cpc	r19, r29
     dc2:	d9 f4       	brne	.+54     	; 0xdfa <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     dc4:	20 91 dc 08 	lds	r18, 0x08DC	; 0x8008dc <pxEnd>
     dc8:	30 91 dd 08 	lds	r19, 0x08DD	; 0x8008dd <pxEnd+0x1>
     dcc:	c2 17       	cp	r28, r18
     dce:	d3 07       	cpc	r29, r19
     dd0:	81 f0       	breq	.+32     	; 0xdf2 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     dd2:	2a 81       	ldd	r18, Y+2	; 0x02
     dd4:	3b 81       	ldd	r19, Y+3	; 0x03
     dd6:	82 0f       	add	r24, r18
     dd8:	93 1f       	adc	r25, r19
     dda:	13 96       	adiw	r26, 0x03	; 3
     ddc:	9c 93       	st	X, r25
     dde:	8e 93       	st	-X, r24
     de0:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     de2:	c0 81       	ld	r28, Z
     de4:	d1 81       	ldd	r29, Z+1	; 0x01
     de6:	88 81       	ld	r24, Y
     de8:	99 81       	ldd	r25, Y+1	; 0x01
     dea:	11 96       	adiw	r26, 0x01	; 1
     dec:	9c 93       	st	X, r25
     dee:	8e 93       	st	-X, r24
     df0:	07 c0       	rjmp	.+14     	; 0xe00 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     df2:	11 96       	adiw	r26, 0x01	; 1
     df4:	dc 93       	st	X, r29
     df6:	ce 93       	st	-X, r28
     df8:	03 c0       	rjmp	.+6      	; 0xe00 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     dfa:	11 96       	adiw	r26, 0x01	; 1
     dfc:	3c 93       	st	X, r19
     dfe:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     e00:	ae 17       	cp	r26, r30
     e02:	bf 07       	cpc	r27, r31
     e04:	11 f0       	breq	.+4      	; 0xe0a <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     e06:	b1 83       	std	Z+1, r27	; 0x01
     e08:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	08 95       	ret

00000e10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
     e22:	0e 94 9a 12 	call	0x2534	; 0x2534 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     e26:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <pxEnd>
     e2a:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <pxEnd+0x1>
     e2e:	89 2b       	or	r24, r25
     e30:	41 f5       	brne	.+80     	; 0xe82 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     e32:	ee ed       	ldi	r30, 0xDE	; 222
     e34:	f8 e0       	ldi	r31, 0x08	; 8
     e36:	a2 ee       	ldi	r26, 0xE2	; 226
     e38:	b8 e0       	ldi	r27, 0x08	; 8
     e3a:	b1 83       	std	Z+1, r27	; 0x01
     e3c:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
     e3e:	13 82       	std	Z+3, r1	; 0x03
     e40:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     e42:	ee e7       	ldi	r30, 0x7E	; 126
     e44:	f8 e1       	ldi	r31, 0x18	; 24
     e46:	f0 93 dd 08 	sts	0x08DD, r31	; 0x8008dd <pxEnd+0x1>
     e4a:	e0 93 dc 08 	sts	0x08DC, r30	; 0x8008dc <pxEnd>
	pxEnd->xBlockSize = 0;
     e4e:	13 82       	std	Z+3, r1	; 0x03
     e50:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     e52:	11 82       	std	Z+1, r1	; 0x01
     e54:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     e56:	8c e9       	ldi	r24, 0x9C	; 156
     e58:	9f e0       	ldi	r25, 0x0F	; 15
     e5a:	13 96       	adiw	r26, 0x03	; 3
     e5c:	9c 93       	st	X, r25
     e5e:	8e 93       	st	-X, r24
     e60:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     e62:	ed 93       	st	X+, r30
     e64:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     e66:	90 93 d9 08 	sts	0x08D9, r25	; 0x8008d9 <xMinimumEverFreeBytesRemaining+0x1>
     e6a:	80 93 d8 08 	sts	0x08D8, r24	; 0x8008d8 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     e6e:	90 93 db 08 	sts	0x08DB, r25	; 0x8008db <xFreeBytesRemaining+0x1>
     e72:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e8       	ldi	r25, 0x80	; 128
     e7a:	90 93 d7 08 	sts	0x08D7, r25	; 0x8008d7 <xBlockAllocatedBit+0x1>
     e7e:	80 93 d6 08 	sts	0x08D6, r24	; 0x8008d6 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     e82:	e0 90 d6 08 	lds	r14, 0x08D6	; 0x8008d6 <xBlockAllocatedBit>
     e86:	f0 90 d7 08 	lds	r15, 0x08D7	; 0x8008d7 <xBlockAllocatedBit+0x1>
     e8a:	c7 01       	movw	r24, r14
     e8c:	8c 23       	and	r24, r28
     e8e:	9d 23       	and	r25, r29
     e90:	89 2b       	or	r24, r25
     e92:	09 f0       	breq	.+2      	; 0xe96 <pvPortMalloc+0x86>
     e94:	66 c0       	rjmp	.+204    	; 0xf62 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     e96:	20 97       	sbiw	r28, 0x00	; 0
     e98:	09 f4       	brne	.+2      	; 0xe9c <pvPortMalloc+0x8c>
     e9a:	66 c0       	rjmp	.+204    	; 0xf68 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
     e9c:	ae 01       	movw	r20, r28
     e9e:	4c 5f       	subi	r20, 0xFC	; 252
     ea0:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     ea2:	09 f4       	brne	.+2      	; 0xea6 <pvPortMalloc+0x96>
     ea4:	5e c0       	rjmp	.+188    	; 0xf62 <pvPortMalloc+0x152>
     ea6:	00 91 da 08 	lds	r16, 0x08DA	; 0x8008da <xFreeBytesRemaining>
     eaa:	10 91 db 08 	lds	r17, 0x08DB	; 0x8008db <xFreeBytesRemaining+0x1>
     eae:	04 17       	cp	r16, r20
     eb0:	15 07       	cpc	r17, r21
     eb2:	08 f4       	brcc	.+2      	; 0xeb6 <pvPortMalloc+0xa6>
     eb4:	56 c0       	rjmp	.+172    	; 0xf62 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
     eb6:	c0 91 de 08 	lds	r28, 0x08DE	; 0x8008de <xStart>
     eba:	d0 91 df 08 	lds	r29, 0x08DF	; 0x8008df <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     ebe:	ee ed       	ldi	r30, 0xDE	; 222
     ec0:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <pvPortMalloc+0xb8>
     ec4:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
     ec6:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     ec8:	2a 81       	ldd	r18, Y+2	; 0x02
     eca:	3b 81       	ldd	r19, Y+3	; 0x03
     ecc:	24 17       	cp	r18, r20
     ece:	35 07       	cpc	r19, r21
     ed0:	28 f4       	brcc	.+10     	; 0xedc <pvPortMalloc+0xcc>
     ed2:	28 81       	ld	r18, Y
     ed4:	39 81       	ldd	r19, Y+1	; 0x01
     ed6:	21 15       	cp	r18, r1
     ed8:	31 05       	cpc	r19, r1
     eda:	a1 f7       	brne	.-24     	; 0xec4 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     edc:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <pxEnd>
     ee0:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <pxEnd+0x1>
     ee4:	c8 17       	cp	r28, r24
     ee6:	d9 07       	cpc	r29, r25
     ee8:	e1 f1       	breq	.+120    	; 0xf62 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     eea:	c0 80       	ld	r12, Z
     eec:	d1 80       	ldd	r13, Z+1	; 0x01
     eee:	84 e0       	ldi	r24, 0x04	; 4
     ef0:	c8 0e       	add	r12, r24
     ef2:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     ef4:	88 81       	ld	r24, Y
     ef6:	99 81       	ldd	r25, Y+1	; 0x01
     ef8:	91 83       	std	Z+1, r25	; 0x01
     efa:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     efc:	2a 81       	ldd	r18, Y+2	; 0x02
     efe:	3b 81       	ldd	r19, Y+3	; 0x03
     f00:	24 1b       	sub	r18, r20
     f02:	35 0b       	sbc	r19, r21
     f04:	29 30       	cpi	r18, 0x09	; 9
     f06:	31 05       	cpc	r19, r1
     f08:	48 f0       	brcs	.+18     	; 0xf1c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     f0a:	ce 01       	movw	r24, r28
     f0c:	84 0f       	add	r24, r20
     f0e:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     f10:	fc 01       	movw	r30, r24
     f12:	33 83       	std	Z+3, r19	; 0x03
     f14:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
     f16:	5b 83       	std	Y+3, r21	; 0x03
     f18:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     f1a:	2d df       	rcall	.-422    	; 0xd76 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	9b 81       	ldd	r25, Y+3	; 0x03
     f20:	08 1b       	sub	r16, r24
     f22:	19 0b       	sbc	r17, r25
     f24:	10 93 db 08 	sts	0x08DB, r17	; 0x8008db <xFreeBytesRemaining+0x1>
     f28:	00 93 da 08 	sts	0x08DA, r16	; 0x8008da <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     f2c:	20 91 d8 08 	lds	r18, 0x08D8	; 0x8008d8 <xMinimumEverFreeBytesRemaining>
     f30:	30 91 d9 08 	lds	r19, 0x08D9	; 0x8008d9 <xMinimumEverFreeBytesRemaining+0x1>
     f34:	02 17       	cp	r16, r18
     f36:	13 07       	cpc	r17, r19
     f38:	20 f4       	brcc	.+8      	; 0xf42 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     f3a:	10 93 d9 08 	sts	0x08D9, r17	; 0x8008d9 <xMinimumEverFreeBytesRemaining+0x1>
     f3e:	00 93 d8 08 	sts	0x08D8, r16	; 0x8008d8 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     f42:	e8 2a       	or	r14, r24
     f44:	f9 2a       	or	r15, r25
     f46:	fb 82       	std	Y+3, r15	; 0x03
     f48:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
     f4a:	19 82       	std	Y+1, r1	; 0x01
     f4c:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     f4e:	0e 94 83 13 	call	0x2706	; 0x2706 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     f52:	c1 14       	cp	r12, r1
     f54:	d1 04       	cpc	r13, r1
     f56:	59 f4       	brne	.+22     	; 0xf6e <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     f58:	0e 94 b4 1a 	call	0x3568	; 0x3568 <vApplicationMallocFailedHook>
     f5c:	c1 2c       	mov	r12, r1
     f5e:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
     f60:	06 c0       	rjmp	.+12     	; 0xf6e <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     f62:	0e 94 83 13 	call	0x2706	; 0x2706 <xTaskResumeAll>
     f66:	f8 cf       	rjmp	.-16     	; 0xf58 <pvPortMalloc+0x148>
     f68:	0e 94 83 13 	call	0x2706	; 0x2706 <xTaskResumeAll>
     f6c:	f5 cf       	rjmp	.-22     	; 0xf58 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
     f6e:	c6 01       	movw	r24, r12
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	1f 91       	pop	r17
     f76:	0f 91       	pop	r16
     f78:	ff 90       	pop	r15
     f7a:	ef 90       	pop	r14
     f7c:	df 90       	pop	r13
     f7e:	cf 90       	pop	r12
     f80:	08 95       	ret

00000f82 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	51 f1       	breq	.+84     	; 0xfde <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     f8a:	fc 01       	movw	r30, r24
     f8c:	34 97       	sbiw	r30, 0x04	; 4
     f8e:	22 81       	ldd	r18, Z+2	; 0x02
     f90:	33 81       	ldd	r19, Z+3	; 0x03
     f92:	40 91 d6 08 	lds	r20, 0x08D6	; 0x8008d6 <xBlockAllocatedBit>
     f96:	50 91 d7 08 	lds	r21, 0x08D7	; 0x8008d7 <xBlockAllocatedBit+0x1>
     f9a:	b9 01       	movw	r22, r18
     f9c:	64 23       	and	r22, r20
     f9e:	75 23       	and	r23, r21
     fa0:	67 2b       	or	r22, r23
     fa2:	e9 f0       	breq	.+58     	; 0xfde <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
     fa4:	60 81       	ld	r22, Z
     fa6:	71 81       	ldd	r23, Z+1	; 0x01
     fa8:	67 2b       	or	r22, r23
     faa:	c9 f4       	brne	.+50     	; 0xfde <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
     fac:	ef 01       	movw	r28, r30
     fae:	40 95       	com	r20
     fb0:	50 95       	com	r21
     fb2:	24 23       	and	r18, r20
     fb4:	35 23       	and	r19, r21
     fb6:	33 83       	std	Z+3, r19	; 0x03
     fb8:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
     fba:	0e 94 9a 12 	call	0x2534	; 0x2534 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
     fbe:	20 91 da 08 	lds	r18, 0x08DA	; 0x8008da <xFreeBytesRemaining>
     fc2:	30 91 db 08 	lds	r19, 0x08DB	; 0x8008db <xFreeBytesRemaining+0x1>
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	9b 81       	ldd	r25, Y+3	; 0x03
     fca:	82 0f       	add	r24, r18
     fcc:	93 1f       	adc	r25, r19
     fce:	90 93 db 08 	sts	0x08DB, r25	; 0x8008db <xFreeBytesRemaining+0x1>
     fd2:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     fd6:	ce 01       	movw	r24, r28
     fd8:	ce de       	rcall	.-612    	; 0xd76 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
     fda:	0e 94 83 13 	call	0x2706	; 0x2706 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     fe4:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fe6:	03 96       	adiw	r24, 0x03	; 3
     fe8:	92 83       	std	Z+2, r25	; 0x02
     fea:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     fec:	4f ef       	ldi	r20, 0xFF	; 255
     fee:	5f ef       	ldi	r21, 0xFF	; 255
     ff0:	ba 01       	movw	r22, r20
     ff2:	43 83       	std	Z+3, r20	; 0x03
     ff4:	54 83       	std	Z+4, r21	; 0x04
     ff6:	65 83       	std	Z+5, r22	; 0x05
     ff8:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ffa:	90 87       	std	Z+8, r25	; 0x08
     ffc:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ffe:	92 87       	std	Z+10, r25	; 0x0a
    1000:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1002:	10 82       	st	Z, r1
    1004:	08 95       	ret

00001006 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1006:	fc 01       	movw	r30, r24
    1008:	13 86       	std	Z+11, r1	; 0x0b
    100a:	12 86       	std	Z+10, r1	; 0x0a
    100c:	08 95       	ret

0000100e <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	9c 01       	movw	r18, r24
    1014:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1016:	dc 01       	movw	r26, r24
    1018:	11 96       	adiw	r26, 0x01	; 1
    101a:	cd 91       	ld	r28, X+
    101c:	dc 91       	ld	r29, X
    101e:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1020:	d5 83       	std	Z+5, r29	; 0x05
    1022:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1024:	8e 81       	ldd	r24, Y+6	; 0x06
    1026:	9f 81       	ldd	r25, Y+7	; 0x07
    1028:	97 83       	std	Z+7, r25	; 0x07
    102a:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    102c:	8e 81       	ldd	r24, Y+6	; 0x06
    102e:	9f 81       	ldd	r25, Y+7	; 0x07
    1030:	dc 01       	movw	r26, r24
    1032:	15 96       	adiw	r26, 0x05	; 5
    1034:	7c 93       	st	X, r23
    1036:	6e 93       	st	-X, r22
    1038:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    103a:	7f 83       	std	Y+7, r23	; 0x07
    103c:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    103e:	33 87       	std	Z+11, r19	; 0x0b
    1040:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1042:	f9 01       	movw	r30, r18
    1044:	80 81       	ld	r24, Z
    1046:	8f 5f       	subi	r24, 0xFF	; 255
    1048:	80 83       	st	Z, r24
}
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	08 95       	ret

00001050 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    105a:	08 81       	ld	r16, Y
    105c:	19 81       	ldd	r17, Y+1	; 0x01
    105e:	2a 81       	ldd	r18, Y+2	; 0x02
    1060:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1062:	0f 3f       	cpi	r16, 0xFF	; 255
    1064:	4f ef       	ldi	r20, 0xFF	; 255
    1066:	14 07       	cpc	r17, r20
    1068:	24 07       	cpc	r18, r20
    106a:	34 07       	cpc	r19, r20
    106c:	21 f4       	brne	.+8      	; 0x1076 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    106e:	fc 01       	movw	r30, r24
    1070:	a1 85       	ldd	r26, Z+9	; 0x09
    1072:	b2 85       	ldd	r27, Z+10	; 0x0a
    1074:	11 c0       	rjmp	.+34     	; 0x1098 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1076:	dc 01       	movw	r26, r24
    1078:	13 96       	adiw	r26, 0x03	; 3
    107a:	01 c0       	rjmp	.+2      	; 0x107e <vListInsert+0x2e>
    107c:	df 01       	movw	r26, r30
    107e:	14 96       	adiw	r26, 0x04	; 4
    1080:	ed 91       	ld	r30, X+
    1082:	fc 91       	ld	r31, X
    1084:	15 97       	sbiw	r26, 0x05	; 5
    1086:	40 81       	ld	r20, Z
    1088:	51 81       	ldd	r21, Z+1	; 0x01
    108a:	62 81       	ldd	r22, Z+2	; 0x02
    108c:	73 81       	ldd	r23, Z+3	; 0x03
    108e:	04 17       	cp	r16, r20
    1090:	15 07       	cpc	r17, r21
    1092:	26 07       	cpc	r18, r22
    1094:	37 07       	cpc	r19, r23
    1096:	90 f7       	brcc	.-28     	; 0x107c <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1098:	14 96       	adiw	r26, 0x04	; 4
    109a:	ed 91       	ld	r30, X+
    109c:	fc 91       	ld	r31, X
    109e:	15 97       	sbiw	r26, 0x05	; 5
    10a0:	fd 83       	std	Y+5, r31	; 0x05
    10a2:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    10a4:	d7 83       	std	Z+7, r29	; 0x07
    10a6:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    10a8:	bf 83       	std	Y+7, r27	; 0x07
    10aa:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    10ac:	15 96       	adiw	r26, 0x05	; 5
    10ae:	dc 93       	st	X, r29
    10b0:	ce 93       	st	-X, r28
    10b2:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    10b4:	9b 87       	std	Y+11, r25	; 0x0b
    10b6:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    10b8:	fc 01       	movw	r30, r24
    10ba:	20 81       	ld	r18, Z
    10bc:	2f 5f       	subi	r18, 0xFF	; 255
    10be:	20 83       	st	Z, r18
}
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	08 95       	ret

000010ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    10d0:	a2 85       	ldd	r26, Z+10	; 0x0a
    10d2:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    10d4:	c4 81       	ldd	r28, Z+4	; 0x04
    10d6:	d5 81       	ldd	r29, Z+5	; 0x05
    10d8:	86 81       	ldd	r24, Z+6	; 0x06
    10da:	97 81       	ldd	r25, Z+7	; 0x07
    10dc:	9f 83       	std	Y+7, r25	; 0x07
    10de:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    10e0:	c6 81       	ldd	r28, Z+6	; 0x06
    10e2:	d7 81       	ldd	r29, Z+7	; 0x07
    10e4:	84 81       	ldd	r24, Z+4	; 0x04
    10e6:	95 81       	ldd	r25, Z+5	; 0x05
    10e8:	9d 83       	std	Y+5, r25	; 0x05
    10ea:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    10ec:	11 96       	adiw	r26, 0x01	; 1
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	12 97       	sbiw	r26, 0x02	; 2
    10f4:	e8 17       	cp	r30, r24
    10f6:	f9 07       	cpc	r31, r25
    10f8:	31 f4       	brne	.+12     	; 0x1106 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    10fa:	86 81       	ldd	r24, Z+6	; 0x06
    10fc:	97 81       	ldd	r25, Z+7	; 0x07
    10fe:	12 96       	adiw	r26, 0x02	; 2
    1100:	9c 93       	st	X, r25
    1102:	8e 93       	st	-X, r24
    1104:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1106:	13 86       	std	Z+11, r1	; 0x0b
    1108:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    110a:	8c 91       	ld	r24, X
    110c:	81 50       	subi	r24, 0x01	; 1
    110e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1110:	8c 91       	ld	r24, X
}
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	08 95       	ret

00001118 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1118:	31 e1       	ldi	r19, 0x11	; 17
    111a:	fc 01       	movw	r30, r24
    111c:	30 83       	st	Z, r19
    111e:	31 97       	sbiw	r30, 0x01	; 1
    1120:	22 e2       	ldi	r18, 0x22	; 34
    1122:	20 83       	st	Z, r18
    1124:	31 97       	sbiw	r30, 0x01	; 1
    1126:	a3 e3       	ldi	r26, 0x33	; 51
    1128:	a0 83       	st	Z, r26
    112a:	31 97       	sbiw	r30, 0x01	; 1
    112c:	60 83       	st	Z, r22
    112e:	31 97       	sbiw	r30, 0x01	; 1
    1130:	70 83       	st	Z, r23
    1132:	31 97       	sbiw	r30, 0x01	; 1
    1134:	10 82       	st	Z, r1
    1136:	31 97       	sbiw	r30, 0x01	; 1
    1138:	10 82       	st	Z, r1
    113a:	31 97       	sbiw	r30, 0x01	; 1
    113c:	60 e8       	ldi	r22, 0x80	; 128
    113e:	60 83       	st	Z, r22
    1140:	31 97       	sbiw	r30, 0x01	; 1
    1142:	10 82       	st	Z, r1
    1144:	31 97       	sbiw	r30, 0x01	; 1
    1146:	10 82       	st	Z, r1
    1148:	31 97       	sbiw	r30, 0x01	; 1
    114a:	10 82       	st	Z, r1
    114c:	31 97       	sbiw	r30, 0x01	; 1
    114e:	62 e0       	ldi	r22, 0x02	; 2
    1150:	60 83       	st	Z, r22
    1152:	31 97       	sbiw	r30, 0x01	; 1
    1154:	63 e0       	ldi	r22, 0x03	; 3
    1156:	60 83       	st	Z, r22
    1158:	31 97       	sbiw	r30, 0x01	; 1
    115a:	64 e0       	ldi	r22, 0x04	; 4
    115c:	60 83       	st	Z, r22
    115e:	31 97       	sbiw	r30, 0x01	; 1
    1160:	65 e0       	ldi	r22, 0x05	; 5
    1162:	60 83       	st	Z, r22
    1164:	31 97       	sbiw	r30, 0x01	; 1
    1166:	66 e0       	ldi	r22, 0x06	; 6
    1168:	60 83       	st	Z, r22
    116a:	31 97       	sbiw	r30, 0x01	; 1
    116c:	67 e0       	ldi	r22, 0x07	; 7
    116e:	60 83       	st	Z, r22
    1170:	31 97       	sbiw	r30, 0x01	; 1
    1172:	68 e0       	ldi	r22, 0x08	; 8
    1174:	60 83       	st	Z, r22
    1176:	31 97       	sbiw	r30, 0x01	; 1
    1178:	69 e0       	ldi	r22, 0x09	; 9
    117a:	60 83       	st	Z, r22
    117c:	31 97       	sbiw	r30, 0x01	; 1
    117e:	60 e1       	ldi	r22, 0x10	; 16
    1180:	60 83       	st	Z, r22
    1182:	31 97       	sbiw	r30, 0x01	; 1
    1184:	30 83       	st	Z, r19
    1186:	31 97       	sbiw	r30, 0x01	; 1
    1188:	32 e1       	ldi	r19, 0x12	; 18
    118a:	30 83       	st	Z, r19
    118c:	31 97       	sbiw	r30, 0x01	; 1
    118e:	33 e1       	ldi	r19, 0x13	; 19
    1190:	30 83       	st	Z, r19
    1192:	31 97       	sbiw	r30, 0x01	; 1
    1194:	34 e1       	ldi	r19, 0x14	; 20
    1196:	30 83       	st	Z, r19
    1198:	31 97       	sbiw	r30, 0x01	; 1
    119a:	35 e1       	ldi	r19, 0x15	; 21
    119c:	30 83       	st	Z, r19
    119e:	31 97       	sbiw	r30, 0x01	; 1
    11a0:	36 e1       	ldi	r19, 0x16	; 22
    11a2:	30 83       	st	Z, r19
    11a4:	31 97       	sbiw	r30, 0x01	; 1
    11a6:	37 e1       	ldi	r19, 0x17	; 23
    11a8:	30 83       	st	Z, r19
    11aa:	31 97       	sbiw	r30, 0x01	; 1
    11ac:	38 e1       	ldi	r19, 0x18	; 24
    11ae:	30 83       	st	Z, r19
    11b0:	31 97       	sbiw	r30, 0x01	; 1
    11b2:	39 e1       	ldi	r19, 0x19	; 25
    11b4:	30 83       	st	Z, r19
    11b6:	31 97       	sbiw	r30, 0x01	; 1
    11b8:	30 e2       	ldi	r19, 0x20	; 32
    11ba:	30 83       	st	Z, r19
    11bc:	31 97       	sbiw	r30, 0x01	; 1
    11be:	31 e2       	ldi	r19, 0x21	; 33
    11c0:	30 83       	st	Z, r19
    11c2:	31 97       	sbiw	r30, 0x01	; 1
    11c4:	20 83       	st	Z, r18
    11c6:	31 97       	sbiw	r30, 0x01	; 1
    11c8:	23 e2       	ldi	r18, 0x23	; 35
    11ca:	20 83       	st	Z, r18
    11cc:	31 97       	sbiw	r30, 0x01	; 1
    11ce:	40 83       	st	Z, r20
    11d0:	31 97       	sbiw	r30, 0x01	; 1
    11d2:	50 83       	st	Z, r21
    11d4:	31 97       	sbiw	r30, 0x01	; 1
    11d6:	26 e2       	ldi	r18, 0x26	; 38
    11d8:	20 83       	st	Z, r18
    11da:	31 97       	sbiw	r30, 0x01	; 1
    11dc:	27 e2       	ldi	r18, 0x27	; 39
    11de:	20 83       	st	Z, r18
    11e0:	31 97       	sbiw	r30, 0x01	; 1
    11e2:	28 e2       	ldi	r18, 0x28	; 40
    11e4:	20 83       	st	Z, r18
    11e6:	31 97       	sbiw	r30, 0x01	; 1
    11e8:	29 e2       	ldi	r18, 0x29	; 41
    11ea:	20 83       	st	Z, r18
    11ec:	31 97       	sbiw	r30, 0x01	; 1
    11ee:	20 e3       	ldi	r18, 0x30	; 48
    11f0:	20 83       	st	Z, r18
    11f2:	31 97       	sbiw	r30, 0x01	; 1
    11f4:	21 e3       	ldi	r18, 0x31	; 49
    11f6:	20 83       	st	Z, r18
    11f8:	89 97       	sbiw	r24, 0x29	; 41
    11fa:	08 95       	ret

000011fc <xPortStartScheduler>:
    11fc:	a8 95       	wdr
    11fe:	90 ec       	ldi	r25, 0xC0	; 192
    1200:	88 e1       	ldi	r24, 0x18	; 24
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	a8 95       	wdr
    1208:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1212:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    1216:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    121a:	cd 91       	ld	r28, X+
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	dd 91       	ld	r29, X+
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	ff 91       	pop	r31
    1224:	ef 91       	pop	r30
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	bf 91       	pop	r27
    122c:	af 91       	pop	r26
    122e:	9f 91       	pop	r25
    1230:	8f 91       	pop	r24
    1232:	7f 91       	pop	r23
    1234:	6f 91       	pop	r22
    1236:	5f 91       	pop	r21
    1238:	4f 91       	pop	r20
    123a:	3f 91       	pop	r19
    123c:	2f 91       	pop	r18
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
    1242:	ff 90       	pop	r15
    1244:	ef 90       	pop	r14
    1246:	df 90       	pop	r13
    1248:	cf 90       	pop	r12
    124a:	bf 90       	pop	r11
    124c:	af 90       	pop	r10
    124e:	9f 90       	pop	r9
    1250:	8f 90       	pop	r8
    1252:	7f 90       	pop	r7
    1254:	6f 90       	pop	r6
    1256:	5f 90       	pop	r5
    1258:	4f 90       	pop	r4
    125a:	3f 90       	pop	r3
    125c:	2f 90       	pop	r2
    125e:	1f 90       	pop	r1
    1260:	0f 90       	pop	r0
    1262:	0c be       	out	0x3c, r0	; 60
    1264:	0f 90       	pop	r0
    1266:	0b be       	out	0x3b, r0	; 59
    1268:	0f 90       	pop	r0
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	0f 90       	pop	r0
    126e:	08 95       	ret
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	08 95       	ret

00001274 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1274:	0f 92       	push	r0
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	0f 92       	push	r0
    127c:	0b b6       	in	r0, 0x3b	; 59
    127e:	0f 92       	push	r0
    1280:	0c b6       	in	r0, 0x3c	; 60
    1282:	0f 92       	push	r0
    1284:	1f 92       	push	r1
    1286:	11 24       	eor	r1, r1
    1288:	2f 92       	push	r2
    128a:	3f 92       	push	r3
    128c:	4f 92       	push	r4
    128e:	5f 92       	push	r5
    1290:	6f 92       	push	r6
    1292:	7f 92       	push	r7
    1294:	8f 92       	push	r8
    1296:	9f 92       	push	r9
    1298:	af 92       	push	r10
    129a:	bf 92       	push	r11
    129c:	cf 92       	push	r12
    129e:	df 92       	push	r13
    12a0:	ef 92       	push	r14
    12a2:	ff 92       	push	r15
    12a4:	0f 93       	push	r16
    12a6:	1f 93       	push	r17
    12a8:	2f 93       	push	r18
    12aa:	3f 93       	push	r19
    12ac:	4f 93       	push	r20
    12ae:	5f 93       	push	r21
    12b0:	6f 93       	push	r22
    12b2:	7f 93       	push	r23
    12b4:	8f 93       	push	r24
    12b6:	9f 93       	push	r25
    12b8:	af 93       	push	r26
    12ba:	bf 93       	push	r27
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	ef 93       	push	r30
    12c2:	ff 93       	push	r31
    12c4:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    12c8:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    12cc:	0d b6       	in	r0, 0x3d	; 61
    12ce:	0d 92       	st	X+, r0
    12d0:	0e b6       	in	r0, 0x3e	; 62
    12d2:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    12d4:	0e 94 76 14 	call	0x28ec	; 0x28ec <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    12d8:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    12dc:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    12e0:	cd 91       	ld	r28, X+
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	dd 91       	ld	r29, X+
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	ff 91       	pop	r31
    12ea:	ef 91       	pop	r30
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	bf 91       	pop	r27
    12f2:	af 91       	pop	r26
    12f4:	9f 91       	pop	r25
    12f6:	8f 91       	pop	r24
    12f8:	7f 91       	pop	r23
    12fa:	6f 91       	pop	r22
    12fc:	5f 91       	pop	r21
    12fe:	4f 91       	pop	r20
    1300:	3f 91       	pop	r19
    1302:	2f 91       	pop	r18
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	ff 90       	pop	r15
    130a:	ef 90       	pop	r14
    130c:	df 90       	pop	r13
    130e:	cf 90       	pop	r12
    1310:	bf 90       	pop	r11
    1312:	af 90       	pop	r10
    1314:	9f 90       	pop	r9
    1316:	8f 90       	pop	r8
    1318:	7f 90       	pop	r7
    131a:	6f 90       	pop	r6
    131c:	5f 90       	pop	r5
    131e:	4f 90       	pop	r4
    1320:	3f 90       	pop	r3
    1322:	2f 90       	pop	r2
    1324:	1f 90       	pop	r1
    1326:	0f 90       	pop	r0
    1328:	0c be       	out	0x3c, r0	; 60
    132a:	0f 90       	pop	r0
    132c:	0b be       	out	0x3b, r0	; 59
    132e:	0f 90       	pop	r0
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1334:	08 95       	ret

00001336 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1336:	0f 92       	push	r0
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	0f 92       	push	r0
    133e:	0b b6       	in	r0, 0x3b	; 59
    1340:	0f 92       	push	r0
    1342:	0c b6       	in	r0, 0x3c	; 60
    1344:	0f 92       	push	r0
    1346:	1f 92       	push	r1
    1348:	11 24       	eor	r1, r1
    134a:	2f 92       	push	r2
    134c:	3f 92       	push	r3
    134e:	4f 92       	push	r4
    1350:	5f 92       	push	r5
    1352:	6f 92       	push	r6
    1354:	7f 92       	push	r7
    1356:	8f 92       	push	r8
    1358:	9f 92       	push	r9
    135a:	af 92       	push	r10
    135c:	bf 92       	push	r11
    135e:	cf 92       	push	r12
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	2f 93       	push	r18
    136c:	3f 93       	push	r19
    136e:	4f 93       	push	r20
    1370:	5f 93       	push	r21
    1372:	6f 93       	push	r22
    1374:	7f 93       	push	r23
    1376:	8f 93       	push	r24
    1378:	9f 93       	push	r25
    137a:	af 93       	push	r26
    137c:	bf 93       	push	r27
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	ef 93       	push	r30
    1384:	ff 93       	push	r31
    1386:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    138a:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    138e:	0d b6       	in	r0, 0x3d	; 61
    1390:	0d 92       	st	X+, r0
    1392:	0e b6       	in	r0, 0x3e	; 62
    1394:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1396:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    1398:	0e 94 ae 12 	call	0x255c	; 0x255c <xTaskIncrementTick>
    139c:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    139e:	0e 94 76 14 	call	0x28ec	; 0x28ec <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    13a2:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    13a6:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    13aa:	cd 91       	ld	r28, X+
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	dd 91       	ld	r29, X+
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	ff 91       	pop	r31
    13b4:	ef 91       	pop	r30
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	bf 91       	pop	r27
    13bc:	af 91       	pop	r26
    13be:	9f 91       	pop	r25
    13c0:	8f 91       	pop	r24
    13c2:	7f 91       	pop	r23
    13c4:	6f 91       	pop	r22
    13c6:	5f 91       	pop	r21
    13c8:	4f 91       	pop	r20
    13ca:	3f 91       	pop	r19
    13cc:	2f 91       	pop	r18
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	ff 90       	pop	r15
    13d4:	ef 90       	pop	r14
    13d6:	df 90       	pop	r13
    13d8:	cf 90       	pop	r12
    13da:	bf 90       	pop	r11
    13dc:	af 90       	pop	r10
    13de:	9f 90       	pop	r9
    13e0:	8f 90       	pop	r8
    13e2:	7f 90       	pop	r7
    13e4:	6f 90       	pop	r6
    13e6:	5f 90       	pop	r5
    13e8:	4f 90       	pop	r4
    13ea:	3f 90       	pop	r3
    13ec:	2f 90       	pop	r2
    13ee:	1f 90       	pop	r1
    13f0:	0f 90       	pop	r0
    13f2:	0c be       	out	0x3c, r0	; 60
    13f4:	0f 90       	pop	r0
    13f6:	0b be       	out	0x3b, r0	; 59
    13f8:	0f 90       	pop	r0
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    13fe:	08 95       	ret

00001400 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1400:	9a df       	rcall	.-204    	; 0x1336 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1402:	18 95       	reti

00001404 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	0f 92       	push	r0
    140a:	fc 01       	movw	r30, r24
    140c:	96 8d       	ldd	r25, Z+30	; 0x1e
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	91 11       	cpse	r25, r1
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	08 95       	ret

0000141a <prvCopyDataToQueue>:
    141a:	0f 93       	push	r16
    141c:	1f 93       	push	r17
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	ec 01       	movw	r28, r24
    1424:	04 2f       	mov	r16, r20
    1426:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1428:	48 a1       	ldd	r20, Y+32	; 0x20
    142a:	41 11       	cpse	r20, r1
    142c:	0c c0       	rjmp	.+24     	; 0x1446 <prvCopyDataToQueue+0x2c>
    142e:	88 81       	ld	r24, Y
    1430:	99 81       	ldd	r25, Y+1	; 0x01
    1432:	89 2b       	or	r24, r25
    1434:	09 f0       	breq	.+2      	; 0x1438 <prvCopyDataToQueue+0x1e>
    1436:	42 c0       	rjmp	.+132    	; 0x14bc <prvCopyDataToQueue+0xa2>
    1438:	8c 81       	ldd	r24, Y+4	; 0x04
    143a:	9d 81       	ldd	r25, Y+5	; 0x05
    143c:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <xTaskPriorityDisinherit>
    1440:	1d 82       	std	Y+5, r1	; 0x05
    1442:	1c 82       	std	Y+4, r1	; 0x04
    1444:	42 c0       	rjmp	.+132    	; 0x14ca <prvCopyDataToQueue+0xb0>
    1446:	01 11       	cpse	r16, r1
    1448:	17 c0       	rjmp	.+46     	; 0x1478 <prvCopyDataToQueue+0x5e>
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	9b 81       	ldd	r25, Y+3	; 0x03
    1450:	0e 94 a2 2c 	call	0x5944	; 0x5944 <memcpy>
    1454:	28 a1       	ldd	r18, Y+32	; 0x20
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	9b 81       	ldd	r25, Y+3	; 0x03
    145a:	82 0f       	add	r24, r18
    145c:	91 1d       	adc	r25, r1
    145e:	9b 83       	std	Y+3, r25	; 0x03
    1460:	8a 83       	std	Y+2, r24	; 0x02
    1462:	2c 81       	ldd	r18, Y+4	; 0x04
    1464:	3d 81       	ldd	r19, Y+5	; 0x05
    1466:	82 17       	cp	r24, r18
    1468:	93 07       	cpc	r25, r19
    146a:	50 f1       	brcs	.+84     	; 0x14c0 <prvCopyDataToQueue+0xa6>
    146c:	88 81       	ld	r24, Y
    146e:	99 81       	ldd	r25, Y+1	; 0x01
    1470:	9b 83       	std	Y+3, r25	; 0x03
    1472:	8a 83       	std	Y+2, r24	; 0x02
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	29 c0       	rjmp	.+82     	; 0x14ca <prvCopyDataToQueue+0xb0>
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	8e 81       	ldd	r24, Y+6	; 0x06
    147c:	9f 81       	ldd	r25, Y+7	; 0x07
    147e:	0e 94 a2 2c 	call	0x5944	; 0x5944 <memcpy>
    1482:	88 a1       	ldd	r24, Y+32	; 0x20
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	91 95       	neg	r25
    1488:	81 95       	neg	r24
    148a:	91 09       	sbc	r25, r1
    148c:	2e 81       	ldd	r18, Y+6	; 0x06
    148e:	3f 81       	ldd	r19, Y+7	; 0x07
    1490:	28 0f       	add	r18, r24
    1492:	39 1f       	adc	r19, r25
    1494:	3f 83       	std	Y+7, r19	; 0x07
    1496:	2e 83       	std	Y+6, r18	; 0x06
    1498:	48 81       	ld	r20, Y
    149a:	59 81       	ldd	r21, Y+1	; 0x01
    149c:	24 17       	cp	r18, r20
    149e:	35 07       	cpc	r19, r21
    14a0:	30 f4       	brcc	.+12     	; 0x14ae <prvCopyDataToQueue+0x94>
    14a2:	2c 81       	ldd	r18, Y+4	; 0x04
    14a4:	3d 81       	ldd	r19, Y+5	; 0x05
    14a6:	82 0f       	add	r24, r18
    14a8:	93 1f       	adc	r25, r19
    14aa:	9f 83       	std	Y+7, r25	; 0x07
    14ac:	8e 83       	std	Y+6, r24	; 0x06
    14ae:	02 30       	cpi	r16, 0x02	; 2
    14b0:	49 f4       	brne	.+18     	; 0x14c4 <prvCopyDataToQueue+0xaa>
    14b2:	11 23       	and	r17, r17
    14b4:	49 f0       	breq	.+18     	; 0x14c8 <prvCopyDataToQueue+0xae>
    14b6:	11 50       	subi	r17, 0x01	; 1
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	07 c0       	rjmp	.+14     	; 0x14ca <prvCopyDataToQueue+0xb0>
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <prvCopyDataToQueue+0xb0>
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	03 c0       	rjmp	.+6      	; 0x14ca <prvCopyDataToQueue+0xb0>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	01 c0       	rjmp	.+2      	; 0x14ca <prvCopyDataToQueue+0xb0>
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	1f 5f       	subi	r17, 0xFF	; 255
    14cc:	1e 8f       	std	Y+30, r17	; 0x1e
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	1f 91       	pop	r17
    14d4:	0f 91       	pop	r16
    14d6:	08 95       	ret

000014d8 <prvCopyDataFromQueue>:
    14d8:	fc 01       	movw	r30, r24
    14da:	40 a1       	ldd	r20, Z+32	; 0x20
    14dc:	44 23       	and	r20, r20
    14de:	a9 f0       	breq	.+42     	; 0x150a <prvCopyDataFromQueue+0x32>
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	26 81       	ldd	r18, Z+6	; 0x06
    14e4:	37 81       	ldd	r19, Z+7	; 0x07
    14e6:	24 0f       	add	r18, r20
    14e8:	35 1f       	adc	r19, r21
    14ea:	37 83       	std	Z+7, r19	; 0x07
    14ec:	26 83       	std	Z+6, r18	; 0x06
    14ee:	84 81       	ldd	r24, Z+4	; 0x04
    14f0:	95 81       	ldd	r25, Z+5	; 0x05
    14f2:	28 17       	cp	r18, r24
    14f4:	39 07       	cpc	r19, r25
    14f6:	20 f0       	brcs	.+8      	; 0x1500 <prvCopyDataFromQueue+0x28>
    14f8:	80 81       	ld	r24, Z
    14fa:	91 81       	ldd	r25, Z+1	; 0x01
    14fc:	97 83       	std	Z+7, r25	; 0x07
    14fe:	86 83       	std	Z+6, r24	; 0x06
    1500:	cb 01       	movw	r24, r22
    1502:	66 81       	ldd	r22, Z+6	; 0x06
    1504:	77 81       	ldd	r23, Z+7	; 0x07
    1506:	0c 94 a2 2c 	jmp	0x5944	; 0x5944 <memcpy>
    150a:	08 95       	ret

0000150c <prvUnlockQueue>:
    150c:	ef 92       	push	r14
    150e:	ff 92       	push	r15
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	8c 01       	movw	r16, r24
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	0f 92       	push	r0
    151e:	fc 01       	movw	r30, r24
    1520:	c2 a1       	ldd	r28, Z+34	; 0x22
    1522:	1c 16       	cp	r1, r28
    1524:	ac f4       	brge	.+42     	; 0x1550 <prvUnlockQueue+0x44>
    1526:	83 89       	ldd	r24, Z+19	; 0x13
    1528:	81 11       	cpse	r24, r1
    152a:	06 c0       	rjmp	.+12     	; 0x1538 <prvUnlockQueue+0x2c>
    152c:	11 c0       	rjmp	.+34     	; 0x1550 <prvUnlockQueue+0x44>
    152e:	f8 01       	movw	r30, r16
    1530:	83 89       	ldd	r24, Z+19	; 0x13
    1532:	81 11       	cpse	r24, r1
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <prvUnlockQueue+0x34>
    1536:	0c c0       	rjmp	.+24     	; 0x1550 <prvUnlockQueue+0x44>
    1538:	78 01       	movw	r14, r16
    153a:	f3 e1       	ldi	r31, 0x13	; 19
    153c:	ef 0e       	add	r14, r31
    153e:	f1 1c       	adc	r15, r1
    1540:	c7 01       	movw	r24, r14
    1542:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <xTaskRemoveFromEventList>
    1546:	81 11       	cpse	r24, r1
    1548:	0e 94 42 16 	call	0x2c84	; 0x2c84 <vTaskMissedYield>
    154c:	c1 50       	subi	r28, 0x01	; 1
    154e:	79 f7       	brne	.-34     	; 0x152e <prvUnlockQueue+0x22>
    1550:	8f ef       	ldi	r24, 0xFF	; 255
    1552:	f8 01       	movw	r30, r16
    1554:	82 a3       	std	Z+34, r24	; 0x22
    1556:	0f 90       	pop	r0
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	0f 92       	push	r0
    1560:	c1 a1       	ldd	r28, Z+33	; 0x21
    1562:	1c 16       	cp	r1, r28
    1564:	ac f4       	brge	.+42     	; 0x1590 <prvUnlockQueue+0x84>
    1566:	80 85       	ldd	r24, Z+8	; 0x08
    1568:	81 11       	cpse	r24, r1
    156a:	06 c0       	rjmp	.+12     	; 0x1578 <prvUnlockQueue+0x6c>
    156c:	11 c0       	rjmp	.+34     	; 0x1590 <prvUnlockQueue+0x84>
    156e:	f8 01       	movw	r30, r16
    1570:	80 85       	ldd	r24, Z+8	; 0x08
    1572:	81 11       	cpse	r24, r1
    1574:	05 c0       	rjmp	.+10     	; 0x1580 <prvUnlockQueue+0x74>
    1576:	0c c0       	rjmp	.+24     	; 0x1590 <prvUnlockQueue+0x84>
    1578:	78 01       	movw	r14, r16
    157a:	f8 e0       	ldi	r31, 0x08	; 8
    157c:	ef 0e       	add	r14, r31
    157e:	f1 1c       	adc	r15, r1
    1580:	c7 01       	movw	r24, r14
    1582:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <xTaskRemoveFromEventList>
    1586:	81 11       	cpse	r24, r1
    1588:	0e 94 42 16 	call	0x2c84	; 0x2c84 <vTaskMissedYield>
    158c:	c1 50       	subi	r28, 0x01	; 1
    158e:	79 f7       	brne	.-34     	; 0x156e <prvUnlockQueue+0x62>
    1590:	8f ef       	ldi	r24, 0xFF	; 255
    1592:	f8 01       	movw	r30, r16
    1594:	81 a3       	std	Z+33, r24	; 0x21
    1596:	0f 90       	pop	r0
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cf 91       	pop	r28
    159c:	1f 91       	pop	r17
    159e:	0f 91       	pop	r16
    15a0:	ff 90       	pop	r15
    15a2:	ef 90       	pop	r14
    15a4:	08 95       	ret

000015a6 <xQueueGenericReset>:
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	ec 01       	movw	r28, r24
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	0f 92       	push	r0
    15b2:	e8 81       	ld	r30, Y
    15b4:	f9 81       	ldd	r31, Y+1	; 0x01
    15b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15b8:	28 a1       	ldd	r18, Y+32	; 0x20
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	82 9f       	mul	r24, r18
    15c0:	a0 01       	movw	r20, r0
    15c2:	83 9f       	mul	r24, r19
    15c4:	50 0d       	add	r21, r0
    15c6:	92 9f       	mul	r25, r18
    15c8:	50 0d       	add	r21, r0
    15ca:	11 24       	eor	r1, r1
    15cc:	4e 0f       	add	r20, r30
    15ce:	5f 1f       	adc	r21, r31
    15d0:	5d 83       	std	Y+5, r21	; 0x05
    15d2:	4c 83       	std	Y+4, r20	; 0x04
    15d4:	1e 8e       	std	Y+30, r1	; 0x1e
    15d6:	fb 83       	std	Y+3, r31	; 0x03
    15d8:	ea 83       	std	Y+2, r30	; 0x02
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	82 9f       	mul	r24, r18
    15de:	a0 01       	movw	r20, r0
    15e0:	83 9f       	mul	r24, r19
    15e2:	50 0d       	add	r21, r0
    15e4:	92 9f       	mul	r25, r18
    15e6:	50 0d       	add	r21, r0
    15e8:	11 24       	eor	r1, r1
    15ea:	cf 01       	movw	r24, r30
    15ec:	84 0f       	add	r24, r20
    15ee:	95 1f       	adc	r25, r21
    15f0:	9f 83       	std	Y+7, r25	; 0x07
    15f2:	8e 83       	std	Y+6, r24	; 0x06
    15f4:	8f ef       	ldi	r24, 0xFF	; 255
    15f6:	89 a3       	std	Y+33, r24	; 0x21
    15f8:	8a a3       	std	Y+34, r24	; 0x22
    15fa:	61 11       	cpse	r22, r1
    15fc:	0b c0       	rjmp	.+22     	; 0x1614 <xQueueGenericReset+0x6e>
    15fe:	88 85       	ldd	r24, Y+8	; 0x08
    1600:	88 23       	and	r24, r24
    1602:	71 f0       	breq	.+28     	; 0x1620 <xQueueGenericReset+0x7a>
    1604:	ce 01       	movw	r24, r28
    1606:	08 96       	adiw	r24, 0x08	; 8
    1608:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <xTaskRemoveFromEventList>
    160c:	88 23       	and	r24, r24
    160e:	41 f0       	breq	.+16     	; 0x1620 <xQueueGenericReset+0x7a>
    1610:	31 de       	rcall	.-926    	; 0x1274 <vPortYield>
    1612:	06 c0       	rjmp	.+12     	; 0x1620 <xQueueGenericReset+0x7a>
    1614:	ce 01       	movw	r24, r28
    1616:	08 96       	adiw	r24, 0x08	; 8
    1618:	e5 dc       	rcall	.-1590   	; 0xfe4 <vListInitialise>
    161a:	ce 01       	movw	r24, r28
    161c:	43 96       	adiw	r24, 0x13	; 19
    161e:	e2 dc       	rcall	.-1596   	; 0xfe4 <vListInitialise>
    1620:	0f 90       	pop	r0
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	08 95       	ret

0000162c <xQueueGenericCreate>:
    162c:	ff 92       	push	r15
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	08 2f       	mov	r16, r24
    1638:	16 2f       	mov	r17, r22
    163a:	f4 2e       	mov	r15, r20
    163c:	66 23       	and	r22, r22
    163e:	b9 f0       	breq	.+46     	; 0x166e <xQueueGenericCreate+0x42>
    1640:	86 9f       	mul	r24, r22
    1642:	c0 01       	movw	r24, r0
    1644:	11 24       	eor	r1, r1
    1646:	85 96       	adiw	r24, 0x25	; 37
    1648:	e3 db       	rcall	.-2106   	; 0xe10 <pvPortMalloc>
    164a:	ec 01       	movw	r28, r24
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	41 f4       	brne	.+16     	; 0x1660 <xQueueGenericCreate+0x34>
    1650:	14 c0       	rjmp	.+40     	; 0x167a <xQueueGenericCreate+0x4e>
    1652:	0f 8f       	std	Y+31, r16	; 0x1f
    1654:	18 a3       	std	Y+32, r17	; 0x20
    1656:	61 e0       	ldi	r22, 0x01	; 1
    1658:	ce 01       	movw	r24, r28
    165a:	a5 df       	rcall	.-182    	; 0x15a6 <xQueueGenericReset>
    165c:	fc a2       	std	Y+36, r15	; 0x24
    165e:	0d c0       	rjmp	.+26     	; 0x167a <xQueueGenericCreate+0x4e>
    1660:	85 96       	adiw	r24, 0x25	; 37
    1662:	99 83       	std	Y+1, r25	; 0x01
    1664:	88 83       	st	Y, r24
    1666:	f5 cf       	rjmp	.-22     	; 0x1652 <xQueueGenericCreate+0x26>
    1668:	d9 83       	std	Y+1, r29	; 0x01
    166a:	c8 83       	st	Y, r28
    166c:	f2 cf       	rjmp	.-28     	; 0x1652 <xQueueGenericCreate+0x26>
    166e:	85 e2       	ldi	r24, 0x25	; 37
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	ce db       	rcall	.-2148   	; 0xe10 <pvPortMalloc>
    1674:	ec 01       	movw	r28, r24
    1676:	89 2b       	or	r24, r25
    1678:	b9 f7       	brne	.-18     	; 0x1668 <xQueueGenericCreate+0x3c>
    167a:	ce 01       	movw	r24, r28
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	ff 90       	pop	r15
    1686:	08 95       	ret

00001688 <xQueueGenericSend>:
    1688:	9f 92       	push	r9
    168a:	af 92       	push	r10
    168c:	bf 92       	push	r11
    168e:	cf 92       	push	r12
    1690:	df 92       	push	r13
    1692:	ef 92       	push	r14
    1694:	ff 92       	push	r15
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	29 97       	sbiw	r28, 0x09	; 9
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	de bf       	out	0x3e, r29	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	cd bf       	out	0x3d, r28	; 61
    16ae:	7c 01       	movw	r14, r24
    16b0:	5b 01       	movw	r10, r22
    16b2:	2e 83       	std	Y+6, r18	; 0x06
    16b4:	3f 83       	std	Y+7, r19	; 0x07
    16b6:	48 87       	std	Y+8, r20	; 0x08
    16b8:	59 87       	std	Y+9, r21	; 0x09
    16ba:	10 e0       	ldi	r17, 0x00	; 0
    16bc:	99 24       	eor	r9, r9
    16be:	93 94       	inc	r9
    16c0:	6c 01       	movw	r12, r24
    16c2:	88 e0       	ldi	r24, 0x08	; 8
    16c4:	c8 0e       	add	r12, r24
    16c6:	d1 1c       	adc	r13, r1
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	0f 92       	push	r0
    16ce:	f7 01       	movw	r30, r14
    16d0:	96 8d       	ldd	r25, Z+30	; 0x1e
    16d2:	87 8d       	ldd	r24, Z+31	; 0x1f
    16d4:	98 17       	cp	r25, r24
    16d6:	10 f0       	brcs	.+4      	; 0x16dc <xQueueGenericSend+0x54>
    16d8:	02 30       	cpi	r16, 0x02	; 2
    16da:	b1 f4       	brne	.+44     	; 0x1708 <xQueueGenericSend+0x80>
    16dc:	40 2f       	mov	r20, r16
    16de:	b5 01       	movw	r22, r10
    16e0:	c7 01       	movw	r24, r14
    16e2:	9b de       	rcall	.-714    	; 0x141a <prvCopyDataToQueue>
    16e4:	f7 01       	movw	r30, r14
    16e6:	93 89       	ldd	r25, Z+19	; 0x13
    16e8:	99 23       	and	r25, r25
    16ea:	41 f0       	breq	.+16     	; 0x16fc <xQueueGenericSend+0x74>
    16ec:	c7 01       	movw	r24, r14
    16ee:	43 96       	adiw	r24, 0x13	; 19
    16f0:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <xTaskRemoveFromEventList>
    16f4:	88 23       	and	r24, r24
    16f6:	21 f0       	breq	.+8      	; 0x1700 <xQueueGenericSend+0x78>
    16f8:	bd dd       	rcall	.-1158   	; 0x1274 <vPortYield>
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <xQueueGenericSend+0x78>
    16fc:	81 11       	cpse	r24, r1
    16fe:	ba dd       	rcall	.-1164   	; 0x1274 <vPortYield>
    1700:	0f 90       	pop	r0
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	4e c0       	rjmp	.+156    	; 0x17a4 <xQueueGenericSend+0x11c>
    1708:	8e 81       	ldd	r24, Y+6	; 0x06
    170a:	9f 81       	ldd	r25, Y+7	; 0x07
    170c:	a8 85       	ldd	r26, Y+8	; 0x08
    170e:	b9 85       	ldd	r27, Y+9	; 0x09
    1710:	89 2b       	or	r24, r25
    1712:	8a 2b       	or	r24, r26
    1714:	8b 2b       	or	r24, r27
    1716:	21 f4       	brne	.+8      	; 0x1720 <xQueueGenericSend+0x98>
    1718:	0f 90       	pop	r0
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	42 c0       	rjmp	.+132    	; 0x17a4 <xQueueGenericSend+0x11c>
    1720:	11 11       	cpse	r17, r1
    1722:	05 c0       	rjmp	.+10     	; 0x172e <xQueueGenericSend+0xa6>
    1724:	ce 01       	movw	r24, r28
    1726:	01 96       	adiw	r24, 0x01	; 1
    1728:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <vTaskInternalSetTimeOutState>
    172c:	19 2d       	mov	r17, r9
    172e:	0f 90       	pop	r0
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	00 d7       	rcall	.+3584   	; 0x2534 <vTaskSuspendAll>
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	0f 92       	push	r0
    173a:	f7 01       	movw	r30, r14
    173c:	81 a1       	ldd	r24, Z+33	; 0x21
    173e:	8f 3f       	cpi	r24, 0xFF	; 255
    1740:	09 f4       	brne	.+2      	; 0x1744 <xQueueGenericSend+0xbc>
    1742:	11 a2       	std	Z+33, r1	; 0x21
    1744:	f7 01       	movw	r30, r14
    1746:	82 a1       	ldd	r24, Z+34	; 0x22
    1748:	8f 3f       	cpi	r24, 0xFF	; 255
    174a:	09 f4       	brne	.+2      	; 0x174e <xQueueGenericSend+0xc6>
    174c:	12 a2       	std	Z+34, r1	; 0x22
    174e:	0f 90       	pop	r0
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	be 01       	movw	r22, r28
    1754:	6a 5f       	subi	r22, 0xFA	; 250
    1756:	7f 4f       	sbci	r23, 0xFF	; 255
    1758:	ce 01       	movw	r24, r28
    175a:	01 96       	adiw	r24, 0x01	; 1
    175c:	0e 94 ed 15 	call	0x2bda	; 0x2bda <xTaskCheckForTimeOut>
    1760:	81 11       	cpse	r24, r1
    1762:	1c c0       	rjmp	.+56     	; 0x179c <xQueueGenericSend+0x114>
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	0f 92       	push	r0
    176a:	f7 01       	movw	r30, r14
    176c:	96 8d       	ldd	r25, Z+30	; 0x1e
    176e:	87 8d       	ldd	r24, Z+31	; 0x1f
    1770:	0f 90       	pop	r0
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	98 13       	cpse	r25, r24
    1776:	0e c0       	rjmp	.+28     	; 0x1794 <xQueueGenericSend+0x10c>
    1778:	4e 81       	ldd	r20, Y+6	; 0x06
    177a:	5f 81       	ldd	r21, Y+7	; 0x07
    177c:	68 85       	ldd	r22, Y+8	; 0x08
    177e:	79 85       	ldd	r23, Y+9	; 0x09
    1780:	c6 01       	movw	r24, r12
    1782:	0e 94 f5 14 	call	0x29ea	; 0x29ea <vTaskPlaceOnEventList>
    1786:	c7 01       	movw	r24, r14
    1788:	c1 de       	rcall	.-638    	; 0x150c <prvUnlockQueue>
    178a:	bd d7       	rcall	.+3962   	; 0x2706 <xTaskResumeAll>
    178c:	81 11       	cpse	r24, r1
    178e:	9c cf       	rjmp	.-200    	; 0x16c8 <xQueueGenericSend+0x40>
    1790:	71 dd       	rcall	.-1310   	; 0x1274 <vPortYield>
    1792:	9a cf       	rjmp	.-204    	; 0x16c8 <xQueueGenericSend+0x40>
    1794:	c7 01       	movw	r24, r14
    1796:	ba de       	rcall	.-652    	; 0x150c <prvUnlockQueue>
    1798:	b6 d7       	rcall	.+3948   	; 0x2706 <xTaskResumeAll>
    179a:	96 cf       	rjmp	.-212    	; 0x16c8 <xQueueGenericSend+0x40>
    179c:	c7 01       	movw	r24, r14
    179e:	b6 de       	rcall	.-660    	; 0x150c <prvUnlockQueue>
    17a0:	b2 d7       	rcall	.+3940   	; 0x2706 <xTaskResumeAll>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	29 96       	adiw	r28, 0x09	; 9
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	ff 90       	pop	r15
    17ba:	ef 90       	pop	r14
    17bc:	df 90       	pop	r13
    17be:	cf 90       	pop	r12
    17c0:	bf 90       	pop	r11
    17c2:	af 90       	pop	r10
    17c4:	9f 90       	pop	r9
    17c6:	08 95       	ret

000017c8 <xQueueCreateMutex>:
    17c8:	0f 93       	push	r16
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	48 2f       	mov	r20, r24
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	2b df       	rcall	.-426    	; 0x162c <xQueueGenericCreate>
    17d6:	ec 01       	movw	r28, r24
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	61 f0       	breq	.+24     	; 0x17f4 <xQueueCreateMutex+0x2c>
    17dc:	1d 82       	std	Y+5, r1	; 0x05
    17de:	1c 82       	std	Y+4, r1	; 0x04
    17e0:	19 82       	std	Y+1, r1	; 0x01
    17e2:	18 82       	st	Y, r1
    17e4:	1e 82       	std	Y+6, r1	; 0x06
    17e6:	00 e0       	ldi	r16, 0x00	; 0
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	a9 01       	movw	r20, r18
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	4a df       	rcall	.-364    	; 0x1688 <xQueueGenericSend>
    17f4:	ce 01       	movw	r24, r28
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	0f 91       	pop	r16
    17fc:	08 95       	ret

000017fe <xQueueGenericSendFromISR>:
    17fe:	ef 92       	push	r14
    1800:	ff 92       	push	r15
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	8a 01       	movw	r16, r20
    180c:	fc 01       	movw	r30, r24
    180e:	56 8d       	ldd	r21, Z+30	; 0x1e
    1810:	37 8d       	ldd	r19, Z+31	; 0x1f
    1812:	53 17       	cp	r21, r19
    1814:	10 f0       	brcs	.+4      	; 0x181a <xQueueGenericSendFromISR+0x1c>
    1816:	22 30       	cpi	r18, 0x02	; 2
    1818:	e9 f4       	brne	.+58     	; 0x1854 <xQueueGenericSendFromISR+0x56>
    181a:	42 2f       	mov	r20, r18
    181c:	78 01       	movw	r14, r16
    181e:	ec 01       	movw	r28, r24
    1820:	1a a1       	ldd	r17, Y+34	; 0x22
    1822:	fb dd       	rcall	.-1034   	; 0x141a <prvCopyDataToQueue>
    1824:	1f 3f       	cpi	r17, 0xFF	; 255
    1826:	81 f4       	brne	.+32     	; 0x1848 <xQueueGenericSendFromISR+0x4a>
    1828:	8b 89       	ldd	r24, Y+19	; 0x13
    182a:	88 23       	and	r24, r24
    182c:	a9 f0       	breq	.+42     	; 0x1858 <xQueueGenericSendFromISR+0x5a>
    182e:	ce 01       	movw	r24, r28
    1830:	43 96       	adiw	r24, 0x13	; 19
    1832:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <xTaskRemoveFromEventList>
    1836:	88 23       	and	r24, r24
    1838:	89 f0       	breq	.+34     	; 0x185c <xQueueGenericSendFromISR+0x5e>
    183a:	e1 14       	cp	r14, r1
    183c:	f1 04       	cpc	r15, r1
    183e:	81 f0       	breq	.+32     	; 0x1860 <xQueueGenericSendFromISR+0x62>
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	f7 01       	movw	r30, r14
    1844:	80 83       	st	Z, r24
    1846:	0d c0       	rjmp	.+26     	; 0x1862 <xQueueGenericSendFromISR+0x64>
    1848:	ff 24       	eor	r15, r15
    184a:	f3 94       	inc	r15
    184c:	f1 0e       	add	r15, r17
    184e:	fa a2       	std	Y+34, r15	; 0x22
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	07 c0       	rjmp	.+14     	; 0x1862 <xQueueGenericSendFromISR+0x64>
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	05 c0       	rjmp	.+10     	; 0x1862 <xQueueGenericSendFromISR+0x64>
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	03 c0       	rjmp	.+6      	; 0x1862 <xQueueGenericSendFromISR+0x64>
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <xQueueGenericSendFromISR+0x64>
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	1f 91       	pop	r17
    1868:	0f 91       	pop	r16
    186a:	ff 90       	pop	r15
    186c:	ef 90       	pop	r14
    186e:	08 95       	ret

00001870 <xQueueReceive>:
    1870:	9f 92       	push	r9
    1872:	af 92       	push	r10
    1874:	bf 92       	push	r11
    1876:	cf 92       	push	r12
    1878:	df 92       	push	r13
    187a:	ef 92       	push	r14
    187c:	ff 92       	push	r15
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	29 97       	sbiw	r28, 0x09	; 9
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	8c 01       	movw	r16, r24
    1898:	5b 01       	movw	r10, r22
    189a:	2e 83       	std	Y+6, r18	; 0x06
    189c:	3f 83       	std	Y+7, r19	; 0x07
    189e:	48 87       	std	Y+8, r20	; 0x08
    18a0:	59 87       	std	Y+9, r21	; 0x09
    18a2:	e1 2c       	mov	r14, r1
    18a4:	99 24       	eor	r9, r9
    18a6:	93 94       	inc	r9
    18a8:	6c 01       	movw	r12, r24
    18aa:	83 e1       	ldi	r24, 0x13	; 19
    18ac:	c8 0e       	add	r12, r24
    18ae:	d1 1c       	adc	r13, r1
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	0f 92       	push	r0
    18b6:	f8 01       	movw	r30, r16
    18b8:	f6 8c       	ldd	r15, Z+30	; 0x1e
    18ba:	ff 20       	and	r15, r15
    18bc:	99 f0       	breq	.+38     	; 0x18e4 <xQueueReceive+0x74>
    18be:	b5 01       	movw	r22, r10
    18c0:	c8 01       	movw	r24, r16
    18c2:	0a de       	rcall	.-1004   	; 0x14d8 <prvCopyDataFromQueue>
    18c4:	fa 94       	dec	r15
    18c6:	f8 01       	movw	r30, r16
    18c8:	f6 8e       	std	Z+30, r15	; 0x1e
    18ca:	80 85       	ldd	r24, Z+8	; 0x08
    18cc:	88 23       	and	r24, r24
    18ce:	31 f0       	breq	.+12     	; 0x18dc <xQueueReceive+0x6c>
    18d0:	c8 01       	movw	r24, r16
    18d2:	08 96       	adiw	r24, 0x08	; 8
    18d4:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <xTaskRemoveFromEventList>
    18d8:	81 11       	cpse	r24, r1
    18da:	cc dc       	rcall	.-1640   	; 0x1274 <vPortYield>
    18dc:	0f 90       	pop	r0
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	4d c0       	rjmp	.+154    	; 0x197e <xQueueReceive+0x10e>
    18e4:	8e 81       	ldd	r24, Y+6	; 0x06
    18e6:	9f 81       	ldd	r25, Y+7	; 0x07
    18e8:	a8 85       	ldd	r26, Y+8	; 0x08
    18ea:	b9 85       	ldd	r27, Y+9	; 0x09
    18ec:	89 2b       	or	r24, r25
    18ee:	8a 2b       	or	r24, r26
    18f0:	8b 2b       	or	r24, r27
    18f2:	21 f4       	brne	.+8      	; 0x18fc <xQueueReceive+0x8c>
    18f4:	0f 90       	pop	r0
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	41 c0       	rjmp	.+130    	; 0x197e <xQueueReceive+0x10e>
    18fc:	e1 10       	cpse	r14, r1
    18fe:	05 c0       	rjmp	.+10     	; 0x190a <xQueueReceive+0x9a>
    1900:	ce 01       	movw	r24, r28
    1902:	01 96       	adiw	r24, 0x01	; 1
    1904:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <vTaskInternalSetTimeOutState>
    1908:	e9 2c       	mov	r14, r9
    190a:	0f 90       	pop	r0
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	12 d6       	rcall	.+3108   	; 0x2534 <vTaskSuspendAll>
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	0f 92       	push	r0
    1916:	f8 01       	movw	r30, r16
    1918:	81 a1       	ldd	r24, Z+33	; 0x21
    191a:	8f 3f       	cpi	r24, 0xFF	; 255
    191c:	09 f4       	brne	.+2      	; 0x1920 <xQueueReceive+0xb0>
    191e:	11 a2       	std	Z+33, r1	; 0x21
    1920:	f8 01       	movw	r30, r16
    1922:	82 a1       	ldd	r24, Z+34	; 0x22
    1924:	8f 3f       	cpi	r24, 0xFF	; 255
    1926:	09 f4       	brne	.+2      	; 0x192a <xQueueReceive+0xba>
    1928:	12 a2       	std	Z+34, r1	; 0x22
    192a:	0f 90       	pop	r0
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	be 01       	movw	r22, r28
    1930:	6a 5f       	subi	r22, 0xFA	; 250
    1932:	7f 4f       	sbci	r23, 0xFF	; 255
    1934:	ce 01       	movw	r24, r28
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	0e 94 ed 15 	call	0x2bda	; 0x2bda <xTaskCheckForTimeOut>
    193c:	81 11       	cpse	r24, r1
    193e:	16 c0       	rjmp	.+44     	; 0x196c <xQueueReceive+0xfc>
    1940:	c8 01       	movw	r24, r16
    1942:	60 dd       	rcall	.-1344   	; 0x1404 <prvIsQueueEmpty>
    1944:	88 23       	and	r24, r24
    1946:	71 f0       	breq	.+28     	; 0x1964 <xQueueReceive+0xf4>
    1948:	4e 81       	ldd	r20, Y+6	; 0x06
    194a:	5f 81       	ldd	r21, Y+7	; 0x07
    194c:	68 85       	ldd	r22, Y+8	; 0x08
    194e:	79 85       	ldd	r23, Y+9	; 0x09
    1950:	c6 01       	movw	r24, r12
    1952:	0e 94 f5 14 	call	0x29ea	; 0x29ea <vTaskPlaceOnEventList>
    1956:	c8 01       	movw	r24, r16
    1958:	d9 dd       	rcall	.-1102   	; 0x150c <prvUnlockQueue>
    195a:	d5 d6       	rcall	.+3498   	; 0x2706 <xTaskResumeAll>
    195c:	81 11       	cpse	r24, r1
    195e:	a8 cf       	rjmp	.-176    	; 0x18b0 <xQueueReceive+0x40>
    1960:	89 dc       	rcall	.-1774   	; 0x1274 <vPortYield>
    1962:	a6 cf       	rjmp	.-180    	; 0x18b0 <xQueueReceive+0x40>
    1964:	c8 01       	movw	r24, r16
    1966:	d2 dd       	rcall	.-1116   	; 0x150c <prvUnlockQueue>
    1968:	ce d6       	rcall	.+3484   	; 0x2706 <xTaskResumeAll>
    196a:	a2 cf       	rjmp	.-188    	; 0x18b0 <xQueueReceive+0x40>
    196c:	c8 01       	movw	r24, r16
    196e:	ce dd       	rcall	.-1124   	; 0x150c <prvUnlockQueue>
    1970:	ca d6       	rcall	.+3476   	; 0x2706 <xTaskResumeAll>
    1972:	c8 01       	movw	r24, r16
    1974:	47 dd       	rcall	.-1394   	; 0x1404 <prvIsQueueEmpty>
    1976:	88 23       	and	r24, r24
    1978:	09 f4       	brne	.+2      	; 0x197c <xQueueReceive+0x10c>
    197a:	9a cf       	rjmp	.-204    	; 0x18b0 <xQueueReceive+0x40>
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	29 96       	adiw	r28, 0x09	; 9
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	ff 90       	pop	r15
    1994:	ef 90       	pop	r14
    1996:	df 90       	pop	r13
    1998:	cf 90       	pop	r12
    199a:	bf 90       	pop	r11
    199c:	af 90       	pop	r10
    199e:	9f 90       	pop	r9
    19a0:	08 95       	ret

000019a2 <xQueueSemaphoreTake>:
    19a2:	bf 92       	push	r11
    19a4:	cf 92       	push	r12
    19a6:	df 92       	push	r13
    19a8:	ef 92       	push	r14
    19aa:	ff 92       	push	r15
    19ac:	0f 93       	push	r16
    19ae:	1f 93       	push	r17
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	29 97       	sbiw	r28, 0x09	; 9
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	de bf       	out	0x3e, r29	; 62
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	cd bf       	out	0x3d, r28	; 61
    19c4:	8c 01       	movw	r16, r24
    19c6:	4e 83       	std	Y+6, r20	; 0x06
    19c8:	5f 83       	std	Y+7, r21	; 0x07
    19ca:	68 87       	std	Y+8, r22	; 0x08
    19cc:	79 87       	std	Y+9, r23	; 0x09
    19ce:	b1 2c       	mov	r11, r1
    19d0:	d1 2c       	mov	r13, r1
    19d2:	cc 24       	eor	r12, r12
    19d4:	c3 94       	inc	r12
    19d6:	7c 01       	movw	r14, r24
    19d8:	83 e1       	ldi	r24, 0x13	; 19
    19da:	e8 0e       	add	r14, r24
    19dc:	f1 1c       	adc	r15, r1
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	0f 92       	push	r0
    19e4:	d8 01       	movw	r26, r16
    19e6:	5e 96       	adiw	r26, 0x1e	; 30
    19e8:	8c 91       	ld	r24, X
    19ea:	5e 97       	sbiw	r26, 0x1e	; 30
    19ec:	88 23       	and	r24, r24
    19ee:	e1 f0       	breq	.+56     	; 0x1a28 <xQueueSemaphoreTake+0x86>
    19f0:	81 50       	subi	r24, 0x01	; 1
    19f2:	5e 96       	adiw	r26, 0x1e	; 30
    19f4:	8c 93       	st	X, r24
    19f6:	5e 97       	sbiw	r26, 0x1e	; 30
    19f8:	8d 91       	ld	r24, X+
    19fa:	9c 91       	ld	r25, X
    19fc:	89 2b       	or	r24, r25
    19fe:	29 f4       	brne	.+10     	; 0x1a0a <xQueueSemaphoreTake+0x68>
    1a00:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <pvTaskIncrementMutexHeldCount>
    1a04:	f8 01       	movw	r30, r16
    1a06:	95 83       	std	Z+5, r25	; 0x05
    1a08:	84 83       	std	Z+4, r24	; 0x04
    1a0a:	d8 01       	movw	r26, r16
    1a0c:	18 96       	adiw	r26, 0x08	; 8
    1a0e:	8c 91       	ld	r24, X
    1a10:	88 23       	and	r24, r24
    1a12:	31 f0       	breq	.+12     	; 0x1a20 <xQueueSemaphoreTake+0x7e>
    1a14:	c8 01       	movw	r24, r16
    1a16:	08 96       	adiw	r24, 0x08	; 8
    1a18:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <xTaskRemoveFromEventList>
    1a1c:	81 11       	cpse	r24, r1
    1a1e:	2a dc       	rcall	.-1964   	; 0x1274 <vPortYield>
    1a20:	0f 90       	pop	r0
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	7a c0       	rjmp	.+244    	; 0x1b1c <xQueueSemaphoreTake+0x17a>
    1a28:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a2c:	a8 85       	ldd	r26, Y+8	; 0x08
    1a2e:	b9 85       	ldd	r27, Y+9	; 0x09
    1a30:	89 2b       	or	r24, r25
    1a32:	8a 2b       	or	r24, r26
    1a34:	8b 2b       	or	r24, r27
    1a36:	21 f4       	brne	.+8      	; 0x1a40 <xQueueSemaphoreTake+0x9e>
    1a38:	0f 90       	pop	r0
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	6e c0       	rjmp	.+220    	; 0x1b1c <xQueueSemaphoreTake+0x17a>
    1a40:	d1 10       	cpse	r13, r1
    1a42:	05 c0       	rjmp	.+10     	; 0x1a4e <xQueueSemaphoreTake+0xac>
    1a44:	ce 01       	movw	r24, r28
    1a46:	01 96       	adiw	r24, 0x01	; 1
    1a48:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <vTaskInternalSetTimeOutState>
    1a4c:	dc 2c       	mov	r13, r12
    1a4e:	0f 90       	pop	r0
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	70 d5       	rcall	.+2784   	; 0x2534 <vTaskSuspendAll>
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	0f 92       	push	r0
    1a5a:	f8 01       	movw	r30, r16
    1a5c:	81 a1       	ldd	r24, Z+33	; 0x21
    1a5e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <xQueueSemaphoreTake+0xc2>
    1a62:	11 a2       	std	Z+33, r1	; 0x21
    1a64:	d8 01       	movw	r26, r16
    1a66:	92 96       	adiw	r26, 0x22	; 34
    1a68:	8c 91       	ld	r24, X
    1a6a:	92 97       	sbiw	r26, 0x22	; 34
    1a6c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a6e:	11 f4       	brne	.+4      	; 0x1a74 <xQueueSemaphoreTake+0xd2>
    1a70:	92 96       	adiw	r26, 0x22	; 34
    1a72:	1c 92       	st	X, r1
    1a74:	0f 90       	pop	r0
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	be 01       	movw	r22, r28
    1a7a:	6a 5f       	subi	r22, 0xFA	; 250
    1a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7e:	ce 01       	movw	r24, r28
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	0e 94 ed 15 	call	0x2bda	; 0x2bda <xTaskCheckForTimeOut>
    1a86:	81 11       	cpse	r24, r1
    1a88:	24 c0       	rjmp	.+72     	; 0x1ad2 <xQueueSemaphoreTake+0x130>
    1a8a:	c8 01       	movw	r24, r16
    1a8c:	bb dc       	rcall	.-1674   	; 0x1404 <prvIsQueueEmpty>
    1a8e:	88 23       	and	r24, r24
    1a90:	e1 f0       	breq	.+56     	; 0x1aca <xQueueSemaphoreTake+0x128>
    1a92:	f8 01       	movw	r30, r16
    1a94:	80 81       	ld	r24, Z
    1a96:	91 81       	ldd	r25, Z+1	; 0x01
    1a98:	89 2b       	or	r24, r25
    1a9a:	51 f4       	brne	.+20     	; 0x1ab0 <xQueueSemaphoreTake+0x10e>
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	0f 92       	push	r0
    1aa2:	84 81       	ldd	r24, Z+4	; 0x04
    1aa4:	95 81       	ldd	r25, Z+5	; 0x05
    1aa6:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <xTaskPriorityInherit>
    1aaa:	b8 2e       	mov	r11, r24
    1aac:	0f 90       	pop	r0
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	4e 81       	ldd	r20, Y+6	; 0x06
    1ab2:	5f 81       	ldd	r21, Y+7	; 0x07
    1ab4:	68 85       	ldd	r22, Y+8	; 0x08
    1ab6:	79 85       	ldd	r23, Y+9	; 0x09
    1ab8:	c7 01       	movw	r24, r14
    1aba:	97 d7       	rcall	.+3886   	; 0x29ea <vTaskPlaceOnEventList>
    1abc:	c8 01       	movw	r24, r16
    1abe:	26 dd       	rcall	.-1460   	; 0x150c <prvUnlockQueue>
    1ac0:	22 d6       	rcall	.+3140   	; 0x2706 <xTaskResumeAll>
    1ac2:	81 11       	cpse	r24, r1
    1ac4:	8c cf       	rjmp	.-232    	; 0x19de <xQueueSemaphoreTake+0x3c>
    1ac6:	d6 db       	rcall	.-2132   	; 0x1274 <vPortYield>
    1ac8:	8a cf       	rjmp	.-236    	; 0x19de <xQueueSemaphoreTake+0x3c>
    1aca:	c8 01       	movw	r24, r16
    1acc:	1f dd       	rcall	.-1474   	; 0x150c <prvUnlockQueue>
    1ace:	1b d6       	rcall	.+3126   	; 0x2706 <xTaskResumeAll>
    1ad0:	86 cf       	rjmp	.-244    	; 0x19de <xQueueSemaphoreTake+0x3c>
    1ad2:	c8 01       	movw	r24, r16
    1ad4:	1b dd       	rcall	.-1482   	; 0x150c <prvUnlockQueue>
    1ad6:	17 d6       	rcall	.+3118   	; 0x2706 <xTaskResumeAll>
    1ad8:	c8 01       	movw	r24, r16
    1ada:	94 dc       	rcall	.-1752   	; 0x1404 <prvIsQueueEmpty>
    1adc:	88 23       	and	r24, r24
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <xQueueSemaphoreTake+0x140>
    1ae0:	7e cf       	rjmp	.-260    	; 0x19de <xQueueSemaphoreTake+0x3c>
    1ae2:	bb 20       	and	r11, r11
    1ae4:	d1 f0       	breq	.+52     	; 0x1b1a <xQueueSemaphoreTake+0x178>
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	0f 92       	push	r0
    1aec:	f8 01       	movw	r30, r16
    1aee:	83 89       	ldd	r24, Z+19	; 0x13
    1af0:	88 23       	and	r24, r24
    1af2:	39 f0       	breq	.+14     	; 0x1b02 <xQueueSemaphoreTake+0x160>
    1af4:	02 8c       	ldd	r0, Z+26	; 0x1a
    1af6:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1af8:	e0 2d       	mov	r30, r0
    1afa:	80 81       	ld	r24, Z
    1afc:	64 e0       	ldi	r22, 0x04	; 4
    1afe:	68 1b       	sub	r22, r24
    1b00:	01 c0       	rjmp	.+2      	; 0x1b04 <xQueueSemaphoreTake+0x162>
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	d8 01       	movw	r26, r16
    1b06:	14 96       	adiw	r26, 0x04	; 4
    1b08:	8d 91       	ld	r24, X+
    1b0a:	9c 91       	ld	r25, X
    1b0c:	15 97       	sbiw	r26, 0x05	; 5
    1b0e:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <vTaskPriorityDisinheritAfterTimeout>
    1b12:	0f 90       	pop	r0
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	01 c0       	rjmp	.+2      	; 0x1b1c <xQueueSemaphoreTake+0x17a>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	29 96       	adiw	r28, 0x09	; 9
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	ff 90       	pop	r15
    1b32:	ef 90       	pop	r14
    1b34:	df 90       	pop	r13
    1b36:	cf 90       	pop	r12
    1b38:	bf 90       	pop	r11
    1b3a:	08 95       	ret

00001b3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1b3c:	cf 93       	push	r28
    1b3e:	df 93       	push	r29
    1b40:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	0f 92       	push	r0
    1b48:	89 a1       	ldd	r24, Y+33	; 0x21
    1b4a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b4c:	09 f4       	brne	.+2      	; 0x1b50 <vQueueWaitForMessageRestricted+0x14>
    1b4e:	19 a2       	std	Y+33, r1	; 0x21
    1b50:	8a a1       	ldd	r24, Y+34	; 0x22
    1b52:	8f 3f       	cpi	r24, 0xFF	; 255
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <vQueueWaitForMessageRestricted+0x1c>
    1b56:	1a a2       	std	Y+34, r1	; 0x22
    1b58:	0f 90       	pop	r0
    1b5a:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1b5c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b5e:	81 11       	cpse	r24, r1
    1b60:	03 c0       	rjmp	.+6      	; 0x1b68 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1b62:	ce 01       	movw	r24, r28
    1b64:	43 96       	adiw	r24, 0x13	; 19
    1b66:	7c d7       	rcall	.+3832   	; 0x2a60 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1b68:	ce 01       	movw	r24, r28
    1b6a:	d0 dc       	rcall	.-1632   	; 0x150c <prvUnlockQueue>
    }
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	08 95       	ret

00001b72 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1b72:	fc 01       	movw	r30, r24
    1b74:	44 81       	ldd	r20, Z+4	; 0x04
    1b76:	55 81       	ldd	r21, Z+5	; 0x05
    1b78:	22 81       	ldd	r18, Z+2	; 0x02
    1b7a:	33 81       	ldd	r19, Z+3	; 0x03
    1b7c:	24 0f       	add	r18, r20
    1b7e:	35 1f       	adc	r19, r21
    1b80:	80 81       	ld	r24, Z
    1b82:	91 81       	ldd	r25, Z+1	; 0x01
    1b84:	b9 01       	movw	r22, r18
    1b86:	68 1b       	sub	r22, r24
    1b88:	79 0b       	sbc	r23, r25
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	64 17       	cp	r22, r20
    1b8e:	75 07       	cpc	r23, r21
    1b90:	10 f0       	brcs	.+4      	; 0x1b96 <prvBytesInBuffer+0x24>
    1b92:	84 1b       	sub	r24, r20
    1b94:	95 0b       	sbc	r25, r21
    1b96:	08 95       	ret

00001b98 <prvWriteBytesToBuffer>:
    1b98:	af 92       	push	r10
    1b9a:	bf 92       	push	r11
    1b9c:	cf 92       	push	r12
    1b9e:	df 92       	push	r13
    1ba0:	ef 92       	push	r14
    1ba2:	ff 92       	push	r15
    1ba4:	0f 93       	push	r16
    1ba6:	1f 93       	push	r17
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
    1bac:	6c 01       	movw	r12, r24
    1bae:	5b 01       	movw	r10, r22
    1bb0:	7a 01       	movw	r14, r20
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	c2 81       	ldd	r28, Z+2	; 0x02
    1bb6:	d3 81       	ldd	r29, Z+3	; 0x03
    1bb8:	04 81       	ldd	r16, Z+4	; 0x04
    1bba:	15 81       	ldd	r17, Z+5	; 0x05
    1bbc:	0c 1b       	sub	r16, r28
    1bbe:	1d 0b       	sbc	r17, r29
    1bc0:	40 17       	cp	r20, r16
    1bc2:	51 07       	cpc	r21, r17
    1bc4:	08 f4       	brcc	.+2      	; 0x1bc8 <prvWriteBytesToBuffer+0x30>
    1bc6:	8a 01       	movw	r16, r20
    1bc8:	f6 01       	movw	r30, r12
    1bca:	84 85       	ldd	r24, Z+12	; 0x0c
    1bcc:	95 85       	ldd	r25, Z+13	; 0x0d
    1bce:	a8 01       	movw	r20, r16
    1bd0:	b5 01       	movw	r22, r10
    1bd2:	8c 0f       	add	r24, r28
    1bd4:	9d 1f       	adc	r25, r29
    1bd6:	0e 94 a2 2c 	call	0x5944	; 0x5944 <memcpy>
    1bda:	0e 15       	cp	r16, r14
    1bdc:	1f 05       	cpc	r17, r15
    1bde:	58 f4       	brcc	.+22     	; 0x1bf6 <prvWriteBytesToBuffer+0x5e>
    1be0:	a7 01       	movw	r20, r14
    1be2:	40 1b       	sub	r20, r16
    1be4:	51 0b       	sbc	r21, r17
    1be6:	b5 01       	movw	r22, r10
    1be8:	60 0f       	add	r22, r16
    1bea:	71 1f       	adc	r23, r17
    1bec:	f6 01       	movw	r30, r12
    1bee:	84 85       	ldd	r24, Z+12	; 0x0c
    1bf0:	95 85       	ldd	r25, Z+13	; 0x0d
    1bf2:	0e 94 a2 2c 	call	0x5944	; 0x5944 <memcpy>
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	8e 0d       	add	r24, r14
    1bfa:	9f 1d       	adc	r25, r15
    1bfc:	f6 01       	movw	r30, r12
    1bfe:	24 81       	ldd	r18, Z+4	; 0x04
    1c00:	35 81       	ldd	r19, Z+5	; 0x05
    1c02:	82 17       	cp	r24, r18
    1c04:	93 07       	cpc	r25, r19
    1c06:	10 f0       	brcs	.+4      	; 0x1c0c <prvWriteBytesToBuffer+0x74>
    1c08:	82 1b       	sub	r24, r18
    1c0a:	93 0b       	sbc	r25, r19
    1c0c:	f6 01       	movw	r30, r12
    1c0e:	93 83       	std	Z+3, r25	; 0x03
    1c10:	82 83       	std	Z+2, r24	; 0x02
    1c12:	c7 01       	movw	r24, r14
    1c14:	df 91       	pop	r29
    1c16:	cf 91       	pop	r28
    1c18:	1f 91       	pop	r17
    1c1a:	0f 91       	pop	r16
    1c1c:	ff 90       	pop	r15
    1c1e:	ef 90       	pop	r14
    1c20:	df 90       	pop	r13
    1c22:	cf 90       	pop	r12
    1c24:	bf 90       	pop	r11
    1c26:	af 90       	pop	r10
    1c28:	08 95       	ret

00001c2a <prvWriteMessageToBuffer>:
    1c2a:	cf 92       	push	r12
    1c2c:	df 92       	push	r13
    1c2e:	ef 92       	push	r14
    1c30:	ff 92       	push	r15
    1c32:	0f 93       	push	r16
    1c34:	1f 93       	push	r17
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	1f 92       	push	r1
    1c3c:	1f 92       	push	r1
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	5a 83       	std	Y+2, r21	; 0x02
    1c44:	49 83       	std	Y+1, r20	; 0x01
    1c46:	21 15       	cp	r18, r1
    1c48:	31 05       	cpc	r19, r1
    1c4a:	c9 f0       	breq	.+50     	; 0x1c7e <prvWriteMessageToBuffer+0x54>
    1c4c:	6b 01       	movw	r12, r22
    1c4e:	7c 01       	movw	r14, r24
    1c50:	fc 01       	movw	r30, r24
    1c52:	86 85       	ldd	r24, Z+14	; 0x0e
    1c54:	80 fd       	sbrc	r24, 0
    1c56:	08 c0       	rjmp	.+16     	; 0x1c68 <prvWriteMessageToBuffer+0x3e>
    1c58:	ca 01       	movw	r24, r20
    1c5a:	24 17       	cp	r18, r20
    1c5c:	35 07       	cpc	r19, r21
    1c5e:	08 f4       	brcc	.+2      	; 0x1c62 <prvWriteMessageToBuffer+0x38>
    1c60:	c9 01       	movw	r24, r18
    1c62:	9a 83       	std	Y+2, r25	; 0x02
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	11 c0       	rjmp	.+34     	; 0x1c8a <prvWriteMessageToBuffer+0x60>
    1c68:	20 17       	cp	r18, r16
    1c6a:	31 07       	cpc	r19, r17
    1c6c:	58 f0       	brcs	.+22     	; 0x1c84 <prvWriteMessageToBuffer+0x5a>
    1c6e:	42 e0       	ldi	r20, 0x02	; 2
    1c70:	50 e0       	ldi	r21, 0x00	; 0
    1c72:	be 01       	movw	r22, r28
    1c74:	6f 5f       	subi	r22, 0xFF	; 255
    1c76:	7f 4f       	sbci	r23, 0xFF	; 255
    1c78:	c7 01       	movw	r24, r14
    1c7a:	8e df       	rcall	.-228    	; 0x1b98 <prvWriteBytesToBuffer>
    1c7c:	06 c0       	rjmp	.+12     	; 0x1c8a <prvWriteMessageToBuffer+0x60>
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	08 c0       	rjmp	.+16     	; 0x1c94 <prvWriteMessageToBuffer+0x6a>
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	05 c0       	rjmp	.+10     	; 0x1c94 <prvWriteMessageToBuffer+0x6a>
    1c8a:	49 81       	ldd	r20, Y+1	; 0x01
    1c8c:	5a 81       	ldd	r21, Y+2	; 0x02
    1c8e:	b6 01       	movw	r22, r12
    1c90:	c7 01       	movw	r24, r14
    1c92:	82 df       	rcall	.-252    	; 0x1b98 <prvWriteBytesToBuffer>
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	ff 90       	pop	r15
    1ca2:	ef 90       	pop	r14
    1ca4:	df 90       	pop	r13
    1ca6:	cf 90       	pop	r12
    1ca8:	08 95       	ret

00001caa <prvReadBytesFromBuffer>:
    1caa:	af 92       	push	r10
    1cac:	bf 92       	push	r11
    1cae:	cf 92       	push	r12
    1cb0:	df 92       	push	r13
    1cb2:	ef 92       	push	r14
    1cb4:	ff 92       	push	r15
    1cb6:	0f 93       	push	r16
    1cb8:	1f 93       	push	r17
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	7c 01       	movw	r14, r24
    1cc0:	5b 01       	movw	r10, r22
    1cc2:	e9 01       	movw	r28, r18
    1cc4:	42 17       	cp	r20, r18
    1cc6:	53 07       	cpc	r21, r19
    1cc8:	08 f4       	brcc	.+2      	; 0x1ccc <prvReadBytesFromBuffer+0x22>
    1cca:	ea 01       	movw	r28, r20
    1ccc:	20 97       	sbiw	r28, 0x00	; 0
    1cce:	79 f1       	breq	.+94     	; 0x1d2e <prvReadBytesFromBuffer+0x84>
    1cd0:	f7 01       	movw	r30, r14
    1cd2:	00 81       	ld	r16, Z
    1cd4:	11 81       	ldd	r17, Z+1	; 0x01
    1cd6:	c4 80       	ldd	r12, Z+4	; 0x04
    1cd8:	d5 80       	ldd	r13, Z+5	; 0x05
    1cda:	c0 1a       	sub	r12, r16
    1cdc:	d1 0a       	sbc	r13, r17
    1cde:	cc 15       	cp	r28, r12
    1ce0:	dd 05       	cpc	r29, r13
    1ce2:	08 f4       	brcc	.+2      	; 0x1ce6 <prvReadBytesFromBuffer+0x3c>
    1ce4:	6e 01       	movw	r12, r28
    1ce6:	f7 01       	movw	r30, r14
    1ce8:	64 85       	ldd	r22, Z+12	; 0x0c
    1cea:	75 85       	ldd	r23, Z+13	; 0x0d
    1cec:	60 0f       	add	r22, r16
    1cee:	71 1f       	adc	r23, r17
    1cf0:	a6 01       	movw	r20, r12
    1cf2:	c5 01       	movw	r24, r10
    1cf4:	0e 94 a2 2c 	call	0x5944	; 0x5944 <memcpy>
    1cf8:	cc 16       	cp	r12, r28
    1cfa:	dd 06       	cpc	r13, r29
    1cfc:	58 f4       	brcc	.+22     	; 0x1d14 <prvReadBytesFromBuffer+0x6a>
    1cfe:	ae 01       	movw	r20, r28
    1d00:	4c 19       	sub	r20, r12
    1d02:	5d 09       	sbc	r21, r13
    1d04:	f7 01       	movw	r30, r14
    1d06:	64 85       	ldd	r22, Z+12	; 0x0c
    1d08:	75 85       	ldd	r23, Z+13	; 0x0d
    1d0a:	c5 01       	movw	r24, r10
    1d0c:	8c 0d       	add	r24, r12
    1d0e:	9d 1d       	adc	r25, r13
    1d10:	0e 94 a2 2c 	call	0x5944	; 0x5944 <memcpy>
    1d14:	0c 0f       	add	r16, r28
    1d16:	1d 1f       	adc	r17, r29
    1d18:	f7 01       	movw	r30, r14
    1d1a:	84 81       	ldd	r24, Z+4	; 0x04
    1d1c:	95 81       	ldd	r25, Z+5	; 0x05
    1d1e:	08 17       	cp	r16, r24
    1d20:	19 07       	cpc	r17, r25
    1d22:	10 f0       	brcs	.+4      	; 0x1d28 <prvReadBytesFromBuffer+0x7e>
    1d24:	08 1b       	sub	r16, r24
    1d26:	19 0b       	sbc	r17, r25
    1d28:	f7 01       	movw	r30, r14
    1d2a:	11 83       	std	Z+1, r17	; 0x01
    1d2c:	00 83       	st	Z, r16
    1d2e:	ce 01       	movw	r24, r28
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	1f 91       	pop	r17
    1d36:	0f 91       	pop	r16
    1d38:	ff 90       	pop	r15
    1d3a:	ef 90       	pop	r14
    1d3c:	df 90       	pop	r13
    1d3e:	cf 90       	pop	r12
    1d40:	bf 90       	pop	r11
    1d42:	af 90       	pop	r10
    1d44:	08 95       	ret

00001d46 <xStreamBufferGenericCreate>:
    1d46:	ef 92       	push	r14
    1d48:	ff 92       	push	r15
    1d4a:	1f 93       	push	r17
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	eb 01       	movw	r28, r22
    1d52:	11 e0       	ldi	r17, 0x01	; 1
    1d54:	41 30       	cpi	r20, 0x01	; 1
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <xStreamBufferGenericCreate+0x14>
    1d58:	10 e0       	ldi	r17, 0x00	; 0
    1d5a:	20 97       	sbiw	r28, 0x00	; 0
    1d5c:	11 f4       	brne	.+4      	; 0x1d62 <xStreamBufferGenericCreate+0x1c>
    1d5e:	c1 e0       	ldi	r28, 0x01	; 1
    1d60:	d0 e0       	ldi	r29, 0x00	; 0
    1d62:	7c 01       	movw	r14, r24
    1d64:	2f ef       	ldi	r18, 0xFF	; 255
    1d66:	e2 1a       	sub	r14, r18
    1d68:	f2 0a       	sbc	r15, r18
    1d6a:	41 96       	adiw	r24, 0x11	; 17
    1d6c:	51 d8       	rcall	.-3934   	; 0xe10 <pvPortMalloc>
    1d6e:	00 97       	sbiw	r24, 0x00	; 0
    1d70:	81 f0       	breq	.+32     	; 0x1d92 <xStreamBufferGenericCreate+0x4c>
    1d72:	20 e1       	ldi	r18, 0x10	; 16
    1d74:	fc 01       	movw	r30, r24
    1d76:	11 92       	st	Z+, r1
    1d78:	2a 95       	dec	r18
    1d7a:	e9 f7       	brne	.-6      	; 0x1d76 <xStreamBufferGenericCreate+0x30>
    1d7c:	9c 01       	movw	r18, r24
    1d7e:	20 5f       	subi	r18, 0xF0	; 240
    1d80:	3f 4f       	sbci	r19, 0xFF	; 255
    1d82:	fc 01       	movw	r30, r24
    1d84:	35 87       	std	Z+13, r19	; 0x0d
    1d86:	24 87       	std	Z+12, r18	; 0x0c
    1d88:	f5 82       	std	Z+5, r15	; 0x05
    1d8a:	e4 82       	std	Z+4, r14	; 0x04
    1d8c:	d7 83       	std	Z+7, r29	; 0x07
    1d8e:	c6 83       	std	Z+6, r28	; 0x06
    1d90:	16 87       	std	Z+14, r17	; 0x0e
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	1f 91       	pop	r17
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	08 95       	ret

00001d9e <xStreamBufferReset>:
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	fc 01       	movw	r30, r24
    1da4:	27 85       	ldd	r18, Z+15	; 0x0f
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	0f 92       	push	r0
    1dac:	80 85       	ldd	r24, Z+8	; 0x08
    1dae:	91 85       	ldd	r25, Z+9	; 0x09
    1db0:	89 2b       	or	r24, r25
    1db2:	d1 f4       	brne	.+52     	; 0x1de8 <xStreamBufferReset+0x4a>
    1db4:	82 85       	ldd	r24, Z+10	; 0x0a
    1db6:	93 85       	ldd	r25, Z+11	; 0x0b
    1db8:	89 2b       	or	r24, r25
    1dba:	c1 f4       	brne	.+48     	; 0x1dec <xStreamBufferReset+0x4e>
    1dbc:	86 85       	ldd	r24, Z+14	; 0x0e
    1dbe:	46 81       	ldd	r20, Z+6	; 0x06
    1dc0:	57 81       	ldd	r21, Z+7	; 0x07
    1dc2:	64 81       	ldd	r22, Z+4	; 0x04
    1dc4:	75 81       	ldd	r23, Z+5	; 0x05
    1dc6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1dc8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1dca:	90 e1       	ldi	r25, 0x10	; 16
    1dcc:	ef 01       	movw	r28, r30
    1dce:	19 92       	st	Y+, r1
    1dd0:	9a 95       	dec	r25
    1dd2:	e9 f7       	brne	.-6      	; 0x1dce <xStreamBufferReset+0x30>
    1dd4:	b5 87       	std	Z+13, r27	; 0x0d
    1dd6:	a4 87       	std	Z+12, r26	; 0x0c
    1dd8:	75 83       	std	Z+5, r23	; 0x05
    1dda:	64 83       	std	Z+4, r22	; 0x04
    1ddc:	57 83       	std	Z+7, r21	; 0x07
    1dde:	46 83       	std	Z+6, r20	; 0x06
    1de0:	86 87       	std	Z+14, r24	; 0x0e
    1de2:	27 87       	std	Z+15, r18	; 0x0f
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	03 c0       	rjmp	.+6      	; 0x1dee <xStreamBufferReset+0x50>
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	01 c0       	rjmp	.+2      	; 0x1dee <xStreamBufferReset+0x50>
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	0f 90       	pop	r0
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	df 91       	pop	r29
    1df4:	cf 91       	pop	r28
    1df6:	08 95       	ret

00001df8 <xStreamBufferSpacesAvailable>:
    1df8:	fc 01       	movw	r30, r24
    1dfa:	24 81       	ldd	r18, Z+4	; 0x04
    1dfc:	35 81       	ldd	r19, Z+5	; 0x05
    1dfe:	80 81       	ld	r24, Z
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
    1e02:	42 81       	ldd	r20, Z+2	; 0x02
    1e04:	53 81       	ldd	r21, Z+3	; 0x03
    1e06:	82 0f       	add	r24, r18
    1e08:	93 1f       	adc	r25, r19
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	84 1b       	sub	r24, r20
    1e0e:	95 0b       	sbc	r25, r21
    1e10:	82 17       	cp	r24, r18
    1e12:	93 07       	cpc	r25, r19
    1e14:	10 f0       	brcs	.+4      	; 0x1e1a <xStreamBufferSpacesAvailable+0x22>
    1e16:	82 1b       	sub	r24, r18
    1e18:	93 0b       	sbc	r25, r19
    1e1a:	08 95       	ret

00001e1c <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1e1c:	2f 92       	push	r2
    1e1e:	3f 92       	push	r3
    1e20:	4f 92       	push	r4
    1e22:	5f 92       	push	r5
    1e24:	6f 92       	push	r6
    1e26:	7f 92       	push	r7
    1e28:	8f 92       	push	r8
    1e2a:	9f 92       	push	r9
    1e2c:	af 92       	push	r10
    1e2e:	bf 92       	push	r11
    1e30:	cf 92       	push	r12
    1e32:	df 92       	push	r13
    1e34:	ef 92       	push	r14
    1e36:	ff 92       	push	r15
    1e38:	0f 93       	push	r16
    1e3a:	1f 93       	push	r17
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	29 97       	sbiw	r28, 0x09	; 9
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	5c 01       	movw	r10, r24
    1e52:	1b 01       	movw	r2, r22
    1e54:	2a 01       	movw	r4, r20
    1e56:	0e 83       	std	Y+6, r16	; 0x06
    1e58:	1f 83       	std	Y+7, r17	; 0x07
    1e5a:	28 87       	std	Y+8, r18	; 0x08
    1e5c:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1e5e:	fc 01       	movw	r30, r24
    1e60:	86 85       	ldd	r24, Z+14	; 0x0e
    1e62:	80 ff       	sbrs	r24, 0
    1e64:	05 c0       	rjmp	.+10     	; 0x1e70 <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1e66:	3a 01       	movw	r6, r20
    1e68:	f2 e0       	ldi	r31, 0x02	; 2
    1e6a:	6f 0e       	add	r6, r31
    1e6c:	71 1c       	adc	r7, r1
    1e6e:	01 c0       	rjmp	.+2      	; 0x1e72 <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    1e70:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1e72:	8e 81       	ldd	r24, Y+6	; 0x06
    1e74:	9f 81       	ldd	r25, Y+7	; 0x07
    1e76:	a8 85       	ldd	r26, Y+8	; 0x08
    1e78:	b9 85       	ldd	r27, Y+9	; 0x09
    1e7a:	89 2b       	or	r24, r25
    1e7c:	8a 2b       	or	r24, r26
    1e7e:	8b 2b       	or	r24, r27
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <xStreamBufferSend+0x68>
    1e82:	35 c0       	rjmp	.+106    	; 0x1eee <xStreamBufferSend+0xd2>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1e84:	ce 01       	movw	r24, r28
    1e86:	01 96       	adiw	r24, 0x01	; 1
    1e88:	81 d6       	rcall	.+3330   	; 0x2b8c <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1e90:	c5 01       	movw	r24, r10
    1e92:	b2 df       	rcall	.-156    	; 0x1df8 <xStreamBufferSpacesAvailable>
    1e94:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    1e96:	86 15       	cp	r24, r6
    1e98:	97 05       	cpc	r25, r7
    1e9a:	20 f5       	brcc	.+72     	; 0x1ee4 <xStreamBufferSend+0xc8>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	0e 94 18 19 	call	0x3230	; 0x3230 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1ea4:	f3 d6       	rcall	.+3558   	; 0x2c8c <xTaskGetCurrentTaskHandle>
    1ea6:	f5 01       	movw	r30, r10
    1ea8:	93 87       	std	Z+11, r25	; 0x0b
    1eaa:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1eac:	0f 90       	pop	r0
    1eae:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1eb0:	ce 80       	ldd	r12, Y+6	; 0x06
    1eb2:	df 80       	ldd	r13, Y+7	; 0x07
    1eb4:	e8 84       	ldd	r14, Y+8	; 0x08
    1eb6:	f9 84       	ldd	r15, Y+9	; 0x09
    1eb8:	00 e0       	ldi	r16, 0x00	; 0
    1eba:	10 e0       	ldi	r17, 0x00	; 0
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	a9 01       	movw	r20, r18
    1ec2:	60 e0       	ldi	r22, 0x00	; 0
    1ec4:	70 e0       	ldi	r23, 0x00	; 0
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1ecc:	f5 01       	movw	r30, r10
    1ece:	13 86       	std	Z+11, r1	; 0x0b
    1ed0:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1ed2:	be 01       	movw	r22, r28
    1ed4:	6a 5f       	subi	r22, 0xFA	; 250
    1ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed8:	ce 01       	movw	r24, r28
    1eda:	01 96       	adiw	r24, 0x01	; 1
    1edc:	7e d6       	rcall	.+3324   	; 0x2bda <xTaskCheckForTimeOut>
    1ede:	88 23       	and	r24, r24
    1ee0:	a1 f2       	breq	.-88     	; 0x1e8a <xStreamBufferSend+0x6e>
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <xStreamBufferSend+0xcc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1ee4:	0f 90       	pop	r0
    1ee6:	0f be       	out	0x3f, r0	; 63
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1ee8:	81 14       	cp	r8, r1
    1eea:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1eec:	19 f4       	brne	.+6      	; 0x1ef4 <xStreamBufferSend+0xd8>
    1eee:	c5 01       	movw	r24, r10
    1ef0:	83 df       	rcall	.-250    	; 0x1df8 <xStreamBufferSpacesAvailable>
    1ef2:	4c 01       	movw	r8, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1ef4:	83 01       	movw	r16, r6
    1ef6:	94 01       	movw	r18, r8
    1ef8:	a2 01       	movw	r20, r4
    1efa:	b1 01       	movw	r22, r2
    1efc:	c5 01       	movw	r24, r10
    1efe:	95 de       	rcall	.-726    	; 0x1c2a <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    1f00:	7c 01       	movw	r14, r24
    1f02:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1f04:	e1 f0       	breq	.+56     	; 0x1f3e <xStreamBufferSend+0x122>
    1f06:	c5 01       	movw	r24, r10
    1f08:	34 de       	rcall	.-920    	; 0x1b72 <prvBytesInBuffer>
    1f0a:	f5 01       	movw	r30, r10
    1f0c:	26 81       	ldd	r18, Z+6	; 0x06
    1f0e:	37 81       	ldd	r19, Z+7	; 0x07
    1f10:	82 17       	cp	r24, r18
    1f12:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1f14:	a0 f0       	brcs	.+40     	; 0x1f3e <xStreamBufferSend+0x122>
    1f16:	0e d3       	rcall	.+1564   	; 0x2534 <vTaskSuspendAll>
    1f18:	f5 01       	movw	r30, r10
    1f1a:	80 85       	ldd	r24, Z+8	; 0x08
    1f1c:	91 85       	ldd	r25, Z+9	; 0x09
    1f1e:	89 2b       	or	r24, r25
    1f20:	69 f0       	breq	.+26     	; 0x1f3c <xStreamBufferSend+0x120>
    1f22:	80 85       	ldd	r24, Z+8	; 0x08
    1f24:	91 85       	ldd	r25, Z+9	; 0x09
    1f26:	00 e0       	ldi	r16, 0x00	; 0
    1f28:	10 e0       	ldi	r17, 0x00	; 0
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	40 e0       	ldi	r20, 0x00	; 0
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	ba 01       	movw	r22, r20
    1f32:	0e 94 17 18 	call	0x302e	; 0x302e <xTaskGenericNotify>
    1f36:	f5 01       	movw	r30, r10
    1f38:	11 86       	std	Z+9, r1	; 0x09
    1f3a:	10 86       	std	Z+8, r1	; 0x08
    1f3c:	e4 d3       	rcall	.+1992   	; 0x2706 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1f3e:	c7 01       	movw	r24, r14
    1f40:	29 96       	adiw	r28, 0x09	; 9
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	f8 94       	cli
    1f46:	de bf       	out	0x3e, r29	; 62
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	cd bf       	out	0x3d, r28	; 61
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	1f 91       	pop	r17
    1f52:	0f 91       	pop	r16
    1f54:	ff 90       	pop	r15
    1f56:	ef 90       	pop	r14
    1f58:	df 90       	pop	r13
    1f5a:	cf 90       	pop	r12
    1f5c:	bf 90       	pop	r11
    1f5e:	af 90       	pop	r10
    1f60:	9f 90       	pop	r9
    1f62:	8f 90       	pop	r8
    1f64:	7f 90       	pop	r7
    1f66:	6f 90       	pop	r6
    1f68:	5f 90       	pop	r5
    1f6a:	4f 90       	pop	r4
    1f6c:	3f 90       	pop	r3
    1f6e:	2f 90       	pop	r2
    1f70:	08 95       	ret

00001f72 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1f72:	af 92       	push	r10
    1f74:	bf 92       	push	r11
    1f76:	cf 92       	push	r12
    1f78:	df 92       	push	r13
    1f7a:	ef 92       	push	r14
    1f7c:	ff 92       	push	r15
    1f7e:	0f 93       	push	r16
    1f80:	1f 93       	push	r17
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
    1f86:	ec 01       	movw	r28, r24
    1f88:	5b 01       	movw	r10, r22
    1f8a:	6a 01       	movw	r12, r20
    1f8c:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1f8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f90:	80 ff       	sbrs	r24, 0
    1f92:	04 c0       	rjmp	.+8      	; 0x1f9c <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1f94:	8a 01       	movw	r16, r20
    1f96:	0e 5f       	subi	r16, 0xFE	; 254
    1f98:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9a:	01 c0       	rjmp	.+2      	; 0x1f9e <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    1f9c:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	2b df       	rcall	.-426    	; 0x1df8 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1fa2:	9c 01       	movw	r18, r24
    1fa4:	a6 01       	movw	r20, r12
    1fa6:	b5 01       	movw	r22, r10
    1fa8:	ce 01       	movw	r24, r28
    1faa:	3f de       	rcall	.-898    	; 0x1c2a <prvWriteMessageToBuffer>
    1fac:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1fae:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1fb0:	b9 f0       	breq	.+46     	; 0x1fe0 <xStreamBufferSendFromISR+0x6e>
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	de dd       	rcall	.-1092   	; 0x1b72 <prvBytesInBuffer>
    1fb6:	2e 81       	ldd	r18, Y+6	; 0x06
    1fb8:	3f 81       	ldd	r19, Y+7	; 0x07
    1fba:	82 17       	cp	r24, r18
    1fbc:	93 07       	cpc	r25, r19
    1fbe:	80 f0       	brcs	.+32     	; 0x1fe0 <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1fc0:	88 85       	ldd	r24, Y+8	; 0x08
    1fc2:	99 85       	ldd	r25, Y+9	; 0x09
    1fc4:	89 2b       	or	r24, r25
    1fc6:	61 f0       	breq	.+24     	; 0x1fe0 <xStreamBufferSendFromISR+0x6e>
    1fc8:	88 85       	ldd	r24, Y+8	; 0x08
    1fca:	99 85       	ldd	r25, Y+9	; 0x09
    1fcc:	00 e0       	ldi	r16, 0x00	; 0
    1fce:	10 e0       	ldi	r17, 0x00	; 0
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	50 e0       	ldi	r21, 0x00	; 0
    1fd6:	ba 01       	movw	r22, r20
    1fd8:	0e 94 8f 18 	call	0x311e	; 0x311e <xTaskGenericNotifyFromISR>
    1fdc:	19 86       	std	Y+9, r1	; 0x09
    1fde:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1fe0:	c6 01       	movw	r24, r12
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	ff 90       	pop	r15
    1fec:	ef 90       	pop	r14
    1fee:	df 90       	pop	r13
    1ff0:	cf 90       	pop	r12
    1ff2:	bf 90       	pop	r11
    1ff4:	af 90       	pop	r10
    1ff6:	08 95       	ret

00001ff8 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1ff8:	4f 92       	push	r4
    1ffa:	5f 92       	push	r5
    1ffc:	6f 92       	push	r6
    1ffe:	7f 92       	push	r7
    2000:	8f 92       	push	r8
    2002:	9f 92       	push	r9
    2004:	af 92       	push	r10
    2006:	bf 92       	push	r11
    2008:	cf 92       	push	r12
    200a:	df 92       	push	r13
    200c:	ef 92       	push	r14
    200e:	ff 92       	push	r15
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
    2018:	1f 92       	push	r1
    201a:	1f 92       	push	r1
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	5c 01       	movw	r10, r24
    2022:	2b 01       	movw	r4, r22
    2024:	3a 01       	movw	r6, r20
    2026:	68 01       	movw	r12, r16
    2028:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    202a:	fc 01       	movw	r30, r24
    202c:	86 85       	ldd	r24, Z+14	; 0x0e
    202e:	80 fd       	sbrc	r24, 0
    2030:	03 c0       	rjmp	.+6      	; 0x2038 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2032:	81 2c       	mov	r8, r1
    2034:	91 2c       	mov	r9, r1
    2036:	04 c0       	rjmp	.+8      	; 0x2040 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2038:	68 94       	set
    203a:	88 24       	eor	r8, r8
    203c:	81 f8       	bld	r8, 1
    203e:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2040:	c1 14       	cp	r12, r1
    2042:	d1 04       	cpc	r13, r1
    2044:	e1 04       	cpc	r14, r1
    2046:	f1 04       	cpc	r15, r1
    2048:	31 f1       	breq	.+76     	; 0x2096 <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2050:	c5 01       	movw	r24, r10
    2052:	8f dd       	rcall	.-1250   	; 0x1b72 <prvBytesInBuffer>
    2054:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2056:	88 16       	cp	r8, r24
    2058:	99 06       	cpc	r9, r25
    205a:	40 f0       	brcs	.+16     	; 0x206c <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	0e 94 18 19 	call	0x3230	; 0x3230 <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    2064:	13 d6       	rcall	.+3110   	; 0x2c8c <xTaskGetCurrentTaskHandle>
    2066:	f5 01       	movw	r30, r10
    2068:	91 87       	std	Z+9, r25	; 0x09
    206a:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    206c:	0f 90       	pop	r0
    206e:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2070:	80 16       	cp	r8, r16
    2072:	91 06       	cpc	r9, r17
    2074:	b0 f0       	brcs	.+44     	; 0x20a2 <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2076:	00 e0       	ldi	r16, 0x00	; 0
    2078:	10 e0       	ldi	r17, 0x00	; 0
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	a9 01       	movw	r20, r18
    2080:	60 e0       	ldi	r22, 0x00	; 0
    2082:	70 e0       	ldi	r23, 0x00	; 0
    2084:	cb 01       	movw	r24, r22
    2086:	49 d7       	rcall	.+3730   	; 0x2f1a <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    2088:	f5 01       	movw	r30, r10
    208a:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    208c:	10 86       	std	Z+8, r1	; 0x08
    208e:	c5 01       	movw	r24, r10
    2090:	70 dd       	rcall	.-1312   	; 0x1b72 <prvBytesInBuffer>
    2092:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2094:	03 c0       	rjmp	.+6      	; 0x209c <xStreamBufferReceive+0xa4>
    2096:	c5 01       	movw	r24, r10
    2098:	6c dd       	rcall	.-1320   	; 0x1b72 <prvBytesInBuffer>
    209a:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    209c:	80 16       	cp	r8, r16
    209e:	91 06       	cpc	r9, r17
    20a0:	b8 f5       	brcc	.+110    	; 0x2110 <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    20a2:	81 14       	cp	r8, r1
    20a4:	91 04       	cpc	r9, r1
    20a6:	c1 f0       	breq	.+48     	; 0x20d8 <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    20a8:	f5 01       	movw	r30, r10
    20aa:	e0 80       	ld	r14, Z
    20ac:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    20ae:	98 01       	movw	r18, r16
    20b0:	a4 01       	movw	r20, r8
    20b2:	be 01       	movw	r22, r28
    20b4:	6f 5f       	subi	r22, 0xFF	; 255
    20b6:	7f 4f       	sbci	r23, 0xFF	; 255
    20b8:	c5 01       	movw	r24, r10
    20ba:	f7 dd       	rcall	.-1042   	; 0x1caa <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    20c0:	08 19       	sub	r16, r8
    20c2:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    20c4:	68 16       	cp	r6, r24
    20c6:	79 06       	cpc	r7, r25
    20c8:	30 f4       	brcc	.+12     	; 0x20d6 <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    20ca:	f5 01       	movw	r30, r10
    20cc:	f1 82       	std	Z+1, r15	; 0x01
    20ce:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    20d0:	61 2c       	mov	r6, r1
    20d2:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    20d4:	01 c0       	rjmp	.+2      	; 0x20d8 <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    20d6:	3c 01       	movw	r6, r24
    20d8:	98 01       	movw	r18, r16
    20da:	a3 01       	movw	r20, r6
    20dc:	b2 01       	movw	r22, r4
    20de:	c5 01       	movw	r24, r10
    20e0:	e4 dd       	rcall	.-1080   	; 0x1caa <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    20e2:	7c 01       	movw	r14, r24
    20e4:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    20e6:	b1 f0       	breq	.+44     	; 0x2114 <xStreamBufferReceive+0x11c>
    20e8:	25 d2       	rcall	.+1098   	; 0x2534 <vTaskSuspendAll>
    20ea:	f5 01       	movw	r30, r10
    20ec:	82 85       	ldd	r24, Z+10	; 0x0a
    20ee:	93 85       	ldd	r25, Z+11	; 0x0b
    20f0:	89 2b       	or	r24, r25
    20f2:	61 f0       	breq	.+24     	; 0x210c <xStreamBufferReceive+0x114>
    20f4:	82 85       	ldd	r24, Z+10	; 0x0a
    20f6:	93 85       	ldd	r25, Z+11	; 0x0b
    20f8:	00 e0       	ldi	r16, 0x00	; 0
    20fa:	10 e0       	ldi	r17, 0x00	; 0
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	40 e0       	ldi	r20, 0x00	; 0
    2100:	50 e0       	ldi	r21, 0x00	; 0
    2102:	ba 01       	movw	r22, r20
    2104:	94 d7       	rcall	.+3880   	; 0x302e <xTaskGenericNotify>
    2106:	f5 01       	movw	r30, r10
    2108:	13 86       	std	Z+11, r1	; 0x0b
    210a:	12 86       	std	Z+10, r1	; 0x0a
    210c:	fc d2       	rcall	.+1528   	; 0x2706 <xTaskResumeAll>
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2110:	e1 2c       	mov	r14, r1
    2112:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    2114:	c7 01       	movw	r24, r14
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	1f 91       	pop	r17
    2120:	0f 91       	pop	r16
    2122:	ff 90       	pop	r15
    2124:	ef 90       	pop	r14
    2126:	df 90       	pop	r13
    2128:	cf 90       	pop	r12
    212a:	bf 90       	pop	r11
    212c:	af 90       	pop	r10
    212e:	9f 90       	pop	r9
    2130:	8f 90       	pop	r8
    2132:	7f 90       	pop	r7
    2134:	6f 90       	pop	r6
    2136:	5f 90       	pop	r5
    2138:	4f 90       	pop	r4
    213a:	08 95       	ret

0000213c <prvResetNextTaskUnblockTime>:
    213c:	e0 91 b8 18 	lds	r30, 0x18B8	; 0x8018b8 <pxDelayedTaskList>
    2140:	f0 91 b9 18 	lds	r31, 0x18B9	; 0x8018b9 <pxDelayedTaskList+0x1>
    2144:	80 81       	ld	r24, Z
    2146:	81 11       	cpse	r24, r1
    2148:	0c c0       	rjmp	.+24     	; 0x2162 <prvResetNextTaskUnblockTime+0x26>
    214a:	8f ef       	ldi	r24, 0xFF	; 255
    214c:	9f ef       	ldi	r25, 0xFF	; 255
    214e:	dc 01       	movw	r26, r24
    2150:	80 93 85 18 	sts	0x1885, r24	; 0x801885 <xNextTaskUnblockTime>
    2154:	90 93 86 18 	sts	0x1886, r25	; 0x801886 <xNextTaskUnblockTime+0x1>
    2158:	a0 93 87 18 	sts	0x1887, r26	; 0x801887 <xNextTaskUnblockTime+0x2>
    215c:	b0 93 88 18 	sts	0x1888, r27	; 0x801888 <xNextTaskUnblockTime+0x3>
    2160:	08 95       	ret
    2162:	e0 91 b8 18 	lds	r30, 0x18B8	; 0x8018b8 <pxDelayedTaskList>
    2166:	f0 91 b9 18 	lds	r31, 0x18B9	; 0x8018b9 <pxDelayedTaskList+0x1>
    216a:	07 80       	ldd	r0, Z+7	; 0x07
    216c:	f0 85       	ldd	r31, Z+8	; 0x08
    216e:	e0 2d       	mov	r30, r0
    2170:	00 84       	ldd	r0, Z+8	; 0x08
    2172:	f1 85       	ldd	r31, Z+9	; 0x09
    2174:	e0 2d       	mov	r30, r0
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	93 81       	ldd	r25, Z+3	; 0x03
    217a:	a4 81       	ldd	r26, Z+4	; 0x04
    217c:	b5 81       	ldd	r27, Z+5	; 0x05
    217e:	80 93 85 18 	sts	0x1885, r24	; 0x801885 <xNextTaskUnblockTime>
    2182:	90 93 86 18 	sts	0x1886, r25	; 0x801886 <xNextTaskUnblockTime+0x1>
    2186:	a0 93 87 18 	sts	0x1887, r26	; 0x801887 <xNextTaskUnblockTime+0x2>
    218a:	b0 93 88 18 	sts	0x1888, r27	; 0x801888 <xNextTaskUnblockTime+0x3>
    218e:	08 95       	ret

00002190 <prvAddCurrentTaskToDelayedList>:
    2190:	8f 92       	push	r8
    2192:	9f 92       	push	r9
    2194:	af 92       	push	r10
    2196:	bf 92       	push	r11
    2198:	cf 92       	push	r12
    219a:	df 92       	push	r13
    219c:	ef 92       	push	r14
    219e:	ff 92       	push	r15
    21a0:	cf 93       	push	r28
    21a2:	6b 01       	movw	r12, r22
    21a4:	7c 01       	movw	r14, r24
    21a6:	c4 2f       	mov	r28, r20
    21a8:	80 90 8f 18 	lds	r8, 0x188F	; 0x80188f <xTickCount>
    21ac:	90 90 90 18 	lds	r9, 0x1890	; 0x801890 <xTickCount+0x1>
    21b0:	a0 90 91 18 	lds	r10, 0x1891	; 0x801891 <xTickCount+0x2>
    21b4:	b0 90 92 18 	lds	r11, 0x1892	; 0x801892 <xTickCount+0x3>
    21b8:	80 91 fc 18 	lds	r24, 0x18FC	; 0x8018fc <pxCurrentTCB>
    21bc:	90 91 fd 18 	lds	r25, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    21c0:	02 96       	adiw	r24, 0x02	; 2
    21c2:	0e 94 65 08 	call	0x10ca	; 0x10ca <uxListRemove>
    21c6:	8f ef       	ldi	r24, 0xFF	; 255
    21c8:	c8 16       	cp	r12, r24
    21ca:	d8 06       	cpc	r13, r24
    21cc:	e8 06       	cpc	r14, r24
    21ce:	f8 06       	cpc	r15, r24
    21d0:	69 f4       	brne	.+26     	; 0x21ec <prvAddCurrentTaskToDelayedList+0x5c>
    21d2:	cc 23       	and	r28, r28
    21d4:	59 f0       	breq	.+22     	; 0x21ec <prvAddCurrentTaskToDelayedList+0x5c>
    21d6:	60 91 fc 18 	lds	r22, 0x18FC	; 0x8018fc <pxCurrentTCB>
    21da:	70 91 fd 18 	lds	r23, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    21de:	6e 5f       	subi	r22, 0xFE	; 254
    21e0:	7f 4f       	sbci	r23, 0xFF	; 255
    21e2:	84 e9       	ldi	r24, 0x94	; 148
    21e4:	98 e1       	ldi	r25, 0x18	; 24
    21e6:	0e 94 07 08 	call	0x100e	; 0x100e <vListInsertEnd>
    21ea:	3f c0       	rjmp	.+126    	; 0x226a <__stack+0x6b>
    21ec:	c8 0c       	add	r12, r8
    21ee:	d9 1c       	adc	r13, r9
    21f0:	ea 1c       	adc	r14, r10
    21f2:	fb 1c       	adc	r15, r11
    21f4:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    21f8:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    21fc:	c2 82       	std	Z+2, r12	; 0x02
    21fe:	d3 82       	std	Z+3, r13	; 0x03
    2200:	e4 82       	std	Z+4, r14	; 0x04
    2202:	f5 82       	std	Z+5, r15	; 0x05
    2204:	c8 14       	cp	r12, r8
    2206:	d9 04       	cpc	r13, r9
    2208:	ea 04       	cpc	r14, r10
    220a:	fb 04       	cpc	r15, r11
    220c:	68 f4       	brcc	.+26     	; 0x2228 <__stack+0x29>
    220e:	60 91 fc 18 	lds	r22, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2212:	70 91 fd 18 	lds	r23, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2216:	80 91 b6 18 	lds	r24, 0x18B6	; 0x8018b6 <pxOverflowDelayedTaskList>
    221a:	90 91 b7 18 	lds	r25, 0x18B7	; 0x8018b7 <pxOverflowDelayedTaskList+0x1>
    221e:	6e 5f       	subi	r22, 0xFE	; 254
    2220:	7f 4f       	sbci	r23, 0xFF	; 255
    2222:	0e 94 28 08 	call	0x1050	; 0x1050 <vListInsert>
    2226:	21 c0       	rjmp	.+66     	; 0x226a <__stack+0x6b>
    2228:	60 91 fc 18 	lds	r22, 0x18FC	; 0x8018fc <pxCurrentTCB>
    222c:	70 91 fd 18 	lds	r23, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2230:	80 91 b8 18 	lds	r24, 0x18B8	; 0x8018b8 <pxDelayedTaskList>
    2234:	90 91 b9 18 	lds	r25, 0x18B9	; 0x8018b9 <pxDelayedTaskList+0x1>
    2238:	6e 5f       	subi	r22, 0xFE	; 254
    223a:	7f 4f       	sbci	r23, 0xFF	; 255
    223c:	0e 94 28 08 	call	0x1050	; 0x1050 <vListInsert>
    2240:	80 91 85 18 	lds	r24, 0x1885	; 0x801885 <xNextTaskUnblockTime>
    2244:	90 91 86 18 	lds	r25, 0x1886	; 0x801886 <xNextTaskUnblockTime+0x1>
    2248:	a0 91 87 18 	lds	r26, 0x1887	; 0x801887 <xNextTaskUnblockTime+0x2>
    224c:	b0 91 88 18 	lds	r27, 0x1888	; 0x801888 <xNextTaskUnblockTime+0x3>
    2250:	c8 16       	cp	r12, r24
    2252:	d9 06       	cpc	r13, r25
    2254:	ea 06       	cpc	r14, r26
    2256:	fb 06       	cpc	r15, r27
    2258:	40 f4       	brcc	.+16     	; 0x226a <__stack+0x6b>
    225a:	c0 92 85 18 	sts	0x1885, r12	; 0x801885 <xNextTaskUnblockTime>
    225e:	d0 92 86 18 	sts	0x1886, r13	; 0x801886 <xNextTaskUnblockTime+0x1>
    2262:	e0 92 87 18 	sts	0x1887, r14	; 0x801887 <xNextTaskUnblockTime+0x2>
    2266:	f0 92 88 18 	sts	0x1888, r15	; 0x801888 <xNextTaskUnblockTime+0x3>
    226a:	cf 91       	pop	r28
    226c:	ff 90       	pop	r15
    226e:	ef 90       	pop	r14
    2270:	df 90       	pop	r13
    2272:	cf 90       	pop	r12
    2274:	bf 90       	pop	r11
    2276:	af 90       	pop	r10
    2278:	9f 90       	pop	r9
    227a:	8f 90       	pop	r8
    227c:	08 95       	ret

0000227e <xTaskCreate>:
    227e:	4f 92       	push	r4
    2280:	5f 92       	push	r5
    2282:	6f 92       	push	r6
    2284:	7f 92       	push	r7
    2286:	8f 92       	push	r8
    2288:	9f 92       	push	r9
    228a:	af 92       	push	r10
    228c:	bf 92       	push	r11
    228e:	cf 92       	push	r12
    2290:	df 92       	push	r13
    2292:	ef 92       	push	r14
    2294:	ff 92       	push	r15
    2296:	0f 93       	push	r16
    2298:	cf 93       	push	r28
    229a:	df 93       	push	r29
    229c:	4c 01       	movw	r8, r24
    229e:	6b 01       	movw	r12, r22
    22a0:	5a 01       	movw	r10, r20
    22a2:	29 01       	movw	r4, r18
    22a4:	ca 01       	movw	r24, r20
    22a6:	0e 94 08 07 	call	0xe10	; 0xe10 <pvPortMalloc>
    22aa:	3c 01       	movw	r6, r24
    22ac:	89 2b       	or	r24, r25
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <xTaskCreate+0x34>
    22b0:	f4 c0       	rjmp	.+488    	; 0x249a <xTaskCreate+0x21c>
    22b2:	80 e3       	ldi	r24, 0x30	; 48
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	0e 94 08 07 	call	0xe10	; 0xe10 <pvPortMalloc>
    22ba:	ec 01       	movw	r28, r24
    22bc:	89 2b       	or	r24, r25
    22be:	99 f0       	breq	.+38     	; 0x22e6 <xTaskCreate+0x68>
    22c0:	7c 8e       	std	Y+28, r7	; 0x1c
    22c2:	6b 8e       	std	Y+27, r6	; 0x1b
    22c4:	a5 01       	movw	r20, r10
    22c6:	65 ea       	ldi	r22, 0xA5	; 165
    22c8:	70 e0       	ldi	r23, 0x00	; 0
    22ca:	c3 01       	movw	r24, r6
    22cc:	0e 94 ab 2c 	call	0x5956	; 0x5956 <memset>
    22d0:	21 e0       	ldi	r18, 0x01	; 1
    22d2:	a2 1a       	sub	r10, r18
    22d4:	b1 08       	sbc	r11, r1
    22d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22da:	a8 0e       	add	r10, r24
    22dc:	b9 1e       	adc	r11, r25
    22de:	c1 14       	cp	r12, r1
    22e0:	d1 04       	cpc	r13, r1
    22e2:	29 f4       	brne	.+10     	; 0x22ee <xTaskCreate+0x70>
    22e4:	20 c0       	rjmp	.+64     	; 0x2326 <xTaskCreate+0xa8>
    22e6:	c3 01       	movw	r24, r6
    22e8:	0e 94 c1 07 	call	0xf82	; 0xf82 <vPortFree>
    22ec:	d6 c0       	rjmp	.+428    	; 0x249a <xTaskCreate+0x21c>
    22ee:	d6 01       	movw	r26, r12
    22f0:	8c 91       	ld	r24, X
    22f2:	8d 8f       	std	Y+29, r24	; 0x1d
    22f4:	8c 91       	ld	r24, X
    22f6:	88 23       	and	r24, r24
    22f8:	a1 f0       	breq	.+40     	; 0x2322 <xTaskCreate+0xa4>
    22fa:	ae 01       	movw	r20, r28
    22fc:	42 5e       	subi	r20, 0xE2	; 226
    22fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2300:	f6 01       	movw	r30, r12
    2302:	31 96       	adiw	r30, 0x01	; 1
    2304:	b8 e0       	ldi	r27, 0x08	; 8
    2306:	cb 0e       	add	r12, r27
    2308:	d1 1c       	adc	r13, r1
    230a:	cf 01       	movw	r24, r30
    230c:	21 91       	ld	r18, Z+
    230e:	da 01       	movw	r26, r20
    2310:	2d 93       	st	X+, r18
    2312:	ad 01       	movw	r20, r26
    2314:	dc 01       	movw	r26, r24
    2316:	8c 91       	ld	r24, X
    2318:	88 23       	and	r24, r24
    231a:	19 f0       	breq	.+6      	; 0x2322 <xTaskCreate+0xa4>
    231c:	ec 15       	cp	r30, r12
    231e:	fd 05       	cpc	r31, r13
    2320:	a1 f7       	brne	.-24     	; 0x230a <xTaskCreate+0x8c>
    2322:	1c a2       	std	Y+36, r1	; 0x24
    2324:	01 c0       	rjmp	.+2      	; 0x2328 <xTaskCreate+0xaa>
    2326:	1d 8e       	std	Y+29, r1	; 0x1d
    2328:	04 30       	cpi	r16, 0x04	; 4
    232a:	08 f0       	brcs	.+2      	; 0x232e <xTaskCreate+0xb0>
    232c:	03 e0       	ldi	r16, 0x03	; 3
    232e:	0a 8f       	std	Y+26, r16	; 0x1a
    2330:	0f a3       	std	Y+39, r16	; 0x27
    2332:	18 a6       	std	Y+40, r1	; 0x28
    2334:	6e 01       	movw	r12, r28
    2336:	b2 e0       	ldi	r27, 0x02	; 2
    2338:	cb 0e       	add	r12, r27
    233a:	d1 1c       	adc	r13, r1
    233c:	c6 01       	movw	r24, r12
    233e:	0e 94 03 08 	call	0x1006	; 0x1006 <vListInitialiseItem>
    2342:	ce 01       	movw	r24, r28
    2344:	0e 96       	adiw	r24, 0x0e	; 14
    2346:	0e 94 03 08 	call	0x1006	; 0x1006 <vListInitialiseItem>
    234a:	db 87       	std	Y+11, r29	; 0x0b
    234c:	ca 87       	std	Y+10, r28	; 0x0a
    234e:	84 e0       	ldi	r24, 0x04	; 4
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	a0 e0       	ldi	r26, 0x00	; 0
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	80 1b       	sub	r24, r16
    2358:	91 09       	sbc	r25, r1
    235a:	a1 09       	sbc	r26, r1
    235c:	b1 09       	sbc	r27, r1
    235e:	8e 87       	std	Y+14, r24	; 0x0e
    2360:	9f 87       	std	Y+15, r25	; 0x0f
    2362:	a8 8b       	std	Y+16, r26	; 0x10
    2364:	b9 8b       	std	Y+17, r27	; 0x11
    2366:	df 8b       	std	Y+23, r29	; 0x17
    2368:	ce 8b       	std	Y+22, r28	; 0x16
    236a:	1a a6       	std	Y+42, r1	; 0x2a
    236c:	19 a6       	std	Y+41, r1	; 0x29
    236e:	1b a6       	std	Y+43, r1	; 0x2b
    2370:	1c a6       	std	Y+44, r1	; 0x2c
    2372:	1d a6       	std	Y+45, r1	; 0x2d
    2374:	1e a6       	std	Y+46, r1	; 0x2e
    2376:	1f a6       	std	Y+47, r1	; 0x2f
    2378:	a2 01       	movw	r20, r4
    237a:	b4 01       	movw	r22, r8
    237c:	c5 01       	movw	r24, r10
    237e:	0e 94 8c 08 	call	0x1118	; 0x1118 <pxPortInitialiseStack>
    2382:	99 83       	std	Y+1, r25	; 0x01
    2384:	88 83       	st	Y, r24
    2386:	e1 14       	cp	r14, r1
    2388:	f1 04       	cpc	r15, r1
    238a:	19 f0       	breq	.+6      	; 0x2392 <xTaskCreate+0x114>
    238c:	f7 01       	movw	r30, r14
    238e:	d1 83       	std	Z+1, r29	; 0x01
    2390:	c0 83       	st	Z, r28
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	0f 92       	push	r0
    2398:	80 91 93 18 	lds	r24, 0x1893	; 0x801893 <uxCurrentNumberOfTasks>
    239c:	8f 5f       	subi	r24, 0xFF	; 255
    239e:	80 93 93 18 	sts	0x1893, r24	; 0x801893 <uxCurrentNumberOfTasks>
    23a2:	80 91 fc 18 	lds	r24, 0x18FC	; 0x8018fc <pxCurrentTCB>
    23a6:	90 91 fd 18 	lds	r25, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    23aa:	89 2b       	or	r24, r25
    23ac:	d1 f5       	brne	.+116    	; 0x2422 <xTaskCreate+0x1a4>
    23ae:	d0 93 fd 18 	sts	0x18FD, r29	; 0x8018fd <pxCurrentTCB+0x1>
    23b2:	c0 93 fc 18 	sts	0x18FC, r28	; 0x8018fc <pxCurrentTCB>
    23b6:	80 91 93 18 	lds	r24, 0x1893	; 0x801893 <uxCurrentNumberOfTasks>
    23ba:	81 30       	cpi	r24, 0x01	; 1
    23bc:	09 f0       	breq	.+2      	; 0x23c0 <xTaskCreate+0x142>
    23be:	41 c0       	rjmp	.+130    	; 0x2442 <xTaskCreate+0x1c4>
    23c0:	80 ed       	ldi	r24, 0xD0	; 208
    23c2:	98 e1       	ldi	r25, 0x18	; 24
    23c4:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <vListInitialise>
    23c8:	8b ed       	ldi	r24, 0xDB	; 219
    23ca:	98 e1       	ldi	r25, 0x18	; 24
    23cc:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <vListInitialise>
    23d0:	86 ee       	ldi	r24, 0xE6	; 230
    23d2:	98 e1       	ldi	r25, 0x18	; 24
    23d4:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <vListInitialise>
    23d8:	81 ef       	ldi	r24, 0xF1	; 241
    23da:	98 e1       	ldi	r25, 0x18	; 24
    23dc:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <vListInitialise>
    23e0:	85 ec       	ldi	r24, 0xC5	; 197
    23e2:	98 e1       	ldi	r25, 0x18	; 24
    23e4:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <vListInitialise>
    23e8:	8a eb       	ldi	r24, 0xBA	; 186
    23ea:	98 e1       	ldi	r25, 0x18	; 24
    23ec:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <vListInitialise>
    23f0:	8b ea       	ldi	r24, 0xAB	; 171
    23f2:	98 e1       	ldi	r25, 0x18	; 24
    23f4:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <vListInitialise>
    23f8:	80 ea       	ldi	r24, 0xA0	; 160
    23fa:	98 e1       	ldi	r25, 0x18	; 24
    23fc:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <vListInitialise>
    2400:	84 e9       	ldi	r24, 0x94	; 148
    2402:	98 e1       	ldi	r25, 0x18	; 24
    2404:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <vListInitialise>
    2408:	85 ec       	ldi	r24, 0xC5	; 197
    240a:	98 e1       	ldi	r25, 0x18	; 24
    240c:	90 93 b9 18 	sts	0x18B9, r25	; 0x8018b9 <pxDelayedTaskList+0x1>
    2410:	80 93 b8 18 	sts	0x18B8, r24	; 0x8018b8 <pxDelayedTaskList>
    2414:	8a eb       	ldi	r24, 0xBA	; 186
    2416:	98 e1       	ldi	r25, 0x18	; 24
    2418:	90 93 b7 18 	sts	0x18B7, r25	; 0x8018b7 <pxOverflowDelayedTaskList+0x1>
    241c:	80 93 b6 18 	sts	0x18B6, r24	; 0x8018b6 <pxOverflowDelayedTaskList>
    2420:	10 c0       	rjmp	.+32     	; 0x2442 <xTaskCreate+0x1c4>
    2422:	80 91 8d 18 	lds	r24, 0x188D	; 0x80188d <xSchedulerRunning>
    2426:	81 11       	cpse	r24, r1
    2428:	0c c0       	rjmp	.+24     	; 0x2442 <xTaskCreate+0x1c4>
    242a:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    242e:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2432:	92 8d       	ldd	r25, Z+26	; 0x1a
    2434:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2436:	89 17       	cp	r24, r25
    2438:	20 f0       	brcs	.+8      	; 0x2442 <xTaskCreate+0x1c4>
    243a:	d0 93 fd 18 	sts	0x18FD, r29	; 0x8018fd <pxCurrentTCB+0x1>
    243e:	c0 93 fc 18 	sts	0x18FC, r28	; 0x8018fc <pxCurrentTCB>
    2442:	80 91 89 18 	lds	r24, 0x1889	; 0x801889 <uxTaskNumber>
    2446:	8f 5f       	subi	r24, 0xFF	; 255
    2448:	80 93 89 18 	sts	0x1889, r24	; 0x801889 <uxTaskNumber>
    244c:	8d a3       	std	Y+37, r24	; 0x25
    244e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2450:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    2454:	98 17       	cp	r25, r24
    2456:	10 f4       	brcc	.+4      	; 0x245c <xTaskCreate+0x1de>
    2458:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    245c:	fb e0       	ldi	r31, 0x0B	; 11
    245e:	8f 9f       	mul	r24, r31
    2460:	c0 01       	movw	r24, r0
    2462:	11 24       	eor	r1, r1
    2464:	b6 01       	movw	r22, r12
    2466:	80 53       	subi	r24, 0x30	; 48
    2468:	97 4e       	sbci	r25, 0xE7	; 231
    246a:	0e 94 07 08 	call	0x100e	; 0x100e <vListInsertEnd>
    246e:	0f 90       	pop	r0
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	80 91 8d 18 	lds	r24, 0x188D	; 0x80188d <xSchedulerRunning>
    2476:	88 23       	and	r24, r24
    2478:	61 f0       	breq	.+24     	; 0x2492 <xTaskCreate+0x214>
    247a:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    247e:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2482:	92 8d       	ldd	r25, Z+26	; 0x1a
    2484:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2486:	98 17       	cp	r25, r24
    2488:	30 f4       	brcc	.+12     	; 0x2496 <xTaskCreate+0x218>
    248a:	0e 94 3a 09 	call	0x1274	; 0x1274 <vPortYield>
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	05 c0       	rjmp	.+10     	; 0x249c <xTaskCreate+0x21e>
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	03 c0       	rjmp	.+6      	; 0x249c <xTaskCreate+0x21e>
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	01 c0       	rjmp	.+2      	; 0x249c <xTaskCreate+0x21e>
    249a:	8f ef       	ldi	r24, 0xFF	; 255
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	0f 91       	pop	r16
    24a2:	ff 90       	pop	r15
    24a4:	ef 90       	pop	r14
    24a6:	df 90       	pop	r13
    24a8:	cf 90       	pop	r12
    24aa:	bf 90       	pop	r11
    24ac:	af 90       	pop	r10
    24ae:	9f 90       	pop	r9
    24b0:	8f 90       	pop	r8
    24b2:	7f 90       	pop	r7
    24b4:	6f 90       	pop	r6
    24b6:	5f 90       	pop	r5
    24b8:	4f 90       	pop	r4
    24ba:	08 95       	ret

000024bc <vTaskStartScheduler>:
    24bc:	ef 92       	push	r14
    24be:	ff 92       	push	r15
    24c0:	0f 93       	push	r16
    24c2:	0f 2e       	mov	r0, r31
    24c4:	f3 e8       	ldi	r31, 0x83	; 131
    24c6:	ef 2e       	mov	r14, r31
    24c8:	f8 e1       	ldi	r31, 0x18	; 24
    24ca:	ff 2e       	mov	r15, r31
    24cc:	f0 2d       	mov	r31, r0
    24ce:	00 e0       	ldi	r16, 0x00	; 0
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 ec       	ldi	r20, 0xC0	; 192
    24d6:	50 e0       	ldi	r21, 0x00	; 0
    24d8:	67 e2       	ldi	r22, 0x27	; 39
    24da:	74 e0       	ldi	r23, 0x04	; 4
    24dc:	8d ec       	ldi	r24, 0xCD	; 205
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	ce de       	rcall	.-612    	; 0x227e <xTaskCreate>
    24e2:	81 30       	cpi	r24, 0x01	; 1
    24e4:	19 f5       	brne	.+70     	; 0x252c <vTaskStartScheduler+0x70>
    24e6:	2a d7       	rcall	.+3668   	; 0x333c <xTimerCreateTimerTask>
    24e8:	81 30       	cpi	r24, 0x01	; 1
    24ea:	01 f5       	brne	.+64     	; 0x252c <vTaskStartScheduler+0x70>
    24ec:	f8 94       	cli
    24ee:	8f ef       	ldi	r24, 0xFF	; 255
    24f0:	9f ef       	ldi	r25, 0xFF	; 255
    24f2:	dc 01       	movw	r26, r24
    24f4:	80 93 85 18 	sts	0x1885, r24	; 0x801885 <xNextTaskUnblockTime>
    24f8:	90 93 86 18 	sts	0x1886, r25	; 0x801886 <xNextTaskUnblockTime+0x1>
    24fc:	a0 93 87 18 	sts	0x1887, r26	; 0x801887 <xNextTaskUnblockTime+0x2>
    2500:	b0 93 88 18 	sts	0x1888, r27	; 0x801888 <xNextTaskUnblockTime+0x3>
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	80 93 8d 18 	sts	0x188D, r24	; 0x80188d <xSchedulerRunning>
    250a:	10 92 8f 18 	sts	0x188F, r1	; 0x80188f <xTickCount>
    250e:	10 92 90 18 	sts	0x1890, r1	; 0x801890 <xTickCount+0x1>
    2512:	10 92 91 18 	sts	0x1891, r1	; 0x801891 <xTickCount+0x2>
    2516:	10 92 92 18 	sts	0x1892, r1	; 0x801892 <xTickCount+0x3>
    251a:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    251e:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2522:	81 a5       	ldd	r24, Z+41	; 0x29
    2524:	0e 94 3f 05 	call	0xa7e	; 0xa7e <task_switch_in>
    2528:	0e 94 fe 08 	call	0x11fc	; 0x11fc <xPortStartScheduler>
    252c:	0f 91       	pop	r16
    252e:	ff 90       	pop	r15
    2530:	ef 90       	pop	r14
    2532:	08 95       	ret

00002534 <vTaskSuspendAll>:
    2534:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxSchedulerSuspended>
    2538:	8f 5f       	subi	r24, 0xFF	; 255
    253a:	80 93 82 18 	sts	0x1882, r24	; 0x801882 <uxSchedulerSuspended>
    253e:	08 95       	ret

00002540 <xTaskGetTickCount>:
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	0f 92       	push	r0
    2546:	60 91 8f 18 	lds	r22, 0x188F	; 0x80188f <xTickCount>
    254a:	70 91 90 18 	lds	r23, 0x1890	; 0x801890 <xTickCount+0x1>
    254e:	80 91 91 18 	lds	r24, 0x1891	; 0x801891 <xTickCount+0x2>
    2552:	90 91 92 18 	lds	r25, 0x1892	; 0x801892 <xTickCount+0x3>
    2556:	0f 90       	pop	r0
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	08 95       	ret

0000255c <xTaskIncrementTick>:
    255c:	9f 92       	push	r9
    255e:	af 92       	push	r10
    2560:	bf 92       	push	r11
    2562:	cf 92       	push	r12
    2564:	df 92       	push	r13
    2566:	ef 92       	push	r14
    2568:	ff 92       	push	r15
    256a:	0f 93       	push	r16
    256c:	1f 93       	push	r17
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxSchedulerSuspended>
    2576:	81 11       	cpse	r24, r1
    2578:	ad c0       	rjmp	.+346    	; 0x26d4 <xTaskIncrementTick+0x178>
    257a:	c0 90 8f 18 	lds	r12, 0x188F	; 0x80188f <xTickCount>
    257e:	d0 90 90 18 	lds	r13, 0x1890	; 0x801890 <xTickCount+0x1>
    2582:	e0 90 91 18 	lds	r14, 0x1891	; 0x801891 <xTickCount+0x2>
    2586:	f0 90 92 18 	lds	r15, 0x1892	; 0x801892 <xTickCount+0x3>
    258a:	8f ef       	ldi	r24, 0xFF	; 255
    258c:	c8 1a       	sub	r12, r24
    258e:	d8 0a       	sbc	r13, r24
    2590:	e8 0a       	sbc	r14, r24
    2592:	f8 0a       	sbc	r15, r24
    2594:	c0 92 8f 18 	sts	0x188F, r12	; 0x80188f <xTickCount>
    2598:	d0 92 90 18 	sts	0x1890, r13	; 0x801890 <xTickCount+0x1>
    259c:	e0 92 91 18 	sts	0x1891, r14	; 0x801891 <xTickCount+0x2>
    25a0:	f0 92 92 18 	sts	0x1892, r15	; 0x801892 <xTickCount+0x3>
    25a4:	c1 14       	cp	r12, r1
    25a6:	d1 04       	cpc	r13, r1
    25a8:	e1 04       	cpc	r14, r1
    25aa:	f1 04       	cpc	r15, r1
    25ac:	b1 f4       	brne	.+44     	; 0x25da <xTaskIncrementTick+0x7e>
    25ae:	80 91 b8 18 	lds	r24, 0x18B8	; 0x8018b8 <pxDelayedTaskList>
    25b2:	90 91 b9 18 	lds	r25, 0x18B9	; 0x8018b9 <pxDelayedTaskList+0x1>
    25b6:	20 91 b6 18 	lds	r18, 0x18B6	; 0x8018b6 <pxOverflowDelayedTaskList>
    25ba:	30 91 b7 18 	lds	r19, 0x18B7	; 0x8018b7 <pxOverflowDelayedTaskList+0x1>
    25be:	30 93 b9 18 	sts	0x18B9, r19	; 0x8018b9 <pxDelayedTaskList+0x1>
    25c2:	20 93 b8 18 	sts	0x18B8, r18	; 0x8018b8 <pxDelayedTaskList>
    25c6:	90 93 b7 18 	sts	0x18B7, r25	; 0x8018b7 <pxOverflowDelayedTaskList+0x1>
    25ca:	80 93 b6 18 	sts	0x18B6, r24	; 0x8018b6 <pxOverflowDelayedTaskList>
    25ce:	80 91 8a 18 	lds	r24, 0x188A	; 0x80188a <xNumOfOverflows>
    25d2:	8f 5f       	subi	r24, 0xFF	; 255
    25d4:	80 93 8a 18 	sts	0x188A, r24	; 0x80188a <xNumOfOverflows>
    25d8:	b1 dd       	rcall	.-1182   	; 0x213c <prvResetNextTaskUnblockTime>
    25da:	80 91 85 18 	lds	r24, 0x1885	; 0x801885 <xNextTaskUnblockTime>
    25de:	90 91 86 18 	lds	r25, 0x1886	; 0x801886 <xNextTaskUnblockTime+0x1>
    25e2:	a0 91 87 18 	lds	r26, 0x1887	; 0x801887 <xNextTaskUnblockTime+0x2>
    25e6:	b0 91 88 18 	lds	r27, 0x1888	; 0x801888 <xNextTaskUnblockTime+0x3>
    25ea:	c8 16       	cp	r12, r24
    25ec:	d9 06       	cpc	r13, r25
    25ee:	ea 06       	cpc	r14, r26
    25f0:	fb 06       	cpc	r15, r27
    25f2:	10 f4       	brcc	.+4      	; 0x25f8 <xTaskIncrementTick+0x9c>
    25f4:	b1 2c       	mov	r11, r1
    25f6:	5d c0       	rjmp	.+186    	; 0x26b2 <xTaskIncrementTick+0x156>
    25f8:	b1 2c       	mov	r11, r1
    25fa:	0f 2e       	mov	r0, r31
    25fc:	fb e0       	ldi	r31, 0x0B	; 11
    25fe:	af 2e       	mov	r10, r31
    2600:	f0 2d       	mov	r31, r0
    2602:	99 24       	eor	r9, r9
    2604:	93 94       	inc	r9
    2606:	e0 91 b8 18 	lds	r30, 0x18B8	; 0x8018b8 <pxDelayedTaskList>
    260a:	f0 91 b9 18 	lds	r31, 0x18B9	; 0x8018b9 <pxDelayedTaskList+0x1>
    260e:	80 81       	ld	r24, Z
    2610:	81 11       	cpse	r24, r1
    2612:	0c c0       	rjmp	.+24     	; 0x262c <xTaskIncrementTick+0xd0>
    2614:	8f ef       	ldi	r24, 0xFF	; 255
    2616:	9f ef       	ldi	r25, 0xFF	; 255
    2618:	dc 01       	movw	r26, r24
    261a:	80 93 85 18 	sts	0x1885, r24	; 0x801885 <xNextTaskUnblockTime>
    261e:	90 93 86 18 	sts	0x1886, r25	; 0x801886 <xNextTaskUnblockTime+0x1>
    2622:	a0 93 87 18 	sts	0x1887, r26	; 0x801887 <xNextTaskUnblockTime+0x2>
    2626:	b0 93 88 18 	sts	0x1888, r27	; 0x801888 <xNextTaskUnblockTime+0x3>
    262a:	43 c0       	rjmp	.+134    	; 0x26b2 <xTaskIncrementTick+0x156>
    262c:	e0 91 b8 18 	lds	r30, 0x18B8	; 0x8018b8 <pxDelayedTaskList>
    2630:	f0 91 b9 18 	lds	r31, 0x18B9	; 0x8018b9 <pxDelayedTaskList+0x1>
    2634:	07 80       	ldd	r0, Z+7	; 0x07
    2636:	f0 85       	ldd	r31, Z+8	; 0x08
    2638:	e0 2d       	mov	r30, r0
    263a:	c0 85       	ldd	r28, Z+8	; 0x08
    263c:	d1 85       	ldd	r29, Z+9	; 0x09
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	9b 81       	ldd	r25, Y+3	; 0x03
    2642:	ac 81       	ldd	r26, Y+4	; 0x04
    2644:	bd 81       	ldd	r27, Y+5	; 0x05
    2646:	c8 16       	cp	r12, r24
    2648:	d9 06       	cpc	r13, r25
    264a:	ea 06       	cpc	r14, r26
    264c:	fb 06       	cpc	r15, r27
    264e:	48 f4       	brcc	.+18     	; 0x2662 <xTaskIncrementTick+0x106>
    2650:	80 93 85 18 	sts	0x1885, r24	; 0x801885 <xNextTaskUnblockTime>
    2654:	90 93 86 18 	sts	0x1886, r25	; 0x801886 <xNextTaskUnblockTime+0x1>
    2658:	a0 93 87 18 	sts	0x1887, r26	; 0x801887 <xNextTaskUnblockTime+0x2>
    265c:	b0 93 88 18 	sts	0x1888, r27	; 0x801888 <xNextTaskUnblockTime+0x3>
    2660:	28 c0       	rjmp	.+80     	; 0x26b2 <xTaskIncrementTick+0x156>
    2662:	8e 01       	movw	r16, r28
    2664:	0e 5f       	subi	r16, 0xFE	; 254
    2666:	1f 4f       	sbci	r17, 0xFF	; 255
    2668:	c8 01       	movw	r24, r16
    266a:	0e 94 65 08 	call	0x10ca	; 0x10ca <uxListRemove>
    266e:	88 8d       	ldd	r24, Y+24	; 0x18
    2670:	99 8d       	ldd	r25, Y+25	; 0x19
    2672:	89 2b       	or	r24, r25
    2674:	21 f0       	breq	.+8      	; 0x267e <xTaskIncrementTick+0x122>
    2676:	ce 01       	movw	r24, r28
    2678:	0e 96       	adiw	r24, 0x0e	; 14
    267a:	0e 94 65 08 	call	0x10ca	; 0x10ca <uxListRemove>
    267e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2680:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    2684:	98 17       	cp	r25, r24
    2686:	10 f4       	brcc	.+4      	; 0x268c <xTaskIncrementTick+0x130>
    2688:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    268c:	a8 9e       	mul	r10, r24
    268e:	c0 01       	movw	r24, r0
    2690:	11 24       	eor	r1, r1
    2692:	b8 01       	movw	r22, r16
    2694:	80 53       	subi	r24, 0x30	; 48
    2696:	97 4e       	sbci	r25, 0xE7	; 231
    2698:	0e 94 07 08 	call	0x100e	; 0x100e <vListInsertEnd>
    269c:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    26a0:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    26a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    26a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    26a8:	98 17       	cp	r25, r24
    26aa:	08 f4       	brcc	.+2      	; 0x26ae <xTaskIncrementTick+0x152>
    26ac:	ac cf       	rjmp	.-168    	; 0x2606 <xTaskIncrementTick+0xaa>
    26ae:	b9 2c       	mov	r11, r9
    26b0:	aa cf       	rjmp	.-172    	; 0x2606 <xTaskIncrementTick+0xaa>
    26b2:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    26b6:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    26ba:	e2 8d       	ldd	r30, Z+26	; 0x1a
    26bc:	8b e0       	ldi	r24, 0x0B	; 11
    26be:	e8 9f       	mul	r30, r24
    26c0:	f0 01       	movw	r30, r0
    26c2:	11 24       	eor	r1, r1
    26c4:	e0 53       	subi	r30, 0x30	; 48
    26c6:	f7 4e       	sbci	r31, 0xE7	; 231
    26c8:	80 81       	ld	r24, Z
    26ca:	82 30       	cpi	r24, 0x02	; 2
    26cc:	48 f0       	brcs	.+18     	; 0x26e0 <xTaskIncrementTick+0x184>
    26ce:	bb 24       	eor	r11, r11
    26d0:	b3 94       	inc	r11
    26d2:	06 c0       	rjmp	.+12     	; 0x26e0 <xTaskIncrementTick+0x184>
    26d4:	80 91 8c 18 	lds	r24, 0x188C	; 0x80188c <uxPendedTicks>
    26d8:	8f 5f       	subi	r24, 0xFF	; 255
    26da:	80 93 8c 18 	sts	0x188C, r24	; 0x80188c <uxPendedTicks>
    26de:	b1 2c       	mov	r11, r1
    26e0:	80 91 8b 18 	lds	r24, 0x188B	; 0x80188b <xYieldPending>
    26e4:	88 23       	and	r24, r24
    26e6:	11 f0       	breq	.+4      	; 0x26ec <xTaskIncrementTick+0x190>
    26e8:	bb 24       	eor	r11, r11
    26ea:	b3 94       	inc	r11
    26ec:	8b 2d       	mov	r24, r11
    26ee:	df 91       	pop	r29
    26f0:	cf 91       	pop	r28
    26f2:	1f 91       	pop	r17
    26f4:	0f 91       	pop	r16
    26f6:	ff 90       	pop	r15
    26f8:	ef 90       	pop	r14
    26fa:	df 90       	pop	r13
    26fc:	cf 90       	pop	r12
    26fe:	bf 90       	pop	r11
    2700:	af 90       	pop	r10
    2702:	9f 90       	pop	r9
    2704:	08 95       	ret

00002706 <xTaskResumeAll>:
    2706:	cf 92       	push	r12
    2708:	df 92       	push	r13
    270a:	ef 92       	push	r14
    270c:	ff 92       	push	r15
    270e:	0f 93       	push	r16
    2710:	1f 93       	push	r17
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	0f 92       	push	r0
    271c:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxSchedulerSuspended>
    2720:	81 50       	subi	r24, 0x01	; 1
    2722:	80 93 82 18 	sts	0x1882, r24	; 0x801882 <uxSchedulerSuspended>
    2726:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxSchedulerSuspended>
    272a:	81 11       	cpse	r24, r1
    272c:	5a c0       	rjmp	.+180    	; 0x27e2 <xTaskResumeAll+0xdc>
    272e:	80 91 93 18 	lds	r24, 0x1893	; 0x801893 <uxCurrentNumberOfTasks>
    2732:	81 11       	cpse	r24, r1
    2734:	2c c0       	rjmp	.+88     	; 0x278e <xTaskResumeAll+0x88>
    2736:	58 c0       	rjmp	.+176    	; 0x27e8 <xTaskResumeAll+0xe2>
    2738:	d7 01       	movw	r26, r14
    273a:	17 96       	adiw	r26, 0x07	; 7
    273c:	ed 91       	ld	r30, X+
    273e:	fc 91       	ld	r31, X
    2740:	18 97       	sbiw	r26, 0x08	; 8
    2742:	c0 85       	ldd	r28, Z+8	; 0x08
    2744:	d1 85       	ldd	r29, Z+9	; 0x09
    2746:	ce 01       	movw	r24, r28
    2748:	0e 96       	adiw	r24, 0x0e	; 14
    274a:	0e 94 65 08 	call	0x10ca	; 0x10ca <uxListRemove>
    274e:	8e 01       	movw	r16, r28
    2750:	0e 5f       	subi	r16, 0xFE	; 254
    2752:	1f 4f       	sbci	r17, 0xFF	; 255
    2754:	c8 01       	movw	r24, r16
    2756:	0e 94 65 08 	call	0x10ca	; 0x10ca <uxListRemove>
    275a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    275c:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    2760:	98 17       	cp	r25, r24
    2762:	10 f4       	brcc	.+4      	; 0x2768 <xTaskResumeAll+0x62>
    2764:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    2768:	d8 9e       	mul	r13, r24
    276a:	c0 01       	movw	r24, r0
    276c:	11 24       	eor	r1, r1
    276e:	b8 01       	movw	r22, r16
    2770:	80 53       	subi	r24, 0x30	; 48
    2772:	97 4e       	sbci	r25, 0xE7	; 231
    2774:	0e 94 07 08 	call	0x100e	; 0x100e <vListInsertEnd>
    2778:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    277c:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2780:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2782:	82 8d       	ldd	r24, Z+26	; 0x1a
    2784:	98 17       	cp	r25, r24
    2786:	88 f0       	brcs	.+34     	; 0x27aa <xTaskResumeAll+0xa4>
    2788:	c0 92 8b 18 	sts	0x188B, r12	; 0x80188b <xYieldPending>
    278c:	0e c0       	rjmp	.+28     	; 0x27aa <xTaskResumeAll+0xa4>
    278e:	c0 e0       	ldi	r28, 0x00	; 0
    2790:	d0 e0       	ldi	r29, 0x00	; 0
    2792:	0f 2e       	mov	r0, r31
    2794:	fb ea       	ldi	r31, 0xAB	; 171
    2796:	ef 2e       	mov	r14, r31
    2798:	f8 e1       	ldi	r31, 0x18	; 24
    279a:	ff 2e       	mov	r15, r31
    279c:	f0 2d       	mov	r31, r0
    279e:	0f 2e       	mov	r0, r31
    27a0:	fb e0       	ldi	r31, 0x0B	; 11
    27a2:	df 2e       	mov	r13, r31
    27a4:	f0 2d       	mov	r31, r0
    27a6:	cc 24       	eor	r12, r12
    27a8:	c3 94       	inc	r12
    27aa:	f7 01       	movw	r30, r14
    27ac:	80 81       	ld	r24, Z
    27ae:	81 11       	cpse	r24, r1
    27b0:	c3 cf       	rjmp	.-122    	; 0x2738 <xTaskResumeAll+0x32>
    27b2:	cd 2b       	or	r28, r29
    27b4:	09 f0       	breq	.+2      	; 0x27b8 <xTaskResumeAll+0xb2>
    27b6:	c2 dc       	rcall	.-1660   	; 0x213c <prvResetNextTaskUnblockTime>
    27b8:	c0 91 8c 18 	lds	r28, 0x188C	; 0x80188c <uxPendedTicks>
    27bc:	cc 23       	and	r28, r28
    27be:	49 f0       	breq	.+18     	; 0x27d2 <xTaskResumeAll+0xcc>
    27c0:	d1 e0       	ldi	r29, 0x01	; 1
    27c2:	cc de       	rcall	.-616    	; 0x255c <xTaskIncrementTick>
    27c4:	81 11       	cpse	r24, r1
    27c6:	d0 93 8b 18 	sts	0x188B, r29	; 0x80188b <xYieldPending>
    27ca:	c1 50       	subi	r28, 0x01	; 1
    27cc:	d1 f7       	brne	.-12     	; 0x27c2 <xTaskResumeAll+0xbc>
    27ce:	10 92 8c 18 	sts	0x188C, r1	; 0x80188c <uxPendedTicks>
    27d2:	80 91 8b 18 	lds	r24, 0x188B	; 0x80188b <xYieldPending>
    27d6:	88 23       	and	r24, r24
    27d8:	31 f0       	breq	.+12     	; 0x27e6 <xTaskResumeAll+0xe0>
    27da:	0e 94 3a 09 	call	0x1274	; 0x1274 <vPortYield>
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	03 c0       	rjmp	.+6      	; 0x27e8 <xTaskResumeAll+0xe2>
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	01 c0       	rjmp	.+2      	; 0x27e8 <xTaskResumeAll+0xe2>
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	0f 90       	pop	r0
    27ea:	0f be       	out	0x3f, r0	; 63
    27ec:	df 91       	pop	r29
    27ee:	cf 91       	pop	r28
    27f0:	1f 91       	pop	r17
    27f2:	0f 91       	pop	r16
    27f4:	ff 90       	pop	r15
    27f6:	ef 90       	pop	r14
    27f8:	df 90       	pop	r13
    27fa:	cf 90       	pop	r12
    27fc:	08 95       	ret

000027fe <vTaskDelayUntil>:
    27fe:	cf 92       	push	r12
    2800:	df 92       	push	r13
    2802:	ef 92       	push	r14
    2804:	ff 92       	push	r15
    2806:	0f 93       	push	r16
    2808:	1f 93       	push	r17
    280a:	cf 93       	push	r28
    280c:	df 93       	push	r29
    280e:	ec 01       	movw	r28, r24
    2810:	6a 01       	movw	r12, r20
    2812:	7b 01       	movw	r14, r22
    2814:	8f de       	rcall	.-738    	; 0x2534 <vTaskSuspendAll>
    2816:	00 91 8f 18 	lds	r16, 0x188F	; 0x80188f <xTickCount>
    281a:	10 91 90 18 	lds	r17, 0x1890	; 0x801890 <xTickCount+0x1>
    281e:	20 91 91 18 	lds	r18, 0x1891	; 0x801891 <xTickCount+0x2>
    2822:	30 91 92 18 	lds	r19, 0x1892	; 0x801892 <xTickCount+0x3>
    2826:	88 81       	ld	r24, Y
    2828:	99 81       	ldd	r25, Y+1	; 0x01
    282a:	aa 81       	ldd	r26, Y+2	; 0x02
    282c:	bb 81       	ldd	r27, Y+3	; 0x03
    282e:	ac 01       	movw	r20, r24
    2830:	bd 01       	movw	r22, r26
    2832:	4c 0d       	add	r20, r12
    2834:	5d 1d       	adc	r21, r13
    2836:	6e 1d       	adc	r22, r14
    2838:	7f 1d       	adc	r23, r15
    283a:	08 17       	cp	r16, r24
    283c:	19 07       	cpc	r17, r25
    283e:	2a 07       	cpc	r18, r26
    2840:	3b 07       	cpc	r19, r27
    2842:	78 f4       	brcc	.+30     	; 0x2862 <vTaskDelayUntil+0x64>
    2844:	48 17       	cp	r20, r24
    2846:	59 07       	cpc	r21, r25
    2848:	6a 07       	cpc	r22, r26
    284a:	7b 07       	cpc	r23, r27
    284c:	40 f5       	brcc	.+80     	; 0x289e <vTaskDelayUntil+0xa0>
    284e:	48 83       	st	Y, r20
    2850:	59 83       	std	Y+1, r21	; 0x01
    2852:	6a 83       	std	Y+2, r22	; 0x02
    2854:	7b 83       	std	Y+3, r23	; 0x03
    2856:	04 17       	cp	r16, r20
    2858:	15 07       	cpc	r17, r21
    285a:	26 07       	cpc	r18, r22
    285c:	37 07       	cpc	r19, r23
    285e:	a0 f4       	brcc	.+40     	; 0x2888 <vTaskDelayUntil+0x8a>
    2860:	0b c0       	rjmp	.+22     	; 0x2878 <vTaskDelayUntil+0x7a>
    2862:	48 17       	cp	r20, r24
    2864:	59 07       	cpc	r21, r25
    2866:	6a 07       	cpc	r22, r26
    2868:	7b 07       	cpc	r23, r27
    286a:	a0 f0       	brcs	.+40     	; 0x2894 <vTaskDelayUntil+0x96>
    286c:	04 17       	cp	r16, r20
    286e:	15 07       	cpc	r17, r21
    2870:	26 07       	cpc	r18, r22
    2872:	37 07       	cpc	r19, r23
    2874:	78 f0       	brcs	.+30     	; 0x2894 <vTaskDelayUntil+0x96>
    2876:	13 c0       	rjmp	.+38     	; 0x289e <vTaskDelayUntil+0xa0>
    2878:	cb 01       	movw	r24, r22
    287a:	ba 01       	movw	r22, r20
    287c:	60 1b       	sub	r22, r16
    287e:	71 0b       	sbc	r23, r17
    2880:	82 0b       	sbc	r24, r18
    2882:	93 0b       	sbc	r25, r19
    2884:	40 e0       	ldi	r20, 0x00	; 0
    2886:	84 dc       	rcall	.-1784   	; 0x2190 <prvAddCurrentTaskToDelayedList>
    2888:	3e df       	rcall	.-388    	; 0x2706 <xTaskResumeAll>
    288a:	81 11       	cpse	r24, r1
    288c:	0d c0       	rjmp	.+26     	; 0x28a8 <vTaskDelayUntil+0xaa>
    288e:	0e 94 3a 09 	call	0x1274	; 0x1274 <vPortYield>
    2892:	0a c0       	rjmp	.+20     	; 0x28a8 <vTaskDelayUntil+0xaa>
    2894:	48 83       	st	Y, r20
    2896:	59 83       	std	Y+1, r21	; 0x01
    2898:	6a 83       	std	Y+2, r22	; 0x02
    289a:	7b 83       	std	Y+3, r23	; 0x03
    289c:	ed cf       	rjmp	.-38     	; 0x2878 <vTaskDelayUntil+0x7a>
    289e:	48 83       	st	Y, r20
    28a0:	59 83       	std	Y+1, r21	; 0x01
    28a2:	6a 83       	std	Y+2, r22	; 0x02
    28a4:	7b 83       	std	Y+3, r23	; 0x03
    28a6:	f0 cf       	rjmp	.-32     	; 0x2888 <vTaskDelayUntil+0x8a>
    28a8:	df 91       	pop	r29
    28aa:	cf 91       	pop	r28
    28ac:	1f 91       	pop	r17
    28ae:	0f 91       	pop	r16
    28b0:	ff 90       	pop	r15
    28b2:	ef 90       	pop	r14
    28b4:	df 90       	pop	r13
    28b6:	cf 90       	pop	r12
    28b8:	08 95       	ret

000028ba <vTaskDelay>:
    28ba:	cf 92       	push	r12
    28bc:	df 92       	push	r13
    28be:	ef 92       	push	r14
    28c0:	ff 92       	push	r15
    28c2:	6b 01       	movw	r12, r22
    28c4:	7c 01       	movw	r14, r24
    28c6:	67 2b       	or	r22, r23
    28c8:	68 2b       	or	r22, r24
    28ca:	69 2b       	or	r22, r25
    28cc:	41 f0       	breq	.+16     	; 0x28de <vTaskDelay+0x24>
    28ce:	32 de       	rcall	.-924    	; 0x2534 <vTaskSuspendAll>
    28d0:	40 e0       	ldi	r20, 0x00	; 0
    28d2:	c7 01       	movw	r24, r14
    28d4:	b6 01       	movw	r22, r12
    28d6:	5c dc       	rcall	.-1864   	; 0x2190 <prvAddCurrentTaskToDelayedList>
    28d8:	16 df       	rcall	.-468    	; 0x2706 <xTaskResumeAll>
    28da:	81 11       	cpse	r24, r1
    28dc:	02 c0       	rjmp	.+4      	; 0x28e2 <vTaskDelay+0x28>
    28de:	0e 94 3a 09 	call	0x1274	; 0x1274 <vPortYield>
    28e2:	ff 90       	pop	r15
    28e4:	ef 90       	pop	r14
    28e6:	df 90       	pop	r13
    28e8:	cf 90       	pop	r12
    28ea:	08 95       	ret

000028ec <vTaskSwitchContext>:
    28ec:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxSchedulerSuspended>
    28f0:	88 23       	and	r24, r24
    28f2:	21 f0       	breq	.+8      	; 0x28fc <vTaskSwitchContext+0x10>
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <xYieldPending>
    28fa:	08 95       	ret
    28fc:	10 92 8b 18 	sts	0x188B, r1	; 0x80188b <xYieldPending>
    2900:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2904:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2908:	81 a5       	ldd	r24, Z+41	; 0x29
    290a:	0e 94 49 05 	call	0xa92	; 0xa92 <task_switch_out>
    290e:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2912:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2916:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    291a:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    291e:	2d 91       	ld	r18, X+
    2920:	3c 91       	ld	r19, X
    2922:	83 8d       	ldd	r24, Z+27	; 0x1b
    2924:	94 8d       	ldd	r25, Z+28	; 0x1c
    2926:	82 17       	cp	r24, r18
    2928:	93 07       	cpc	r25, r19
    292a:	58 f0       	brcs	.+22     	; 0x2942 <vTaskSwitchContext+0x56>
    292c:	60 91 fc 18 	lds	r22, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2930:	70 91 fd 18 	lds	r23, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2934:	80 91 fc 18 	lds	r24, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2938:	90 91 fd 18 	lds	r25, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    293c:	63 5e       	subi	r22, 0xE3	; 227
    293e:	7f 4f       	sbci	r23, 0xFF	; 255
    2940:	20 d6       	rcall	.+3136   	; 0x3582 <vApplicationStackOverflowHook>
    2942:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <uxTopReadyPriority>
    2946:	28 2f       	mov	r18, r24
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	9b e0       	ldi	r25, 0x0B	; 11
    294c:	89 9f       	mul	r24, r25
    294e:	f0 01       	movw	r30, r0
    2950:	11 24       	eor	r1, r1
    2952:	e0 53       	subi	r30, 0x30	; 48
    2954:	f7 4e       	sbci	r31, 0xE7	; 231
    2956:	90 81       	ld	r25, Z
    2958:	91 11       	cpse	r25, r1
    295a:	0e c0       	rjmp	.+28     	; 0x2978 <vTaskSwitchContext+0x8c>
    295c:	4b e0       	ldi	r20, 0x0B	; 11
    295e:	81 50       	subi	r24, 0x01	; 1
    2960:	28 2f       	mov	r18, r24
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	42 9f       	mul	r20, r18
    2966:	f0 01       	movw	r30, r0
    2968:	43 9f       	mul	r20, r19
    296a:	f0 0d       	add	r31, r0
    296c:	11 24       	eor	r1, r1
    296e:	e0 53       	subi	r30, 0x30	; 48
    2970:	f7 4e       	sbci	r31, 0xE7	; 231
    2972:	90 81       	ld	r25, Z
    2974:	99 23       	and	r25, r25
    2976:	99 f3       	breq	.-26     	; 0x295e <vTaskSwitchContext+0x72>
    2978:	9b e0       	ldi	r25, 0x0B	; 11
    297a:	92 9f       	mul	r25, r18
    297c:	a0 01       	movw	r20, r0
    297e:	93 9f       	mul	r25, r19
    2980:	50 0d       	add	r21, r0
    2982:	11 24       	eor	r1, r1
    2984:	da 01       	movw	r26, r20
    2986:	a0 53       	subi	r26, 0x30	; 48
    2988:	b7 4e       	sbci	r27, 0xE7	; 231
    298a:	11 96       	adiw	r26, 0x01	; 1
    298c:	ed 91       	ld	r30, X+
    298e:	fc 91       	ld	r31, X
    2990:	12 97       	sbiw	r26, 0x02	; 2
    2992:	04 80       	ldd	r0, Z+4	; 0x04
    2994:	f5 81       	ldd	r31, Z+5	; 0x05
    2996:	e0 2d       	mov	r30, r0
    2998:	12 96       	adiw	r26, 0x02	; 2
    299a:	fc 93       	st	X, r31
    299c:	ee 93       	st	-X, r30
    299e:	11 97       	sbiw	r26, 0x01	; 1
    29a0:	4d 52       	subi	r20, 0x2D	; 45
    29a2:	57 4e       	sbci	r21, 0xE7	; 231
    29a4:	e4 17       	cp	r30, r20
    29a6:	f5 07       	cpc	r31, r21
    29a8:	29 f4       	brne	.+10     	; 0x29b4 <vTaskSwitchContext+0xc8>
    29aa:	44 81       	ldd	r20, Z+4	; 0x04
    29ac:	55 81       	ldd	r21, Z+5	; 0x05
    29ae:	fd 01       	movw	r30, r26
    29b0:	52 83       	std	Z+2, r21	; 0x02
    29b2:	41 83       	std	Z+1, r20	; 0x01
    29b4:	9b e0       	ldi	r25, 0x0B	; 11
    29b6:	92 9f       	mul	r25, r18
    29b8:	f0 01       	movw	r30, r0
    29ba:	93 9f       	mul	r25, r19
    29bc:	f0 0d       	add	r31, r0
    29be:	11 24       	eor	r1, r1
    29c0:	e0 53       	subi	r30, 0x30	; 48
    29c2:	f7 4e       	sbci	r31, 0xE7	; 231
    29c4:	01 80       	ldd	r0, Z+1	; 0x01
    29c6:	f2 81       	ldd	r31, Z+2	; 0x02
    29c8:	e0 2d       	mov	r30, r0
    29ca:	20 85       	ldd	r18, Z+8	; 0x08
    29cc:	31 85       	ldd	r19, Z+9	; 0x09
    29ce:	30 93 fd 18 	sts	0x18FD, r19	; 0x8018fd <pxCurrentTCB+0x1>
    29d2:	20 93 fc 18 	sts	0x18FC, r18	; 0x8018fc <pxCurrentTCB>
    29d6:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    29da:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    29de:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    29e2:	81 a5       	ldd	r24, Z+41	; 0x29
    29e4:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <task_switch_in>
    29e8:	08 95       	ret

000029ea <vTaskPlaceOnEventList>:
    29ea:	cf 92       	push	r12
    29ec:	df 92       	push	r13
    29ee:	ef 92       	push	r14
    29f0:	ff 92       	push	r15
    29f2:	6a 01       	movw	r12, r20
    29f4:	7b 01       	movw	r14, r22
    29f6:	60 91 fc 18 	lds	r22, 0x18FC	; 0x8018fc <pxCurrentTCB>
    29fa:	70 91 fd 18 	lds	r23, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    29fe:	62 5f       	subi	r22, 0xF2	; 242
    2a00:	7f 4f       	sbci	r23, 0xFF	; 255
    2a02:	0e 94 28 08 	call	0x1050	; 0x1050 <vListInsert>
    2a06:	41 e0       	ldi	r20, 0x01	; 1
    2a08:	c7 01       	movw	r24, r14
    2a0a:	b6 01       	movw	r22, r12
    2a0c:	c1 db       	rcall	.-2174   	; 0x2190 <prvAddCurrentTaskToDelayedList>
    2a0e:	ff 90       	pop	r15
    2a10:	ef 90       	pop	r14
    2a12:	df 90       	pop	r13
    2a14:	cf 90       	pop	r12
    2a16:	08 95       	ret

00002a18 <vTaskPlaceOnUnorderedEventList>:
    2a18:	cf 92       	push	r12
    2a1a:	df 92       	push	r13
    2a1c:	ef 92       	push	r14
    2a1e:	ff 92       	push	r15
    2a20:	0f 93       	push	r16
    2a22:	1f 93       	push	r17
    2a24:	68 01       	movw	r12, r16
    2a26:	79 01       	movw	r14, r18
    2a28:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2a2c:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2a30:	70 68       	ori	r23, 0x80	; 128
    2a32:	46 87       	std	Z+14, r20	; 0x0e
    2a34:	57 87       	std	Z+15, r21	; 0x0f
    2a36:	60 8b       	std	Z+16, r22	; 0x10
    2a38:	71 8b       	std	Z+17, r23	; 0x11
    2a3a:	60 91 fc 18 	lds	r22, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2a3e:	70 91 fd 18 	lds	r23, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2a42:	62 5f       	subi	r22, 0xF2	; 242
    2a44:	7f 4f       	sbci	r23, 0xFF	; 255
    2a46:	0e 94 07 08 	call	0x100e	; 0x100e <vListInsertEnd>
    2a4a:	41 e0       	ldi	r20, 0x01	; 1
    2a4c:	c7 01       	movw	r24, r14
    2a4e:	b6 01       	movw	r22, r12
    2a50:	9f db       	rcall	.-2242   	; 0x2190 <prvAddCurrentTaskToDelayedList>
    2a52:	1f 91       	pop	r17
    2a54:	0f 91       	pop	r16
    2a56:	ff 90       	pop	r15
    2a58:	ef 90       	pop	r14
    2a5a:	df 90       	pop	r13
    2a5c:	cf 90       	pop	r12
    2a5e:	08 95       	ret

00002a60 <vTaskPlaceOnEventListRestricted>:
    2a60:	cf 92       	push	r12
    2a62:	df 92       	push	r13
    2a64:	ef 92       	push	r14
    2a66:	ff 92       	push	r15
    2a68:	cf 93       	push	r28
    2a6a:	6a 01       	movw	r12, r20
    2a6c:	7b 01       	movw	r14, r22
    2a6e:	c2 2f       	mov	r28, r18
    2a70:	60 91 fc 18 	lds	r22, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2a74:	70 91 fd 18 	lds	r23, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2a78:	62 5f       	subi	r22, 0xF2	; 242
    2a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a7c:	0e 94 07 08 	call	0x100e	; 0x100e <vListInsertEnd>
    2a80:	cc 23       	and	r28, r28
    2a82:	21 f0       	breq	.+8      	; 0x2a8c <vTaskPlaceOnEventListRestricted+0x2c>
    2a84:	cc 24       	eor	r12, r12
    2a86:	ca 94       	dec	r12
    2a88:	dc 2c       	mov	r13, r12
    2a8a:	76 01       	movw	r14, r12
    2a8c:	4c 2f       	mov	r20, r28
    2a8e:	c7 01       	movw	r24, r14
    2a90:	b6 01       	movw	r22, r12
    2a92:	7e db       	rcall	.-2308   	; 0x2190 <prvAddCurrentTaskToDelayedList>
    2a94:	cf 91       	pop	r28
    2a96:	ff 90       	pop	r15
    2a98:	ef 90       	pop	r14
    2a9a:	df 90       	pop	r13
    2a9c:	cf 90       	pop	r12
    2a9e:	08 95       	ret

00002aa0 <xTaskRemoveFromEventList>:
    2aa0:	0f 93       	push	r16
    2aa2:	1f 93       	push	r17
    2aa4:	cf 93       	push	r28
    2aa6:	df 93       	push	r29
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	17 96       	adiw	r26, 0x07	; 7
    2aac:	ed 91       	ld	r30, X+
    2aae:	fc 91       	ld	r31, X
    2ab0:	18 97       	sbiw	r26, 0x08	; 8
    2ab2:	c0 85       	ldd	r28, Z+8	; 0x08
    2ab4:	d1 85       	ldd	r29, Z+9	; 0x09
    2ab6:	8e 01       	movw	r16, r28
    2ab8:	02 5f       	subi	r16, 0xF2	; 242
    2aba:	1f 4f       	sbci	r17, 0xFF	; 255
    2abc:	c8 01       	movw	r24, r16
    2abe:	0e 94 65 08 	call	0x10ca	; 0x10ca <uxListRemove>
    2ac2:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxSchedulerSuspended>
    2ac6:	81 11       	cpse	r24, r1
    2ac8:	16 c0       	rjmp	.+44     	; 0x2af6 <xTaskRemoveFromEventList+0x56>
    2aca:	0c 50       	subi	r16, 0x0C	; 12
    2acc:	11 09       	sbc	r17, r1
    2ace:	c8 01       	movw	r24, r16
    2ad0:	0e 94 65 08 	call	0x10ca	; 0x10ca <uxListRemove>
    2ad4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ad6:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    2ada:	98 17       	cp	r25, r24
    2adc:	10 f4       	brcc	.+4      	; 0x2ae2 <xTaskRemoveFromEventList+0x42>
    2ade:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    2ae2:	bb e0       	ldi	r27, 0x0B	; 11
    2ae4:	8b 9f       	mul	r24, r27
    2ae6:	c0 01       	movw	r24, r0
    2ae8:	11 24       	eor	r1, r1
    2aea:	b8 01       	movw	r22, r16
    2aec:	80 53       	subi	r24, 0x30	; 48
    2aee:	97 4e       	sbci	r25, 0xE7	; 231
    2af0:	0e 94 07 08 	call	0x100e	; 0x100e <vListInsertEnd>
    2af4:	05 c0       	rjmp	.+10     	; 0x2b00 <xTaskRemoveFromEventList+0x60>
    2af6:	b8 01       	movw	r22, r16
    2af8:	8b ea       	ldi	r24, 0xAB	; 171
    2afa:	98 e1       	ldi	r25, 0x18	; 24
    2afc:	0e 94 07 08 	call	0x100e	; 0x100e <vListInsertEnd>
    2b00:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2b04:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2b08:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b0a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b0c:	89 17       	cp	r24, r25
    2b0e:	20 f4       	brcc	.+8      	; 0x2b18 <xTaskRemoveFromEventList+0x78>
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <xYieldPending>
    2b16:	01 c0       	rjmp	.+2      	; 0x2b1a <xTaskRemoveFromEventList+0x7a>
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	df 91       	pop	r29
    2b1c:	cf 91       	pop	r28
    2b1e:	1f 91       	pop	r17
    2b20:	0f 91       	pop	r16
    2b22:	08 95       	ret

00002b24 <vTaskRemoveFromUnorderedEventList>:
    2b24:	0f 93       	push	r16
    2b26:	1f 93       	push	r17
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	70 68       	ori	r23, 0x80	; 128
    2b2e:	fc 01       	movw	r30, r24
    2b30:	40 83       	st	Z, r20
    2b32:	51 83       	std	Z+1, r21	; 0x01
    2b34:	62 83       	std	Z+2, r22	; 0x02
    2b36:	73 83       	std	Z+3, r23	; 0x03
    2b38:	c0 85       	ldd	r28, Z+8	; 0x08
    2b3a:	d1 85       	ldd	r29, Z+9	; 0x09
    2b3c:	0e 94 65 08 	call	0x10ca	; 0x10ca <uxListRemove>
    2b40:	8e 01       	movw	r16, r28
    2b42:	0e 5f       	subi	r16, 0xFE	; 254
    2b44:	1f 4f       	sbci	r17, 0xFF	; 255
    2b46:	c8 01       	movw	r24, r16
    2b48:	0e 94 65 08 	call	0x10ca	; 0x10ca <uxListRemove>
    2b4c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b4e:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    2b52:	98 17       	cp	r25, r24
    2b54:	10 f4       	brcc	.+4      	; 0x2b5a <vTaskRemoveFromUnorderedEventList+0x36>
    2b56:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    2b5a:	fb e0       	ldi	r31, 0x0B	; 11
    2b5c:	8f 9f       	mul	r24, r31
    2b5e:	c0 01       	movw	r24, r0
    2b60:	11 24       	eor	r1, r1
    2b62:	b8 01       	movw	r22, r16
    2b64:	80 53       	subi	r24, 0x30	; 48
    2b66:	97 4e       	sbci	r25, 0xE7	; 231
    2b68:	0e 94 07 08 	call	0x100e	; 0x100e <vListInsertEnd>
    2b6c:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2b70:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2b74:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b76:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b78:	89 17       	cp	r24, r25
    2b7a:	18 f4       	brcc	.+6      	; 0x2b82 <vTaskRemoveFromUnorderedEventList+0x5e>
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <xYieldPending>
    2b82:	df 91       	pop	r29
    2b84:	cf 91       	pop	r28
    2b86:	1f 91       	pop	r17
    2b88:	0f 91       	pop	r16
    2b8a:	08 95       	ret

00002b8c <vTaskSetTimeOutState>:
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	0f 92       	push	r0
    2b92:	20 91 8a 18 	lds	r18, 0x188A	; 0x80188a <xNumOfOverflows>
    2b96:	fc 01       	movw	r30, r24
    2b98:	20 83       	st	Z, r18
    2b9a:	40 91 8f 18 	lds	r20, 0x188F	; 0x80188f <xTickCount>
    2b9e:	50 91 90 18 	lds	r21, 0x1890	; 0x801890 <xTickCount+0x1>
    2ba2:	60 91 91 18 	lds	r22, 0x1891	; 0x801891 <xTickCount+0x2>
    2ba6:	70 91 92 18 	lds	r23, 0x1892	; 0x801892 <xTickCount+0x3>
    2baa:	41 83       	std	Z+1, r20	; 0x01
    2bac:	52 83       	std	Z+2, r21	; 0x02
    2bae:	63 83       	std	Z+3, r22	; 0x03
    2bb0:	74 83       	std	Z+4, r23	; 0x04
    2bb2:	0f 90       	pop	r0
    2bb4:	0f be       	out	0x3f, r0	; 63
    2bb6:	08 95       	ret

00002bb8 <vTaskInternalSetTimeOutState>:
    2bb8:	20 91 8a 18 	lds	r18, 0x188A	; 0x80188a <xNumOfOverflows>
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	20 83       	st	Z, r18
    2bc0:	40 91 8f 18 	lds	r20, 0x188F	; 0x80188f <xTickCount>
    2bc4:	50 91 90 18 	lds	r21, 0x1890	; 0x801890 <xTickCount+0x1>
    2bc8:	60 91 91 18 	lds	r22, 0x1891	; 0x801891 <xTickCount+0x2>
    2bcc:	70 91 92 18 	lds	r23, 0x1892	; 0x801892 <xTickCount+0x3>
    2bd0:	41 83       	std	Z+1, r20	; 0x01
    2bd2:	52 83       	std	Z+2, r21	; 0x02
    2bd4:	63 83       	std	Z+3, r22	; 0x03
    2bd6:	74 83       	std	Z+4, r23	; 0x04
    2bd8:	08 95       	ret

00002bda <xTaskCheckForTimeOut>:
    2bda:	cf 92       	push	r12
    2bdc:	df 92       	push	r13
    2bde:	ef 92       	push	r14
    2be0:	ff 92       	push	r15
    2be2:	0f 93       	push	r16
    2be4:	1f 93       	push	r17
    2be6:	cf 93       	push	r28
    2be8:	df 93       	push	r29
    2bea:	fb 01       	movw	r30, r22
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	0f 92       	push	r0
    2bf2:	40 91 8f 18 	lds	r20, 0x188F	; 0x80188f <xTickCount>
    2bf6:	50 91 90 18 	lds	r21, 0x1890	; 0x801890 <xTickCount+0x1>
    2bfa:	60 91 91 18 	lds	r22, 0x1891	; 0x801891 <xTickCount+0x2>
    2bfe:	70 91 92 18 	lds	r23, 0x1892	; 0x801892 <xTickCount+0x3>
    2c02:	00 81       	ld	r16, Z
    2c04:	11 81       	ldd	r17, Z+1	; 0x01
    2c06:	22 81       	ldd	r18, Z+2	; 0x02
    2c08:	33 81       	ldd	r19, Z+3	; 0x03
    2c0a:	0f 3f       	cpi	r16, 0xFF	; 255
    2c0c:	af ef       	ldi	r26, 0xFF	; 255
    2c0e:	1a 07       	cpc	r17, r26
    2c10:	2a 07       	cpc	r18, r26
    2c12:	3a 07       	cpc	r19, r26
    2c14:	49 f1       	breq	.+82     	; 0x2c68 <xTaskCheckForTimeOut+0x8e>
    2c16:	ec 01       	movw	r28, r24
    2c18:	c9 80       	ldd	r12, Y+1	; 0x01
    2c1a:	da 80       	ldd	r13, Y+2	; 0x02
    2c1c:	eb 80       	ldd	r14, Y+3	; 0x03
    2c1e:	fc 80       	ldd	r15, Y+4	; 0x04
    2c20:	a0 91 8a 18 	lds	r26, 0x188A	; 0x80188a <xNumOfOverflows>
    2c24:	b8 81       	ld	r27, Y
    2c26:	ba 17       	cp	r27, r26
    2c28:	29 f0       	breq	.+10     	; 0x2c34 <xTaskCheckForTimeOut+0x5a>
    2c2a:	4c 15       	cp	r20, r12
    2c2c:	5d 05       	cpc	r21, r13
    2c2e:	6e 05       	cpc	r22, r14
    2c30:	7f 05       	cpc	r23, r15
    2c32:	e0 f4       	brcc	.+56     	; 0x2c6c <xTaskCheckForTimeOut+0x92>
    2c34:	4c 19       	sub	r20, r12
    2c36:	5d 09       	sbc	r21, r13
    2c38:	6e 09       	sbc	r22, r14
    2c3a:	7f 09       	sbc	r23, r15
    2c3c:	40 17       	cp	r20, r16
    2c3e:	51 07       	cpc	r21, r17
    2c40:	62 07       	cpc	r22, r18
    2c42:	73 07       	cpc	r23, r19
    2c44:	58 f4       	brcc	.+22     	; 0x2c5c <xTaskCheckForTimeOut+0x82>
    2c46:	04 1b       	sub	r16, r20
    2c48:	15 0b       	sbc	r17, r21
    2c4a:	26 0b       	sbc	r18, r22
    2c4c:	37 0b       	sbc	r19, r23
    2c4e:	00 83       	st	Z, r16
    2c50:	11 83       	std	Z+1, r17	; 0x01
    2c52:	22 83       	std	Z+2, r18	; 0x02
    2c54:	33 83       	std	Z+3, r19	; 0x03
    2c56:	b0 df       	rcall	.-160    	; 0x2bb8 <vTaskInternalSetTimeOutState>
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	09 c0       	rjmp	.+18     	; 0x2c6e <xTaskCheckForTimeOut+0x94>
    2c5c:	10 82       	st	Z, r1
    2c5e:	11 82       	std	Z+1, r1	; 0x01
    2c60:	12 82       	std	Z+2, r1	; 0x02
    2c62:	13 82       	std	Z+3, r1	; 0x03
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	03 c0       	rjmp	.+6      	; 0x2c6e <xTaskCheckForTimeOut+0x94>
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	01 c0       	rjmp	.+2      	; 0x2c6e <xTaskCheckForTimeOut+0x94>
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	0f 90       	pop	r0
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	df 91       	pop	r29
    2c74:	cf 91       	pop	r28
    2c76:	1f 91       	pop	r17
    2c78:	0f 91       	pop	r16
    2c7a:	ff 90       	pop	r15
    2c7c:	ef 90       	pop	r14
    2c7e:	df 90       	pop	r13
    2c80:	cf 90       	pop	r12
    2c82:	08 95       	ret

00002c84 <vTaskMissedYield>:
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <xYieldPending>
    2c8a:	08 95       	ret

00002c8c <xTaskGetCurrentTaskHandle>:
    2c8c:	80 91 fc 18 	lds	r24, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2c90:	90 91 fd 18 	lds	r25, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2c94:	08 95       	ret

00002c96 <xTaskGetSchedulerState>:
    2c96:	80 91 8d 18 	lds	r24, 0x188D	; 0x80188d <xSchedulerRunning>
    2c9a:	88 23       	and	r24, r24
    2c9c:	31 f0       	breq	.+12     	; 0x2caa <xTaskGetSchedulerState+0x14>
    2c9e:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxSchedulerSuspended>
    2ca2:	88 23       	and	r24, r24
    2ca4:	21 f0       	breq	.+8      	; 0x2cae <xTaskGetSchedulerState+0x18>
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	08 95       	ret
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	08 95       	ret
    2cae:	82 e0       	ldi	r24, 0x02	; 2
    2cb0:	08 95       	ret

00002cb2 <xTaskPriorityInherit>:
    2cb2:	0f 93       	push	r16
    2cb4:	1f 93       	push	r17
    2cb6:	cf 93       	push	r28
    2cb8:	df 93       	push	r29
    2cba:	fc 01       	movw	r30, r24
    2cbc:	89 2b       	or	r24, r25
    2cbe:	09 f4       	brne	.+2      	; 0x2cc2 <xTaskPriorityInherit+0x10>
    2cc0:	60 c0       	rjmp	.+192    	; 0x2d82 <xTaskPriorityInherit+0xd0>
    2cc2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cc4:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2cc8:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2ccc:	5a 96       	adiw	r26, 0x1a	; 26
    2cce:	9c 91       	ld	r25, X
    2cd0:	89 17       	cp	r24, r25
    2cd2:	08 f0       	brcs	.+2      	; 0x2cd6 <xTaskPriorityInherit+0x24>
    2cd4:	4a c0       	rjmp	.+148    	; 0x2d6a <xTaskPriorityInherit+0xb8>
    2cd6:	46 85       	ldd	r20, Z+14	; 0x0e
    2cd8:	57 85       	ldd	r21, Z+15	; 0x0f
    2cda:	60 89       	ldd	r22, Z+16	; 0x10
    2cdc:	71 89       	ldd	r23, Z+17	; 0x11
    2cde:	77 23       	and	r23, r23
    2ce0:	94 f0       	brlt	.+36     	; 0x2d06 <xTaskPriorityInherit+0x54>
    2ce2:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2ce6:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2cea:	5a 96       	adiw	r26, 0x1a	; 26
    2cec:	9c 91       	ld	r25, X
    2cee:	44 e0       	ldi	r20, 0x04	; 4
    2cf0:	50 e0       	ldi	r21, 0x00	; 0
    2cf2:	60 e0       	ldi	r22, 0x00	; 0
    2cf4:	70 e0       	ldi	r23, 0x00	; 0
    2cf6:	49 1b       	sub	r20, r25
    2cf8:	51 09       	sbc	r21, r1
    2cfa:	61 09       	sbc	r22, r1
    2cfc:	71 09       	sbc	r23, r1
    2cfe:	46 87       	std	Z+14, r20	; 0x0e
    2d00:	57 87       	std	Z+15, r21	; 0x0f
    2d02:	60 8b       	std	Z+16, r22	; 0x10
    2d04:	71 8b       	std	Z+17, r23	; 0x11
    2d06:	2b e0       	ldi	r18, 0x0B	; 11
    2d08:	82 9f       	mul	r24, r18
    2d0a:	c0 01       	movw	r24, r0
    2d0c:	11 24       	eor	r1, r1
    2d0e:	80 53       	subi	r24, 0x30	; 48
    2d10:	97 4e       	sbci	r25, 0xE7	; 231
    2d12:	24 85       	ldd	r18, Z+12	; 0x0c
    2d14:	35 85       	ldd	r19, Z+13	; 0x0d
    2d16:	28 17       	cp	r18, r24
    2d18:	39 07       	cpc	r19, r25
    2d1a:	f1 f4       	brne	.+60     	; 0x2d58 <xTaskPriorityInherit+0xa6>
    2d1c:	8f 01       	movw	r16, r30
    2d1e:	ef 01       	movw	r28, r30
    2d20:	22 96       	adiw	r28, 0x02	; 2
    2d22:	ce 01       	movw	r24, r28
    2d24:	0e 94 65 08 	call	0x10ca	; 0x10ca <uxListRemove>
    2d28:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2d2c:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2d30:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d32:	f8 01       	movw	r30, r16
    2d34:	82 8f       	std	Z+26, r24	; 0x1a
    2d36:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    2d3a:	98 17       	cp	r25, r24
    2d3c:	10 f4       	brcc	.+4      	; 0x2d42 <xTaskPriorityInherit+0x90>
    2d3e:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    2d42:	fb e0       	ldi	r31, 0x0B	; 11
    2d44:	8f 9f       	mul	r24, r31
    2d46:	c0 01       	movw	r24, r0
    2d48:	11 24       	eor	r1, r1
    2d4a:	be 01       	movw	r22, r28
    2d4c:	80 53       	subi	r24, 0x30	; 48
    2d4e:	97 4e       	sbci	r25, 0xE7	; 231
    2d50:	0e 94 07 08 	call	0x100e	; 0x100e <vListInsertEnd>
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	16 c0       	rjmp	.+44     	; 0x2d84 <xTaskPriorityInherit+0xd2>
    2d58:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2d5c:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2d60:	5a 96       	adiw	r26, 0x1a	; 26
    2d62:	8c 91       	ld	r24, X
    2d64:	82 8f       	std	Z+26, r24	; 0x1a
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	0d c0       	rjmp	.+26     	; 0x2d84 <xTaskPriorityInherit+0xd2>
    2d6a:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2d6e:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	27 a1       	ldd	r18, Z+39	; 0x27
    2d76:	5a 96       	adiw	r26, 0x1a	; 26
    2d78:	9c 91       	ld	r25, X
    2d7a:	29 17       	cp	r18, r25
    2d7c:	18 f0       	brcs	.+6      	; 0x2d84 <xTaskPriorityInherit+0xd2>
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	01 c0       	rjmp	.+2      	; 0x2d84 <xTaskPriorityInherit+0xd2>
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	df 91       	pop	r29
    2d86:	cf 91       	pop	r28
    2d88:	1f 91       	pop	r17
    2d8a:	0f 91       	pop	r16
    2d8c:	08 95       	ret

00002d8e <xTaskPriorityDisinherit>:
    2d8e:	0f 93       	push	r16
    2d90:	1f 93       	push	r17
    2d92:	cf 93       	push	r28
    2d94:	df 93       	push	r29
    2d96:	fc 01       	movw	r30, r24
    2d98:	89 2b       	or	r24, r25
    2d9a:	79 f1       	breq	.+94     	; 0x2dfa <xTaskPriorityDisinherit+0x6c>
    2d9c:	80 a5       	ldd	r24, Z+40	; 0x28
    2d9e:	81 50       	subi	r24, 0x01	; 1
    2da0:	80 a7       	std	Z+40, r24	; 0x28
    2da2:	22 8d       	ldd	r18, Z+26	; 0x1a
    2da4:	97 a1       	ldd	r25, Z+39	; 0x27
    2da6:	29 17       	cp	r18, r25
    2da8:	51 f1       	breq	.+84     	; 0x2dfe <xTaskPriorityDisinherit+0x70>
    2daa:	81 11       	cpse	r24, r1
    2dac:	2a c0       	rjmp	.+84     	; 0x2e02 <xTaskPriorityDisinherit+0x74>
    2dae:	ef 01       	movw	r28, r30
    2db0:	8f 01       	movw	r16, r30
    2db2:	0e 5f       	subi	r16, 0xFE	; 254
    2db4:	1f 4f       	sbci	r17, 0xFF	; 255
    2db6:	c8 01       	movw	r24, r16
    2db8:	0e 94 65 08 	call	0x10ca	; 0x10ca <uxListRemove>
    2dbc:	8f a1       	ldd	r24, Y+39	; 0x27
    2dbe:	8a 8f       	std	Y+26, r24	; 0x1a
    2dc0:	44 e0       	ldi	r20, 0x04	; 4
    2dc2:	50 e0       	ldi	r21, 0x00	; 0
    2dc4:	60 e0       	ldi	r22, 0x00	; 0
    2dc6:	70 e0       	ldi	r23, 0x00	; 0
    2dc8:	48 1b       	sub	r20, r24
    2dca:	51 09       	sbc	r21, r1
    2dcc:	61 09       	sbc	r22, r1
    2dce:	71 09       	sbc	r23, r1
    2dd0:	4e 87       	std	Y+14, r20	; 0x0e
    2dd2:	5f 87       	std	Y+15, r21	; 0x0f
    2dd4:	68 8b       	std	Y+16, r22	; 0x10
    2dd6:	79 8b       	std	Y+17, r23	; 0x11
    2dd8:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    2ddc:	98 17       	cp	r25, r24
    2dde:	10 f4       	brcc	.+4      	; 0x2de4 <xTaskPriorityDisinherit+0x56>
    2de0:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    2de4:	2b e0       	ldi	r18, 0x0B	; 11
    2de6:	82 9f       	mul	r24, r18
    2de8:	c0 01       	movw	r24, r0
    2dea:	11 24       	eor	r1, r1
    2dec:	b8 01       	movw	r22, r16
    2dee:	80 53       	subi	r24, 0x30	; 48
    2df0:	97 4e       	sbci	r25, 0xE7	; 231
    2df2:	0e 94 07 08 	call	0x100e	; 0x100e <vListInsertEnd>
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	05 c0       	rjmp	.+10     	; 0x2e04 <xTaskPriorityDisinherit+0x76>
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	03 c0       	rjmp	.+6      	; 0x2e04 <xTaskPriorityDisinherit+0x76>
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	01 c0       	rjmp	.+2      	; 0x2e04 <xTaskPriorityDisinherit+0x76>
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	df 91       	pop	r29
    2e06:	cf 91       	pop	r28
    2e08:	1f 91       	pop	r17
    2e0a:	0f 91       	pop	r16
    2e0c:	08 95       	ret

00002e0e <vTaskPriorityDisinheritAfterTimeout>:
    2e0e:	0f 93       	push	r16
    2e10:	1f 93       	push	r17
    2e12:	cf 93       	push	r28
    2e14:	df 93       	push	r29
    2e16:	fc 01       	movw	r30, r24
    2e18:	89 2b       	or	r24, r25
    2e1a:	09 f4       	brne	.+2      	; 0x2e1e <vTaskPriorityDisinheritAfterTimeout+0x10>
    2e1c:	3f c0       	rjmp	.+126    	; 0x2e9c <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2e1e:	87 a1       	ldd	r24, Z+39	; 0x27
    2e20:	86 17       	cp	r24, r22
    2e22:	08 f4       	brcc	.+2      	; 0x2e26 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2e24:	86 2f       	mov	r24, r22
    2e26:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e28:	98 17       	cp	r25, r24
    2e2a:	c1 f1       	breq	.+112    	; 0x2e9c <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2e2c:	20 a5       	ldd	r18, Z+40	; 0x28
    2e2e:	21 30       	cpi	r18, 0x01	; 1
    2e30:	a9 f5       	brne	.+106    	; 0x2e9c <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2e32:	82 8f       	std	Z+26, r24	; 0x1a
    2e34:	46 85       	ldd	r20, Z+14	; 0x0e
    2e36:	57 85       	ldd	r21, Z+15	; 0x0f
    2e38:	60 89       	ldd	r22, Z+16	; 0x10
    2e3a:	71 89       	ldd	r23, Z+17	; 0x11
    2e3c:	77 23       	and	r23, r23
    2e3e:	64 f0       	brlt	.+24     	; 0x2e58 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    2e40:	44 e0       	ldi	r20, 0x04	; 4
    2e42:	50 e0       	ldi	r21, 0x00	; 0
    2e44:	60 e0       	ldi	r22, 0x00	; 0
    2e46:	70 e0       	ldi	r23, 0x00	; 0
    2e48:	48 1b       	sub	r20, r24
    2e4a:	51 09       	sbc	r21, r1
    2e4c:	61 09       	sbc	r22, r1
    2e4e:	71 09       	sbc	r23, r1
    2e50:	46 87       	std	Z+14, r20	; 0x0e
    2e52:	57 87       	std	Z+15, r21	; 0x0f
    2e54:	60 8b       	std	Z+16, r22	; 0x10
    2e56:	71 8b       	std	Z+17, r23	; 0x11
    2e58:	2b e0       	ldi	r18, 0x0B	; 11
    2e5a:	92 9f       	mul	r25, r18
    2e5c:	c0 01       	movw	r24, r0
    2e5e:	11 24       	eor	r1, r1
    2e60:	80 53       	subi	r24, 0x30	; 48
    2e62:	97 4e       	sbci	r25, 0xE7	; 231
    2e64:	24 85       	ldd	r18, Z+12	; 0x0c
    2e66:	35 85       	ldd	r19, Z+13	; 0x0d
    2e68:	28 17       	cp	r18, r24
    2e6a:	39 07       	cpc	r19, r25
    2e6c:	b9 f4       	brne	.+46     	; 0x2e9c <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2e6e:	ef 01       	movw	r28, r30
    2e70:	8f 01       	movw	r16, r30
    2e72:	0e 5f       	subi	r16, 0xFE	; 254
    2e74:	1f 4f       	sbci	r17, 0xFF	; 255
    2e76:	c8 01       	movw	r24, r16
    2e78:	0e 94 65 08 	call	0x10ca	; 0x10ca <uxListRemove>
    2e7c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e7e:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    2e82:	98 17       	cp	r25, r24
    2e84:	10 f4       	brcc	.+4      	; 0x2e8a <vTaskPriorityDisinheritAfterTimeout+0x7c>
    2e86:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    2e8a:	2b e0       	ldi	r18, 0x0B	; 11
    2e8c:	82 9f       	mul	r24, r18
    2e8e:	c0 01       	movw	r24, r0
    2e90:	11 24       	eor	r1, r1
    2e92:	b8 01       	movw	r22, r16
    2e94:	80 53       	subi	r24, 0x30	; 48
    2e96:	97 4e       	sbci	r25, 0xE7	; 231
    2e98:	0e 94 07 08 	call	0x100e	; 0x100e <vListInsertEnd>
    2e9c:	df 91       	pop	r29
    2e9e:	cf 91       	pop	r28
    2ea0:	1f 91       	pop	r17
    2ea2:	0f 91       	pop	r16
    2ea4:	08 95       	ret

00002ea6 <uxTaskResetEventItemValue>:
    2ea6:	cf 92       	push	r12
    2ea8:	df 92       	push	r13
    2eaa:	ef 92       	push	r14
    2eac:	ff 92       	push	r15
    2eae:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2eb2:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2eb6:	66 85       	ldd	r22, Z+14	; 0x0e
    2eb8:	77 85       	ldd	r23, Z+15	; 0x0f
    2eba:	80 89       	ldd	r24, Z+16	; 0x10
    2ebc:	91 89       	ldd	r25, Z+17	; 0x11
    2ebe:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2ec2:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2ec6:	a0 91 fc 18 	lds	r26, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2eca:	b0 91 fd 18 	lds	r27, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2ece:	5a 96       	adiw	r26, 0x1a	; 26
    2ed0:	2c 91       	ld	r18, X
    2ed2:	c1 2c       	mov	r12, r1
    2ed4:	d1 2c       	mov	r13, r1
    2ed6:	76 01       	movw	r14, r12
    2ed8:	68 94       	set
    2eda:	c2 f8       	bld	r12, 2
    2edc:	c2 1a       	sub	r12, r18
    2ede:	d1 08       	sbc	r13, r1
    2ee0:	e1 08       	sbc	r14, r1
    2ee2:	f1 08       	sbc	r15, r1
    2ee4:	c6 86       	std	Z+14, r12	; 0x0e
    2ee6:	d7 86       	std	Z+15, r13	; 0x0f
    2ee8:	e0 8a       	std	Z+16, r14	; 0x10
    2eea:	f1 8a       	std	Z+17, r15	; 0x11
    2eec:	ff 90       	pop	r15
    2eee:	ef 90       	pop	r14
    2ef0:	df 90       	pop	r13
    2ef2:	cf 90       	pop	r12
    2ef4:	08 95       	ret

00002ef6 <pvTaskIncrementMutexHeldCount>:
    2ef6:	80 91 fc 18 	lds	r24, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2efa:	90 91 fd 18 	lds	r25, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2efe:	89 2b       	or	r24, r25
    2f00:	39 f0       	breq	.+14     	; 0x2f10 <pvTaskIncrementMutexHeldCount+0x1a>
    2f02:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2f06:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2f0a:	80 a5       	ldd	r24, Z+40	; 0x28
    2f0c:	8f 5f       	subi	r24, 0xFF	; 255
    2f0e:	80 a7       	std	Z+40, r24	; 0x28
    2f10:	80 91 fc 18 	lds	r24, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2f14:	90 91 fd 18 	lds	r25, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2f18:	08 95       	ret

00002f1a <xTaskNotifyWait>:
    2f1a:	4f 92       	push	r4
    2f1c:	5f 92       	push	r5
    2f1e:	6f 92       	push	r6
    2f20:	7f 92       	push	r7
    2f22:	8f 92       	push	r8
    2f24:	9f 92       	push	r9
    2f26:	af 92       	push	r10
    2f28:	bf 92       	push	r11
    2f2a:	cf 92       	push	r12
    2f2c:	df 92       	push	r13
    2f2e:	ef 92       	push	r14
    2f30:	ff 92       	push	r15
    2f32:	0f 93       	push	r16
    2f34:	1f 93       	push	r17
    2f36:	49 01       	movw	r8, r18
    2f38:	5a 01       	movw	r10, r20
    2f3a:	0f b6       	in	r0, 0x3f	; 63
    2f3c:	f8 94       	cli
    2f3e:	0f 92       	push	r0
    2f40:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2f44:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2f48:	27 a5       	ldd	r18, Z+47	; 0x2f
    2f4a:	22 30       	cpi	r18, 0x02	; 2
    2f4c:	39 f1       	breq	.+78     	; 0x2f9c <xTaskNotifyWait+0x82>
    2f4e:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2f52:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2f56:	43 a4       	ldd	r4, Z+43	; 0x2b
    2f58:	54 a4       	ldd	r5, Z+44	; 0x2c
    2f5a:	65 a4       	ldd	r6, Z+45	; 0x2d
    2f5c:	76 a4       	ldd	r7, Z+46	; 0x2e
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	80 95       	com	r24
    2f64:	90 95       	com	r25
    2f66:	a0 95       	com	r26
    2f68:	b0 95       	com	r27
    2f6a:	84 21       	and	r24, r4
    2f6c:	95 21       	and	r25, r5
    2f6e:	a6 21       	and	r26, r6
    2f70:	b7 21       	and	r27, r7
    2f72:	83 a7       	std	Z+43, r24	; 0x2b
    2f74:	94 a7       	std	Z+44, r25	; 0x2c
    2f76:	a5 a7       	std	Z+45, r26	; 0x2d
    2f78:	b6 a7       	std	Z+46, r27	; 0x2e
    2f7a:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2f7e:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	87 a7       	std	Z+47, r24	; 0x2f
    2f86:	c1 14       	cp	r12, r1
    2f88:	d1 04       	cpc	r13, r1
    2f8a:	e1 04       	cpc	r14, r1
    2f8c:	f1 04       	cpc	r15, r1
    2f8e:	31 f0       	breq	.+12     	; 0x2f9c <xTaskNotifyWait+0x82>
    2f90:	41 e0       	ldi	r20, 0x01	; 1
    2f92:	c7 01       	movw	r24, r14
    2f94:	b6 01       	movw	r22, r12
    2f96:	fc d8       	rcall	.-3592   	; 0x2190 <prvAddCurrentTaskToDelayedList>
    2f98:	0e 94 3a 09 	call	0x1274	; 0x1274 <vPortYield>
    2f9c:	0f 90       	pop	r0
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	0f b6       	in	r0, 0x3f	; 63
    2fa2:	f8 94       	cli
    2fa4:	0f 92       	push	r0
    2fa6:	01 15       	cp	r16, r1
    2fa8:	11 05       	cpc	r17, r1
    2faa:	69 f0       	breq	.+26     	; 0x2fc6 <xTaskNotifyWait+0xac>
    2fac:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2fb0:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2fb4:	83 a5       	ldd	r24, Z+43	; 0x2b
    2fb6:	94 a5       	ldd	r25, Z+44	; 0x2c
    2fb8:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2fba:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2fbc:	f8 01       	movw	r30, r16
    2fbe:	80 83       	st	Z, r24
    2fc0:	91 83       	std	Z+1, r25	; 0x01
    2fc2:	a2 83       	std	Z+2, r26	; 0x02
    2fc4:	b3 83       	std	Z+3, r27	; 0x03
    2fc6:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2fca:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2fce:	87 a5       	ldd	r24, Z+47	; 0x2f
    2fd0:	82 30       	cpi	r24, 0x02	; 2
    2fd2:	b1 f4       	brne	.+44     	; 0x3000 <xTaskNotifyWait+0xe6>
    2fd4:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    2fd8:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    2fdc:	83 a5       	ldd	r24, Z+43	; 0x2b
    2fde:	94 a5       	ldd	r25, Z+44	; 0x2c
    2fe0:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2fe2:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2fe4:	80 94       	com	r8
    2fe6:	90 94       	com	r9
    2fe8:	a0 94       	com	r10
    2fea:	b0 94       	com	r11
    2fec:	88 22       	and	r8, r24
    2fee:	99 22       	and	r9, r25
    2ff0:	aa 22       	and	r10, r26
    2ff2:	bb 22       	and	r11, r27
    2ff4:	83 a6       	std	Z+43, r8	; 0x2b
    2ff6:	94 a6       	std	Z+44, r9	; 0x2c
    2ff8:	a5 a6       	std	Z+45, r10	; 0x2d
    2ffa:	b6 a6       	std	Z+46, r11	; 0x2e
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	01 c0       	rjmp	.+2      	; 0x3002 <xTaskNotifyWait+0xe8>
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    3006:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    300a:	17 a6       	std	Z+47, r1	; 0x2f
    300c:	0f 90       	pop	r0
    300e:	0f be       	out	0x3f, r0	; 63
    3010:	1f 91       	pop	r17
    3012:	0f 91       	pop	r16
    3014:	ff 90       	pop	r15
    3016:	ef 90       	pop	r14
    3018:	df 90       	pop	r13
    301a:	cf 90       	pop	r12
    301c:	bf 90       	pop	r11
    301e:	af 90       	pop	r10
    3020:	9f 90       	pop	r9
    3022:	8f 90       	pop	r8
    3024:	7f 90       	pop	r7
    3026:	6f 90       	pop	r6
    3028:	5f 90       	pop	r5
    302a:	4f 90       	pop	r4
    302c:	08 95       	ret

0000302e <xTaskGenericNotify>:
    302e:	0f 93       	push	r16
    3030:	1f 93       	push	r17
    3032:	cf 93       	push	r28
    3034:	df 93       	push	r29
    3036:	fc 01       	movw	r30, r24
    3038:	0f b6       	in	r0, 0x3f	; 63
    303a:	f8 94       	cli
    303c:	0f 92       	push	r0
    303e:	01 15       	cp	r16, r1
    3040:	11 05       	cpc	r17, r1
    3042:	49 f0       	breq	.+18     	; 0x3056 <xTaskGenericNotify+0x28>
    3044:	83 a5       	ldd	r24, Z+43	; 0x2b
    3046:	94 a5       	ldd	r25, Z+44	; 0x2c
    3048:	a5 a5       	ldd	r26, Z+45	; 0x2d
    304a:	b6 a5       	ldd	r27, Z+46	; 0x2e
    304c:	e8 01       	movw	r28, r16
    304e:	88 83       	st	Y, r24
    3050:	99 83       	std	Y+1, r25	; 0x01
    3052:	aa 83       	std	Y+2, r26	; 0x02
    3054:	bb 83       	std	Y+3, r27	; 0x03
    3056:	87 a5       	ldd	r24, Z+47	; 0x2f
    3058:	92 e0       	ldi	r25, 0x02	; 2
    305a:	97 a7       	std	Z+47, r25	; 0x2f
    305c:	22 30       	cpi	r18, 0x02	; 2
    305e:	b1 f0       	breq	.+44     	; 0x308c <xTaskGenericNotify+0x5e>
    3060:	18 f4       	brcc	.+6      	; 0x3068 <xTaskGenericNotify+0x3a>
    3062:	21 30       	cpi	r18, 0x01	; 1
    3064:	31 f0       	breq	.+12     	; 0x3072 <xTaskGenericNotify+0x44>
    3066:	2a c0       	rjmp	.+84     	; 0x30bc <xTaskGenericNotify+0x8e>
    3068:	23 30       	cpi	r18, 0x03	; 3
    306a:	e9 f0       	breq	.+58     	; 0x30a6 <xTaskGenericNotify+0x78>
    306c:	24 30       	cpi	r18, 0x04	; 4
    306e:	01 f1       	breq	.+64     	; 0x30b0 <xTaskGenericNotify+0x82>
    3070:	25 c0       	rjmp	.+74     	; 0x30bc <xTaskGenericNotify+0x8e>
    3072:	03 a5       	ldd	r16, Z+43	; 0x2b
    3074:	14 a5       	ldd	r17, Z+44	; 0x2c
    3076:	25 a5       	ldd	r18, Z+45	; 0x2d
    3078:	36 a5       	ldd	r19, Z+46	; 0x2e
    307a:	40 2b       	or	r20, r16
    307c:	51 2b       	or	r21, r17
    307e:	62 2b       	or	r22, r18
    3080:	73 2b       	or	r23, r19
    3082:	43 a7       	std	Z+43, r20	; 0x2b
    3084:	54 a7       	std	Z+44, r21	; 0x2c
    3086:	65 a7       	std	Z+45, r22	; 0x2d
    3088:	76 a7       	std	Z+46, r23	; 0x2e
    308a:	18 c0       	rjmp	.+48     	; 0x30bc <xTaskGenericNotify+0x8e>
    308c:	43 a5       	ldd	r20, Z+43	; 0x2b
    308e:	54 a5       	ldd	r21, Z+44	; 0x2c
    3090:	65 a5       	ldd	r22, Z+45	; 0x2d
    3092:	76 a5       	ldd	r23, Z+46	; 0x2e
    3094:	4f 5f       	subi	r20, 0xFF	; 255
    3096:	5f 4f       	sbci	r21, 0xFF	; 255
    3098:	6f 4f       	sbci	r22, 0xFF	; 255
    309a:	7f 4f       	sbci	r23, 0xFF	; 255
    309c:	43 a7       	std	Z+43, r20	; 0x2b
    309e:	54 a7       	std	Z+44, r21	; 0x2c
    30a0:	65 a7       	std	Z+45, r22	; 0x2d
    30a2:	76 a7       	std	Z+46, r23	; 0x2e
    30a4:	0b c0       	rjmp	.+22     	; 0x30bc <xTaskGenericNotify+0x8e>
    30a6:	43 a7       	std	Z+43, r20	; 0x2b
    30a8:	54 a7       	std	Z+44, r21	; 0x2c
    30aa:	65 a7       	std	Z+45, r22	; 0x2d
    30ac:	76 a7       	std	Z+46, r23	; 0x2e
    30ae:	06 c0       	rjmp	.+12     	; 0x30bc <xTaskGenericNotify+0x8e>
    30b0:	82 30       	cpi	r24, 0x02	; 2
    30b2:	49 f1       	breq	.+82     	; 0x3106 <xTaskGenericNotify+0xd8>
    30b4:	43 a7       	std	Z+43, r20	; 0x2b
    30b6:	54 a7       	std	Z+44, r21	; 0x2c
    30b8:	65 a7       	std	Z+45, r22	; 0x2d
    30ba:	76 a7       	std	Z+46, r23	; 0x2e
    30bc:	81 30       	cpi	r24, 0x01	; 1
    30be:	29 f5       	brne	.+74     	; 0x310a <xTaskGenericNotify+0xdc>
    30c0:	ef 01       	movw	r28, r30
    30c2:	8f 01       	movw	r16, r30
    30c4:	0e 5f       	subi	r16, 0xFE	; 254
    30c6:	1f 4f       	sbci	r17, 0xFF	; 255
    30c8:	c8 01       	movw	r24, r16
    30ca:	0e 94 65 08 	call	0x10ca	; 0x10ca <uxListRemove>
    30ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30d0:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    30d4:	98 17       	cp	r25, r24
    30d6:	10 f4       	brcc	.+4      	; 0x30dc <xTaskGenericNotify+0xae>
    30d8:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    30dc:	2b e0       	ldi	r18, 0x0B	; 11
    30de:	82 9f       	mul	r24, r18
    30e0:	c0 01       	movw	r24, r0
    30e2:	11 24       	eor	r1, r1
    30e4:	b8 01       	movw	r22, r16
    30e6:	80 53       	subi	r24, 0x30	; 48
    30e8:	97 4e       	sbci	r25, 0xE7	; 231
    30ea:	0e 94 07 08 	call	0x100e	; 0x100e <vListInsertEnd>
    30ee:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    30f2:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    30f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    30fa:	89 17       	cp	r24, r25
    30fc:	40 f4       	brcc	.+16     	; 0x310e <xTaskGenericNotify+0xe0>
    30fe:	0e 94 3a 09 	call	0x1274	; 0x1274 <vPortYield>
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	05 c0       	rjmp	.+10     	; 0x3110 <xTaskGenericNotify+0xe2>
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	03 c0       	rjmp	.+6      	; 0x3110 <xTaskGenericNotify+0xe2>
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	01 c0       	rjmp	.+2      	; 0x3110 <xTaskGenericNotify+0xe2>
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	0f 90       	pop	r0
    3112:	0f be       	out	0x3f, r0	; 63
    3114:	df 91       	pop	r29
    3116:	cf 91       	pop	r28
    3118:	1f 91       	pop	r17
    311a:	0f 91       	pop	r16
    311c:	08 95       	ret

0000311e <xTaskGenericNotifyFromISR>:
    311e:	ef 92       	push	r14
    3120:	ff 92       	push	r15
    3122:	0f 93       	push	r16
    3124:	1f 93       	push	r17
    3126:	cf 93       	push	r28
    3128:	df 93       	push	r29
    312a:	fc 01       	movw	r30, r24
    312c:	01 15       	cp	r16, r1
    312e:	11 05       	cpc	r17, r1
    3130:	49 f0       	breq	.+18     	; 0x3144 <xTaskGenericNotifyFromISR+0x26>
    3132:	83 a5       	ldd	r24, Z+43	; 0x2b
    3134:	94 a5       	ldd	r25, Z+44	; 0x2c
    3136:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3138:	b6 a5       	ldd	r27, Z+46	; 0x2e
    313a:	e8 01       	movw	r28, r16
    313c:	88 83       	st	Y, r24
    313e:	99 83       	std	Y+1, r25	; 0x01
    3140:	aa 83       	std	Y+2, r26	; 0x02
    3142:	bb 83       	std	Y+3, r27	; 0x03
    3144:	87 a5       	ldd	r24, Z+47	; 0x2f
    3146:	92 e0       	ldi	r25, 0x02	; 2
    3148:	97 a7       	std	Z+47, r25	; 0x2f
    314a:	22 30       	cpi	r18, 0x02	; 2
    314c:	b1 f0       	breq	.+44     	; 0x317a <xTaskGenericNotifyFromISR+0x5c>
    314e:	18 f4       	brcc	.+6      	; 0x3156 <xTaskGenericNotifyFromISR+0x38>
    3150:	21 30       	cpi	r18, 0x01	; 1
    3152:	31 f0       	breq	.+12     	; 0x3160 <xTaskGenericNotifyFromISR+0x42>
    3154:	2a c0       	rjmp	.+84     	; 0x31aa <xTaskGenericNotifyFromISR+0x8c>
    3156:	23 30       	cpi	r18, 0x03	; 3
    3158:	e9 f0       	breq	.+58     	; 0x3194 <xTaskGenericNotifyFromISR+0x76>
    315a:	24 30       	cpi	r18, 0x04	; 4
    315c:	01 f1       	breq	.+64     	; 0x319e <xTaskGenericNotifyFromISR+0x80>
    315e:	25 c0       	rjmp	.+74     	; 0x31aa <xTaskGenericNotifyFromISR+0x8c>
    3160:	03 a5       	ldd	r16, Z+43	; 0x2b
    3162:	14 a5       	ldd	r17, Z+44	; 0x2c
    3164:	25 a5       	ldd	r18, Z+45	; 0x2d
    3166:	36 a5       	ldd	r19, Z+46	; 0x2e
    3168:	40 2b       	or	r20, r16
    316a:	51 2b       	or	r21, r17
    316c:	62 2b       	or	r22, r18
    316e:	73 2b       	or	r23, r19
    3170:	43 a7       	std	Z+43, r20	; 0x2b
    3172:	54 a7       	std	Z+44, r21	; 0x2c
    3174:	65 a7       	std	Z+45, r22	; 0x2d
    3176:	76 a7       	std	Z+46, r23	; 0x2e
    3178:	18 c0       	rjmp	.+48     	; 0x31aa <xTaskGenericNotifyFromISR+0x8c>
    317a:	43 a5       	ldd	r20, Z+43	; 0x2b
    317c:	54 a5       	ldd	r21, Z+44	; 0x2c
    317e:	65 a5       	ldd	r22, Z+45	; 0x2d
    3180:	76 a5       	ldd	r23, Z+46	; 0x2e
    3182:	4f 5f       	subi	r20, 0xFF	; 255
    3184:	5f 4f       	sbci	r21, 0xFF	; 255
    3186:	6f 4f       	sbci	r22, 0xFF	; 255
    3188:	7f 4f       	sbci	r23, 0xFF	; 255
    318a:	43 a7       	std	Z+43, r20	; 0x2b
    318c:	54 a7       	std	Z+44, r21	; 0x2c
    318e:	65 a7       	std	Z+45, r22	; 0x2d
    3190:	76 a7       	std	Z+46, r23	; 0x2e
    3192:	0b c0       	rjmp	.+22     	; 0x31aa <xTaskGenericNotifyFromISR+0x8c>
    3194:	43 a7       	std	Z+43, r20	; 0x2b
    3196:	54 a7       	std	Z+44, r21	; 0x2c
    3198:	65 a7       	std	Z+45, r22	; 0x2d
    319a:	76 a7       	std	Z+46, r23	; 0x2e
    319c:	06 c0       	rjmp	.+12     	; 0x31aa <xTaskGenericNotifyFromISR+0x8c>
    319e:	82 30       	cpi	r24, 0x02	; 2
    31a0:	d9 f1       	breq	.+118    	; 0x3218 <xTaskGenericNotifyFromISR+0xfa>
    31a2:	43 a7       	std	Z+43, r20	; 0x2b
    31a4:	54 a7       	std	Z+44, r21	; 0x2c
    31a6:	65 a7       	std	Z+45, r22	; 0x2d
    31a8:	76 a7       	std	Z+46, r23	; 0x2e
    31aa:	81 30       	cpi	r24, 0x01	; 1
    31ac:	b9 f5       	brne	.+110    	; 0x321c <xTaskGenericNotifyFromISR+0xfe>
    31ae:	ef 01       	movw	r28, r30
    31b0:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxSchedulerSuspended>
    31b4:	81 11       	cpse	r24, r1
    31b6:	17 c0       	rjmp	.+46     	; 0x31e6 <xTaskGenericNotifyFromISR+0xc8>
    31b8:	8f 01       	movw	r16, r30
    31ba:	0e 5f       	subi	r16, 0xFE	; 254
    31bc:	1f 4f       	sbci	r17, 0xFF	; 255
    31be:	c8 01       	movw	r24, r16
    31c0:	0e 94 65 08 	call	0x10ca	; 0x10ca <uxListRemove>
    31c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31c6:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <uxTopReadyPriority>
    31ca:	98 17       	cp	r25, r24
    31cc:	10 f4       	brcc	.+4      	; 0x31d2 <xTaskGenericNotifyFromISR+0xb4>
    31ce:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <uxTopReadyPriority>
    31d2:	eb e0       	ldi	r30, 0x0B	; 11
    31d4:	8e 9f       	mul	r24, r30
    31d6:	c0 01       	movw	r24, r0
    31d8:	11 24       	eor	r1, r1
    31da:	b8 01       	movw	r22, r16
    31dc:	80 53       	subi	r24, 0x30	; 48
    31de:	97 4e       	sbci	r25, 0xE7	; 231
    31e0:	0e 94 07 08 	call	0x100e	; 0x100e <vListInsertEnd>
    31e4:	07 c0       	rjmp	.+14     	; 0x31f4 <xTaskGenericNotifyFromISR+0xd6>
    31e6:	bf 01       	movw	r22, r30
    31e8:	62 5f       	subi	r22, 0xF2	; 242
    31ea:	7f 4f       	sbci	r23, 0xFF	; 255
    31ec:	8b ea       	ldi	r24, 0xAB	; 171
    31ee:	98 e1       	ldi	r25, 0x18	; 24
    31f0:	0e 94 07 08 	call	0x100e	; 0x100e <vListInsertEnd>
    31f4:	e0 91 fc 18 	lds	r30, 0x18FC	; 0x8018fc <pxCurrentTCB>
    31f8:	f0 91 fd 18 	lds	r31, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>
    31fc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    31fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    3200:	89 17       	cp	r24, r25
    3202:	70 f4       	brcc	.+28     	; 0x3220 <xTaskGenericNotifyFromISR+0x102>
    3204:	e1 14       	cp	r14, r1
    3206:	f1 04       	cpc	r15, r1
    3208:	19 f0       	breq	.+6      	; 0x3210 <xTaskGenericNotifyFromISR+0xf2>
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	e7 01       	movw	r28, r14
    320e:	88 83       	st	Y, r24
    3210:	81 e0       	ldi	r24, 0x01	; 1
    3212:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <xYieldPending>
    3216:	05 c0       	rjmp	.+10     	; 0x3222 <xTaskGenericNotifyFromISR+0x104>
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	03 c0       	rjmp	.+6      	; 0x3222 <xTaskGenericNotifyFromISR+0x104>
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	01 c0       	rjmp	.+2      	; 0x3222 <xTaskGenericNotifyFromISR+0x104>
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	df 91       	pop	r29
    3224:	cf 91       	pop	r28
    3226:	1f 91       	pop	r17
    3228:	0f 91       	pop	r16
    322a:	ff 90       	pop	r15
    322c:	ef 90       	pop	r14
    322e:	08 95       	ret

00003230 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3230:	00 97       	sbiw	r24, 0x00	; 0
    3232:	21 f4       	brne	.+8      	; 0x323c <xTaskNotifyStateClear+0xc>
    3234:	80 91 fc 18 	lds	r24, 0x18FC	; 0x8018fc <pxCurrentTCB>
    3238:	90 91 fd 18 	lds	r25, 0x18FD	; 0x8018fd <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    323c:	0f b6       	in	r0, 0x3f	; 63
    323e:	f8 94       	cli
    3240:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    3242:	fc 01       	movw	r30, r24
    3244:	27 a5       	ldd	r18, Z+47	; 0x2f
    3246:	22 30       	cpi	r18, 0x02	; 2
    3248:	19 f4       	brne	.+6      	; 0x3250 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    324a:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	01 c0       	rjmp	.+2      	; 0x3252 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    3250:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3252:	0f 90       	pop	r0
    3254:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3256:	08 95       	ret

00003258 <prvInsertTimerInActiveList>:
    3258:	cf 92       	push	r12
    325a:	df 92       	push	r13
    325c:	ef 92       	push	r14
    325e:	ff 92       	push	r15
    3260:	0f 93       	push	r16
    3262:	1f 93       	push	r17
    3264:	fc 01       	movw	r30, r24
    3266:	42 83       	std	Z+2, r20	; 0x02
    3268:	53 83       	std	Z+3, r21	; 0x03
    326a:	64 83       	std	Z+4, r22	; 0x04
    326c:	75 83       	std	Z+5, r23	; 0x05
    326e:	93 87       	std	Z+11, r25	; 0x0b
    3270:	82 87       	std	Z+10, r24	; 0x0a
    3272:	04 17       	cp	r16, r20
    3274:	15 07       	cpc	r17, r21
    3276:	26 07       	cpc	r18, r22
    3278:	37 07       	cpc	r19, r23
    327a:	c0 f0       	brcs	.+48     	; 0x32ac <prvInsertTimerInActiveList+0x54>
    327c:	0c 19       	sub	r16, r12
    327e:	1d 09       	sbc	r17, r13
    3280:	2e 09       	sbc	r18, r14
    3282:	3f 09       	sbc	r19, r15
    3284:	86 85       	ldd	r24, Z+14	; 0x0e
    3286:	97 85       	ldd	r25, Z+15	; 0x0f
    3288:	a0 89       	ldd	r26, Z+16	; 0x10
    328a:	b1 89       	ldd	r27, Z+17	; 0x11
    328c:	08 17       	cp	r16, r24
    328e:	19 07       	cpc	r17, r25
    3290:	2a 07       	cpc	r18, r26
    3292:	3b 07       	cpc	r19, r27
    3294:	00 f5       	brcc	.+64     	; 0x32d6 <prvInsertTimerInActiveList+0x7e>
    3296:	bf 01       	movw	r22, r30
    3298:	6e 5f       	subi	r22, 0xFE	; 254
    329a:	7f 4f       	sbci	r23, 0xFF	; 255
    329c:	80 91 06 19 	lds	r24, 0x1906	; 0x801906 <pxOverflowTimerList>
    32a0:	90 91 07 19 	lds	r25, 0x1907	; 0x801907 <pxOverflowTimerList+0x1>
    32a4:	0e 94 28 08 	call	0x1050	; 0x1050 <vListInsert>
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	18 c0       	rjmp	.+48     	; 0x32dc <prvInsertTimerInActiveList+0x84>
    32ac:	0c 15       	cp	r16, r12
    32ae:	1d 05       	cpc	r17, r13
    32b0:	2e 05       	cpc	r18, r14
    32b2:	3f 05       	cpc	r19, r15
    32b4:	28 f4       	brcc	.+10     	; 0x32c0 <prvInsertTimerInActiveList+0x68>
    32b6:	4c 15       	cp	r20, r12
    32b8:	5d 05       	cpc	r21, r13
    32ba:	6e 05       	cpc	r22, r14
    32bc:	7f 05       	cpc	r23, r15
    32be:	68 f4       	brcc	.+26     	; 0x32da <prvInsertTimerInActiveList+0x82>
    32c0:	bf 01       	movw	r22, r30
    32c2:	6e 5f       	subi	r22, 0xFE	; 254
    32c4:	7f 4f       	sbci	r23, 0xFF	; 255
    32c6:	80 91 08 19 	lds	r24, 0x1908	; 0x801908 <pxCurrentTimerList>
    32ca:	90 91 09 19 	lds	r25, 0x1909	; 0x801909 <pxCurrentTimerList+0x1>
    32ce:	0e 94 28 08 	call	0x1050	; 0x1050 <vListInsert>
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	03 c0       	rjmp	.+6      	; 0x32dc <prvInsertTimerInActiveList+0x84>
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	01 c0       	rjmp	.+2      	; 0x32dc <prvInsertTimerInActiveList+0x84>
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	1f 91       	pop	r17
    32de:	0f 91       	pop	r16
    32e0:	ff 90       	pop	r15
    32e2:	ef 90       	pop	r14
    32e4:	df 90       	pop	r13
    32e6:	cf 90       	pop	r12
    32e8:	08 95       	ret

000032ea <prvCheckForValidListAndQueue>:
    32ea:	0f b6       	in	r0, 0x3f	; 63
    32ec:	f8 94       	cli
    32ee:	0f 92       	push	r0
    32f0:	80 91 04 19 	lds	r24, 0x1904	; 0x801904 <xTimerQueue>
    32f4:	90 91 05 19 	lds	r25, 0x1905	; 0x801905 <xTimerQueue+0x1>
    32f8:	89 2b       	or	r24, r25
    32fa:	e9 f4       	brne	.+58     	; 0x3336 <prvCheckForValidListAndQueue+0x4c>
    32fc:	85 e1       	ldi	r24, 0x15	; 21
    32fe:	99 e1       	ldi	r25, 0x19	; 25
    3300:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <vListInitialise>
    3304:	8a e0       	ldi	r24, 0x0A	; 10
    3306:	99 e1       	ldi	r25, 0x19	; 25
    3308:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <vListInitialise>
    330c:	85 e1       	ldi	r24, 0x15	; 21
    330e:	99 e1       	ldi	r25, 0x19	; 25
    3310:	90 93 09 19 	sts	0x1909, r25	; 0x801909 <pxCurrentTimerList+0x1>
    3314:	80 93 08 19 	sts	0x1908, r24	; 0x801908 <pxCurrentTimerList>
    3318:	8a e0       	ldi	r24, 0x0A	; 10
    331a:	99 e1       	ldi	r25, 0x19	; 25
    331c:	90 93 07 19 	sts	0x1907, r25	; 0x801907 <pxOverflowTimerList+0x1>
    3320:	80 93 06 19 	sts	0x1906, r24	; 0x801906 <pxOverflowTimerList>
    3324:	40 e0       	ldi	r20, 0x00	; 0
    3326:	67 e0       	ldi	r22, 0x07	; 7
    3328:	8a e0       	ldi	r24, 0x0A	; 10
    332a:	0e 94 16 0b 	call	0x162c	; 0x162c <xQueueGenericCreate>
    332e:	90 93 05 19 	sts	0x1905, r25	; 0x801905 <xTimerQueue+0x1>
    3332:	80 93 04 19 	sts	0x1904, r24	; 0x801904 <xTimerQueue>
    3336:	0f 90       	pop	r0
    3338:	0f be       	out	0x3f, r0	; 63
    333a:	08 95       	ret

0000333c <xTimerCreateTimerTask>:
    333c:	ef 92       	push	r14
    333e:	ff 92       	push	r15
    3340:	0f 93       	push	r16
    3342:	d3 df       	rcall	.-90     	; 0x32ea <prvCheckForValidListAndQueue>
    3344:	80 91 04 19 	lds	r24, 0x1904	; 0x801904 <xTimerQueue>
    3348:	90 91 05 19 	lds	r25, 0x1905	; 0x801905 <xTimerQueue+0x1>
    334c:	89 2b       	or	r24, r25
    334e:	91 f0       	breq	.+36     	; 0x3374 <xTimerCreateTimerTask+0x38>
    3350:	0f 2e       	mov	r0, r31
    3352:	f2 e0       	ldi	r31, 0x02	; 2
    3354:	ef 2e       	mov	r14, r31
    3356:	f9 e1       	ldi	r31, 0x19	; 25
    3358:	ff 2e       	mov	r15, r31
    335a:	f0 2d       	mov	r31, r0
    335c:	03 e0       	ldi	r16, 0x03	; 3
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	45 e5       	ldi	r20, 0x55	; 85
    3364:	50 e0       	ldi	r21, 0x00	; 0
    3366:	6c e2       	ldi	r22, 0x2C	; 44
    3368:	74 e0       	ldi	r23, 0x04	; 4
    336a:	84 e0       	ldi	r24, 0x04	; 4
    336c:	91 e0       	ldi	r25, 0x01	; 1
    336e:	0e 94 3f 11 	call	0x227e	; 0x227e <xTaskCreate>
    3372:	01 c0       	rjmp	.+2      	; 0x3376 <xTimerCreateTimerTask+0x3a>
    3374:	80 e0       	ldi	r24, 0x00	; 0
    3376:	0f 91       	pop	r16
    3378:	ff 90       	pop	r15
    337a:	ef 90       	pop	r14
    337c:	08 95       	ret

0000337e <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    337e:	8f 92       	push	r8
    3380:	9f 92       	push	r9
    3382:	af 92       	push	r10
    3384:	bf 92       	push	r11
    3386:	cf 92       	push	r12
    3388:	df 92       	push	r13
    338a:	ef 92       	push	r14
    338c:	ff 92       	push	r15
    338e:	0f 93       	push	r16
    3390:	1f 93       	push	r17
    3392:	cf 93       	push	r28
    3394:	df 93       	push	r29
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
    339a:	27 97       	sbiw	r28, 0x07	; 7
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	f8 94       	cli
    33a0:	de bf       	out	0x3e, r29	; 62
    33a2:	0f be       	out	0x3f, r0	; 63
    33a4:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    33a6:	e0 91 04 19 	lds	r30, 0x1904	; 0x801904 <xTimerQueue>
    33aa:	f0 91 05 19 	lds	r31, 0x1905	; 0x801905 <xTimerQueue+0x1>
    33ae:	30 97       	sbiw	r30, 0x00	; 0
    33b0:	81 f1       	breq	.+96     	; 0x3412 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    33b2:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    33b4:	2a 83       	std	Y+2, r18	; 0x02
    33b6:	3b 83       	std	Y+3, r19	; 0x03
    33b8:	4c 83       	std	Y+4, r20	; 0x04
    33ba:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    33bc:	9f 83       	std	Y+7, r25	; 0x07
    33be:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    33c0:	66 30       	cpi	r22, 0x06	; 6
    33c2:	f4 f4       	brge	.+60     	; 0x3400 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    33c4:	68 dc       	rcall	.-1840   	; 0x2c96 <xTaskGetSchedulerState>
    33c6:	82 30       	cpi	r24, 0x02	; 2
    33c8:	69 f4       	brne	.+26     	; 0x33e4 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    33ca:	00 e0       	ldi	r16, 0x00	; 0
    33cc:	a7 01       	movw	r20, r14
    33ce:	96 01       	movw	r18, r12
    33d0:	be 01       	movw	r22, r28
    33d2:	6f 5f       	subi	r22, 0xFF	; 255
    33d4:	7f 4f       	sbci	r23, 0xFF	; 255
    33d6:	80 91 04 19 	lds	r24, 0x1904	; 0x801904 <xTimerQueue>
    33da:	90 91 05 19 	lds	r25, 0x1905	; 0x801905 <xTimerQueue+0x1>
    33de:	0e 94 44 0b 	call	0x1688	; 0x1688 <xQueueGenericSend>
    33e2:	18 c0       	rjmp	.+48     	; 0x3414 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    33e4:	00 e0       	ldi	r16, 0x00	; 0
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	a9 01       	movw	r20, r18
    33ec:	be 01       	movw	r22, r28
    33ee:	6f 5f       	subi	r22, 0xFF	; 255
    33f0:	7f 4f       	sbci	r23, 0xFF	; 255
    33f2:	80 91 04 19 	lds	r24, 0x1904	; 0x801904 <xTimerQueue>
    33f6:	90 91 05 19 	lds	r25, 0x1905	; 0x801905 <xTimerQueue+0x1>
    33fa:	0e 94 44 0b 	call	0x1688	; 0x1688 <xQueueGenericSend>
    33fe:	0a c0       	rjmp	.+20     	; 0x3414 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	a8 01       	movw	r20, r16
    3404:	be 01       	movw	r22, r28
    3406:	6f 5f       	subi	r22, 0xFF	; 255
    3408:	7f 4f       	sbci	r23, 0xFF	; 255
    340a:	cf 01       	movw	r24, r30
    340c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <xQueueGenericSendFromISR>
    3410:	01 c0       	rjmp	.+2      	; 0x3414 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3412:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    3414:	27 96       	adiw	r28, 0x07	; 7
    3416:	0f b6       	in	r0, 0x3f	; 63
    3418:	f8 94       	cli
    341a:	de bf       	out	0x3e, r29	; 62
    341c:	0f be       	out	0x3f, r0	; 63
    341e:	cd bf       	out	0x3d, r28	; 61
    3420:	df 91       	pop	r29
    3422:	cf 91       	pop	r28
    3424:	1f 91       	pop	r17
    3426:	0f 91       	pop	r16
    3428:	ff 90       	pop	r15
    342a:	ef 90       	pop	r14
    342c:	df 90       	pop	r13
    342e:	cf 90       	pop	r12
    3430:	bf 90       	pop	r11
    3432:	af 90       	pop	r10
    3434:	9f 90       	pop	r9
    3436:	8f 90       	pop	r8
    3438:	08 95       	ret

0000343a <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    343a:	2f 92       	push	r2
    343c:	3f 92       	push	r3
    343e:	4f 92       	push	r4
    3440:	5f 92       	push	r5
    3442:	6f 92       	push	r6
    3444:	7f 92       	push	r7
    3446:	8f 92       	push	r8
    3448:	9f 92       	push	r9
    344a:	af 92       	push	r10
    344c:	bf 92       	push	r11
    344e:	cf 92       	push	r12
    3450:	df 92       	push	r13
    3452:	ef 92       	push	r14
    3454:	ff 92       	push	r15
    3456:	0f 93       	push	r16
    3458:	1f 93       	push	r17
    345a:	cf 93       	push	r28
    345c:	df 93       	push	r29
    345e:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3460:	6f d8       	rcall	.-3874   	; 0x2540 <xTaskGetTickCount>
    3462:	2b 01       	movw	r4, r22
    3464:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    3466:	80 91 fe 18 	lds	r24, 0x18FE	; 0x8018fe <xLastTime.2432>
    346a:	90 91 ff 18 	lds	r25, 0x18FF	; 0x8018ff <xLastTime.2432+0x1>
    346e:	a0 91 00 19 	lds	r26, 0x1900	; 0x801900 <xLastTime.2432+0x2>
    3472:	b0 91 01 19 	lds	r27, 0x1901	; 0x801901 <xLastTime.2432+0x3>
    3476:	48 16       	cp	r4, r24
    3478:	59 06       	cpc	r5, r25
    347a:	6a 06       	cpc	r6, r26
    347c:	7b 06       	cpc	r7, r27
    347e:	08 f0       	brcs	.+2      	; 0x3482 <prvSampleTimeNow+0x48>
    3480:	53 c0       	rjmp	.+166    	; 0x3528 <prvSampleTimeNow+0xee>
    3482:	3b c0       	rjmp	.+118    	; 0x34fa <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3484:	07 80       	ldd	r0, Z+7	; 0x07
    3486:	f0 85       	ldd	r31, Z+8	; 0x08
    3488:	e0 2d       	mov	r30, r0
    348a:	80 80       	ld	r8, Z
    348c:	91 80       	ldd	r9, Z+1	; 0x01
    348e:	a2 80       	ldd	r10, Z+2	; 0x02
    3490:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3492:	c0 85       	ldd	r28, Z+8	; 0x08
    3494:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3496:	8e 01       	movw	r16, r28
    3498:	0e 5f       	subi	r16, 0xFE	; 254
    349a:	1f 4f       	sbci	r17, 0xFF	; 255
    349c:	c8 01       	movw	r24, r16
    349e:	0e 94 65 08 	call	0x10ca	; 0x10ca <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    34a2:	ec 89       	ldd	r30, Y+20	; 0x14
    34a4:	fd 89       	ldd	r31, Y+21	; 0x15
    34a6:	ce 01       	movw	r24, r28
    34a8:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    34aa:	8f 89       	ldd	r24, Y+23	; 0x17
    34ac:	82 ff       	sbrs	r24, 2
    34ae:	25 c0       	rjmp	.+74     	; 0x34fa <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    34b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    34b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    34b4:	a8 89       	ldd	r26, Y+16	; 0x10
    34b6:	b9 89       	ldd	r27, Y+17	; 0x11
    34b8:	88 0d       	add	r24, r8
    34ba:	99 1d       	adc	r25, r9
    34bc:	aa 1d       	adc	r26, r10
    34be:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    34c0:	88 16       	cp	r8, r24
    34c2:	99 06       	cpc	r9, r25
    34c4:	aa 06       	cpc	r10, r26
    34c6:	bb 06       	cpc	r11, r27
    34c8:	70 f4       	brcc	.+28     	; 0x34e6 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    34ca:	8a 83       	std	Y+2, r24	; 0x02
    34cc:	9b 83       	std	Y+3, r25	; 0x03
    34ce:	ac 83       	std	Y+4, r26	; 0x04
    34d0:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    34d2:	db 87       	std	Y+11, r29	; 0x0b
    34d4:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    34d6:	b8 01       	movw	r22, r16
    34d8:	80 91 08 19 	lds	r24, 0x1908	; 0x801908 <pxCurrentTimerList>
    34dc:	90 91 09 19 	lds	r25, 0x1909	; 0x801909 <pxCurrentTimerList+0x1>
    34e0:	0e 94 28 08 	call	0x1050	; 0x1050 <vListInsert>
    34e4:	0a c0       	rjmp	.+20     	; 0x34fa <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    34e6:	c1 2c       	mov	r12, r1
    34e8:	d1 2c       	mov	r13, r1
    34ea:	76 01       	movw	r14, r12
    34ec:	00 e0       	ldi	r16, 0x00	; 0
    34ee:	10 e0       	ldi	r17, 0x00	; 0
    34f0:	a5 01       	movw	r20, r10
    34f2:	94 01       	movw	r18, r8
    34f4:	60 e0       	ldi	r22, 0x00	; 0
    34f6:	ce 01       	movw	r24, r28
    34f8:	42 df       	rcall	.-380    	; 0x337e <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    34fa:	e0 91 08 19 	lds	r30, 0x1908	; 0x801908 <pxCurrentTimerList>
    34fe:	f0 91 09 19 	lds	r31, 0x1909	; 0x801909 <pxCurrentTimerList+0x1>
    3502:	80 81       	ld	r24, Z
    3504:	81 11       	cpse	r24, r1
    3506:	be cf       	rjmp	.-132    	; 0x3484 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3508:	80 91 06 19 	lds	r24, 0x1906	; 0x801906 <pxOverflowTimerList>
    350c:	90 91 07 19 	lds	r25, 0x1907	; 0x801907 <pxOverflowTimerList+0x1>
    3510:	90 93 09 19 	sts	0x1909, r25	; 0x801909 <pxCurrentTimerList+0x1>
    3514:	80 93 08 19 	sts	0x1908, r24	; 0x801908 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3518:	f0 93 07 19 	sts	0x1907, r31	; 0x801907 <pxOverflowTimerList+0x1>
    351c:	e0 93 06 19 	sts	0x1906, r30	; 0x801906 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    3520:	81 e0       	ldi	r24, 0x01	; 1
    3522:	f1 01       	movw	r30, r2
    3524:	80 83       	st	Z, r24
    3526:	02 c0       	rjmp	.+4      	; 0x352c <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3528:	f1 01       	movw	r30, r2
    352a:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    352c:	40 92 fe 18 	sts	0x18FE, r4	; 0x8018fe <xLastTime.2432>
    3530:	50 92 ff 18 	sts	0x18FF, r5	; 0x8018ff <xLastTime.2432+0x1>
    3534:	60 92 00 19 	sts	0x1900, r6	; 0x801900 <xLastTime.2432+0x2>
    3538:	70 92 01 19 	sts	0x1901, r7	; 0x801901 <xLastTime.2432+0x3>

    return xTimeNow;
}
    353c:	c3 01       	movw	r24, r6
    353e:	b2 01       	movw	r22, r4
    3540:	df 91       	pop	r29
    3542:	cf 91       	pop	r28
    3544:	1f 91       	pop	r17
    3546:	0f 91       	pop	r16
    3548:	ff 90       	pop	r15
    354a:	ef 90       	pop	r14
    354c:	df 90       	pop	r13
    354e:	cf 90       	pop	r12
    3550:	bf 90       	pop	r11
    3552:	af 90       	pop	r10
    3554:	9f 90       	pop	r9
    3556:	8f 90       	pop	r8
    3558:	7f 90       	pop	r7
    355a:	6f 90       	pop	r6
    355c:	5f 90       	pop	r5
    355e:	4f 90       	pop	r4
    3560:	3f 90       	pop	r3
    3562:	2f 90       	pop	r2
    3564:	08 95       	ret

00003566 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3566:	08 95       	ret

00003568 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3568:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    356a:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    356c:	2f ef       	ldi	r18, 0xFF	; 255
    356e:	80 e7       	ldi	r24, 0x70	; 112
    3570:	92 e0       	ldi	r25, 0x02	; 2
    3572:	21 50       	subi	r18, 0x01	; 1
    3574:	80 40       	sbci	r24, 0x00	; 0
    3576:	90 40       	sbci	r25, 0x00	; 0
    3578:	e1 f7       	brne	.-8      	; 0x3572 <vApplicationMallocFailedHook+0xa>
    357a:	00 c0       	rjmp	.+0      	; 0x357c <vApplicationMallocFailedHook+0x14>
    357c:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    357e:	1f 9a       	sbi	0x03, 7	; 3
    3580:	f5 cf       	rjmp	.-22     	; 0x356c <vApplicationMallocFailedHook+0x4>

00003582 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3582:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3584:	2f 9a       	sbi	0x05, 7	; 5
    3586:	2f ef       	ldi	r18, 0xFF	; 255
    3588:	87 ea       	ldi	r24, 0xA7	; 167
    358a:	91 e6       	ldi	r25, 0x61	; 97
    358c:	21 50       	subi	r18, 0x01	; 1
    358e:	80 40       	sbci	r24, 0x00	; 0
    3590:	90 40       	sbci	r25, 0x00	; 0
    3592:	e1 f7       	brne	.-8      	; 0x358c <vApplicationStackOverflowHook+0xa>
    3594:	00 c0       	rjmp	.+0      	; 0x3596 <vApplicationStackOverflowHook+0x14>
    3596:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3598:	1f 9a       	sbi	0x03, 7	; 3
    359a:	f5 cf       	rjmp	.-22     	; 0x3586 <vApplicationStackOverflowHook+0x4>

0000359c <hum_temp_task>:
		if((measureBits & (Hum_temp_measure_bit)) == (Hum_temp_measure_bit)){
			
				driver_ready_check = hih8120Wakeup();
				while (driver_ready_check != HIH8120_OK)
				{
					printf("%s%i%s\n", "Something went wrong with HIH8120 wakeup call! Return value was: ", driver_ready_check," . Retrying...");
    359c:	0f 2e       	mov	r0, r31
    359e:	fe e6       	ldi	r31, 0x6E	; 110
    35a0:	af 2e       	mov	r10, r31
    35a2:	f2 e0       	ldi	r31, 0x02	; 2
    35a4:	bf 2e       	mov	r11, r31
    35a6:	f0 2d       	mov	r31, r0
    35a8:	0f 2e       	mov	r0, r31
    35aa:	f4 e3       	ldi	r31, 0x34	; 52
    35ac:	8f 2e       	mov	r8, r31
    35ae:	f4 e0       	ldi	r31, 0x04	; 4
    35b0:	9f 2e       	mov	r9, r31
    35b2:	f0 2d       	mov	r31, r0
    35b4:	c9 ea       	ldi	r28, 0xA9	; 169
    35b6:	d2 e0       	ldi	r29, 0x02	; 2
				
				driver_ready_check = hih8120Meassure();
				
				while (driver_ready_check != HIH8120_OK)
				{
					printf("%s%i%s\n", "Something went wrong with HIH8120 measure call! Return value was: ", driver_ready_check," . Retrying...");
    35b8:	0f 2e       	mov	r0, r31
    35ba:	f6 e7       	ldi	r31, 0x76	; 118
    35bc:	6f 2e       	mov	r6, r31
    35be:	f4 e0       	ldi	r31, 0x04	; 4
    35c0:	7f 2e       	mov	r7, r31
    35c2:	f0 2d       	mov	r31, r0
			
				setHumidity(hih8120GetHumidity());
				setTemperature(hih8120GetTemperature());
				
				
				printf("%s%i%s\n", "Arduino humidity level: ", (int)getHumidity(), "%");
    35c4:	0f 2e       	mov	r0, r31
    35c6:	f9 eb       	ldi	r31, 0xB9	; 185
    35c8:	4f 2e       	mov	r4, r31
    35ca:	f4 e0       	ldi	r31, 0x04	; 4
    35cc:	5f 2e       	mov	r5, r31
    35ce:	f0 2d       	mov	r31, r0
    35d0:	0f 2e       	mov	r0, r31
    35d2:	fb eb       	ldi	r31, 0xBB	; 187
    35d4:	2f 2e       	mov	r2, r31
    35d6:	f4 e0       	ldi	r31, 0x04	; 4
    35d8:	3f 2e       	mov	r3, r31
    35da:	f0 2d       	mov	r31, r0
{

	for (;;) 
	{
		
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, Hum_temp_measure_bit, pdTRUE, pdTRUE, 500);
    35dc:	0f 2e       	mov	r0, r31
    35de:	f4 ef       	ldi	r31, 0xF4	; 244
    35e0:	cf 2e       	mov	r12, r31
    35e2:	dd 24       	eor	r13, r13
    35e4:	d3 94       	inc	r13
    35e6:	e1 2c       	mov	r14, r1
    35e8:	f1 2c       	mov	r15, r1
    35ea:	f0 2d       	mov	r31, r0
    35ec:	01 e0       	ldi	r16, 0x01	; 1
    35ee:	21 e0       	ldi	r18, 0x01	; 1
    35f0:	42 e0       	ldi	r20, 0x02	; 2
    35f2:	50 e0       	ldi	r21, 0x00	; 0
    35f4:	60 e0       	ldi	r22, 0x00	; 0
    35f6:	70 e0       	ldi	r23, 0x00	; 0
    35f8:	80 91 80 1a 	lds	r24, 0x1A80	; 0x801a80 <Measure_event_group>
    35fc:	90 91 81 1a 	lds	r25, 0x1A81	; 0x801a81 <Measure_event_group+0x1>
    3600:	0e 94 62 05 	call	0xac4	; 0xac4 <xEventGroupWaitBits>
		
		if((measureBits & (Hum_temp_measure_bit)) == (Hum_temp_measure_bit)){
    3604:	61 ff       	sbrs	r22, 1
    3606:	ea cf       	rjmp	.-44     	; 0x35dc <hum_temp_task+0x40>
			
				driver_ready_check = hih8120Wakeup();
    3608:	00 d2       	rcall	.+1024   	; 0x3a0a <hih8120Wakeup>
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	90 93 92 1a 	sts	0x1A92, r25	; 0x801a92 <driver_ready_check+0x1>
    3610:	80 93 91 1a 	sts	0x1A91, r24	; 0x801a91 <driver_ready_check>
				while (driver_ready_check != HIH8120_OK)
    3614:	00 97       	sbiw	r24, 0x00	; 0
    3616:	01 f1       	breq	.+64     	; 0x3658 <hum_temp_task+0xbc>
				{
					printf("%s%i%s\n", "Something went wrong with HIH8120 wakeup call! Return value was: ", driver_ready_check," . Retrying...");
    3618:	bf 92       	push	r11
    361a:	af 92       	push	r10
    361c:	9f 93       	push	r25
    361e:	8f 93       	push	r24
    3620:	9f 92       	push	r9
    3622:	8f 92       	push	r8
    3624:	df 93       	push	r29
    3626:	cf 93       	push	r28
    3628:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <printf>
					vTaskDelay(50);
    362c:	62 e3       	ldi	r22, 0x32	; 50
    362e:	70 e0       	ldi	r23, 0x00	; 0
    3630:	80 e0       	ldi	r24, 0x00	; 0
    3632:	90 e0       	ldi	r25, 0x00	; 0
					driver_ready_check = hih8120Wakeup();
    3634:	42 d9       	rcall	.-3452   	; 0x28ba <vTaskDelay>
    3636:	e9 d1       	rcall	.+978    	; 0x3a0a <hih8120Wakeup>
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	90 93 92 1a 	sts	0x1A92, r25	; 0x801a92 <driver_ready_check+0x1>
    363e:	80 93 91 1a 	sts	0x1A91, r24	; 0x801a91 <driver_ready_check>
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, Hum_temp_measure_bit, pdTRUE, pdTRUE, 500);
		
		if((measureBits & (Hum_temp_measure_bit)) == (Hum_temp_measure_bit)){
			
				driver_ready_check = hih8120Wakeup();
				while (driver_ready_check != HIH8120_OK)
    3642:	2d b7       	in	r18, 0x3d	; 61
    3644:	3e b7       	in	r19, 0x3e	; 62
    3646:	28 5f       	subi	r18, 0xF8	; 248
    3648:	3f 4f       	sbci	r19, 0xFF	; 255
    364a:	0f b6       	in	r0, 0x3f	; 63
    364c:	f8 94       	cli
    364e:	3e bf       	out	0x3e, r19	; 62
    3650:	0f be       	out	0x3f, r0	; 63
    3652:	2d bf       	out	0x3d, r18	; 61
    3654:	00 97       	sbiw	r24, 0x00	; 0
    3656:	01 f7       	brne	.-64     	; 0x3618 <hum_temp_task+0x7c>
					
				}
				//if (HIH8120_OK != driver_ready_check)
				//printf("%s", "Something went wrong with HIH8120 wakeup call! Return value was: ", driver_ready_check);

				vTaskDelay(60); // necessary wait delay after calling wakeup
    3658:	6c e3       	ldi	r22, 0x3C	; 60
    365a:	70 e0       	ldi	r23, 0x00	; 0
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	90 e0       	ldi	r25, 0x00	; 0
				
				driver_ready_check = hih8120Meassure();
    3660:	2c d9       	rcall	.-3496   	; 0x28ba <vTaskDelay>
    3662:	e8 d1       	rcall	.+976    	; 0x3a34 <hih8120Meassure>
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	90 93 92 1a 	sts	0x1A92, r25	; 0x801a92 <driver_ready_check+0x1>
    366a:	80 93 91 1a 	sts	0x1A91, r24	; 0x801a91 <driver_ready_check>
				
				while (driver_ready_check != HIH8120_OK)
    366e:	00 97       	sbiw	r24, 0x00	; 0
    3670:	01 f1       	breq	.+64     	; 0x36b2 <hum_temp_task+0x116>
				{
					printf("%s%i%s\n", "Something went wrong with HIH8120 measure call! Return value was: ", driver_ready_check," . Retrying...");
    3672:	bf 92       	push	r11
    3674:	af 92       	push	r10
    3676:	9f 93       	push	r25
    3678:	8f 93       	push	r24
    367a:	7f 92       	push	r7
    367c:	6f 92       	push	r6
    367e:	df 93       	push	r29
    3680:	cf 93       	push	r28
    3682:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <printf>
					vTaskDelay(50);
    3686:	62 e3       	ldi	r22, 0x32	; 50
    3688:	70 e0       	ldi	r23, 0x00	; 0
    368a:	80 e0       	ldi	r24, 0x00	; 0
    368c:	90 e0       	ldi	r25, 0x00	; 0
					driver_ready_check = hih8120Meassure();
    368e:	15 d9       	rcall	.-3542   	; 0x28ba <vTaskDelay>
    3690:	d1 d1       	rcall	.+930    	; 0x3a34 <hih8120Meassure>
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	90 93 92 1a 	sts	0x1A92, r25	; 0x801a92 <driver_ready_check+0x1>
    3698:	80 93 91 1a 	sts	0x1A91, r24	; 0x801a91 <driver_ready_check>

				vTaskDelay(60); // necessary wait delay after calling wakeup
				
				driver_ready_check = hih8120Meassure();
				
				while (driver_ready_check != HIH8120_OK)
    369c:	2d b7       	in	r18, 0x3d	; 61
    369e:	3e b7       	in	r19, 0x3e	; 62
    36a0:	28 5f       	subi	r18, 0xF8	; 248
    36a2:	3f 4f       	sbci	r19, 0xFF	; 255
    36a4:	0f b6       	in	r0, 0x3f	; 63
    36a6:	f8 94       	cli
    36a8:	3e bf       	out	0x3e, r19	; 62
    36aa:	0f be       	out	0x3f, r0	; 63
    36ac:	2d bf       	out	0x3d, r18	; 61
					printf("%s%i%s\n", "Something went wrong with HIH8120 measure call! Return value was: ", driver_ready_check," . Retrying...");
					vTaskDelay(50);
					driver_ready_check = hih8120Meassure();
				}
				
				vTaskDelay(20); // giving it some time to get the values
    36ae:	00 97       	sbiw	r24, 0x00	; 0
    36b0:	01 f7       	brne	.-64     	; 0x3672 <hum_temp_task+0xd6>
    36b2:	64 e1       	ldi	r22, 0x14	; 20
    36b4:	70 e0       	ldi	r23, 0x00	; 0
    36b6:	80 e0       	ldi	r24, 0x00	; 0
			
				setHumidity(hih8120GetHumidity());
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	ff d8       	rcall	.-3586   	; 0x28ba <vTaskDelay>
    36bc:	cc d1       	rcall	.+920    	; 0x3a56 <hih8120GetHumidity>
				setTemperature(hih8120GetTemperature());
    36be:	0e 94 bd 04 	call	0x97a	; 0x97a <setHumidity>
    36c2:	de d1       	rcall	.+956    	; 0x3a80 <hih8120GetTemperature>
    36c4:	0e 94 03 05 	call	0xa06	; 0xa06 <setTemperature>
				
				
				printf("%s%i%s\n", "Arduino humidity level: ", (int)getHumidity(), "%");
    36c8:	0e 94 a6 04 	call	0x94c	; 0x94c <getHumidity>
    36cc:	5f 92       	push	r5
    36ce:	4f 92       	push	r4
    36d0:	cb d0       	rcall	.+406    	; 0x3868 <__fixsfsi>
    36d2:	7f 93       	push	r23
    36d4:	6f 93       	push	r22
    36d6:	3f 92       	push	r3
    36d8:	2f 92       	push	r2
    36da:	df 93       	push	r29
    36dc:	cf 93       	push	r28
    36de:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <printf>
				printf("%s%i%s\n","Arduino temperature: ", (int)getTemperature(), "C");
    36e2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <getTemperature>
    36e6:	24 ed       	ldi	r18, 0xD4	; 212
    36e8:	34 e0       	ldi	r19, 0x04	; 4
    36ea:	3f 93       	push	r19
    36ec:	2f 93       	push	r18
    36ee:	bc d0       	rcall	.+376    	; 0x3868 <__fixsfsi>
    36f0:	7f 93       	push	r23
    36f2:	6f 93       	push	r22
    36f4:	86 ed       	ldi	r24, 0xD6	; 214
    36f6:	94 e0       	ldi	r25, 0x04	; 4
    36f8:	9f 93       	push	r25
    36fa:	8f 93       	push	r24
    36fc:	df 93       	push	r29
    36fe:	cf 93       	push	r28
    3700:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <printf>
				xEventGroupSetBits(Data_event_group, Hum_temp_data_bit);
    3704:	48 e0       	ldi	r20, 0x08	; 8
    3706:	50 e0       	ldi	r21, 0x00	; 0
    3708:	60 e0       	ldi	r22, 0x00	; 0
    370a:	70 e0       	ldi	r23, 0x00	; 0
    370c:	80 91 7e 1a 	lds	r24, 0x1A7E	; 0x801a7e <Data_event_group>
    3710:	90 91 7f 1a 	lds	r25, 0x1A7F	; 0x801a7f <Data_event_group+0x1>
    3714:	0e 94 22 06 	call	0xc44	; 0xc44 <xEventGroupSetBits>
    3718:	8d b7       	in	r24, 0x3d	; 61
    371a:	9e b7       	in	r25, 0x3e	; 62
    371c:	40 96       	adiw	r24, 0x10	; 16
    371e:	0f b6       	in	r0, 0x3f	; 63
    3720:	f8 94       	cli
    3722:	9e bf       	out	0x3e, r25	; 62
    3724:	0f be       	out	0x3f, r0	; 63
    3726:	8d bf       	out	0x3d, r24	; 61
    3728:	59 cf       	rjmp	.-334    	; 0x35dc <hum_temp_task+0x40>

0000372a <HumidityTemperatureSensor_create>:

	
void hum_temp_task(void *pvParameters);

void HumidityTemperatureSensor_create()
{
    372a:	ef 92       	push	r14
    372c:	ff 92       	push	r15
    372e:	0f 93       	push	r16
	hih8120Create(); 
    3730:	54 d1       	rcall	.+680    	; 0x39da <hih8120Create>
	
	xTaskCreate(
    3732:	e1 2c       	mov	r14, r1
    3734:	f1 2c       	mov	r15, r1
    3736:	02 e0       	ldi	r16, 0x02	; 2
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	48 e8       	ldi	r20, 0x88	; 136
    373e:	51 e0       	ldi	r21, 0x01	; 1
    3740:	6c ee       	ldi	r22, 0xEC	; 236
    3742:	74 e0       	ldi	r23, 0x04	; 4
    3744:	8e ec       	ldi	r24, 0xCE	; 206
    3746:	9a e1       	ldi	r25, 0x1A	; 26
    3748:	0e 94 3f 11 	call	0x227e	; 0x227e <xTaskCreate>
		configMINIMAL_STACK_SIZE+200,  // This stack size can be checked & adjusted by reading the Stack Highwater
		NULL,
		2,  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
		NULL
	 );
}
    374c:	0f 91       	pop	r16
    374e:	ff 90       	pop	r15
    3750:	ef 90       	pop	r14
    3752:	08 95       	ret

00003754 <create_tasks_and_semaphores>:



/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{	
    3754:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	
	if ( Mutex_CO2 == NULL )  // Check to confirm that the Semaphore has not already been created.
    3756:	80 91 85 1a 	lds	r24, 0x1A85	; 0x801a85 <Mutex_CO2>
    375a:	90 91 86 1a 	lds	r25, 0x1A86	; 0x801a86 <Mutex_CO2+0x1>
    375e:	89 2b       	or	r24, r25
    3760:	89 f4       	brne	.+34     	; 0x3784 <create_tasks_and_semaphores+0x30>
	{
		Mutex_CO2 = xSemaphoreCreateMutex();  // Create a MUTEX semaphore.
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <xQueueCreateMutex>
    3768:	90 93 86 1a 	sts	0x1A86, r25	; 0x801a86 <Mutex_CO2+0x1>
    376c:	80 93 85 1a 	sts	0x1A85, r24	; 0x801a85 <Mutex_CO2>
		if ( ( Mutex_CO2 ) != NULL )
    3770:	00 97       	sbiw	r24, 0x00	; 0
    3772:	41 f0       	breq	.+16     	; 0x3784 <create_tasks_and_semaphores+0x30>
		{
			xSemaphoreGive( ( Mutex_CO2 ) );  // Make the MUTEX available for use, by initially "Giving" the Semaphore.
    3774:	00 e0       	ldi	r16, 0x00	; 0
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	a9 01       	movw	r20, r18
    377c:	60 e0       	ldi	r22, 0x00	; 0
    377e:	70 e0       	ldi	r23, 0x00	; 0
    3780:	0e 94 44 0b 	call	0x1688	; 0x1688 <xQueueGenericSend>
		}
	}
	
	if ( Mutex_humidity == NULL )  // Check to confirm that the Semaphore has not already been created.
    3784:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <Mutex_humidity>
    3788:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <Mutex_humidity+0x1>
    378c:	89 2b       	or	r24, r25
    378e:	89 f4       	brne	.+34     	; 0x37b2 <create_tasks_and_semaphores+0x5e>
	{
		Mutex_humidity = xSemaphoreCreateMutex();  // Create a MUTEX semaphore.
    3790:	81 e0       	ldi	r24, 0x01	; 1
    3792:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <xQueueCreateMutex>
    3796:	90 93 7d 1a 	sts	0x1A7D, r25	; 0x801a7d <Mutex_humidity+0x1>
    379a:	80 93 7c 1a 	sts	0x1A7C, r24	; 0x801a7c <Mutex_humidity>
		if ( ( Mutex_humidity ) != NULL )
    379e:	00 97       	sbiw	r24, 0x00	; 0
    37a0:	41 f0       	breq	.+16     	; 0x37b2 <create_tasks_and_semaphores+0x5e>
		{
			xSemaphoreGive( ( Mutex_humidity ) );  // Make the MUTEX available for use, by initially "Giving" the Semaphore.
    37a2:	00 e0       	ldi	r16, 0x00	; 0
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	a9 01       	movw	r20, r18
    37aa:	60 e0       	ldi	r22, 0x00	; 0
    37ac:	70 e0       	ldi	r23, 0x00	; 0
    37ae:	0e 94 44 0b 	call	0x1688	; 0x1688 <xQueueGenericSend>
		}
	}
	
	if ( Mutex_temperature == NULL )  // Check to confirm that the Semaphore has not already been created.
    37b2:	80 91 83 1a 	lds	r24, 0x1A83	; 0x801a83 <Mutex_temperature>
    37b6:	90 91 84 1a 	lds	r25, 0x1A84	; 0x801a84 <Mutex_temperature+0x1>
    37ba:	89 2b       	or	r24, r25
    37bc:	89 f4       	brne	.+34     	; 0x37e0 <create_tasks_and_semaphores+0x8c>
	{
		Mutex_temperature = xSemaphoreCreateMutex();  // Create a MUTEX semaphore.
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <xQueueCreateMutex>
    37c4:	90 93 84 1a 	sts	0x1A84, r25	; 0x801a84 <Mutex_temperature+0x1>
    37c8:	80 93 83 1a 	sts	0x1A83, r24	; 0x801a83 <Mutex_temperature>
		if ( ( Mutex_temperature ) != NULL )
    37cc:	00 97       	sbiw	r24, 0x00	; 0
    37ce:	41 f0       	breq	.+16     	; 0x37e0 <create_tasks_and_semaphores+0x8c>
		{
			xSemaphoreGive( ( Mutex_temperature ) );  // Make the MUTEX available for use, by initially "Giving" the Semaphore.
    37d0:	00 e0       	ldi	r16, 0x00	; 0
    37d2:	20 e0       	ldi	r18, 0x00	; 0
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	a9 01       	movw	r20, r18
    37d8:	60 e0       	ldi	r22, 0x00	; 0
    37da:	70 e0       	ldi	r23, 0x00	; 0
    37dc:	0e 94 44 0b 	call	0x1688	; 0x1688 <xQueueGenericSend>
		}
	}
	
	init_resources();
    37e0:	0e 94 31 05 	call	0xa62	; 0xa62 <init_resources>
	
		HumidityTemperatureSensor_create();
    37e4:	a2 df       	rcall	.-188    	; 0x372a <HumidityTemperatureSensor_create>
		CO2Sensor_create();
    37e6:	0e 94 df 02 	call	0x5be	; 0x5be <CO2Sensor_create>
		
}
    37ea:	0f 91       	pop	r16
    37ec:	08 95       	ret

000037ee <create_Event_Groups>:

void create_Event_Groups()
{
	
	Measure_event_group = xEventGroupCreate();
    37ee:	0e 94 4f 05 	call	0xa9e	; 0xa9e <xEventGroupCreate>
    37f2:	90 93 81 1a 	sts	0x1A81, r25	; 0x801a81 <Measure_event_group+0x1>
    37f6:	80 93 80 1a 	sts	0x1A80, r24	; 0x801a80 <Measure_event_group>
	if(Measure_event_group == NULL)
    37fa:	89 2b       	or	r24, r25
    37fc:	21 f4       	brne	.+8      	; 0x3806 <create_Event_Groups+0x18>
	{
			printf("%s\n","#ERROR - Measure_event_group was NOT created because there was insufficient FreeRTOS heap available");
    37fe:	88 ef       	ldi	r24, 0xF8	; 248
    3800:	94 e0       	ldi	r25, 0x04	; 4
    3802:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <puts>
		}
	Data_event_group = xEventGroupCreate();
    3806:	0e 94 4f 05 	call	0xa9e	; 0xa9e <xEventGroupCreate>
    380a:	90 93 7f 1a 	sts	0x1A7F, r25	; 0x801a7f <Data_event_group+0x1>
    380e:	80 93 7e 1a 	sts	0x1A7E, r24	; 0x801a7e <Data_event_group>
	if(Data_event_group == NULL) 
    3812:	89 2b       	or	r24, r25
    3814:	21 f4       	brne	.+8      	; 0x381e <create_Event_Groups+0x30>
			printf("%s\n","#ERROR - Measure_event_group was NOT created because there was insufficient FreeRTOS heap available");
    3816:	88 ef       	ldi	r24, 0xF8	; 248
    3818:	94 e0       	ldi	r25, 0x04	; 4
    381a:	0c 94 14 2d 	jmp	0x5a28	; 0x5a28 <puts>
    381e:	08 95       	ret

00003820 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for LEDS used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3820:	81 b1       	in	r24, 0x01	; 1
    3822:	81 68       	ori	r24, 0x81	; 129
    3824:	81 b9       	out	0x01, r24	; 1
	
	// Initialize the trace-driver to be used together with the R2R-Network
	trace_init();
    3826:	0e 94 39 05 	call	0xa72	; 0xa72 <trace_init>
	
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    382a:	80 e0       	ldi	r24, 0x00	; 0
    382c:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <stdioCreate>
	
	// Let's create some tasks
	create_Event_Groups();
    3830:	de df       	rcall	.-68     	; 0x37ee <create_Event_Groups>
	create_tasks_and_semaphores();
    3832:	90 df       	rcall	.-224    	; 0x3754 <create_tasks_and_semaphores>
	

	// Initialize the HAL layer and use 5 for LED driver priority
	hal_create(5);
    3834:	85 e0       	ldi	r24, 0x05	; 5
    3836:	72 d0       	rcall	.+228    	; 0x391c <hal_create>
    3838:	60 e0       	ldi	r22, 0x00	; 0
	
	// Initialize the LoRaWAN driver without down-link buffer
	lora_driver_create(LORA_USART, NULL);
    383a:	70 e0       	ldi	r23, 0x00	; 0
    383c:	81 e0       	ldi	r24, 0x01	; 1
    383e:	a1 d3       	rcall	.+1858   	; 0x3f82 <lora_driver_create>
    3840:	83 e0       	ldi	r24, 0x03	; 3
	
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_create(3);
    3842:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <lora_handler_create>
    3846:	08 95       	ret

00003848 <main>:
    3848:	eb df       	rcall	.-42     	; 0x3820 <initialiseSystem>
/*-----------------------------------------------------------*/
int main(void)
{	
	
	initialiseSystem(); 
	printf("START\n");
    384a:	8c e5       	ldi	r24, 0x5C	; 92
    384c:	95 e0       	ldi	r25, 0x05	; 5
    384e:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3852:	0e 94 5e 12 	call	0x24bc	; 0x24bc <vTaskStartScheduler>
	while (1)
	{
		printf("This bit of code shouldn't run!!");
    3856:	c2 e6       	ldi	r28, 0x62	; 98
    3858:	d5 e0       	ldi	r29, 0x05	; 5
    385a:	df 93       	push	r29
    385c:	cf 93       	push	r28
    385e:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <printf>
    3862:	0f 90       	pop	r0
    3864:	0f 90       	pop	r0
    3866:	f9 cf       	rjmp	.-14     	; 0x385a <main+0x12>

00003868 <__fixsfsi>:
    3868:	04 d0       	rcall	.+8      	; 0x3872 <__fixunssfsi>
    386a:	68 94       	set
    386c:	b1 11       	cpse	r27, r1
    386e:	50 c0       	rjmp	.+160    	; 0x3910 <__fp_szero>
    3870:	08 95       	ret

00003872 <__fixunssfsi>:
    3872:	33 d0       	rcall	.+102    	; 0x38da <__fp_splitA>
    3874:	88 f0       	brcs	.+34     	; 0x3898 <__fixunssfsi+0x26>
    3876:	9f 57       	subi	r25, 0x7F	; 127
    3878:	90 f0       	brcs	.+36     	; 0x389e <__fixunssfsi+0x2c>
    387a:	b9 2f       	mov	r27, r25
    387c:	99 27       	eor	r25, r25
    387e:	b7 51       	subi	r27, 0x17	; 23
    3880:	a0 f0       	brcs	.+40     	; 0x38aa <__fixunssfsi+0x38>
    3882:	d1 f0       	breq	.+52     	; 0x38b8 <__fixunssfsi+0x46>
    3884:	66 0f       	add	r22, r22
    3886:	77 1f       	adc	r23, r23
    3888:	88 1f       	adc	r24, r24
    388a:	99 1f       	adc	r25, r25
    388c:	1a f0       	brmi	.+6      	; 0x3894 <__fixunssfsi+0x22>
    388e:	ba 95       	dec	r27
    3890:	c9 f7       	brne	.-14     	; 0x3884 <__fixunssfsi+0x12>
    3892:	12 c0       	rjmp	.+36     	; 0x38b8 <__fixunssfsi+0x46>
    3894:	b1 30       	cpi	r27, 0x01	; 1
    3896:	81 f0       	breq	.+32     	; 0x38b8 <__fixunssfsi+0x46>
    3898:	3a d0       	rcall	.+116    	; 0x390e <__fp_zero>
    389a:	b1 e0       	ldi	r27, 0x01	; 1
    389c:	08 95       	ret
    389e:	37 c0       	rjmp	.+110    	; 0x390e <__fp_zero>
    38a0:	67 2f       	mov	r22, r23
    38a2:	78 2f       	mov	r23, r24
    38a4:	88 27       	eor	r24, r24
    38a6:	b8 5f       	subi	r27, 0xF8	; 248
    38a8:	39 f0       	breq	.+14     	; 0x38b8 <__fixunssfsi+0x46>
    38aa:	b9 3f       	cpi	r27, 0xF9	; 249
    38ac:	cc f3       	brlt	.-14     	; 0x38a0 <__fixunssfsi+0x2e>
    38ae:	86 95       	lsr	r24
    38b0:	77 95       	ror	r23
    38b2:	67 95       	ror	r22
    38b4:	b3 95       	inc	r27
    38b6:	d9 f7       	brne	.-10     	; 0x38ae <__fixunssfsi+0x3c>
    38b8:	3e f4       	brtc	.+14     	; 0x38c8 <__fixunssfsi+0x56>
    38ba:	90 95       	com	r25
    38bc:	80 95       	com	r24
    38be:	70 95       	com	r23
    38c0:	61 95       	neg	r22
    38c2:	7f 4f       	sbci	r23, 0xFF	; 255
    38c4:	8f 4f       	sbci	r24, 0xFF	; 255
    38c6:	9f 4f       	sbci	r25, 0xFF	; 255
    38c8:	08 95       	ret

000038ca <__fp_split3>:
    38ca:	57 fd       	sbrc	r21, 7
    38cc:	90 58       	subi	r25, 0x80	; 128
    38ce:	44 0f       	add	r20, r20
    38d0:	55 1f       	adc	r21, r21
    38d2:	59 f0       	breq	.+22     	; 0x38ea <__fp_splitA+0x10>
    38d4:	5f 3f       	cpi	r21, 0xFF	; 255
    38d6:	71 f0       	breq	.+28     	; 0x38f4 <__fp_splitA+0x1a>
    38d8:	47 95       	ror	r20

000038da <__fp_splitA>:
    38da:	88 0f       	add	r24, r24
    38dc:	97 fb       	bst	r25, 7
    38de:	99 1f       	adc	r25, r25
    38e0:	61 f0       	breq	.+24     	; 0x38fa <__fp_splitA+0x20>
    38e2:	9f 3f       	cpi	r25, 0xFF	; 255
    38e4:	79 f0       	breq	.+30     	; 0x3904 <__fp_splitA+0x2a>
    38e6:	87 95       	ror	r24
    38e8:	08 95       	ret
    38ea:	12 16       	cp	r1, r18
    38ec:	13 06       	cpc	r1, r19
    38ee:	14 06       	cpc	r1, r20
    38f0:	55 1f       	adc	r21, r21
    38f2:	f2 cf       	rjmp	.-28     	; 0x38d8 <__fp_split3+0xe>
    38f4:	46 95       	lsr	r20
    38f6:	f1 df       	rcall	.-30     	; 0x38da <__fp_splitA>
    38f8:	08 c0       	rjmp	.+16     	; 0x390a <__fp_splitA+0x30>
    38fa:	16 16       	cp	r1, r22
    38fc:	17 06       	cpc	r1, r23
    38fe:	18 06       	cpc	r1, r24
    3900:	99 1f       	adc	r25, r25
    3902:	f1 cf       	rjmp	.-30     	; 0x38e6 <__fp_splitA+0xc>
    3904:	86 95       	lsr	r24
    3906:	71 05       	cpc	r23, r1
    3908:	61 05       	cpc	r22, r1
    390a:	08 94       	sec
    390c:	08 95       	ret

0000390e <__fp_zero>:
    390e:	e8 94       	clt

00003910 <__fp_szero>:
    3910:	bb 27       	eor	r27, r27
    3912:	66 27       	eor	r22, r22
    3914:	77 27       	eor	r23, r23
    3916:	cb 01       	movw	r24, r22
    3918:	97 f9       	bld	r25, 7
    391a:	08 95       	ret

0000391c <hal_create>:
    391c:	e3 e9       	ldi	r30, 0x93	; 147
    391e:	fa e1       	ldi	r31, 0x1A	; 26
    3920:	26 e1       	ldi	r18, 0x16	; 22
    3922:	33 e2       	ldi	r19, 0x23	; 35
    3924:	31 83       	std	Z+1, r19	; 0x01
    3926:	20 83       	st	Z, r18
    3928:	29 e1       	ldi	r18, 0x19	; 25
    392a:	33 e2       	ldi	r19, 0x23	; 35
    392c:	33 83       	std	Z+3, r19	; 0x03
    392e:	22 83       	std	Z+2, r18	; 0x02
    3930:	24 e2       	ldi	r18, 0x24	; 36
    3932:	33 e2       	ldi	r19, 0x23	; 35
    3934:	35 83       	std	Z+5, r19	; 0x05
    3936:	24 83       	std	Z+4, r18	; 0x04
    3938:	28 e2       	ldi	r18, 0x28	; 40
    393a:	33 e2       	ldi	r19, 0x23	; 35
    393c:	37 83       	std	Z+7, r19	; 0x07
    393e:	26 83       	std	Z+6, r18	; 0x06
    3940:	2e e2       	ldi	r18, 0x2E	; 46
    3942:	33 e2       	ldi	r19, 0x23	; 35
    3944:	31 87       	std	Z+9, r19	; 0x09
    3946:	20 87       	std	Z+8, r18	; 0x08
    3948:	2a e3       	ldi	r18, 0x3A	; 58
    394a:	33 e2       	ldi	r19, 0x23	; 35
    394c:	33 87       	std	Z+11, r19	; 0x0b
    394e:	22 87       	std	Z+10, r18	; 0x0a
    3950:	2f e3       	ldi	r18, 0x3F	; 63
    3952:	33 e2       	ldi	r19, 0x23	; 35
    3954:	35 87       	std	Z+13, r19	; 0x0d
    3956:	24 87       	std	Z+12, r18	; 0x0c
    3958:	2b e4       	ldi	r18, 0x4B	; 75
    395a:	33 e2       	ldi	r19, 0x23	; 35
    395c:	37 87       	std	Z+15, r19	; 0x0f
    395e:	26 87       	std	Z+14, r18	; 0x0e
    3960:	2b e2       	ldi	r18, 0x2B	; 43
    3962:	33 e2       	ldi	r19, 0x23	; 35
    3964:	31 8b       	std	Z+17, r19	; 0x11
    3966:	20 8b       	std	Z+16, r18	; 0x10
    3968:	20 e5       	ldi	r18, 0x50	; 80
    396a:	33 e2       	ldi	r19, 0x23	; 35
    396c:	33 8b       	std	Z+19, r19	; 0x13
    396e:	22 8b       	std	Z+18, r18	; 0x12
    3970:	2d e5       	ldi	r18, 0x5D	; 93
    3972:	33 e2       	ldi	r19, 0x23	; 35
    3974:	35 8b       	std	Z+21, r19	; 0x15
    3976:	24 8b       	std	Z+20, r18	; 0x14
    3978:	68 2f       	mov	r22, r24
    397a:	cf 01       	movw	r24, r30
    397c:	3a c1       	rjmp	.+628    	; 0x3bf2 <led_create>
    397e:	08 95       	ret

00003980 <_hihTwiCallback>:
    3980:	65 30       	cpi	r22, 0x05	; 5
    3982:	f1 f4       	brne	.+60     	; 0x39c0 <_hihTwiCallback+0x40>
    3984:	fa 01       	movw	r30, r20
    3986:	80 81       	ld	r24, Z
    3988:	8f 73       	andi	r24, 0x3F	; 63
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	98 2f       	mov	r25, r24
    398e:	88 27       	eor	r24, r24
    3990:	21 81       	ldd	r18, Z+1	; 0x01
    3992:	82 2b       	or	r24, r18
    3994:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3998:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    399c:	82 81       	ldd	r24, Z+2	; 0x02
    399e:	f0 e4       	ldi	r31, 0x40	; 64
    39a0:	8f 9f       	mul	r24, r31
    39a2:	c0 01       	movw	r24, r0
    39a4:	11 24       	eor	r1, r1
    39a6:	fa 01       	movw	r30, r20
    39a8:	23 81       	ldd	r18, Z+3	; 0x03
    39aa:	26 95       	lsr	r18
    39ac:	26 95       	lsr	r18
    39ae:	82 2b       	or	r24, r18
    39b0:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    39b4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    39b8:	81 e0       	ldi	r24, 0x01	; 1
    39ba:	80 93 20 19 	sts	0x1920, r24	; 0x801920 <_measuringIsReady>
    39be:	08 95       	ret
    39c0:	64 30       	cpi	r22, 0x04	; 4
    39c2:	51 f0       	breq	.+20     	; 0x39d8 <_hihTwiCallback+0x58>
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	90 e4       	ldi	r25, 0x40	; 64
    39c8:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    39cc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    39d0:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    39d4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    39d8:	08 95       	ret

000039da <hih8120Create>:
    39da:	0f 93       	push	r16
    39dc:	1f 93       	push	r17
    39de:	00 ec       	ldi	r16, 0xC0	; 192
    39e0:	1c e1       	ldi	r17, 0x1C	; 28
    39e2:	20 e0       	ldi	r18, 0x00	; 0
    39e4:	34 e2       	ldi	r19, 0x24	; 36
    39e6:	44 ef       	ldi	r20, 0xF4	; 244
    39e8:	50 e0       	ldi	r21, 0x00	; 0
    39ea:	60 e0       	ldi	r22, 0x00	; 0
    39ec:	87 e2       	ldi	r24, 0x27	; 39
    39ee:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <twiCreate>
    39f2:	90 93 22 19 	sts	0x1922, r25	; 0x801922 <_hih8120Handler+0x1>
    39f6:	80 93 21 19 	sts	0x1921, r24	; 0x801921 <_hih8120Handler>
    39fa:	21 e0       	ldi	r18, 0x01	; 1
    39fc:	89 2b       	or	r24, r25
    39fe:	09 f0       	breq	.+2      	; 0x3a02 <hih8120Create+0x28>
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	82 2f       	mov	r24, r18
    3a04:	1f 91       	pop	r17
    3a06:	0f 91       	pop	r16
    3a08:	08 95       	ret

00003a0a <hih8120Wakeup>:
    3a0a:	80 91 21 19 	lds	r24, 0x1921	; 0x801921 <_hih8120Handler>
    3a0e:	90 91 22 19 	lds	r25, 0x1922	; 0x801922 <_hih8120Handler+0x1>
    3a12:	00 97       	sbiw	r24, 0x00	; 0
    3a14:	59 f0       	breq	.+22     	; 0x3a2c <hih8120Wakeup+0x22>
    3a16:	40 e0       	ldi	r20, 0x00	; 0
    3a18:	60 e0       	ldi	r22, 0x00	; 0
    3a1a:	70 e0       	ldi	r23, 0x00	; 0
    3a1c:	0e 94 44 28 	call	0x5088	; 0x5088 <twiTransmit>
    3a20:	84 30       	cpi	r24, 0x04	; 4
    3a22:	31 f4       	brne	.+12     	; 0x3a30 <hih8120Wakeup+0x26>
    3a24:	10 92 20 19 	sts	0x1920, r1	; 0x801920 <_measuringIsReady>
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	08 95       	ret
    3a2c:	82 e0       	ldi	r24, 0x02	; 2
    3a2e:	08 95       	ret
    3a30:	83 e0       	ldi	r24, 0x03	; 3
    3a32:	08 95       	ret

00003a34 <hih8120Meassure>:
    3a34:	80 91 21 19 	lds	r24, 0x1921	; 0x801921 <_hih8120Handler>
    3a38:	90 91 22 19 	lds	r25, 0x1922	; 0x801922 <_hih8120Handler+0x1>
    3a3c:	00 97       	sbiw	r24, 0x00	; 0
    3a3e:	39 f0       	breq	.+14     	; 0x3a4e <hih8120Meassure+0x1a>
    3a40:	64 e0       	ldi	r22, 0x04	; 4
    3a42:	0e 94 90 28 	call	0x5120	; 0x5120 <twiReceive>
    3a46:	85 30       	cpi	r24, 0x05	; 5
    3a48:	21 f0       	breq	.+8      	; 0x3a52 <hih8120Meassure+0x1e>
    3a4a:	83 e0       	ldi	r24, 0x03	; 3
    3a4c:	08 95       	ret
    3a4e:	82 e0       	ldi	r24, 0x02	; 2
    3a50:	08 95       	ret
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	08 95       	ret

00003a56 <hih8120GetHumidity>:
    3a56:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    3a5a:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    3a5e:	80 e0       	ldi	r24, 0x00	; 0
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <__floatunsisf>
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	48 ec       	ldi	r20, 0xC8	; 200
    3a6c:	52 e4       	ldi	r21, 0x42	; 66
    3a6e:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__mulsf3>
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	38 ef       	ldi	r19, 0xF8	; 248
    3a76:	4f e7       	ldi	r20, 0x7F	; 127
    3a78:	56 e4       	ldi	r21, 0x46	; 70
    3a7a:	0c 94 03 2a 	jmp	0x5406	; 0x5406 <__divsf3>
    3a7e:	08 95       	ret

00003a80 <hih8120GetTemperature>:
    3a80:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    3a84:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    3a88:	80 e0       	ldi	r24, 0x00	; 0
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <__floatunsisf>
    3a90:	20 e0       	ldi	r18, 0x00	; 0
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	45 e2       	ldi	r20, 0x25	; 37
    3a96:	53 e4       	ldi	r21, 0x43	; 67
    3a98:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__mulsf3>
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	38 ef       	ldi	r19, 0xF8	; 248
    3aa0:	4f e7       	ldi	r20, 0x7F	; 127
    3aa2:	56 e4       	ldi	r21, 0x46	; 70
    3aa4:	0e 94 03 2a 	call	0x5406	; 0x5406 <__divsf3>
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	40 e2       	ldi	r20, 0x20	; 32
    3aae:	52 e4       	ldi	r21, 0x42	; 66
    3ab0:	0c 94 9c 29 	jmp	0x5338	; 0x5338 <__subsf3>
    3ab4:	08 95       	ret

00003ab6 <_turn_off>:
    3ab6:	cf 93       	push	r28
    3ab8:	df 93       	push	r29
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	fc 01       	movw	r30, r24
    3abe:	ee 0f       	add	r30, r30
    3ac0:	ff 1f       	adc	r31, r31
    3ac2:	e8 0f       	add	r30, r24
    3ac4:	f9 1f       	adc	r31, r25
    3ac6:	ee 0f       	add	r30, r30
    3ac8:	ff 1f       	adc	r31, r31
    3aca:	ed 5d       	subi	r30, 0xDD	; 221
    3acc:	f6 4e       	sbci	r31, 0xE6	; 230
    3ace:	23 81       	ldd	r18, Z+3	; 0x03
    3ad0:	21 11       	cpse	r18, r1
    3ad2:	0a c0       	rjmp	.+20     	; 0x3ae8 <_turn_off+0x32>
    3ad4:	ef 01       	movw	r28, r30
    3ad6:	e0 91 9b 1a 	lds	r30, 0x1A9B	; 0x801a9b <register_access+0x8>
    3ada:	f0 91 9c 1a 	lds	r31, 0x1A9C	; 0x801a9c <register_access+0x9>
    3ade:	6a 81       	ldd	r22, Y+2	; 0x02
    3ae0:	88 81       	ld	r24, Y
    3ae2:	99 81       	ldd	r25, Y+1	; 0x01
    3ae4:	19 95       	eicall
    3ae6:	12 c0       	rjmp	.+36     	; 0x3b0c <_turn_off+0x56>
    3ae8:	dc 01       	movw	r26, r24
    3aea:	aa 0f       	add	r26, r26
    3aec:	bb 1f       	adc	r27, r27
    3aee:	ed 01       	movw	r28, r26
    3af0:	c8 0f       	add	r28, r24
    3af2:	d9 1f       	adc	r29, r25
    3af4:	cc 0f       	add	r28, r28
    3af6:	dd 1f       	adc	r29, r29
    3af8:	cd 5d       	subi	r28, 0xDD	; 221
    3afa:	d6 4e       	sbci	r29, 0xE6	; 230
    3afc:	e0 91 a5 1a 	lds	r30, 0x1AA5	; 0x801aa5 <register_access+0x12>
    3b00:	f0 91 a6 1a 	lds	r31, 0x1AA6	; 0x801aa6 <register_access+0x13>
    3b04:	6a 81       	ldd	r22, Y+2	; 0x02
    3b06:	88 81       	ld	r24, Y
    3b08:	99 81       	ldd	r25, Y+1	; 0x01
    3b0a:	19 95       	eicall
    3b0c:	df 91       	pop	r29
    3b0e:	cf 91       	pop	r28
    3b10:	08 95       	ret

00003b12 <_turn_on>:
    3b12:	cf 93       	push	r28
    3b14:	df 93       	push	r29
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	fc 01       	movw	r30, r24
    3b1a:	ee 0f       	add	r30, r30
    3b1c:	ff 1f       	adc	r31, r31
    3b1e:	e8 0f       	add	r30, r24
    3b20:	f9 1f       	adc	r31, r25
    3b22:	ee 0f       	add	r30, r30
    3b24:	ff 1f       	adc	r31, r31
    3b26:	ed 5d       	subi	r30, 0xDD	; 221
    3b28:	f6 4e       	sbci	r31, 0xE6	; 230
    3b2a:	23 81       	ldd	r18, Z+3	; 0x03
    3b2c:	21 11       	cpse	r18, r1
    3b2e:	0a c0       	rjmp	.+20     	; 0x3b44 <_turn_on+0x32>
    3b30:	ef 01       	movw	r28, r30
    3b32:	e0 91 a5 1a 	lds	r30, 0x1AA5	; 0x801aa5 <register_access+0x12>
    3b36:	f0 91 a6 1a 	lds	r31, 0x1AA6	; 0x801aa6 <register_access+0x13>
    3b3a:	6a 81       	ldd	r22, Y+2	; 0x02
    3b3c:	88 81       	ld	r24, Y
    3b3e:	99 81       	ldd	r25, Y+1	; 0x01
    3b40:	19 95       	eicall
    3b42:	12 c0       	rjmp	.+36     	; 0x3b68 <_turn_on+0x56>
    3b44:	dc 01       	movw	r26, r24
    3b46:	aa 0f       	add	r26, r26
    3b48:	bb 1f       	adc	r27, r27
    3b4a:	ed 01       	movw	r28, r26
    3b4c:	c8 0f       	add	r28, r24
    3b4e:	d9 1f       	adc	r29, r25
    3b50:	cc 0f       	add	r28, r28
    3b52:	dd 1f       	adc	r29, r29
    3b54:	cd 5d       	subi	r28, 0xDD	; 221
    3b56:	d6 4e       	sbci	r29, 0xE6	; 230
    3b58:	e0 91 9b 1a 	lds	r30, 0x1A9B	; 0x801a9b <register_access+0x8>
    3b5c:	f0 91 9c 1a 	lds	r31, 0x1A9C	; 0x801a9c <register_access+0x9>
    3b60:	6a 81       	ldd	r22, Y+2	; 0x02
    3b62:	88 81       	ld	r24, Y
    3b64:	99 81       	ldd	r25, Y+1	; 0x01
    3b66:	19 95       	eicall
    3b68:	df 91       	pop	r29
    3b6a:	cf 91       	pop	r28
    3b6c:	08 95       	ret

00003b6e <_hal_led_task>:
    3b6e:	0f 2e       	mov	r0, r31
    3b70:	f3 e9       	ldi	r31, 0x93	; 147
    3b72:	cf 2e       	mov	r12, r31
    3b74:	fa e1       	ldi	r31, 0x1A	; 26
    3b76:	df 2e       	mov	r13, r31
    3b78:	f0 2d       	mov	r31, r0
    3b7a:	04 e0       	ldi	r16, 0x04	; 4
    3b7c:	c3 e2       	ldi	r28, 0x23	; 35
    3b7e:	d9 e1       	ldi	r29, 0x19	; 25
    3b80:	10 e0       	ldi	r17, 0x00	; 0
    3b82:	8c 81       	ldd	r24, Y+4	; 0x04
    3b84:	81 30       	cpi	r24, 0x01	; 1
    3b86:	69 f0       	breq	.+26     	; 0x3ba2 <_hal_led_task+0x34>
    3b88:	e8 f0       	brcs	.+58     	; 0x3bc4 <_hal_led_task+0x56>
    3b8a:	82 30       	cpi	r24, 0x02	; 2
    3b8c:	39 f5       	brne	.+78     	; 0x3bdc <_hal_led_task+0x6e>
    3b8e:	d6 01       	movw	r26, r12
    3b90:	1c 96       	adiw	r26, 0x0c	; 12
    3b92:	ed 91       	ld	r30, X+
    3b94:	fc 91       	ld	r31, X
    3b96:	1d 97       	sbiw	r26, 0x0d	; 13
    3b98:	6a 81       	ldd	r22, Y+2	; 0x02
    3b9a:	88 81       	ld	r24, Y
    3b9c:	99 81       	ldd	r25, Y+1	; 0x01
    3b9e:	19 95       	eicall
    3ba0:	1d c0       	rjmp	.+58     	; 0x3bdc <_hal_led_task+0x6e>
    3ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba4:	8f 5f       	subi	r24, 0xFF	; 255
    3ba6:	8a 30       	cpi	r24, 0x0A	; 10
    3ba8:	10 f4       	brcc	.+4      	; 0x3bae <_hal_led_task+0x40>
    3baa:	8d 83       	std	Y+5, r24	; 0x05
    3bac:	17 c0       	rjmp	.+46     	; 0x3bdc <_hal_led_task+0x6e>
    3bae:	1d 82       	std	Y+5, r1	; 0x05
    3bb0:	d6 01       	movw	r26, r12
    3bb2:	1c 96       	adiw	r26, 0x0c	; 12
    3bb4:	ed 91       	ld	r30, X+
    3bb6:	fc 91       	ld	r31, X
    3bb8:	1d 97       	sbiw	r26, 0x0d	; 13
    3bba:	6a 81       	ldd	r22, Y+2	; 0x02
    3bbc:	88 81       	ld	r24, Y
    3bbe:	99 81       	ldd	r25, Y+1	; 0x01
    3bc0:	19 95       	eicall
    3bc2:	0c c0       	rjmp	.+24     	; 0x3bdc <_hal_led_task+0x6e>
    3bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc6:	88 23       	and	r24, r24
    3bc8:	31 f0       	breq	.+12     	; 0x3bd6 <_hal_led_task+0x68>
    3bca:	81 2f       	mov	r24, r17
    3bcc:	a2 df       	rcall	.-188    	; 0x3b12 <_turn_on>
    3bce:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd0:	81 50       	subi	r24, 0x01	; 1
    3bd2:	8d 83       	std	Y+5, r24	; 0x05
    3bd4:	03 c0       	rjmp	.+6      	; 0x3bdc <_hal_led_task+0x6e>
    3bd6:	0c 83       	std	Y+4, r16	; 0x04
    3bd8:	81 2f       	mov	r24, r17
    3bda:	6d df       	rcall	.-294    	; 0x3ab6 <_turn_off>
    3bdc:	1f 5f       	subi	r17, 0xFF	; 255
    3bde:	26 96       	adiw	r28, 0x06	; 6
    3be0:	14 30       	cpi	r17, 0x04	; 4
    3be2:	79 f6       	brne	.-98     	; 0x3b82 <_hal_led_task+0x14>
    3be4:	65 e0       	ldi	r22, 0x05	; 5
    3be6:	70 e0       	ldi	r23, 0x00	; 0
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	0e 94 5d 14 	call	0x28ba	; 0x28ba <vTaskDelay>
    3bf0:	c5 cf       	rjmp	.-118    	; 0x3b7c <_hal_led_task+0xe>

00003bf2 <led_create>:
    3bf2:	cf 92       	push	r12
    3bf4:	df 92       	push	r13
    3bf6:	ef 92       	push	r14
    3bf8:	ff 92       	push	r15
    3bfa:	0f 93       	push	r16
    3bfc:	1f 93       	push	r17
    3bfe:	cf 93       	push	r28
    3c00:	df 93       	push	r29
    3c02:	06 2f       	mov	r16, r22
    3c04:	0f 2e       	mov	r0, r31
    3c06:	f3 e9       	ldi	r31, 0x93	; 147
    3c08:	ef 2e       	mov	r14, r31
    3c0a:	fa e1       	ldi	r31, 0x1A	; 26
    3c0c:	ff 2e       	mov	r15, r31
    3c0e:	f0 2d       	mov	r31, r0
    3c10:	d7 01       	movw	r26, r14
    3c12:	18 96       	adiw	r26, 0x08	; 8
    3c14:	ed 91       	ld	r30, X+
    3c16:	fc 91       	ld	r31, X
    3c18:	19 97       	sbiw	r26, 0x09	; 9
    3c1a:	66 e0       	ldi	r22, 0x06	; 6
    3c1c:	87 e2       	ldi	r24, 0x27	; 39
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	19 95       	eicall
    3c22:	c3 e2       	ldi	r28, 0x23	; 35
    3c24:	d9 e1       	ldi	r29, 0x19	; 25
    3c26:	0f 2e       	mov	r0, r31
    3c28:	f8 e2       	ldi	r31, 0x28	; 40
    3c2a:	cf 2e       	mov	r12, r31
    3c2c:	d1 2c       	mov	r13, r1
    3c2e:	f0 2d       	mov	r31, r0
    3c30:	d9 82       	std	Y+1, r13	; 0x01
    3c32:	c8 82       	st	Y, r12
    3c34:	86 e0       	ldi	r24, 0x06	; 6
    3c36:	8a 83       	std	Y+2, r24	; 0x02
    3c38:	1b 82       	std	Y+3, r1	; 0x03
    3c3a:	14 e0       	ldi	r17, 0x04	; 4
    3c3c:	1c 83       	std	Y+4, r17	; 0x04
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	3a df       	rcall	.-396    	; 0x3ab6 <_turn_off>
    3c42:	d7 01       	movw	r26, r14
    3c44:	18 96       	adiw	r26, 0x08	; 8
    3c46:	ed 91       	ld	r30, X+
    3c48:	fc 91       	ld	r31, X
    3c4a:	19 97       	sbiw	r26, 0x09	; 9
    3c4c:	67 e0       	ldi	r22, 0x07	; 7
    3c4e:	87 e2       	ldi	r24, 0x27	; 39
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	19 95       	eicall
    3c54:	df 82       	std	Y+7, r13	; 0x07
    3c56:	ce 82       	std	Y+6, r12	; 0x06
    3c58:	87 e0       	ldi	r24, 0x07	; 7
    3c5a:	88 87       	std	Y+8, r24	; 0x08
    3c5c:	19 86       	std	Y+9, r1	; 0x09
    3c5e:	1a 87       	std	Y+10, r17	; 0x0a
    3c60:	81 e0       	ldi	r24, 0x01	; 1
    3c62:	29 df       	rcall	.-430    	; 0x3ab6 <_turn_off>
    3c64:	d7 01       	movw	r26, r14
    3c66:	18 96       	adiw	r26, 0x08	; 8
    3c68:	ed 91       	ld	r30, X+
    3c6a:	fc 91       	ld	r31, X
    3c6c:	19 97       	sbiw	r26, 0x09	; 9
    3c6e:	65 e0       	ldi	r22, 0x05	; 5
    3c70:	83 e3       	ldi	r24, 0x33	; 51
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	19 95       	eicall
    3c76:	d7 01       	movw	r26, r14
    3c78:	18 96       	adiw	r26, 0x08	; 8
    3c7a:	ed 91       	ld	r30, X+
    3c7c:	fc 91       	ld	r31, X
    3c7e:	19 97       	sbiw	r26, 0x09	; 9
    3c80:	61 e0       	ldi	r22, 0x01	; 1
    3c82:	84 e3       	ldi	r24, 0x34	; 52
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	19 95       	eicall
    3c88:	84 e3       	ldi	r24, 0x34	; 52
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	9d 87       	std	Y+13, r25	; 0x0d
    3c8e:	8c 87       	std	Y+12, r24	; 0x0c
    3c90:	85 e0       	ldi	r24, 0x05	; 5
    3c92:	8e 87       	std	Y+14, r24	; 0x0e
    3c94:	1f 86       	std	Y+15, r1	; 0x0f
    3c96:	18 8b       	std	Y+16, r17	; 0x10
    3c98:	82 e0       	ldi	r24, 0x02	; 2
    3c9a:	0d df       	rcall	.-486    	; 0x3ab6 <_turn_off>
    3c9c:	d7 01       	movw	r26, r14
    3c9e:	18 96       	adiw	r26, 0x08	; 8
    3ca0:	ed 91       	ld	r30, X+
    3ca2:	fc 91       	ld	r31, X
    3ca4:	19 97       	sbiw	r26, 0x09	; 9
    3ca6:	64 e0       	ldi	r22, 0x04	; 4
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	91 e0       	ldi	r25, 0x01	; 1
    3cac:	19 95       	eicall
    3cae:	d7 01       	movw	r26, r14
    3cb0:	18 96       	adiw	r26, 0x08	; 8
    3cb2:	ed 91       	ld	r30, X+
    3cb4:	fc 91       	ld	r31, X
    3cb6:	19 97       	sbiw	r26, 0x09	; 9
    3cb8:	61 e0       	ldi	r22, 0x01	; 1
    3cba:	82 e0       	ldi	r24, 0x02	; 2
    3cbc:	91 e0       	ldi	r25, 0x01	; 1
    3cbe:	19 95       	eicall
    3cc0:	82 e0       	ldi	r24, 0x02	; 2
    3cc2:	91 e0       	ldi	r25, 0x01	; 1
    3cc4:	9b 8b       	std	Y+19, r25	; 0x13
    3cc6:	8a 8b       	std	Y+18, r24	; 0x12
    3cc8:	1c 8b       	std	Y+20, r17	; 0x14
    3cca:	1d 8a       	std	Y+21, r1	; 0x15
    3ccc:	1e 8b       	std	Y+22, r17	; 0x16
    3cce:	83 e0       	ldi	r24, 0x03	; 3
    3cd0:	f2 de       	rcall	.-540    	; 0x3ab6 <_turn_off>
    3cd2:	e1 2c       	mov	r14, r1
    3cd4:	f1 2c       	mov	r15, r1
    3cd6:	20 e0       	ldi	r18, 0x00	; 0
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	40 ec       	ldi	r20, 0xC0	; 192
    3cdc:	50 e0       	ldi	r21, 0x00	; 0
    3cde:	63 e8       	ldi	r22, 0x83	; 131
    3ce0:	75 e0       	ldi	r23, 0x05	; 5
    3ce2:	87 eb       	ldi	r24, 0xB7	; 183
    3ce4:	9d e1       	ldi	r25, 0x1D	; 29
    3ce6:	0e 94 3f 11 	call	0x227e	; 0x227e <xTaskCreate>
    3cea:	df 91       	pop	r29
    3cec:	cf 91       	pop	r28
    3cee:	1f 91       	pop	r17
    3cf0:	0f 91       	pop	r16
    3cf2:	ff 90       	pop	r15
    3cf4:	ef 90       	pop	r14
    3cf6:	df 90       	pop	r13
    3cf8:	cf 90       	pop	r12
    3cfa:	08 95       	ret

00003cfc <led_long_puls>:
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	fc 01       	movw	r30, r24
    3d00:	ee 0f       	add	r30, r30
    3d02:	ff 1f       	adc	r31, r31
    3d04:	df 01       	movw	r26, r30
    3d06:	a8 0f       	add	r26, r24
    3d08:	b9 1f       	adc	r27, r25
    3d0a:	aa 0f       	add	r26, r26
    3d0c:	bb 1f       	adc	r27, r27
    3d0e:	ad 5d       	subi	r26, 0xDD	; 221
    3d10:	b6 4e       	sbci	r27, 0xE6	; 230
    3d12:	24 e0       	ldi	r18, 0x04	; 4
    3d14:	15 96       	adiw	r26, 0x05	; 5
    3d16:	2c 93       	st	X, r18
    3d18:	15 97       	sbiw	r26, 0x05	; 5
    3d1a:	fd 01       	movw	r30, r26
    3d1c:	14 82       	std	Z+4, r1	; 0x04
    3d1e:	08 95       	ret

00003d20 <led_short_puls>:
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	fc 01       	movw	r30, r24
    3d24:	ee 0f       	add	r30, r30
    3d26:	ff 1f       	adc	r31, r31
    3d28:	df 01       	movw	r26, r30
    3d2a:	a8 0f       	add	r26, r24
    3d2c:	b9 1f       	adc	r27, r25
    3d2e:	aa 0f       	add	r26, r26
    3d30:	bb 1f       	adc	r27, r27
    3d32:	ad 5d       	subi	r26, 0xDD	; 221
    3d34:	b6 4e       	sbci	r27, 0xE6	; 230
    3d36:	21 e0       	ldi	r18, 0x01	; 1
    3d38:	15 96       	adiw	r26, 0x05	; 5
    3d3a:	2c 93       	st	X, r18
    3d3c:	15 97       	sbiw	r26, 0x05	; 5
    3d3e:	fd 01       	movw	r30, r26
    3d40:	14 82       	std	Z+4, r1	; 0x04
    3d42:	08 95       	ret

00003d44 <_serial_call_back>:
    3d44:	0f 93       	push	r16
    3d46:	1f 93       	push	r17
    3d48:	cf 93       	push	r28
    3d4a:	df 93       	push	r29
    3d4c:	1f 92       	push	r1
    3d4e:	1f 92       	push	r1
    3d50:	cd b7       	in	r28, 0x3d	; 61
    3d52:	de b7       	in	r29, 0x3e	; 62
    3d54:	8c 01       	movw	r16, r24
    3d56:	19 82       	std	Y+1, r1	; 0x01
    3d58:	2d c0       	rjmp	.+90     	; 0x3db4 <_serial_call_back+0x70>
    3d5a:	e0 91 9f 19 	lds	r30, 0x199F	; 0x80199f <rec_buf_inp.2947>
    3d5e:	ec 32       	cpi	r30, 0x2C	; 44
    3d60:	50 f4       	brcc	.+20     	; 0x3d76 <_serial_call_back+0x32>
    3d62:	81 e0       	ldi	r24, 0x01	; 1
    3d64:	8e 0f       	add	r24, r30
    3d66:	80 93 9f 19 	sts	0x199F, r24	; 0x80199f <rec_buf_inp.2947>
    3d6a:	f0 e0       	ldi	r31, 0x00	; 0
    3d6c:	ef 52       	subi	r30, 0x2F	; 47
    3d6e:	f6 4e       	sbci	r31, 0xE6	; 230
    3d70:	8a 81       	ldd	r24, Y+2	; 0x02
    3d72:	80 83       	st	Z, r24
    3d74:	02 c0       	rjmp	.+4      	; 0x3d7a <_serial_call_back+0x36>
    3d76:	10 92 9f 19 	sts	0x199F, r1	; 0x80199f <rec_buf_inp.2947>
    3d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7c:	8a 30       	cpi	r24, 0x0A	; 10
    3d7e:	d1 f4       	brne	.+52     	; 0x3db4 <_serial_call_back+0x70>
    3d80:	40 91 9f 19 	lds	r20, 0x199F	; 0x80199f <rec_buf_inp.2947>
    3d84:	50 e0       	ldi	r21, 0x00	; 0
    3d86:	fa 01       	movw	r30, r20
    3d88:	e1 53       	subi	r30, 0x31	; 49
    3d8a:	f6 4e       	sbci	r31, 0xE6	; 230
    3d8c:	10 82       	st	Z, r1
    3d8e:	41 50       	subi	r20, 0x01	; 1
    3d90:	51 09       	sbc	r21, r1
    3d92:	9e 01       	movw	r18, r28
    3d94:	2f 5f       	subi	r18, 0xFF	; 255
    3d96:	3f 4f       	sbci	r19, 0xFF	; 255
    3d98:	61 ed       	ldi	r22, 0xD1	; 209
    3d9a:	79 e1       	ldi	r23, 0x19	; 25
    3d9c:	80 91 a2 19 	lds	r24, 0x19A2	; 0x8019a2 <_serial_reply_buffer_handle>
    3da0:	90 91 a3 19 	lds	r25, 0x19A3	; 0x8019a3 <_serial_reply_buffer_handle+0x1>
    3da4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <xStreamBufferSendFromISR>
    3da8:	89 81       	ldd	r24, Y+1	; 0x01
    3daa:	81 11       	cpse	r24, r1
    3dac:	0e 94 3a 09 	call	0x1274	; 0x1274 <vPortYield>
    3db0:	10 92 9f 19 	sts	0x199F, r1	; 0x80199f <rec_buf_inp.2947>
    3db4:	be 01       	movw	r22, r28
    3db6:	6e 5f       	subi	r22, 0xFE	; 254
    3db8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dba:	c8 01       	movw	r24, r16
    3dbc:	48 d6       	rcall	.+3216   	; 0x4a4e <serial_get_byte>
    3dbe:	88 23       	and	r24, r24
    3dc0:	61 f2       	breq	.-104    	; 0x3d5a <_serial_call_back+0x16>
    3dc2:	0f 90       	pop	r0
    3dc4:	0f 90       	pop	r0
    3dc6:	df 91       	pop	r29
    3dc8:	cf 91       	pop	r28
    3dca:	1f 91       	pop	r17
    3dcc:	0f 91       	pop	r16
    3dce:	08 95       	ret

00003dd0 <_upload_message>:
    3dd0:	0f 93       	push	r16
    3dd2:	1f 93       	push	r17
    3dd4:	cf 93       	push	r28
    3dd6:	df 93       	push	r29
    3dd8:	8c 01       	movw	r16, r24
    3dda:	eb 01       	movw	r28, r22
    3ddc:	80 91 a2 19 	lds	r24, 0x19A2	; 0x8019a2 <_serial_reply_buffer_handle>
    3de0:	90 91 a3 19 	lds	r25, 0x19A3	; 0x8019a3 <_serial_reply_buffer_handle+0x1>
    3de4:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <xStreamBufferReset>
    3de8:	b8 01       	movw	r22, r16
    3dea:	8b e3       	ldi	r24, 0x3B	; 59
    3dec:	99 e1       	ldi	r25, 0x19	; 25
    3dee:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <strcpy>
    3df2:	20 97       	sbiw	r28, 0x00	; 0
    3df4:	79 f0       	breq	.+30     	; 0x3e14 <_upload_message+0x44>
    3df6:	eb e3       	ldi	r30, 0x3B	; 59
    3df8:	f9 e1       	ldi	r31, 0x19	; 25
    3dfa:	01 90       	ld	r0, Z+
    3dfc:	00 20       	and	r0, r0
    3dfe:	e9 f7       	brne	.-6      	; 0x3dfa <_upload_message+0x2a>
    3e00:	31 97       	sbiw	r30, 0x01	; 1
    3e02:	80 e2       	ldi	r24, 0x20	; 32
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	91 83       	std	Z+1, r25	; 0x01
    3e08:	80 83       	st	Z, r24
    3e0a:	be 01       	movw	r22, r28
    3e0c:	8b e3       	ldi	r24, 0x3B	; 59
    3e0e:	99 e1       	ldi	r25, 0x19	; 25
    3e10:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <strcat>
    3e14:	eb e3       	ldi	r30, 0x3B	; 59
    3e16:	f9 e1       	ldi	r31, 0x19	; 25
    3e18:	df 01       	movw	r26, r30
    3e1a:	0d 90       	ld	r0, X+
    3e1c:	00 20       	and	r0, r0
    3e1e:	e9 f7       	brne	.-6      	; 0x3e1a <_upload_message+0x4a>
    3e20:	11 97       	sbiw	r26, 0x01	; 1
    3e22:	8d e0       	ldi	r24, 0x0D	; 13
    3e24:	9a e0       	ldi	r25, 0x0A	; 10
    3e26:	11 96       	adiw	r26, 0x01	; 1
    3e28:	9c 93       	st	X, r25
    3e2a:	8e 93       	st	-X, r24
    3e2c:	12 96       	adiw	r26, 0x02	; 2
    3e2e:	1c 92       	st	X, r1
    3e30:	01 90       	ld	r0, Z+
    3e32:	00 20       	and	r0, r0
    3e34:	e9 f7       	brne	.-6      	; 0x3e30 <_upload_message+0x60>
    3e36:	31 97       	sbiw	r30, 0x01	; 1
    3e38:	eb 53       	subi	r30, 0x3B	; 59
    3e3a:	f9 41       	sbci	r31, 0x19	; 25
    3e3c:	ae 2f       	mov	r26, r30
    3e3e:	8b e3       	ldi	r24, 0x3B	; 59
    3e40:	99 e1       	ldi	r25, 0x19	; 25
    3e42:	ac 01       	movw	r20, r24
    3e44:	6a 2f       	mov	r22, r26
    3e46:	80 91 a4 19 	lds	r24, 0x19A4	; 0x8019a4 <_rn2483_serial>
    3e4a:	90 91 a5 19 	lds	r25, 0x19A5	; 0x8019a5 <_rn2483_serial+0x1>
    3e4e:	af d5       	rcall	.+2910   	; 0x49ae <serial_send_bytes>
    3e50:	81 11       	cpse	r24, r1
    3e52:	11 c0       	rjmp	.+34     	; 0x3e76 <_upload_message+0xa6>
    3e54:	08 e2       	ldi	r16, 0x28	; 40
    3e56:	15 e0       	ldi	r17, 0x05	; 5
    3e58:	20 e0       	ldi	r18, 0x00	; 0
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	4d e2       	ldi	r20, 0x2D	; 45
    3e5e:	50 e0       	ldi	r21, 0x00	; 0
    3e60:	6b e2       	ldi	r22, 0x2B	; 43
    3e62:	7a e1       	ldi	r23, 0x1A	; 26
    3e64:	80 91 a2 19 	lds	r24, 0x19A2	; 0x8019a2 <_serial_reply_buffer_handle>
    3e68:	90 91 a3 19 	lds	r25, 0x19A3	; 0x8019a3 <_serial_reply_buffer_handle+0x1>
    3e6c:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xStreamBufferReceive>
    3e70:	8b e2       	ldi	r24, 0x2B	; 43
    3e72:	9a e1       	ldi	r25, 0x1A	; 26
    3e74:	02 c0       	rjmp	.+4      	; 0x3e7a <_upload_message+0xaa>
    3e76:	80 e0       	ldi	r24, 0x00	; 0
    3e78:	90 e0       	ldi	r25, 0x00	; 0
    3e7a:	df 91       	pop	r29
    3e7c:	cf 91       	pop	r28
    3e7e:	1f 91       	pop	r17
    3e80:	0f 91       	pop	r16
    3e82:	08 95       	ret

00003e84 <_reply2return_code>:
    3e84:	2f 92       	push	r2
    3e86:	3f 92       	push	r3
    3e88:	4f 92       	push	r4
    3e8a:	5f 92       	push	r5
    3e8c:	6f 92       	push	r6
    3e8e:	7f 92       	push	r7
    3e90:	8f 92       	push	r8
    3e92:	9f 92       	push	r9
    3e94:	af 92       	push	r10
    3e96:	bf 92       	push	r11
    3e98:	cf 92       	push	r12
    3e9a:	df 92       	push	r13
    3e9c:	ef 92       	push	r14
    3e9e:	ff 92       	push	r15
    3ea0:	0f 93       	push	r16
    3ea2:	1f 93       	push	r17
    3ea4:	cf 93       	push	r28
    3ea6:	df 93       	push	r29
    3ea8:	5c 01       	movw	r10, r24
    3eaa:	fc 01       	movw	r30, r24
    3eac:	01 90       	ld	r0, Z+
    3eae:	00 20       	and	r0, r0
    3eb0:	e9 f7       	brne	.-6      	; 0x3eac <_reply2return_code+0x28>
    3eb2:	31 97       	sbiw	r30, 0x01	; 1
    3eb4:	6f 01       	movw	r12, r30
    3eb6:	c8 1a       	sub	r12, r24
    3eb8:	d9 0a       	sbc	r13, r25
    3eba:	5c 2c       	mov	r5, r12
    3ebc:	0f 2e       	mov	r0, r31
    3ebe:	f4 e2       	ldi	r31, 0x24	; 36
    3ec0:	8f 2e       	mov	r8, r31
    3ec2:	f8 e0       	ldi	r31, 0x08	; 8
    3ec4:	9f 2e       	mov	r9, r31
    3ec6:	f0 2d       	mov	r31, r0
    3ec8:	e1 2c       	mov	r14, r1
    3eca:	f1 2c       	mov	r15, r1
    3ecc:	4c 2c       	mov	r4, r12
    3ece:	37 01       	movw	r6, r14
    3ed0:	f4 01       	movw	r30, r8
    3ed2:	01 81       	ldd	r16, Z+1	; 0x01
    3ed4:	12 81       	ldd	r17, Z+2	; 0x02
    3ed6:	e8 01       	movw	r28, r16
    3ed8:	09 90       	ld	r0, Y+
    3eda:	00 20       	and	r0, r0
    3edc:	e9 f7       	brne	.-6      	; 0x3ed8 <_reply2return_code+0x54>
    3ede:	21 97       	sbiw	r28, 0x01	; 1
    3ee0:	c0 1b       	sub	r28, r16
    3ee2:	d1 0b       	sbc	r29, r17
    3ee4:	3c 2e       	mov	r3, r28
    3ee6:	f9 e0       	ldi	r31, 0x09	; 9
    3ee8:	cf 16       	cp	r12, r31
    3eea:	d1 04       	cpc	r13, r1
    3eec:	58 f0       	brcs	.+22     	; 0x3f04 <_reply2return_code+0x80>
    3eee:	f4 01       	movw	r30, r8
    3ef0:	20 80       	ld	r2, Z
    3ef2:	fe e0       	ldi	r31, 0x0E	; 14
    3ef4:	2f 12       	cpse	r2, r31
    3ef6:	06 c0       	rjmp	.+12     	; 0x3f04 <_reply2return_code+0x80>
    3ef8:	b8 01       	movw	r22, r16
    3efa:	c5 01       	movw	r24, r10
    3efc:	0e 94 b2 2c 	call	0x5964	; 0x5964 <strcasestr>
    3f00:	89 2b       	or	r24, r25
    3f02:	09 f5       	brne	.+66     	; 0x3f46 <_reply2return_code+0xc2>
    3f04:	44 2d       	mov	r20, r4
    3f06:	35 14       	cp	r3, r5
    3f08:	08 f4       	brcc	.+2      	; 0x3f0c <_reply2return_code+0x88>
    3f0a:	4c 2f       	mov	r20, r28
    3f0c:	50 e0       	ldi	r21, 0x00	; 0
    3f0e:	b8 01       	movw	r22, r16
    3f10:	c5 01       	movw	r24, r10
    3f12:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <strncasecmp>
    3f16:	89 2b       	or	r24, r25
    3f18:	49 f4       	brne	.+18     	; 0x3f2c <_reply2return_code+0xa8>
    3f1a:	f3 01       	movw	r30, r6
    3f1c:	ee 0f       	add	r30, r30
    3f1e:	ff 1f       	adc	r31, r31
    3f20:	e6 0d       	add	r30, r6
    3f22:	f7 1d       	adc	r31, r7
    3f24:	ec 5d       	subi	r30, 0xDC	; 220
    3f26:	f7 4f       	sbci	r31, 0xF7	; 247
    3f28:	20 80       	ld	r2, Z
    3f2a:	0d c0       	rjmp	.+26     	; 0x3f46 <_reply2return_code+0xc2>
    3f2c:	8f ef       	ldi	r24, 0xFF	; 255
    3f2e:	e8 1a       	sub	r14, r24
    3f30:	f8 0a       	sbc	r15, r24
    3f32:	e3 e0       	ldi	r30, 0x03	; 3
    3f34:	8e 0e       	add	r8, r30
    3f36:	91 1c       	adc	r9, r1
    3f38:	f1 e1       	ldi	r31, 0x11	; 17
    3f3a:	ef 16       	cp	r14, r31
    3f3c:	f1 04       	cpc	r15, r1
    3f3e:	39 f6       	brne	.-114    	; 0x3ece <_reply2return_code+0x4a>
    3f40:	68 94       	set
    3f42:	22 24       	eor	r2, r2
    3f44:	24 f8       	bld	r2, 4
    3f46:	82 2d       	mov	r24, r2
    3f48:	df 91       	pop	r29
    3f4a:	cf 91       	pop	r28
    3f4c:	1f 91       	pop	r17
    3f4e:	0f 91       	pop	r16
    3f50:	ff 90       	pop	r15
    3f52:	ef 90       	pop	r14
    3f54:	df 90       	pop	r13
    3f56:	cf 90       	pop	r12
    3f58:	bf 90       	pop	r11
    3f5a:	af 90       	pop	r10
    3f5c:	9f 90       	pop	r9
    3f5e:	8f 90       	pop	r8
    3f60:	7f 90       	pop	r7
    3f62:	6f 90       	pop	r6
    3f64:	5f 90       	pop	r5
    3f66:	4f 90       	pop	r4
    3f68:	3f 90       	pop	r3
    3f6a:	2f 90       	pop	r2
    3f6c:	08 95       	ret

00003f6e <_upload_message_rc>:
    3f6e:	30 df       	rcall	.-416    	; 0x3dd0 <_upload_message>
    3f70:	89 cf       	rjmp	.-238    	; 0x3e84 <_reply2return_code>
    3f72:	08 95       	ret

00003f74 <lora_driver_flush_buffers>:
    3f74:	80 91 a2 19 	lds	r24, 0x19A2	; 0x8019a2 <_serial_reply_buffer_handle>
    3f78:	90 91 a3 19 	lds	r25, 0x19A3	; 0x8019a3 <_serial_reply_buffer_handle+0x1>
    3f7c:	0c 94 cf 0e 	jmp	0x1d9e	; 0x1d9e <xStreamBufferReset>
    3f80:	08 95       	ret

00003f82 <lora_driver_create>:
    3f82:	8f 92       	push	r8
    3f84:	9f 92       	push	r9
    3f86:	af 92       	push	r10
    3f88:	cf 92       	push	r12
    3f8a:	ef 92       	push	r14
    3f8c:	0f 93       	push	r16
    3f8e:	1f 93       	push	r17
    3f90:	cf 93       	push	r28
    3f92:	c8 2f       	mov	r28, r24
    3f94:	8b 01       	movw	r16, r22
    3f96:	41 e0       	ldi	r20, 0x01	; 1
    3f98:	60 e0       	ldi	r22, 0x00	; 0
    3f9a:	70 e0       	ldi	r23, 0x00	; 0
    3f9c:	88 ec       	ldi	r24, 0xC8	; 200
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <xStreamBufferGenericCreate>
    3fa4:	90 93 a3 19 	sts	0x19A3, r25	; 0x8019a3 <_serial_reply_buffer_handle+0x1>
    3fa8:	80 93 a2 19 	sts	0x19A2, r24	; 0x8019a2 <_serial_reply_buffer_handle>
    3fac:	10 93 a1 19 	sts	0x19A1, r17	; 0x8019a1 <_downlinkMessageBuffer+0x1>
    3fb0:	00 93 a0 19 	sts	0x19A0, r16	; 0x8019a0 <_downlinkMessageBuffer>
    3fb4:	0f 2e       	mov	r0, r31
    3fb6:	f2 ea       	ldi	r31, 0xA2	; 162
    3fb8:	8f 2e       	mov	r8, r31
    3fba:	fe e1       	ldi	r31, 0x1E	; 30
    3fbc:	9f 2e       	mov	r9, r31
    3fbe:	f0 2d       	mov	r31, r0
    3fc0:	68 94       	set
    3fc2:	aa 24       	eor	r10, r10
    3fc4:	a6 f8       	bld	r10, 6
    3fc6:	68 94       	set
    3fc8:	cc 24       	eor	r12, r12
    3fca:	c6 f8       	bld	r12, 6
    3fcc:	e1 2c       	mov	r14, r1
    3fce:	00 e0       	ldi	r16, 0x00	; 0
    3fd0:	23 e0       	ldi	r18, 0x03	; 3
    3fd2:	40 e0       	ldi	r20, 0x00	; 0
    3fd4:	51 ee       	ldi	r21, 0xE1	; 225
    3fd6:	60 e0       	ldi	r22, 0x00	; 0
    3fd8:	70 e0       	ldi	r23, 0x00	; 0
    3fda:	8c 2f       	mov	r24, r28
    3fdc:	2c d4       	rcall	.+2136   	; 0x4836 <serial_new_instance>
    3fde:	90 93 a5 19 	sts	0x19A5, r25	; 0x8019a5 <_rn2483_serial+0x1>
    3fe2:	80 93 a4 19 	sts	0x19A4, r24	; 0x8019a4 <_rn2483_serial>
    3fe6:	e0 91 9b 1a 	lds	r30, 0x1A9B	; 0x801a9b <register_access+0x8>
    3fea:	f0 91 9c 1a 	lds	r31, 0x1A9C	; 0x801a9c <register_access+0x9>
    3fee:	64 e0       	ldi	r22, 0x04	; 4
    3ff0:	87 e0       	ldi	r24, 0x07	; 7
    3ff2:	91 e0       	ldi	r25, 0x01	; 1
    3ff4:	19 95       	eicall
    3ff6:	cf 91       	pop	r28
    3ff8:	1f 91       	pop	r17
    3ffa:	0f 91       	pop	r16
    3ffc:	ef 90       	pop	r14
    3ffe:	cf 90       	pop	r12
    4000:	af 90       	pop	r10
    4002:	9f 90       	pop	r9
    4004:	8f 90       	pop	r8
    4006:	08 95       	ret

00004008 <lora_driver_reset_rn2483>:
    4008:	88 23       	and	r24, r24
    400a:	49 f0       	breq	.+18     	; 0x401e <lora_driver_reset_rn2483+0x16>
    400c:	e0 91 a5 1a 	lds	r30, 0x1AA5	; 0x801aa5 <register_access+0x12>
    4010:	f0 91 a6 1a 	lds	r31, 0x1AA6	; 0x801aa6 <register_access+0x13>
    4014:	64 e0       	ldi	r22, 0x04	; 4
    4016:	88 e0       	ldi	r24, 0x08	; 8
    4018:	91 e0       	ldi	r25, 0x01	; 1
    401a:	19 95       	eicall
    401c:	08 95       	ret
    401e:	e0 91 9b 1a 	lds	r30, 0x1A9B	; 0x801a9b <register_access+0x8>
    4022:	f0 91 9c 1a 	lds	r31, 0x1A9C	; 0x801a9c <register_access+0x9>
    4026:	64 e0       	ldi	r22, 0x04	; 4
    4028:	88 e0       	ldi	r24, 0x08	; 8
    402a:	91 e0       	ldi	r25, 0x01	; 1
    402c:	19 95       	eicall
    402e:	08 95       	ret

00004030 <lora_driver_rn2483_factory_reset>:
    4030:	60 e0       	ldi	r22, 0x00	; 0
    4032:	70 e0       	ldi	r23, 0x00	; 0
    4034:	8a ea       	ldi	r24, 0xAA	; 170
    4036:	95 e0       	ldi	r25, 0x05	; 5
    4038:	cb de       	rcall	.-618    	; 0x3dd0 <_upload_message>
    403a:	eb e2       	ldi	r30, 0x2B	; 43
    403c:	fa e1       	ldi	r31, 0x1A	; 26
    403e:	01 90       	ld	r0, Z+
    4040:	00 20       	and	r0, r0
    4042:	e9 f7       	brne	.-6      	; 0x403e <lora_driver_rn2483_factory_reset+0xe>
    4044:	31 97       	sbiw	r30, 0x01	; 1
    4046:	eb 52       	subi	r30, 0x2B	; 43
    4048:	fa 41       	sbci	r31, 0x1A	; 26
    404a:	81 e0       	ldi	r24, 0x01	; 1
    404c:	75 97       	sbiw	r30, 0x15	; 21
    404e:	08 f0       	brcs	.+2      	; 0x4052 <lora_driver_rn2483_factory_reset+0x22>
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	08 95       	ret

00004054 <lora_driver_get_rn2483_hweui>:
    4054:	cf 93       	push	r28
    4056:	df 93       	push	r29
    4058:	ec 01       	movw	r28, r24
    405a:	60 e0       	ldi	r22, 0x00	; 0
    405c:	70 e0       	ldi	r23, 0x00	; 0
    405e:	8b eb       	ldi	r24, 0xBB	; 187
    4060:	95 e0       	ldi	r25, 0x05	; 5
    4062:	b6 de       	rcall	.-660    	; 0x3dd0 <_upload_message>
    4064:	eb e2       	ldi	r30, 0x2B	; 43
    4066:	fa e1       	ldi	r31, 0x1A	; 26
    4068:	01 90       	ld	r0, Z+
    406a:	00 20       	and	r0, r0
    406c:	e9 f7       	brne	.-6      	; 0x4068 <lora_driver_get_rn2483_hweui+0x14>
    406e:	ec 53       	subi	r30, 0x3C	; 60
    4070:	fa 41       	sbci	r31, 0x1A	; 26
    4072:	39 f4       	brne	.+14     	; 0x4082 <lora_driver_get_rn2483_hweui+0x2e>
    4074:	6b e2       	ldi	r22, 0x2B	; 43
    4076:	7a e1       	ldi	r23, 0x1A	; 26
    4078:	ce 01       	movw	r24, r28
    407a:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <strcpy>
    407e:	80 e0       	ldi	r24, 0x00	; 0
    4080:	02 c0       	rjmp	.+4      	; 0x4086 <lora_driver_get_rn2483_hweui+0x32>
    4082:	18 82       	st	Y, r1
    4084:	81 e0       	ldi	r24, 0x01	; 1
    4086:	df 91       	pop	r29
    4088:	cf 91       	pop	r28
    408a:	08 95       	ret

0000408c <lora_driver_set_device_identifier>:
    408c:	fc 01       	movw	r30, r24
    408e:	01 90       	ld	r0, Z+
    4090:	00 20       	and	r0, r0
    4092:	e9 f7       	brne	.-6      	; 0x408e <lora_driver_set_device_identifier+0x2>
    4094:	9f 01       	movw	r18, r30
    4096:	21 51       	subi	r18, 0x11	; 17
    4098:	31 09       	sbc	r19, r1
    409a:	28 17       	cp	r18, r24
    409c:	39 07       	cpc	r19, r25
    409e:	29 f4       	brne	.+10     	; 0x40aa <lora_driver_set_device_identifier+0x1e>
    40a0:	bc 01       	movw	r22, r24
    40a2:	89 ee       	ldi	r24, 0xE9	; 233
    40a4:	95 e0       	ldi	r25, 0x05	; 5
    40a6:	63 cf       	rjmp	.-314    	; 0x3f6e <_upload_message_rc>
    40a8:	08 95       	ret
    40aa:	89 e0       	ldi	r24, 0x09	; 9
    40ac:	08 95       	ret

000040ae <lora_driver_set_application_identifier>:
    40ae:	fc 01       	movw	r30, r24
    40b0:	01 90       	ld	r0, Z+
    40b2:	00 20       	and	r0, r0
    40b4:	e9 f7       	brne	.-6      	; 0x40b0 <lora_driver_set_application_identifier+0x2>
    40b6:	9f 01       	movw	r18, r30
    40b8:	21 51       	subi	r18, 0x11	; 17
    40ba:	31 09       	sbc	r19, r1
    40bc:	28 17       	cp	r18, r24
    40be:	39 07       	cpc	r19, r25
    40c0:	29 f4       	brne	.+10     	; 0x40cc <lora_driver_set_application_identifier+0x1e>
    40c2:	bc 01       	movw	r22, r24
    40c4:	88 ef       	ldi	r24, 0xF8	; 248
    40c6:	95 e0       	ldi	r25, 0x05	; 5
    40c8:	52 cf       	rjmp	.-348    	; 0x3f6e <_upload_message_rc>
    40ca:	08 95       	ret
    40cc:	89 e0       	ldi	r24, 0x09	; 9
    40ce:	08 95       	ret

000040d0 <lora_driver_set_application_key>:
    40d0:	fc 01       	movw	r30, r24
    40d2:	01 90       	ld	r0, Z+
    40d4:	00 20       	and	r0, r0
    40d6:	e9 f7       	brne	.-6      	; 0x40d2 <lora_driver_set_application_key+0x2>
    40d8:	9f 01       	movw	r18, r30
    40da:	21 52       	subi	r18, 0x21	; 33
    40dc:	31 09       	sbc	r19, r1
    40de:	28 17       	cp	r18, r24
    40e0:	39 07       	cpc	r19, r25
    40e2:	29 f4       	brne	.+10     	; 0x40ee <lora_driver_set_application_key+0x1e>
    40e4:	bc 01       	movw	r22, r24
    40e6:	87 e0       	ldi	r24, 0x07	; 7
    40e8:	96 e0       	ldi	r25, 0x06	; 6
    40ea:	41 cf       	rjmp	.-382    	; 0x3f6e <_upload_message_rc>
    40ec:	08 95       	ret
    40ee:	89 e0       	ldi	r24, 0x09	; 9
    40f0:	08 95       	ret

000040f2 <lora_driver_save_mac>:
    40f2:	60 e0       	ldi	r22, 0x00	; 0
    40f4:	70 e0       	ldi	r23, 0x00	; 0
    40f6:	86 e4       	ldi	r24, 0x46	; 70
    40f8:	96 e0       	ldi	r25, 0x06	; 6
    40fa:	39 cf       	rjmp	.-398    	; 0x3f6e <_upload_message_rc>
    40fc:	08 95       	ret

000040fe <lora_driver_join>:
    40fe:	0f 93       	push	r16
    4100:	1f 93       	push	r17
    4102:	e8 2f       	mov	r30, r24
    4104:	f0 e0       	ldi	r31, 0x00	; 0
    4106:	ee 0f       	add	r30, r30
    4108:	ff 1f       	adc	r31, r31
    410a:	e0 5e       	subi	r30, 0xE0	; 224
    410c:	f7 4f       	sbci	r31, 0xF7	; 247
    410e:	60 81       	ld	r22, Z
    4110:	71 81       	ldd	r23, Z+1	; 0x01
    4112:	8f e4       	ldi	r24, 0x4F	; 79
    4114:	96 e0       	ldi	r25, 0x06	; 6
    4116:	2b df       	rcall	.-426    	; 0x3f6e <_upload_message_rc>
    4118:	81 11       	cpse	r24, r1
    411a:	14 c0       	rjmp	.+40     	; 0x4144 <lora_driver_join+0x46>
    411c:	08 e2       	ldi	r16, 0x28	; 40
    411e:	15 e0       	ldi	r17, 0x05	; 5
    4120:	20 e0       	ldi	r18, 0x00	; 0
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	4d e2       	ldi	r20, 0x2D	; 45
    4126:	50 e0       	ldi	r21, 0x00	; 0
    4128:	6b e2       	ldi	r22, 0x2B	; 43
    412a:	7a e1       	ldi	r23, 0x1A	; 26
    412c:	80 91 a2 19 	lds	r24, 0x19A2	; 0x8019a2 <_serial_reply_buffer_handle>
    4130:	90 91 a3 19 	lds	r25, 0x19A3	; 0x8019a3 <_serial_reply_buffer_handle+0x1>
    4134:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xStreamBufferReceive>
    4138:	88 23       	and	r24, r24
    413a:	21 f0       	breq	.+8      	; 0x4144 <lora_driver_join+0x46>
    413c:	8b e2       	ldi	r24, 0x2B	; 43
    413e:	9a e1       	ldi	r25, 0x1A	; 26
    4140:	a1 de       	rcall	.-702    	; 0x3e84 <_reply2return_code>
    4142:	03 c0       	rjmp	.+6      	; 0x414a <lora_driver_join+0x4c>
    4144:	8b e2       	ldi	r24, 0x2B	; 43
    4146:	9a e1       	ldi	r25, 0x1A	; 26
    4148:	9d de       	rcall	.-710    	; 0x3e84 <_reply2return_code>
    414a:	1f 91       	pop	r17
    414c:	0f 91       	pop	r16
    414e:	08 95       	ret

00004150 <lora_driver_sent_upload_message>:
    4150:	0f 93       	push	r16
    4152:	1f 93       	push	r17
    4154:	cf 93       	push	r28
    4156:	df 93       	push	r29
    4158:	1f 92       	push	r1
    415a:	cd b7       	in	r28, 0x3d	; 61
    415c:	de b7       	in	r29, 0x3e	; 62
    415e:	db 01       	movw	r26, r22
    4160:	11 96       	adiw	r26, 0x01	; 1
    4162:	9c 91       	ld	r25, X
    4164:	11 97       	sbiw	r26, 0x01	; 1
    4166:	95 31       	cpi	r25, 0x15	; 21
    4168:	08 f0       	brcs	.+2      	; 0x416c <lora_driver_sent_upload_message+0x1c>
    416a:	b4 c0       	rjmp	.+360    	; 0x42d4 <lora_driver_sent_upload_message+0x184>
    416c:	99 23       	and	r25, r25
    416e:	81 f1       	breq	.+96     	; 0x41d0 <lora_driver_sent_upload_message+0x80>
    4170:	60 e0       	ldi	r22, 0x00	; 0
    4172:	70 e0       	ldi	r23, 0x00	; 0
    4174:	27 2f       	mov	r18, r23
    4176:	30 e0       	ldi	r19, 0x00	; 0
    4178:	46 2f       	mov	r20, r22
    417a:	50 e0       	ldi	r21, 0x00	; 0
    417c:	fd 01       	movw	r30, r26
    417e:	e4 0f       	add	r30, r20
    4180:	f5 1f       	adc	r31, r21
    4182:	92 81       	ldd	r25, Z+2	; 0x02
    4184:	92 95       	swap	r25
    4186:	9f 70       	andi	r25, 0x0F	; 15
    4188:	9a 30       	cpi	r25, 0x0A	; 10
    418a:	10 f0       	brcs	.+4      	; 0x4190 <lora_driver_sent_upload_message+0x40>
    418c:	99 5c       	subi	r25, 0xC9	; 201
    418e:	01 c0       	rjmp	.+2      	; 0x4192 <lora_driver_sent_upload_message+0x42>
    4190:	90 5d       	subi	r25, 0xD0	; 208
    4192:	f9 01       	movw	r30, r18
    4194:	e4 54       	subi	r30, 0x44	; 68
    4196:	f6 4e       	sbci	r31, 0xE6	; 230
    4198:	90 83       	st	Z, r25
    419a:	2f 5f       	subi	r18, 0xFF	; 255
    419c:	3f 4f       	sbci	r19, 0xFF	; 255
    419e:	fd 01       	movw	r30, r26
    41a0:	e4 0f       	add	r30, r20
    41a2:	f5 1f       	adc	r31, r21
    41a4:	92 81       	ldd	r25, Z+2	; 0x02
    41a6:	9f 70       	andi	r25, 0x0F	; 15
    41a8:	49 2f       	mov	r20, r25
    41aa:	50 e0       	ldi	r21, 0x00	; 0
    41ac:	4a 30       	cpi	r20, 0x0A	; 10
    41ae:	51 05       	cpc	r21, r1
    41b0:	14 f0       	brlt	.+4      	; 0x41b6 <lora_driver_sent_upload_message+0x66>
    41b2:	99 5c       	subi	r25, 0xC9	; 201
    41b4:	01 c0       	rjmp	.+2      	; 0x41b8 <lora_driver_sent_upload_message+0x68>
    41b6:	90 5d       	subi	r25, 0xD0	; 208
    41b8:	f9 01       	movw	r30, r18
    41ba:	e4 54       	subi	r30, 0x44	; 68
    41bc:	f6 4e       	sbci	r31, 0xE6	; 230
    41be:	90 83       	st	Z, r25
    41c0:	7e 5f       	subi	r23, 0xFE	; 254
    41c2:	6f 5f       	subi	r22, 0xFF	; 255
    41c4:	11 96       	adiw	r26, 0x01	; 1
    41c6:	9c 91       	ld	r25, X
    41c8:	11 97       	sbiw	r26, 0x01	; 1
    41ca:	69 17       	cp	r22, r25
    41cc:	98 f2       	brcs	.-90     	; 0x4174 <lora_driver_sent_upload_message+0x24>
    41ce:	01 c0       	rjmp	.+2      	; 0x41d2 <lora_driver_sent_upload_message+0x82>
    41d0:	70 e0       	ldi	r23, 0x00	; 0
    41d2:	e7 2f       	mov	r30, r23
    41d4:	f0 e0       	ldi	r31, 0x00	; 0
    41d6:	e4 54       	subi	r30, 0x44	; 68
    41d8:	f6 4e       	sbci	r31, 0xE6	; 230
    41da:	10 82       	st	Z, r1
    41dc:	4c 91       	ld	r20, X
    41de:	81 11       	cpse	r24, r1
    41e0:	03 c0       	rjmp	.+6      	; 0x41e8 <lora_driver_sent_upload_message+0x98>
    41e2:	88 e5       	ldi	r24, 0x58	; 88
    41e4:	96 e0       	ldi	r25, 0x06	; 6
    41e6:	02 c0       	rjmp	.+4      	; 0x41ec <lora_driver_sent_upload_message+0x9c>
    41e8:	8a e5       	ldi	r24, 0x5A	; 90
    41ea:	96 e0       	ldi	r25, 0x06	; 6
    41ec:	2c eb       	ldi	r18, 0xBC	; 188
    41ee:	39 e1       	ldi	r19, 0x19	; 25
    41f0:	3f 93       	push	r19
    41f2:	2f 93       	push	r18
    41f4:	1f 92       	push	r1
    41f6:	4f 93       	push	r20
    41f8:	9f 93       	push	r25
    41fa:	8f 93       	push	r24
    41fc:	8e e5       	ldi	r24, 0x5E	; 94
    41fe:	96 e0       	ldi	r25, 0x06	; 6
    4200:	9f 93       	push	r25
    4202:	8f 93       	push	r24
    4204:	8e ef       	ldi	r24, 0xFE	; 254
    4206:	99 e1       	ldi	r25, 0x19	; 25
    4208:	9f 93       	push	r25
    420a:	8f 93       	push	r24
    420c:	0e 94 44 2d 	call	0x5a88	; 0x5a88 <sprintf>
    4210:	60 e0       	ldi	r22, 0x00	; 0
    4212:	70 e0       	ldi	r23, 0x00	; 0
    4214:	8e ef       	ldi	r24, 0xFE	; 254
    4216:	99 e1       	ldi	r25, 0x19	; 25
    4218:	aa de       	rcall	.-684    	; 0x3f6e <_upload_message_rc>
    421a:	0f b6       	in	r0, 0x3f	; 63
    421c:	f8 94       	cli
    421e:	de bf       	out	0x3e, r29	; 62
    4220:	0f be       	out	0x3f, r0	; 63
    4222:	cd bf       	out	0x3d, r28	; 61
    4224:	81 11       	cpse	r24, r1
    4226:	59 c0       	rjmp	.+178    	; 0x42da <lora_driver_sent_upload_message+0x18a>
    4228:	08 e2       	ldi	r16, 0x28	; 40
    422a:	15 e0       	ldi	r17, 0x05	; 5
    422c:	20 e0       	ldi	r18, 0x00	; 0
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	4d e2       	ldi	r20, 0x2D	; 45
    4232:	50 e0       	ldi	r21, 0x00	; 0
    4234:	6b e2       	ldi	r22, 0x2B	; 43
    4236:	7a e1       	ldi	r23, 0x1A	; 26
    4238:	80 91 a2 19 	lds	r24, 0x19A2	; 0x8019a2 <_serial_reply_buffer_handle>
    423c:	90 91 a3 19 	lds	r25, 0x19A3	; 0x8019a3 <_serial_reply_buffer_handle+0x1>
    4240:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xStreamBufferReceive>
    4244:	88 23       	and	r24, r24
    4246:	09 f4       	brne	.+2      	; 0x424a <lora_driver_sent_upload_message+0xfa>
    4248:	47 c0       	rjmp	.+142    	; 0x42d8 <lora_driver_sent_upload_message+0x188>
    424a:	8b e2       	ldi	r24, 0x2B	; 43
    424c:	9a e1       	ldi	r25, 0x1A	; 26
    424e:	1a de       	rcall	.-972    	; 0x3e84 <_reply2return_code>
    4250:	8e 30       	cpi	r24, 0x0E	; 14
    4252:	09 f0       	breq	.+2      	; 0x4256 <lora_driver_sent_upload_message+0x106>
    4254:	42 c0       	rjmp	.+132    	; 0x42da <lora_driver_sent_upload_message+0x18a>
    4256:	87 e0       	ldi	r24, 0x07	; 7
    4258:	89 83       	std	Y+1, r24	; 0x01
    425a:	80 91 a0 19 	lds	r24, 0x19A0	; 0x8019a0 <_downlinkMessageBuffer>
    425e:	90 91 a1 19 	lds	r25, 0x19A1	; 0x8019a1 <_downlinkMessageBuffer+0x1>
    4262:	89 2b       	or	r24, r25
    4264:	a9 f1       	breq	.+106    	; 0x42d0 <lora_driver_sent_upload_message+0x180>
    4266:	be 01       	movw	r22, r28
    4268:	6f 5f       	subi	r22, 0xFF	; 255
    426a:	7f 4f       	sbci	r23, 0xFF	; 255
    426c:	8b e2       	ldi	r24, 0x2B	; 43
    426e:	9a e1       	ldi	r25, 0x1A	; 26
    4270:	68 d1       	rcall	.+720    	; 0x4542 <decode_port_no>
    4272:	80 93 a6 19 	sts	0x19A6, r24	; 0x8019a6 <_downlink_payload>
    4276:	e9 81       	ldd	r30, Y+1	; 0x01
    4278:	f0 e0       	ldi	r31, 0x00	; 0
    427a:	e5 5d       	subi	r30, 0xD5	; 213
    427c:	f5 4e       	sbci	r31, 0xE5	; 229
    427e:	df 01       	movw	r26, r30
    4280:	0d 90       	ld	r0, X+
    4282:	00 20       	and	r0, r0
    4284:	e9 f7       	brne	.-6      	; 0x4280 <lora_driver_sent_upload_message+0x130>
    4286:	11 97       	sbiw	r26, 0x01	; 1
    4288:	ae 1b       	sub	r26, r30
    428a:	bf 0b       	sbc	r27, r31
    428c:	aa 23       	and	r26, r26
    428e:	91 f0       	breq	.+36     	; 0x42b4 <lora_driver_sent_upload_message+0x164>
    4290:	bb 27       	eor	r27, r27
    4292:	cd 01       	movw	r24, r26
    4294:	01 97       	sbiw	r24, 0x01	; 1
    4296:	9c 01       	movw	r18, r24
    4298:	12 f4       	brpl	.+4      	; 0x429e <lora_driver_sent_upload_message+0x14e>
    429a:	2f 5f       	subi	r18, 0xFF	; 255
    429c:	3f 4f       	sbci	r19, 0xFF	; 255
    429e:	35 95       	asr	r19
    42a0:	27 95       	ror	r18
    42a2:	20 93 a7 19 	sts	0x19A7, r18	; 0x8019a7 <_downlink_payload+0x1>
    42a6:	af 01       	movw	r20, r30
    42a8:	4f 5f       	subi	r20, 0xFF	; 255
    42aa:	5f 4f       	sbci	r21, 0xFF	; 255
    42ac:	64 e1       	ldi	r22, 0x14	; 20
    42ae:	88 ea       	ldi	r24, 0xA8	; 168
    42b0:	99 e1       	ldi	r25, 0x19	; 25
    42b2:	73 d1       	rcall	.+742    	; 0x459a <decode_hexadecimal_string_bytes>
    42b4:	01 e0       	ldi	r16, 0x01	; 1
    42b6:	10 e0       	ldi	r17, 0x00	; 0
    42b8:	20 e0       	ldi	r18, 0x00	; 0
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	46 e1       	ldi	r20, 0x16	; 22
    42be:	50 e0       	ldi	r21, 0x00	; 0
    42c0:	66 ea       	ldi	r22, 0xA6	; 166
    42c2:	79 e1       	ldi	r23, 0x19	; 25
    42c4:	80 91 a0 19 	lds	r24, 0x19A0	; 0x8019a0 <_downlinkMessageBuffer>
    42c8:	90 91 a1 19 	lds	r25, 0x19A1	; 0x8019a1 <_downlinkMessageBuffer+0x1>
    42cc:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <xStreamBufferSend>
    42d0:	8e e0       	ldi	r24, 0x0E	; 14
    42d2:	03 c0       	rjmp	.+6      	; 0x42da <lora_driver_sent_upload_message+0x18a>
    42d4:	84 e1       	ldi	r24, 0x14	; 20
    42d6:	01 c0       	rjmp	.+2      	; 0x42da <lora_driver_sent_upload_message+0x18a>
    42d8:	80 e0       	ldi	r24, 0x00	; 0
    42da:	0f 90       	pop	r0
    42dc:	df 91       	pop	r29
    42de:	cf 91       	pop	r28
    42e0:	1f 91       	pop	r17
    42e2:	0f 91       	pop	r16
    42e4:	08 95       	ret

000042e6 <lora_driver_set_adaptive_data_rate>:
    42e6:	81 30       	cpi	r24, 0x01	; 1
    42e8:	19 f0       	breq	.+6      	; 0x42f0 <lora_driver_set_adaptive_data_rate+0xa>
    42ea:	6e e6       	ldi	r22, 0x6E	; 110
    42ec:	76 e0       	ldi	r23, 0x06	; 6
    42ee:	02 c0       	rjmp	.+4      	; 0x42f4 <lora_driver_set_adaptive_data_rate+0xe>
    42f0:	67 e4       	ldi	r22, 0x47	; 71
    42f2:	77 e0       	ldi	r23, 0x07	; 7
    42f4:	82 e7       	ldi	r24, 0x72	; 114
    42f6:	96 e0       	ldi	r25, 0x06	; 6
    42f8:	3a ce       	rjmp	.-908    	; 0x3f6e <_upload_message_rc>
    42fa:	08 95       	ret

000042fc <lora_driver_set_receive_delay>:
    42fc:	9f 93       	push	r25
    42fe:	8f 93       	push	r24
    4300:	83 ea       	ldi	r24, 0xA3	; 163
    4302:	96 e0       	ldi	r25, 0x06	; 6
    4304:	9f 93       	push	r25
    4306:	8f 93       	push	r24
    4308:	8e ef       	ldi	r24, 0xFE	; 254
    430a:	99 e1       	ldi	r25, 0x19	; 25
    430c:	9f 93       	push	r25
    430e:	8f 93       	push	r24
    4310:	0e 94 44 2d 	call	0x5a88	; 0x5a88 <sprintf>
    4314:	60 e0       	ldi	r22, 0x00	; 0
    4316:	70 e0       	ldi	r23, 0x00	; 0
    4318:	8e ef       	ldi	r24, 0xFE	; 254
    431a:	99 e1       	ldi	r25, 0x19	; 25
    431c:	28 de       	rcall	.-944    	; 0x3f6e <_upload_message_rc>
    431e:	0f 90       	pop	r0
    4320:	0f 90       	pop	r0
    4322:	0f 90       	pop	r0
    4324:	0f 90       	pop	r0
    4326:	0f 90       	pop	r0
    4328:	0f 90       	pop	r0
    432a:	08 95       	ret

0000432c <lora_driver_configure_to_eu868>:
    432c:	2f 92       	push	r2
    432e:	3f 92       	push	r3
    4330:	4f 92       	push	r4
    4332:	5f 92       	push	r5
    4334:	6f 92       	push	r6
    4336:	7f 92       	push	r7
    4338:	8f 92       	push	r8
    433a:	9f 92       	push	r9
    433c:	af 92       	push	r10
    433e:	bf 92       	push	r11
    4340:	cf 92       	push	r12
    4342:	df 92       	push	r13
    4344:	ef 92       	push	r14
    4346:	ff 92       	push	r15
    4348:	0f 93       	push	r16
    434a:	1f 93       	push	r17
    434c:	cf 93       	push	r28
    434e:	df 93       	push	r29
    4350:	cd b7       	in	r28, 0x3d	; 61
    4352:	de b7       	in	r29, 0x3e	; 62
    4354:	a0 97       	sbiw	r28, 0x20	; 32
    4356:	0f b6       	in	r0, 0x3f	; 63
    4358:	f8 94       	cli
    435a:	de bf       	out	0x3e, r29	; 62
    435c:	0f be       	out	0x3f, r0	; 63
    435e:	cd bf       	out	0x3d, r28	; 61
    4360:	60 ed       	ldi	r22, 0xD0	; 208
    4362:	76 e0       	ldi	r23, 0x06	; 6
    4364:	8c ed       	ldi	r24, 0xDC	; 220
    4366:	96 e0       	ldi	r25, 0x06	; 6
    4368:	33 dd       	rcall	.-1434   	; 0x3dd0 <_upload_message>
    436a:	8c dd       	rcall	.-1256   	; 0x3e84 <_reply2return_code>
    436c:	81 11       	cpse	r24, r1
    436e:	a3 c0       	rjmp	.+326    	; 0x44b6 <lora_driver_configure_to_eu868+0x18a>
    4370:	80 e2       	ldi	r24, 0x20	; 32
    4372:	e1 e2       	ldi	r30, 0x21	; 33
    4374:	f2 e0       	ldi	r31, 0x02	; 2
    4376:	de 01       	movw	r26, r28
    4378:	11 96       	adiw	r26, 0x01	; 1
    437a:	01 90       	ld	r0, Z+
    437c:	0d 92       	st	X+, r0
    437e:	8a 95       	dec	r24
    4380:	e1 f7       	brne	.-8      	; 0x437a <lora_driver_configure_to_eu868+0x4e>
    4382:	9e 01       	movw	r18, r28
    4384:	2f 5f       	subi	r18, 0xFF	; 255
    4386:	3f 4f       	sbci	r19, 0xFF	; 255
    4388:	69 01       	movw	r12, r18
    438a:	e1 2c       	mov	r14, r1
    438c:	f1 2c       	mov	r15, r1
    438e:	0f 2e       	mov	r0, r31
    4390:	f8 ee       	ldi	r31, 0xE8	; 232
    4392:	af 2e       	mov	r10, r31
    4394:	f6 e0       	ldi	r31, 0x06	; 6
    4396:	bf 2e       	mov	r11, r31
    4398:	f0 2d       	mov	r31, r0
    439a:	0e ef       	ldi	r16, 0xFE	; 254
    439c:	19 e1       	ldi	r17, 0x19	; 25
    439e:	0f 2e       	mov	r0, r31
    43a0:	f1 e0       	ldi	r31, 0x01	; 1
    43a2:	4f 2e       	mov	r4, r31
    43a4:	f7 e0       	ldi	r31, 0x07	; 7
    43a6:	5f 2e       	mov	r5, r31
    43a8:	f0 2d       	mov	r31, r0
    43aa:	0f 2e       	mov	r0, r31
    43ac:	f8 e1       	ldi	r31, 0x18	; 24
    43ae:	8f 2e       	mov	r8, r31
    43b0:	f7 e0       	ldi	r31, 0x07	; 7
    43b2:	9f 2e       	mov	r9, r31
    43b4:	f0 2d       	mov	r31, r0
    43b6:	0f 2e       	mov	r0, r31
    43b8:	f2 e3       	ldi	r31, 0x32	; 50
    43ba:	6f 2e       	mov	r6, r31
    43bc:	f7 e0       	ldi	r31, 0x07	; 7
    43be:	7f 2e       	mov	r7, r31
    43c0:	f0 2d       	mov	r31, r0
    43c2:	3e 2c       	mov	r3, r14
    43c4:	2f 2c       	mov	r2, r15
    43c6:	ff 92       	push	r15
    43c8:	ef 92       	push	r14
    43ca:	bf 92       	push	r11
    43cc:	af 92       	push	r10
    43ce:	1f 93       	push	r17
    43d0:	0f 93       	push	r16
    43d2:	0e 94 44 2d 	call	0x5a88	; 0x5a88 <sprintf>
    43d6:	60 e0       	ldi	r22, 0x00	; 0
    43d8:	70 e0       	ldi	r23, 0x00	; 0
    43da:	c8 01       	movw	r24, r16
    43dc:	f9 dc       	rcall	.-1550   	; 0x3dd0 <_upload_message>
    43de:	52 dd       	rcall	.-1372   	; 0x3e84 <_reply2return_code>
    43e0:	0f 90       	pop	r0
    43e2:	0f 90       	pop	r0
    43e4:	0f 90       	pop	r0
    43e6:	0f 90       	pop	r0
    43e8:	0f 90       	pop	r0
    43ea:	0f 90       	pop	r0
    43ec:	81 11       	cpse	r24, r1
    43ee:	63 c0       	rjmp	.+198    	; 0x44b6 <lora_driver_configure_to_eu868+0x18a>
    43f0:	32 e0       	ldi	r19, 0x02	; 2
    43f2:	3e 15       	cp	r19, r14
    43f4:	e8 f4       	brcc	.+58     	; 0x4430 <lora_driver_configure_to_eu868+0x104>
    43f6:	f6 01       	movw	r30, r12
    43f8:	83 81       	ldd	r24, Z+3	; 0x03
    43fa:	8f 93       	push	r24
    43fc:	82 81       	ldd	r24, Z+2	; 0x02
    43fe:	8f 93       	push	r24
    4400:	81 81       	ldd	r24, Z+1	; 0x01
    4402:	8f 93       	push	r24
    4404:	80 81       	ld	r24, Z
    4406:	8f 93       	push	r24
    4408:	ff 92       	push	r15
    440a:	ef 92       	push	r14
    440c:	5f 92       	push	r5
    440e:	4f 92       	push	r4
    4410:	1f 93       	push	r17
    4412:	0f 93       	push	r16
    4414:	0e 94 44 2d 	call	0x5a88	; 0x5a88 <sprintf>
    4418:	60 e0       	ldi	r22, 0x00	; 0
    441a:	70 e0       	ldi	r23, 0x00	; 0
    441c:	c8 01       	movw	r24, r16
    441e:	d8 dc       	rcall	.-1616   	; 0x3dd0 <_upload_message>
    4420:	31 dd       	rcall	.-1438   	; 0x3e84 <_reply2return_code>
    4422:	0f b6       	in	r0, 0x3f	; 63
    4424:	f8 94       	cli
    4426:	de bf       	out	0x3e, r29	; 62
    4428:	0f be       	out	0x3f, r0	; 63
    442a:	cd bf       	out	0x3d, r28	; 61
    442c:	81 11       	cpse	r24, r1
    442e:	43 c0       	rjmp	.+134    	; 0x44b6 <lora_driver_configure_to_eu868+0x18a>
    4430:	2f 92       	push	r2
    4432:	3f 92       	push	r3
    4434:	9f 92       	push	r9
    4436:	8f 92       	push	r8
    4438:	1f 93       	push	r17
    443a:	0f 93       	push	r16
    443c:	0e 94 44 2d 	call	0x5a88	; 0x5a88 <sprintf>
    4440:	60 e0       	ldi	r22, 0x00	; 0
    4442:	70 e0       	ldi	r23, 0x00	; 0
    4444:	c8 01       	movw	r24, r16
    4446:	c4 dc       	rcall	.-1656   	; 0x3dd0 <_upload_message>
    4448:	1d dd       	rcall	.-1478   	; 0x3e84 <_reply2return_code>
    444a:	0f 90       	pop	r0
    444c:	0f 90       	pop	r0
    444e:	0f 90       	pop	r0
    4450:	0f 90       	pop	r0
    4452:	0f 90       	pop	r0
    4454:	0f 90       	pop	r0
    4456:	81 11       	cpse	r24, r1
    4458:	2e c0       	rjmp	.+92     	; 0x44b6 <lora_driver_configure_to_eu868+0x18a>
    445a:	2f 92       	push	r2
    445c:	3f 92       	push	r3
    445e:	7f 92       	push	r7
    4460:	6f 92       	push	r6
    4462:	1f 93       	push	r17
    4464:	0f 93       	push	r16
    4466:	0e 94 44 2d 	call	0x5a88	; 0x5a88 <sprintf>
    446a:	60 e0       	ldi	r22, 0x00	; 0
    446c:	70 e0       	ldi	r23, 0x00	; 0
    446e:	c8 01       	movw	r24, r16
    4470:	af dc       	rcall	.-1698   	; 0x3dd0 <_upload_message>
    4472:	08 dd       	rcall	.-1520   	; 0x3e84 <_reply2return_code>
    4474:	0f 90       	pop	r0
    4476:	0f 90       	pop	r0
    4478:	0f 90       	pop	r0
    447a:	0f 90       	pop	r0
    447c:	0f 90       	pop	r0
    447e:	0f 90       	pop	r0
    4480:	81 11       	cpse	r24, r1
    4482:	19 c0       	rjmp	.+50     	; 0x44b6 <lora_driver_configure_to_eu868+0x18a>
    4484:	3f ef       	ldi	r19, 0xFF	; 255
    4486:	e3 1a       	sub	r14, r19
    4488:	f3 0a       	sbc	r15, r19
    448a:	84 e0       	ldi	r24, 0x04	; 4
    448c:	c8 0e       	add	r12, r24
    448e:	d1 1c       	adc	r13, r1
    4490:	98 e0       	ldi	r25, 0x08	; 8
    4492:	e9 16       	cp	r14, r25
    4494:	f1 04       	cpc	r15, r1
    4496:	09 f0       	breq	.+2      	; 0x449a <lora_driver_configure_to_eu868+0x16e>
    4498:	94 cf       	rjmp	.-216    	; 0x43c2 <lora_driver_configure_to_eu868+0x96>
    449a:	60 e0       	ldi	r22, 0x00	; 0
    449c:	70 e0       	ldi	r23, 0x00	; 0
    449e:	8a e4       	ldi	r24, 0x4A	; 74
    44a0:	97 e0       	ldi	r25, 0x07	; 7
    44a2:	96 dc       	rcall	.-1748   	; 0x3dd0 <_upload_message>
    44a4:	ef dc       	rcall	.-1570   	; 0x3e84 <_reply2return_code>
    44a6:	81 11       	cpse	r24, r1
    44a8:	06 c0       	rjmp	.+12     	; 0x44b6 <lora_driver_configure_to_eu868+0x18a>
    44aa:	60 e0       	ldi	r22, 0x00	; 0
    44ac:	70 e0       	ldi	r23, 0x00	; 0
    44ae:	8b e5       	ldi	r24, 0x5B	; 91
    44b0:	97 e0       	ldi	r25, 0x07	; 7
    44b2:	8e dc       	rcall	.-1764   	; 0x3dd0 <_upload_message>
    44b4:	e7 dc       	rcall	.-1586   	; 0x3e84 <_reply2return_code>
    44b6:	a0 96       	adiw	r28, 0x20	; 32
    44b8:	0f b6       	in	r0, 0x3f	; 63
    44ba:	f8 94       	cli
    44bc:	de bf       	out	0x3e, r29	; 62
    44be:	0f be       	out	0x3f, r0	; 63
    44c0:	cd bf       	out	0x3d, r28	; 61
    44c2:	df 91       	pop	r29
    44c4:	cf 91       	pop	r28
    44c6:	1f 91       	pop	r17
    44c8:	0f 91       	pop	r16
    44ca:	ff 90       	pop	r15
    44cc:	ef 90       	pop	r14
    44ce:	df 90       	pop	r13
    44d0:	cf 90       	pop	r12
    44d2:	bf 90       	pop	r11
    44d4:	af 90       	pop	r10
    44d6:	9f 90       	pop	r9
    44d8:	8f 90       	pop	r8
    44da:	7f 90       	pop	r7
    44dc:	6f 90       	pop	r6
    44de:	5f 90       	pop	r5
    44e0:	4f 90       	pop	r4
    44e2:	3f 90       	pop	r3
    44e4:	2f 90       	pop	r2
    44e6:	08 95       	ret

000044e8 <lora_driver_set_otaa_identity>:
    44e8:	ef 92       	push	r14
    44ea:	ff 92       	push	r15
    44ec:	0f 93       	push	r16
    44ee:	1f 93       	push	r17
    44f0:	cf 93       	push	r28
    44f2:	df 93       	push	r29
    44f4:	ec 01       	movw	r28, r24
    44f6:	8b 01       	movw	r16, r22
    44f8:	7a 01       	movw	r14, r20
    44fa:	81 e0       	ldi	r24, 0x01	; 1
    44fc:	f4 de       	rcall	.-536    	; 0x42e6 <lora_driver_set_adaptive_data_rate>
    44fe:	81 11       	cpse	r24, r1
    4500:	0d c0       	rjmp	.+26     	; 0x451c <lora_driver_set_otaa_identity+0x34>
    4502:	ce 01       	movw	r24, r28
    4504:	d4 dd       	rcall	.-1112   	; 0x40ae <lora_driver_set_application_identifier>
    4506:	81 11       	cpse	r24, r1
    4508:	09 c0       	rjmp	.+18     	; 0x451c <lora_driver_set_otaa_identity+0x34>
    450a:	c8 01       	movw	r24, r16
    450c:	e1 dd       	rcall	.-1086   	; 0x40d0 <lora_driver_set_application_key>
    450e:	81 11       	cpse	r24, r1
    4510:	05 c0       	rjmp	.+10     	; 0x451c <lora_driver_set_otaa_identity+0x34>
    4512:	c7 01       	movw	r24, r14
    4514:	bb dd       	rcall	.-1162   	; 0x408c <lora_driver_set_device_identifier>
    4516:	81 11       	cpse	r24, r1
    4518:	01 c0       	rjmp	.+2      	; 0x451c <lora_driver_set_otaa_identity+0x34>
    451a:	eb dd       	rcall	.-1066   	; 0x40f2 <lora_driver_save_mac>
    451c:	df 91       	pop	r29
    451e:	cf 91       	pop	r28
    4520:	1f 91       	pop	r17
    4522:	0f 91       	pop	r16
    4524:	ff 90       	pop	r15
    4526:	ef 90       	pop	r14
    4528:	08 95       	ret

0000452a <lora_driver_map_return_code_to_text>:
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	fc 01       	movw	r30, r24
    452e:	ee 0f       	add	r30, r30
    4530:	ff 1f       	adc	r31, r31
    4532:	8e 0f       	add	r24, r30
    4534:	9f 1f       	adc	r25, r31
    4536:	fc 01       	movw	r30, r24
    4538:	ec 5d       	subi	r30, 0xDC	; 220
    453a:	f7 4f       	sbci	r31, 0xF7	; 247
    453c:	81 81       	ldd	r24, Z+1	; 0x01
    453e:	92 81       	ldd	r25, Z+2	; 0x02
    4540:	08 95       	ret

00004542 <decode_port_no>:
    4542:	dc 01       	movw	r26, r24
    4544:	00 97       	sbiw	r24, 0x00	; 0
    4546:	29 f1       	breq	.+74     	; 0x4592 <decode_port_no+0x50>
    4548:	fb 01       	movw	r30, r22
    454a:	20 81       	ld	r18, Z
    454c:	fc 01       	movw	r30, r24
    454e:	01 90       	ld	r0, Z+
    4550:	00 20       	and	r0, r0
    4552:	e9 f7       	brne	.-6      	; 0x454e <decode_port_no+0xc>
    4554:	31 97       	sbiw	r30, 0x01	; 1
    4556:	e8 1b       	sub	r30, r24
    4558:	f9 0b       	sbc	r31, r25
    455a:	82 2f       	mov	r24, r18
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	e8 17       	cp	r30, r24
    4560:	f9 07       	cpc	r31, r25
    4562:	c8 f0       	brcs	.+50     	; 0x4596 <decode_port_no+0x54>
    4564:	80 e0       	ldi	r24, 0x00	; 0
    4566:	08 c0       	rjmp	.+16     	; 0x4578 <decode_port_no+0x36>
    4568:	88 0f       	add	r24, r24
    456a:	38 2f       	mov	r19, r24
    456c:	33 0f       	add	r19, r19
    456e:	33 0f       	add	r19, r19
    4570:	83 0f       	add	r24, r19
    4572:	80 53       	subi	r24, 0x30	; 48
    4574:	89 0f       	add	r24, r25
    4576:	2f 5f       	subi	r18, 0xFF	; 255
    4578:	fd 01       	movw	r30, r26
    457a:	e2 0f       	add	r30, r18
    457c:	f1 1d       	adc	r31, r1
    457e:	90 81       	ld	r25, Z
    4580:	30 ed       	ldi	r19, 0xD0	; 208
    4582:	39 0f       	add	r19, r25
    4584:	3a 30       	cpi	r19, 0x0A	; 10
    4586:	10 f4       	brcc	.+4      	; 0x458c <decode_port_no+0x4a>
    4588:	91 11       	cpse	r25, r1
    458a:	ee cf       	rjmp	.-36     	; 0x4568 <decode_port_no+0x26>
    458c:	fb 01       	movw	r30, r22
    458e:	20 83       	st	Z, r18
    4590:	08 95       	ret
    4592:	80 e0       	ldi	r24, 0x00	; 0
    4594:	08 95       	ret
    4596:	80 e0       	ldi	r24, 0x00	; 0
    4598:	08 95       	ret

0000459a <decode_hexadecimal_string_bytes>:
    459a:	0f 93       	push	r16
    459c:	1f 93       	push	r17
    459e:	cf 93       	push	r28
    45a0:	df 93       	push	r29
    45a2:	dc 01       	movw	r26, r24
    45a4:	ea 01       	movw	r28, r20
    45a6:	20 97       	sbiw	r28, 0x00	; 0
    45a8:	e1 f1       	breq	.+120    	; 0x4622 <decode_hexadecimal_string_bytes+0x88>
    45aa:	fa 01       	movw	r30, r20
    45ac:	01 90       	ld	r0, Z+
    45ae:	00 20       	and	r0, r0
    45b0:	e9 f7       	brne	.-6      	; 0x45ac <decode_hexadecimal_string_bytes+0x12>
    45b2:	31 97       	sbiw	r30, 0x01	; 1
    45b4:	e4 1b       	sub	r30, r20
    45b6:	f5 0b       	sbc	r31, r21
    45b8:	32 97       	sbiw	r30, 0x02	; 2
    45ba:	10 f5       	brcc	.+68     	; 0x4600 <decode_hexadecimal_string_bytes+0x66>
    45bc:	32 c0       	rjmp	.+100    	; 0x4622 <decode_hexadecimal_string_bytes+0x88>
    45be:	8d 01       	movw	r16, r26
    45c0:	04 0f       	add	r16, r20
    45c2:	15 1f       	adc	r17, r21
    45c4:	30 e0       	ldi	r19, 0x00	; 0
    45c6:	ae 01       	movw	r20, r28
    45c8:	42 0f       	add	r20, r18
    45ca:	53 1f       	adc	r21, r19
    45cc:	fa 01       	movw	r30, r20
    45ce:	90 81       	ld	r25, Z
    45d0:	91 34       	cpi	r25, 0x41	; 65
    45d2:	28 f0       	brcs	.+10     	; 0x45de <decode_hexadecimal_string_bytes+0x44>
    45d4:	97 53       	subi	r25, 0x37	; 55
    45d6:	59 2f       	mov	r21, r25
    45d8:	52 95       	swap	r21
    45da:	50 7f       	andi	r21, 0xF0	; 240
    45dc:	03 c0       	rjmp	.+6      	; 0x45e4 <decode_hexadecimal_string_bytes+0x4a>
    45de:	59 2f       	mov	r21, r25
    45e0:	52 95       	swap	r21
    45e2:	50 7f       	andi	r21, 0xF0	; 240
    45e4:	2c 0f       	add	r18, r28
    45e6:	3d 1f       	adc	r19, r29
    45e8:	f9 01       	movw	r30, r18
    45ea:	91 81       	ldd	r25, Z+1	; 0x01
    45ec:	91 34       	cpi	r25, 0x41	; 65
    45ee:	10 f0       	brcs	.+4      	; 0x45f4 <decode_hexadecimal_string_bytes+0x5a>
    45f0:	97 53       	subi	r25, 0x37	; 55
    45f2:	01 c0       	rjmp	.+2      	; 0x45f6 <decode_hexadecimal_string_bytes+0x5c>
    45f4:	90 53       	subi	r25, 0x30	; 48
    45f6:	95 0f       	add	r25, r21
    45f8:	f8 01       	movw	r30, r16
    45fa:	90 83       	st	Z, r25
    45fc:	8f 5f       	subi	r24, 0xFF	; 255
    45fe:	01 c0       	rjmp	.+2      	; 0x4602 <decode_hexadecimal_string_bytes+0x68>
    4600:	80 e0       	ldi	r24, 0x00	; 0
    4602:	28 2f       	mov	r18, r24
    4604:	22 0f       	add	r18, r18
    4606:	48 2f       	mov	r20, r24
    4608:	50 e0       	ldi	r21, 0x00	; 0
    460a:	fe 01       	movw	r30, r28
    460c:	01 90       	ld	r0, Z+
    460e:	00 20       	and	r0, r0
    4610:	e9 f7       	brne	.-6      	; 0x460c <decode_hexadecimal_string_bytes+0x72>
    4612:	31 97       	sbiw	r30, 0x01	; 1
    4614:	ec 1b       	sub	r30, r28
    4616:	fd 0b       	sbc	r31, r29
    4618:	4e 17       	cp	r20, r30
    461a:	5f 07       	cpc	r21, r31
    461c:	10 f4       	brcc	.+4      	; 0x4622 <decode_hexadecimal_string_bytes+0x88>
    461e:	86 13       	cpse	r24, r22
    4620:	ce cf       	rjmp	.-100    	; 0x45be <decode_hexadecimal_string_bytes+0x24>
    4622:	df 91       	pop	r29
    4624:	cf 91       	pop	r28
    4626:	1f 91       	pop	r17
    4628:	0f 91       	pop	r16
    462a:	08 95       	ret

0000462c <reg_read_register>:
    462c:	fc 01       	movw	r30, r24
    462e:	80 81       	ld	r24, Z
    4630:	08 95       	ret

00004632 <reg_read_bit>:
    4632:	fc 01       	movw	r30, r24
    4634:	20 81       	ld	r18, Z
    4636:	81 e0       	ldi	r24, 0x01	; 1
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	02 c0       	rjmp	.+4      	; 0x4640 <reg_read_bit+0xe>
    463c:	88 0f       	add	r24, r24
    463e:	99 1f       	adc	r25, r25
    4640:	6a 95       	dec	r22
    4642:	e2 f7       	brpl	.-8      	; 0x463c <reg_read_bit+0xa>
    4644:	82 23       	and	r24, r18
    4646:	08 95       	ret

00004648 <reg_read_bits>:
    4648:	fc 01       	movw	r30, r24
    464a:	80 81       	ld	r24, Z
    464c:	86 23       	and	r24, r22
    464e:	08 95       	ret

00004650 <reg_set_register>:
    4650:	fc 01       	movw	r30, r24
    4652:	60 83       	st	Z, r22
    4654:	08 95       	ret

00004656 <reg_clear_register>:
    4656:	fc 01       	movw	r30, r24
    4658:	10 82       	st	Z, r1
    465a:	08 95       	ret

0000465c <reg_set_bit>:
    465c:	fc 01       	movw	r30, r24
    465e:	40 81       	ld	r20, Z
    4660:	21 e0       	ldi	r18, 0x01	; 1
    4662:	30 e0       	ldi	r19, 0x00	; 0
    4664:	02 c0       	rjmp	.+4      	; 0x466a <reg_set_bit+0xe>
    4666:	22 0f       	add	r18, r18
    4668:	33 1f       	adc	r19, r19
    466a:	6a 95       	dec	r22
    466c:	e2 f7       	brpl	.-8      	; 0x4666 <reg_set_bit+0xa>
    466e:	24 2b       	or	r18, r20
    4670:	20 83       	st	Z, r18
    4672:	08 95       	ret

00004674 <reg_set_bits>:
    4674:	fc 01       	movw	r30, r24
    4676:	20 81       	ld	r18, Z
    4678:	62 2b       	or	r22, r18
    467a:	60 83       	st	Z, r22
    467c:	08 95       	ret

0000467e <reg_toggle_bit>:
    467e:	fc 01       	movw	r30, r24
    4680:	40 81       	ld	r20, Z
    4682:	21 e0       	ldi	r18, 0x01	; 1
    4684:	30 e0       	ldi	r19, 0x00	; 0
    4686:	02 c0       	rjmp	.+4      	; 0x468c <reg_toggle_bit+0xe>
    4688:	22 0f       	add	r18, r18
    468a:	33 1f       	adc	r19, r19
    468c:	6a 95       	dec	r22
    468e:	e2 f7       	brpl	.-8      	; 0x4688 <reg_toggle_bit+0xa>
    4690:	24 27       	eor	r18, r20
    4692:	20 83       	st	Z, r18
    4694:	08 95       	ret

00004696 <reg_toggle_bits>:
    4696:	fc 01       	movw	r30, r24
    4698:	20 81       	ld	r18, Z
    469a:	62 27       	eor	r22, r18
    469c:	60 83       	st	Z, r22
    469e:	08 95       	ret

000046a0 <reg_clear_bit>:
    46a0:	fc 01       	movw	r30, r24
    46a2:	90 81       	ld	r25, Z
    46a4:	21 e0       	ldi	r18, 0x01	; 1
    46a6:	30 e0       	ldi	r19, 0x00	; 0
    46a8:	02 c0       	rjmp	.+4      	; 0x46ae <reg_clear_bit+0xe>
    46aa:	22 0f       	add	r18, r18
    46ac:	33 1f       	adc	r19, r19
    46ae:	6a 95       	dec	r22
    46b0:	e2 f7       	brpl	.-8      	; 0x46aa <reg_clear_bit+0xa>
    46b2:	20 95       	com	r18
    46b4:	29 23       	and	r18, r25
    46b6:	20 83       	st	Z, r18
    46b8:	08 95       	ret

000046ba <reg_clear_bits>:
    46ba:	fc 01       	movw	r30, r24
    46bc:	90 81       	ld	r25, Z
    46be:	60 95       	com	r22
    46c0:	69 23       	and	r22, r25
    46c2:	60 83       	st	Z, r22
    46c4:	08 95       	ret

000046c6 <_serial_call_back>:
    46c6:	80 91 5b 1a 	lds	r24, 0x1A5B	; 0x801a5b <crc_sum.1941>
    46ca:	86 0f       	add	r24, r22
    46cc:	80 93 5b 1a 	sts	0x1A5B, r24	; 0x801a5b <crc_sum.1941>
    46d0:	90 91 5e 1a 	lds	r25, 0x1A5E	; 0x801a5e <_mh_state>
    46d4:	91 30       	cpi	r25, 0x01	; 1
    46d6:	79 f0       	breq	.+30     	; 0x46f6 <_serial_call_back+0x30>
    46d8:	28 f0       	brcs	.+10     	; 0x46e4 <_serial_call_back+0x1e>
    46da:	92 30       	cpi	r25, 0x02	; 2
    46dc:	a9 f0       	breq	.+42     	; 0x4708 <_serial_call_back+0x42>
    46de:	93 30       	cpi	r25, 0x03	; 3
    46e0:	19 f1       	breq	.+70     	; 0x4728 <_serial_call_back+0x62>
    46e2:	08 95       	ret
    46e4:	6f 3f       	cpi	r22, 0xFF	; 255
    46e6:	09 f0       	breq	.+2      	; 0x46ea <_serial_call_back+0x24>
    46e8:	48 c0       	rjmp	.+144    	; 0x477a <_serial_call_back+0xb4>
    46ea:	10 92 5b 1a 	sts	0x1A5B, r1	; 0x801a5b <crc_sum.1941>
    46ee:	81 e0       	ldi	r24, 0x01	; 1
    46f0:	80 93 5e 1a 	sts	0x1A5E, r24	; 0x801a5e <_mh_state>
    46f4:	08 95       	ret
    46f6:	66 38       	cpi	r22, 0x86	; 134
    46f8:	09 f0       	breq	.+2      	; 0x46fc <_serial_call_back+0x36>
    46fa:	3f c0       	rjmp	.+126    	; 0x477a <_serial_call_back+0xb4>
    46fc:	10 92 5a 1a 	sts	0x1A5A, r1	; 0x801a5a <inDex.1939>
    4700:	82 e0       	ldi	r24, 0x02	; 2
    4702:	80 93 5e 1a 	sts	0x1A5E, r24	; 0x801a5e <_mh_state>
    4706:	08 95       	ret
    4708:	e0 91 5a 1a 	lds	r30, 0x1A5A	; 0x801a5a <inDex.1939>
    470c:	81 e0       	ldi	r24, 0x01	; 1
    470e:	8e 0f       	add	r24, r30
    4710:	80 93 5a 1a 	sts	0x1A5A, r24	; 0x801a5a <inDex.1939>
    4714:	f0 e0       	ldi	r31, 0x00	; 0
    4716:	e8 5a       	subi	r30, 0xA8	; 168
    4718:	f5 4e       	sbci	r31, 0xE5	; 229
    471a:	60 83       	st	Z, r22
    471c:	82 30       	cpi	r24, 0x02	; 2
    471e:	69 f5       	brne	.+90     	; 0x477a <_serial_call_back+0xb4>
    4720:	83 e0       	ldi	r24, 0x03	; 3
    4722:	80 93 5e 1a 	sts	0x1A5E, r24	; 0x801a5e <_mh_state>
    4726:	08 95       	ret
    4728:	90 91 5a 1a 	lds	r25, 0x1A5A	; 0x801a5a <inDex.1939>
    472c:	21 e0       	ldi	r18, 0x01	; 1
    472e:	29 0f       	add	r18, r25
    4730:	20 93 5a 1a 	sts	0x1A5A, r18	; 0x801a5a <inDex.1939>
    4734:	96 30       	cpi	r25, 0x06	; 6
    4736:	09 f5       	brne	.+66     	; 0x477a <_serial_call_back+0xb4>
    4738:	81 11       	cpse	r24, r1
    473a:	0e c0       	rjmp	.+28     	; 0x4758 <_serial_call_back+0x92>
    473c:	e8 e5       	ldi	r30, 0x58	; 88
    473e:	fa e1       	ldi	r31, 0x1A	; 26
    4740:	80 81       	ld	r24, Z
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	98 2f       	mov	r25, r24
    4746:	88 27       	eor	r24, r24
    4748:	21 81       	ldd	r18, Z+1	; 0x01
    474a:	82 0f       	add	r24, r18
    474c:	91 1d       	adc	r25, r1
    474e:	90 93 60 1a 	sts	0x1A60, r25	; 0x801a60 <_ppm+0x1>
    4752:	80 93 5f 1a 	sts	0x1A5F, r24	; 0x801a5f <_ppm>
    4756:	04 c0       	rjmp	.+8      	; 0x4760 <_serial_call_back+0x9a>
    4758:	10 92 60 1a 	sts	0x1A60, r1	; 0x801a60 <_ppm+0x1>
    475c:	10 92 5f 1a 	sts	0x1A5F, r1	; 0x801a5f <_ppm>
    4760:	10 92 5e 1a 	sts	0x1A5E, r1	; 0x801a5e <_mh_state>
    4764:	e0 91 5c 1a 	lds	r30, 0x1A5C	; 0x801a5c <_app_call_back>
    4768:	f0 91 5d 1a 	lds	r31, 0x1A5D	; 0x801a5d <_app_call_back+0x1>
    476c:	30 97       	sbiw	r30, 0x00	; 0
    476e:	29 f0       	breq	.+10     	; 0x477a <_serial_call_back+0xb4>
    4770:	80 91 5f 1a 	lds	r24, 0x1A5F	; 0x801a5f <_ppm>
    4774:	90 91 60 1a 	lds	r25, 0x1A60	; 0x801a60 <_ppm+0x1>
    4778:	19 95       	eicall
    477a:	08 95       	ret

0000477c <mh_z19_create>:
    477c:	8f 92       	push	r8
    477e:	9f 92       	push	r9
    4780:	af 92       	push	r10
    4782:	cf 92       	push	r12
    4784:	ef 92       	push	r14
    4786:	0f 93       	push	r16
    4788:	cf 93       	push	r28
    478a:	df 93       	push	r29
    478c:	eb 01       	movw	r28, r22
    478e:	0f 2e       	mov	r0, r31
    4790:	f3 e6       	ldi	r31, 0x63	; 99
    4792:	8f 2e       	mov	r8, r31
    4794:	f3 e2       	ldi	r31, 0x23	; 35
    4796:	9f 2e       	mov	r9, r31
    4798:	f0 2d       	mov	r31, r0
    479a:	68 94       	set
    479c:	aa 24       	eor	r10, r10
    479e:	a4 f8       	bld	r10, 4
    47a0:	68 94       	set
    47a2:	cc 24       	eor	r12, r12
    47a4:	c4 f8       	bld	r12, 4
    47a6:	e1 2c       	mov	r14, r1
    47a8:	00 e0       	ldi	r16, 0x00	; 0
    47aa:	23 e0       	ldi	r18, 0x03	; 3
    47ac:	40 e8       	ldi	r20, 0x80	; 128
    47ae:	55 e2       	ldi	r21, 0x25	; 37
    47b0:	60 e0       	ldi	r22, 0x00	; 0
    47b2:	70 e0       	ldi	r23, 0x00	; 0
    47b4:	40 d0       	rcall	.+128    	; 0x4836 <serial_new_instance>
    47b6:	90 93 62 1a 	sts	0x1A62, r25	; 0x801a62 <_serial+0x1>
    47ba:	80 93 61 1a 	sts	0x1A61, r24	; 0x801a61 <_serial>
    47be:	d0 93 5d 1a 	sts	0x1A5D, r29	; 0x801a5d <_app_call_back+0x1>
    47c2:	c0 93 5c 1a 	sts	0x1A5C, r28	; 0x801a5c <_app_call_back>
    47c6:	df 91       	pop	r29
    47c8:	cf 91       	pop	r28
    47ca:	0f 91       	pop	r16
    47cc:	ef 90       	pop	r14
    47ce:	cf 90       	pop	r12
    47d0:	af 90       	pop	r10
    47d2:	9f 90       	pop	r9
    47d4:	8f 90       	pop	r8
    47d6:	08 95       	ret

000047d8 <mh_z19_take_meassuring>:
    47d8:	cf 93       	push	r28
    47da:	df 93       	push	r29
    47dc:	cd b7       	in	r28, 0x3d	; 61
    47de:	de b7       	in	r29, 0x3e	; 62
    47e0:	29 97       	sbiw	r28, 0x09	; 9
    47e2:	0f b6       	in	r0, 0x3f	; 63
    47e4:	f8 94       	cli
    47e6:	de bf       	out	0x3e, r29	; 62
    47e8:	0f be       	out	0x3f, r0	; 63
    47ea:	cd bf       	out	0x3d, r28	; 61
    47ec:	89 e0       	ldi	r24, 0x09	; 9
    47ee:	e1 e4       	ldi	r30, 0x41	; 65
    47f0:	f2 e0       	ldi	r31, 0x02	; 2
    47f2:	9e 01       	movw	r18, r28
    47f4:	2f 5f       	subi	r18, 0xFF	; 255
    47f6:	3f 4f       	sbci	r19, 0xFF	; 255
    47f8:	d9 01       	movw	r26, r18
    47fa:	01 90       	ld	r0, Z+
    47fc:	0d 92       	st	X+, r0
    47fe:	8a 95       	dec	r24
    4800:	e1 f7       	brne	.-8      	; 0x47fa <mh_z19_take_meassuring+0x22>
    4802:	10 92 60 1a 	sts	0x1A60, r1	; 0x801a60 <_ppm+0x1>
    4806:	10 92 5f 1a 	sts	0x1A5F, r1	; 0x801a5f <_ppm>
    480a:	80 91 61 1a 	lds	r24, 0x1A61	; 0x801a61 <_serial>
    480e:	90 91 62 1a 	lds	r25, 0x1A62	; 0x801a62 <_serial+0x1>
    4812:	00 97       	sbiw	r24, 0x00	; 0
    4814:	31 f0       	breq	.+12     	; 0x4822 <mh_z19_take_meassuring+0x4a>
    4816:	42 2f       	mov	r20, r18
    4818:	53 2f       	mov	r21, r19
    481a:	69 e0       	ldi	r22, 0x09	; 9
    481c:	c8 d0       	rcall	.+400    	; 0x49ae <serial_send_bytes>
    481e:	80 e0       	ldi	r24, 0x00	; 0
    4820:	01 c0       	rjmp	.+2      	; 0x4824 <mh_z19_take_meassuring+0x4c>
    4822:	82 e0       	ldi	r24, 0x02	; 2
    4824:	29 96       	adiw	r28, 0x09	; 9
    4826:	0f b6       	in	r0, 0x3f	; 63
    4828:	f8 94       	cli
    482a:	de bf       	out	0x3e, r29	; 62
    482c:	0f be       	out	0x3f, r0	; 63
    482e:	cd bf       	out	0x3d, r28	; 61
    4830:	df 91       	pop	r29
    4832:	cf 91       	pop	r28
    4834:	08 95       	ret

00004836 <serial_new_instance>:
    4836:	2f 92       	push	r2
    4838:	3f 92       	push	r3
    483a:	4f 92       	push	r4
    483c:	5f 92       	push	r5
    483e:	6f 92       	push	r6
    4840:	7f 92       	push	r7
    4842:	8f 92       	push	r8
    4844:	9f 92       	push	r9
    4846:	af 92       	push	r10
    4848:	cf 92       	push	r12
    484a:	ef 92       	push	r14
    484c:	ff 92       	push	r15
    484e:	0f 93       	push	r16
    4850:	1f 93       	push	r17
    4852:	cf 93       	push	r28
    4854:	df 93       	push	r29
    4856:	cd b7       	in	r28, 0x3d	; 61
    4858:	de b7       	in	r29, 0x3e	; 62
    485a:	f8 2e       	mov	r15, r24
    485c:	2a 01       	movw	r4, r20
    485e:	3b 01       	movw	r6, r22
    4860:	88 e0       	ldi	r24, 0x08	; 8
    4862:	90 e0       	ldi	r25, 0x00	; 0
    4864:	4a d7       	rcall	.+3732   	; 0x56fa <malloc>
    4866:	8c 01       	movw	r16, r24
    4868:	8f 2d       	mov	r24, r15
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	88 0f       	add	r24, r24
    486e:	99 1f       	adc	r25, r25
    4870:	fc 01       	movw	r30, r24
    4872:	ed 59       	subi	r30, 0x9D	; 157
    4874:	f5 4e       	sbci	r31, 0xE5	; 229
    4876:	11 83       	std	Z+1, r17	; 0x01
    4878:	00 83       	st	Z, r16
    487a:	fc 01       	movw	r30, r24
    487c:	e6 5f       	subi	r30, 0xF6	; 246
    487e:	fd 4f       	sbci	r31, 0xFD	; 253
    4880:	80 81       	ld	r24, Z
    4882:	91 81       	ldd	r25, Z+1	; 0x01
    4884:	d8 01       	movw	r26, r16
    4886:	8d 93       	st	X+, r24
    4888:	9c 93       	st	X, r25
    488a:	6c 2d       	mov	r22, r12
    488c:	70 e0       	ldi	r23, 0x00	; 0
    488e:	84 e0       	ldi	r24, 0x04	; 4
    4890:	90 e0       	ldi	r25, 0x00	; 0
    4892:	19 d7       	rcall	.+3634   	; 0x56c6 <calloc>
    4894:	1c 01       	movw	r2, r24
    4896:	61 e0       	ldi	r22, 0x01	; 1
    4898:	70 e0       	ldi	r23, 0x00	; 0
    489a:	86 e0       	ldi	r24, 0x06	; 6
    489c:	90 e0       	ldi	r25, 0x00	; 0
    489e:	13 d7       	rcall	.+3622   	; 0x56c6 <calloc>
    48a0:	7c 01       	movw	r14, r24
    48a2:	4c 2d       	mov	r20, r12
    48a4:	b1 01       	movw	r22, r2
    48a6:	2c d5       	rcall	.+2648   	; 0x5300 <fifo_init>
    48a8:	f8 01       	movw	r30, r16
    48aa:	f5 82       	std	Z+5, r15	; 0x05
    48ac:	e4 82       	std	Z+4, r14	; 0x04
    48ae:	6a 2d       	mov	r22, r10
    48b0:	70 e0       	ldi	r23, 0x00	; 0
    48b2:	84 e0       	ldi	r24, 0x04	; 4
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	07 d7       	rcall	.+3598   	; 0x56c6 <calloc>
    48b8:	1c 01       	movw	r2, r24
    48ba:	61 e0       	ldi	r22, 0x01	; 1
    48bc:	70 e0       	ldi	r23, 0x00	; 0
    48be:	86 e0       	ldi	r24, 0x06	; 6
    48c0:	90 e0       	ldi	r25, 0x00	; 0
    48c2:	01 d7       	rcall	.+3586   	; 0x56c6 <calloc>
    48c4:	7c 01       	movw	r14, r24
    48c6:	4a 2d       	mov	r20, r10
    48c8:	b1 01       	movw	r22, r2
    48ca:	1a d5       	rcall	.+2612   	; 0x5300 <fifo_init>
    48cc:	d8 01       	movw	r26, r16
    48ce:	13 96       	adiw	r26, 0x03	; 3
    48d0:	fc 92       	st	X, r15
    48d2:	ee 92       	st	-X, r14
    48d4:	12 97       	sbiw	r26, 0x02	; 2
    48d6:	17 96       	adiw	r26, 0x07	; 7
    48d8:	9c 92       	st	X, r9
    48da:	8e 92       	st	-X, r8
    48dc:	16 97       	sbiw	r26, 0x06	; 6
    48de:	ff b6       	in	r15, 0x3f	; 63
    48e0:	f8 94       	cli
    48e2:	ed 91       	ld	r30, X+
    48e4:	fc 91       	ld	r31, X
    48e6:	11 97       	sbiw	r26, 0x01	; 1
    48e8:	36 97       	sbiw	r30, 0x06	; 6
    48ea:	80 81       	ld	r24, Z
    48ec:	82 60       	ori	r24, 0x02	; 2
    48ee:	80 83       	st	Z, r24
    48f0:	8d 90       	ld	r8, X+
    48f2:	9c 90       	ld	r9, X
    48f4:	c3 01       	movw	r24, r6
    48f6:	b2 01       	movw	r22, r4
    48f8:	f1 d5       	rcall	.+3042   	; 0x54dc <__floatunsisf>
    48fa:	20 e0       	ldi	r18, 0x00	; 0
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	40 e0       	ldi	r20, 0x00	; 0
    4900:	51 e4       	ldi	r21, 0x41	; 65
    4902:	51 d6       	rcall	.+3234   	; 0x55a6 <__mulsf3>
    4904:	9b 01       	movw	r18, r22
    4906:	ac 01       	movw	r20, r24
    4908:	60 e0       	ldi	r22, 0x00	; 0
    490a:	74 e2       	ldi	r23, 0x24	; 36
    490c:	84 e7       	ldi	r24, 0x74	; 116
    490e:	9b e4       	ldi	r25, 0x4B	; 75
    4910:	7a d5       	rcall	.+2804   	; 0x5406 <__divsf3>
    4912:	20 e0       	ldi	r18, 0x00	; 0
    4914:	30 e0       	ldi	r19, 0x00	; 0
    4916:	40 e8       	ldi	r20, 0x80	; 128
    4918:	5f e3       	ldi	r21, 0x3F	; 63
    491a:	0e d5       	rcall	.+2588   	; 0x5338 <__subsf3>
    491c:	0e 94 39 1c 	call	0x3872	; 0x3872 <__fixunssfsi>
    4920:	f4 01       	movw	r30, r8
    4922:	32 97       	sbiw	r30, 0x02	; 2
    4924:	60 83       	st	Z, r22
    4926:	d8 01       	movw	r26, r16
    4928:	ed 91       	ld	r30, X+
    492a:	fc 91       	ld	r31, X
    492c:	11 97       	sbiw	r26, 0x01	; 1
    492e:	35 97       	sbiw	r30, 0x05	; 5
    4930:	88 e9       	ldi	r24, 0x98	; 152
    4932:	80 83       	st	Z, r24
    4934:	ed 91       	ld	r30, X+
    4936:	fc 91       	ld	r31, X
    4938:	34 97       	sbiw	r30, 0x04	; 4
    493a:	86 e0       	ldi	r24, 0x06	; 6
    493c:	80 83       	st	Z, r24
    493e:	ff be       	out	0x3f, r15	; 63
    4940:	c8 01       	movw	r24, r16
    4942:	df 91       	pop	r29
    4944:	cf 91       	pop	r28
    4946:	1f 91       	pop	r17
    4948:	0f 91       	pop	r16
    494a:	ff 90       	pop	r15
    494c:	ef 90       	pop	r14
    494e:	cf 90       	pop	r12
    4950:	af 90       	pop	r10
    4952:	9f 90       	pop	r9
    4954:	8f 90       	pop	r8
    4956:	7f 90       	pop	r7
    4958:	6f 90       	pop	r6
    495a:	5f 90       	pop	r5
    495c:	4f 90       	pop	r4
    495e:	3f 90       	pop	r3
    4960:	2f 90       	pop	r2
    4962:	08 95       	ret

00004964 <serial_send_byte>:
    4964:	cf 93       	push	r28
    4966:	df 93       	push	r29
    4968:	ec 01       	movw	r28, r24
    496a:	ea 81       	ldd	r30, Y+2	; 0x02
    496c:	fb 81       	ldd	r31, Y+3	; 0x03
    496e:	93 81       	ldd	r25, Z+3	; 0x03
    4970:	82 81       	ldd	r24, Z+2	; 0x02
    4972:	25 81       	ldd	r18, Z+5	; 0x05
    4974:	98 1b       	sub	r25, r24
    4976:	92 23       	and	r25, r18
    4978:	84 81       	ldd	r24, Z+4	; 0x04
    497a:	98 17       	cp	r25, r24
    497c:	a1 f0       	breq	.+40     	; 0x49a6 <serial_send_byte+0x42>
    497e:	93 81       	ldd	r25, Z+3	; 0x03
    4980:	26 95       	lsr	r18
    4982:	29 23       	and	r18, r25
    4984:	a0 81       	ld	r26, Z
    4986:	b1 81       	ldd	r27, Z+1	; 0x01
    4988:	a2 0f       	add	r26, r18
    498a:	b1 1d       	adc	r27, r1
    498c:	6c 93       	st	X, r22
    498e:	9f 5f       	subi	r25, 0xFF	; 255
    4990:	25 81       	ldd	r18, Z+5	; 0x05
    4992:	92 23       	and	r25, r18
    4994:	93 83       	std	Z+3, r25	; 0x03
    4996:	e8 81       	ld	r30, Y
    4998:	f9 81       	ldd	r31, Y+1	; 0x01
    499a:	35 97       	sbiw	r30, 0x05	; 5
    499c:	80 81       	ld	r24, Z
    499e:	80 62       	ori	r24, 0x20	; 32
    49a0:	80 83       	st	Z, r24
    49a2:	80 e0       	ldi	r24, 0x00	; 0
    49a4:	01 c0       	rjmp	.+2      	; 0x49a8 <serial_send_byte+0x44>
    49a6:	82 e0       	ldi	r24, 0x02	; 2
    49a8:	df 91       	pop	r29
    49aa:	cf 91       	pop	r28
    49ac:	08 95       	ret

000049ae <serial_send_bytes>:
    49ae:	ef 92       	push	r14
    49b0:	ff 92       	push	r15
    49b2:	0f 93       	push	r16
    49b4:	1f 93       	push	r17
    49b6:	cf 93       	push	r28
    49b8:	df 93       	push	r29
    49ba:	7c 01       	movw	r14, r24
    49bc:	dc 01       	movw	r26, r24
    49be:	12 96       	adiw	r26, 0x02	; 2
    49c0:	ed 91       	ld	r30, X+
    49c2:	fc 91       	ld	r31, X
    49c4:	13 97       	sbiw	r26, 0x03	; 3
    49c6:	93 81       	ldd	r25, Z+3	; 0x03
    49c8:	82 81       	ldd	r24, Z+2	; 0x02
    49ca:	98 1b       	sub	r25, r24
    49cc:	85 81       	ldd	r24, Z+5	; 0x05
    49ce:	98 23       	and	r25, r24
    49d0:	84 81       	ldd	r24, Z+4	; 0x04
    49d2:	89 1b       	sub	r24, r25
    49d4:	86 17       	cp	r24, r22
    49d6:	98 f1       	brcs	.+102    	; 0x4a3e <serial_send_bytes+0x90>
    49d8:	66 23       	and	r22, r22
    49da:	41 f1       	breq	.+80     	; 0x4a2c <serial_send_bytes+0x7e>
    49dc:	84 2f       	mov	r24, r20
    49de:	95 2f       	mov	r25, r21
    49e0:	dc 01       	movw	r26, r24
    49e2:	61 50       	subi	r22, 0x01	; 1
    49e4:	46 2f       	mov	r20, r22
    49e6:	50 e0       	ldi	r21, 0x00	; 0
    49e8:	4f 5f       	subi	r20, 0xFF	; 255
    49ea:	5f 4f       	sbci	r21, 0xFF	; 255
    49ec:	48 0f       	add	r20, r24
    49ee:	59 1f       	adc	r21, r25
    49f0:	e7 01       	movw	r28, r14
    49f2:	ea 81       	ldd	r30, Y+2	; 0x02
    49f4:	fb 81       	ldd	r31, Y+3	; 0x03
    49f6:	93 81       	ldd	r25, Z+3	; 0x03
    49f8:	82 81       	ldd	r24, Z+2	; 0x02
    49fa:	25 81       	ldd	r18, Z+5	; 0x05
    49fc:	98 1b       	sub	r25, r24
    49fe:	92 23       	and	r25, r18
    4a00:	84 81       	ldd	r24, Z+4	; 0x04
    4a02:	98 17       	cp	r25, r24
    4a04:	79 f0       	breq	.+30     	; 0x4a24 <serial_send_bytes+0x76>
    4a06:	8c 91       	ld	r24, X
    4a08:	93 81       	ldd	r25, Z+3	; 0x03
    4a0a:	26 95       	lsr	r18
    4a0c:	29 23       	and	r18, r25
    4a0e:	60 81       	ld	r22, Z
    4a10:	71 81       	ldd	r23, Z+1	; 0x01
    4a12:	8b 01       	movw	r16, r22
    4a14:	02 0f       	add	r16, r18
    4a16:	11 1d       	adc	r17, r1
    4a18:	e8 01       	movw	r28, r16
    4a1a:	88 83       	st	Y, r24
    4a1c:	9f 5f       	subi	r25, 0xFF	; 255
    4a1e:	85 81       	ldd	r24, Z+5	; 0x05
    4a20:	98 23       	and	r25, r24
    4a22:	93 83       	std	Z+3, r25	; 0x03
    4a24:	11 96       	adiw	r26, 0x01	; 1
    4a26:	a4 17       	cp	r26, r20
    4a28:	b5 07       	cpc	r27, r21
    4a2a:	11 f7       	brne	.-60     	; 0x49f0 <serial_send_bytes+0x42>
    4a2c:	d7 01       	movw	r26, r14
    4a2e:	ed 91       	ld	r30, X+
    4a30:	fc 91       	ld	r31, X
    4a32:	35 97       	sbiw	r30, 0x05	; 5
    4a34:	80 81       	ld	r24, Z
    4a36:	80 62       	ori	r24, 0x20	; 32
    4a38:	80 83       	st	Z, r24
    4a3a:	80 e0       	ldi	r24, 0x00	; 0
    4a3c:	01 c0       	rjmp	.+2      	; 0x4a40 <serial_send_bytes+0x92>
    4a3e:	82 e0       	ldi	r24, 0x02	; 2
    4a40:	df 91       	pop	r29
    4a42:	cf 91       	pop	r28
    4a44:	1f 91       	pop	r17
    4a46:	0f 91       	pop	r16
    4a48:	ff 90       	pop	r15
    4a4a:	ef 90       	pop	r14
    4a4c:	08 95       	ret

00004a4e <serial_get_byte>:
    4a4e:	dc 01       	movw	r26, r24
    4a50:	14 96       	adiw	r26, 0x04	; 4
    4a52:	ed 91       	ld	r30, X+
    4a54:	fc 91       	ld	r31, X
    4a56:	15 97       	sbiw	r26, 0x05	; 5
    4a58:	93 81       	ldd	r25, Z+3	; 0x03
    4a5a:	82 81       	ldd	r24, Z+2	; 0x02
    4a5c:	98 17       	cp	r25, r24
    4a5e:	89 f0       	breq	.+34     	; 0x4a82 <serial_get_byte+0x34>
    4a60:	92 81       	ldd	r25, Z+2	; 0x02
    4a62:	85 81       	ldd	r24, Z+5	; 0x05
    4a64:	86 95       	lsr	r24
    4a66:	89 23       	and	r24, r25
    4a68:	a0 81       	ld	r26, Z
    4a6a:	b1 81       	ldd	r27, Z+1	; 0x01
    4a6c:	a8 0f       	add	r26, r24
    4a6e:	b1 1d       	adc	r27, r1
    4a70:	8c 91       	ld	r24, X
    4a72:	db 01       	movw	r26, r22
    4a74:	8c 93       	st	X, r24
    4a76:	9f 5f       	subi	r25, 0xFF	; 255
    4a78:	85 81       	ldd	r24, Z+5	; 0x05
    4a7a:	98 23       	and	r25, r24
    4a7c:	92 83       	std	Z+2, r25	; 0x02
    4a7e:	80 e0       	ldi	r24, 0x00	; 0
    4a80:	08 95       	ret
    4a82:	83 e0       	ldi	r24, 0x03	; 3
    4a84:	08 95       	ret

00004a86 <__vector_25>:
    4a86:	1f 92       	push	r1
    4a88:	0f 92       	push	r0
    4a8a:	0f b6       	in	r0, 0x3f	; 63
    4a8c:	0f 92       	push	r0
    4a8e:	11 24       	eor	r1, r1
    4a90:	0b b6       	in	r0, 0x3b	; 59
    4a92:	0f 92       	push	r0
    4a94:	2f 93       	push	r18
    4a96:	3f 93       	push	r19
    4a98:	4f 93       	push	r20
    4a9a:	5f 93       	push	r21
    4a9c:	6f 93       	push	r22
    4a9e:	7f 93       	push	r23
    4aa0:	8f 93       	push	r24
    4aa2:	9f 93       	push	r25
    4aa4:	af 93       	push	r26
    4aa6:	bf 93       	push	r27
    4aa8:	cf 93       	push	r28
    4aaa:	df 93       	push	r29
    4aac:	ef 93       	push	r30
    4aae:	ff 93       	push	r31
    4ab0:	a0 91 63 1a 	lds	r26, 0x1A63	; 0x801a63 <_ser_handle>
    4ab4:	b0 91 64 1a 	lds	r27, 0x1A64	; 0x801a64 <_ser_handle+0x1>
    4ab8:	10 97       	sbiw	r26, 0x00	; 0
    4aba:	11 f1       	breq	.+68     	; 0x4b00 <__vector_25+0x7a>
    4abc:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4ac0:	14 96       	adiw	r26, 0x04	; 4
    4ac2:	ed 91       	ld	r30, X+
    4ac4:	fc 91       	ld	r31, X
    4ac6:	15 97       	sbiw	r26, 0x05	; 5
    4ac8:	93 81       	ldd	r25, Z+3	; 0x03
    4aca:	82 81       	ldd	r24, Z+2	; 0x02
    4acc:	25 81       	ldd	r18, Z+5	; 0x05
    4ace:	98 1b       	sub	r25, r24
    4ad0:	92 23       	and	r25, r18
    4ad2:	84 81       	ldd	r24, Z+4	; 0x04
    4ad4:	98 17       	cp	r25, r24
    4ad6:	61 f0       	breq	.+24     	; 0x4af0 <__vector_25+0x6a>
    4ad8:	83 81       	ldd	r24, Z+3	; 0x03
    4ada:	26 95       	lsr	r18
    4adc:	28 23       	and	r18, r24
    4ade:	c0 81       	ld	r28, Z
    4ae0:	d1 81       	ldd	r29, Z+1	; 0x01
    4ae2:	c2 0f       	add	r28, r18
    4ae4:	d1 1d       	adc	r29, r1
    4ae6:	68 83       	st	Y, r22
    4ae8:	8f 5f       	subi	r24, 0xFF	; 255
    4aea:	95 81       	ldd	r25, Z+5	; 0x05
    4aec:	89 23       	and	r24, r25
    4aee:	83 83       	std	Z+3, r24	; 0x03
    4af0:	16 96       	adiw	r26, 0x06	; 6
    4af2:	ed 91       	ld	r30, X+
    4af4:	fc 91       	ld	r31, X
    4af6:	17 97       	sbiw	r26, 0x07	; 7
    4af8:	30 97       	sbiw	r30, 0x00	; 0
    4afa:	11 f0       	breq	.+4      	; 0x4b00 <__vector_25+0x7a>
    4afc:	cd 01       	movw	r24, r26
    4afe:	19 95       	eicall
    4b00:	ff 91       	pop	r31
    4b02:	ef 91       	pop	r30
    4b04:	df 91       	pop	r29
    4b06:	cf 91       	pop	r28
    4b08:	bf 91       	pop	r27
    4b0a:	af 91       	pop	r26
    4b0c:	9f 91       	pop	r25
    4b0e:	8f 91       	pop	r24
    4b10:	7f 91       	pop	r23
    4b12:	6f 91       	pop	r22
    4b14:	5f 91       	pop	r21
    4b16:	4f 91       	pop	r20
    4b18:	3f 91       	pop	r19
    4b1a:	2f 91       	pop	r18
    4b1c:	0f 90       	pop	r0
    4b1e:	0b be       	out	0x3b, r0	; 59
    4b20:	0f 90       	pop	r0
    4b22:	0f be       	out	0x3f, r0	; 63
    4b24:	0f 90       	pop	r0
    4b26:	1f 90       	pop	r1
    4b28:	18 95       	reti

00004b2a <__vector_26>:
    4b2a:	1f 92       	push	r1
    4b2c:	0f 92       	push	r0
    4b2e:	0f b6       	in	r0, 0x3f	; 63
    4b30:	0f 92       	push	r0
    4b32:	11 24       	eor	r1, r1
    4b34:	0b b6       	in	r0, 0x3b	; 59
    4b36:	0f 92       	push	r0
    4b38:	2f 93       	push	r18
    4b3a:	8f 93       	push	r24
    4b3c:	9f 93       	push	r25
    4b3e:	af 93       	push	r26
    4b40:	bf 93       	push	r27
    4b42:	ef 93       	push	r30
    4b44:	ff 93       	push	r31
    4b46:	e0 91 63 1a 	lds	r30, 0x1A63	; 0x801a63 <_ser_handle>
    4b4a:	f0 91 64 1a 	lds	r31, 0x1A64	; 0x801a64 <_ser_handle+0x1>
    4b4e:	30 97       	sbiw	r30, 0x00	; 0
    4b50:	b9 f0       	breq	.+46     	; 0x4b80 <__vector_26+0x56>
    4b52:	02 80       	ldd	r0, Z+2	; 0x02
    4b54:	f3 81       	ldd	r31, Z+3	; 0x03
    4b56:	e0 2d       	mov	r30, r0
    4b58:	93 81       	ldd	r25, Z+3	; 0x03
    4b5a:	82 81       	ldd	r24, Z+2	; 0x02
    4b5c:	98 17       	cp	r25, r24
    4b5e:	b1 f0       	breq	.+44     	; 0x4b8c <__vector_26+0x62>
    4b60:	92 81       	ldd	r25, Z+2	; 0x02
    4b62:	85 81       	ldd	r24, Z+5	; 0x05
    4b64:	28 2f       	mov	r18, r24
    4b66:	26 95       	lsr	r18
    4b68:	29 23       	and	r18, r25
    4b6a:	a0 81       	ld	r26, Z
    4b6c:	b1 81       	ldd	r27, Z+1	; 0x01
    4b6e:	a2 0f       	add	r26, r18
    4b70:	b1 1d       	adc	r27, r1
    4b72:	2c 91       	ld	r18, X
    4b74:	9f 5f       	subi	r25, 0xFF	; 255
    4b76:	89 23       	and	r24, r25
    4b78:	82 83       	std	Z+2, r24	; 0x02
    4b7a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4b7e:	0b c0       	rjmp	.+22     	; 0x4b96 <__vector_26+0x6c>
    4b80:	e1 ec       	ldi	r30, 0xC1	; 193
    4b82:	f0 e0       	ldi	r31, 0x00	; 0
    4b84:	80 81       	ld	r24, Z
    4b86:	8f 7d       	andi	r24, 0xDF	; 223
    4b88:	80 83       	st	Z, r24
    4b8a:	05 c0       	rjmp	.+10     	; 0x4b96 <__vector_26+0x6c>
    4b8c:	e1 ec       	ldi	r30, 0xC1	; 193
    4b8e:	f0 e0       	ldi	r31, 0x00	; 0
    4b90:	80 81       	ld	r24, Z
    4b92:	8f 7d       	andi	r24, 0xDF	; 223
    4b94:	80 83       	st	Z, r24
    4b96:	ff 91       	pop	r31
    4b98:	ef 91       	pop	r30
    4b9a:	bf 91       	pop	r27
    4b9c:	af 91       	pop	r26
    4b9e:	9f 91       	pop	r25
    4ba0:	8f 91       	pop	r24
    4ba2:	2f 91       	pop	r18
    4ba4:	0f 90       	pop	r0
    4ba6:	0b be       	out	0x3b, r0	; 59
    4ba8:	0f 90       	pop	r0
    4baa:	0f be       	out	0x3f, r0	; 63
    4bac:	0f 90       	pop	r0
    4bae:	1f 90       	pop	r1
    4bb0:	18 95       	reti

00004bb2 <__vector_36>:
    4bb2:	1f 92       	push	r1
    4bb4:	0f 92       	push	r0
    4bb6:	0f b6       	in	r0, 0x3f	; 63
    4bb8:	0f 92       	push	r0
    4bba:	11 24       	eor	r1, r1
    4bbc:	0b b6       	in	r0, 0x3b	; 59
    4bbe:	0f 92       	push	r0
    4bc0:	2f 93       	push	r18
    4bc2:	3f 93       	push	r19
    4bc4:	4f 93       	push	r20
    4bc6:	5f 93       	push	r21
    4bc8:	6f 93       	push	r22
    4bca:	7f 93       	push	r23
    4bcc:	8f 93       	push	r24
    4bce:	9f 93       	push	r25
    4bd0:	af 93       	push	r26
    4bd2:	bf 93       	push	r27
    4bd4:	cf 93       	push	r28
    4bd6:	df 93       	push	r29
    4bd8:	ef 93       	push	r30
    4bda:	ff 93       	push	r31
    4bdc:	a0 91 65 1a 	lds	r26, 0x1A65	; 0x801a65 <_ser_handle+0x2>
    4be0:	b0 91 66 1a 	lds	r27, 0x1A66	; 0x801a66 <_ser_handle+0x3>
    4be4:	10 97       	sbiw	r26, 0x00	; 0
    4be6:	11 f1       	breq	.+68     	; 0x4c2c <__vector_36+0x7a>
    4be8:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4bec:	14 96       	adiw	r26, 0x04	; 4
    4bee:	ed 91       	ld	r30, X+
    4bf0:	fc 91       	ld	r31, X
    4bf2:	15 97       	sbiw	r26, 0x05	; 5
    4bf4:	93 81       	ldd	r25, Z+3	; 0x03
    4bf6:	82 81       	ldd	r24, Z+2	; 0x02
    4bf8:	25 81       	ldd	r18, Z+5	; 0x05
    4bfa:	98 1b       	sub	r25, r24
    4bfc:	92 23       	and	r25, r18
    4bfe:	84 81       	ldd	r24, Z+4	; 0x04
    4c00:	98 17       	cp	r25, r24
    4c02:	61 f0       	breq	.+24     	; 0x4c1c <__vector_36+0x6a>
    4c04:	83 81       	ldd	r24, Z+3	; 0x03
    4c06:	26 95       	lsr	r18
    4c08:	28 23       	and	r18, r24
    4c0a:	c0 81       	ld	r28, Z
    4c0c:	d1 81       	ldd	r29, Z+1	; 0x01
    4c0e:	c2 0f       	add	r28, r18
    4c10:	d1 1d       	adc	r29, r1
    4c12:	68 83       	st	Y, r22
    4c14:	8f 5f       	subi	r24, 0xFF	; 255
    4c16:	95 81       	ldd	r25, Z+5	; 0x05
    4c18:	89 23       	and	r24, r25
    4c1a:	83 83       	std	Z+3, r24	; 0x03
    4c1c:	16 96       	adiw	r26, 0x06	; 6
    4c1e:	ed 91       	ld	r30, X+
    4c20:	fc 91       	ld	r31, X
    4c22:	17 97       	sbiw	r26, 0x07	; 7
    4c24:	30 97       	sbiw	r30, 0x00	; 0
    4c26:	11 f0       	breq	.+4      	; 0x4c2c <__vector_36+0x7a>
    4c28:	cd 01       	movw	r24, r26
    4c2a:	19 95       	eicall
    4c2c:	ff 91       	pop	r31
    4c2e:	ef 91       	pop	r30
    4c30:	df 91       	pop	r29
    4c32:	cf 91       	pop	r28
    4c34:	bf 91       	pop	r27
    4c36:	af 91       	pop	r26
    4c38:	9f 91       	pop	r25
    4c3a:	8f 91       	pop	r24
    4c3c:	7f 91       	pop	r23
    4c3e:	6f 91       	pop	r22
    4c40:	5f 91       	pop	r21
    4c42:	4f 91       	pop	r20
    4c44:	3f 91       	pop	r19
    4c46:	2f 91       	pop	r18
    4c48:	0f 90       	pop	r0
    4c4a:	0b be       	out	0x3b, r0	; 59
    4c4c:	0f 90       	pop	r0
    4c4e:	0f be       	out	0x3f, r0	; 63
    4c50:	0f 90       	pop	r0
    4c52:	1f 90       	pop	r1
    4c54:	18 95       	reti

00004c56 <__vector_37>:
    4c56:	1f 92       	push	r1
    4c58:	0f 92       	push	r0
    4c5a:	0f b6       	in	r0, 0x3f	; 63
    4c5c:	0f 92       	push	r0
    4c5e:	11 24       	eor	r1, r1
    4c60:	0b b6       	in	r0, 0x3b	; 59
    4c62:	0f 92       	push	r0
    4c64:	2f 93       	push	r18
    4c66:	8f 93       	push	r24
    4c68:	9f 93       	push	r25
    4c6a:	af 93       	push	r26
    4c6c:	bf 93       	push	r27
    4c6e:	ef 93       	push	r30
    4c70:	ff 93       	push	r31
    4c72:	e0 91 65 1a 	lds	r30, 0x1A65	; 0x801a65 <_ser_handle+0x2>
    4c76:	f0 91 66 1a 	lds	r31, 0x1A66	; 0x801a66 <_ser_handle+0x3>
    4c7a:	30 97       	sbiw	r30, 0x00	; 0
    4c7c:	b9 f0       	breq	.+46     	; 0x4cac <__vector_37+0x56>
    4c7e:	02 80       	ldd	r0, Z+2	; 0x02
    4c80:	f3 81       	ldd	r31, Z+3	; 0x03
    4c82:	e0 2d       	mov	r30, r0
    4c84:	93 81       	ldd	r25, Z+3	; 0x03
    4c86:	82 81       	ldd	r24, Z+2	; 0x02
    4c88:	98 17       	cp	r25, r24
    4c8a:	b1 f0       	breq	.+44     	; 0x4cb8 <__vector_37+0x62>
    4c8c:	92 81       	ldd	r25, Z+2	; 0x02
    4c8e:	85 81       	ldd	r24, Z+5	; 0x05
    4c90:	28 2f       	mov	r18, r24
    4c92:	26 95       	lsr	r18
    4c94:	29 23       	and	r18, r25
    4c96:	a0 81       	ld	r26, Z
    4c98:	b1 81       	ldd	r27, Z+1	; 0x01
    4c9a:	a2 0f       	add	r26, r18
    4c9c:	b1 1d       	adc	r27, r1
    4c9e:	2c 91       	ld	r18, X
    4ca0:	9f 5f       	subi	r25, 0xFF	; 255
    4ca2:	89 23       	and	r24, r25
    4ca4:	82 83       	std	Z+2, r24	; 0x02
    4ca6:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4caa:	0b c0       	rjmp	.+22     	; 0x4cc2 <__vector_37+0x6c>
    4cac:	e9 ec       	ldi	r30, 0xC9	; 201
    4cae:	f0 e0       	ldi	r31, 0x00	; 0
    4cb0:	80 81       	ld	r24, Z
    4cb2:	8f 7d       	andi	r24, 0xDF	; 223
    4cb4:	80 83       	st	Z, r24
    4cb6:	05 c0       	rjmp	.+10     	; 0x4cc2 <__vector_37+0x6c>
    4cb8:	e9 ec       	ldi	r30, 0xC9	; 201
    4cba:	f0 e0       	ldi	r31, 0x00	; 0
    4cbc:	80 81       	ld	r24, Z
    4cbe:	8f 7d       	andi	r24, 0xDF	; 223
    4cc0:	80 83       	st	Z, r24
    4cc2:	ff 91       	pop	r31
    4cc4:	ef 91       	pop	r30
    4cc6:	bf 91       	pop	r27
    4cc8:	af 91       	pop	r26
    4cca:	9f 91       	pop	r25
    4ccc:	8f 91       	pop	r24
    4cce:	2f 91       	pop	r18
    4cd0:	0f 90       	pop	r0
    4cd2:	0b be       	out	0x3b, r0	; 59
    4cd4:	0f 90       	pop	r0
    4cd6:	0f be       	out	0x3f, r0	; 63
    4cd8:	0f 90       	pop	r0
    4cda:	1f 90       	pop	r1
    4cdc:	18 95       	reti

00004cde <__vector_51>:
    4cde:	1f 92       	push	r1
    4ce0:	0f 92       	push	r0
    4ce2:	0f b6       	in	r0, 0x3f	; 63
    4ce4:	0f 92       	push	r0
    4ce6:	11 24       	eor	r1, r1
    4ce8:	0b b6       	in	r0, 0x3b	; 59
    4cea:	0f 92       	push	r0
    4cec:	2f 93       	push	r18
    4cee:	3f 93       	push	r19
    4cf0:	4f 93       	push	r20
    4cf2:	5f 93       	push	r21
    4cf4:	6f 93       	push	r22
    4cf6:	7f 93       	push	r23
    4cf8:	8f 93       	push	r24
    4cfa:	9f 93       	push	r25
    4cfc:	af 93       	push	r26
    4cfe:	bf 93       	push	r27
    4d00:	cf 93       	push	r28
    4d02:	df 93       	push	r29
    4d04:	ef 93       	push	r30
    4d06:	ff 93       	push	r31
    4d08:	a0 91 67 1a 	lds	r26, 0x1A67	; 0x801a67 <_ser_handle+0x4>
    4d0c:	b0 91 68 1a 	lds	r27, 0x1A68	; 0x801a68 <_ser_handle+0x5>
    4d10:	10 97       	sbiw	r26, 0x00	; 0
    4d12:	11 f1       	breq	.+68     	; 0x4d58 <__vector_51+0x7a>
    4d14:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4d18:	14 96       	adiw	r26, 0x04	; 4
    4d1a:	ed 91       	ld	r30, X+
    4d1c:	fc 91       	ld	r31, X
    4d1e:	15 97       	sbiw	r26, 0x05	; 5
    4d20:	93 81       	ldd	r25, Z+3	; 0x03
    4d22:	82 81       	ldd	r24, Z+2	; 0x02
    4d24:	25 81       	ldd	r18, Z+5	; 0x05
    4d26:	98 1b       	sub	r25, r24
    4d28:	92 23       	and	r25, r18
    4d2a:	84 81       	ldd	r24, Z+4	; 0x04
    4d2c:	98 17       	cp	r25, r24
    4d2e:	61 f0       	breq	.+24     	; 0x4d48 <__vector_51+0x6a>
    4d30:	83 81       	ldd	r24, Z+3	; 0x03
    4d32:	26 95       	lsr	r18
    4d34:	28 23       	and	r18, r24
    4d36:	c0 81       	ld	r28, Z
    4d38:	d1 81       	ldd	r29, Z+1	; 0x01
    4d3a:	c2 0f       	add	r28, r18
    4d3c:	d1 1d       	adc	r29, r1
    4d3e:	68 83       	st	Y, r22
    4d40:	8f 5f       	subi	r24, 0xFF	; 255
    4d42:	95 81       	ldd	r25, Z+5	; 0x05
    4d44:	89 23       	and	r24, r25
    4d46:	83 83       	std	Z+3, r24	; 0x03
    4d48:	16 96       	adiw	r26, 0x06	; 6
    4d4a:	ed 91       	ld	r30, X+
    4d4c:	fc 91       	ld	r31, X
    4d4e:	17 97       	sbiw	r26, 0x07	; 7
    4d50:	30 97       	sbiw	r30, 0x00	; 0
    4d52:	11 f0       	breq	.+4      	; 0x4d58 <__vector_51+0x7a>
    4d54:	cd 01       	movw	r24, r26
    4d56:	19 95       	eicall
    4d58:	ff 91       	pop	r31
    4d5a:	ef 91       	pop	r30
    4d5c:	df 91       	pop	r29
    4d5e:	cf 91       	pop	r28
    4d60:	bf 91       	pop	r27
    4d62:	af 91       	pop	r26
    4d64:	9f 91       	pop	r25
    4d66:	8f 91       	pop	r24
    4d68:	7f 91       	pop	r23
    4d6a:	6f 91       	pop	r22
    4d6c:	5f 91       	pop	r21
    4d6e:	4f 91       	pop	r20
    4d70:	3f 91       	pop	r19
    4d72:	2f 91       	pop	r18
    4d74:	0f 90       	pop	r0
    4d76:	0b be       	out	0x3b, r0	; 59
    4d78:	0f 90       	pop	r0
    4d7a:	0f be       	out	0x3f, r0	; 63
    4d7c:	0f 90       	pop	r0
    4d7e:	1f 90       	pop	r1
    4d80:	18 95       	reti

00004d82 <__vector_52>:
    4d82:	1f 92       	push	r1
    4d84:	0f 92       	push	r0
    4d86:	0f b6       	in	r0, 0x3f	; 63
    4d88:	0f 92       	push	r0
    4d8a:	11 24       	eor	r1, r1
    4d8c:	0b b6       	in	r0, 0x3b	; 59
    4d8e:	0f 92       	push	r0
    4d90:	2f 93       	push	r18
    4d92:	8f 93       	push	r24
    4d94:	9f 93       	push	r25
    4d96:	af 93       	push	r26
    4d98:	bf 93       	push	r27
    4d9a:	ef 93       	push	r30
    4d9c:	ff 93       	push	r31
    4d9e:	e0 91 67 1a 	lds	r30, 0x1A67	; 0x801a67 <_ser_handle+0x4>
    4da2:	f0 91 68 1a 	lds	r31, 0x1A68	; 0x801a68 <_ser_handle+0x5>
    4da6:	30 97       	sbiw	r30, 0x00	; 0
    4da8:	b9 f0       	breq	.+46     	; 0x4dd8 <__vector_52+0x56>
    4daa:	02 80       	ldd	r0, Z+2	; 0x02
    4dac:	f3 81       	ldd	r31, Z+3	; 0x03
    4dae:	e0 2d       	mov	r30, r0
    4db0:	93 81       	ldd	r25, Z+3	; 0x03
    4db2:	82 81       	ldd	r24, Z+2	; 0x02
    4db4:	98 17       	cp	r25, r24
    4db6:	b1 f0       	breq	.+44     	; 0x4de4 <__vector_52+0x62>
    4db8:	92 81       	ldd	r25, Z+2	; 0x02
    4dba:	85 81       	ldd	r24, Z+5	; 0x05
    4dbc:	28 2f       	mov	r18, r24
    4dbe:	26 95       	lsr	r18
    4dc0:	29 23       	and	r18, r25
    4dc2:	a0 81       	ld	r26, Z
    4dc4:	b1 81       	ldd	r27, Z+1	; 0x01
    4dc6:	a2 0f       	add	r26, r18
    4dc8:	b1 1d       	adc	r27, r1
    4dca:	2c 91       	ld	r18, X
    4dcc:	9f 5f       	subi	r25, 0xFF	; 255
    4dce:	89 23       	and	r24, r25
    4dd0:	82 83       	std	Z+2, r24	; 0x02
    4dd2:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4dd6:	0b c0       	rjmp	.+22     	; 0x4dee <__vector_52+0x6c>
    4dd8:	e1 ed       	ldi	r30, 0xD1	; 209
    4dda:	f0 e0       	ldi	r31, 0x00	; 0
    4ddc:	80 81       	ld	r24, Z
    4dde:	8f 7d       	andi	r24, 0xDF	; 223
    4de0:	80 83       	st	Z, r24
    4de2:	05 c0       	rjmp	.+10     	; 0x4dee <__vector_52+0x6c>
    4de4:	e1 ed       	ldi	r30, 0xD1	; 209
    4de6:	f0 e0       	ldi	r31, 0x00	; 0
    4de8:	80 81       	ld	r24, Z
    4dea:	8f 7d       	andi	r24, 0xDF	; 223
    4dec:	80 83       	st	Z, r24
    4dee:	ff 91       	pop	r31
    4df0:	ef 91       	pop	r30
    4df2:	bf 91       	pop	r27
    4df4:	af 91       	pop	r26
    4df6:	9f 91       	pop	r25
    4df8:	8f 91       	pop	r24
    4dfa:	2f 91       	pop	r18
    4dfc:	0f 90       	pop	r0
    4dfe:	0b be       	out	0x3b, r0	; 59
    4e00:	0f 90       	pop	r0
    4e02:	0f be       	out	0x3f, r0	; 63
    4e04:	0f 90       	pop	r0
    4e06:	1f 90       	pop	r1
    4e08:	18 95       	reti

00004e0a <__vector_54>:
    4e0a:	1f 92       	push	r1
    4e0c:	0f 92       	push	r0
    4e0e:	0f b6       	in	r0, 0x3f	; 63
    4e10:	0f 92       	push	r0
    4e12:	11 24       	eor	r1, r1
    4e14:	0b b6       	in	r0, 0x3b	; 59
    4e16:	0f 92       	push	r0
    4e18:	2f 93       	push	r18
    4e1a:	3f 93       	push	r19
    4e1c:	4f 93       	push	r20
    4e1e:	5f 93       	push	r21
    4e20:	6f 93       	push	r22
    4e22:	7f 93       	push	r23
    4e24:	8f 93       	push	r24
    4e26:	9f 93       	push	r25
    4e28:	af 93       	push	r26
    4e2a:	bf 93       	push	r27
    4e2c:	cf 93       	push	r28
    4e2e:	df 93       	push	r29
    4e30:	ef 93       	push	r30
    4e32:	ff 93       	push	r31
    4e34:	a0 91 69 1a 	lds	r26, 0x1A69	; 0x801a69 <_ser_handle+0x6>
    4e38:	b0 91 6a 1a 	lds	r27, 0x1A6A	; 0x801a6a <_ser_handle+0x7>
    4e3c:	10 97       	sbiw	r26, 0x00	; 0
    4e3e:	11 f1       	breq	.+68     	; 0x4e84 <__vector_54+0x7a>
    4e40:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4e44:	14 96       	adiw	r26, 0x04	; 4
    4e46:	ed 91       	ld	r30, X+
    4e48:	fc 91       	ld	r31, X
    4e4a:	15 97       	sbiw	r26, 0x05	; 5
    4e4c:	93 81       	ldd	r25, Z+3	; 0x03
    4e4e:	82 81       	ldd	r24, Z+2	; 0x02
    4e50:	25 81       	ldd	r18, Z+5	; 0x05
    4e52:	98 1b       	sub	r25, r24
    4e54:	92 23       	and	r25, r18
    4e56:	84 81       	ldd	r24, Z+4	; 0x04
    4e58:	98 17       	cp	r25, r24
    4e5a:	61 f0       	breq	.+24     	; 0x4e74 <__vector_54+0x6a>
    4e5c:	83 81       	ldd	r24, Z+3	; 0x03
    4e5e:	26 95       	lsr	r18
    4e60:	28 23       	and	r18, r24
    4e62:	c0 81       	ld	r28, Z
    4e64:	d1 81       	ldd	r29, Z+1	; 0x01
    4e66:	c2 0f       	add	r28, r18
    4e68:	d1 1d       	adc	r29, r1
    4e6a:	68 83       	st	Y, r22
    4e6c:	8f 5f       	subi	r24, 0xFF	; 255
    4e6e:	95 81       	ldd	r25, Z+5	; 0x05
    4e70:	89 23       	and	r24, r25
    4e72:	83 83       	std	Z+3, r24	; 0x03
    4e74:	16 96       	adiw	r26, 0x06	; 6
    4e76:	ed 91       	ld	r30, X+
    4e78:	fc 91       	ld	r31, X
    4e7a:	17 97       	sbiw	r26, 0x07	; 7
    4e7c:	30 97       	sbiw	r30, 0x00	; 0
    4e7e:	11 f0       	breq	.+4      	; 0x4e84 <__vector_54+0x7a>
    4e80:	cd 01       	movw	r24, r26
    4e82:	19 95       	eicall
    4e84:	ff 91       	pop	r31
    4e86:	ef 91       	pop	r30
    4e88:	df 91       	pop	r29
    4e8a:	cf 91       	pop	r28
    4e8c:	bf 91       	pop	r27
    4e8e:	af 91       	pop	r26
    4e90:	9f 91       	pop	r25
    4e92:	8f 91       	pop	r24
    4e94:	7f 91       	pop	r23
    4e96:	6f 91       	pop	r22
    4e98:	5f 91       	pop	r21
    4e9a:	4f 91       	pop	r20
    4e9c:	3f 91       	pop	r19
    4e9e:	2f 91       	pop	r18
    4ea0:	0f 90       	pop	r0
    4ea2:	0b be       	out	0x3b, r0	; 59
    4ea4:	0f 90       	pop	r0
    4ea6:	0f be       	out	0x3f, r0	; 63
    4ea8:	0f 90       	pop	r0
    4eaa:	1f 90       	pop	r1
    4eac:	18 95       	reti

00004eae <__vector_55>:
    4eae:	1f 92       	push	r1
    4eb0:	0f 92       	push	r0
    4eb2:	0f b6       	in	r0, 0x3f	; 63
    4eb4:	0f 92       	push	r0
    4eb6:	11 24       	eor	r1, r1
    4eb8:	0b b6       	in	r0, 0x3b	; 59
    4eba:	0f 92       	push	r0
    4ebc:	2f 93       	push	r18
    4ebe:	8f 93       	push	r24
    4ec0:	9f 93       	push	r25
    4ec2:	af 93       	push	r26
    4ec4:	bf 93       	push	r27
    4ec6:	ef 93       	push	r30
    4ec8:	ff 93       	push	r31
    4eca:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <_ser_handle+0x6>
    4ece:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <_ser_handle+0x7>
    4ed2:	30 97       	sbiw	r30, 0x00	; 0
    4ed4:	b9 f0       	breq	.+46     	; 0x4f04 <__vector_55+0x56>
    4ed6:	02 80       	ldd	r0, Z+2	; 0x02
    4ed8:	f3 81       	ldd	r31, Z+3	; 0x03
    4eda:	e0 2d       	mov	r30, r0
    4edc:	93 81       	ldd	r25, Z+3	; 0x03
    4ede:	82 81       	ldd	r24, Z+2	; 0x02
    4ee0:	98 17       	cp	r25, r24
    4ee2:	b1 f0       	breq	.+44     	; 0x4f10 <__vector_55+0x62>
    4ee4:	92 81       	ldd	r25, Z+2	; 0x02
    4ee6:	85 81       	ldd	r24, Z+5	; 0x05
    4ee8:	28 2f       	mov	r18, r24
    4eea:	26 95       	lsr	r18
    4eec:	29 23       	and	r18, r25
    4eee:	a0 81       	ld	r26, Z
    4ef0:	b1 81       	ldd	r27, Z+1	; 0x01
    4ef2:	a2 0f       	add	r26, r18
    4ef4:	b1 1d       	adc	r27, r1
    4ef6:	2c 91       	ld	r18, X
    4ef8:	9f 5f       	subi	r25, 0xFF	; 255
    4efa:	89 23       	and	r24, r25
    4efc:	82 83       	std	Z+2, r24	; 0x02
    4efe:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4f02:	0b c0       	rjmp	.+22     	; 0x4f1a <__vector_55+0x6c>
    4f04:	e1 e3       	ldi	r30, 0x31	; 49
    4f06:	f1 e0       	ldi	r31, 0x01	; 1
    4f08:	80 81       	ld	r24, Z
    4f0a:	8f 7d       	andi	r24, 0xDF	; 223
    4f0c:	80 83       	st	Z, r24
    4f0e:	05 c0       	rjmp	.+10     	; 0x4f1a <__vector_55+0x6c>
    4f10:	e1 e3       	ldi	r30, 0x31	; 49
    4f12:	f1 e0       	ldi	r31, 0x01	; 1
    4f14:	80 81       	ld	r24, Z
    4f16:	8f 7d       	andi	r24, 0xDF	; 223
    4f18:	80 83       	st	Z, r24
    4f1a:	ff 91       	pop	r31
    4f1c:	ef 91       	pop	r30
    4f1e:	bf 91       	pop	r27
    4f20:	af 91       	pop	r26
    4f22:	9f 91       	pop	r25
    4f24:	8f 91       	pop	r24
    4f26:	2f 91       	pop	r18
    4f28:	0f 90       	pop	r0
    4f2a:	0b be       	out	0x3b, r0	; 59
    4f2c:	0f 90       	pop	r0
    4f2e:	0f be       	out	0x3f, r0	; 63
    4f30:	0f 90       	pop	r0
    4f32:	1f 90       	pop	r1
    4f34:	18 95       	reti

00004f36 <usart_getchar>:
    4f36:	cf 93       	push	r28
    4f38:	df 93       	push	r29
    4f3a:	1f 92       	push	r1
    4f3c:	cd b7       	in	r28, 0x3d	; 61
    4f3e:	de b7       	in	r29, 0x3e	; 62
    4f40:	be 01       	movw	r22, r28
    4f42:	6f 5f       	subi	r22, 0xFF	; 255
    4f44:	7f 4f       	sbci	r23, 0xFF	; 255
    4f46:	80 91 6b 1a 	lds	r24, 0x1A6B	; 0x801a6b <_com_serial_instance>
    4f4a:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <_com_serial_instance+0x1>
    4f4e:	7f dd       	rcall	.-1282   	; 0x4a4e <serial_get_byte>
    4f50:	81 11       	cpse	r24, r1
    4f52:	f6 cf       	rjmp	.-20     	; 0x4f40 <usart_getchar+0xa>
    4f54:	89 81       	ldd	r24, Y+1	; 0x01
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	0f 90       	pop	r0
    4f5a:	df 91       	pop	r29
    4f5c:	cf 91       	pop	r28
    4f5e:	08 95       	ret

00004f60 <usart_putchar>:
    4f60:	68 2f       	mov	r22, r24
    4f62:	80 91 6b 1a 	lds	r24, 0x1A6B	; 0x801a6b <_com_serial_instance>
    4f66:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <_com_serial_instance+0x1>
    4f6a:	fc dc       	rcall	.-1544   	; 0x4964 <serial_send_byte>
    4f6c:	80 e0       	ldi	r24, 0x00	; 0
    4f6e:	90 e0       	ldi	r25, 0x00	; 0
    4f70:	08 95       	ret

00004f72 <stdioCreate>:
    4f72:	8f 92       	push	r8
    4f74:	9f 92       	push	r9
    4f76:	af 92       	push	r10
    4f78:	cf 92       	push	r12
    4f7a:	ef 92       	push	r14
    4f7c:	0f 93       	push	r16
    4f7e:	81 2c       	mov	r8, r1
    4f80:	91 2c       	mov	r9, r1
    4f82:	68 94       	set
    4f84:	aa 24       	eor	r10, r10
    4f86:	a7 f8       	bld	r10, 7
    4f88:	68 94       	set
    4f8a:	cc 24       	eor	r12, r12
    4f8c:	c7 f8       	bld	r12, 7
    4f8e:	e1 2c       	mov	r14, r1
    4f90:	00 e0       	ldi	r16, 0x00	; 0
    4f92:	23 e0       	ldi	r18, 0x03	; 3
    4f94:	40 e0       	ldi	r20, 0x00	; 0
    4f96:	51 ee       	ldi	r21, 0xE1	; 225
    4f98:	60 e0       	ldi	r22, 0x00	; 0
    4f9a:	70 e0       	ldi	r23, 0x00	; 0
    4f9c:	4c dc       	rcall	.-1896   	; 0x4836 <serial_new_instance>
    4f9e:	90 93 6c 1a 	sts	0x1A6C, r25	; 0x801a6c <_com_serial_instance+0x1>
    4fa2:	80 93 6b 1a 	sts	0x1A6B, r24	; 0x801a6b <_com_serial_instance>
    4fa6:	ed ea       	ldi	r30, 0xAD	; 173
    4fa8:	fa e1       	ldi	r31, 0x1A	; 26
    4faa:	82 e1       	ldi	r24, 0x12	; 18
    4fac:	92 e0       	ldi	r25, 0x02	; 2
    4fae:	91 83       	std	Z+1, r25	; 0x01
    4fb0:	80 83       	st	Z, r24
    4fb2:	93 83       	std	Z+3, r25	; 0x03
    4fb4:	82 83       	std	Z+2, r24	; 0x02
    4fb6:	0f 91       	pop	r16
    4fb8:	ef 90       	pop	r14
    4fba:	cf 90       	pop	r12
    4fbc:	af 90       	pop	r10
    4fbe:	9f 90       	pop	r9
    4fc0:	8f 90       	pop	r8
    4fc2:	08 95       	ret

00004fc4 <_initTwiInterface>:
    4fc4:	80 91 7b 1a 	lds	r24, 0x1A7B	; 0x801a7b <_twiIsInitiated>
    4fc8:	81 11       	cpse	r24, r1
    4fca:	0c c0       	rjmp	.+24     	; 0x4fe4 <_initTwiInterface+0x20>
    4fcc:	8c e0       	ldi	r24, 0x0C	; 12
    4fce:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4fd2:	8f ef       	ldi	r24, 0xFF	; 255
    4fd4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4fd8:	84 e0       	ldi	r24, 0x04	; 4
    4fda:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4fde:	81 e0       	ldi	r24, 0x01	; 1
    4fe0:	80 93 7b 1a 	sts	0x1A7B, r24	; 0x801a7b <_twiIsInitiated>
    4fe4:	08 95       	ret

00004fe6 <twiCreate>:
    4fe6:	af 92       	push	r10
    4fe8:	bf 92       	push	r11
    4fea:	cf 92       	push	r12
    4fec:	df 92       	push	r13
    4fee:	ef 92       	push	r14
    4ff0:	ff 92       	push	r15
    4ff2:	0f 93       	push	r16
    4ff4:	1f 93       	push	r17
    4ff6:	cf 93       	push	r28
    4ff8:	df 93       	push	r29
    4ffa:	a8 2e       	mov	r10, r24
    4ffc:	b6 2e       	mov	r11, r22
    4ffe:	69 01       	movw	r12, r18
    5000:	7a 01       	movw	r14, r20
    5002:	84 e0       	ldi	r24, 0x04	; 4
    5004:	90 e0       	ldi	r25, 0x00	; 0
    5006:	79 d3       	rcall	.+1778   	; 0x56fa <malloc>
    5008:	ec 01       	movw	r28, r24
    500a:	89 2b       	or	r24, r25
    500c:	61 f1       	breq	.+88     	; 0x5066 <twiCreate+0x80>
    500e:	a8 82       	st	Y, r10
    5010:	81 e0       	ldi	r24, 0x01	; 1
    5012:	b8 12       	cpse	r11, r24
    5014:	12 c0       	rjmp	.+36     	; 0x503a <twiCreate+0x54>
    5016:	c7 01       	movw	r24, r14
    5018:	b6 01       	movw	r22, r12
    501a:	20 ea       	ldi	r18, 0xA0	; 160
    501c:	36 e8       	ldi	r19, 0x86	; 134
    501e:	41 e0       	ldi	r20, 0x01	; 1
    5020:	50 e0       	ldi	r21, 0x00	; 0
    5022:	27 d3       	rcall	.+1614   	; 0x5672 <__udivmodsi4>
    5024:	da 01       	movw	r26, r20
    5026:	c9 01       	movw	r24, r18
    5028:	40 97       	sbiw	r24, 0x10	; 16
    502a:	a1 09       	sbc	r26, r1
    502c:	b1 09       	sbc	r27, r1
    502e:	b6 95       	lsr	r27
    5030:	a7 95       	ror	r26
    5032:	97 95       	ror	r25
    5034:	87 95       	ror	r24
    5036:	89 83       	std	Y+1, r24	; 0x01
    5038:	11 c0       	rjmp	.+34     	; 0x505c <twiCreate+0x76>
    503a:	c7 01       	movw	r24, r14
    503c:	b6 01       	movw	r22, r12
    503e:	20 e8       	ldi	r18, 0x80	; 128
    5040:	3a e1       	ldi	r19, 0x1A	; 26
    5042:	46 e0       	ldi	r20, 0x06	; 6
    5044:	50 e0       	ldi	r21, 0x00	; 0
    5046:	15 d3       	rcall	.+1578   	; 0x5672 <__udivmodsi4>
    5048:	da 01       	movw	r26, r20
    504a:	c9 01       	movw	r24, r18
    504c:	40 97       	sbiw	r24, 0x10	; 16
    504e:	a1 09       	sbc	r26, r1
    5050:	b1 09       	sbc	r27, r1
    5052:	b6 95       	lsr	r27
    5054:	a7 95       	ror	r26
    5056:	97 95       	ror	r25
    5058:	87 95       	ror	r24
    505a:	89 83       	std	Y+1, r24	; 0x01
    505c:	1b 83       	std	Y+3, r17	; 0x03
    505e:	0a 83       	std	Y+2, r16	; 0x02
    5060:	8c 2f       	mov	r24, r28
    5062:	9d 2f       	mov	r25, r29
    5064:	02 c0       	rjmp	.+4      	; 0x506a <twiCreate+0x84>
    5066:	80 e0       	ldi	r24, 0x00	; 0
    5068:	90 e0       	ldi	r25, 0x00	; 0
    506a:	df 91       	pop	r29
    506c:	cf 91       	pop	r28
    506e:	1f 91       	pop	r17
    5070:	0f 91       	pop	r16
    5072:	ff 90       	pop	r15
    5074:	ef 90       	pop	r14
    5076:	df 90       	pop	r13
    5078:	cf 90       	pop	r12
    507a:	bf 90       	pop	r11
    507c:	af 90       	pop	r10
    507e:	08 95       	ret

00005080 <twiIsBusy>:
    5080:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5084:	81 70       	andi	r24, 0x01	; 1
    5086:	08 95       	ret

00005088 <twiTransmit>:
    5088:	ff 92       	push	r15
    508a:	0f 93       	push	r16
    508c:	1f 93       	push	r17
    508e:	cf 93       	push	r28
    5090:	df 93       	push	r29
    5092:	00 97       	sbiw	r24, 0x00	; 0
    5094:	d1 f1       	breq	.+116    	; 0x510a <twiTransmit+0x82>
    5096:	4a 30       	cpi	r20, 0x0A	; 10
    5098:	d0 f5       	brcc	.+116    	; 0x510e <twiTransmit+0x86>
    509a:	f4 2e       	mov	r15, r20
    509c:	8b 01       	movw	r16, r22
    509e:	ec 01       	movw	r28, r24
    50a0:	ef df       	rcall	.-34     	; 0x5080 <twiIsBusy>
    50a2:	81 11       	cpse	r24, r1
    50a4:	36 c0       	rjmp	.+108    	; 0x5112 <twiTransmit+0x8a>
    50a6:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <_twiCurrentHandler>
    50aa:	90 91 6f 1a 	lds	r25, 0x1A6F	; 0x801a6f <_twiCurrentHandler+0x1>
    50ae:	c8 17       	cp	r28, r24
    50b0:	d9 07       	cpc	r29, r25
    50b2:	41 f0       	breq	.+16     	; 0x50c4 <twiTransmit+0x3c>
    50b4:	87 df       	rcall	.-242    	; 0x4fc4 <_initTwiInterface>
    50b6:	89 81       	ldd	r24, Y+1	; 0x01
    50b8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    50bc:	d0 93 6f 1a 	sts	0x1A6F, r29	; 0x801a6f <_twiCurrentHandler+0x1>
    50c0:	c0 93 6e 1a 	sts	0x1A6E, r28	; 0x801a6e <_twiCurrentHandler>
    50c4:	81 e0       	ldi	r24, 0x01	; 1
    50c6:	8f 0d       	add	r24, r15
    50c8:	80 93 70 1a 	sts	0x1A70, r24	; 0x801a70 <_twiMessageLen>
    50cc:	88 81       	ld	r24, Y
    50ce:	88 0f       	add	r24, r24
    50d0:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <_twiMessageBuffer>
    50d4:	ff 20       	and	r15, r15
    50d6:	89 f0       	breq	.+34     	; 0x50fa <twiTransmit+0x72>
    50d8:	f8 01       	movw	r30, r16
    50da:	a2 e7       	ldi	r26, 0x72	; 114
    50dc:	ba e1       	ldi	r27, 0x1A	; 26
    50de:	4f ef       	ldi	r20, 0xFF	; 255
    50e0:	4f 0d       	add	r20, r15
    50e2:	64 2f       	mov	r22, r20
    50e4:	70 e0       	ldi	r23, 0x00	; 0
    50e6:	cb 01       	movw	r24, r22
    50e8:	01 96       	adiw	r24, 0x01	; 1
    50ea:	b8 01       	movw	r22, r16
    50ec:	68 0f       	add	r22, r24
    50ee:	79 1f       	adc	r23, r25
    50f0:	81 91       	ld	r24, Z+
    50f2:	8d 93       	st	X+, r24
    50f4:	e6 17       	cp	r30, r22
    50f6:	f7 07       	cpc	r31, r23
    50f8:	d9 f7       	brne	.-10     	; 0x50f0 <twiTransmit+0x68>
    50fa:	88 ef       	ldi	r24, 0xF8	; 248
    50fc:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    5100:	85 ea       	ldi	r24, 0xA5	; 165
    5102:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5106:	84 e0       	ldi	r24, 0x04	; 4
    5108:	05 c0       	rjmp	.+10     	; 0x5114 <twiTransmit+0x8c>
    510a:	86 e0       	ldi	r24, 0x06	; 6
    510c:	03 c0       	rjmp	.+6      	; 0x5114 <twiTransmit+0x8c>
    510e:	87 e0       	ldi	r24, 0x07	; 7
    5110:	01 c0       	rjmp	.+2      	; 0x5114 <twiTransmit+0x8c>
    5112:	82 e0       	ldi	r24, 0x02	; 2
    5114:	df 91       	pop	r29
    5116:	cf 91       	pop	r28
    5118:	1f 91       	pop	r17
    511a:	0f 91       	pop	r16
    511c:	ff 90       	pop	r15
    511e:	08 95       	ret

00005120 <twiReceive>:
    5120:	1f 93       	push	r17
    5122:	cf 93       	push	r28
    5124:	df 93       	push	r29
    5126:	00 97       	sbiw	r24, 0x00	; 0
    5128:	29 f1       	breq	.+74     	; 0x5174 <twiReceive+0x54>
    512a:	6b 30       	cpi	r22, 0x0B	; 11
    512c:	28 f5       	brcc	.+74     	; 0x5178 <twiReceive+0x58>
    512e:	16 2f       	mov	r17, r22
    5130:	ec 01       	movw	r28, r24
    5132:	a6 df       	rcall	.-180    	; 0x5080 <twiIsBusy>
    5134:	81 11       	cpse	r24, r1
    5136:	22 c0       	rjmp	.+68     	; 0x517c <twiReceive+0x5c>
    5138:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <_twiCurrentHandler>
    513c:	90 91 6f 1a 	lds	r25, 0x1A6F	; 0x801a6f <_twiCurrentHandler+0x1>
    5140:	c8 17       	cp	r28, r24
    5142:	d9 07       	cpc	r29, r25
    5144:	41 f0       	breq	.+16     	; 0x5156 <twiReceive+0x36>
    5146:	3e df       	rcall	.-388    	; 0x4fc4 <_initTwiInterface>
    5148:	89 81       	ldd	r24, Y+1	; 0x01
    514a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    514e:	d0 93 6f 1a 	sts	0x1A6F, r29	; 0x801a6f <_twiCurrentHandler+0x1>
    5152:	c0 93 6e 1a 	sts	0x1A6E, r28	; 0x801a6e <_twiCurrentHandler>
    5156:	10 93 70 1a 	sts	0x1A70, r17	; 0x801a70 <_twiMessageLen>
    515a:	88 81       	ld	r24, Y
    515c:	88 0f       	add	r24, r24
    515e:	81 60       	ori	r24, 0x01	; 1
    5160:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <_twiMessageBuffer>
    5164:	88 ef       	ldi	r24, 0xF8	; 248
    5166:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    516a:	85 ea       	ldi	r24, 0xA5	; 165
    516c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5170:	85 e0       	ldi	r24, 0x05	; 5
    5172:	05 c0       	rjmp	.+10     	; 0x517e <twiReceive+0x5e>
    5174:	86 e0       	ldi	r24, 0x06	; 6
    5176:	03 c0       	rjmp	.+6      	; 0x517e <twiReceive+0x5e>
    5178:	87 e0       	ldi	r24, 0x07	; 7
    517a:	01 c0       	rjmp	.+2      	; 0x517e <twiReceive+0x5e>
    517c:	82 e0       	ldi	r24, 0x02	; 2
    517e:	df 91       	pop	r29
    5180:	cf 91       	pop	r28
    5182:	1f 91       	pop	r17
    5184:	08 95       	ret

00005186 <__vector_39>:
    5186:	1f 92       	push	r1
    5188:	0f 92       	push	r0
    518a:	0f b6       	in	r0, 0x3f	; 63
    518c:	0f 92       	push	r0
    518e:	11 24       	eor	r1, r1
    5190:	0b b6       	in	r0, 0x3b	; 59
    5192:	0f 92       	push	r0
    5194:	2f 93       	push	r18
    5196:	3f 93       	push	r19
    5198:	4f 93       	push	r20
    519a:	5f 93       	push	r21
    519c:	6f 93       	push	r22
    519e:	7f 93       	push	r23
    51a0:	8f 93       	push	r24
    51a2:	9f 93       	push	r25
    51a4:	af 93       	push	r26
    51a6:	bf 93       	push	r27
    51a8:	ef 93       	push	r30
    51aa:	ff 93       	push	r31
    51ac:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    51b0:	8e 2f       	mov	r24, r30
    51b2:	90 e0       	ldi	r25, 0x00	; 0
    51b4:	fc 01       	movw	r30, r24
    51b6:	38 97       	sbiw	r30, 0x08	; 8
    51b8:	e1 35       	cpi	r30, 0x51	; 81
    51ba:	f1 05       	cpc	r31, r1
    51bc:	08 f0       	brcs	.+2      	; 0x51c0 <__vector_39+0x3a>
    51be:	75 c0       	rjmp	.+234    	; 0x52aa <__vector_39+0x124>
    51c0:	88 27       	eor	r24, r24
    51c2:	e4 58       	subi	r30, 0x84	; 132
    51c4:	ff 4f       	sbci	r31, 0xFF	; 255
    51c6:	8f 4f       	sbci	r24, 0xFF	; 255
    51c8:	76 c2       	rjmp	.+1260   	; 0x56b6 <__tablejump2__>
    51ca:	10 92 6d 1a 	sts	0x1A6D, r1	; 0x801a6d <_index.1885>
    51ce:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <_index.1885>
    51d2:	80 91 70 1a 	lds	r24, 0x1A70	; 0x801a70 <_twiMessageLen>
    51d6:	e8 17       	cp	r30, r24
    51d8:	70 f4       	brcc	.+28     	; 0x51f6 <__vector_39+0x70>
    51da:	81 e0       	ldi	r24, 0x01	; 1
    51dc:	8e 0f       	add	r24, r30
    51de:	80 93 6d 1a 	sts	0x1A6D, r24	; 0x801a6d <_index.1885>
    51e2:	f0 e0       	ldi	r31, 0x00	; 0
    51e4:	ef 58       	subi	r30, 0x8F	; 143
    51e6:	f5 4e       	sbci	r31, 0xE5	; 229
    51e8:	80 81       	ld	r24, Z
    51ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    51ee:	85 e8       	ldi	r24, 0x85	; 133
    51f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    51f4:	72 c0       	rjmp	.+228    	; 0x52da <__vector_39+0x154>
    51f6:	84 e9       	ldi	r24, 0x94	; 148
    51f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    51fc:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <_twiCurrentHandler>
    5200:	90 91 6f 1a 	lds	r25, 0x1A6F	; 0x801a6f <_twiCurrentHandler+0x1>
    5204:	dc 01       	movw	r26, r24
    5206:	12 96       	adiw	r26, 0x02	; 2
    5208:	ed 91       	ld	r30, X+
    520a:	fc 91       	ld	r31, X
    520c:	13 97       	sbiw	r26, 0x03	; 3
    520e:	30 97       	sbiw	r30, 0x00	; 0
    5210:	09 f4       	brne	.+2      	; 0x5214 <__vector_39+0x8e>
    5212:	63 c0       	rjmp	.+198    	; 0x52da <__vector_39+0x154>
    5214:	20 e0       	ldi	r18, 0x00	; 0
    5216:	40 e0       	ldi	r20, 0x00	; 0
    5218:	50 e0       	ldi	r21, 0x00	; 0
    521a:	64 e0       	ldi	r22, 0x04	; 4
    521c:	19 95       	eicall
    521e:	5d c0       	rjmp	.+186    	; 0x52da <__vector_39+0x154>
    5220:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <_index.1885>
    5224:	81 e0       	ldi	r24, 0x01	; 1
    5226:	8e 0f       	add	r24, r30
    5228:	80 93 6d 1a 	sts	0x1A6D, r24	; 0x801a6d <_index.1885>
    522c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5230:	f0 e0       	ldi	r31, 0x00	; 0
    5232:	ef 58       	subi	r30, 0x8F	; 143
    5234:	f5 4e       	sbci	r31, 0xE5	; 229
    5236:	80 83       	st	Z, r24
    5238:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    523c:	80 34       	cpi	r24, 0x40	; 64
    523e:	11 f4       	brne	.+4      	; 0x5244 <__vector_39+0xbe>
    5240:	10 92 6d 1a 	sts	0x1A6D, r1	; 0x801a6d <_index.1885>
    5244:	20 91 6d 1a 	lds	r18, 0x1A6D	; 0x801a6d <_index.1885>
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	80 91 70 1a 	lds	r24, 0x1A70	; 0x801a70 <_twiMessageLen>
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	01 97       	sbiw	r24, 0x01	; 1
    5252:	28 17       	cp	r18, r24
    5254:	39 07       	cpc	r19, r25
    5256:	24 f4       	brge	.+8      	; 0x5260 <__vector_39+0xda>
    5258:	85 ec       	ldi	r24, 0xC5	; 197
    525a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    525e:	3d c0       	rjmp	.+122    	; 0x52da <__vector_39+0x154>
    5260:	85 e8       	ldi	r24, 0x85	; 133
    5262:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5266:	39 c0       	rjmp	.+114    	; 0x52da <__vector_39+0x154>
    5268:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    526c:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <_index.1885>
    5270:	f0 e0       	ldi	r31, 0x00	; 0
    5272:	ef 58       	subi	r30, 0x8F	; 143
    5274:	f5 4e       	sbci	r31, 0xE5	; 229
    5276:	80 83       	st	Z, r24
    5278:	84 e9       	ldi	r24, 0x94	; 148
    527a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    527e:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <_twiCurrentHandler>
    5282:	90 91 6f 1a 	lds	r25, 0x1A6F	; 0x801a6f <_twiCurrentHandler+0x1>
    5286:	dc 01       	movw	r26, r24
    5288:	12 96       	adiw	r26, 0x02	; 2
    528a:	ed 91       	ld	r30, X+
    528c:	fc 91       	ld	r31, X
    528e:	13 97       	sbiw	r26, 0x03	; 3
    5290:	30 97       	sbiw	r30, 0x00	; 0
    5292:	19 f1       	breq	.+70     	; 0x52da <__vector_39+0x154>
    5294:	20 91 70 1a 	lds	r18, 0x1A70	; 0x801a70 <_twiMessageLen>
    5298:	41 e7       	ldi	r20, 0x71	; 113
    529a:	5a e1       	ldi	r21, 0x1A	; 26
    529c:	65 e0       	ldi	r22, 0x05	; 5
    529e:	19 95       	eicall
    52a0:	1c c0       	rjmp	.+56     	; 0x52da <__vector_39+0x154>
    52a2:	85 ea       	ldi	r24, 0xA5	; 165
    52a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52a8:	18 c0       	rjmp	.+48     	; 0x52da <__vector_39+0x154>
    52aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    52ae:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    52b2:	84 e0       	ldi	r24, 0x04	; 4
    52b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52b8:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <_twiCurrentHandler>
    52bc:	90 91 6f 1a 	lds	r25, 0x1A6F	; 0x801a6f <_twiCurrentHandler+0x1>
    52c0:	dc 01       	movw	r26, r24
    52c2:	12 96       	adiw	r26, 0x02	; 2
    52c4:	ed 91       	ld	r30, X+
    52c6:	fc 91       	ld	r31, X
    52c8:	13 97       	sbiw	r26, 0x03	; 3
    52ca:	30 97       	sbiw	r30, 0x00	; 0
    52cc:	31 f0       	breq	.+12     	; 0x52da <__vector_39+0x154>
    52ce:	20 e0       	ldi	r18, 0x00	; 0
    52d0:	40 e0       	ldi	r20, 0x00	; 0
    52d2:	50 e0       	ldi	r21, 0x00	; 0
    52d4:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    52d8:	19 95       	eicall
    52da:	ff 91       	pop	r31
    52dc:	ef 91       	pop	r30
    52de:	bf 91       	pop	r27
    52e0:	af 91       	pop	r26
    52e2:	9f 91       	pop	r25
    52e4:	8f 91       	pop	r24
    52e6:	7f 91       	pop	r23
    52e8:	6f 91       	pop	r22
    52ea:	5f 91       	pop	r21
    52ec:	4f 91       	pop	r20
    52ee:	3f 91       	pop	r19
    52f0:	2f 91       	pop	r18
    52f2:	0f 90       	pop	r0
    52f4:	0b be       	out	0x3b, r0	; 59
    52f6:	0f 90       	pop	r0
    52f8:	0f be       	out	0x3f, r0	; 63
    52fa:	0f 90       	pop	r0
    52fc:	1f 90       	pop	r1
    52fe:	18 95       	reti

00005300 <fifo_init>:
    5300:	fc 01       	movw	r30, r24
    5302:	41 11       	cpse	r20, r1
    5304:	01 c0       	rjmp	.+2      	; 0x5308 <fifo_init+0x8>
    5306:	1a d3       	rcall	.+1588   	; 0x593c <abort>
    5308:	84 2f       	mov	r24, r20
    530a:	90 e0       	ldi	r25, 0x00	; 0
    530c:	9c 01       	movw	r18, r24
    530e:	21 50       	subi	r18, 0x01	; 1
    5310:	31 09       	sbc	r19, r1
    5312:	82 23       	and	r24, r18
    5314:	93 23       	and	r25, r19
    5316:	89 2b       	or	r24, r25
    5318:	09 f0       	breq	.+2      	; 0x531c <fifo_init+0x1c>
    531a:	10 d3       	rcall	.+1568   	; 0x593c <abort>
    531c:	41 38       	cpi	r20, 0x81	; 129
    531e:	08 f0       	brcs	.+2      	; 0x5322 <fifo_init+0x22>
    5320:	0d d3       	rcall	.+1562   	; 0x593c <abort>
    5322:	12 82       	std	Z+2, r1	; 0x02
    5324:	13 82       	std	Z+3, r1	; 0x03
    5326:	44 83       	std	Z+4, r20	; 0x04
    5328:	44 0f       	add	r20, r20
    532a:	41 50       	subi	r20, 0x01	; 1
    532c:	45 83       	std	Z+5, r20	; 0x05
    532e:	71 83       	std	Z+1, r23	; 0x01
    5330:	60 83       	st	Z, r22
    5332:	80 e0       	ldi	r24, 0x00	; 0
    5334:	90 e0       	ldi	r25, 0x00	; 0
    5336:	08 95       	ret

00005338 <__subsf3>:
    5338:	50 58       	subi	r21, 0x80	; 128

0000533a <__addsf3>:
    533a:	bb 27       	eor	r27, r27
    533c:	aa 27       	eor	r26, r26
    533e:	0e d0       	rcall	.+28     	; 0x535c <__addsf3x>
    5340:	21 c1       	rjmp	.+578    	; 0x5584 <__fp_round>
    5342:	12 d1       	rcall	.+548    	; 0x5568 <__fp_pscA>
    5344:	30 f0       	brcs	.+12     	; 0x5352 <__addsf3+0x18>
    5346:	17 d1       	rcall	.+558    	; 0x5576 <__fp_pscB>
    5348:	20 f0       	brcs	.+8      	; 0x5352 <__addsf3+0x18>
    534a:	31 f4       	brne	.+12     	; 0x5358 <__addsf3+0x1e>
    534c:	9f 3f       	cpi	r25, 0xFF	; 255
    534e:	11 f4       	brne	.+4      	; 0x5354 <__addsf3+0x1a>
    5350:	1e f4       	brtc	.+6      	; 0x5358 <__addsf3+0x1e>
    5352:	07 c1       	rjmp	.+526    	; 0x5562 <__fp_nan>
    5354:	0e f4       	brtc	.+2      	; 0x5358 <__addsf3+0x1e>
    5356:	e0 95       	com	r30
    5358:	e7 fb       	bst	r30, 7
    535a:	fd c0       	rjmp	.+506    	; 0x5556 <__fp_inf>

0000535c <__addsf3x>:
    535c:	e9 2f       	mov	r30, r25
    535e:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__fp_split3>
    5362:	78 f3       	brcs	.-34     	; 0x5342 <__addsf3+0x8>
    5364:	ba 17       	cp	r27, r26
    5366:	62 07       	cpc	r22, r18
    5368:	73 07       	cpc	r23, r19
    536a:	84 07       	cpc	r24, r20
    536c:	95 07       	cpc	r25, r21
    536e:	20 f0       	brcs	.+8      	; 0x5378 <__addsf3x+0x1c>
    5370:	79 f4       	brne	.+30     	; 0x5390 <__addsf3x+0x34>
    5372:	a6 f5       	brtc	.+104    	; 0x53dc <__addsf3x+0x80>
    5374:	0c 94 87 1c 	jmp	0x390e	; 0x390e <__fp_zero>
    5378:	0e f4       	brtc	.+2      	; 0x537c <__addsf3x+0x20>
    537a:	e0 95       	com	r30
    537c:	0b 2e       	mov	r0, r27
    537e:	ba 2f       	mov	r27, r26
    5380:	a0 2d       	mov	r26, r0
    5382:	0b 01       	movw	r0, r22
    5384:	b9 01       	movw	r22, r18
    5386:	90 01       	movw	r18, r0
    5388:	0c 01       	movw	r0, r24
    538a:	ca 01       	movw	r24, r20
    538c:	a0 01       	movw	r20, r0
    538e:	11 24       	eor	r1, r1
    5390:	ff 27       	eor	r31, r31
    5392:	59 1b       	sub	r21, r25
    5394:	99 f0       	breq	.+38     	; 0x53bc <__addsf3x+0x60>
    5396:	59 3f       	cpi	r21, 0xF9	; 249
    5398:	50 f4       	brcc	.+20     	; 0x53ae <__addsf3x+0x52>
    539a:	50 3e       	cpi	r21, 0xE0	; 224
    539c:	68 f1       	brcs	.+90     	; 0x53f8 <__addsf3x+0x9c>
    539e:	1a 16       	cp	r1, r26
    53a0:	f0 40       	sbci	r31, 0x00	; 0
    53a2:	a2 2f       	mov	r26, r18
    53a4:	23 2f       	mov	r18, r19
    53a6:	34 2f       	mov	r19, r20
    53a8:	44 27       	eor	r20, r20
    53aa:	58 5f       	subi	r21, 0xF8	; 248
    53ac:	f3 cf       	rjmp	.-26     	; 0x5394 <__addsf3x+0x38>
    53ae:	46 95       	lsr	r20
    53b0:	37 95       	ror	r19
    53b2:	27 95       	ror	r18
    53b4:	a7 95       	ror	r26
    53b6:	f0 40       	sbci	r31, 0x00	; 0
    53b8:	53 95       	inc	r21
    53ba:	c9 f7       	brne	.-14     	; 0x53ae <__addsf3x+0x52>
    53bc:	7e f4       	brtc	.+30     	; 0x53dc <__addsf3x+0x80>
    53be:	1f 16       	cp	r1, r31
    53c0:	ba 0b       	sbc	r27, r26
    53c2:	62 0b       	sbc	r22, r18
    53c4:	73 0b       	sbc	r23, r19
    53c6:	84 0b       	sbc	r24, r20
    53c8:	ba f0       	brmi	.+46     	; 0x53f8 <__addsf3x+0x9c>
    53ca:	91 50       	subi	r25, 0x01	; 1
    53cc:	a1 f0       	breq	.+40     	; 0x53f6 <__addsf3x+0x9a>
    53ce:	ff 0f       	add	r31, r31
    53d0:	bb 1f       	adc	r27, r27
    53d2:	66 1f       	adc	r22, r22
    53d4:	77 1f       	adc	r23, r23
    53d6:	88 1f       	adc	r24, r24
    53d8:	c2 f7       	brpl	.-16     	; 0x53ca <__addsf3x+0x6e>
    53da:	0e c0       	rjmp	.+28     	; 0x53f8 <__addsf3x+0x9c>
    53dc:	ba 0f       	add	r27, r26
    53de:	62 1f       	adc	r22, r18
    53e0:	73 1f       	adc	r23, r19
    53e2:	84 1f       	adc	r24, r20
    53e4:	48 f4       	brcc	.+18     	; 0x53f8 <__addsf3x+0x9c>
    53e6:	87 95       	ror	r24
    53e8:	77 95       	ror	r23
    53ea:	67 95       	ror	r22
    53ec:	b7 95       	ror	r27
    53ee:	f7 95       	ror	r31
    53f0:	9e 3f       	cpi	r25, 0xFE	; 254
    53f2:	08 f0       	brcs	.+2      	; 0x53f6 <__addsf3x+0x9a>
    53f4:	b1 cf       	rjmp	.-158    	; 0x5358 <__addsf3+0x1e>
    53f6:	93 95       	inc	r25
    53f8:	88 0f       	add	r24, r24
    53fa:	08 f0       	brcs	.+2      	; 0x53fe <__addsf3x+0xa2>
    53fc:	99 27       	eor	r25, r25
    53fe:	ee 0f       	add	r30, r30
    5400:	97 95       	ror	r25
    5402:	87 95       	ror	r24
    5404:	08 95       	ret

00005406 <__divsf3>:
    5406:	0d d0       	rcall	.+26     	; 0x5422 <__divsf3x>
    5408:	bd c0       	rjmp	.+378    	; 0x5584 <__fp_round>
    540a:	b5 d0       	rcall	.+362    	; 0x5576 <__fp_pscB>
    540c:	48 f0       	brcs	.+18     	; 0x5420 <__divsf3+0x1a>
    540e:	ac d0       	rcall	.+344    	; 0x5568 <__fp_pscA>
    5410:	38 f0       	brcs	.+14     	; 0x5420 <__divsf3+0x1a>
    5412:	21 f4       	brne	.+8      	; 0x541c <__divsf3+0x16>
    5414:	5f 3f       	cpi	r21, 0xFF	; 255
    5416:	21 f0       	breq	.+8      	; 0x5420 <__divsf3+0x1a>
    5418:	9e c0       	rjmp	.+316    	; 0x5556 <__fp_inf>
    541a:	51 11       	cpse	r21, r1
    541c:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <__fp_szero>
    5420:	a0 c0       	rjmp	.+320    	; 0x5562 <__fp_nan>

00005422 <__divsf3x>:
    5422:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__fp_split3>
    5426:	88 f3       	brcs	.-30     	; 0x540a <__divsf3+0x4>

00005428 <__divsf3_pse>:
    5428:	99 23       	and	r25, r25
    542a:	b9 f3       	breq	.-18     	; 0x541a <__divsf3+0x14>
    542c:	55 23       	and	r21, r21
    542e:	a1 f3       	breq	.-24     	; 0x5418 <__divsf3+0x12>
    5430:	95 1b       	sub	r25, r21
    5432:	55 0b       	sbc	r21, r21
    5434:	bb 27       	eor	r27, r27
    5436:	aa 27       	eor	r26, r26
    5438:	62 17       	cp	r22, r18
    543a:	73 07       	cpc	r23, r19
    543c:	84 07       	cpc	r24, r20
    543e:	38 f0       	brcs	.+14     	; 0x544e <__divsf3_pse+0x26>
    5440:	9f 5f       	subi	r25, 0xFF	; 255
    5442:	5f 4f       	sbci	r21, 0xFF	; 255
    5444:	22 0f       	add	r18, r18
    5446:	33 1f       	adc	r19, r19
    5448:	44 1f       	adc	r20, r20
    544a:	aa 1f       	adc	r26, r26
    544c:	a9 f3       	breq	.-22     	; 0x5438 <__divsf3_pse+0x10>
    544e:	34 d0       	rcall	.+104    	; 0x54b8 <__divsf3_pse+0x90>
    5450:	0e 2e       	mov	r0, r30
    5452:	3a f0       	brmi	.+14     	; 0x5462 <__divsf3_pse+0x3a>
    5454:	e0 e8       	ldi	r30, 0x80	; 128
    5456:	31 d0       	rcall	.+98     	; 0x54ba <__divsf3_pse+0x92>
    5458:	91 50       	subi	r25, 0x01	; 1
    545a:	50 40       	sbci	r21, 0x00	; 0
    545c:	e6 95       	lsr	r30
    545e:	00 1c       	adc	r0, r0
    5460:	ca f7       	brpl	.-14     	; 0x5454 <__divsf3_pse+0x2c>
    5462:	2a d0       	rcall	.+84     	; 0x54b8 <__divsf3_pse+0x90>
    5464:	fe 2f       	mov	r31, r30
    5466:	28 d0       	rcall	.+80     	; 0x54b8 <__divsf3_pse+0x90>
    5468:	66 0f       	add	r22, r22
    546a:	77 1f       	adc	r23, r23
    546c:	88 1f       	adc	r24, r24
    546e:	bb 1f       	adc	r27, r27
    5470:	26 17       	cp	r18, r22
    5472:	37 07       	cpc	r19, r23
    5474:	48 07       	cpc	r20, r24
    5476:	ab 07       	cpc	r26, r27
    5478:	b0 e8       	ldi	r27, 0x80	; 128
    547a:	09 f0       	breq	.+2      	; 0x547e <__divsf3_pse+0x56>
    547c:	bb 0b       	sbc	r27, r27
    547e:	80 2d       	mov	r24, r0
    5480:	bf 01       	movw	r22, r30
    5482:	ff 27       	eor	r31, r31
    5484:	93 58       	subi	r25, 0x83	; 131
    5486:	5f 4f       	sbci	r21, 0xFF	; 255
    5488:	32 f0       	brmi	.+12     	; 0x5496 <__divsf3_pse+0x6e>
    548a:	9e 3f       	cpi	r25, 0xFE	; 254
    548c:	51 05       	cpc	r21, r1
    548e:	70 f0       	brcs	.+28     	; 0x54ac <__divsf3_pse+0x84>
    5490:	62 c0       	rjmp	.+196    	; 0x5556 <__fp_inf>
    5492:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <__fp_szero>
    5496:	5f 3f       	cpi	r21, 0xFF	; 255
    5498:	e4 f3       	brlt	.-8      	; 0x5492 <__divsf3_pse+0x6a>
    549a:	98 3e       	cpi	r25, 0xE8	; 232
    549c:	d4 f3       	brlt	.-12     	; 0x5492 <__divsf3_pse+0x6a>
    549e:	86 95       	lsr	r24
    54a0:	77 95       	ror	r23
    54a2:	67 95       	ror	r22
    54a4:	b7 95       	ror	r27
    54a6:	f7 95       	ror	r31
    54a8:	9f 5f       	subi	r25, 0xFF	; 255
    54aa:	c9 f7       	brne	.-14     	; 0x549e <__divsf3_pse+0x76>
    54ac:	88 0f       	add	r24, r24
    54ae:	91 1d       	adc	r25, r1
    54b0:	96 95       	lsr	r25
    54b2:	87 95       	ror	r24
    54b4:	97 f9       	bld	r25, 7
    54b6:	08 95       	ret
    54b8:	e1 e0       	ldi	r30, 0x01	; 1
    54ba:	66 0f       	add	r22, r22
    54bc:	77 1f       	adc	r23, r23
    54be:	88 1f       	adc	r24, r24
    54c0:	bb 1f       	adc	r27, r27
    54c2:	62 17       	cp	r22, r18
    54c4:	73 07       	cpc	r23, r19
    54c6:	84 07       	cpc	r24, r20
    54c8:	ba 07       	cpc	r27, r26
    54ca:	20 f0       	brcs	.+8      	; 0x54d4 <__divsf3_pse+0xac>
    54cc:	62 1b       	sub	r22, r18
    54ce:	73 0b       	sbc	r23, r19
    54d0:	84 0b       	sbc	r24, r20
    54d2:	ba 0b       	sbc	r27, r26
    54d4:	ee 1f       	adc	r30, r30
    54d6:	88 f7       	brcc	.-30     	; 0x54ba <__divsf3_pse+0x92>
    54d8:	e0 95       	com	r30
    54da:	08 95       	ret

000054dc <__floatunsisf>:
    54dc:	e8 94       	clt
    54de:	09 c0       	rjmp	.+18     	; 0x54f2 <__floatsisf+0x12>

000054e0 <__floatsisf>:
    54e0:	97 fb       	bst	r25, 7
    54e2:	3e f4       	brtc	.+14     	; 0x54f2 <__floatsisf+0x12>
    54e4:	90 95       	com	r25
    54e6:	80 95       	com	r24
    54e8:	70 95       	com	r23
    54ea:	61 95       	neg	r22
    54ec:	7f 4f       	sbci	r23, 0xFF	; 255
    54ee:	8f 4f       	sbci	r24, 0xFF	; 255
    54f0:	9f 4f       	sbci	r25, 0xFF	; 255
    54f2:	99 23       	and	r25, r25
    54f4:	a9 f0       	breq	.+42     	; 0x5520 <__floatsisf+0x40>
    54f6:	f9 2f       	mov	r31, r25
    54f8:	96 e9       	ldi	r25, 0x96	; 150
    54fa:	bb 27       	eor	r27, r27
    54fc:	93 95       	inc	r25
    54fe:	f6 95       	lsr	r31
    5500:	87 95       	ror	r24
    5502:	77 95       	ror	r23
    5504:	67 95       	ror	r22
    5506:	b7 95       	ror	r27
    5508:	f1 11       	cpse	r31, r1
    550a:	f8 cf       	rjmp	.-16     	; 0x54fc <__floatsisf+0x1c>
    550c:	fa f4       	brpl	.+62     	; 0x554c <__floatsisf+0x6c>
    550e:	bb 0f       	add	r27, r27
    5510:	11 f4       	brne	.+4      	; 0x5516 <__floatsisf+0x36>
    5512:	60 ff       	sbrs	r22, 0
    5514:	1b c0       	rjmp	.+54     	; 0x554c <__floatsisf+0x6c>
    5516:	6f 5f       	subi	r22, 0xFF	; 255
    5518:	7f 4f       	sbci	r23, 0xFF	; 255
    551a:	8f 4f       	sbci	r24, 0xFF	; 255
    551c:	9f 4f       	sbci	r25, 0xFF	; 255
    551e:	16 c0       	rjmp	.+44     	; 0x554c <__floatsisf+0x6c>
    5520:	88 23       	and	r24, r24
    5522:	11 f0       	breq	.+4      	; 0x5528 <__floatsisf+0x48>
    5524:	96 e9       	ldi	r25, 0x96	; 150
    5526:	11 c0       	rjmp	.+34     	; 0x554a <__floatsisf+0x6a>
    5528:	77 23       	and	r23, r23
    552a:	21 f0       	breq	.+8      	; 0x5534 <__floatsisf+0x54>
    552c:	9e e8       	ldi	r25, 0x8E	; 142
    552e:	87 2f       	mov	r24, r23
    5530:	76 2f       	mov	r23, r22
    5532:	05 c0       	rjmp	.+10     	; 0x553e <__floatsisf+0x5e>
    5534:	66 23       	and	r22, r22
    5536:	71 f0       	breq	.+28     	; 0x5554 <__floatsisf+0x74>
    5538:	96 e8       	ldi	r25, 0x86	; 134
    553a:	86 2f       	mov	r24, r22
    553c:	70 e0       	ldi	r23, 0x00	; 0
    553e:	60 e0       	ldi	r22, 0x00	; 0
    5540:	2a f0       	brmi	.+10     	; 0x554c <__floatsisf+0x6c>
    5542:	9a 95       	dec	r25
    5544:	66 0f       	add	r22, r22
    5546:	77 1f       	adc	r23, r23
    5548:	88 1f       	adc	r24, r24
    554a:	da f7       	brpl	.-10     	; 0x5542 <__floatsisf+0x62>
    554c:	88 0f       	add	r24, r24
    554e:	96 95       	lsr	r25
    5550:	87 95       	ror	r24
    5552:	97 f9       	bld	r25, 7
    5554:	08 95       	ret

00005556 <__fp_inf>:
    5556:	97 f9       	bld	r25, 7
    5558:	9f 67       	ori	r25, 0x7F	; 127
    555a:	80 e8       	ldi	r24, 0x80	; 128
    555c:	70 e0       	ldi	r23, 0x00	; 0
    555e:	60 e0       	ldi	r22, 0x00	; 0
    5560:	08 95       	ret

00005562 <__fp_nan>:
    5562:	9f ef       	ldi	r25, 0xFF	; 255
    5564:	80 ec       	ldi	r24, 0xC0	; 192
    5566:	08 95       	ret

00005568 <__fp_pscA>:
    5568:	00 24       	eor	r0, r0
    556a:	0a 94       	dec	r0
    556c:	16 16       	cp	r1, r22
    556e:	17 06       	cpc	r1, r23
    5570:	18 06       	cpc	r1, r24
    5572:	09 06       	cpc	r0, r25
    5574:	08 95       	ret

00005576 <__fp_pscB>:
    5576:	00 24       	eor	r0, r0
    5578:	0a 94       	dec	r0
    557a:	12 16       	cp	r1, r18
    557c:	13 06       	cpc	r1, r19
    557e:	14 06       	cpc	r1, r20
    5580:	05 06       	cpc	r0, r21
    5582:	08 95       	ret

00005584 <__fp_round>:
    5584:	09 2e       	mov	r0, r25
    5586:	03 94       	inc	r0
    5588:	00 0c       	add	r0, r0
    558a:	11 f4       	brne	.+4      	; 0x5590 <__fp_round+0xc>
    558c:	88 23       	and	r24, r24
    558e:	52 f0       	brmi	.+20     	; 0x55a4 <__fp_round+0x20>
    5590:	bb 0f       	add	r27, r27
    5592:	40 f4       	brcc	.+16     	; 0x55a4 <__fp_round+0x20>
    5594:	bf 2b       	or	r27, r31
    5596:	11 f4       	brne	.+4      	; 0x559c <__fp_round+0x18>
    5598:	60 ff       	sbrs	r22, 0
    559a:	04 c0       	rjmp	.+8      	; 0x55a4 <__fp_round+0x20>
    559c:	6f 5f       	subi	r22, 0xFF	; 255
    559e:	7f 4f       	sbci	r23, 0xFF	; 255
    55a0:	8f 4f       	sbci	r24, 0xFF	; 255
    55a2:	9f 4f       	sbci	r25, 0xFF	; 255
    55a4:	08 95       	ret

000055a6 <__mulsf3>:
    55a6:	0c d0       	rcall	.+24     	; 0x55c0 <__mulsf3x>
    55a8:	ed cf       	rjmp	.-38     	; 0x5584 <__fp_round>
    55aa:	de df       	rcall	.-68     	; 0x5568 <__fp_pscA>
    55ac:	28 f0       	brcs	.+10     	; 0x55b8 <__mulsf3+0x12>
    55ae:	e3 df       	rcall	.-58     	; 0x5576 <__fp_pscB>
    55b0:	18 f0       	brcs	.+6      	; 0x55b8 <__mulsf3+0x12>
    55b2:	95 23       	and	r25, r21
    55b4:	09 f0       	breq	.+2      	; 0x55b8 <__mulsf3+0x12>
    55b6:	cf cf       	rjmp	.-98     	; 0x5556 <__fp_inf>
    55b8:	d4 cf       	rjmp	.-88     	; 0x5562 <__fp_nan>
    55ba:	11 24       	eor	r1, r1
    55bc:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <__fp_szero>

000055c0 <__mulsf3x>:
    55c0:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__fp_split3>
    55c4:	90 f3       	brcs	.-28     	; 0x55aa <__mulsf3+0x4>

000055c6 <__mulsf3_pse>:
    55c6:	95 9f       	mul	r25, r21
    55c8:	c1 f3       	breq	.-16     	; 0x55ba <__mulsf3+0x14>
    55ca:	95 0f       	add	r25, r21
    55cc:	50 e0       	ldi	r21, 0x00	; 0
    55ce:	55 1f       	adc	r21, r21
    55d0:	62 9f       	mul	r22, r18
    55d2:	f0 01       	movw	r30, r0
    55d4:	72 9f       	mul	r23, r18
    55d6:	bb 27       	eor	r27, r27
    55d8:	f0 0d       	add	r31, r0
    55da:	b1 1d       	adc	r27, r1
    55dc:	63 9f       	mul	r22, r19
    55de:	aa 27       	eor	r26, r26
    55e0:	f0 0d       	add	r31, r0
    55e2:	b1 1d       	adc	r27, r1
    55e4:	aa 1f       	adc	r26, r26
    55e6:	64 9f       	mul	r22, r20
    55e8:	66 27       	eor	r22, r22
    55ea:	b0 0d       	add	r27, r0
    55ec:	a1 1d       	adc	r26, r1
    55ee:	66 1f       	adc	r22, r22
    55f0:	82 9f       	mul	r24, r18
    55f2:	22 27       	eor	r18, r18
    55f4:	b0 0d       	add	r27, r0
    55f6:	a1 1d       	adc	r26, r1
    55f8:	62 1f       	adc	r22, r18
    55fa:	73 9f       	mul	r23, r19
    55fc:	b0 0d       	add	r27, r0
    55fe:	a1 1d       	adc	r26, r1
    5600:	62 1f       	adc	r22, r18
    5602:	83 9f       	mul	r24, r19
    5604:	a0 0d       	add	r26, r0
    5606:	61 1d       	adc	r22, r1
    5608:	22 1f       	adc	r18, r18
    560a:	74 9f       	mul	r23, r20
    560c:	33 27       	eor	r19, r19
    560e:	a0 0d       	add	r26, r0
    5610:	61 1d       	adc	r22, r1
    5612:	23 1f       	adc	r18, r19
    5614:	84 9f       	mul	r24, r20
    5616:	60 0d       	add	r22, r0
    5618:	21 1d       	adc	r18, r1
    561a:	82 2f       	mov	r24, r18
    561c:	76 2f       	mov	r23, r22
    561e:	6a 2f       	mov	r22, r26
    5620:	11 24       	eor	r1, r1
    5622:	9f 57       	subi	r25, 0x7F	; 127
    5624:	50 40       	sbci	r21, 0x00	; 0
    5626:	92 f0       	brmi	.+36     	; 0x564c <__mulsf3_pse+0x86>
    5628:	e9 f0       	breq	.+58     	; 0x5664 <__mulsf3_pse+0x9e>
    562a:	88 23       	and	r24, r24
    562c:	4a f0       	brmi	.+18     	; 0x5640 <__mulsf3_pse+0x7a>
    562e:	ee 0f       	add	r30, r30
    5630:	ff 1f       	adc	r31, r31
    5632:	bb 1f       	adc	r27, r27
    5634:	66 1f       	adc	r22, r22
    5636:	77 1f       	adc	r23, r23
    5638:	88 1f       	adc	r24, r24
    563a:	91 50       	subi	r25, 0x01	; 1
    563c:	50 40       	sbci	r21, 0x00	; 0
    563e:	a9 f7       	brne	.-22     	; 0x562a <__mulsf3_pse+0x64>
    5640:	9e 3f       	cpi	r25, 0xFE	; 254
    5642:	51 05       	cpc	r21, r1
    5644:	78 f0       	brcs	.+30     	; 0x5664 <__mulsf3_pse+0x9e>
    5646:	87 cf       	rjmp	.-242    	; 0x5556 <__fp_inf>
    5648:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <__fp_szero>
    564c:	5f 3f       	cpi	r21, 0xFF	; 255
    564e:	e4 f3       	brlt	.-8      	; 0x5648 <__mulsf3_pse+0x82>
    5650:	98 3e       	cpi	r25, 0xE8	; 232
    5652:	d4 f3       	brlt	.-12     	; 0x5648 <__mulsf3_pse+0x82>
    5654:	86 95       	lsr	r24
    5656:	77 95       	ror	r23
    5658:	67 95       	ror	r22
    565a:	b7 95       	ror	r27
    565c:	f7 95       	ror	r31
    565e:	e7 95       	ror	r30
    5660:	9f 5f       	subi	r25, 0xFF	; 255
    5662:	c1 f7       	brne	.-16     	; 0x5654 <__mulsf3_pse+0x8e>
    5664:	fe 2b       	or	r31, r30
    5666:	88 0f       	add	r24, r24
    5668:	91 1d       	adc	r25, r1
    566a:	96 95       	lsr	r25
    566c:	87 95       	ror	r24
    566e:	97 f9       	bld	r25, 7
    5670:	08 95       	ret

00005672 <__udivmodsi4>:
    5672:	a1 e2       	ldi	r26, 0x21	; 33
    5674:	1a 2e       	mov	r1, r26
    5676:	aa 1b       	sub	r26, r26
    5678:	bb 1b       	sub	r27, r27
    567a:	fd 01       	movw	r30, r26
    567c:	0d c0       	rjmp	.+26     	; 0x5698 <__udivmodsi4_ep>

0000567e <__udivmodsi4_loop>:
    567e:	aa 1f       	adc	r26, r26
    5680:	bb 1f       	adc	r27, r27
    5682:	ee 1f       	adc	r30, r30
    5684:	ff 1f       	adc	r31, r31
    5686:	a2 17       	cp	r26, r18
    5688:	b3 07       	cpc	r27, r19
    568a:	e4 07       	cpc	r30, r20
    568c:	f5 07       	cpc	r31, r21
    568e:	20 f0       	brcs	.+8      	; 0x5698 <__udivmodsi4_ep>
    5690:	a2 1b       	sub	r26, r18
    5692:	b3 0b       	sbc	r27, r19
    5694:	e4 0b       	sbc	r30, r20
    5696:	f5 0b       	sbc	r31, r21

00005698 <__udivmodsi4_ep>:
    5698:	66 1f       	adc	r22, r22
    569a:	77 1f       	adc	r23, r23
    569c:	88 1f       	adc	r24, r24
    569e:	99 1f       	adc	r25, r25
    56a0:	1a 94       	dec	r1
    56a2:	69 f7       	brne	.-38     	; 0x567e <__udivmodsi4_loop>
    56a4:	60 95       	com	r22
    56a6:	70 95       	com	r23
    56a8:	80 95       	com	r24
    56aa:	90 95       	com	r25
    56ac:	9b 01       	movw	r18, r22
    56ae:	ac 01       	movw	r20, r24
    56b0:	bd 01       	movw	r22, r26
    56b2:	cf 01       	movw	r24, r30
    56b4:	08 95       	ret

000056b6 <__tablejump2__>:
    56b6:	ee 0f       	add	r30, r30
    56b8:	ff 1f       	adc	r31, r31
    56ba:	88 1f       	adc	r24, r24
    56bc:	8b bf       	out	0x3b, r24	; 59
    56be:	07 90       	elpm	r0, Z+
    56c0:	f6 91       	elpm	r31, Z
    56c2:	e0 2d       	mov	r30, r0
    56c4:	19 94       	eijmp

000056c6 <calloc>:
    56c6:	0f 93       	push	r16
    56c8:	1f 93       	push	r17
    56ca:	cf 93       	push	r28
    56cc:	df 93       	push	r29
    56ce:	86 9f       	mul	r24, r22
    56d0:	80 01       	movw	r16, r0
    56d2:	87 9f       	mul	r24, r23
    56d4:	10 0d       	add	r17, r0
    56d6:	96 9f       	mul	r25, r22
    56d8:	10 0d       	add	r17, r0
    56da:	11 24       	eor	r1, r1
    56dc:	c8 01       	movw	r24, r16
    56de:	0d d0       	rcall	.+26     	; 0x56fa <malloc>
    56e0:	ec 01       	movw	r28, r24
    56e2:	00 97       	sbiw	r24, 0x00	; 0
    56e4:	21 f0       	breq	.+8      	; 0x56ee <calloc+0x28>
    56e6:	a8 01       	movw	r20, r16
    56e8:	60 e0       	ldi	r22, 0x00	; 0
    56ea:	70 e0       	ldi	r23, 0x00	; 0
    56ec:	34 d1       	rcall	.+616    	; 0x5956 <memset>
    56ee:	ce 01       	movw	r24, r28
    56f0:	df 91       	pop	r29
    56f2:	cf 91       	pop	r28
    56f4:	1f 91       	pop	r17
    56f6:	0f 91       	pop	r16
    56f8:	08 95       	ret

000056fa <malloc>:
    56fa:	0f 93       	push	r16
    56fc:	1f 93       	push	r17
    56fe:	cf 93       	push	r28
    5700:	df 93       	push	r29
    5702:	82 30       	cpi	r24, 0x02	; 2
    5704:	91 05       	cpc	r25, r1
    5706:	10 f4       	brcc	.+4      	; 0x570c <malloc+0x12>
    5708:	82 e0       	ldi	r24, 0x02	; 2
    570a:	90 e0       	ldi	r25, 0x00	; 0
    570c:	e0 91 ab 1a 	lds	r30, 0x1AAB	; 0x801aab <__flp>
    5710:	f0 91 ac 1a 	lds	r31, 0x1AAC	; 0x801aac <__flp+0x1>
    5714:	20 e0       	ldi	r18, 0x00	; 0
    5716:	30 e0       	ldi	r19, 0x00	; 0
    5718:	a0 e0       	ldi	r26, 0x00	; 0
    571a:	b0 e0       	ldi	r27, 0x00	; 0
    571c:	30 97       	sbiw	r30, 0x00	; 0
    571e:	19 f1       	breq	.+70     	; 0x5766 <malloc+0x6c>
    5720:	40 81       	ld	r20, Z
    5722:	51 81       	ldd	r21, Z+1	; 0x01
    5724:	02 81       	ldd	r16, Z+2	; 0x02
    5726:	13 81       	ldd	r17, Z+3	; 0x03
    5728:	48 17       	cp	r20, r24
    572a:	59 07       	cpc	r21, r25
    572c:	c8 f0       	brcs	.+50     	; 0x5760 <malloc+0x66>
    572e:	84 17       	cp	r24, r20
    5730:	95 07       	cpc	r25, r21
    5732:	69 f4       	brne	.+26     	; 0x574e <malloc+0x54>
    5734:	10 97       	sbiw	r26, 0x00	; 0
    5736:	31 f0       	breq	.+12     	; 0x5744 <malloc+0x4a>
    5738:	12 96       	adiw	r26, 0x02	; 2
    573a:	0c 93       	st	X, r16
    573c:	12 97       	sbiw	r26, 0x02	; 2
    573e:	13 96       	adiw	r26, 0x03	; 3
    5740:	1c 93       	st	X, r17
    5742:	27 c0       	rjmp	.+78     	; 0x5792 <malloc+0x98>
    5744:	00 93 ab 1a 	sts	0x1AAB, r16	; 0x801aab <__flp>
    5748:	10 93 ac 1a 	sts	0x1AAC, r17	; 0x801aac <__flp+0x1>
    574c:	22 c0       	rjmp	.+68     	; 0x5792 <malloc+0x98>
    574e:	21 15       	cp	r18, r1
    5750:	31 05       	cpc	r19, r1
    5752:	19 f0       	breq	.+6      	; 0x575a <malloc+0x60>
    5754:	42 17       	cp	r20, r18
    5756:	53 07       	cpc	r21, r19
    5758:	18 f4       	brcc	.+6      	; 0x5760 <malloc+0x66>
    575a:	9a 01       	movw	r18, r20
    575c:	bd 01       	movw	r22, r26
    575e:	ef 01       	movw	r28, r30
    5760:	df 01       	movw	r26, r30
    5762:	f8 01       	movw	r30, r16
    5764:	db cf       	rjmp	.-74     	; 0x571c <malloc+0x22>
    5766:	21 15       	cp	r18, r1
    5768:	31 05       	cpc	r19, r1
    576a:	f9 f0       	breq	.+62     	; 0x57aa <malloc+0xb0>
    576c:	28 1b       	sub	r18, r24
    576e:	39 0b       	sbc	r19, r25
    5770:	24 30       	cpi	r18, 0x04	; 4
    5772:	31 05       	cpc	r19, r1
    5774:	80 f4       	brcc	.+32     	; 0x5796 <malloc+0x9c>
    5776:	8a 81       	ldd	r24, Y+2	; 0x02
    5778:	9b 81       	ldd	r25, Y+3	; 0x03
    577a:	61 15       	cp	r22, r1
    577c:	71 05       	cpc	r23, r1
    577e:	21 f0       	breq	.+8      	; 0x5788 <malloc+0x8e>
    5780:	fb 01       	movw	r30, r22
    5782:	93 83       	std	Z+3, r25	; 0x03
    5784:	82 83       	std	Z+2, r24	; 0x02
    5786:	04 c0       	rjmp	.+8      	; 0x5790 <malloc+0x96>
    5788:	90 93 ac 1a 	sts	0x1AAC, r25	; 0x801aac <__flp+0x1>
    578c:	80 93 ab 1a 	sts	0x1AAB, r24	; 0x801aab <__flp>
    5790:	fe 01       	movw	r30, r28
    5792:	32 96       	adiw	r30, 0x02	; 2
    5794:	44 c0       	rjmp	.+136    	; 0x581e <malloc+0x124>
    5796:	fe 01       	movw	r30, r28
    5798:	e2 0f       	add	r30, r18
    579a:	f3 1f       	adc	r31, r19
    579c:	81 93       	st	Z+, r24
    579e:	91 93       	st	Z+, r25
    57a0:	22 50       	subi	r18, 0x02	; 2
    57a2:	31 09       	sbc	r19, r1
    57a4:	39 83       	std	Y+1, r19	; 0x01
    57a6:	28 83       	st	Y, r18
    57a8:	3a c0       	rjmp	.+116    	; 0x581e <malloc+0x124>
    57aa:	20 91 a9 1a 	lds	r18, 0x1AA9	; 0x801aa9 <__brkval>
    57ae:	30 91 aa 1a 	lds	r19, 0x1AAA	; 0x801aaa <__brkval+0x1>
    57b2:	23 2b       	or	r18, r19
    57b4:	41 f4       	brne	.+16     	; 0x57c6 <malloc+0xcc>
    57b6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    57ba:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    57be:	30 93 aa 1a 	sts	0x1AAA, r19	; 0x801aaa <__brkval+0x1>
    57c2:	20 93 a9 1a 	sts	0x1AA9, r18	; 0x801aa9 <__brkval>
    57c6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    57ca:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    57ce:	21 15       	cp	r18, r1
    57d0:	31 05       	cpc	r19, r1
    57d2:	41 f4       	brne	.+16     	; 0x57e4 <malloc+0xea>
    57d4:	2d b7       	in	r18, 0x3d	; 61
    57d6:	3e b7       	in	r19, 0x3e	; 62
    57d8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    57dc:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    57e0:	24 1b       	sub	r18, r20
    57e2:	35 0b       	sbc	r19, r21
    57e4:	e0 91 a9 1a 	lds	r30, 0x1AA9	; 0x801aa9 <__brkval>
    57e8:	f0 91 aa 1a 	lds	r31, 0x1AAA	; 0x801aaa <__brkval+0x1>
    57ec:	e2 17       	cp	r30, r18
    57ee:	f3 07       	cpc	r31, r19
    57f0:	a0 f4       	brcc	.+40     	; 0x581a <malloc+0x120>
    57f2:	2e 1b       	sub	r18, r30
    57f4:	3f 0b       	sbc	r19, r31
    57f6:	28 17       	cp	r18, r24
    57f8:	39 07       	cpc	r19, r25
    57fa:	78 f0       	brcs	.+30     	; 0x581a <malloc+0x120>
    57fc:	ac 01       	movw	r20, r24
    57fe:	4e 5f       	subi	r20, 0xFE	; 254
    5800:	5f 4f       	sbci	r21, 0xFF	; 255
    5802:	24 17       	cp	r18, r20
    5804:	35 07       	cpc	r19, r21
    5806:	48 f0       	brcs	.+18     	; 0x581a <malloc+0x120>
    5808:	4e 0f       	add	r20, r30
    580a:	5f 1f       	adc	r21, r31
    580c:	50 93 aa 1a 	sts	0x1AAA, r21	; 0x801aaa <__brkval+0x1>
    5810:	40 93 a9 1a 	sts	0x1AA9, r20	; 0x801aa9 <__brkval>
    5814:	81 93       	st	Z+, r24
    5816:	91 93       	st	Z+, r25
    5818:	02 c0       	rjmp	.+4      	; 0x581e <malloc+0x124>
    581a:	e0 e0       	ldi	r30, 0x00	; 0
    581c:	f0 e0       	ldi	r31, 0x00	; 0
    581e:	cf 01       	movw	r24, r30
    5820:	df 91       	pop	r29
    5822:	cf 91       	pop	r28
    5824:	1f 91       	pop	r17
    5826:	0f 91       	pop	r16
    5828:	08 95       	ret

0000582a <free>:
    582a:	cf 93       	push	r28
    582c:	df 93       	push	r29
    582e:	00 97       	sbiw	r24, 0x00	; 0
    5830:	09 f4       	brne	.+2      	; 0x5834 <free+0xa>
    5832:	81 c0       	rjmp	.+258    	; 0x5936 <free+0x10c>
    5834:	fc 01       	movw	r30, r24
    5836:	32 97       	sbiw	r30, 0x02	; 2
    5838:	13 82       	std	Z+3, r1	; 0x03
    583a:	12 82       	std	Z+2, r1	; 0x02
    583c:	a0 91 ab 1a 	lds	r26, 0x1AAB	; 0x801aab <__flp>
    5840:	b0 91 ac 1a 	lds	r27, 0x1AAC	; 0x801aac <__flp+0x1>
    5844:	10 97       	sbiw	r26, 0x00	; 0
    5846:	81 f4       	brne	.+32     	; 0x5868 <free+0x3e>
    5848:	20 81       	ld	r18, Z
    584a:	31 81       	ldd	r19, Z+1	; 0x01
    584c:	82 0f       	add	r24, r18
    584e:	93 1f       	adc	r25, r19
    5850:	20 91 a9 1a 	lds	r18, 0x1AA9	; 0x801aa9 <__brkval>
    5854:	30 91 aa 1a 	lds	r19, 0x1AAA	; 0x801aaa <__brkval+0x1>
    5858:	28 17       	cp	r18, r24
    585a:	39 07       	cpc	r19, r25
    585c:	51 f5       	brne	.+84     	; 0x58b2 <free+0x88>
    585e:	f0 93 aa 1a 	sts	0x1AAA, r31	; 0x801aaa <__brkval+0x1>
    5862:	e0 93 a9 1a 	sts	0x1AA9, r30	; 0x801aa9 <__brkval>
    5866:	67 c0       	rjmp	.+206    	; 0x5936 <free+0x10c>
    5868:	ed 01       	movw	r28, r26
    586a:	20 e0       	ldi	r18, 0x00	; 0
    586c:	30 e0       	ldi	r19, 0x00	; 0
    586e:	ce 17       	cp	r28, r30
    5870:	df 07       	cpc	r29, r31
    5872:	40 f4       	brcc	.+16     	; 0x5884 <free+0x5a>
    5874:	4a 81       	ldd	r20, Y+2	; 0x02
    5876:	5b 81       	ldd	r21, Y+3	; 0x03
    5878:	9e 01       	movw	r18, r28
    587a:	41 15       	cp	r20, r1
    587c:	51 05       	cpc	r21, r1
    587e:	f1 f0       	breq	.+60     	; 0x58bc <free+0x92>
    5880:	ea 01       	movw	r28, r20
    5882:	f5 cf       	rjmp	.-22     	; 0x586e <free+0x44>
    5884:	d3 83       	std	Z+3, r29	; 0x03
    5886:	c2 83       	std	Z+2, r28	; 0x02
    5888:	40 81       	ld	r20, Z
    588a:	51 81       	ldd	r21, Z+1	; 0x01
    588c:	84 0f       	add	r24, r20
    588e:	95 1f       	adc	r25, r21
    5890:	c8 17       	cp	r28, r24
    5892:	d9 07       	cpc	r29, r25
    5894:	59 f4       	brne	.+22     	; 0x58ac <free+0x82>
    5896:	88 81       	ld	r24, Y
    5898:	99 81       	ldd	r25, Y+1	; 0x01
    589a:	84 0f       	add	r24, r20
    589c:	95 1f       	adc	r25, r21
    589e:	02 96       	adiw	r24, 0x02	; 2
    58a0:	91 83       	std	Z+1, r25	; 0x01
    58a2:	80 83       	st	Z, r24
    58a4:	8a 81       	ldd	r24, Y+2	; 0x02
    58a6:	9b 81       	ldd	r25, Y+3	; 0x03
    58a8:	93 83       	std	Z+3, r25	; 0x03
    58aa:	82 83       	std	Z+2, r24	; 0x02
    58ac:	21 15       	cp	r18, r1
    58ae:	31 05       	cpc	r19, r1
    58b0:	29 f4       	brne	.+10     	; 0x58bc <free+0x92>
    58b2:	f0 93 ac 1a 	sts	0x1AAC, r31	; 0x801aac <__flp+0x1>
    58b6:	e0 93 ab 1a 	sts	0x1AAB, r30	; 0x801aab <__flp>
    58ba:	3d c0       	rjmp	.+122    	; 0x5936 <free+0x10c>
    58bc:	e9 01       	movw	r28, r18
    58be:	fb 83       	std	Y+3, r31	; 0x03
    58c0:	ea 83       	std	Y+2, r30	; 0x02
    58c2:	49 91       	ld	r20, Y+
    58c4:	59 91       	ld	r21, Y+
    58c6:	c4 0f       	add	r28, r20
    58c8:	d5 1f       	adc	r29, r21
    58ca:	ec 17       	cp	r30, r28
    58cc:	fd 07       	cpc	r31, r29
    58ce:	61 f4       	brne	.+24     	; 0x58e8 <free+0xbe>
    58d0:	80 81       	ld	r24, Z
    58d2:	91 81       	ldd	r25, Z+1	; 0x01
    58d4:	84 0f       	add	r24, r20
    58d6:	95 1f       	adc	r25, r21
    58d8:	02 96       	adiw	r24, 0x02	; 2
    58da:	e9 01       	movw	r28, r18
    58dc:	99 83       	std	Y+1, r25	; 0x01
    58de:	88 83       	st	Y, r24
    58e0:	82 81       	ldd	r24, Z+2	; 0x02
    58e2:	93 81       	ldd	r25, Z+3	; 0x03
    58e4:	9b 83       	std	Y+3, r25	; 0x03
    58e6:	8a 83       	std	Y+2, r24	; 0x02
    58e8:	e0 e0       	ldi	r30, 0x00	; 0
    58ea:	f0 e0       	ldi	r31, 0x00	; 0
    58ec:	12 96       	adiw	r26, 0x02	; 2
    58ee:	8d 91       	ld	r24, X+
    58f0:	9c 91       	ld	r25, X
    58f2:	13 97       	sbiw	r26, 0x03	; 3
    58f4:	00 97       	sbiw	r24, 0x00	; 0
    58f6:	19 f0       	breq	.+6      	; 0x58fe <free+0xd4>
    58f8:	fd 01       	movw	r30, r26
    58fa:	dc 01       	movw	r26, r24
    58fc:	f7 cf       	rjmp	.-18     	; 0x58ec <free+0xc2>
    58fe:	8d 91       	ld	r24, X+
    5900:	9c 91       	ld	r25, X
    5902:	11 97       	sbiw	r26, 0x01	; 1
    5904:	9d 01       	movw	r18, r26
    5906:	2e 5f       	subi	r18, 0xFE	; 254
    5908:	3f 4f       	sbci	r19, 0xFF	; 255
    590a:	82 0f       	add	r24, r18
    590c:	93 1f       	adc	r25, r19
    590e:	20 91 a9 1a 	lds	r18, 0x1AA9	; 0x801aa9 <__brkval>
    5912:	30 91 aa 1a 	lds	r19, 0x1AAA	; 0x801aaa <__brkval+0x1>
    5916:	28 17       	cp	r18, r24
    5918:	39 07       	cpc	r19, r25
    591a:	69 f4       	brne	.+26     	; 0x5936 <free+0x10c>
    591c:	30 97       	sbiw	r30, 0x00	; 0
    591e:	29 f4       	brne	.+10     	; 0x592a <free+0x100>
    5920:	10 92 ac 1a 	sts	0x1AAC, r1	; 0x801aac <__flp+0x1>
    5924:	10 92 ab 1a 	sts	0x1AAB, r1	; 0x801aab <__flp>
    5928:	02 c0       	rjmp	.+4      	; 0x592e <free+0x104>
    592a:	13 82       	std	Z+3, r1	; 0x03
    592c:	12 82       	std	Z+2, r1	; 0x02
    592e:	b0 93 aa 1a 	sts	0x1AAA, r27	; 0x801aaa <__brkval+0x1>
    5932:	a0 93 a9 1a 	sts	0x1AA9, r26	; 0x801aa9 <__brkval>
    5936:	df 91       	pop	r29
    5938:	cf 91       	pop	r28
    593a:	08 95       	ret

0000593c <abort>:
    593c:	81 e0       	ldi	r24, 0x01	; 1
    593e:	90 e0       	ldi	r25, 0x00	; 0
    5940:	f8 94       	cli
    5942:	7d c3       	rjmp	.+1786   	; 0x603e <_exit>

00005944 <memcpy>:
    5944:	fb 01       	movw	r30, r22
    5946:	dc 01       	movw	r26, r24
    5948:	02 c0       	rjmp	.+4      	; 0x594e <memcpy+0xa>
    594a:	01 90       	ld	r0, Z+
    594c:	0d 92       	st	X+, r0
    594e:	41 50       	subi	r20, 0x01	; 1
    5950:	50 40       	sbci	r21, 0x00	; 0
    5952:	d8 f7       	brcc	.-10     	; 0x594a <memcpy+0x6>
    5954:	08 95       	ret

00005956 <memset>:
    5956:	dc 01       	movw	r26, r24
    5958:	01 c0       	rjmp	.+2      	; 0x595c <memset+0x6>
    595a:	6d 93       	st	X+, r22
    595c:	41 50       	subi	r20, 0x01	; 1
    595e:	50 40       	sbci	r21, 0x00	; 0
    5960:	e0 f7       	brcc	.-8      	; 0x595a <memset+0x4>
    5962:	08 95       	ret

00005964 <strcasestr>:
    5964:	fb 01       	movw	r30, r22
    5966:	51 91       	ld	r21, Z+
    5968:	55 23       	and	r21, r21
    596a:	b1 f0       	breq	.+44     	; 0x5998 <strcasestr+0x34>
    596c:	bf 01       	movw	r22, r30
    596e:	dc 01       	movw	r26, r24
    5970:	05 2e       	mov	r0, r21
    5972:	4d 91       	ld	r20, X+
    5974:	44 23       	and	r20, r20
    5976:	69 f0       	breq	.+26     	; 0x5992 <strcasestr+0x2e>
    5978:	10 d0       	rcall	.+32     	; 0x599a <strcasestr+0x36>
    597a:	d9 f7       	brne	.-10     	; 0x5972 <strcasestr+0xe>
    597c:	cd 01       	movw	r24, r26
    597e:	01 90       	ld	r0, Z+
    5980:	00 20       	and	r0, r0
    5982:	49 f0       	breq	.+18     	; 0x5996 <strcasestr+0x32>
    5984:	4d 91       	ld	r20, X+
    5986:	41 11       	cpse	r20, r1
    5988:	08 d0       	rcall	.+16     	; 0x599a <strcasestr+0x36>
    598a:	c9 f3       	breq	.-14     	; 0x597e <strcasestr+0x1a>
    598c:	fb 01       	movw	r30, r22
    598e:	41 11       	cpse	r20, r1
    5990:	ee cf       	rjmp	.-36     	; 0x596e <strcasestr+0xa>
    5992:	81 e0       	ldi	r24, 0x01	; 1
    5994:	90 e0       	ldi	r25, 0x00	; 0
    5996:	01 97       	sbiw	r24, 0x01	; 1
    5998:	08 95       	ret
    599a:	40 25       	eor	r20, r0
    599c:	39 f0       	breq	.+14     	; 0x59ac <strcasestr+0x48>
    599e:	40 32       	cpi	r20, 0x20	; 32
    59a0:	29 f4       	brne	.+10     	; 0x59ac <strcasestr+0x48>
    59a2:	40 29       	or	r20, r0
    59a4:	4b 57       	subi	r20, 0x7B	; 123
    59a6:	46 5e       	subi	r20, 0xE6	; 230
    59a8:	08 f0       	brcs	.+2      	; 0x59ac <strcasestr+0x48>
    59aa:	18 94       	sez
    59ac:	08 95       	ret

000059ae <strcat>:
    59ae:	fb 01       	movw	r30, r22
    59b0:	dc 01       	movw	r26, r24
    59b2:	0d 90       	ld	r0, X+
    59b4:	00 20       	and	r0, r0
    59b6:	e9 f7       	brne	.-6      	; 0x59b2 <strcat+0x4>
    59b8:	11 97       	sbiw	r26, 0x01	; 1
    59ba:	01 90       	ld	r0, Z+
    59bc:	0d 92       	st	X+, r0
    59be:	00 20       	and	r0, r0
    59c0:	e1 f7       	brne	.-8      	; 0x59ba <strcat+0xc>
    59c2:	08 95       	ret

000059c4 <strcpy>:
    59c4:	fb 01       	movw	r30, r22
    59c6:	dc 01       	movw	r26, r24
    59c8:	01 90       	ld	r0, Z+
    59ca:	0d 92       	st	X+, r0
    59cc:	00 20       	and	r0, r0
    59ce:	e1 f7       	brne	.-8      	; 0x59c8 <strcpy+0x4>
    59d0:	08 95       	ret

000059d2 <strncasecmp>:
    59d2:	fb 01       	movw	r30, r22
    59d4:	dc 01       	movw	r26, r24
    59d6:	41 50       	subi	r20, 0x01	; 1
    59d8:	50 40       	sbci	r21, 0x00	; 0
    59da:	88 f0       	brcs	.+34     	; 0x59fe <strncasecmp+0x2c>
    59dc:	8d 91       	ld	r24, X+
    59de:	81 34       	cpi	r24, 0x41	; 65
    59e0:	1c f0       	brlt	.+6      	; 0x59e8 <strncasecmp+0x16>
    59e2:	8b 35       	cpi	r24, 0x5B	; 91
    59e4:	0c f4       	brge	.+2      	; 0x59e8 <strncasecmp+0x16>
    59e6:	80 5e       	subi	r24, 0xE0	; 224
    59e8:	61 91       	ld	r22, Z+
    59ea:	61 34       	cpi	r22, 0x41	; 65
    59ec:	1c f0       	brlt	.+6      	; 0x59f4 <strncasecmp+0x22>
    59ee:	6b 35       	cpi	r22, 0x5B	; 91
    59f0:	0c f4       	brge	.+2      	; 0x59f4 <strncasecmp+0x22>
    59f2:	60 5e       	subi	r22, 0xE0	; 224
    59f4:	86 1b       	sub	r24, r22
    59f6:	61 11       	cpse	r22, r1
    59f8:	71 f3       	breq	.-36     	; 0x59d6 <strncasecmp+0x4>
    59fa:	99 0b       	sbc	r25, r25
    59fc:	08 95       	ret
    59fe:	88 1b       	sub	r24, r24
    5a00:	fc cf       	rjmp	.-8      	; 0x59fa <strncasecmp+0x28>

00005a02 <printf>:
    5a02:	cf 93       	push	r28
    5a04:	df 93       	push	r29
    5a06:	cd b7       	in	r28, 0x3d	; 61
    5a08:	de b7       	in	r29, 0x3e	; 62
    5a0a:	ae 01       	movw	r20, r28
    5a0c:	4a 5f       	subi	r20, 0xFA	; 250
    5a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    5a10:	fa 01       	movw	r30, r20
    5a12:	61 91       	ld	r22, Z+
    5a14:	71 91       	ld	r23, Z+
    5a16:	af 01       	movw	r20, r30
    5a18:	80 91 af 1a 	lds	r24, 0x1AAF	; 0x801aaf <__iob+0x2>
    5a1c:	90 91 b0 1a 	lds	r25, 0x1AB0	; 0x801ab0 <__iob+0x3>
    5a20:	61 d0       	rcall	.+194    	; 0x5ae4 <vfprintf>
    5a22:	df 91       	pop	r29
    5a24:	cf 91       	pop	r28
    5a26:	08 95       	ret

00005a28 <puts>:
    5a28:	0f 93       	push	r16
    5a2a:	1f 93       	push	r17
    5a2c:	cf 93       	push	r28
    5a2e:	df 93       	push	r29
    5a30:	e0 91 af 1a 	lds	r30, 0x1AAF	; 0x801aaf <__iob+0x2>
    5a34:	f0 91 b0 1a 	lds	r31, 0x1AB0	; 0x801ab0 <__iob+0x3>
    5a38:	23 81       	ldd	r18, Z+3	; 0x03
    5a3a:	21 ff       	sbrs	r18, 1
    5a3c:	1b c0       	rjmp	.+54     	; 0x5a74 <puts+0x4c>
    5a3e:	8c 01       	movw	r16, r24
    5a40:	d0 e0       	ldi	r29, 0x00	; 0
    5a42:	c0 e0       	ldi	r28, 0x00	; 0
    5a44:	f8 01       	movw	r30, r16
    5a46:	81 91       	ld	r24, Z+
    5a48:	8f 01       	movw	r16, r30
    5a4a:	60 91 af 1a 	lds	r22, 0x1AAF	; 0x801aaf <__iob+0x2>
    5a4e:	70 91 b0 1a 	lds	r23, 0x1AB0	; 0x801ab0 <__iob+0x3>
    5a52:	db 01       	movw	r26, r22
    5a54:	18 96       	adiw	r26, 0x08	; 8
    5a56:	ed 91       	ld	r30, X+
    5a58:	fc 91       	ld	r31, X
    5a5a:	19 97       	sbiw	r26, 0x09	; 9
    5a5c:	88 23       	and	r24, r24
    5a5e:	31 f0       	breq	.+12     	; 0x5a6c <puts+0x44>
    5a60:	19 95       	eicall
    5a62:	89 2b       	or	r24, r25
    5a64:	79 f3       	breq	.-34     	; 0x5a44 <puts+0x1c>
    5a66:	df ef       	ldi	r29, 0xFF	; 255
    5a68:	cf ef       	ldi	r28, 0xFF	; 255
    5a6a:	ec cf       	rjmp	.-40     	; 0x5a44 <puts+0x1c>
    5a6c:	8a e0       	ldi	r24, 0x0A	; 10
    5a6e:	19 95       	eicall
    5a70:	89 2b       	or	r24, r25
    5a72:	19 f0       	breq	.+6      	; 0x5a7a <puts+0x52>
    5a74:	8f ef       	ldi	r24, 0xFF	; 255
    5a76:	9f ef       	ldi	r25, 0xFF	; 255
    5a78:	02 c0       	rjmp	.+4      	; 0x5a7e <puts+0x56>
    5a7a:	8d 2f       	mov	r24, r29
    5a7c:	9c 2f       	mov	r25, r28
    5a7e:	df 91       	pop	r29
    5a80:	cf 91       	pop	r28
    5a82:	1f 91       	pop	r17
    5a84:	0f 91       	pop	r16
    5a86:	08 95       	ret

00005a88 <sprintf>:
    5a88:	0f 93       	push	r16
    5a8a:	1f 93       	push	r17
    5a8c:	cf 93       	push	r28
    5a8e:	df 93       	push	r29
    5a90:	cd b7       	in	r28, 0x3d	; 61
    5a92:	de b7       	in	r29, 0x3e	; 62
    5a94:	2e 97       	sbiw	r28, 0x0e	; 14
    5a96:	0f b6       	in	r0, 0x3f	; 63
    5a98:	f8 94       	cli
    5a9a:	de bf       	out	0x3e, r29	; 62
    5a9c:	0f be       	out	0x3f, r0	; 63
    5a9e:	cd bf       	out	0x3d, r28	; 61
    5aa0:	0e 89       	ldd	r16, Y+22	; 0x16
    5aa2:	1f 89       	ldd	r17, Y+23	; 0x17
    5aa4:	86 e0       	ldi	r24, 0x06	; 6
    5aa6:	8c 83       	std	Y+4, r24	; 0x04
    5aa8:	1a 83       	std	Y+2, r17	; 0x02
    5aaa:	09 83       	std	Y+1, r16	; 0x01
    5aac:	8f ef       	ldi	r24, 0xFF	; 255
    5aae:	9f e7       	ldi	r25, 0x7F	; 127
    5ab0:	9e 83       	std	Y+6, r25	; 0x06
    5ab2:	8d 83       	std	Y+5, r24	; 0x05
    5ab4:	ae 01       	movw	r20, r28
    5ab6:	46 5e       	subi	r20, 0xE6	; 230
    5ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    5aba:	68 8d       	ldd	r22, Y+24	; 0x18
    5abc:	79 8d       	ldd	r23, Y+25	; 0x19
    5abe:	ce 01       	movw	r24, r28
    5ac0:	01 96       	adiw	r24, 0x01	; 1
    5ac2:	10 d0       	rcall	.+32     	; 0x5ae4 <vfprintf>
    5ac4:	ef 81       	ldd	r30, Y+7	; 0x07
    5ac6:	f8 85       	ldd	r31, Y+8	; 0x08
    5ac8:	e0 0f       	add	r30, r16
    5aca:	f1 1f       	adc	r31, r17
    5acc:	10 82       	st	Z, r1
    5ace:	2e 96       	adiw	r28, 0x0e	; 14
    5ad0:	0f b6       	in	r0, 0x3f	; 63
    5ad2:	f8 94       	cli
    5ad4:	de bf       	out	0x3e, r29	; 62
    5ad6:	0f be       	out	0x3f, r0	; 63
    5ad8:	cd bf       	out	0x3d, r28	; 61
    5ada:	df 91       	pop	r29
    5adc:	cf 91       	pop	r28
    5ade:	1f 91       	pop	r17
    5ae0:	0f 91       	pop	r16
    5ae2:	08 95       	ret

00005ae4 <vfprintf>:
    5ae4:	2f 92       	push	r2
    5ae6:	3f 92       	push	r3
    5ae8:	4f 92       	push	r4
    5aea:	5f 92       	push	r5
    5aec:	6f 92       	push	r6
    5aee:	7f 92       	push	r7
    5af0:	8f 92       	push	r8
    5af2:	9f 92       	push	r9
    5af4:	af 92       	push	r10
    5af6:	bf 92       	push	r11
    5af8:	cf 92       	push	r12
    5afa:	df 92       	push	r13
    5afc:	ef 92       	push	r14
    5afe:	ff 92       	push	r15
    5b00:	0f 93       	push	r16
    5b02:	1f 93       	push	r17
    5b04:	cf 93       	push	r28
    5b06:	df 93       	push	r29
    5b08:	cd b7       	in	r28, 0x3d	; 61
    5b0a:	de b7       	in	r29, 0x3e	; 62
    5b0c:	2b 97       	sbiw	r28, 0x0b	; 11
    5b0e:	0f b6       	in	r0, 0x3f	; 63
    5b10:	f8 94       	cli
    5b12:	de bf       	out	0x3e, r29	; 62
    5b14:	0f be       	out	0x3f, r0	; 63
    5b16:	cd bf       	out	0x3d, r28	; 61
    5b18:	6c 01       	movw	r12, r24
    5b1a:	7b 01       	movw	r14, r22
    5b1c:	8a 01       	movw	r16, r20
    5b1e:	fc 01       	movw	r30, r24
    5b20:	17 82       	std	Z+7, r1	; 0x07
    5b22:	16 82       	std	Z+6, r1	; 0x06
    5b24:	83 81       	ldd	r24, Z+3	; 0x03
    5b26:	81 ff       	sbrs	r24, 1
    5b28:	bf c1       	rjmp	.+894    	; 0x5ea8 <vfprintf+0x3c4>
    5b2a:	ce 01       	movw	r24, r28
    5b2c:	01 96       	adiw	r24, 0x01	; 1
    5b2e:	3c 01       	movw	r6, r24
    5b30:	f6 01       	movw	r30, r12
    5b32:	93 81       	ldd	r25, Z+3	; 0x03
    5b34:	f7 01       	movw	r30, r14
    5b36:	93 fd       	sbrc	r25, 3
    5b38:	85 91       	lpm	r24, Z+
    5b3a:	93 ff       	sbrs	r25, 3
    5b3c:	81 91       	ld	r24, Z+
    5b3e:	7f 01       	movw	r14, r30
    5b40:	88 23       	and	r24, r24
    5b42:	09 f4       	brne	.+2      	; 0x5b46 <vfprintf+0x62>
    5b44:	ad c1       	rjmp	.+858    	; 0x5ea0 <vfprintf+0x3bc>
    5b46:	85 32       	cpi	r24, 0x25	; 37
    5b48:	39 f4       	brne	.+14     	; 0x5b58 <vfprintf+0x74>
    5b4a:	93 fd       	sbrc	r25, 3
    5b4c:	85 91       	lpm	r24, Z+
    5b4e:	93 ff       	sbrs	r25, 3
    5b50:	81 91       	ld	r24, Z+
    5b52:	7f 01       	movw	r14, r30
    5b54:	85 32       	cpi	r24, 0x25	; 37
    5b56:	21 f4       	brne	.+8      	; 0x5b60 <vfprintf+0x7c>
    5b58:	b6 01       	movw	r22, r12
    5b5a:	90 e0       	ldi	r25, 0x00	; 0
    5b5c:	d6 d1       	rcall	.+940    	; 0x5f0a <fputc>
    5b5e:	e8 cf       	rjmp	.-48     	; 0x5b30 <vfprintf+0x4c>
    5b60:	91 2c       	mov	r9, r1
    5b62:	21 2c       	mov	r2, r1
    5b64:	31 2c       	mov	r3, r1
    5b66:	ff e1       	ldi	r31, 0x1F	; 31
    5b68:	f3 15       	cp	r31, r3
    5b6a:	d8 f0       	brcs	.+54     	; 0x5ba2 <vfprintf+0xbe>
    5b6c:	8b 32       	cpi	r24, 0x2B	; 43
    5b6e:	79 f0       	breq	.+30     	; 0x5b8e <vfprintf+0xaa>
    5b70:	38 f4       	brcc	.+14     	; 0x5b80 <vfprintf+0x9c>
    5b72:	80 32       	cpi	r24, 0x20	; 32
    5b74:	79 f0       	breq	.+30     	; 0x5b94 <vfprintf+0xb0>
    5b76:	83 32       	cpi	r24, 0x23	; 35
    5b78:	a1 f4       	brne	.+40     	; 0x5ba2 <vfprintf+0xbe>
    5b7a:	23 2d       	mov	r18, r3
    5b7c:	20 61       	ori	r18, 0x10	; 16
    5b7e:	1d c0       	rjmp	.+58     	; 0x5bba <vfprintf+0xd6>
    5b80:	8d 32       	cpi	r24, 0x2D	; 45
    5b82:	61 f0       	breq	.+24     	; 0x5b9c <vfprintf+0xb8>
    5b84:	80 33       	cpi	r24, 0x30	; 48
    5b86:	69 f4       	brne	.+26     	; 0x5ba2 <vfprintf+0xbe>
    5b88:	23 2d       	mov	r18, r3
    5b8a:	21 60       	ori	r18, 0x01	; 1
    5b8c:	16 c0       	rjmp	.+44     	; 0x5bba <vfprintf+0xd6>
    5b8e:	83 2d       	mov	r24, r3
    5b90:	82 60       	ori	r24, 0x02	; 2
    5b92:	38 2e       	mov	r3, r24
    5b94:	e3 2d       	mov	r30, r3
    5b96:	e4 60       	ori	r30, 0x04	; 4
    5b98:	3e 2e       	mov	r3, r30
    5b9a:	2a c0       	rjmp	.+84     	; 0x5bf0 <vfprintf+0x10c>
    5b9c:	f3 2d       	mov	r31, r3
    5b9e:	f8 60       	ori	r31, 0x08	; 8
    5ba0:	1d c0       	rjmp	.+58     	; 0x5bdc <vfprintf+0xf8>
    5ba2:	37 fc       	sbrc	r3, 7
    5ba4:	2d c0       	rjmp	.+90     	; 0x5c00 <vfprintf+0x11c>
    5ba6:	20 ed       	ldi	r18, 0xD0	; 208
    5ba8:	28 0f       	add	r18, r24
    5baa:	2a 30       	cpi	r18, 0x0A	; 10
    5bac:	40 f0       	brcs	.+16     	; 0x5bbe <vfprintf+0xda>
    5bae:	8e 32       	cpi	r24, 0x2E	; 46
    5bb0:	b9 f4       	brne	.+46     	; 0x5be0 <vfprintf+0xfc>
    5bb2:	36 fc       	sbrc	r3, 6
    5bb4:	75 c1       	rjmp	.+746    	; 0x5ea0 <vfprintf+0x3bc>
    5bb6:	23 2d       	mov	r18, r3
    5bb8:	20 64       	ori	r18, 0x40	; 64
    5bba:	32 2e       	mov	r3, r18
    5bbc:	19 c0       	rjmp	.+50     	; 0x5bf0 <vfprintf+0x10c>
    5bbe:	36 fe       	sbrs	r3, 6
    5bc0:	06 c0       	rjmp	.+12     	; 0x5bce <vfprintf+0xea>
    5bc2:	8a e0       	ldi	r24, 0x0A	; 10
    5bc4:	98 9e       	mul	r9, r24
    5bc6:	20 0d       	add	r18, r0
    5bc8:	11 24       	eor	r1, r1
    5bca:	92 2e       	mov	r9, r18
    5bcc:	11 c0       	rjmp	.+34     	; 0x5bf0 <vfprintf+0x10c>
    5bce:	ea e0       	ldi	r30, 0x0A	; 10
    5bd0:	2e 9e       	mul	r2, r30
    5bd2:	20 0d       	add	r18, r0
    5bd4:	11 24       	eor	r1, r1
    5bd6:	22 2e       	mov	r2, r18
    5bd8:	f3 2d       	mov	r31, r3
    5bda:	f0 62       	ori	r31, 0x20	; 32
    5bdc:	3f 2e       	mov	r3, r31
    5bde:	08 c0       	rjmp	.+16     	; 0x5bf0 <vfprintf+0x10c>
    5be0:	8c 36       	cpi	r24, 0x6C	; 108
    5be2:	21 f4       	brne	.+8      	; 0x5bec <vfprintf+0x108>
    5be4:	83 2d       	mov	r24, r3
    5be6:	80 68       	ori	r24, 0x80	; 128
    5be8:	38 2e       	mov	r3, r24
    5bea:	02 c0       	rjmp	.+4      	; 0x5bf0 <vfprintf+0x10c>
    5bec:	88 36       	cpi	r24, 0x68	; 104
    5bee:	41 f4       	brne	.+16     	; 0x5c00 <vfprintf+0x11c>
    5bf0:	f7 01       	movw	r30, r14
    5bf2:	93 fd       	sbrc	r25, 3
    5bf4:	85 91       	lpm	r24, Z+
    5bf6:	93 ff       	sbrs	r25, 3
    5bf8:	81 91       	ld	r24, Z+
    5bfa:	7f 01       	movw	r14, r30
    5bfc:	81 11       	cpse	r24, r1
    5bfe:	b3 cf       	rjmp	.-154    	; 0x5b66 <vfprintf+0x82>
    5c00:	98 2f       	mov	r25, r24
    5c02:	9f 7d       	andi	r25, 0xDF	; 223
    5c04:	95 54       	subi	r25, 0x45	; 69
    5c06:	93 30       	cpi	r25, 0x03	; 3
    5c08:	28 f4       	brcc	.+10     	; 0x5c14 <vfprintf+0x130>
    5c0a:	0c 5f       	subi	r16, 0xFC	; 252
    5c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    5c0e:	9f e3       	ldi	r25, 0x3F	; 63
    5c10:	99 83       	std	Y+1, r25	; 0x01
    5c12:	0d c0       	rjmp	.+26     	; 0x5c2e <vfprintf+0x14a>
    5c14:	83 36       	cpi	r24, 0x63	; 99
    5c16:	31 f0       	breq	.+12     	; 0x5c24 <vfprintf+0x140>
    5c18:	83 37       	cpi	r24, 0x73	; 115
    5c1a:	71 f0       	breq	.+28     	; 0x5c38 <vfprintf+0x154>
    5c1c:	83 35       	cpi	r24, 0x53	; 83
    5c1e:	09 f0       	breq	.+2      	; 0x5c22 <vfprintf+0x13e>
    5c20:	55 c0       	rjmp	.+170    	; 0x5ccc <vfprintf+0x1e8>
    5c22:	20 c0       	rjmp	.+64     	; 0x5c64 <vfprintf+0x180>
    5c24:	f8 01       	movw	r30, r16
    5c26:	80 81       	ld	r24, Z
    5c28:	89 83       	std	Y+1, r24	; 0x01
    5c2a:	0e 5f       	subi	r16, 0xFE	; 254
    5c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    5c2e:	88 24       	eor	r8, r8
    5c30:	83 94       	inc	r8
    5c32:	91 2c       	mov	r9, r1
    5c34:	53 01       	movw	r10, r6
    5c36:	12 c0       	rjmp	.+36     	; 0x5c5c <vfprintf+0x178>
    5c38:	28 01       	movw	r4, r16
    5c3a:	f2 e0       	ldi	r31, 0x02	; 2
    5c3c:	4f 0e       	add	r4, r31
    5c3e:	51 1c       	adc	r5, r1
    5c40:	f8 01       	movw	r30, r16
    5c42:	a0 80       	ld	r10, Z
    5c44:	b1 80       	ldd	r11, Z+1	; 0x01
    5c46:	36 fe       	sbrs	r3, 6
    5c48:	03 c0       	rjmp	.+6      	; 0x5c50 <vfprintf+0x16c>
    5c4a:	69 2d       	mov	r22, r9
    5c4c:	70 e0       	ldi	r23, 0x00	; 0
    5c4e:	02 c0       	rjmp	.+4      	; 0x5c54 <vfprintf+0x170>
    5c50:	6f ef       	ldi	r22, 0xFF	; 255
    5c52:	7f ef       	ldi	r23, 0xFF	; 255
    5c54:	c5 01       	movw	r24, r10
    5c56:	4e d1       	rcall	.+668    	; 0x5ef4 <strnlen>
    5c58:	4c 01       	movw	r8, r24
    5c5a:	82 01       	movw	r16, r4
    5c5c:	f3 2d       	mov	r31, r3
    5c5e:	ff 77       	andi	r31, 0x7F	; 127
    5c60:	3f 2e       	mov	r3, r31
    5c62:	15 c0       	rjmp	.+42     	; 0x5c8e <vfprintf+0x1aa>
    5c64:	28 01       	movw	r4, r16
    5c66:	22 e0       	ldi	r18, 0x02	; 2
    5c68:	42 0e       	add	r4, r18
    5c6a:	51 1c       	adc	r5, r1
    5c6c:	f8 01       	movw	r30, r16
    5c6e:	a0 80       	ld	r10, Z
    5c70:	b1 80       	ldd	r11, Z+1	; 0x01
    5c72:	36 fe       	sbrs	r3, 6
    5c74:	03 c0       	rjmp	.+6      	; 0x5c7c <vfprintf+0x198>
    5c76:	69 2d       	mov	r22, r9
    5c78:	70 e0       	ldi	r23, 0x00	; 0
    5c7a:	02 c0       	rjmp	.+4      	; 0x5c80 <vfprintf+0x19c>
    5c7c:	6f ef       	ldi	r22, 0xFF	; 255
    5c7e:	7f ef       	ldi	r23, 0xFF	; 255
    5c80:	c5 01       	movw	r24, r10
    5c82:	2d d1       	rcall	.+602    	; 0x5ede <strnlen_P>
    5c84:	4c 01       	movw	r8, r24
    5c86:	f3 2d       	mov	r31, r3
    5c88:	f0 68       	ori	r31, 0x80	; 128
    5c8a:	3f 2e       	mov	r3, r31
    5c8c:	82 01       	movw	r16, r4
    5c8e:	33 fc       	sbrc	r3, 3
    5c90:	19 c0       	rjmp	.+50     	; 0x5cc4 <vfprintf+0x1e0>
    5c92:	82 2d       	mov	r24, r2
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	88 16       	cp	r8, r24
    5c98:	99 06       	cpc	r9, r25
    5c9a:	a0 f4       	brcc	.+40     	; 0x5cc4 <vfprintf+0x1e0>
    5c9c:	b6 01       	movw	r22, r12
    5c9e:	80 e2       	ldi	r24, 0x20	; 32
    5ca0:	90 e0       	ldi	r25, 0x00	; 0
    5ca2:	33 d1       	rcall	.+614    	; 0x5f0a <fputc>
    5ca4:	2a 94       	dec	r2
    5ca6:	f5 cf       	rjmp	.-22     	; 0x5c92 <vfprintf+0x1ae>
    5ca8:	f5 01       	movw	r30, r10
    5caa:	37 fc       	sbrc	r3, 7
    5cac:	85 91       	lpm	r24, Z+
    5cae:	37 fe       	sbrs	r3, 7
    5cb0:	81 91       	ld	r24, Z+
    5cb2:	5f 01       	movw	r10, r30
    5cb4:	b6 01       	movw	r22, r12
    5cb6:	90 e0       	ldi	r25, 0x00	; 0
    5cb8:	28 d1       	rcall	.+592    	; 0x5f0a <fputc>
    5cba:	21 10       	cpse	r2, r1
    5cbc:	2a 94       	dec	r2
    5cbe:	21 e0       	ldi	r18, 0x01	; 1
    5cc0:	82 1a       	sub	r8, r18
    5cc2:	91 08       	sbc	r9, r1
    5cc4:	81 14       	cp	r8, r1
    5cc6:	91 04       	cpc	r9, r1
    5cc8:	79 f7       	brne	.-34     	; 0x5ca8 <vfprintf+0x1c4>
    5cca:	e1 c0       	rjmp	.+450    	; 0x5e8e <vfprintf+0x3aa>
    5ccc:	84 36       	cpi	r24, 0x64	; 100
    5cce:	11 f0       	breq	.+4      	; 0x5cd4 <vfprintf+0x1f0>
    5cd0:	89 36       	cpi	r24, 0x69	; 105
    5cd2:	39 f5       	brne	.+78     	; 0x5d22 <vfprintf+0x23e>
    5cd4:	f8 01       	movw	r30, r16
    5cd6:	37 fe       	sbrs	r3, 7
    5cd8:	07 c0       	rjmp	.+14     	; 0x5ce8 <vfprintf+0x204>
    5cda:	60 81       	ld	r22, Z
    5cdc:	71 81       	ldd	r23, Z+1	; 0x01
    5cde:	82 81       	ldd	r24, Z+2	; 0x02
    5ce0:	93 81       	ldd	r25, Z+3	; 0x03
    5ce2:	0c 5f       	subi	r16, 0xFC	; 252
    5ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    5ce6:	08 c0       	rjmp	.+16     	; 0x5cf8 <vfprintf+0x214>
    5ce8:	60 81       	ld	r22, Z
    5cea:	71 81       	ldd	r23, Z+1	; 0x01
    5cec:	07 2e       	mov	r0, r23
    5cee:	00 0c       	add	r0, r0
    5cf0:	88 0b       	sbc	r24, r24
    5cf2:	99 0b       	sbc	r25, r25
    5cf4:	0e 5f       	subi	r16, 0xFE	; 254
    5cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    5cf8:	f3 2d       	mov	r31, r3
    5cfa:	ff 76       	andi	r31, 0x6F	; 111
    5cfc:	3f 2e       	mov	r3, r31
    5cfe:	97 ff       	sbrs	r25, 7
    5d00:	09 c0       	rjmp	.+18     	; 0x5d14 <vfprintf+0x230>
    5d02:	90 95       	com	r25
    5d04:	80 95       	com	r24
    5d06:	70 95       	com	r23
    5d08:	61 95       	neg	r22
    5d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d0c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d10:	f0 68       	ori	r31, 0x80	; 128
    5d12:	3f 2e       	mov	r3, r31
    5d14:	2a e0       	ldi	r18, 0x0A	; 10
    5d16:	30 e0       	ldi	r19, 0x00	; 0
    5d18:	a3 01       	movw	r20, r6
    5d1a:	33 d1       	rcall	.+614    	; 0x5f82 <__ultoa_invert>
    5d1c:	88 2e       	mov	r8, r24
    5d1e:	86 18       	sub	r8, r6
    5d20:	44 c0       	rjmp	.+136    	; 0x5daa <vfprintf+0x2c6>
    5d22:	85 37       	cpi	r24, 0x75	; 117
    5d24:	31 f4       	brne	.+12     	; 0x5d32 <vfprintf+0x24e>
    5d26:	23 2d       	mov	r18, r3
    5d28:	2f 7e       	andi	r18, 0xEF	; 239
    5d2a:	b2 2e       	mov	r11, r18
    5d2c:	2a e0       	ldi	r18, 0x0A	; 10
    5d2e:	30 e0       	ldi	r19, 0x00	; 0
    5d30:	25 c0       	rjmp	.+74     	; 0x5d7c <vfprintf+0x298>
    5d32:	93 2d       	mov	r25, r3
    5d34:	99 7f       	andi	r25, 0xF9	; 249
    5d36:	b9 2e       	mov	r11, r25
    5d38:	8f 36       	cpi	r24, 0x6F	; 111
    5d3a:	c1 f0       	breq	.+48     	; 0x5d6c <vfprintf+0x288>
    5d3c:	18 f4       	brcc	.+6      	; 0x5d44 <vfprintf+0x260>
    5d3e:	88 35       	cpi	r24, 0x58	; 88
    5d40:	79 f0       	breq	.+30     	; 0x5d60 <vfprintf+0x27c>
    5d42:	ae c0       	rjmp	.+348    	; 0x5ea0 <vfprintf+0x3bc>
    5d44:	80 37       	cpi	r24, 0x70	; 112
    5d46:	19 f0       	breq	.+6      	; 0x5d4e <vfprintf+0x26a>
    5d48:	88 37       	cpi	r24, 0x78	; 120
    5d4a:	21 f0       	breq	.+8      	; 0x5d54 <vfprintf+0x270>
    5d4c:	a9 c0       	rjmp	.+338    	; 0x5ea0 <vfprintf+0x3bc>
    5d4e:	e9 2f       	mov	r30, r25
    5d50:	e0 61       	ori	r30, 0x10	; 16
    5d52:	be 2e       	mov	r11, r30
    5d54:	b4 fe       	sbrs	r11, 4
    5d56:	0d c0       	rjmp	.+26     	; 0x5d72 <vfprintf+0x28e>
    5d58:	fb 2d       	mov	r31, r11
    5d5a:	f4 60       	ori	r31, 0x04	; 4
    5d5c:	bf 2e       	mov	r11, r31
    5d5e:	09 c0       	rjmp	.+18     	; 0x5d72 <vfprintf+0x28e>
    5d60:	34 fe       	sbrs	r3, 4
    5d62:	0a c0       	rjmp	.+20     	; 0x5d78 <vfprintf+0x294>
    5d64:	29 2f       	mov	r18, r25
    5d66:	26 60       	ori	r18, 0x06	; 6
    5d68:	b2 2e       	mov	r11, r18
    5d6a:	06 c0       	rjmp	.+12     	; 0x5d78 <vfprintf+0x294>
    5d6c:	28 e0       	ldi	r18, 0x08	; 8
    5d6e:	30 e0       	ldi	r19, 0x00	; 0
    5d70:	05 c0       	rjmp	.+10     	; 0x5d7c <vfprintf+0x298>
    5d72:	20 e1       	ldi	r18, 0x10	; 16
    5d74:	30 e0       	ldi	r19, 0x00	; 0
    5d76:	02 c0       	rjmp	.+4      	; 0x5d7c <vfprintf+0x298>
    5d78:	20 e1       	ldi	r18, 0x10	; 16
    5d7a:	32 e0       	ldi	r19, 0x02	; 2
    5d7c:	f8 01       	movw	r30, r16
    5d7e:	b7 fe       	sbrs	r11, 7
    5d80:	07 c0       	rjmp	.+14     	; 0x5d90 <vfprintf+0x2ac>
    5d82:	60 81       	ld	r22, Z
    5d84:	71 81       	ldd	r23, Z+1	; 0x01
    5d86:	82 81       	ldd	r24, Z+2	; 0x02
    5d88:	93 81       	ldd	r25, Z+3	; 0x03
    5d8a:	0c 5f       	subi	r16, 0xFC	; 252
    5d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    5d8e:	06 c0       	rjmp	.+12     	; 0x5d9c <vfprintf+0x2b8>
    5d90:	60 81       	ld	r22, Z
    5d92:	71 81       	ldd	r23, Z+1	; 0x01
    5d94:	80 e0       	ldi	r24, 0x00	; 0
    5d96:	90 e0       	ldi	r25, 0x00	; 0
    5d98:	0e 5f       	subi	r16, 0xFE	; 254
    5d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    5d9c:	a3 01       	movw	r20, r6
    5d9e:	f1 d0       	rcall	.+482    	; 0x5f82 <__ultoa_invert>
    5da0:	88 2e       	mov	r8, r24
    5da2:	86 18       	sub	r8, r6
    5da4:	fb 2d       	mov	r31, r11
    5da6:	ff 77       	andi	r31, 0x7F	; 127
    5da8:	3f 2e       	mov	r3, r31
    5daa:	36 fe       	sbrs	r3, 6
    5dac:	0d c0       	rjmp	.+26     	; 0x5dc8 <vfprintf+0x2e4>
    5dae:	23 2d       	mov	r18, r3
    5db0:	2e 7f       	andi	r18, 0xFE	; 254
    5db2:	a2 2e       	mov	r10, r18
    5db4:	89 14       	cp	r8, r9
    5db6:	58 f4       	brcc	.+22     	; 0x5dce <vfprintf+0x2ea>
    5db8:	34 fe       	sbrs	r3, 4
    5dba:	0b c0       	rjmp	.+22     	; 0x5dd2 <vfprintf+0x2ee>
    5dbc:	32 fc       	sbrc	r3, 2
    5dbe:	09 c0       	rjmp	.+18     	; 0x5dd2 <vfprintf+0x2ee>
    5dc0:	83 2d       	mov	r24, r3
    5dc2:	8e 7e       	andi	r24, 0xEE	; 238
    5dc4:	a8 2e       	mov	r10, r24
    5dc6:	05 c0       	rjmp	.+10     	; 0x5dd2 <vfprintf+0x2ee>
    5dc8:	b8 2c       	mov	r11, r8
    5dca:	a3 2c       	mov	r10, r3
    5dcc:	03 c0       	rjmp	.+6      	; 0x5dd4 <vfprintf+0x2f0>
    5dce:	b8 2c       	mov	r11, r8
    5dd0:	01 c0       	rjmp	.+2      	; 0x5dd4 <vfprintf+0x2f0>
    5dd2:	b9 2c       	mov	r11, r9
    5dd4:	a4 fe       	sbrs	r10, 4
    5dd6:	0f c0       	rjmp	.+30     	; 0x5df6 <vfprintf+0x312>
    5dd8:	fe 01       	movw	r30, r28
    5dda:	e8 0d       	add	r30, r8
    5ddc:	f1 1d       	adc	r31, r1
    5dde:	80 81       	ld	r24, Z
    5de0:	80 33       	cpi	r24, 0x30	; 48
    5de2:	21 f4       	brne	.+8      	; 0x5dec <vfprintf+0x308>
    5de4:	9a 2d       	mov	r25, r10
    5de6:	99 7e       	andi	r25, 0xE9	; 233
    5de8:	a9 2e       	mov	r10, r25
    5dea:	09 c0       	rjmp	.+18     	; 0x5dfe <vfprintf+0x31a>
    5dec:	a2 fe       	sbrs	r10, 2
    5dee:	06 c0       	rjmp	.+12     	; 0x5dfc <vfprintf+0x318>
    5df0:	b3 94       	inc	r11
    5df2:	b3 94       	inc	r11
    5df4:	04 c0       	rjmp	.+8      	; 0x5dfe <vfprintf+0x31a>
    5df6:	8a 2d       	mov	r24, r10
    5df8:	86 78       	andi	r24, 0x86	; 134
    5dfa:	09 f0       	breq	.+2      	; 0x5dfe <vfprintf+0x31a>
    5dfc:	b3 94       	inc	r11
    5dfe:	a3 fc       	sbrc	r10, 3
    5e00:	10 c0       	rjmp	.+32     	; 0x5e22 <vfprintf+0x33e>
    5e02:	a0 fe       	sbrs	r10, 0
    5e04:	06 c0       	rjmp	.+12     	; 0x5e12 <vfprintf+0x32e>
    5e06:	b2 14       	cp	r11, r2
    5e08:	80 f4       	brcc	.+32     	; 0x5e2a <vfprintf+0x346>
    5e0a:	28 0c       	add	r2, r8
    5e0c:	92 2c       	mov	r9, r2
    5e0e:	9b 18       	sub	r9, r11
    5e10:	0d c0       	rjmp	.+26     	; 0x5e2c <vfprintf+0x348>
    5e12:	b2 14       	cp	r11, r2
    5e14:	58 f4       	brcc	.+22     	; 0x5e2c <vfprintf+0x348>
    5e16:	b6 01       	movw	r22, r12
    5e18:	80 e2       	ldi	r24, 0x20	; 32
    5e1a:	90 e0       	ldi	r25, 0x00	; 0
    5e1c:	76 d0       	rcall	.+236    	; 0x5f0a <fputc>
    5e1e:	b3 94       	inc	r11
    5e20:	f8 cf       	rjmp	.-16     	; 0x5e12 <vfprintf+0x32e>
    5e22:	b2 14       	cp	r11, r2
    5e24:	18 f4       	brcc	.+6      	; 0x5e2c <vfprintf+0x348>
    5e26:	2b 18       	sub	r2, r11
    5e28:	02 c0       	rjmp	.+4      	; 0x5e2e <vfprintf+0x34a>
    5e2a:	98 2c       	mov	r9, r8
    5e2c:	21 2c       	mov	r2, r1
    5e2e:	a4 fe       	sbrs	r10, 4
    5e30:	0f c0       	rjmp	.+30     	; 0x5e50 <vfprintf+0x36c>
    5e32:	b6 01       	movw	r22, r12
    5e34:	80 e3       	ldi	r24, 0x30	; 48
    5e36:	90 e0       	ldi	r25, 0x00	; 0
    5e38:	68 d0       	rcall	.+208    	; 0x5f0a <fputc>
    5e3a:	a2 fe       	sbrs	r10, 2
    5e3c:	16 c0       	rjmp	.+44     	; 0x5e6a <vfprintf+0x386>
    5e3e:	a1 fc       	sbrc	r10, 1
    5e40:	03 c0       	rjmp	.+6      	; 0x5e48 <vfprintf+0x364>
    5e42:	88 e7       	ldi	r24, 0x78	; 120
    5e44:	90 e0       	ldi	r25, 0x00	; 0
    5e46:	02 c0       	rjmp	.+4      	; 0x5e4c <vfprintf+0x368>
    5e48:	88 e5       	ldi	r24, 0x58	; 88
    5e4a:	90 e0       	ldi	r25, 0x00	; 0
    5e4c:	b6 01       	movw	r22, r12
    5e4e:	0c c0       	rjmp	.+24     	; 0x5e68 <vfprintf+0x384>
    5e50:	8a 2d       	mov	r24, r10
    5e52:	86 78       	andi	r24, 0x86	; 134
    5e54:	51 f0       	breq	.+20     	; 0x5e6a <vfprintf+0x386>
    5e56:	a1 fe       	sbrs	r10, 1
    5e58:	02 c0       	rjmp	.+4      	; 0x5e5e <vfprintf+0x37a>
    5e5a:	8b e2       	ldi	r24, 0x2B	; 43
    5e5c:	01 c0       	rjmp	.+2      	; 0x5e60 <vfprintf+0x37c>
    5e5e:	80 e2       	ldi	r24, 0x20	; 32
    5e60:	a7 fc       	sbrc	r10, 7
    5e62:	8d e2       	ldi	r24, 0x2D	; 45
    5e64:	b6 01       	movw	r22, r12
    5e66:	90 e0       	ldi	r25, 0x00	; 0
    5e68:	50 d0       	rcall	.+160    	; 0x5f0a <fputc>
    5e6a:	89 14       	cp	r8, r9
    5e6c:	30 f4       	brcc	.+12     	; 0x5e7a <vfprintf+0x396>
    5e6e:	b6 01       	movw	r22, r12
    5e70:	80 e3       	ldi	r24, 0x30	; 48
    5e72:	90 e0       	ldi	r25, 0x00	; 0
    5e74:	4a d0       	rcall	.+148    	; 0x5f0a <fputc>
    5e76:	9a 94       	dec	r9
    5e78:	f8 cf       	rjmp	.-16     	; 0x5e6a <vfprintf+0x386>
    5e7a:	8a 94       	dec	r8
    5e7c:	f3 01       	movw	r30, r6
    5e7e:	e8 0d       	add	r30, r8
    5e80:	f1 1d       	adc	r31, r1
    5e82:	80 81       	ld	r24, Z
    5e84:	b6 01       	movw	r22, r12
    5e86:	90 e0       	ldi	r25, 0x00	; 0
    5e88:	40 d0       	rcall	.+128    	; 0x5f0a <fputc>
    5e8a:	81 10       	cpse	r8, r1
    5e8c:	f6 cf       	rjmp	.-20     	; 0x5e7a <vfprintf+0x396>
    5e8e:	22 20       	and	r2, r2
    5e90:	09 f4       	brne	.+2      	; 0x5e94 <vfprintf+0x3b0>
    5e92:	4e ce       	rjmp	.-868    	; 0x5b30 <vfprintf+0x4c>
    5e94:	b6 01       	movw	r22, r12
    5e96:	80 e2       	ldi	r24, 0x20	; 32
    5e98:	90 e0       	ldi	r25, 0x00	; 0
    5e9a:	37 d0       	rcall	.+110    	; 0x5f0a <fputc>
    5e9c:	2a 94       	dec	r2
    5e9e:	f7 cf       	rjmp	.-18     	; 0x5e8e <vfprintf+0x3aa>
    5ea0:	f6 01       	movw	r30, r12
    5ea2:	86 81       	ldd	r24, Z+6	; 0x06
    5ea4:	97 81       	ldd	r25, Z+7	; 0x07
    5ea6:	02 c0       	rjmp	.+4      	; 0x5eac <vfprintf+0x3c8>
    5ea8:	8f ef       	ldi	r24, 0xFF	; 255
    5eaa:	9f ef       	ldi	r25, 0xFF	; 255
    5eac:	2b 96       	adiw	r28, 0x0b	; 11
    5eae:	0f b6       	in	r0, 0x3f	; 63
    5eb0:	f8 94       	cli
    5eb2:	de bf       	out	0x3e, r29	; 62
    5eb4:	0f be       	out	0x3f, r0	; 63
    5eb6:	cd bf       	out	0x3d, r28	; 61
    5eb8:	df 91       	pop	r29
    5eba:	cf 91       	pop	r28
    5ebc:	1f 91       	pop	r17
    5ebe:	0f 91       	pop	r16
    5ec0:	ff 90       	pop	r15
    5ec2:	ef 90       	pop	r14
    5ec4:	df 90       	pop	r13
    5ec6:	cf 90       	pop	r12
    5ec8:	bf 90       	pop	r11
    5eca:	af 90       	pop	r10
    5ecc:	9f 90       	pop	r9
    5ece:	8f 90       	pop	r8
    5ed0:	7f 90       	pop	r7
    5ed2:	6f 90       	pop	r6
    5ed4:	5f 90       	pop	r5
    5ed6:	4f 90       	pop	r4
    5ed8:	3f 90       	pop	r3
    5eda:	2f 90       	pop	r2
    5edc:	08 95       	ret

00005ede <strnlen_P>:
    5ede:	fc 01       	movw	r30, r24
    5ee0:	05 90       	lpm	r0, Z+
    5ee2:	61 50       	subi	r22, 0x01	; 1
    5ee4:	70 40       	sbci	r23, 0x00	; 0
    5ee6:	01 10       	cpse	r0, r1
    5ee8:	d8 f7       	brcc	.-10     	; 0x5ee0 <strnlen_P+0x2>
    5eea:	80 95       	com	r24
    5eec:	90 95       	com	r25
    5eee:	8e 0f       	add	r24, r30
    5ef0:	9f 1f       	adc	r25, r31
    5ef2:	08 95       	ret

00005ef4 <strnlen>:
    5ef4:	fc 01       	movw	r30, r24
    5ef6:	61 50       	subi	r22, 0x01	; 1
    5ef8:	70 40       	sbci	r23, 0x00	; 0
    5efa:	01 90       	ld	r0, Z+
    5efc:	01 10       	cpse	r0, r1
    5efe:	d8 f7       	brcc	.-10     	; 0x5ef6 <strnlen+0x2>
    5f00:	80 95       	com	r24
    5f02:	90 95       	com	r25
    5f04:	8e 0f       	add	r24, r30
    5f06:	9f 1f       	adc	r25, r31
    5f08:	08 95       	ret

00005f0a <fputc>:
    5f0a:	0f 93       	push	r16
    5f0c:	1f 93       	push	r17
    5f0e:	cf 93       	push	r28
    5f10:	df 93       	push	r29
    5f12:	fb 01       	movw	r30, r22
    5f14:	23 81       	ldd	r18, Z+3	; 0x03
    5f16:	21 fd       	sbrc	r18, 1
    5f18:	03 c0       	rjmp	.+6      	; 0x5f20 <fputc+0x16>
    5f1a:	8f ef       	ldi	r24, 0xFF	; 255
    5f1c:	9f ef       	ldi	r25, 0xFF	; 255
    5f1e:	2c c0       	rjmp	.+88     	; 0x5f78 <fputc+0x6e>
    5f20:	22 ff       	sbrs	r18, 2
    5f22:	16 c0       	rjmp	.+44     	; 0x5f50 <fputc+0x46>
    5f24:	46 81       	ldd	r20, Z+6	; 0x06
    5f26:	57 81       	ldd	r21, Z+7	; 0x07
    5f28:	24 81       	ldd	r18, Z+4	; 0x04
    5f2a:	35 81       	ldd	r19, Z+5	; 0x05
    5f2c:	42 17       	cp	r20, r18
    5f2e:	53 07       	cpc	r21, r19
    5f30:	44 f4       	brge	.+16     	; 0x5f42 <fputc+0x38>
    5f32:	a0 81       	ld	r26, Z
    5f34:	b1 81       	ldd	r27, Z+1	; 0x01
    5f36:	9d 01       	movw	r18, r26
    5f38:	2f 5f       	subi	r18, 0xFF	; 255
    5f3a:	3f 4f       	sbci	r19, 0xFF	; 255
    5f3c:	31 83       	std	Z+1, r19	; 0x01
    5f3e:	20 83       	st	Z, r18
    5f40:	8c 93       	st	X, r24
    5f42:	26 81       	ldd	r18, Z+6	; 0x06
    5f44:	37 81       	ldd	r19, Z+7	; 0x07
    5f46:	2f 5f       	subi	r18, 0xFF	; 255
    5f48:	3f 4f       	sbci	r19, 0xFF	; 255
    5f4a:	37 83       	std	Z+7, r19	; 0x07
    5f4c:	26 83       	std	Z+6, r18	; 0x06
    5f4e:	14 c0       	rjmp	.+40     	; 0x5f78 <fputc+0x6e>
    5f50:	8b 01       	movw	r16, r22
    5f52:	ec 01       	movw	r28, r24
    5f54:	fb 01       	movw	r30, r22
    5f56:	00 84       	ldd	r0, Z+8	; 0x08
    5f58:	f1 85       	ldd	r31, Z+9	; 0x09
    5f5a:	e0 2d       	mov	r30, r0
    5f5c:	19 95       	eicall
    5f5e:	89 2b       	or	r24, r25
    5f60:	e1 f6       	brne	.-72     	; 0x5f1a <fputc+0x10>
    5f62:	d8 01       	movw	r26, r16
    5f64:	16 96       	adiw	r26, 0x06	; 6
    5f66:	8d 91       	ld	r24, X+
    5f68:	9c 91       	ld	r25, X
    5f6a:	17 97       	sbiw	r26, 0x07	; 7
    5f6c:	01 96       	adiw	r24, 0x01	; 1
    5f6e:	17 96       	adiw	r26, 0x07	; 7
    5f70:	9c 93       	st	X, r25
    5f72:	8e 93       	st	-X, r24
    5f74:	16 97       	sbiw	r26, 0x06	; 6
    5f76:	ce 01       	movw	r24, r28
    5f78:	df 91       	pop	r29
    5f7a:	cf 91       	pop	r28
    5f7c:	1f 91       	pop	r17
    5f7e:	0f 91       	pop	r16
    5f80:	08 95       	ret

00005f82 <__ultoa_invert>:
    5f82:	fa 01       	movw	r30, r20
    5f84:	aa 27       	eor	r26, r26
    5f86:	28 30       	cpi	r18, 0x08	; 8
    5f88:	51 f1       	breq	.+84     	; 0x5fde <__ultoa_invert+0x5c>
    5f8a:	20 31       	cpi	r18, 0x10	; 16
    5f8c:	81 f1       	breq	.+96     	; 0x5fee <__ultoa_invert+0x6c>
    5f8e:	e8 94       	clt
    5f90:	6f 93       	push	r22
    5f92:	6e 7f       	andi	r22, 0xFE	; 254
    5f94:	6e 5f       	subi	r22, 0xFE	; 254
    5f96:	7f 4f       	sbci	r23, 0xFF	; 255
    5f98:	8f 4f       	sbci	r24, 0xFF	; 255
    5f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f9c:	af 4f       	sbci	r26, 0xFF	; 255
    5f9e:	b1 e0       	ldi	r27, 0x01	; 1
    5fa0:	3e d0       	rcall	.+124    	; 0x601e <__ultoa_invert+0x9c>
    5fa2:	b4 e0       	ldi	r27, 0x04	; 4
    5fa4:	3c d0       	rcall	.+120    	; 0x601e <__ultoa_invert+0x9c>
    5fa6:	67 0f       	add	r22, r23
    5fa8:	78 1f       	adc	r23, r24
    5faa:	89 1f       	adc	r24, r25
    5fac:	9a 1f       	adc	r25, r26
    5fae:	a1 1d       	adc	r26, r1
    5fb0:	68 0f       	add	r22, r24
    5fb2:	79 1f       	adc	r23, r25
    5fb4:	8a 1f       	adc	r24, r26
    5fb6:	91 1d       	adc	r25, r1
    5fb8:	a1 1d       	adc	r26, r1
    5fba:	6a 0f       	add	r22, r26
    5fbc:	71 1d       	adc	r23, r1
    5fbe:	81 1d       	adc	r24, r1
    5fc0:	91 1d       	adc	r25, r1
    5fc2:	a1 1d       	adc	r26, r1
    5fc4:	20 d0       	rcall	.+64     	; 0x6006 <__ultoa_invert+0x84>
    5fc6:	09 f4       	brne	.+2      	; 0x5fca <__ultoa_invert+0x48>
    5fc8:	68 94       	set
    5fca:	3f 91       	pop	r19
    5fcc:	2a e0       	ldi	r18, 0x0A	; 10
    5fce:	26 9f       	mul	r18, r22
    5fd0:	11 24       	eor	r1, r1
    5fd2:	30 19       	sub	r19, r0
    5fd4:	30 5d       	subi	r19, 0xD0	; 208
    5fd6:	31 93       	st	Z+, r19
    5fd8:	de f6       	brtc	.-74     	; 0x5f90 <__ultoa_invert+0xe>
    5fda:	cf 01       	movw	r24, r30
    5fdc:	08 95       	ret
    5fde:	46 2f       	mov	r20, r22
    5fe0:	47 70       	andi	r20, 0x07	; 7
    5fe2:	40 5d       	subi	r20, 0xD0	; 208
    5fe4:	41 93       	st	Z+, r20
    5fe6:	b3 e0       	ldi	r27, 0x03	; 3
    5fe8:	0f d0       	rcall	.+30     	; 0x6008 <__ultoa_invert+0x86>
    5fea:	c9 f7       	brne	.-14     	; 0x5fde <__ultoa_invert+0x5c>
    5fec:	f6 cf       	rjmp	.-20     	; 0x5fda <__ultoa_invert+0x58>
    5fee:	46 2f       	mov	r20, r22
    5ff0:	4f 70       	andi	r20, 0x0F	; 15
    5ff2:	40 5d       	subi	r20, 0xD0	; 208
    5ff4:	4a 33       	cpi	r20, 0x3A	; 58
    5ff6:	18 f0       	brcs	.+6      	; 0x5ffe <__ultoa_invert+0x7c>
    5ff8:	49 5d       	subi	r20, 0xD9	; 217
    5ffa:	31 fd       	sbrc	r19, 1
    5ffc:	40 52       	subi	r20, 0x20	; 32
    5ffe:	41 93       	st	Z+, r20
    6000:	02 d0       	rcall	.+4      	; 0x6006 <__ultoa_invert+0x84>
    6002:	a9 f7       	brne	.-22     	; 0x5fee <__ultoa_invert+0x6c>
    6004:	ea cf       	rjmp	.-44     	; 0x5fda <__ultoa_invert+0x58>
    6006:	b4 e0       	ldi	r27, 0x04	; 4
    6008:	a6 95       	lsr	r26
    600a:	97 95       	ror	r25
    600c:	87 95       	ror	r24
    600e:	77 95       	ror	r23
    6010:	67 95       	ror	r22
    6012:	ba 95       	dec	r27
    6014:	c9 f7       	brne	.-14     	; 0x6008 <__ultoa_invert+0x86>
    6016:	00 97       	sbiw	r24, 0x00	; 0
    6018:	61 05       	cpc	r22, r1
    601a:	71 05       	cpc	r23, r1
    601c:	08 95       	ret
    601e:	9b 01       	movw	r18, r22
    6020:	ac 01       	movw	r20, r24
    6022:	0a 2e       	mov	r0, r26
    6024:	06 94       	lsr	r0
    6026:	57 95       	ror	r21
    6028:	47 95       	ror	r20
    602a:	37 95       	ror	r19
    602c:	27 95       	ror	r18
    602e:	ba 95       	dec	r27
    6030:	c9 f7       	brne	.-14     	; 0x6024 <__ultoa_invert+0xa2>
    6032:	62 0f       	add	r22, r18
    6034:	73 1f       	adc	r23, r19
    6036:	84 1f       	adc	r24, r20
    6038:	95 1f       	adc	r25, r21
    603a:	a0 1d       	adc	r26, r0
    603c:	08 95       	ret

0000603e <_exit>:
    603e:	f8 94       	cli

00006040 <__stop_program>:
    6040:	ff cf       	rjmp	.-2      	; 0x6040 <__stop_program>
