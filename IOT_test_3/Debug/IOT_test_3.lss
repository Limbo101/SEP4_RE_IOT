
IOT_test_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000658  00800200  000060a4  00006138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000060a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000125a  00800858  00800858  00006790  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006790  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000067ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b20  00000000  00000000  0000682c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e542  00000000  00000000  0000734c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003975  00000000  00000000  0001588e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006b02  00000000  00000000  00019203  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000025ec  00000000  00000000  0001fd08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000043b9  00000000  00000000  000222f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000cbdc  00000000  00000000  000266ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b70  00000000  00000000  00033289  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c2       	rjmp	.+1170   	; 0x494 <__ctors_end>
       2:	00 00       	nop
       4:	68 c2       	rjmp	.+1232   	; 0x4d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c2       	rjmp	.+1228   	; 0x4d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c2       	rjmp	.+1224   	; 0x4d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c2       	rjmp	.+1220   	; 0x4d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c2       	rjmp	.+1216   	; 0x4d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c2       	rjmp	.+1212   	; 0x4d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c2       	rjmp	.+1208   	; 0x4d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c2       	rjmp	.+1204   	; 0x4d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c2       	rjmp	.+1200   	; 0x4d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c2       	rjmp	.+1196   	; 0x4d6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c2       	rjmp	.+1192   	; 0x4d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__vector_12>
      34:	50 c2       	rjmp	.+1184   	; 0x4d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c2       	rjmp	.+1180   	; 0x4d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c2       	rjmp	.+1176   	; 0x4d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c2       	rjmp	.+1172   	; 0x4d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c2       	rjmp	.+1168   	; 0x4d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c2       	rjmp	.+1164   	; 0x4d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c2       	rjmp	.+1160   	; 0x4d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c2       	rjmp	.+1156   	; 0x4d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c2       	rjmp	.+1152   	; 0x4d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c2       	rjmp	.+1148   	; 0x4d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c2       	rjmp	.+1144   	; 0x4d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c2       	rjmp	.+1140   	; 0x4d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 74 25 	jmp	0x4ae8	; 0x4ae8 <__vector_25>
      68:	0c 94 c6 25 	jmp	0x4b8c	; 0x4b8c <__vector_26>
      6c:	34 c2       	rjmp	.+1128   	; 0x4d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c2       	rjmp	.+1124   	; 0x4d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c2       	rjmp	.+1120   	; 0x4d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c2       	rjmp	.+1116   	; 0x4d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c2       	rjmp	.+1112   	; 0x4d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c2       	rjmp	.+1108   	; 0x4d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c2       	rjmp	.+1104   	; 0x4d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c2       	rjmp	.+1100   	; 0x4d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c2       	rjmp	.+1096   	; 0x4d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 0a 26 	jmp	0x4c14	; 0x4c14 <__vector_36>
      94:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <__vector_37>
      98:	1e c2       	rjmp	.+1084   	; 0x4d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 f4 28 	jmp	0x51e8	; 0x51e8 <__vector_39>
      a0:	1a c2       	rjmp	.+1076   	; 0x4d6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	18 c2       	rjmp	.+1072   	; 0x4d6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	16 c2       	rjmp	.+1068   	; 0x4d6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	14 c2       	rjmp	.+1064   	; 0x4d6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	12 c2       	rjmp	.+1060   	; 0x4d6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	10 c2       	rjmp	.+1056   	; 0x4d6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0e c2       	rjmp	.+1052   	; 0x4d6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c c2       	rjmp	.+1048   	; 0x4d6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	0a c2       	rjmp	.+1044   	; 0x4d6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	08 c2       	rjmp	.+1040   	; 0x4d6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	06 c2       	rjmp	.+1036   	; 0x4d6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 a0 26 	jmp	0x4d40	; 0x4d40 <__vector_51>
      d0:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__vector_52>
      d4:	00 c2       	rjmp	.+1024   	; 0x4d6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 36 27 	jmp	0x4e6c	; 0x4e6c <__vector_54>
      dc:	0c 94 88 27 	jmp	0x4f10	; 0x4f10 <__vector_55>
      e0:	fa c1       	rjmp	.+1012   	; 0x4d6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c0 01       	movw	r24, r0
      e6:	c0 01       	movw	r24, r0
      e8:	c0 01       	movw	r24, r0
      ea:	fa 01       	movw	r30, r20
      ec:	02 02       	muls	r16, r18
      ee:	18 02       	muls	r17, r24
      f0:	c0 01       	movw	r24, r0
      f2:	c0 01       	movw	r24, r0
      f4:	fa 01       	movw	r30, r20
      f6:	02 02       	muls	r16, r18
      f8:	16 29       	or	r17, r6
      fa:	86 29       	or	r24, r6
      fc:	86 29       	or	r24, r6
      fe:	86 29       	or	r24, r6
     100:	86 29       	or	r24, r6
     102:	86 29       	or	r24, r6
     104:	86 29       	or	r24, r6
     106:	86 29       	or	r24, r6
     108:	16 29       	or	r17, r6
     10a:	86 29       	or	r24, r6
     10c:	86 29       	or	r24, r6
     10e:	86 29       	or	r24, r6
     110:	86 29       	or	r24, r6
     112:	86 29       	or	r24, r6
     114:	86 29       	or	r24, r6
     116:	86 29       	or	r24, r6
     118:	18 29       	or	r17, r8
     11a:	86 29       	or	r24, r6
     11c:	86 29       	or	r24, r6
     11e:	86 29       	or	r24, r6
     120:	86 29       	or	r24, r6
     122:	86 29       	or	r24, r6
     124:	86 29       	or	r24, r6
     126:	86 29       	or	r24, r6
     128:	86 29       	or	r24, r6
     12a:	86 29       	or	r24, r6
     12c:	86 29       	or	r24, r6
     12e:	86 29       	or	r24, r6
     130:	86 29       	or	r24, r6
     132:	86 29       	or	r24, r6
     134:	86 29       	or	r24, r6
     136:	86 29       	or	r24, r6
     138:	18 29       	or	r17, r8
     13a:	86 29       	or	r24, r6
     13c:	86 29       	or	r24, r6
     13e:	86 29       	or	r24, r6
     140:	86 29       	or	r24, r6
     142:	86 29       	or	r24, r6
     144:	86 29       	or	r24, r6
     146:	86 29       	or	r24, r6
     148:	86 29       	or	r24, r6
     14a:	86 29       	or	r24, r6
     14c:	86 29       	or	r24, r6
     14e:	86 29       	or	r24, r6
     150:	86 29       	or	r24, r6
     152:	86 29       	or	r24, r6
     154:	86 29       	or	r24, r6
     156:	86 29       	or	r24, r6
     158:	82 29       	or	r24, r2
     15a:	86 29       	or	r24, r6
     15c:	86 29       	or	r24, r6
     15e:	86 29       	or	r24, r6
     160:	86 29       	or	r24, r6
     162:	86 29       	or	r24, r6
     164:	86 29       	or	r24, r6
     166:	86 29       	or	r24, r6
     168:	4d 29       	or	r20, r13
     16a:	86 29       	or	r24, r6
     16c:	86 29       	or	r24, r6
     16e:	86 29       	or	r24, r6
     170:	86 29       	or	r24, r6
     172:	86 29       	or	r24, r6
     174:	86 29       	or	r24, r6
     176:	86 29       	or	r24, r6
     178:	86 29       	or	r24, r6
     17a:	86 29       	or	r24, r6
     17c:	86 29       	or	r24, r6
     17e:	86 29       	or	r24, r6
     180:	86 29       	or	r24, r6
     182:	86 29       	or	r24, r6
     184:	86 29       	or	r24, r6
     186:	86 29       	or	r24, r6
     188:	41 29       	or	r20, r1
     18a:	86 29       	or	r24, r6
     18c:	86 29       	or	r24, r6
     18e:	86 29       	or	r24, r6
     190:	86 29       	or	r24, r6
     192:	86 29       	or	r24, r6
     194:	86 29       	or	r24, r6
     196:	86 29       	or	r24, r6
     198:	65 29       	or	r22, r5

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0f e9       	ldi	r16, 0x9F	; 159
     19c:	18 e1       	ldi	r17, 0x18	; 24
     19e:	0f 2e       	mov	r0, r31
     1a0:	ff ec       	ldi	r31, 0xCF	; 207
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 9e 18 	lds	r24, 0x189E	; 0x80189e <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	6b d7       	rcall	.+3798   	; 0x10a2 <uxListRemove>
     1cc:	80 91 92 18 	lds	r24, 0x1892	; 0x801892 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 92 18 	sts	0x1892, r24	; 0x801892 <uxCurrentNumberOfTasks>
     1d6:	80 91 9e 18 	lds	r24, 0x189E	; 0x80189e <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 9e 18 	sts	0x189E, r24	; 0x80189e <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e8:	b8 d6       	rcall	.+3440   	; 0xf5a <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	b6 d6       	rcall	.+3436   	; 0xf5a <vPortFree>
     1ee:	80 91 9e 18 	lds	r24, 0x189E	; 0x80189e <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	10 f0       	brcs	.+4      	; 0x202 <prvIdleTask+0x68>
     1fe:	0e 94 26 09 	call	0x124c	; 0x124c <vPortYield>
     202:	0e 94 9f 1a 	call	0x353e	; 0x353e <vApplicationIdleHook>
     206:	d1 cf       	rjmp	.-94     	; 0x1aa <prvIdleTask+0x10>

00000208 <prvTimerTask>:
     208:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     20a:	df 93       	push	r29
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	60 97       	sbiw	r28, 0x10	; 16
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	de bf       	out	0x3e, r29	; 62
     218:	0f be       	out	0x3f, r0	; 63
     21a:	cd bf       	out	0x3d, r28	; 61
     21c:	ce 01       	movw	r24, r28
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	9a 87       	std	Y+10, r25	; 0x0a
     222:	89 87       	std	Y+9, r24	; 0x09
     224:	81 2c       	mov	r8, r1
     226:	91 2c       	mov	r9, r1
     228:	a1 2c       	mov	r10, r1
     22a:	b1 2c       	mov	r11, r1
     22c:	69 84       	ldd	r6, Y+9	; 0x09
     22e:	7a 84       	ldd	r7, Y+10	; 0x0a
     230:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <pxCurrentTimerList>
     234:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <pxCurrentTimerList+0x1>
     238:	80 81       	ld	r24, Z
     23a:	88 23       	and	r24, r24
     23c:	09 f4       	brne	.+2      	; 0x240 <prvTimerTask+0x38>
     23e:	10 c1       	rjmp	.+544    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     240:	07 80       	ldd	r0, Z+7	; 0x07
     242:	f0 85       	ldd	r31, Z+8	; 0x08
     244:	e0 2d       	mov	r30, r0
     246:	20 80       	ld	r2, Z
     248:	31 80       	ldd	r3, Z+1	; 0x01
     24a:	42 80       	ldd	r4, Z+2	; 0x02
     24c:	53 80       	ldd	r5, Z+3	; 0x03
     24e:	0e 94 86 12 	call	0x250c	; 0x250c <vTaskSuspendAll>
     252:	ce 01       	movw	r24, r28
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	0e 94 09 1a 	call	0x3412	; 0x3412 <prvSampleTimeNow>
     25a:	6b 87       	std	Y+11, r22	; 0x0b
     25c:	7c 87       	std	Y+12, r23	; 0x0c
     25e:	8d 87       	std	Y+13, r24	; 0x0d
     260:	9e 87       	std	Y+14, r25	; 0x0e
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	81 11       	cpse	r24, r1
     266:	65 c0       	rjmp	.+202    	; 0x332 <prvTimerTask+0x12a>
     268:	8b 85       	ldd	r24, Y+11	; 0x0b
     26a:	9c 85       	ldd	r25, Y+12	; 0x0c
     26c:	ad 85       	ldd	r26, Y+13	; 0x0d
     26e:	be 85       	ldd	r27, Y+14	; 0x0e
     270:	82 15       	cp	r24, r2
     272:	93 05       	cpc	r25, r3
     274:	a4 05       	cpc	r26, r4
     276:	b5 05       	cpc	r27, r5
     278:	08 f4       	brcc	.+2      	; 0x27c <prvTimerTask+0x74>
     27a:	44 c0       	rjmp	.+136    	; 0x304 <prvTimerTask+0xfc>
     27c:	0e 94 6f 13 	call	0x26de	; 0x26de <xTaskResumeAll>
     280:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <pxCurrentTimerList>
     284:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <pxCurrentTimerList+0x1>
     288:	07 80       	ldd	r0, Z+7	; 0x07
     28a:	f0 85       	ldd	r31, Z+8	; 0x08
     28c:	e0 2d       	mov	r30, r0
     28e:	a0 85       	ldd	r26, Z+8	; 0x08
     290:	b1 85       	ldd	r27, Z+9	; 0x09
     292:	b8 8b       	std	Y+16, r27	; 0x10
     294:	af 87       	std	Y+15, r26	; 0x0f
     296:	cd 01       	movw	r24, r26
     298:	02 96       	adiw	r24, 0x02	; 2
     29a:	03 d7       	rcall	.+3590   	; 0x10a2 <uxListRemove>
     29c:	ef 85       	ldd	r30, Y+15	; 0x0f
     29e:	f8 89       	ldd	r31, Y+16	; 0x10
     2a0:	87 89       	ldd	r24, Z+23	; 0x17
     2a2:	82 ff       	sbrs	r24, 2
     2a4:	21 c0       	rjmp	.+66     	; 0x2e8 <prvTimerTask+0xe0>
     2a6:	46 85       	ldd	r20, Z+14	; 0x0e
     2a8:	57 85       	ldd	r21, Z+15	; 0x0f
     2aa:	60 89       	ldd	r22, Z+16	; 0x10
     2ac:	71 89       	ldd	r23, Z+17	; 0x11
     2ae:	42 0d       	add	r20, r2
     2b0:	53 1d       	adc	r21, r3
     2b2:	64 1d       	adc	r22, r4
     2b4:	75 1d       	adc	r23, r5
     2b6:	72 01       	movw	r14, r4
     2b8:	61 01       	movw	r12, r2
     2ba:	0b 85       	ldd	r16, Y+11	; 0x0b
     2bc:	1c 85       	ldd	r17, Y+12	; 0x0c
     2be:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c0:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c2:	cf 01       	movw	r24, r30
     2c4:	0e 94 18 19 	call	0x3230	; 0x3230 <prvInsertTimerInActiveList>
     2c8:	88 23       	and	r24, r24
     2ca:	99 f0       	breq	.+38     	; 0x2f2 <prvTimerTask+0xea>
     2cc:	c8 2c       	mov	r12, r8
     2ce:	d9 2c       	mov	r13, r9
     2d0:	ea 2c       	mov	r14, r10
     2d2:	fb 2c       	mov	r15, r11
     2d4:	00 e0       	ldi	r16, 0x00	; 0
     2d6:	10 e0       	ldi	r17, 0x00	; 0
     2d8:	a2 01       	movw	r20, r4
     2da:	91 01       	movw	r18, r2
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e0:	98 89       	ldd	r25, Y+16	; 0x10
     2e2:	0e 94 ab 19 	call	0x3356	; 0x3356 <xTimerGenericCommand>
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <prvTimerTask+0xea>
     2e8:	8e 7f       	andi	r24, 0xFE	; 254
     2ea:	af 85       	ldd	r26, Y+15	; 0x0f
     2ec:	b8 89       	ldd	r27, Y+16	; 0x10
     2ee:	57 96       	adiw	r26, 0x17	; 23
     2f0:	8c 93       	st	X, r24
     2f2:	af 85       	ldd	r26, Y+15	; 0x0f
     2f4:	b8 89       	ldd	r27, Y+16	; 0x10
     2f6:	54 96       	adiw	r26, 0x14	; 20
     2f8:	ed 91       	ld	r30, X+
     2fa:	fc 91       	ld	r31, X
     2fc:	55 97       	sbiw	r26, 0x15	; 21
     2fe:	cd 01       	movw	r24, r26
     300:	19 95       	eicall
     302:	9f c0       	rjmp	.+318    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	b2 01       	movw	r22, r4
     308:	a1 01       	movw	r20, r2
     30a:	8b 85       	ldd	r24, Y+11	; 0x0b
     30c:	9c 85       	ldd	r25, Y+12	; 0x0c
     30e:	ad 85       	ldd	r26, Y+13	; 0x0d
     310:	be 85       	ldd	r27, Y+14	; 0x0e
     312:	48 1b       	sub	r20, r24
     314:	59 0b       	sbc	r21, r25
     316:	6a 0b       	sbc	r22, r26
     318:	7b 0b       	sbc	r23, r27
     31a:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <xTimerQueue>
     31e:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <xTimerQueue+0x1>
     322:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <vQueueWaitForMessageRestricted>
     326:	0e 94 6f 13 	call	0x26de	; 0x26de <xTaskResumeAll>
     32a:	81 11       	cpse	r24, r1
     32c:	8a c0       	rjmp	.+276    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     32e:	8e d7       	rcall	.+3868   	; 0x124c <vPortYield>
     330:	88 c0       	rjmp	.+272    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     332:	0e 94 6f 13 	call	0x26de	; 0x26de <xTaskResumeAll>
     336:	85 c0       	rjmp	.+266    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	88 23       	and	r24, r24
     33c:	0c f4       	brge	.+2      	; 0x340 <prvTimerTask+0x138>
     33e:	81 c0       	rjmp	.+258    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     340:	4e 80       	ldd	r4, Y+6	; 0x06
     342:	5f 80       	ldd	r5, Y+7	; 0x07
     344:	d2 01       	movw	r26, r4
     346:	1c 96       	adiw	r26, 0x0c	; 12
     348:	8d 91       	ld	r24, X+
     34a:	9c 91       	ld	r25, X
     34c:	1d 97       	sbiw	r26, 0x0d	; 13
     34e:	89 2b       	or	r24, r25
     350:	19 f0       	breq	.+6      	; 0x358 <prvTimerTask+0x150>
     352:	c2 01       	movw	r24, r4
     354:	02 96       	adiw	r24, 0x02	; 2
     356:	a5 d6       	rcall	.+3402   	; 0x10a2 <uxListRemove>
     358:	ce 01       	movw	r24, r28
     35a:	08 96       	adiw	r24, 0x08	; 8
     35c:	0e 94 09 1a 	call	0x3412	; 0x3412 <prvSampleTimeNow>
     360:	8b 01       	movw	r16, r22
     362:	9c 01       	movw	r18, r24
     364:	e9 81       	ldd	r30, Y+1	; 0x01
     366:	0e 2e       	mov	r0, r30
     368:	00 0c       	add	r0, r0
     36a:	ff 0b       	sbc	r31, r31
     36c:	ea 30       	cpi	r30, 0x0A	; 10
     36e:	f1 05       	cpc	r31, r1
     370:	08 f0       	brcs	.+2      	; 0x374 <prvTimerTask+0x16c>
     372:	67 c0       	rjmp	.+206    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     374:	88 27       	eor	r24, r24
     376:	ee 58       	subi	r30, 0x8E	; 142
     378:	ff 4f       	sbci	r31, 0xFF	; 255
     37a:	8f 4f       	sbci	r24, 0xFF	; 255
     37c:	0c 94 8c 2b 	jmp	0x5718	; 0x5718 <__tablejump2__>
     380:	f2 01       	movw	r30, r4
     382:	87 89       	ldd	r24, Z+23	; 0x17
     384:	81 60       	ori	r24, 0x01	; 1
     386:	87 8b       	std	Z+23, r24	; 0x17
     388:	ca 80       	ldd	r12, Y+2	; 0x02
     38a:	db 80       	ldd	r13, Y+3	; 0x03
     38c:	ec 80       	ldd	r14, Y+4	; 0x04
     38e:	fd 80       	ldd	r15, Y+5	; 0x05
     390:	46 85       	ldd	r20, Z+14	; 0x0e
     392:	57 85       	ldd	r21, Z+15	; 0x0f
     394:	60 89       	ldd	r22, Z+16	; 0x10
     396:	71 89       	ldd	r23, Z+17	; 0x11
     398:	4c 0d       	add	r20, r12
     39a:	5d 1d       	adc	r21, r13
     39c:	6e 1d       	adc	r22, r14
     39e:	7f 1d       	adc	r23, r15
     3a0:	c2 01       	movw	r24, r4
     3a2:	0e 94 18 19 	call	0x3230	; 0x3230 <prvInsertTimerInActiveList>
     3a6:	88 23       	and	r24, r24
     3a8:	09 f4       	brne	.+2      	; 0x3ac <prvTimerTask+0x1a4>
     3aa:	4b c0       	rjmp	.+150    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3ac:	d2 01       	movw	r26, r4
     3ae:	54 96       	adiw	r26, 0x14	; 20
     3b0:	ed 91       	ld	r30, X+
     3b2:	fc 91       	ld	r31, X
     3b4:	55 97       	sbiw	r26, 0x15	; 21
     3b6:	c2 01       	movw	r24, r4
     3b8:	19 95       	eicall
     3ba:	f2 01       	movw	r30, r4
     3bc:	87 89       	ldd	r24, Z+23	; 0x17
     3be:	82 ff       	sbrs	r24, 2
     3c0:	40 c0       	rjmp	.+128    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3c2:	4a 81       	ldd	r20, Y+2	; 0x02
     3c4:	5b 81       	ldd	r21, Y+3	; 0x03
     3c6:	6c 81       	ldd	r22, Y+4	; 0x04
     3c8:	7d 81       	ldd	r23, Y+5	; 0x05
     3ca:	86 85       	ldd	r24, Z+14	; 0x0e
     3cc:	97 85       	ldd	r25, Z+15	; 0x0f
     3ce:	a0 89       	ldd	r26, Z+16	; 0x10
     3d0:	b1 89       	ldd	r27, Z+17	; 0x11
     3d2:	9a 01       	movw	r18, r20
     3d4:	ab 01       	movw	r20, r22
     3d6:	28 0f       	add	r18, r24
     3d8:	39 1f       	adc	r19, r25
     3da:	4a 1f       	adc	r20, r26
     3dc:	5b 1f       	adc	r21, r27
     3de:	c8 2c       	mov	r12, r8
     3e0:	d9 2c       	mov	r13, r9
     3e2:	ea 2c       	mov	r14, r10
     3e4:	fb 2c       	mov	r15, r11
     3e6:	00 e0       	ldi	r16, 0x00	; 0
     3e8:	10 e0       	ldi	r17, 0x00	; 0
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	c2 01       	movw	r24, r4
     3ee:	0e 94 ab 19 	call	0x3356	; 0x3356 <xTimerGenericCommand>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3f4:	d2 01       	movw	r26, r4
     3f6:	57 96       	adiw	r26, 0x17	; 23
     3f8:	8c 91       	ld	r24, X
     3fa:	57 97       	sbiw	r26, 0x17	; 23
     3fc:	8e 7f       	andi	r24, 0xFE	; 254
     3fe:	57 96       	adiw	r26, 0x17	; 23
     400:	8c 93       	st	X, r24
     402:	1f c0       	rjmp	.+62     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     404:	f2 01       	movw	r30, r4
     406:	87 89       	ldd	r24, Z+23	; 0x17
     408:	81 60       	ori	r24, 0x01	; 1
     40a:	87 8b       	std	Z+23, r24	; 0x17
     40c:	4a 81       	ldd	r20, Y+2	; 0x02
     40e:	5b 81       	ldd	r21, Y+3	; 0x03
     410:	6c 81       	ldd	r22, Y+4	; 0x04
     412:	7d 81       	ldd	r23, Y+5	; 0x05
     414:	46 87       	std	Z+14, r20	; 0x0e
     416:	57 87       	std	Z+15, r21	; 0x0f
     418:	60 8b       	std	Z+16, r22	; 0x10
     41a:	71 8b       	std	Z+17, r23	; 0x11
     41c:	40 0f       	add	r20, r16
     41e:	51 1f       	adc	r21, r17
     420:	62 1f       	adc	r22, r18
     422:	73 1f       	adc	r23, r19
     424:	68 01       	movw	r12, r16
     426:	79 01       	movw	r14, r18
     428:	c2 01       	movw	r24, r4
     42a:	0e 94 18 19 	call	0x3230	; 0x3230 <prvInsertTimerInActiveList>
     42e:	09 c0       	rjmp	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     430:	f2 01       	movw	r30, r4
     432:	87 89       	ldd	r24, Z+23	; 0x17
     434:	81 fd       	sbrc	r24, 1
     436:	03 c0       	rjmp	.+6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     438:	c2 01       	movw	r24, r4
     43a:	8f d5       	rcall	.+2846   	; 0xf5a <vPortFree>
     43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     43e:	8e 7f       	andi	r24, 0xFE	; 254
     440:	87 8b       	std	Z+23, r24	; 0x17
     442:	28 2d       	mov	r18, r8
     444:	39 2d       	mov	r19, r9
     446:	4a 2d       	mov	r20, r10
     448:	5b 2d       	mov	r21, r11
     44a:	66 2d       	mov	r22, r6
     44c:	77 2d       	mov	r23, r7
     44e:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <xTimerQueue>
     452:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <xTimerQueue+0x1>
     456:	0e 94 24 0c 	call	0x1848	; 0x1848 <xQueueReceive>
     45a:	81 11       	cpse	r24, r1
     45c:	6d cf       	rjmp	.-294    	; 0x338 <prvTimerTask+0x130>
     45e:	e8 ce       	rjmp	.-560    	; 0x230 <prvTimerTask+0x28>
     460:	0e 94 86 12 	call	0x250c	; 0x250c <vTaskSuspendAll>
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	0e 94 09 1a 	call	0x3412	; 0x3412 <prvSampleTimeNow>
     46c:	6b 87       	std	Y+11, r22	; 0x0b
     46e:	7c 87       	std	Y+12, r23	; 0x0c
     470:	8d 87       	std	Y+13, r24	; 0x0d
     472:	9e 87       	std	Y+14, r25	; 0x0e
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	81 11       	cpse	r24, r1
     478:	5c cf       	rjmp	.-328    	; 0x332 <prvTimerTask+0x12a>
     47a:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <pxOverflowTimerList>
     47e:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <pxOverflowTimerList+0x1>
     482:	80 81       	ld	r24, Z
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	81 11       	cpse	r24, r1
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	28 2c       	mov	r2, r8
     48c:	39 2c       	mov	r3, r9
     48e:	4a 2c       	mov	r4, r10
     490:	5b 2c       	mov	r5, r11
     492:	39 cf       	rjmp	.-398    	; 0x306 <prvTimerTask+0xfe>

00000494 <__ctors_end>:
     494:	11 24       	eor	r1, r1
     496:	1f be       	out	0x3f, r1	; 63
     498:	cf ef       	ldi	r28, 0xFF	; 255
     49a:	d1 e2       	ldi	r29, 0x21	; 33
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	00 e0       	ldi	r16, 0x00	; 0
     4a2:	0c bf       	out	0x3c, r16	; 60

000004a4 <__do_copy_data>:
     4a4:	18 e0       	ldi	r17, 0x08	; 8
     4a6:	a0 e0       	ldi	r26, 0x00	; 0
     4a8:	b2 e0       	ldi	r27, 0x02	; 2
     4aa:	e4 ea       	ldi	r30, 0xA4	; 164
     4ac:	f0 e6       	ldi	r31, 0x60	; 96
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0b bf       	out	0x3b, r16	; 59
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__do_copy_data+0x14>
     4b4:	07 90       	elpm	r0, Z+
     4b6:	0d 92       	st	X+, r0
     4b8:	a8 35       	cpi	r26, 0x58	; 88
     4ba:	b1 07       	cpc	r27, r17
     4bc:	d9 f7       	brne	.-10     	; 0x4b4 <__do_copy_data+0x10>

000004be <__do_clear_bss>:
     4be:	2a e1       	ldi	r18, 0x1A	; 26
     4c0:	a8 e5       	ldi	r26, 0x58	; 88
     4c2:	b8 e0       	ldi	r27, 0x08	; 8
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <.do_clear_bss_start>

000004c6 <.do_clear_bss_loop>:
     4c6:	1d 92       	st	X+, r1

000004c8 <.do_clear_bss_start>:
     4c8:	a2 3b       	cpi	r26, 0xB2	; 178
     4ca:	b2 07       	cpc	r27, r18
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <.do_clear_bss_loop>
     4ce:	0e 94 10 1c 	call	0x3820	; 0x3820 <main>
     4d2:	0c 94 50 30 	jmp	0x60a0	; 0x60a0 <_exit>

000004d6 <__bad_interrupt>:
     4d6:	94 cd       	rjmp	.-1240   	; 0x0 <__vectors>

000004d8 <CO2_handler_task>:
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, CO2_measure_bit, pdTRUE, pdTRUE, 500);
		if((measureBits & (CO2_measure_bit)) == (CO2_measure_bit))
		{
				return_code = mh_z19_take_meassuring();
				while(return_code != MHZ19_OK){
					printf("%s%i%s\n","Arduino CO2 measuring error! Return value: ",return_code," . Retrying..."); 
     4d8:	0f 2e       	mov	r0, r31
     4da:	fe e6       	ldi	r31, 0x6E	; 110
     4dc:	8f 2e       	mov	r8, r31
     4de:	f2 e0       	ldi	r31, 0x02	; 2
     4e0:	9f 2e       	mov	r9, r31
     4e2:	f0 2d       	mov	r31, r0
     4e4:	0f 2e       	mov	r0, r31
     4e6:	fd e7       	ldi	r31, 0x7D	; 125
     4e8:	af 2e       	mov	r10, r31
     4ea:	f2 e0       	ldi	r31, 0x02	; 2
     4ec:	bf 2e       	mov	r11, r31
     4ee:	f0 2d       	mov	r31, r0
     4f0:	c9 ea       	ldi	r28, 0xA9	; 169
     4f2:	d2 e0       	ldi	r29, 0x02	; 2
					vTaskDelay(50);
					return_code = mh_z19_take_meassuring();
				}
				vTaskDelay(20); // giving it some time to set the values
				printf("%s%i\n","Arduino measurement CO2: ", getCO2());	
     4f4:	0f 2e       	mov	r0, r31
     4f6:	f1 eb       	ldi	r31, 0xB1	; 177
     4f8:	6f 2e       	mov	r6, r31
     4fa:	f2 e0       	ldi	r31, 0x02	; 2
     4fc:	7f 2e       	mov	r7, r31
     4fe:	f0 2d       	mov	r31, r0
     500:	0f 2e       	mov	r0, r31
     502:	fb ec       	ldi	r31, 0xCB	; 203
     504:	4f 2e       	mov	r4, r31
     506:	f2 e0       	ldi	r31, 0x02	; 2
     508:	5f 2e       	mov	r5, r31
     50a:	f0 2d       	mov	r31, r0
{

	for (;;) 
	{
		
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, CO2_measure_bit, pdTRUE, pdTRUE, 500);
     50c:	0f 2e       	mov	r0, r31
     50e:	f4 ef       	ldi	r31, 0xF4	; 244
     510:	cf 2e       	mov	r12, r31
     512:	dd 24       	eor	r13, r13
     514:	d3 94       	inc	r13
     516:	e1 2c       	mov	r14, r1
     518:	f1 2c       	mov	r15, r1
     51a:	f0 2d       	mov	r31, r0
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	21 e0       	ldi	r18, 0x01	; 1
     520:	41 e0       	ldi	r20, 0x01	; 1
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	80 91 7f 1a 	lds	r24, 0x1A7F	; 0x801a7f <Measure_event_group>
     52c:	90 91 80 1a 	lds	r25, 0x1A80	; 0x801a80 <Measure_event_group+0x1>
     530:	b5 d2       	rcall	.+1386   	; 0xa9c <xEventGroupWaitBits>
		if((measureBits & (CO2_measure_bit)) == (CO2_measure_bit))
     532:	60 ff       	sbrs	r22, 0
     534:	eb cf       	rjmp	.-42     	; 0x50c <CO2_handler_task+0x34>
		{
				return_code = mh_z19_take_meassuring();
     536:	0e 94 1d 24 	call	0x483a	; 0x483a <mh_z19_take_meassuring>
     53a:	80 93 81 1a 	sts	0x1A81, r24	; 0x801a81 <return_code>
				while(return_code != MHZ19_OK){
     53e:	88 23       	and	r24, r24
     540:	f9 f0       	breq	.+62     	; 0x580 <CO2_handler_task+0xa8>
					printf("%s%i%s\n","Arduino CO2 measuring error! Return value: ",return_code," . Retrying..."); 
     542:	9f 92       	push	r9
     544:	8f 92       	push	r8
     546:	1f 92       	push	r1
     548:	8f 93       	push	r24
     54a:	bf 92       	push	r11
     54c:	af 92       	push	r10
     54e:	df 93       	push	r29
     550:	cf 93       	push	r28
     552:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <printf>
					vTaskDelay(50);
     556:	62 e3       	ldi	r22, 0x32	; 50
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 49 14 	call	0x2892	; 0x2892 <vTaskDelay>
					return_code = mh_z19_take_meassuring();
     562:	0e 94 1d 24 	call	0x483a	; 0x483a <mh_z19_take_meassuring>
     566:	80 93 81 1a 	sts	0x1A81, r24	; 0x801a81 <return_code>
		
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, CO2_measure_bit, pdTRUE, pdTRUE, 500);
		if((measureBits & (CO2_measure_bit)) == (CO2_measure_bit))
		{
				return_code = mh_z19_take_meassuring();
				while(return_code != MHZ19_OK){
     56a:	2d b7       	in	r18, 0x3d	; 61
     56c:	3e b7       	in	r19, 0x3e	; 62
     56e:	28 5f       	subi	r18, 0xF8	; 248
     570:	3f 4f       	sbci	r19, 0xFF	; 255
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	3e bf       	out	0x3e, r19	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	2d bf       	out	0x3d, r18	; 61
     57c:	81 11       	cpse	r24, r1
     57e:	e1 cf       	rjmp	.-62     	; 0x542 <CO2_handler_task+0x6a>
					printf("%s%i%s\n","Arduino CO2 measuring error! Return value: ",return_code," . Retrying..."); 
					vTaskDelay(50);
					return_code = mh_z19_take_meassuring();
				}
				vTaskDelay(20); // giving it some time to set the values
     580:	64 e1       	ldi	r22, 0x14	; 20
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 49 14 	call	0x2892	; 0x2892 <vTaskDelay>
				printf("%s%i\n","Arduino measurement CO2: ", getCO2());	
     58c:	92 d1       	rcall	.+804    	; 0x8b2 <getCO2>
     58e:	9f 93       	push	r25
     590:	8f 93       	push	r24
     592:	7f 92       	push	r7
     594:	6f 92       	push	r6
     596:	5f 92       	push	r5
     598:	4f 92       	push	r4
     59a:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <printf>
				xEventGroupSetBits(Data_event_group, CO2_data_bit);
     59e:	44 e0       	ldi	r20, 0x04	; 4
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	80 91 7d 1a 	lds	r24, 0x1A7D	; 0x801a7d <Data_event_group>
     5aa:	90 91 7e 1a 	lds	r25, 0x1A7E	; 0x801a7e <Data_event_group+0x1>
     5ae:	36 d3       	rcall	.+1644   	; 0xc1c <xEventGroupSetBits>
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	a7 cf       	rjmp	.-178    	; 0x50c <CO2_handler_task+0x34>

000005be <CO2Sensor_create>:
mh_z19_return_code_t return_code;
	
void CO2_handler_task( void *pvParameters );

void CO2Sensor_create()
{
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
	mh_z19_create(ser_USART3, setCO2);
     5c4:	6c e6       	ldi	r22, 0x6C	; 108
     5c6:	74 e0       	ldi	r23, 0x04	; 4
     5c8:	83 e0       	ldi	r24, 0x03	; 3
     5ca:	0e 94 ef 23 	call	0x47de	; 0x47de <mh_z19_create>
	xTaskCreate(
     5ce:	e1 2c       	mov	r14, r1
     5d0:	f1 2c       	mov	r15, r1
     5d2:	03 e0       	ldi	r16, 0x03	; 3
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	48 e8       	ldi	r20, 0x88	; 136
     5da:	51 e0       	ldi	r21, 0x01	; 1
     5dc:	61 ed       	ldi	r22, 0xD1	; 209
     5de:	72 e0       	ldi	r23, 0x02	; 2
     5e0:	8c e6       	ldi	r24, 0x6C	; 108
     5e2:	92 e0       	ldi	r25, 0x02	; 2
     5e4:	0e 94 2b 11 	call	0x2256	; 0x2256 <xTaskCreate>
		configMINIMAL_STACK_SIZE+200,
		NULL,
		3,
		NULL 
	);
}
     5e8:	0f 91       	pop	r16
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	08 95       	ret

000005f0 <lora_handler_task>:
	}
}

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <lora_handler_task+0x6>
     5f6:	1f 92       	push	r1
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
	static e_LoRa_return_code_t rc;
		
	
	
	// Hardware reset of LoRaWAN transceiver
	lora_driver_reset_rn2483(1);
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	0e 94 35 20 	call	0x406a	; 0x406a <lora_driver_reset_rn2483>
	vTaskDelay(2);
     602:	62 e0       	ldi	r22, 0x02	; 2
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 49 14 	call	0x2892	; 0x2892 <vTaskDelay>
	lora_driver_reset_rn2483(0);
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	0e 94 35 20 	call	0x406a	; 0x406a <lora_driver_reset_rn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     614:	66 e9       	ldi	r22, 0x96	; 150
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 49 14 	call	0x2892	; 0x2892 <vTaskDelay>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     620:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <lora_driver_flush_buffers>
{
	
	e_LoRa_return_code_t rc;

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     624:	0e 94 49 20 	call	0x4092	; 0x4092 <lora_driver_rn2483_factory_reset>
     628:	0e 94 c6 22 	call	0x458c	; 0x458c <lora_driver_map_return_code_to_text>
     62c:	9f 93       	push	r25
     62e:	8f 93       	push	r24
     630:	8d ed       	ldi	r24, 0xDD	; 221
     632:	92 e0       	ldi	r25, 0x02	; 2
     634:	9f 93       	push	r25
     636:	8f 93       	push	r24
     638:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <printf>
	

	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     63c:	0e 94 c7 21 	call	0x438e	; 0x438e <lora_driver_configure_to_eu868>
     640:	0e 94 c6 22 	call	0x458c	; 0x458c <lora_driver_map_return_code_to_text>
     644:	9f 93       	push	r25
     646:	8f 93       	push	r24
     648:	80 ef       	ldi	r24, 0xF0	; 240
     64a:	92 e0       	ldi	r25, 0x02	; 2
     64c:	9f 93       	push	r25
     64e:	8f 93       	push	r24
     650:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     654:	8e e6       	ldi	r24, 0x6E	; 110
     656:	98 e0       	ldi	r25, 0x08	; 8
     658:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     65c:	0e 94 c6 22 	call	0x458c	; 0x458c <lora_driver_map_return_code_to_text>
     660:	0e e6       	ldi	r16, 0x6E	; 110
     662:	18 e0       	ldi	r17, 0x08	; 8
     664:	1f 93       	push	r17
     666:	0f 93       	push	r16
     668:	9f 93       	push	r25
     66a:	8f 93       	push	r24
     66c:	89 e0       	ldi	r24, 0x09	; 9
     66e:	93 e0       	ldi	r25, 0x03	; 3
     670:	9f 93       	push	r25
     672:	8f 93       	push	r24
     674:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     678:	c8 01       	movw	r24, r16
     67a:	0e 94 77 20 	call	0x40ee	; 0x40ee <lora_driver_set_device_identifier>
     67e:	0e 94 c6 22 	call	0x458c	; 0x458c <lora_driver_map_return_code_to_text>
     682:	9f 93       	push	r25
     684:	8f 93       	push	r24
     686:	1f 93       	push	r17
     688:	0f 93       	push	r16
     68a:	8d e1       	ldi	r24, 0x1D	; 29
     68c:	93 e0       	ldi	r25, 0x03	; 3
     68e:	9f 93       	push	r25
     690:	8f 93       	push	r24
     692:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     696:	a8 01       	movw	r20, r16
     698:	62 e3       	ldi	r22, 0x32	; 50
     69a:	73 e0       	ldi	r23, 0x03	; 3
     69c:	83 e5       	ldi	r24, 0x53	; 83
     69e:	93 e0       	ldi	r25, 0x03	; 3
     6a0:	0e 94 a5 22 	call	0x454a	; 0x454a <lora_driver_set_otaa_identity>
     6a4:	0e 94 c6 22 	call	0x458c	; 0x458c <lora_driver_map_return_code_to_text>
     6a8:	9f 93       	push	r25
     6aa:	8f 93       	push	r24
     6ac:	1f 93       	push	r17
     6ae:	0f 93       	push	r16
     6b0:	82 e3       	ldi	r24, 0x32	; 50
     6b2:	93 e0       	ldi	r25, 0x03	; 3
     6b4:	9f 93       	push	r25
     6b6:	8f 93       	push	r24
     6b8:	83 e5       	ldi	r24, 0x53	; 83
     6ba:	93 e0       	ldi	r25, 0x03	; 3
     6bc:	9f 93       	push	r25
     6be:	8f 93       	push	r24
     6c0:	84 e6       	ldi	r24, 0x64	; 100
     6c2:	93 e0       	ldi	r25, 0x03	; 3
     6c4:	9f 93       	push	r25
     6c6:	8f 93       	push	r24
     6c8:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     6cc:	0e 94 aa 20 	call	0x4154	; 0x4154 <lora_driver_save_mac>
     6d0:	0e 94 c6 22 	call	0x458c	; 0x458c <lora_driver_map_return_code_to_text>
     6d4:	9f 93       	push	r25
     6d6:	8f 93       	push	r24
     6d8:	8a e9       	ldi	r24, 0x9A	; 154
     6da:	93 e0       	ldi	r25, 0x03	; 3
     6dc:	9f 93       	push	r25
     6de:	8f 93       	push	r24
     6e0:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	0e 94 a4 21 	call	0x4348	; 0x4348 <lora_driver_set_adaptive_data_rate>
     6f4:	0e 94 c6 22 	call	0x458c	; 0x458c <lora_driver_map_return_code_to_text>
     6f8:	9f 93       	push	r25
     6fa:	8f 93       	push	r24
     6fc:	89 ea       	ldi	r24, 0xA9	; 169
     6fe:	93 e0       	ldi	r25, 0x03	; 3
     700:	9f 93       	push	r25
     702:	8f 93       	push	r24
     704:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     708:	84 ef       	ldi	r24, 0xF4	; 244
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	0e 94 af 21 	call	0x435e	; 0x435e <lora_driver_set_receive_delay>
     710:	0e 94 c6 22 	call	0x458c	; 0x458c <lora_driver_map_return_code_to_text>
     714:	9f 93       	push	r25
     716:	8f 93       	push	r24
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	8f 93       	push	r24
     71c:	84 ef       	ldi	r24, 0xF4	; 244
     71e:	8f 93       	push	r24
     720:	8a ec       	ldi	r24, 0xCA	; 202
     722:	93 e0       	ldi	r25, 0x03	; 3
     724:	9f 93       	push	r25
     726:	8f 93       	push	r24
     728:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <printf>
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
     736:	03 e0       	ldi	r16, 0x03	; 3
     738:	10 e0       	ldi	r17, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 3; // This is 3 because after 3rd connection attempt Loriot responds "no free channel"
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft: %d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     73a:	0f 2e       	mov	r0, r31
     73c:	fa ee       	ldi	r31, 0xEA	; 234
     73e:	ef 2e       	mov	r14, r31
     740:	f3 e0       	ldi	r31, 0x03	; 3
     742:	ff 2e       	mov	r15, r31
     744:	f0 2d       	mov	r31, r0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 3; // This is 3 because after 3rd connection attempt Loriot responds "no free channel"
	
	do {
		rc = lora_driver_join(LoRa_OTAA);
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	0e 94 b0 20 	call	0x4160	; 0x4160 <lora_driver_join>
     74c:	b8 2e       	mov	r11, r24
		printf("Join Network TriesLeft: %d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     74e:	0e 94 c6 22 	call	0x458c	; 0x458c <lora_driver_map_return_code_to_text>
     752:	9f 93       	push	r25
     754:	8f 93       	push	r24
     756:	1f 93       	push	r17
     758:	0f 93       	push	r16
     75a:	ff 92       	push	r15
     75c:	ef 92       	push	r14
     75e:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <printf>

		if ( rc != LoRa_ACCEPTED)
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	f8 e0       	ldi	r31, 0x08	; 8
     770:	bf 16       	cp	r11, r31
     772:	09 f4       	brne	.+2      	; 0x776 <lora_handler_task+0x186>
     774:	6e c0       	rjmp	.+220    	; 0x852 <lora_handler_task+0x262>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     77c:	66 e3       	ldi	r22, 0x36	; 54
     77e:	71 e0       	ldi	r23, 0x01	; 1
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 49 14 	call	0x2892	; 0x2892 <vTaskDelay>
     788:	01 50       	subi	r16, 0x01	; 1
     78a:	11 09       	sbc	r17, r1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     78c:	e1 f6       	brne	.-72     	; 0x746 <lora_handler_task+0x156>
     78e:	5a c0       	rjmp	.+180    	; 0x844 <lora_handler_task+0x254>


		// Lets stay here
		while (1)
		{
			taskYIELD();
     790:	5d d5       	rcall	.+2746   	; 0x124c <vPortYield>
     792:	fe cf       	rjmp	.-4      	; 0x790 <lora_handler_task+0x1a0>
	 const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
	 xLastWakeTime = xTaskGetTickCount();
	 
	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
     794:	44 e4       	ldi	r20, 0x44	; 68
     796:	57 e0       	ldi	r21, 0x07	; 7
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	ce 01       	movw	r24, r28
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <vTaskDelayUntil>

		
		xEventGroupSetBits(Measure_event_group, CO2_measure_bit|Hum_temp_measure_bit);
     7a4:	43 e0       	ldi	r20, 0x03	; 3
     7a6:	50 e0       	ldi	r21, 0x00	; 0
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	80 91 7f 1a 	lds	r24, 0x1A7F	; 0x801a7f <Measure_event_group>
     7b0:	90 91 80 1a 	lds	r25, 0x1A80	; 0x801a80 <Measure_event_group+0x1>
     7b4:	33 d2       	rcall	.+1126   	; 0xc1c <xEventGroupSetBits>
		
		
		EventBits_t dataBits = xEventGroupWaitBits(Data_event_group, CO2_data_bit|Hum_temp_data_bit, pdTRUE, pdTRUE, 500);
     7b6:	0f 2e       	mov	r0, r31
     7b8:	f4 ef       	ldi	r31, 0xF4	; 244
     7ba:	cf 2e       	mov	r12, r31
     7bc:	dd 24       	eor	r13, r13
     7be:	d3 94       	inc	r13
     7c0:	e1 2c       	mov	r14, r1
     7c2:	f1 2c       	mov	r15, r1
     7c4:	f0 2d       	mov	r31, r0
     7c6:	01 e0       	ldi	r16, 0x01	; 1
     7c8:	21 e0       	ldi	r18, 0x01	; 1
     7ca:	4c e0       	ldi	r20, 0x0C	; 12
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	80 91 7d 1a 	lds	r24, 0x1A7D	; 0x801a7d <Data_event_group>
     7d6:	90 91 7e 1a 	lds	r25, 0x1A7E	; 0x801a7e <Data_event_group+0x1>
     7da:	60 d1       	rcall	.+704    	; 0xa9c <xEventGroupWaitBits>
		
		if((dataBits & (CO2_data_bit|Hum_temp_data_bit)) == (CO2_data_bit|Hum_temp_data_bit)){
     7dc:	dc 01       	movw	r26, r24
     7de:	cb 01       	movw	r24, r22
     7e0:	8c 70       	andi	r24, 0x0C	; 12
     7e2:	99 27       	eor	r25, r25
     7e4:	aa 27       	eor	r26, r26
     7e6:	bb 27       	eor	r27, r27
     7e8:	0c 97       	sbiw	r24, 0x0c	; 12
     7ea:	a1 05       	cpc	r26, r1
     7ec:	b1 05       	cpc	r27, r1
			uint16_t hum = (int) getHumidity();
     7ee:	91 f6       	brne	.-92     	; 0x794 <lora_handler_task+0x1a4>
     7f0:	99 d0       	rcall	.+306    	; 0x924 <getHumidity>
     7f2:	0e 94 20 1c 	call	0x3840	; 0x3840 <__fixsfsi>
     7f6:	f6 2e       	mov	r15, r22
			int16_t temp = (int) getTemperature();
     7f8:	e7 2e       	mov	r14, r23
     7fa:	da d0       	rcall	.+436    	; 0x9b0 <getTemperature>
     7fc:	0e 94 20 1c 	call	0x3840	; 0x3840 <__fixsfsi>
     800:	16 2f       	mov	r17, r22
			uint16_t co2_ppm = getCO2();
     802:	07 2f       	mov	r16, r23
     804:	56 d0       	rcall	.+172    	; 0x8b2 <getCO2>

			_uplink_payload.bytes[0] = hum >> 8;
     806:	f5 01       	movw	r30, r10
     808:	e2 82       	std	Z+2, r14	; 0x02
			_uplink_payload.bytes[1] = hum & 0xFF;
     80a:	f3 82       	std	Z+3, r15	; 0x03
			_uplink_payload.bytes[2] = temp >> 8;
     80c:	04 83       	std	Z+4, r16	; 0x04
			_uplink_payload.bytes[3] = temp & 0xFF;
     80e:	15 83       	std	Z+5, r17	; 0x05
			_uplink_payload.bytes[4] = co2_ppm >> 8;
     810:	96 83       	std	Z+6, r25	; 0x06
			_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     812:	87 83       	std	Z+7, r24	; 0x07
			lora_driver_sent_upload_message(false, &_uplink_payload);
     814:	b5 01       	movw	r22, r10
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <lora_driver_sent_upload_message>
			led_short_puls(led_ST4);
     81c:	83 e0       	ldi	r24, 0x03	; 3
     81e:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <led_short_puls>
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     822:	b5 01       	movw	r22, r10
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <lora_driver_sent_upload_message>
     82a:	0e 94 c6 22 	call	0x458c	; 0x458c <lora_driver_map_return_code_to_text>
     82e:	9f 93       	push	r25
     830:	8f 93       	push	r24
     832:	9f 92       	push	r9
     834:	8f 92       	push	r8
     836:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <printf>
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	a8 cf       	rjmp	.-176    	; 0x794 <lora_handler_task+0x1a4>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <led_fast_blink>
     850:	9f cf       	rjmp	.-194    	; 0x790 <lora_handler_task+0x1a0>
		}
	} while (--maxJoinTriesLeft);

	if (rc == LoRa_ACCEPTED)
	{
		led_led_on(led_ST2); // Makes the light glow green
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <led_led_on>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!

	_lora_setup();

	_uplink_payload.len = 6;
     858:	e8 e5       	ldi	r30, 0x58	; 88
     85a:	f8 e0       	ldi	r31, 0x08	; 8
     85c:	86 e0       	ldi	r24, 0x06	; 6
     85e:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.port_no = 2;
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	80 83       	st	Z, r24

	 TickType_t xLastWakeTime;
	 const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
	 xLastWakeTime = xTaskGetTickCount();
     864:	0e 94 8c 12 	call	0x2518	; 0x2518 <xTaskGetTickCount>
     868:	69 83       	std	Y+1, r22	; 0x01
     86a:	7a 83       	std	Y+2, r23	; 0x02
     86c:	8b 83       	std	Y+3, r24	; 0x03
     86e:	9c 83       	std	Y+4, r25	; 0x04
		if((dataBits & (CO2_data_bit|Hum_temp_data_bit)) == (CO2_data_bit|Hum_temp_data_bit)){
			uint16_t hum = (int) getHumidity();
			int16_t temp = (int) getTemperature();
			uint16_t co2_ppm = getCO2();

			_uplink_payload.bytes[0] = hum >> 8;
     870:	0f 2e       	mov	r0, r31
     872:	f8 e5       	ldi	r31, 0x58	; 88
     874:	af 2e       	mov	r10, r31
     876:	f8 e0       	ldi	r31, 0x08	; 8
     878:	bf 2e       	mov	r11, r31
     87a:	f0 2d       	mov	r31, r0
			_uplink_payload.bytes[3] = temp & 0xFF;
			_uplink_payload.bytes[4] = co2_ppm >> 8;
			_uplink_payload.bytes[5] = co2_ppm & 0xFF;
			lora_driver_sent_upload_message(false, &_uplink_payload);
			led_short_puls(led_ST4);
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     87c:	0f 2e       	mov	r0, r31
     87e:	fb e0       	ldi	r31, 0x0B	; 11
     880:	8f 2e       	mov	r8, r31
     882:	f4 e0       	ldi	r31, 0x04	; 4
     884:	9f 2e       	mov	r9, r31
     886:	f0 2d       	mov	r31, r0
     888:	85 cf       	rjmp	.-246    	; 0x794 <lora_handler_task+0x1a4>

0000088a <lora_handler_create>:
void lora_handler_task( void *pvParameters );

static lora_payload_t _uplink_payload;

void lora_handler_create(UBaseType_t lora_handler_task_priority)
{
     88a:	ef 92       	push	r14
     88c:	ff 92       	push	r15
     88e:	0f 93       	push	r16
	xTaskCreate(
     890:	e1 2c       	mov	r14, r1
     892:	f1 2c       	mov	r15, r1
     894:	08 2f       	mov	r16, r24
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	48 e8       	ldi	r20, 0x88	; 136
     89c:	51 e0       	ldi	r21, 0x01	; 1
     89e:	60 e2       	ldi	r22, 0x20	; 32
     8a0:	74 e0       	ldi	r23, 0x04	; 4
     8a2:	88 ef       	ldi	r24, 0xF8	; 248
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	0e 94 2b 11 	call	0x2256	; 0x2256 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

}
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	08 95       	ret

000008b2 <getCO2>:
bool isTaken_temperature = 0;



uint16_t getCO2(){
	while(isTaken_CO2){	
     8b2:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <isTaken_CO2>
     8b6:	88 23       	and	r24, r24
     8b8:	51 f0       	breq	.+20     	; 0x8ce <getCO2+0x1c>
		vTaskDelay(50);
     8ba:	62 e3       	ldi	r22, 0x32	; 50
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 49 14 	call	0x2892	; 0x2892 <vTaskDelay>
bool isTaken_temperature = 0;



uint16_t getCO2(){
	while(isTaken_CO2){	
     8c6:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <isTaken_CO2>
     8ca:	81 11       	cpse	r24, r1
     8cc:	f6 cf       	rjmp	.-20     	; 0x8ba <getCO2+0x8>
		vTaskDelay(50);
	}
	return local_CO2;

}
     8ce:	80 91 8a 1a 	lds	r24, 0x1A8A	; 0x801a8a <local_CO2>
     8d2:	90 91 8b 1a 	lds	r25, 0x1A8B	; 0x801a8b <local_CO2+0x1>
     8d6:	08 95       	ret

000008d8 <setCO2>:

void setCO2(uint16_t CO2){
     8d8:	0f 93       	push	r16
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	ec 01       	movw	r28, r24
	xSemaphoreTake(Mutex_CO2,1000);
     8e0:	48 ee       	ldi	r20, 0xE8	; 232
     8e2:	53 e0       	ldi	r21, 0x03	; 3
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 91 84 1a 	lds	r24, 0x1A84	; 0x801a84 <Mutex_CO2>
     8ec:	90 91 85 1a 	lds	r25, 0x1A85	; 0x801a85 <Mutex_CO2+0x1>
     8f0:	0e 94 bd 0c 	call	0x197a	; 0x197a <xQueueSemaphoreTake>
	isTaken_CO2 = 1;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	80 93 d4 08 	sts	0x08D4, r24	; 0x8008d4 <isTaken_CO2>
	local_CO2 = CO2;
     8fa:	d0 93 8b 1a 	sts	0x1A8B, r29	; 0x801a8b <local_CO2+0x1>
     8fe:	c0 93 8a 1a 	sts	0x1A8A, r28	; 0x801a8a <local_CO2>
	xSemaphoreGive(Mutex_CO2);
     902:	00 e0       	ldi	r16, 0x00	; 0
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	a9 01       	movw	r20, r18
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	80 91 84 1a 	lds	r24, 0x1A84	; 0x801a84 <Mutex_CO2>
     912:	90 91 85 1a 	lds	r25, 0x1A85	; 0x801a85 <Mutex_CO2+0x1>
     916:	a4 d6       	rcall	.+3400   	; 0x1660 <xQueueGenericSend>
	isTaken_CO2 = 0;
     918:	10 92 d4 08 	sts	0x08D4, r1	; 0x8008d4 <isTaken_CO2>
}
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	0f 91       	pop	r16
     922:	08 95       	ret

00000924 <getHumidity>:

float getHumidity(){
	while(isTaken_humidity){
     924:	80 91 d3 08 	lds	r24, 0x08D3	; 0x8008d3 <isTaken_humidity>
     928:	88 23       	and	r24, r24
     92a:	51 f0       	breq	.+20     	; 0x940 <getHumidity+0x1c>
		vTaskDelay(50);
     92c:	62 e3       	ldi	r22, 0x32	; 50
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 49 14 	call	0x2892	; 0x2892 <vTaskDelay>
	xSemaphoreGive(Mutex_CO2);
	isTaken_CO2 = 0;
}

float getHumidity(){
	while(isTaken_humidity){
     938:	80 91 d3 08 	lds	r24, 0x08D3	; 0x8008d3 <isTaken_humidity>
     93c:	81 11       	cpse	r24, r1
     93e:	f6 cf       	rjmp	.-20     	; 0x92c <getHumidity+0x8>
		vTaskDelay(50);
	}
	return local_humidity;
     940:	60 91 8c 1a 	lds	r22, 0x1A8C	; 0x801a8c <local_humidity>
     944:	70 91 8d 1a 	lds	r23, 0x1A8D	; 0x801a8d <local_humidity+0x1>
     948:	80 91 8e 1a 	lds	r24, 0x1A8E	; 0x801a8e <local_humidity+0x2>
     94c:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <local_humidity+0x3>
}
     950:	08 95       	ret

00000952 <setHumidity>:
void setHumidity(float humidity_level){
     952:	cf 92       	push	r12
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	6b 01       	movw	r12, r22
     95e:	7c 01       	movw	r14, r24
	xSemaphoreTake(Mutex_humidity,1000);
     960:	48 ee       	ldi	r20, 0xE8	; 232
     962:	53 e0       	ldi	r21, 0x03	; 3
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	80 91 7b 1a 	lds	r24, 0x1A7B	; 0x801a7b <Mutex_humidity>
     96c:	90 91 7c 1a 	lds	r25, 0x1A7C	; 0x801a7c <Mutex_humidity+0x1>
     970:	0e 94 bd 0c 	call	0x197a	; 0x197a <xQueueSemaphoreTake>
	isTaken_humidity = 1;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 d3 08 	sts	0x08D3, r24	; 0x8008d3 <isTaken_humidity>
	local_humidity = humidity_level;
     97a:	c0 92 8c 1a 	sts	0x1A8C, r12	; 0x801a8c <local_humidity>
     97e:	d0 92 8d 1a 	sts	0x1A8D, r13	; 0x801a8d <local_humidity+0x1>
     982:	e0 92 8e 1a 	sts	0x1A8E, r14	; 0x801a8e <local_humidity+0x2>
     986:	f0 92 8f 1a 	sts	0x1A8F, r15	; 0x801a8f <local_humidity+0x3>
	xSemaphoreGive(Mutex_humidity);
     98a:	00 e0       	ldi	r16, 0x00	; 0
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	a9 01       	movw	r20, r18
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	80 91 7b 1a 	lds	r24, 0x1A7B	; 0x801a7b <Mutex_humidity>
     99a:	90 91 7c 1a 	lds	r25, 0x1A7C	; 0x801a7c <Mutex_humidity+0x1>
     99e:	60 d6       	rcall	.+3264   	; 0x1660 <xQueueGenericSend>
	isTaken_humidity = 0;
     9a0:	10 92 d3 08 	sts	0x08D3, r1	; 0x8008d3 <isTaken_humidity>
}
     9a4:	0f 91       	pop	r16
     9a6:	ff 90       	pop	r15
     9a8:	ef 90       	pop	r14
     9aa:	df 90       	pop	r13
     9ac:	cf 90       	pop	r12
     9ae:	08 95       	ret

000009b0 <getTemperature>:

float getTemperature(){
	while(isTaken_temperature){
     9b0:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <isTaken_temperature>
     9b4:	88 23       	and	r24, r24
     9b6:	51 f0       	breq	.+20     	; 0x9cc <getTemperature+0x1c>
		vTaskDelay(50);
     9b8:	62 e3       	ldi	r22, 0x32	; 50
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 49 14 	call	0x2892	; 0x2892 <vTaskDelay>
	xSemaphoreGive(Mutex_humidity);
	isTaken_humidity = 0;
}

float getTemperature(){
	while(isTaken_temperature){
     9c4:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <isTaken_temperature>
     9c8:	81 11       	cpse	r24, r1
     9ca:	f6 cf       	rjmp	.-20     	; 0x9b8 <getTemperature+0x8>
		vTaskDelay(50);
	}
	return local_temperature;
     9cc:	60 91 86 1a 	lds	r22, 0x1A86	; 0x801a86 <local_temperature>
     9d0:	70 91 87 1a 	lds	r23, 0x1A87	; 0x801a87 <local_temperature+0x1>
     9d4:	80 91 88 1a 	lds	r24, 0x1A88	; 0x801a88 <local_temperature+0x2>
     9d8:	90 91 89 1a 	lds	r25, 0x1A89	; 0x801a89 <local_temperature+0x3>
}
     9dc:	08 95       	ret

000009de <setTemperature>:
void setTemperature(float temperature_level){
     9de:	cf 92       	push	r12
     9e0:	df 92       	push	r13
     9e2:	ef 92       	push	r14
     9e4:	ff 92       	push	r15
     9e6:	0f 93       	push	r16
     9e8:	6b 01       	movw	r12, r22
     9ea:	7c 01       	movw	r14, r24
	xSemaphoreTake(Mutex_temperature,1000);
     9ec:	48 ee       	ldi	r20, 0xE8	; 232
     9ee:	53 e0       	ldi	r21, 0x03	; 3
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	80 91 82 1a 	lds	r24, 0x1A82	; 0x801a82 <Mutex_temperature>
     9f8:	90 91 83 1a 	lds	r25, 0x1A83	; 0x801a83 <Mutex_temperature+0x1>
     9fc:	be d7       	rcall	.+3964   	; 0x197a <xQueueSemaphoreTake>
	isTaken_temperature = 1;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	80 93 d2 08 	sts	0x08D2, r24	; 0x8008d2 <isTaken_temperature>
	local_temperature = temperature_level;
     a04:	c0 92 86 1a 	sts	0x1A86, r12	; 0x801a86 <local_temperature>
     a08:	d0 92 87 1a 	sts	0x1A87, r13	; 0x801a87 <local_temperature+0x1>
     a0c:	e0 92 88 1a 	sts	0x1A88, r14	; 0x801a88 <local_temperature+0x2>
     a10:	f0 92 89 1a 	sts	0x1A89, r15	; 0x801a89 <local_temperature+0x3>
	xSemaphoreGive(Mutex_temperature);
     a14:	00 e0       	ldi	r16, 0x00	; 0
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	a9 01       	movw	r20, r18
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	80 91 82 1a 	lds	r24, 0x1A82	; 0x801a82 <Mutex_temperature>
     a24:	90 91 83 1a 	lds	r25, 0x1A83	; 0x801a83 <Mutex_temperature+0x1>
     a28:	1b d6       	rcall	.+3126   	; 0x1660 <xQueueGenericSend>
	isTaken_temperature = 0;
     a2a:	10 92 d2 08 	sts	0x08D2, r1	; 0x8008d2 <isTaken_temperature>
}
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	df 90       	pop	r13
     a36:	cf 90       	pop	r12
     a38:	08 95       	ret

00000a3a <init_resources>:



void init_resources(){
	
	 local_CO2 = (uint16_t)pvPortMalloc(sizeof(uint16_t));
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	d4 d1       	rcall	.+936    	; 0xde8 <pvPortMalloc>
     a40:	90 93 8b 1a 	sts	0x1A8B, r25	; 0x801a8b <local_CO2+0x1>
     a44:	80 93 8a 1a 	sts	0x1A8A, r24	; 0x801a8a <local_CO2>
     a48:	08 95       	ret

00000a4a <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     a4a:	e7 e0       	ldi	r30, 0x07	; 7
     a4c:	f1 e0       	ldi	r31, 0x01	; 1
     a4e:	80 81       	ld	r24, Z
     a50:	8f 60       	ori	r24, 0x0F	; 15
     a52:	80 83       	st	Z, r24
     a54:	08 95       	ret

00000a56 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     a56:	e8 e0       	ldi	r30, 0x08	; 8
     a58:	f1 e0       	ldi	r31, 0x01	; 1
     a5a:	90 81       	ld	r25, Z
     a5c:	90 7f       	andi	r25, 0xF0	; 240
     a5e:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     a60:	90 81       	ld	r25, Z
     a62:	8f 70       	andi	r24, 0x0F	; 15
     a64:	98 2b       	or	r25, r24
     a66:	90 83       	st	Z, r25
     a68:	08 95       	ret

00000a6a <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     a6a:	e8 e0       	ldi	r30, 0x08	; 8
     a6c:	f1 e0       	ldi	r31, 0x01	; 1
     a6e:	80 81       	ld	r24, Z
     a70:	80 7f       	andi	r24, 0xF0	; 240
     a72:	80 83       	st	Z, r24
     a74:	08 95       	ret

00000a76 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	80 e1       	ldi	r24, 0x10	; 16
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	b4 d1       	rcall	.+872    	; 0xde8 <pvPortMalloc>
     a80:	ec 01       	movw	r28, r24
     a82:	00 97       	sbiw	r24, 0x00	; 0
     a84:	39 f0       	breq	.+14     	; 0xa94 <xEventGroupCreate+0x1e>
     a86:	fc 01       	movw	r30, r24
     a88:	11 92       	st	Z+, r1
     a8a:	11 92       	st	Z+, r1
     a8c:	11 92       	st	Z+, r1
     a8e:	11 92       	st	Z+, r1
     a90:	cf 01       	movw	r24, r30
     a92:	94 d2       	rcall	.+1320   	; 0xfbc <vListInitialise>
     a94:	ce 01       	movw	r24, r28
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <xEventGroupWaitBits>:
     a9c:	2f 92       	push	r2
     a9e:	3f 92       	push	r3
     aa0:	4f 92       	push	r4
     aa2:	5f 92       	push	r5
     aa4:	6f 92       	push	r6
     aa6:	7f 92       	push	r7
     aa8:	8f 92       	push	r8
     aaa:	9f 92       	push	r9
     aac:	af 92       	push	r10
     aae:	bf 92       	push	r11
     ab0:	cf 92       	push	r12
     ab2:	df 92       	push	r13
     ab4:	ef 92       	push	r14
     ab6:	ff 92       	push	r15
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	ec 01       	movw	r28, r24
     ac2:	4a 01       	movw	r8, r20
     ac4:	5b 01       	movw	r10, r22
     ac6:	62 2e       	mov	r6, r18
     ac8:	70 2e       	mov	r7, r16
     aca:	0e 94 86 12 	call	0x250c	; 0x250c <vTaskSuspendAll>
     ace:	28 80       	ld	r2, Y
     ad0:	39 80       	ldd	r3, Y+1	; 0x01
     ad2:	4a 80       	ldd	r4, Y+2	; 0x02
     ad4:	5b 80       	ldd	r5, Y+3	; 0x03
     ad6:	01 11       	cpse	r16, r1
     ad8:	0d c0       	rjmp	.+26     	; 0xaf4 <xEventGroupWaitBits+0x58>
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	b2 01       	movw	r22, r4
     ade:	a1 01       	movw	r20, r2
     ae0:	48 21       	and	r20, r8
     ae2:	59 21       	and	r21, r9
     ae4:	6a 21       	and	r22, r10
     ae6:	7b 21       	and	r23, r11
     ae8:	45 2b       	or	r20, r21
     aea:	46 2b       	or	r20, r22
     aec:	47 2b       	or	r20, r23
     aee:	79 f4       	brne	.+30     	; 0xb0e <xEventGroupWaitBits+0x72>
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	0d c0       	rjmp	.+26     	; 0xb0e <xEventGroupWaitBits+0x72>
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	b2 01       	movw	r22, r4
     af8:	a1 01       	movw	r20, r2
     afa:	48 21       	and	r20, r8
     afc:	59 21       	and	r21, r9
     afe:	6a 21       	and	r22, r10
     b00:	7b 21       	and	r23, r11
     b02:	48 15       	cp	r20, r8
     b04:	59 05       	cpc	r21, r9
     b06:	6a 05       	cpc	r22, r10
     b08:	7b 05       	cpc	r23, r11
     b0a:	09 f0       	breq	.+2      	; 0xb0e <xEventGroupWaitBits+0x72>
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	88 23       	and	r24, r24
     b10:	81 f0       	breq	.+32     	; 0xb32 <xEventGroupWaitBits+0x96>
     b12:	66 20       	and	r6, r6
     b14:	09 f4       	brne	.+2      	; 0xb18 <xEventGroupWaitBits+0x7c>
     b16:	6b c0       	rjmp	.+214    	; 0xbee <xEventGroupWaitBits+0x152>
     b18:	80 94       	com	r8
     b1a:	90 94       	com	r9
     b1c:	a0 94       	com	r10
     b1e:	b0 94       	com	r11
     b20:	82 20       	and	r8, r2
     b22:	93 20       	and	r9, r3
     b24:	a4 20       	and	r10, r4
     b26:	b5 20       	and	r11, r5
     b28:	88 82       	st	Y, r8
     b2a:	99 82       	std	Y+1, r9	; 0x01
     b2c:	aa 82       	std	Y+2, r10	; 0x02
     b2e:	bb 82       	std	Y+3, r11	; 0x03
     b30:	5e c0       	rjmp	.+188    	; 0xbee <xEventGroupWaitBits+0x152>
     b32:	c1 14       	cp	r12, r1
     b34:	d1 04       	cpc	r13, r1
     b36:	e1 04       	cpc	r14, r1
     b38:	f1 04       	cpc	r15, r1
     b3a:	09 f4       	brne	.+2      	; 0xb3e <xEventGroupWaitBits+0xa2>
     b3c:	58 c0       	rjmp	.+176    	; 0xbee <xEventGroupWaitBits+0x152>
     b3e:	66 20       	and	r6, r6
     b40:	29 f0       	breq	.+10     	; 0xb4c <xEventGroupWaitBits+0xb0>
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	71 e0       	ldi	r23, 0x01	; 1
     b4a:	03 c0       	rjmp	.+6      	; 0xb52 <xEventGroupWaitBits+0xb6>
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	ba 01       	movw	r22, r20
     b52:	71 10       	cpse	r7, r1
     b54:	74 60       	ori	r23, 0x04	; 4
     b56:	48 29       	or	r20, r8
     b58:	59 29       	or	r21, r9
     b5a:	6a 29       	or	r22, r10
     b5c:	7b 29       	or	r23, r11
     b5e:	97 01       	movw	r18, r14
     b60:	86 01       	movw	r16, r12
     b62:	ce 01       	movw	r24, r28
     b64:	04 96       	adiw	r24, 0x04	; 4
     b66:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <vTaskPlaceOnUnorderedEventList>
     b6a:	0e 94 6f 13 	call	0x26de	; 0x26de <xTaskResumeAll>
     b6e:	81 11       	cpse	r24, r1
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <xEventGroupWaitBits+0xd8>
     b72:	6c d3       	rcall	.+1752   	; 0x124c <vPortYield>
     b74:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <uxTaskResetEventItemValue>
     b78:	91 fd       	sbrc	r25, 1
     b7a:	35 c0       	rjmp	.+106    	; 0xbe6 <xEventGroupWaitBits+0x14a>
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	0f 92       	push	r0
     b82:	68 81       	ld	r22, Y
     b84:	79 81       	ldd	r23, Y+1	; 0x01
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	9b 81       	ldd	r25, Y+3	; 0x03
     b8a:	71 10       	cpse	r7, r1
     b8c:	0d c0       	rjmp	.+26     	; 0xba8 <xEventGroupWaitBits+0x10c>
     b8e:	21 e0       	ldi	r18, 0x01	; 1
     b90:	75 01       	movw	r14, r10
     b92:	64 01       	movw	r12, r8
     b94:	c6 22       	and	r12, r22
     b96:	d7 22       	and	r13, r23
     b98:	e8 22       	and	r14, r24
     b9a:	f9 22       	and	r15, r25
     b9c:	cd 28       	or	r12, r13
     b9e:	ce 28       	or	r12, r14
     ba0:	cf 28       	or	r12, r15
     ba2:	79 f4       	brne	.+30     	; 0xbc2 <xEventGroupWaitBits+0x126>
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	0d c0       	rjmp	.+26     	; 0xbc2 <xEventGroupWaitBits+0x126>
     ba8:	21 e0       	ldi	r18, 0x01	; 1
     baa:	75 01       	movw	r14, r10
     bac:	64 01       	movw	r12, r8
     bae:	c6 22       	and	r12, r22
     bb0:	d7 22       	and	r13, r23
     bb2:	e8 22       	and	r14, r24
     bb4:	f9 22       	and	r15, r25
     bb6:	c8 14       	cp	r12, r8
     bb8:	d9 04       	cpc	r13, r9
     bba:	ea 04       	cpc	r14, r10
     bbc:	fb 04       	cpc	r15, r11
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <xEventGroupWaitBits+0x126>
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	22 23       	and	r18, r18
     bc4:	71 f0       	breq	.+28     	; 0xbe2 <xEventGroupWaitBits+0x146>
     bc6:	66 20       	and	r6, r6
     bc8:	61 f0       	breq	.+24     	; 0xbe2 <xEventGroupWaitBits+0x146>
     bca:	80 94       	com	r8
     bcc:	90 94       	com	r9
     bce:	a0 94       	com	r10
     bd0:	b0 94       	com	r11
     bd2:	86 22       	and	r8, r22
     bd4:	97 22       	and	r9, r23
     bd6:	a8 22       	and	r10, r24
     bd8:	b9 22       	and	r11, r25
     bda:	88 82       	st	Y, r8
     bdc:	99 82       	std	Y+1, r9	; 0x01
     bde:	aa 82       	std	Y+2, r10	; 0x02
     be0:	bb 82       	std	Y+3, r11	; 0x03
     be2:	0f 90       	pop	r0
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	1b 01       	movw	r2, r22
     be8:	2c 01       	movw	r4, r24
     bea:	55 24       	eor	r5, r5
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <xEventGroupWaitBits+0x156>
     bee:	0e 94 6f 13 	call	0x26de	; 0x26de <xTaskResumeAll>
     bf2:	c2 01       	movw	r24, r4
     bf4:	b1 01       	movw	r22, r2
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	ff 90       	pop	r15
     c00:	ef 90       	pop	r14
     c02:	df 90       	pop	r13
     c04:	cf 90       	pop	r12
     c06:	bf 90       	pop	r11
     c08:	af 90       	pop	r10
     c0a:	9f 90       	pop	r9
     c0c:	8f 90       	pop	r8
     c0e:	7f 90       	pop	r7
     c10:	6f 90       	pop	r6
     c12:	5f 90       	pop	r5
     c14:	4f 90       	pop	r4
     c16:	3f 90       	pop	r3
     c18:	2f 90       	pop	r2
     c1a:	08 95       	ret

00000c1c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     c1c:	4f 92       	push	r4
     c1e:	5f 92       	push	r5
     c20:	6f 92       	push	r6
     c22:	7f 92       	push	r7
     c24:	8f 92       	push	r8
     c26:	9f 92       	push	r9
     c28:	af 92       	push	r10
     c2a:	bf 92       	push	r11
     c2c:	cf 92       	push	r12
     c2e:	df 92       	push	r13
     c30:	ef 92       	push	r14
     c32:	ff 92       	push	r15
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	ec 01       	movw	r28, r24
     c3e:	6a 01       	movw	r12, r20
     c40:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c42:	8c 01       	movw	r16, r24
     c44:	09 5f       	subi	r16, 0xF9	; 249
     c46:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     c48:	0e 94 86 12 	call	0x250c	; 0x250c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     c4c:	eb 85       	ldd	r30, Y+11	; 0x0b
     c4e:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     c50:	88 81       	ld	r24, Y
     c52:	99 81       	ldd	r25, Y+1	; 0x01
     c54:	aa 81       	ldd	r26, Y+2	; 0x02
     c56:	bb 81       	ldd	r27, Y+3	; 0x03
     c58:	c8 2a       	or	r12, r24
     c5a:	d9 2a       	or	r13, r25
     c5c:	ea 2a       	or	r14, r26
     c5e:	fb 2a       	or	r15, r27
     c60:	c8 82       	st	Y, r12
     c62:	d9 82       	std	Y+1, r13	; 0x01
     c64:	ea 82       	std	Y+2, r14	; 0x02
     c66:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     c68:	0e 17       	cp	r16, r30
     c6a:	1f 07       	cpc	r17, r31
     c6c:	09 f4       	brne	.+2      	; 0xc70 <xEventGroupSetBits+0x54>
     c6e:	45 c0       	rjmp	.+138    	; 0xcfa <xEventGroupSetBits+0xde>
     c70:	c1 2c       	mov	r12, r1
     c72:	d1 2c       	mov	r13, r1
     c74:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     c76:	99 24       	eor	r9, r9
     c78:	93 94       	inc	r9
     c7a:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
     c7c:	a4 80       	ldd	r10, Z+4	; 0x04
     c7e:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     c80:	80 81       	ld	r24, Z
     c82:	91 81       	ldd	r25, Z+1	; 0x01
     c84:	a2 81       	ldd	r26, Z+2	; 0x02
     c86:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     c88:	ac 01       	movw	r20, r24
     c8a:	bd 01       	movw	r22, r26
     c8c:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     c8e:	b2 fd       	sbrc	r27, 2
     c90:	0f c0       	rjmp	.+30     	; 0xcb0 <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     c92:	48 80       	ld	r4, Y
     c94:	59 80       	ldd	r5, Y+1	; 0x01
     c96:	6a 80       	ldd	r6, Y+2	; 0x02
     c98:	7b 80       	ldd	r7, Y+3	; 0x03
     c9a:	44 22       	and	r4, r20
     c9c:	55 22       	and	r5, r21
     c9e:	66 22       	and	r6, r22
     ca0:	77 22       	and	r7, r23
     ca2:	29 2d       	mov	r18, r9
     ca4:	45 28       	or	r4, r5
     ca6:	46 28       	or	r4, r6
     ca8:	47 28       	or	r4, r7
     caa:	89 f4       	brne	.+34     	; 0xcce <xEventGroupSetBits+0xb2>
     cac:	28 2d       	mov	r18, r8
     cae:	0f c0       	rjmp	.+30     	; 0xcce <xEventGroupSetBits+0xb2>
     cb0:	48 80       	ld	r4, Y
     cb2:	59 80       	ldd	r5, Y+1	; 0x01
     cb4:	6a 80       	ldd	r6, Y+2	; 0x02
     cb6:	7b 80       	ldd	r7, Y+3	; 0x03
     cb8:	44 22       	and	r4, r20
     cba:	55 22       	and	r5, r21
     cbc:	66 22       	and	r6, r22
     cbe:	77 22       	and	r7, r23
     cc0:	29 2d       	mov	r18, r9
     cc2:	44 16       	cp	r4, r20
     cc4:	55 06       	cpc	r5, r21
     cc6:	66 06       	cpc	r6, r22
     cc8:	77 06       	cpc	r7, r23
     cca:	09 f0       	breq	.+2      	; 0xcce <xEventGroupSetBits+0xb2>
     ccc:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     cce:	22 23       	and	r18, r18
     cd0:	71 f0       	breq	.+28     	; 0xcee <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     cd2:	b0 ff       	sbrs	r27, 0
     cd4:	04 c0       	rjmp	.+8      	; 0xcde <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     cd6:	c4 2a       	or	r12, r20
     cd8:	d5 2a       	or	r13, r21
     cda:	e6 2a       	or	r14, r22
     cdc:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     cde:	48 81       	ld	r20, Y
     ce0:	59 81       	ldd	r21, Y+1	; 0x01
     ce2:	6a 81       	ldd	r22, Y+2	; 0x02
     ce4:	7b 81       	ldd	r23, Y+3	; 0x03
     ce6:	72 60       	ori	r23, 0x02	; 2
     ce8:	cf 01       	movw	r24, r30
     cea:	0e 94 7e 15 	call	0x2afc	; 0x2afc <vTaskRemoveFromUnorderedEventList>
     cee:	ea 2d       	mov	r30, r10
     cf0:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     cf2:	0e 17       	cp	r16, r30
     cf4:	1f 07       	cpc	r17, r31
     cf6:	11 f6       	brne	.-124    	; 0xc7c <xEventGroupSetBits+0x60>
     cf8:	03 c0       	rjmp	.+6      	; 0xd00 <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     cfa:	c1 2c       	mov	r12, r1
     cfc:	d1 2c       	mov	r13, r1
     cfe:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     d00:	c0 94       	com	r12
     d02:	d0 94       	com	r13
     d04:	e0 94       	com	r14
     d06:	f0 94       	com	r15
     d08:	88 81       	ld	r24, Y
     d0a:	99 81       	ldd	r25, Y+1	; 0x01
     d0c:	aa 81       	ldd	r26, Y+2	; 0x02
     d0e:	bb 81       	ldd	r27, Y+3	; 0x03
     d10:	c8 22       	and	r12, r24
     d12:	d9 22       	and	r13, r25
     d14:	ea 22       	and	r14, r26
     d16:	fb 22       	and	r15, r27
     d18:	c8 82       	st	Y, r12
     d1a:	d9 82       	std	Y+1, r13	; 0x01
     d1c:	ea 82       	std	Y+2, r14	; 0x02
     d1e:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     d20:	0e 94 6f 13 	call	0x26de	; 0x26de <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     d24:	68 81       	ld	r22, Y
     d26:	79 81       	ldd	r23, Y+1	; 0x01
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	9b 81       	ldd	r25, Y+3	; 0x03
}
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	ef 90       	pop	r14
     d38:	df 90       	pop	r13
     d3a:	cf 90       	pop	r12
     d3c:	bf 90       	pop	r11
     d3e:	af 90       	pop	r10
     d40:	9f 90       	pop	r9
     d42:	8f 90       	pop	r8
     d44:	7f 90       	pop	r7
     d46:	6f 90       	pop	r6
     d48:	5f 90       	pop	r5
     d4a:	4f 90       	pop	r4
     d4c:	08 95       	ret

00000d4e <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     d54:	ed ed       	ldi	r30, 0xDD	; 221
     d56:	f8 e0       	ldi	r31, 0x08	; 8
     d58:	01 c0       	rjmp	.+2      	; 0xd5c <prvInsertBlockIntoFreeList+0xe>
     d5a:	f9 01       	movw	r30, r18
     d5c:	20 81       	ld	r18, Z
     d5e:	31 81       	ldd	r19, Z+1	; 0x01
     d60:	2a 17       	cp	r18, r26
     d62:	3b 07       	cpc	r19, r27
     d64:	d0 f3       	brcs	.-12     	; 0xd5a <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     d66:	82 81       	ldd	r24, Z+2	; 0x02
     d68:	93 81       	ldd	r25, Z+3	; 0x03
     d6a:	af 01       	movw	r20, r30
     d6c:	48 0f       	add	r20, r24
     d6e:	59 1f       	adc	r21, r25
     d70:	a4 17       	cp	r26, r20
     d72:	b5 07       	cpc	r27, r21
     d74:	49 f4       	brne	.+18     	; 0xd88 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     d76:	12 96       	adiw	r26, 0x02	; 2
     d78:	4d 91       	ld	r20, X+
     d7a:	5c 91       	ld	r21, X
     d7c:	13 97       	sbiw	r26, 0x03	; 3
     d7e:	84 0f       	add	r24, r20
     d80:	95 1f       	adc	r25, r21
     d82:	93 83       	std	Z+3, r25	; 0x03
     d84:	82 83       	std	Z+2, r24	; 0x02
     d86:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	8d 91       	ld	r24, X+
     d8c:	9c 91       	ld	r25, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	ed 01       	movw	r28, r26
     d92:	c8 0f       	add	r28, r24
     d94:	d9 1f       	adc	r29, r25
     d96:	2c 17       	cp	r18, r28
     d98:	3d 07       	cpc	r19, r29
     d9a:	d9 f4       	brne	.+54     	; 0xdd2 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     d9c:	20 91 db 08 	lds	r18, 0x08DB	; 0x8008db <pxEnd>
     da0:	30 91 dc 08 	lds	r19, 0x08DC	; 0x8008dc <pxEnd+0x1>
     da4:	c2 17       	cp	r28, r18
     da6:	d3 07       	cpc	r29, r19
     da8:	81 f0       	breq	.+32     	; 0xdca <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     daa:	2a 81       	ldd	r18, Y+2	; 0x02
     dac:	3b 81       	ldd	r19, Y+3	; 0x03
     dae:	82 0f       	add	r24, r18
     db0:	93 1f       	adc	r25, r19
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	9c 93       	st	X, r25
     db6:	8e 93       	st	-X, r24
     db8:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     dba:	c0 81       	ld	r28, Z
     dbc:	d1 81       	ldd	r29, Z+1	; 0x01
     dbe:	88 81       	ld	r24, Y
     dc0:	99 81       	ldd	r25, Y+1	; 0x01
     dc2:	11 96       	adiw	r26, 0x01	; 1
     dc4:	9c 93       	st	X, r25
     dc6:	8e 93       	st	-X, r24
     dc8:	07 c0       	rjmp	.+14     	; 0xdd8 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     dca:	11 96       	adiw	r26, 0x01	; 1
     dcc:	dc 93       	st	X, r29
     dce:	ce 93       	st	-X, r28
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     dd2:	11 96       	adiw	r26, 0x01	; 1
     dd4:	3c 93       	st	X, r19
     dd6:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     dd8:	ae 17       	cp	r26, r30
     dda:	bf 07       	cpc	r27, r31
     ddc:	11 f0       	breq	.+4      	; 0xde2 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     dde:	b1 83       	std	Z+1, r27	; 0x01
     de0:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	08 95       	ret

00000de8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     de8:	cf 92       	push	r12
     dea:	df 92       	push	r13
     dec:	ef 92       	push	r14
     dee:	ff 92       	push	r15
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
     dfa:	0e 94 86 12 	call	0x250c	; 0x250c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     dfe:	80 91 db 08 	lds	r24, 0x08DB	; 0x8008db <pxEnd>
     e02:	90 91 dc 08 	lds	r25, 0x08DC	; 0x8008dc <pxEnd+0x1>
     e06:	89 2b       	or	r24, r25
     e08:	41 f5       	brne	.+80     	; 0xe5a <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     e0a:	ed ed       	ldi	r30, 0xDD	; 221
     e0c:	f8 e0       	ldi	r31, 0x08	; 8
     e0e:	a1 ee       	ldi	r26, 0xE1	; 225
     e10:	b8 e0       	ldi	r27, 0x08	; 8
     e12:	b1 83       	std	Z+1, r27	; 0x01
     e14:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
     e16:	13 82       	std	Z+3, r1	; 0x03
     e18:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     e1a:	ed e7       	ldi	r30, 0x7D	; 125
     e1c:	f8 e1       	ldi	r31, 0x18	; 24
     e1e:	f0 93 dc 08 	sts	0x08DC, r31	; 0x8008dc <pxEnd+0x1>
     e22:	e0 93 db 08 	sts	0x08DB, r30	; 0x8008db <pxEnd>
	pxEnd->xBlockSize = 0;
     e26:	13 82       	std	Z+3, r1	; 0x03
     e28:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     e2a:	11 82       	std	Z+1, r1	; 0x01
     e2c:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     e2e:	8c e9       	ldi	r24, 0x9C	; 156
     e30:	9f e0       	ldi	r25, 0x0F	; 15
     e32:	13 96       	adiw	r26, 0x03	; 3
     e34:	9c 93       	st	X, r25
     e36:	8e 93       	st	-X, r24
     e38:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     e3a:	ed 93       	st	X+, r30
     e3c:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     e3e:	90 93 d8 08 	sts	0x08D8, r25	; 0x8008d8 <xMinimumEverFreeBytesRemaining+0x1>
     e42:	80 93 d7 08 	sts	0x08D7, r24	; 0x8008d7 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     e46:	90 93 da 08 	sts	0x08DA, r25	; 0x8008da <xFreeBytesRemaining+0x1>
     e4a:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e8       	ldi	r25, 0x80	; 128
     e52:	90 93 d6 08 	sts	0x08D6, r25	; 0x8008d6 <xBlockAllocatedBit+0x1>
     e56:	80 93 d5 08 	sts	0x08D5, r24	; 0x8008d5 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     e5a:	e0 90 d5 08 	lds	r14, 0x08D5	; 0x8008d5 <xBlockAllocatedBit>
     e5e:	f0 90 d6 08 	lds	r15, 0x08D6	; 0x8008d6 <xBlockAllocatedBit+0x1>
     e62:	c7 01       	movw	r24, r14
     e64:	8c 23       	and	r24, r28
     e66:	9d 23       	and	r25, r29
     e68:	89 2b       	or	r24, r25
     e6a:	09 f0       	breq	.+2      	; 0xe6e <pvPortMalloc+0x86>
     e6c:	66 c0       	rjmp	.+204    	; 0xf3a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     e6e:	20 97       	sbiw	r28, 0x00	; 0
     e70:	09 f4       	brne	.+2      	; 0xe74 <pvPortMalloc+0x8c>
     e72:	66 c0       	rjmp	.+204    	; 0xf40 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
     e74:	ae 01       	movw	r20, r28
     e76:	4c 5f       	subi	r20, 0xFC	; 252
     e78:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     e7a:	09 f4       	brne	.+2      	; 0xe7e <pvPortMalloc+0x96>
     e7c:	5e c0       	rjmp	.+188    	; 0xf3a <pvPortMalloc+0x152>
     e7e:	00 91 d9 08 	lds	r16, 0x08D9	; 0x8008d9 <xFreeBytesRemaining>
     e82:	10 91 da 08 	lds	r17, 0x08DA	; 0x8008da <xFreeBytesRemaining+0x1>
     e86:	04 17       	cp	r16, r20
     e88:	15 07       	cpc	r17, r21
     e8a:	08 f4       	brcc	.+2      	; 0xe8e <pvPortMalloc+0xa6>
     e8c:	56 c0       	rjmp	.+172    	; 0xf3a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
     e8e:	c0 91 dd 08 	lds	r28, 0x08DD	; 0x8008dd <xStart>
     e92:	d0 91 de 08 	lds	r29, 0x08DE	; 0x8008de <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     e96:	ed ed       	ldi	r30, 0xDD	; 221
     e98:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <pvPortMalloc+0xb8>
     e9c:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
     e9e:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     ea0:	2a 81       	ldd	r18, Y+2	; 0x02
     ea2:	3b 81       	ldd	r19, Y+3	; 0x03
     ea4:	24 17       	cp	r18, r20
     ea6:	35 07       	cpc	r19, r21
     ea8:	28 f4       	brcc	.+10     	; 0xeb4 <pvPortMalloc+0xcc>
     eaa:	28 81       	ld	r18, Y
     eac:	39 81       	ldd	r19, Y+1	; 0x01
     eae:	21 15       	cp	r18, r1
     eb0:	31 05       	cpc	r19, r1
     eb2:	a1 f7       	brne	.-24     	; 0xe9c <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     eb4:	80 91 db 08 	lds	r24, 0x08DB	; 0x8008db <pxEnd>
     eb8:	90 91 dc 08 	lds	r25, 0x08DC	; 0x8008dc <pxEnd+0x1>
     ebc:	c8 17       	cp	r28, r24
     ebe:	d9 07       	cpc	r29, r25
     ec0:	e1 f1       	breq	.+120    	; 0xf3a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     ec2:	c0 80       	ld	r12, Z
     ec4:	d1 80       	ldd	r13, Z+1	; 0x01
     ec6:	84 e0       	ldi	r24, 0x04	; 4
     ec8:	c8 0e       	add	r12, r24
     eca:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     ecc:	88 81       	ld	r24, Y
     ece:	99 81       	ldd	r25, Y+1	; 0x01
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     ed4:	2a 81       	ldd	r18, Y+2	; 0x02
     ed6:	3b 81       	ldd	r19, Y+3	; 0x03
     ed8:	24 1b       	sub	r18, r20
     eda:	35 0b       	sbc	r19, r21
     edc:	29 30       	cpi	r18, 0x09	; 9
     ede:	31 05       	cpc	r19, r1
     ee0:	48 f0       	brcs	.+18     	; 0xef4 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     ee2:	ce 01       	movw	r24, r28
     ee4:	84 0f       	add	r24, r20
     ee6:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     ee8:	fc 01       	movw	r30, r24
     eea:	33 83       	std	Z+3, r19	; 0x03
     eec:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
     eee:	5b 83       	std	Y+3, r21	; 0x03
     ef0:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     ef2:	2d df       	rcall	.-422    	; 0xd4e <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	9b 81       	ldd	r25, Y+3	; 0x03
     ef8:	08 1b       	sub	r16, r24
     efa:	19 0b       	sbc	r17, r25
     efc:	10 93 da 08 	sts	0x08DA, r17	; 0x8008da <xFreeBytesRemaining+0x1>
     f00:	00 93 d9 08 	sts	0x08D9, r16	; 0x8008d9 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     f04:	20 91 d7 08 	lds	r18, 0x08D7	; 0x8008d7 <xMinimumEverFreeBytesRemaining>
     f08:	30 91 d8 08 	lds	r19, 0x08D8	; 0x8008d8 <xMinimumEverFreeBytesRemaining+0x1>
     f0c:	02 17       	cp	r16, r18
     f0e:	13 07       	cpc	r17, r19
     f10:	20 f4       	brcc	.+8      	; 0xf1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     f12:	10 93 d8 08 	sts	0x08D8, r17	; 0x8008d8 <xMinimumEverFreeBytesRemaining+0x1>
     f16:	00 93 d7 08 	sts	0x08D7, r16	; 0x8008d7 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     f1a:	e8 2a       	or	r14, r24
     f1c:	f9 2a       	or	r15, r25
     f1e:	fb 82       	std	Y+3, r15	; 0x03
     f20:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
     f22:	19 82       	std	Y+1, r1	; 0x01
     f24:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     f26:	0e 94 6f 13 	call	0x26de	; 0x26de <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     f2a:	c1 14       	cp	r12, r1
     f2c:	d1 04       	cpc	r13, r1
     f2e:	59 f4       	brne	.+22     	; 0xf46 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     f30:	0e 94 a0 1a 	call	0x3540	; 0x3540 <vApplicationMallocFailedHook>
     f34:	c1 2c       	mov	r12, r1
     f36:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
     f38:	06 c0       	rjmp	.+12     	; 0xf46 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     f3a:	0e 94 6f 13 	call	0x26de	; 0x26de <xTaskResumeAll>
     f3e:	f8 cf       	rjmp	.-16     	; 0xf30 <pvPortMalloc+0x148>
     f40:	0e 94 6f 13 	call	0x26de	; 0x26de <xTaskResumeAll>
     f44:	f5 cf       	rjmp	.-22     	; 0xf30 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
     f46:	c6 01       	movw	r24, r12
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	df 90       	pop	r13
     f56:	cf 90       	pop	r12
     f58:	08 95       	ret

00000f5a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	51 f1       	breq	.+84     	; 0xfb6 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     f62:	fc 01       	movw	r30, r24
     f64:	34 97       	sbiw	r30, 0x04	; 4
     f66:	22 81       	ldd	r18, Z+2	; 0x02
     f68:	33 81       	ldd	r19, Z+3	; 0x03
     f6a:	40 91 d5 08 	lds	r20, 0x08D5	; 0x8008d5 <xBlockAllocatedBit>
     f6e:	50 91 d6 08 	lds	r21, 0x08D6	; 0x8008d6 <xBlockAllocatedBit+0x1>
     f72:	b9 01       	movw	r22, r18
     f74:	64 23       	and	r22, r20
     f76:	75 23       	and	r23, r21
     f78:	67 2b       	or	r22, r23
     f7a:	e9 f0       	breq	.+58     	; 0xfb6 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
     f7c:	60 81       	ld	r22, Z
     f7e:	71 81       	ldd	r23, Z+1	; 0x01
     f80:	67 2b       	or	r22, r23
     f82:	c9 f4       	brne	.+50     	; 0xfb6 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
     f84:	ef 01       	movw	r28, r30
     f86:	40 95       	com	r20
     f88:	50 95       	com	r21
     f8a:	24 23       	and	r18, r20
     f8c:	35 23       	and	r19, r21
     f8e:	33 83       	std	Z+3, r19	; 0x03
     f90:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
     f92:	0e 94 86 12 	call	0x250c	; 0x250c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
     f96:	20 91 d9 08 	lds	r18, 0x08D9	; 0x8008d9 <xFreeBytesRemaining>
     f9a:	30 91 da 08 	lds	r19, 0x08DA	; 0x8008da <xFreeBytesRemaining+0x1>
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	9b 81       	ldd	r25, Y+3	; 0x03
     fa2:	82 0f       	add	r24, r18
     fa4:	93 1f       	adc	r25, r19
     fa6:	90 93 da 08 	sts	0x08DA, r25	; 0x8008da <xFreeBytesRemaining+0x1>
     faa:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     fae:	ce 01       	movw	r24, r28
     fb0:	ce de       	rcall	.-612    	; 0xd4e <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
     fb2:	0e 94 6f 13 	call	0x26de	; 0x26de <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	08 95       	ret

00000fbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     fbc:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fbe:	03 96       	adiw	r24, 0x03	; 3
     fc0:	92 83       	std	Z+2, r25	; 0x02
     fc2:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     fc4:	4f ef       	ldi	r20, 0xFF	; 255
     fc6:	5f ef       	ldi	r21, 0xFF	; 255
     fc8:	ba 01       	movw	r22, r20
     fca:	43 83       	std	Z+3, r20	; 0x03
     fcc:	54 83       	std	Z+4, r21	; 0x04
     fce:	65 83       	std	Z+5, r22	; 0x05
     fd0:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fd2:	90 87       	std	Z+8, r25	; 0x08
     fd4:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fd6:	92 87       	std	Z+10, r25	; 0x0a
     fd8:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     fda:	10 82       	st	Z, r1
     fdc:	08 95       	ret

00000fde <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     fde:	fc 01       	movw	r30, r24
     fe0:	13 86       	std	Z+11, r1	; 0x0b
     fe2:	12 86       	std	Z+10, r1	; 0x0a
     fe4:	08 95       	ret

00000fe6 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	9c 01       	movw	r18, r24
     fec:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     fee:	dc 01       	movw	r26, r24
     ff0:	11 96       	adiw	r26, 0x01	; 1
     ff2:	cd 91       	ld	r28, X+
     ff4:	dc 91       	ld	r29, X
     ff6:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     ff8:	d5 83       	std	Z+5, r29	; 0x05
     ffa:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     ffc:	8e 81       	ldd	r24, Y+6	; 0x06
     ffe:	9f 81       	ldd	r25, Y+7	; 0x07
    1000:	97 83       	std	Z+7, r25	; 0x07
    1002:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1004:	8e 81       	ldd	r24, Y+6	; 0x06
    1006:	9f 81       	ldd	r25, Y+7	; 0x07
    1008:	dc 01       	movw	r26, r24
    100a:	15 96       	adiw	r26, 0x05	; 5
    100c:	7c 93       	st	X, r23
    100e:	6e 93       	st	-X, r22
    1010:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
    1012:	7f 83       	std	Y+7, r23	; 0x07
    1014:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1016:	33 87       	std	Z+11, r19	; 0x0b
    1018:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    101a:	f9 01       	movw	r30, r18
    101c:	80 81       	ld	r24, Z
    101e:	8f 5f       	subi	r24, 0xFF	; 255
    1020:	80 83       	st	Z, r24
}
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	08 95       	ret

00001028 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1032:	08 81       	ld	r16, Y
    1034:	19 81       	ldd	r17, Y+1	; 0x01
    1036:	2a 81       	ldd	r18, Y+2	; 0x02
    1038:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    103a:	0f 3f       	cpi	r16, 0xFF	; 255
    103c:	4f ef       	ldi	r20, 0xFF	; 255
    103e:	14 07       	cpc	r17, r20
    1040:	24 07       	cpc	r18, r20
    1042:	34 07       	cpc	r19, r20
    1044:	21 f4       	brne	.+8      	; 0x104e <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1046:	fc 01       	movw	r30, r24
    1048:	a1 85       	ldd	r26, Z+9	; 0x09
    104a:	b2 85       	ldd	r27, Z+10	; 0x0a
    104c:	11 c0       	rjmp	.+34     	; 0x1070 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    104e:	dc 01       	movw	r26, r24
    1050:	13 96       	adiw	r26, 0x03	; 3
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <vListInsert+0x2e>
    1054:	df 01       	movw	r26, r30
    1056:	14 96       	adiw	r26, 0x04	; 4
    1058:	ed 91       	ld	r30, X+
    105a:	fc 91       	ld	r31, X
    105c:	15 97       	sbiw	r26, 0x05	; 5
    105e:	40 81       	ld	r20, Z
    1060:	51 81       	ldd	r21, Z+1	; 0x01
    1062:	62 81       	ldd	r22, Z+2	; 0x02
    1064:	73 81       	ldd	r23, Z+3	; 0x03
    1066:	04 17       	cp	r16, r20
    1068:	15 07       	cpc	r17, r21
    106a:	26 07       	cpc	r18, r22
    106c:	37 07       	cpc	r19, r23
    106e:	90 f7       	brcc	.-28     	; 0x1054 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1070:	14 96       	adiw	r26, 0x04	; 4
    1072:	ed 91       	ld	r30, X+
    1074:	fc 91       	ld	r31, X
    1076:	15 97       	sbiw	r26, 0x05	; 5
    1078:	fd 83       	std	Y+5, r31	; 0x05
    107a:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    107c:	d7 83       	std	Z+7, r29	; 0x07
    107e:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    1080:	bf 83       	std	Y+7, r27	; 0x07
    1082:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    1084:	15 96       	adiw	r26, 0x05	; 5
    1086:	dc 93       	st	X, r29
    1088:	ce 93       	st	-X, r28
    108a:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    108c:	9b 87       	std	Y+11, r25	; 0x0b
    108e:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1090:	fc 01       	movw	r30, r24
    1092:	20 81       	ld	r18, Z
    1094:	2f 5f       	subi	r18, 0xFF	; 255
    1096:	20 83       	st	Z, r18
}
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	08 95       	ret

000010a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    10a8:	a2 85       	ldd	r26, Z+10	; 0x0a
    10aa:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    10ac:	c4 81       	ldd	r28, Z+4	; 0x04
    10ae:	d5 81       	ldd	r29, Z+5	; 0x05
    10b0:	86 81       	ldd	r24, Z+6	; 0x06
    10b2:	97 81       	ldd	r25, Z+7	; 0x07
    10b4:	9f 83       	std	Y+7, r25	; 0x07
    10b6:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    10b8:	c6 81       	ldd	r28, Z+6	; 0x06
    10ba:	d7 81       	ldd	r29, Z+7	; 0x07
    10bc:	84 81       	ldd	r24, Z+4	; 0x04
    10be:	95 81       	ldd	r25, Z+5	; 0x05
    10c0:	9d 83       	std	Y+5, r25	; 0x05
    10c2:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    10c4:	11 96       	adiw	r26, 0x01	; 1
    10c6:	8d 91       	ld	r24, X+
    10c8:	9c 91       	ld	r25, X
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	e8 17       	cp	r30, r24
    10ce:	f9 07       	cpc	r31, r25
    10d0:	31 f4       	brne	.+12     	; 0x10de <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    10d2:	86 81       	ldd	r24, Z+6	; 0x06
    10d4:	97 81       	ldd	r25, Z+7	; 0x07
    10d6:	12 96       	adiw	r26, 0x02	; 2
    10d8:	9c 93       	st	X, r25
    10da:	8e 93       	st	-X, r24
    10dc:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    10de:	13 86       	std	Z+11, r1	; 0x0b
    10e0:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    10e2:	8c 91       	ld	r24, X
    10e4:	81 50       	subi	r24, 0x01	; 1
    10e6:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    10e8:	8c 91       	ld	r24, X
}
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	08 95       	ret

000010f0 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    10f0:	31 e1       	ldi	r19, 0x11	; 17
    10f2:	fc 01       	movw	r30, r24
    10f4:	30 83       	st	Z, r19
    10f6:	31 97       	sbiw	r30, 0x01	; 1
    10f8:	22 e2       	ldi	r18, 0x22	; 34
    10fa:	20 83       	st	Z, r18
    10fc:	31 97       	sbiw	r30, 0x01	; 1
    10fe:	a3 e3       	ldi	r26, 0x33	; 51
    1100:	a0 83       	st	Z, r26
    1102:	31 97       	sbiw	r30, 0x01	; 1
    1104:	60 83       	st	Z, r22
    1106:	31 97       	sbiw	r30, 0x01	; 1
    1108:	70 83       	st	Z, r23
    110a:	31 97       	sbiw	r30, 0x01	; 1
    110c:	10 82       	st	Z, r1
    110e:	31 97       	sbiw	r30, 0x01	; 1
    1110:	10 82       	st	Z, r1
    1112:	31 97       	sbiw	r30, 0x01	; 1
    1114:	60 e8       	ldi	r22, 0x80	; 128
    1116:	60 83       	st	Z, r22
    1118:	31 97       	sbiw	r30, 0x01	; 1
    111a:	10 82       	st	Z, r1
    111c:	31 97       	sbiw	r30, 0x01	; 1
    111e:	10 82       	st	Z, r1
    1120:	31 97       	sbiw	r30, 0x01	; 1
    1122:	10 82       	st	Z, r1
    1124:	31 97       	sbiw	r30, 0x01	; 1
    1126:	62 e0       	ldi	r22, 0x02	; 2
    1128:	60 83       	st	Z, r22
    112a:	31 97       	sbiw	r30, 0x01	; 1
    112c:	63 e0       	ldi	r22, 0x03	; 3
    112e:	60 83       	st	Z, r22
    1130:	31 97       	sbiw	r30, 0x01	; 1
    1132:	64 e0       	ldi	r22, 0x04	; 4
    1134:	60 83       	st	Z, r22
    1136:	31 97       	sbiw	r30, 0x01	; 1
    1138:	65 e0       	ldi	r22, 0x05	; 5
    113a:	60 83       	st	Z, r22
    113c:	31 97       	sbiw	r30, 0x01	; 1
    113e:	66 e0       	ldi	r22, 0x06	; 6
    1140:	60 83       	st	Z, r22
    1142:	31 97       	sbiw	r30, 0x01	; 1
    1144:	67 e0       	ldi	r22, 0x07	; 7
    1146:	60 83       	st	Z, r22
    1148:	31 97       	sbiw	r30, 0x01	; 1
    114a:	68 e0       	ldi	r22, 0x08	; 8
    114c:	60 83       	st	Z, r22
    114e:	31 97       	sbiw	r30, 0x01	; 1
    1150:	69 e0       	ldi	r22, 0x09	; 9
    1152:	60 83       	st	Z, r22
    1154:	31 97       	sbiw	r30, 0x01	; 1
    1156:	60 e1       	ldi	r22, 0x10	; 16
    1158:	60 83       	st	Z, r22
    115a:	31 97       	sbiw	r30, 0x01	; 1
    115c:	30 83       	st	Z, r19
    115e:	31 97       	sbiw	r30, 0x01	; 1
    1160:	32 e1       	ldi	r19, 0x12	; 18
    1162:	30 83       	st	Z, r19
    1164:	31 97       	sbiw	r30, 0x01	; 1
    1166:	33 e1       	ldi	r19, 0x13	; 19
    1168:	30 83       	st	Z, r19
    116a:	31 97       	sbiw	r30, 0x01	; 1
    116c:	34 e1       	ldi	r19, 0x14	; 20
    116e:	30 83       	st	Z, r19
    1170:	31 97       	sbiw	r30, 0x01	; 1
    1172:	35 e1       	ldi	r19, 0x15	; 21
    1174:	30 83       	st	Z, r19
    1176:	31 97       	sbiw	r30, 0x01	; 1
    1178:	36 e1       	ldi	r19, 0x16	; 22
    117a:	30 83       	st	Z, r19
    117c:	31 97       	sbiw	r30, 0x01	; 1
    117e:	37 e1       	ldi	r19, 0x17	; 23
    1180:	30 83       	st	Z, r19
    1182:	31 97       	sbiw	r30, 0x01	; 1
    1184:	38 e1       	ldi	r19, 0x18	; 24
    1186:	30 83       	st	Z, r19
    1188:	31 97       	sbiw	r30, 0x01	; 1
    118a:	39 e1       	ldi	r19, 0x19	; 25
    118c:	30 83       	st	Z, r19
    118e:	31 97       	sbiw	r30, 0x01	; 1
    1190:	30 e2       	ldi	r19, 0x20	; 32
    1192:	30 83       	st	Z, r19
    1194:	31 97       	sbiw	r30, 0x01	; 1
    1196:	31 e2       	ldi	r19, 0x21	; 33
    1198:	30 83       	st	Z, r19
    119a:	31 97       	sbiw	r30, 0x01	; 1
    119c:	20 83       	st	Z, r18
    119e:	31 97       	sbiw	r30, 0x01	; 1
    11a0:	23 e2       	ldi	r18, 0x23	; 35
    11a2:	20 83       	st	Z, r18
    11a4:	31 97       	sbiw	r30, 0x01	; 1
    11a6:	40 83       	st	Z, r20
    11a8:	31 97       	sbiw	r30, 0x01	; 1
    11aa:	50 83       	st	Z, r21
    11ac:	31 97       	sbiw	r30, 0x01	; 1
    11ae:	26 e2       	ldi	r18, 0x26	; 38
    11b0:	20 83       	st	Z, r18
    11b2:	31 97       	sbiw	r30, 0x01	; 1
    11b4:	27 e2       	ldi	r18, 0x27	; 39
    11b6:	20 83       	st	Z, r18
    11b8:	31 97       	sbiw	r30, 0x01	; 1
    11ba:	28 e2       	ldi	r18, 0x28	; 40
    11bc:	20 83       	st	Z, r18
    11be:	31 97       	sbiw	r30, 0x01	; 1
    11c0:	29 e2       	ldi	r18, 0x29	; 41
    11c2:	20 83       	st	Z, r18
    11c4:	31 97       	sbiw	r30, 0x01	; 1
    11c6:	20 e3       	ldi	r18, 0x30	; 48
    11c8:	20 83       	st	Z, r18
    11ca:	31 97       	sbiw	r30, 0x01	; 1
    11cc:	21 e3       	ldi	r18, 0x31	; 49
    11ce:	20 83       	st	Z, r18
    11d0:	89 97       	sbiw	r24, 0x29	; 41
    11d2:	08 95       	ret

000011d4 <xPortStartScheduler>:
    11d4:	a8 95       	wdr
    11d6:	90 ec       	ldi	r25, 0xC0	; 192
    11d8:	88 e1       	ldi	r24, 0x18	; 24
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	a8 95       	wdr
    11e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    11ea:	a0 91 fb 18 	lds	r26, 0x18FB	; 0x8018fb <pxCurrentTCB>
    11ee:	b0 91 fc 18 	lds	r27, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    11f2:	cd 91       	ld	r28, X+
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	dd 91       	ld	r29, X+
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	ff 91       	pop	r31
    11fc:	ef 91       	pop	r30
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	bf 91       	pop	r27
    1204:	af 91       	pop	r26
    1206:	9f 91       	pop	r25
    1208:	8f 91       	pop	r24
    120a:	7f 91       	pop	r23
    120c:	6f 91       	pop	r22
    120e:	5f 91       	pop	r21
    1210:	4f 91       	pop	r20
    1212:	3f 91       	pop	r19
    1214:	2f 91       	pop	r18
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
    121a:	ff 90       	pop	r15
    121c:	ef 90       	pop	r14
    121e:	df 90       	pop	r13
    1220:	cf 90       	pop	r12
    1222:	bf 90       	pop	r11
    1224:	af 90       	pop	r10
    1226:	9f 90       	pop	r9
    1228:	8f 90       	pop	r8
    122a:	7f 90       	pop	r7
    122c:	6f 90       	pop	r6
    122e:	5f 90       	pop	r5
    1230:	4f 90       	pop	r4
    1232:	3f 90       	pop	r3
    1234:	2f 90       	pop	r2
    1236:	1f 90       	pop	r1
    1238:	0f 90       	pop	r0
    123a:	0c be       	out	0x3c, r0	; 60
    123c:	0f 90       	pop	r0
    123e:	0b be       	out	0x3b, r0	; 59
    1240:	0f 90       	pop	r0
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	0f 90       	pop	r0
    1246:	08 95       	ret
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	08 95       	ret

0000124c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    124c:	0f 92       	push	r0
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	0f 92       	push	r0
    1254:	0b b6       	in	r0, 0x3b	; 59
    1256:	0f 92       	push	r0
    1258:	0c b6       	in	r0, 0x3c	; 60
    125a:	0f 92       	push	r0
    125c:	1f 92       	push	r1
    125e:	11 24       	eor	r1, r1
    1260:	2f 92       	push	r2
    1262:	3f 92       	push	r3
    1264:	4f 92       	push	r4
    1266:	5f 92       	push	r5
    1268:	6f 92       	push	r6
    126a:	7f 92       	push	r7
    126c:	8f 92       	push	r8
    126e:	9f 92       	push	r9
    1270:	af 92       	push	r10
    1272:	bf 92       	push	r11
    1274:	cf 92       	push	r12
    1276:	df 92       	push	r13
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	2f 93       	push	r18
    1282:	3f 93       	push	r19
    1284:	4f 93       	push	r20
    1286:	5f 93       	push	r21
    1288:	6f 93       	push	r22
    128a:	7f 93       	push	r23
    128c:	8f 93       	push	r24
    128e:	9f 93       	push	r25
    1290:	af 93       	push	r26
    1292:	bf 93       	push	r27
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	ef 93       	push	r30
    129a:	ff 93       	push	r31
    129c:	a0 91 fb 18 	lds	r26, 0x18FB	; 0x8018fb <pxCurrentTCB>
    12a0:	b0 91 fc 18 	lds	r27, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    12a4:	0d b6       	in	r0, 0x3d	; 61
    12a6:	0d 92       	st	X+, r0
    12a8:	0e b6       	in	r0, 0x3e	; 62
    12aa:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    12ac:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    12b0:	a0 91 fb 18 	lds	r26, 0x18FB	; 0x8018fb <pxCurrentTCB>
    12b4:	b0 91 fc 18 	lds	r27, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    12b8:	cd 91       	ld	r28, X+
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	dd 91       	ld	r29, X+
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	ff 91       	pop	r31
    12c2:	ef 91       	pop	r30
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	bf 91       	pop	r27
    12ca:	af 91       	pop	r26
    12cc:	9f 91       	pop	r25
    12ce:	8f 91       	pop	r24
    12d0:	7f 91       	pop	r23
    12d2:	6f 91       	pop	r22
    12d4:	5f 91       	pop	r21
    12d6:	4f 91       	pop	r20
    12d8:	3f 91       	pop	r19
    12da:	2f 91       	pop	r18
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	df 90       	pop	r13
    12e6:	cf 90       	pop	r12
    12e8:	bf 90       	pop	r11
    12ea:	af 90       	pop	r10
    12ec:	9f 90       	pop	r9
    12ee:	8f 90       	pop	r8
    12f0:	7f 90       	pop	r7
    12f2:	6f 90       	pop	r6
    12f4:	5f 90       	pop	r5
    12f6:	4f 90       	pop	r4
    12f8:	3f 90       	pop	r3
    12fa:	2f 90       	pop	r2
    12fc:	1f 90       	pop	r1
    12fe:	0f 90       	pop	r0
    1300:	0c be       	out	0x3c, r0	; 60
    1302:	0f 90       	pop	r0
    1304:	0b be       	out	0x3b, r0	; 59
    1306:	0f 90       	pop	r0
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    130c:	08 95       	ret

0000130e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    130e:	0f 92       	push	r0
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	0f 92       	push	r0
    1316:	0b b6       	in	r0, 0x3b	; 59
    1318:	0f 92       	push	r0
    131a:	0c b6       	in	r0, 0x3c	; 60
    131c:	0f 92       	push	r0
    131e:	1f 92       	push	r1
    1320:	11 24       	eor	r1, r1
    1322:	2f 92       	push	r2
    1324:	3f 92       	push	r3
    1326:	4f 92       	push	r4
    1328:	5f 92       	push	r5
    132a:	6f 92       	push	r6
    132c:	7f 92       	push	r7
    132e:	8f 92       	push	r8
    1330:	9f 92       	push	r9
    1332:	af 92       	push	r10
    1334:	bf 92       	push	r11
    1336:	cf 92       	push	r12
    1338:	df 92       	push	r13
    133a:	ef 92       	push	r14
    133c:	ff 92       	push	r15
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	2f 93       	push	r18
    1344:	3f 93       	push	r19
    1346:	4f 93       	push	r20
    1348:	5f 93       	push	r21
    134a:	6f 93       	push	r22
    134c:	7f 93       	push	r23
    134e:	8f 93       	push	r24
    1350:	9f 93       	push	r25
    1352:	af 93       	push	r26
    1354:	bf 93       	push	r27
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	ef 93       	push	r30
    135c:	ff 93       	push	r31
    135e:	a0 91 fb 18 	lds	r26, 0x18FB	; 0x8018fb <pxCurrentTCB>
    1362:	b0 91 fc 18 	lds	r27, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    1366:	0d b6       	in	r0, 0x3d	; 61
    1368:	0d 92       	st	X+, r0
    136a:	0e b6       	in	r0, 0x3e	; 62
    136c:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    136e:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    1370:	0e 94 9a 12 	call	0x2534	; 0x2534 <xTaskIncrementTick>
    1374:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1376:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    137a:	a0 91 fb 18 	lds	r26, 0x18FB	; 0x8018fb <pxCurrentTCB>
    137e:	b0 91 fc 18 	lds	r27, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    1382:	cd 91       	ld	r28, X+
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	dd 91       	ld	r29, X+
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	ff 91       	pop	r31
    138c:	ef 91       	pop	r30
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	bf 91       	pop	r27
    1394:	af 91       	pop	r26
    1396:	9f 91       	pop	r25
    1398:	8f 91       	pop	r24
    139a:	7f 91       	pop	r23
    139c:	6f 91       	pop	r22
    139e:	5f 91       	pop	r21
    13a0:	4f 91       	pop	r20
    13a2:	3f 91       	pop	r19
    13a4:	2f 91       	pop	r18
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	ff 90       	pop	r15
    13ac:	ef 90       	pop	r14
    13ae:	df 90       	pop	r13
    13b0:	cf 90       	pop	r12
    13b2:	bf 90       	pop	r11
    13b4:	af 90       	pop	r10
    13b6:	9f 90       	pop	r9
    13b8:	8f 90       	pop	r8
    13ba:	7f 90       	pop	r7
    13bc:	6f 90       	pop	r6
    13be:	5f 90       	pop	r5
    13c0:	4f 90       	pop	r4
    13c2:	3f 90       	pop	r3
    13c4:	2f 90       	pop	r2
    13c6:	1f 90       	pop	r1
    13c8:	0f 90       	pop	r0
    13ca:	0c be       	out	0x3c, r0	; 60
    13cc:	0f 90       	pop	r0
    13ce:	0b be       	out	0x3b, r0	; 59
    13d0:	0f 90       	pop	r0
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    13d6:	08 95       	ret

000013d8 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    13d8:	9a df       	rcall	.-204    	; 0x130e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    13da:	18 95       	reti

000013dc <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	0f 92       	push	r0
    13e2:	fc 01       	movw	r30, r24
    13e4:	96 8d       	ldd	r25, Z+30	; 0x1e
    13e6:	0f 90       	pop	r0
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	91 11       	cpse	r25, r1
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	08 95       	ret

000013f2 <prvCopyDataToQueue>:
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	ec 01       	movw	r28, r24
    13fc:	04 2f       	mov	r16, r20
    13fe:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1400:	48 a1       	ldd	r20, Y+32	; 0x20
    1402:	41 11       	cpse	r20, r1
    1404:	0c c0       	rjmp	.+24     	; 0x141e <prvCopyDataToQueue+0x2c>
    1406:	88 81       	ld	r24, Y
    1408:	99 81       	ldd	r25, Y+1	; 0x01
    140a:	89 2b       	or	r24, r25
    140c:	09 f0       	breq	.+2      	; 0x1410 <prvCopyDataToQueue+0x1e>
    140e:	42 c0       	rjmp	.+132    	; 0x1494 <prvCopyDataToQueue+0xa2>
    1410:	8c 81       	ldd	r24, Y+4	; 0x04
    1412:	9d 81       	ldd	r25, Y+5	; 0x05
    1414:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <xTaskPriorityDisinherit>
    1418:	1d 82       	std	Y+5, r1	; 0x05
    141a:	1c 82       	std	Y+4, r1	; 0x04
    141c:	42 c0       	rjmp	.+132    	; 0x14a2 <prvCopyDataToQueue+0xb0>
    141e:	01 11       	cpse	r16, r1
    1420:	17 c0       	rjmp	.+46     	; 0x1450 <prvCopyDataToQueue+0x5e>
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	9b 81       	ldd	r25, Y+3	; 0x03
    1428:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <memcpy>
    142c:	28 a1       	ldd	r18, Y+32	; 0x20
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	9b 81       	ldd	r25, Y+3	; 0x03
    1432:	82 0f       	add	r24, r18
    1434:	91 1d       	adc	r25, r1
    1436:	9b 83       	std	Y+3, r25	; 0x03
    1438:	8a 83       	std	Y+2, r24	; 0x02
    143a:	2c 81       	ldd	r18, Y+4	; 0x04
    143c:	3d 81       	ldd	r19, Y+5	; 0x05
    143e:	82 17       	cp	r24, r18
    1440:	93 07       	cpc	r25, r19
    1442:	50 f1       	brcs	.+84     	; 0x1498 <prvCopyDataToQueue+0xa6>
    1444:	88 81       	ld	r24, Y
    1446:	99 81       	ldd	r25, Y+1	; 0x01
    1448:	9b 83       	std	Y+3, r25	; 0x03
    144a:	8a 83       	std	Y+2, r24	; 0x02
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	29 c0       	rjmp	.+82     	; 0x14a2 <prvCopyDataToQueue+0xb0>
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	8e 81       	ldd	r24, Y+6	; 0x06
    1454:	9f 81       	ldd	r25, Y+7	; 0x07
    1456:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <memcpy>
    145a:	88 a1       	ldd	r24, Y+32	; 0x20
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	91 95       	neg	r25
    1460:	81 95       	neg	r24
    1462:	91 09       	sbc	r25, r1
    1464:	2e 81       	ldd	r18, Y+6	; 0x06
    1466:	3f 81       	ldd	r19, Y+7	; 0x07
    1468:	28 0f       	add	r18, r24
    146a:	39 1f       	adc	r19, r25
    146c:	3f 83       	std	Y+7, r19	; 0x07
    146e:	2e 83       	std	Y+6, r18	; 0x06
    1470:	48 81       	ld	r20, Y
    1472:	59 81       	ldd	r21, Y+1	; 0x01
    1474:	24 17       	cp	r18, r20
    1476:	35 07       	cpc	r19, r21
    1478:	30 f4       	brcc	.+12     	; 0x1486 <prvCopyDataToQueue+0x94>
    147a:	2c 81       	ldd	r18, Y+4	; 0x04
    147c:	3d 81       	ldd	r19, Y+5	; 0x05
    147e:	82 0f       	add	r24, r18
    1480:	93 1f       	adc	r25, r19
    1482:	9f 83       	std	Y+7, r25	; 0x07
    1484:	8e 83       	std	Y+6, r24	; 0x06
    1486:	02 30       	cpi	r16, 0x02	; 2
    1488:	49 f4       	brne	.+18     	; 0x149c <prvCopyDataToQueue+0xaa>
    148a:	11 23       	and	r17, r17
    148c:	49 f0       	breq	.+18     	; 0x14a0 <prvCopyDataToQueue+0xae>
    148e:	11 50       	subi	r17, 0x01	; 1
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	07 c0       	rjmp	.+14     	; 0x14a2 <prvCopyDataToQueue+0xb0>
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	05 c0       	rjmp	.+10     	; 0x14a2 <prvCopyDataToQueue+0xb0>
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	03 c0       	rjmp	.+6      	; 0x14a2 <prvCopyDataToQueue+0xb0>
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	01 c0       	rjmp	.+2      	; 0x14a2 <prvCopyDataToQueue+0xb0>
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	1f 5f       	subi	r17, 0xFF	; 255
    14a4:	1e 8f       	std	Y+30, r17	; 0x1e
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	08 95       	ret

000014b0 <prvCopyDataFromQueue>:
    14b0:	fc 01       	movw	r30, r24
    14b2:	40 a1       	ldd	r20, Z+32	; 0x20
    14b4:	44 23       	and	r20, r20
    14b6:	a9 f0       	breq	.+42     	; 0x14e2 <prvCopyDataFromQueue+0x32>
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	26 81       	ldd	r18, Z+6	; 0x06
    14bc:	37 81       	ldd	r19, Z+7	; 0x07
    14be:	24 0f       	add	r18, r20
    14c0:	35 1f       	adc	r19, r21
    14c2:	37 83       	std	Z+7, r19	; 0x07
    14c4:	26 83       	std	Z+6, r18	; 0x06
    14c6:	84 81       	ldd	r24, Z+4	; 0x04
    14c8:	95 81       	ldd	r25, Z+5	; 0x05
    14ca:	28 17       	cp	r18, r24
    14cc:	39 07       	cpc	r19, r25
    14ce:	20 f0       	brcs	.+8      	; 0x14d8 <prvCopyDataFromQueue+0x28>
    14d0:	80 81       	ld	r24, Z
    14d2:	91 81       	ldd	r25, Z+1	; 0x01
    14d4:	97 83       	std	Z+7, r25	; 0x07
    14d6:	86 83       	std	Z+6, r24	; 0x06
    14d8:	cb 01       	movw	r24, r22
    14da:	66 81       	ldd	r22, Z+6	; 0x06
    14dc:	77 81       	ldd	r23, Z+7	; 0x07
    14de:	0c 94 d3 2c 	jmp	0x59a6	; 0x59a6 <memcpy>
    14e2:	08 95       	ret

000014e4 <prvUnlockQueue>:
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	8c 01       	movw	r16, r24
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	0f 92       	push	r0
    14f6:	fc 01       	movw	r30, r24
    14f8:	c2 a1       	ldd	r28, Z+34	; 0x22
    14fa:	1c 16       	cp	r1, r28
    14fc:	ac f4       	brge	.+42     	; 0x1528 <prvUnlockQueue+0x44>
    14fe:	83 89       	ldd	r24, Z+19	; 0x13
    1500:	81 11       	cpse	r24, r1
    1502:	06 c0       	rjmp	.+12     	; 0x1510 <prvUnlockQueue+0x2c>
    1504:	11 c0       	rjmp	.+34     	; 0x1528 <prvUnlockQueue+0x44>
    1506:	f8 01       	movw	r30, r16
    1508:	83 89       	ldd	r24, Z+19	; 0x13
    150a:	81 11       	cpse	r24, r1
    150c:	05 c0       	rjmp	.+10     	; 0x1518 <prvUnlockQueue+0x34>
    150e:	0c c0       	rjmp	.+24     	; 0x1528 <prvUnlockQueue+0x44>
    1510:	78 01       	movw	r14, r16
    1512:	f3 e1       	ldi	r31, 0x13	; 19
    1514:	ef 0e       	add	r14, r31
    1516:	f1 1c       	adc	r15, r1
    1518:	c7 01       	movw	r24, r14
    151a:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <xTaskRemoveFromEventList>
    151e:	81 11       	cpse	r24, r1
    1520:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <vTaskMissedYield>
    1524:	c1 50       	subi	r28, 0x01	; 1
    1526:	79 f7       	brne	.-34     	; 0x1506 <prvUnlockQueue+0x22>
    1528:	8f ef       	ldi	r24, 0xFF	; 255
    152a:	f8 01       	movw	r30, r16
    152c:	82 a3       	std	Z+34, r24	; 0x22
    152e:	0f 90       	pop	r0
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	0f 92       	push	r0
    1538:	c1 a1       	ldd	r28, Z+33	; 0x21
    153a:	1c 16       	cp	r1, r28
    153c:	ac f4       	brge	.+42     	; 0x1568 <prvUnlockQueue+0x84>
    153e:	80 85       	ldd	r24, Z+8	; 0x08
    1540:	81 11       	cpse	r24, r1
    1542:	06 c0       	rjmp	.+12     	; 0x1550 <prvUnlockQueue+0x6c>
    1544:	11 c0       	rjmp	.+34     	; 0x1568 <prvUnlockQueue+0x84>
    1546:	f8 01       	movw	r30, r16
    1548:	80 85       	ldd	r24, Z+8	; 0x08
    154a:	81 11       	cpse	r24, r1
    154c:	05 c0       	rjmp	.+10     	; 0x1558 <prvUnlockQueue+0x74>
    154e:	0c c0       	rjmp	.+24     	; 0x1568 <prvUnlockQueue+0x84>
    1550:	78 01       	movw	r14, r16
    1552:	f8 e0       	ldi	r31, 0x08	; 8
    1554:	ef 0e       	add	r14, r31
    1556:	f1 1c       	adc	r15, r1
    1558:	c7 01       	movw	r24, r14
    155a:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <xTaskRemoveFromEventList>
    155e:	81 11       	cpse	r24, r1
    1560:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <vTaskMissedYield>
    1564:	c1 50       	subi	r28, 0x01	; 1
    1566:	79 f7       	brne	.-34     	; 0x1546 <prvUnlockQueue+0x62>
    1568:	8f ef       	ldi	r24, 0xFF	; 255
    156a:	f8 01       	movw	r30, r16
    156c:	81 a3       	std	Z+33, r24	; 0x21
    156e:	0f 90       	pop	r0
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cf 91       	pop	r28
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	ff 90       	pop	r15
    157a:	ef 90       	pop	r14
    157c:	08 95       	ret

0000157e <xQueueGenericReset>:
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	ec 01       	movw	r28, r24
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	0f 92       	push	r0
    158a:	e8 81       	ld	r30, Y
    158c:	f9 81       	ldd	r31, Y+1	; 0x01
    158e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1590:	28 a1       	ldd	r18, Y+32	; 0x20
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	82 9f       	mul	r24, r18
    1598:	a0 01       	movw	r20, r0
    159a:	83 9f       	mul	r24, r19
    159c:	50 0d       	add	r21, r0
    159e:	92 9f       	mul	r25, r18
    15a0:	50 0d       	add	r21, r0
    15a2:	11 24       	eor	r1, r1
    15a4:	4e 0f       	add	r20, r30
    15a6:	5f 1f       	adc	r21, r31
    15a8:	5d 83       	std	Y+5, r21	; 0x05
    15aa:	4c 83       	std	Y+4, r20	; 0x04
    15ac:	1e 8e       	std	Y+30, r1	; 0x1e
    15ae:	fb 83       	std	Y+3, r31	; 0x03
    15b0:	ea 83       	std	Y+2, r30	; 0x02
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	82 9f       	mul	r24, r18
    15b6:	a0 01       	movw	r20, r0
    15b8:	83 9f       	mul	r24, r19
    15ba:	50 0d       	add	r21, r0
    15bc:	92 9f       	mul	r25, r18
    15be:	50 0d       	add	r21, r0
    15c0:	11 24       	eor	r1, r1
    15c2:	cf 01       	movw	r24, r30
    15c4:	84 0f       	add	r24, r20
    15c6:	95 1f       	adc	r25, r21
    15c8:	9f 83       	std	Y+7, r25	; 0x07
    15ca:	8e 83       	std	Y+6, r24	; 0x06
    15cc:	8f ef       	ldi	r24, 0xFF	; 255
    15ce:	89 a3       	std	Y+33, r24	; 0x21
    15d0:	8a a3       	std	Y+34, r24	; 0x22
    15d2:	61 11       	cpse	r22, r1
    15d4:	0b c0       	rjmp	.+22     	; 0x15ec <xQueueGenericReset+0x6e>
    15d6:	88 85       	ldd	r24, Y+8	; 0x08
    15d8:	88 23       	and	r24, r24
    15da:	71 f0       	breq	.+28     	; 0x15f8 <xQueueGenericReset+0x7a>
    15dc:	ce 01       	movw	r24, r28
    15de:	08 96       	adiw	r24, 0x08	; 8
    15e0:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <xTaskRemoveFromEventList>
    15e4:	88 23       	and	r24, r24
    15e6:	41 f0       	breq	.+16     	; 0x15f8 <xQueueGenericReset+0x7a>
    15e8:	31 de       	rcall	.-926    	; 0x124c <vPortYield>
    15ea:	06 c0       	rjmp	.+12     	; 0x15f8 <xQueueGenericReset+0x7a>
    15ec:	ce 01       	movw	r24, r28
    15ee:	08 96       	adiw	r24, 0x08	; 8
    15f0:	e5 dc       	rcall	.-1590   	; 0xfbc <vListInitialise>
    15f2:	ce 01       	movw	r24, r28
    15f4:	43 96       	adiw	r24, 0x13	; 19
    15f6:	e2 dc       	rcall	.-1596   	; 0xfbc <vListInitialise>
    15f8:	0f 90       	pop	r0
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	08 95       	ret

00001604 <xQueueGenericCreate>:
    1604:	ff 92       	push	r15
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	08 2f       	mov	r16, r24
    1610:	16 2f       	mov	r17, r22
    1612:	f4 2e       	mov	r15, r20
    1614:	66 23       	and	r22, r22
    1616:	b9 f0       	breq	.+46     	; 0x1646 <xQueueGenericCreate+0x42>
    1618:	86 9f       	mul	r24, r22
    161a:	c0 01       	movw	r24, r0
    161c:	11 24       	eor	r1, r1
    161e:	85 96       	adiw	r24, 0x25	; 37
    1620:	e3 db       	rcall	.-2106   	; 0xde8 <pvPortMalloc>
    1622:	ec 01       	movw	r28, r24
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	41 f4       	brne	.+16     	; 0x1638 <xQueueGenericCreate+0x34>
    1628:	14 c0       	rjmp	.+40     	; 0x1652 <xQueueGenericCreate+0x4e>
    162a:	0f 8f       	std	Y+31, r16	; 0x1f
    162c:	18 a3       	std	Y+32, r17	; 0x20
    162e:	61 e0       	ldi	r22, 0x01	; 1
    1630:	ce 01       	movw	r24, r28
    1632:	a5 df       	rcall	.-182    	; 0x157e <xQueueGenericReset>
    1634:	fc a2       	std	Y+36, r15	; 0x24
    1636:	0d c0       	rjmp	.+26     	; 0x1652 <xQueueGenericCreate+0x4e>
    1638:	85 96       	adiw	r24, 0x25	; 37
    163a:	99 83       	std	Y+1, r25	; 0x01
    163c:	88 83       	st	Y, r24
    163e:	f5 cf       	rjmp	.-22     	; 0x162a <xQueueGenericCreate+0x26>
    1640:	d9 83       	std	Y+1, r29	; 0x01
    1642:	c8 83       	st	Y, r28
    1644:	f2 cf       	rjmp	.-28     	; 0x162a <xQueueGenericCreate+0x26>
    1646:	85 e2       	ldi	r24, 0x25	; 37
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	ce db       	rcall	.-2148   	; 0xde8 <pvPortMalloc>
    164c:	ec 01       	movw	r28, r24
    164e:	89 2b       	or	r24, r25
    1650:	b9 f7       	brne	.-18     	; 0x1640 <xQueueGenericCreate+0x3c>
    1652:	ce 01       	movw	r24, r28
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	1f 91       	pop	r17
    165a:	0f 91       	pop	r16
    165c:	ff 90       	pop	r15
    165e:	08 95       	ret

00001660 <xQueueGenericSend>:
    1660:	9f 92       	push	r9
    1662:	af 92       	push	r10
    1664:	bf 92       	push	r11
    1666:	cf 92       	push	r12
    1668:	df 92       	push	r13
    166a:	ef 92       	push	r14
    166c:	ff 92       	push	r15
    166e:	0f 93       	push	r16
    1670:	1f 93       	push	r17
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	29 97       	sbiw	r28, 0x09	; 9
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	7c 01       	movw	r14, r24
    1688:	5b 01       	movw	r10, r22
    168a:	2e 83       	std	Y+6, r18	; 0x06
    168c:	3f 83       	std	Y+7, r19	; 0x07
    168e:	48 87       	std	Y+8, r20	; 0x08
    1690:	59 87       	std	Y+9, r21	; 0x09
    1692:	10 e0       	ldi	r17, 0x00	; 0
    1694:	99 24       	eor	r9, r9
    1696:	93 94       	inc	r9
    1698:	6c 01       	movw	r12, r24
    169a:	88 e0       	ldi	r24, 0x08	; 8
    169c:	c8 0e       	add	r12, r24
    169e:	d1 1c       	adc	r13, r1
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	0f 92       	push	r0
    16a6:	f7 01       	movw	r30, r14
    16a8:	96 8d       	ldd	r25, Z+30	; 0x1e
    16aa:	87 8d       	ldd	r24, Z+31	; 0x1f
    16ac:	98 17       	cp	r25, r24
    16ae:	10 f0       	brcs	.+4      	; 0x16b4 <xQueueGenericSend+0x54>
    16b0:	02 30       	cpi	r16, 0x02	; 2
    16b2:	b1 f4       	brne	.+44     	; 0x16e0 <xQueueGenericSend+0x80>
    16b4:	40 2f       	mov	r20, r16
    16b6:	b5 01       	movw	r22, r10
    16b8:	c7 01       	movw	r24, r14
    16ba:	9b de       	rcall	.-714    	; 0x13f2 <prvCopyDataToQueue>
    16bc:	f7 01       	movw	r30, r14
    16be:	93 89       	ldd	r25, Z+19	; 0x13
    16c0:	99 23       	and	r25, r25
    16c2:	41 f0       	breq	.+16     	; 0x16d4 <xQueueGenericSend+0x74>
    16c4:	c7 01       	movw	r24, r14
    16c6:	43 96       	adiw	r24, 0x13	; 19
    16c8:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <xTaskRemoveFromEventList>
    16cc:	88 23       	and	r24, r24
    16ce:	21 f0       	breq	.+8      	; 0x16d8 <xQueueGenericSend+0x78>
    16d0:	bd dd       	rcall	.-1158   	; 0x124c <vPortYield>
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <xQueueGenericSend+0x78>
    16d4:	81 11       	cpse	r24, r1
    16d6:	ba dd       	rcall	.-1164   	; 0x124c <vPortYield>
    16d8:	0f 90       	pop	r0
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	4e c0       	rjmp	.+156    	; 0x177c <xQueueGenericSend+0x11c>
    16e0:	8e 81       	ldd	r24, Y+6	; 0x06
    16e2:	9f 81       	ldd	r25, Y+7	; 0x07
    16e4:	a8 85       	ldd	r26, Y+8	; 0x08
    16e6:	b9 85       	ldd	r27, Y+9	; 0x09
    16e8:	89 2b       	or	r24, r25
    16ea:	8a 2b       	or	r24, r26
    16ec:	8b 2b       	or	r24, r27
    16ee:	21 f4       	brne	.+8      	; 0x16f8 <xQueueGenericSend+0x98>
    16f0:	0f 90       	pop	r0
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	42 c0       	rjmp	.+132    	; 0x177c <xQueueGenericSend+0x11c>
    16f8:	11 11       	cpse	r17, r1
    16fa:	05 c0       	rjmp	.+10     	; 0x1706 <xQueueGenericSend+0xa6>
    16fc:	ce 01       	movw	r24, r28
    16fe:	01 96       	adiw	r24, 0x01	; 1
    1700:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <vTaskInternalSetTimeOutState>
    1704:	19 2d       	mov	r17, r9
    1706:	0f 90       	pop	r0
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	00 d7       	rcall	.+3584   	; 0x250c <vTaskSuspendAll>
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	0f 92       	push	r0
    1712:	f7 01       	movw	r30, r14
    1714:	81 a1       	ldd	r24, Z+33	; 0x21
    1716:	8f 3f       	cpi	r24, 0xFF	; 255
    1718:	09 f4       	brne	.+2      	; 0x171c <xQueueGenericSend+0xbc>
    171a:	11 a2       	std	Z+33, r1	; 0x21
    171c:	f7 01       	movw	r30, r14
    171e:	82 a1       	ldd	r24, Z+34	; 0x22
    1720:	8f 3f       	cpi	r24, 0xFF	; 255
    1722:	09 f4       	brne	.+2      	; 0x1726 <xQueueGenericSend+0xc6>
    1724:	12 a2       	std	Z+34, r1	; 0x22
    1726:	0f 90       	pop	r0
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	be 01       	movw	r22, r28
    172c:	6a 5f       	subi	r22, 0xFA	; 250
    172e:	7f 4f       	sbci	r23, 0xFF	; 255
    1730:	ce 01       	movw	r24, r28
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <xTaskCheckForTimeOut>
    1738:	81 11       	cpse	r24, r1
    173a:	1c c0       	rjmp	.+56     	; 0x1774 <xQueueGenericSend+0x114>
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	0f 92       	push	r0
    1742:	f7 01       	movw	r30, r14
    1744:	96 8d       	ldd	r25, Z+30	; 0x1e
    1746:	87 8d       	ldd	r24, Z+31	; 0x1f
    1748:	0f 90       	pop	r0
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	98 13       	cpse	r25, r24
    174e:	0e c0       	rjmp	.+28     	; 0x176c <xQueueGenericSend+0x10c>
    1750:	4e 81       	ldd	r20, Y+6	; 0x06
    1752:	5f 81       	ldd	r21, Y+7	; 0x07
    1754:	68 85       	ldd	r22, Y+8	; 0x08
    1756:	79 85       	ldd	r23, Y+9	; 0x09
    1758:	c6 01       	movw	r24, r12
    175a:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <vTaskPlaceOnEventList>
    175e:	c7 01       	movw	r24, r14
    1760:	c1 de       	rcall	.-638    	; 0x14e4 <prvUnlockQueue>
    1762:	bd d7       	rcall	.+3962   	; 0x26de <xTaskResumeAll>
    1764:	81 11       	cpse	r24, r1
    1766:	9c cf       	rjmp	.-200    	; 0x16a0 <xQueueGenericSend+0x40>
    1768:	71 dd       	rcall	.-1310   	; 0x124c <vPortYield>
    176a:	9a cf       	rjmp	.-204    	; 0x16a0 <xQueueGenericSend+0x40>
    176c:	c7 01       	movw	r24, r14
    176e:	ba de       	rcall	.-652    	; 0x14e4 <prvUnlockQueue>
    1770:	b6 d7       	rcall	.+3948   	; 0x26de <xTaskResumeAll>
    1772:	96 cf       	rjmp	.-212    	; 0x16a0 <xQueueGenericSend+0x40>
    1774:	c7 01       	movw	r24, r14
    1776:	b6 de       	rcall	.-660    	; 0x14e4 <prvUnlockQueue>
    1778:	b2 d7       	rcall	.+3940   	; 0x26de <xTaskResumeAll>
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	29 96       	adiw	r28, 0x09	; 9
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	1f 91       	pop	r17
    178e:	0f 91       	pop	r16
    1790:	ff 90       	pop	r15
    1792:	ef 90       	pop	r14
    1794:	df 90       	pop	r13
    1796:	cf 90       	pop	r12
    1798:	bf 90       	pop	r11
    179a:	af 90       	pop	r10
    179c:	9f 90       	pop	r9
    179e:	08 95       	ret

000017a0 <xQueueCreateMutex>:
    17a0:	0f 93       	push	r16
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	48 2f       	mov	r20, r24
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	2b df       	rcall	.-426    	; 0x1604 <xQueueGenericCreate>
    17ae:	ec 01       	movw	r28, r24
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	61 f0       	breq	.+24     	; 0x17cc <xQueueCreateMutex+0x2c>
    17b4:	1d 82       	std	Y+5, r1	; 0x05
    17b6:	1c 82       	std	Y+4, r1	; 0x04
    17b8:	19 82       	std	Y+1, r1	; 0x01
    17ba:	18 82       	st	Y, r1
    17bc:	1e 82       	std	Y+6, r1	; 0x06
    17be:	00 e0       	ldi	r16, 0x00	; 0
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	a9 01       	movw	r20, r18
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	4a df       	rcall	.-364    	; 0x1660 <xQueueGenericSend>
    17cc:	ce 01       	movw	r24, r28
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	0f 91       	pop	r16
    17d4:	08 95       	ret

000017d6 <xQueueGenericSendFromISR>:
    17d6:	ef 92       	push	r14
    17d8:	ff 92       	push	r15
    17da:	0f 93       	push	r16
    17dc:	1f 93       	push	r17
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	8a 01       	movw	r16, r20
    17e4:	fc 01       	movw	r30, r24
    17e6:	56 8d       	ldd	r21, Z+30	; 0x1e
    17e8:	37 8d       	ldd	r19, Z+31	; 0x1f
    17ea:	53 17       	cp	r21, r19
    17ec:	10 f0       	brcs	.+4      	; 0x17f2 <xQueueGenericSendFromISR+0x1c>
    17ee:	22 30       	cpi	r18, 0x02	; 2
    17f0:	e9 f4       	brne	.+58     	; 0x182c <xQueueGenericSendFromISR+0x56>
    17f2:	42 2f       	mov	r20, r18
    17f4:	78 01       	movw	r14, r16
    17f6:	ec 01       	movw	r28, r24
    17f8:	1a a1       	ldd	r17, Y+34	; 0x22
    17fa:	fb dd       	rcall	.-1034   	; 0x13f2 <prvCopyDataToQueue>
    17fc:	1f 3f       	cpi	r17, 0xFF	; 255
    17fe:	81 f4       	brne	.+32     	; 0x1820 <xQueueGenericSendFromISR+0x4a>
    1800:	8b 89       	ldd	r24, Y+19	; 0x13
    1802:	88 23       	and	r24, r24
    1804:	a9 f0       	breq	.+42     	; 0x1830 <xQueueGenericSendFromISR+0x5a>
    1806:	ce 01       	movw	r24, r28
    1808:	43 96       	adiw	r24, 0x13	; 19
    180a:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <xTaskRemoveFromEventList>
    180e:	88 23       	and	r24, r24
    1810:	89 f0       	breq	.+34     	; 0x1834 <xQueueGenericSendFromISR+0x5e>
    1812:	e1 14       	cp	r14, r1
    1814:	f1 04       	cpc	r15, r1
    1816:	81 f0       	breq	.+32     	; 0x1838 <xQueueGenericSendFromISR+0x62>
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	f7 01       	movw	r30, r14
    181c:	80 83       	st	Z, r24
    181e:	0d c0       	rjmp	.+26     	; 0x183a <xQueueGenericSendFromISR+0x64>
    1820:	ff 24       	eor	r15, r15
    1822:	f3 94       	inc	r15
    1824:	f1 0e       	add	r15, r17
    1826:	fa a2       	std	Y+34, r15	; 0x22
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	07 c0       	rjmp	.+14     	; 0x183a <xQueueGenericSendFromISR+0x64>
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	05 c0       	rjmp	.+10     	; 0x183a <xQueueGenericSendFromISR+0x64>
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	03 c0       	rjmp	.+6      	; 0x183a <xQueueGenericSendFromISR+0x64>
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	01 c0       	rjmp	.+2      	; 0x183a <xQueueGenericSendFromISR+0x64>
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	08 95       	ret

00001848 <xQueueReceive>:
    1848:	9f 92       	push	r9
    184a:	af 92       	push	r10
    184c:	bf 92       	push	r11
    184e:	cf 92       	push	r12
    1850:	df 92       	push	r13
    1852:	ef 92       	push	r14
    1854:	ff 92       	push	r15
    1856:	0f 93       	push	r16
    1858:	1f 93       	push	r17
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	29 97       	sbiw	r28, 0x09	; 9
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	8c 01       	movw	r16, r24
    1870:	5b 01       	movw	r10, r22
    1872:	2e 83       	std	Y+6, r18	; 0x06
    1874:	3f 83       	std	Y+7, r19	; 0x07
    1876:	48 87       	std	Y+8, r20	; 0x08
    1878:	59 87       	std	Y+9, r21	; 0x09
    187a:	e1 2c       	mov	r14, r1
    187c:	99 24       	eor	r9, r9
    187e:	93 94       	inc	r9
    1880:	6c 01       	movw	r12, r24
    1882:	83 e1       	ldi	r24, 0x13	; 19
    1884:	c8 0e       	add	r12, r24
    1886:	d1 1c       	adc	r13, r1
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	0f 92       	push	r0
    188e:	f8 01       	movw	r30, r16
    1890:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1892:	ff 20       	and	r15, r15
    1894:	99 f0       	breq	.+38     	; 0x18bc <xQueueReceive+0x74>
    1896:	b5 01       	movw	r22, r10
    1898:	c8 01       	movw	r24, r16
    189a:	0a de       	rcall	.-1004   	; 0x14b0 <prvCopyDataFromQueue>
    189c:	fa 94       	dec	r15
    189e:	f8 01       	movw	r30, r16
    18a0:	f6 8e       	std	Z+30, r15	; 0x1e
    18a2:	80 85       	ldd	r24, Z+8	; 0x08
    18a4:	88 23       	and	r24, r24
    18a6:	31 f0       	breq	.+12     	; 0x18b4 <xQueueReceive+0x6c>
    18a8:	c8 01       	movw	r24, r16
    18aa:	08 96       	adiw	r24, 0x08	; 8
    18ac:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <xTaskRemoveFromEventList>
    18b0:	81 11       	cpse	r24, r1
    18b2:	cc dc       	rcall	.-1640   	; 0x124c <vPortYield>
    18b4:	0f 90       	pop	r0
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	4d c0       	rjmp	.+154    	; 0x1956 <xQueueReceive+0x10e>
    18bc:	8e 81       	ldd	r24, Y+6	; 0x06
    18be:	9f 81       	ldd	r25, Y+7	; 0x07
    18c0:	a8 85       	ldd	r26, Y+8	; 0x08
    18c2:	b9 85       	ldd	r27, Y+9	; 0x09
    18c4:	89 2b       	or	r24, r25
    18c6:	8a 2b       	or	r24, r26
    18c8:	8b 2b       	or	r24, r27
    18ca:	21 f4       	brne	.+8      	; 0x18d4 <xQueueReceive+0x8c>
    18cc:	0f 90       	pop	r0
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	41 c0       	rjmp	.+130    	; 0x1956 <xQueueReceive+0x10e>
    18d4:	e1 10       	cpse	r14, r1
    18d6:	05 c0       	rjmp	.+10     	; 0x18e2 <xQueueReceive+0x9a>
    18d8:	ce 01       	movw	r24, r28
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <vTaskInternalSetTimeOutState>
    18e0:	e9 2c       	mov	r14, r9
    18e2:	0f 90       	pop	r0
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	12 d6       	rcall	.+3108   	; 0x250c <vTaskSuspendAll>
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	0f 92       	push	r0
    18ee:	f8 01       	movw	r30, r16
    18f0:	81 a1       	ldd	r24, Z+33	; 0x21
    18f2:	8f 3f       	cpi	r24, 0xFF	; 255
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <xQueueReceive+0xb0>
    18f6:	11 a2       	std	Z+33, r1	; 0x21
    18f8:	f8 01       	movw	r30, r16
    18fa:	82 a1       	ldd	r24, Z+34	; 0x22
    18fc:	8f 3f       	cpi	r24, 0xFF	; 255
    18fe:	09 f4       	brne	.+2      	; 0x1902 <xQueueReceive+0xba>
    1900:	12 a2       	std	Z+34, r1	; 0x22
    1902:	0f 90       	pop	r0
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	be 01       	movw	r22, r28
    1908:	6a 5f       	subi	r22, 0xFA	; 250
    190a:	7f 4f       	sbci	r23, 0xFF	; 255
    190c:	ce 01       	movw	r24, r28
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <xTaskCheckForTimeOut>
    1914:	81 11       	cpse	r24, r1
    1916:	16 c0       	rjmp	.+44     	; 0x1944 <xQueueReceive+0xfc>
    1918:	c8 01       	movw	r24, r16
    191a:	60 dd       	rcall	.-1344   	; 0x13dc <prvIsQueueEmpty>
    191c:	88 23       	and	r24, r24
    191e:	71 f0       	breq	.+28     	; 0x193c <xQueueReceive+0xf4>
    1920:	4e 81       	ldd	r20, Y+6	; 0x06
    1922:	5f 81       	ldd	r21, Y+7	; 0x07
    1924:	68 85       	ldd	r22, Y+8	; 0x08
    1926:	79 85       	ldd	r23, Y+9	; 0x09
    1928:	c6 01       	movw	r24, r12
    192a:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <vTaskPlaceOnEventList>
    192e:	c8 01       	movw	r24, r16
    1930:	d9 dd       	rcall	.-1102   	; 0x14e4 <prvUnlockQueue>
    1932:	d5 d6       	rcall	.+3498   	; 0x26de <xTaskResumeAll>
    1934:	81 11       	cpse	r24, r1
    1936:	a8 cf       	rjmp	.-176    	; 0x1888 <xQueueReceive+0x40>
    1938:	89 dc       	rcall	.-1774   	; 0x124c <vPortYield>
    193a:	a6 cf       	rjmp	.-180    	; 0x1888 <xQueueReceive+0x40>
    193c:	c8 01       	movw	r24, r16
    193e:	d2 dd       	rcall	.-1116   	; 0x14e4 <prvUnlockQueue>
    1940:	ce d6       	rcall	.+3484   	; 0x26de <xTaskResumeAll>
    1942:	a2 cf       	rjmp	.-188    	; 0x1888 <xQueueReceive+0x40>
    1944:	c8 01       	movw	r24, r16
    1946:	ce dd       	rcall	.-1124   	; 0x14e4 <prvUnlockQueue>
    1948:	ca d6       	rcall	.+3476   	; 0x26de <xTaskResumeAll>
    194a:	c8 01       	movw	r24, r16
    194c:	47 dd       	rcall	.-1394   	; 0x13dc <prvIsQueueEmpty>
    194e:	88 23       	and	r24, r24
    1950:	09 f4       	brne	.+2      	; 0x1954 <xQueueReceive+0x10c>
    1952:	9a cf       	rjmp	.-204    	; 0x1888 <xQueueReceive+0x40>
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	29 96       	adiw	r28, 0x09	; 9
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	ff 90       	pop	r15
    196c:	ef 90       	pop	r14
    196e:	df 90       	pop	r13
    1970:	cf 90       	pop	r12
    1972:	bf 90       	pop	r11
    1974:	af 90       	pop	r10
    1976:	9f 90       	pop	r9
    1978:	08 95       	ret

0000197a <xQueueSemaphoreTake>:
    197a:	bf 92       	push	r11
    197c:	cf 92       	push	r12
    197e:	df 92       	push	r13
    1980:	ef 92       	push	r14
    1982:	ff 92       	push	r15
    1984:	0f 93       	push	r16
    1986:	1f 93       	push	r17
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	29 97       	sbiw	r28, 0x09	; 9
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	8c 01       	movw	r16, r24
    199e:	4e 83       	std	Y+6, r20	; 0x06
    19a0:	5f 83       	std	Y+7, r21	; 0x07
    19a2:	68 87       	std	Y+8, r22	; 0x08
    19a4:	79 87       	std	Y+9, r23	; 0x09
    19a6:	b1 2c       	mov	r11, r1
    19a8:	d1 2c       	mov	r13, r1
    19aa:	cc 24       	eor	r12, r12
    19ac:	c3 94       	inc	r12
    19ae:	7c 01       	movw	r14, r24
    19b0:	83 e1       	ldi	r24, 0x13	; 19
    19b2:	e8 0e       	add	r14, r24
    19b4:	f1 1c       	adc	r15, r1
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	0f 92       	push	r0
    19bc:	d8 01       	movw	r26, r16
    19be:	5e 96       	adiw	r26, 0x1e	; 30
    19c0:	8c 91       	ld	r24, X
    19c2:	5e 97       	sbiw	r26, 0x1e	; 30
    19c4:	88 23       	and	r24, r24
    19c6:	e1 f0       	breq	.+56     	; 0x1a00 <xQueueSemaphoreTake+0x86>
    19c8:	81 50       	subi	r24, 0x01	; 1
    19ca:	5e 96       	adiw	r26, 0x1e	; 30
    19cc:	8c 93       	st	X, r24
    19ce:	5e 97       	sbiw	r26, 0x1e	; 30
    19d0:	8d 91       	ld	r24, X+
    19d2:	9c 91       	ld	r25, X
    19d4:	89 2b       	or	r24, r25
    19d6:	29 f4       	brne	.+10     	; 0x19e2 <xQueueSemaphoreTake+0x68>
    19d8:	0e 94 67 17 	call	0x2ece	; 0x2ece <pvTaskIncrementMutexHeldCount>
    19dc:	f8 01       	movw	r30, r16
    19de:	95 83       	std	Z+5, r25	; 0x05
    19e0:	84 83       	std	Z+4, r24	; 0x04
    19e2:	d8 01       	movw	r26, r16
    19e4:	18 96       	adiw	r26, 0x08	; 8
    19e6:	8c 91       	ld	r24, X
    19e8:	88 23       	and	r24, r24
    19ea:	31 f0       	breq	.+12     	; 0x19f8 <xQueueSemaphoreTake+0x7e>
    19ec:	c8 01       	movw	r24, r16
    19ee:	08 96       	adiw	r24, 0x08	; 8
    19f0:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <xTaskRemoveFromEventList>
    19f4:	81 11       	cpse	r24, r1
    19f6:	2a dc       	rcall	.-1964   	; 0x124c <vPortYield>
    19f8:	0f 90       	pop	r0
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	7a c0       	rjmp	.+244    	; 0x1af4 <xQueueSemaphoreTake+0x17a>
    1a00:	8e 81       	ldd	r24, Y+6	; 0x06
    1a02:	9f 81       	ldd	r25, Y+7	; 0x07
    1a04:	a8 85       	ldd	r26, Y+8	; 0x08
    1a06:	b9 85       	ldd	r27, Y+9	; 0x09
    1a08:	89 2b       	or	r24, r25
    1a0a:	8a 2b       	or	r24, r26
    1a0c:	8b 2b       	or	r24, r27
    1a0e:	21 f4       	brne	.+8      	; 0x1a18 <xQueueSemaphoreTake+0x9e>
    1a10:	0f 90       	pop	r0
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	6e c0       	rjmp	.+220    	; 0x1af4 <xQueueSemaphoreTake+0x17a>
    1a18:	d1 10       	cpse	r13, r1
    1a1a:	05 c0       	rjmp	.+10     	; 0x1a26 <xQueueSemaphoreTake+0xac>
    1a1c:	ce 01       	movw	r24, r28
    1a1e:	01 96       	adiw	r24, 0x01	; 1
    1a20:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <vTaskInternalSetTimeOutState>
    1a24:	dc 2c       	mov	r13, r12
    1a26:	0f 90       	pop	r0
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	70 d5       	rcall	.+2784   	; 0x250c <vTaskSuspendAll>
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	0f 92       	push	r0
    1a32:	f8 01       	movw	r30, r16
    1a34:	81 a1       	ldd	r24, Z+33	; 0x21
    1a36:	8f 3f       	cpi	r24, 0xFF	; 255
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <xQueueSemaphoreTake+0xc2>
    1a3a:	11 a2       	std	Z+33, r1	; 0x21
    1a3c:	d8 01       	movw	r26, r16
    1a3e:	92 96       	adiw	r26, 0x22	; 34
    1a40:	8c 91       	ld	r24, X
    1a42:	92 97       	sbiw	r26, 0x22	; 34
    1a44:	8f 3f       	cpi	r24, 0xFF	; 255
    1a46:	11 f4       	brne	.+4      	; 0x1a4c <xQueueSemaphoreTake+0xd2>
    1a48:	92 96       	adiw	r26, 0x22	; 34
    1a4a:	1c 92       	st	X, r1
    1a4c:	0f 90       	pop	r0
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	be 01       	movw	r22, r28
    1a52:	6a 5f       	subi	r22, 0xFA	; 250
    1a54:	7f 4f       	sbci	r23, 0xFF	; 255
    1a56:	ce 01       	movw	r24, r28
    1a58:	01 96       	adiw	r24, 0x01	; 1
    1a5a:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <xTaskCheckForTimeOut>
    1a5e:	81 11       	cpse	r24, r1
    1a60:	24 c0       	rjmp	.+72     	; 0x1aaa <xQueueSemaphoreTake+0x130>
    1a62:	c8 01       	movw	r24, r16
    1a64:	bb dc       	rcall	.-1674   	; 0x13dc <prvIsQueueEmpty>
    1a66:	88 23       	and	r24, r24
    1a68:	e1 f0       	breq	.+56     	; 0x1aa2 <xQueueSemaphoreTake+0x128>
    1a6a:	f8 01       	movw	r30, r16
    1a6c:	80 81       	ld	r24, Z
    1a6e:	91 81       	ldd	r25, Z+1	; 0x01
    1a70:	89 2b       	or	r24, r25
    1a72:	51 f4       	brne	.+20     	; 0x1a88 <xQueueSemaphoreTake+0x10e>
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	0f 92       	push	r0
    1a7a:	84 81       	ldd	r24, Z+4	; 0x04
    1a7c:	95 81       	ldd	r25, Z+5	; 0x05
    1a7e:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <xTaskPriorityInherit>
    1a82:	b8 2e       	mov	r11, r24
    1a84:	0f 90       	pop	r0
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	4e 81       	ldd	r20, Y+6	; 0x06
    1a8a:	5f 81       	ldd	r21, Y+7	; 0x07
    1a8c:	68 85       	ldd	r22, Y+8	; 0x08
    1a8e:	79 85       	ldd	r23, Y+9	; 0x09
    1a90:	c7 01       	movw	r24, r14
    1a92:	97 d7       	rcall	.+3886   	; 0x29c2 <vTaskPlaceOnEventList>
    1a94:	c8 01       	movw	r24, r16
    1a96:	26 dd       	rcall	.-1460   	; 0x14e4 <prvUnlockQueue>
    1a98:	22 d6       	rcall	.+3140   	; 0x26de <xTaskResumeAll>
    1a9a:	81 11       	cpse	r24, r1
    1a9c:	8c cf       	rjmp	.-232    	; 0x19b6 <xQueueSemaphoreTake+0x3c>
    1a9e:	d6 db       	rcall	.-2132   	; 0x124c <vPortYield>
    1aa0:	8a cf       	rjmp	.-236    	; 0x19b6 <xQueueSemaphoreTake+0x3c>
    1aa2:	c8 01       	movw	r24, r16
    1aa4:	1f dd       	rcall	.-1474   	; 0x14e4 <prvUnlockQueue>
    1aa6:	1b d6       	rcall	.+3126   	; 0x26de <xTaskResumeAll>
    1aa8:	86 cf       	rjmp	.-244    	; 0x19b6 <xQueueSemaphoreTake+0x3c>
    1aaa:	c8 01       	movw	r24, r16
    1aac:	1b dd       	rcall	.-1482   	; 0x14e4 <prvUnlockQueue>
    1aae:	17 d6       	rcall	.+3118   	; 0x26de <xTaskResumeAll>
    1ab0:	c8 01       	movw	r24, r16
    1ab2:	94 dc       	rcall	.-1752   	; 0x13dc <prvIsQueueEmpty>
    1ab4:	88 23       	and	r24, r24
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <xQueueSemaphoreTake+0x140>
    1ab8:	7e cf       	rjmp	.-260    	; 0x19b6 <xQueueSemaphoreTake+0x3c>
    1aba:	bb 20       	and	r11, r11
    1abc:	d1 f0       	breq	.+52     	; 0x1af2 <xQueueSemaphoreTake+0x178>
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	0f 92       	push	r0
    1ac4:	f8 01       	movw	r30, r16
    1ac6:	83 89       	ldd	r24, Z+19	; 0x13
    1ac8:	88 23       	and	r24, r24
    1aca:	39 f0       	breq	.+14     	; 0x1ada <xQueueSemaphoreTake+0x160>
    1acc:	02 8c       	ldd	r0, Z+26	; 0x1a
    1ace:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1ad0:	e0 2d       	mov	r30, r0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	64 e0       	ldi	r22, 0x04	; 4
    1ad6:	68 1b       	sub	r22, r24
    1ad8:	01 c0       	rjmp	.+2      	; 0x1adc <xQueueSemaphoreTake+0x162>
    1ada:	60 e0       	ldi	r22, 0x00	; 0
    1adc:	d8 01       	movw	r26, r16
    1ade:	14 96       	adiw	r26, 0x04	; 4
    1ae0:	8d 91       	ld	r24, X+
    1ae2:	9c 91       	ld	r25, X
    1ae4:	15 97       	sbiw	r26, 0x05	; 5
    1ae6:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <vTaskPriorityDisinheritAfterTimeout>
    1aea:	0f 90       	pop	r0
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	01 c0       	rjmp	.+2      	; 0x1af4 <xQueueSemaphoreTake+0x17a>
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	29 96       	adiw	r28, 0x09	; 9
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	1f 91       	pop	r17
    1b06:	0f 91       	pop	r16
    1b08:	ff 90       	pop	r15
    1b0a:	ef 90       	pop	r14
    1b0c:	df 90       	pop	r13
    1b0e:	cf 90       	pop	r12
    1b10:	bf 90       	pop	r11
    1b12:	08 95       	ret

00001b14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	0f 92       	push	r0
    1b20:	89 a1       	ldd	r24, Y+33	; 0x21
    1b22:	8f 3f       	cpi	r24, 0xFF	; 255
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <vQueueWaitForMessageRestricted+0x14>
    1b26:	19 a2       	std	Y+33, r1	; 0x21
    1b28:	8a a1       	ldd	r24, Y+34	; 0x22
    1b2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <vQueueWaitForMessageRestricted+0x1c>
    1b2e:	1a a2       	std	Y+34, r1	; 0x22
    1b30:	0f 90       	pop	r0
    1b32:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1b34:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b36:	81 11       	cpse	r24, r1
    1b38:	03 c0       	rjmp	.+6      	; 0x1b40 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	43 96       	adiw	r24, 0x13	; 19
    1b3e:	7c d7       	rcall	.+3832   	; 0x2a38 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1b40:	ce 01       	movw	r24, r28
    1b42:	d0 dc       	rcall	.-1632   	; 0x14e4 <prvUnlockQueue>
    }
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	08 95       	ret

00001b4a <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	44 81       	ldd	r20, Z+4	; 0x04
    1b4e:	55 81       	ldd	r21, Z+5	; 0x05
    1b50:	22 81       	ldd	r18, Z+2	; 0x02
    1b52:	33 81       	ldd	r19, Z+3	; 0x03
    1b54:	24 0f       	add	r18, r20
    1b56:	35 1f       	adc	r19, r21
    1b58:	80 81       	ld	r24, Z
    1b5a:	91 81       	ldd	r25, Z+1	; 0x01
    1b5c:	b9 01       	movw	r22, r18
    1b5e:	68 1b       	sub	r22, r24
    1b60:	79 0b       	sbc	r23, r25
    1b62:	cb 01       	movw	r24, r22
    1b64:	64 17       	cp	r22, r20
    1b66:	75 07       	cpc	r23, r21
    1b68:	10 f0       	brcs	.+4      	; 0x1b6e <prvBytesInBuffer+0x24>
    1b6a:	84 1b       	sub	r24, r20
    1b6c:	95 0b       	sbc	r25, r21
    1b6e:	08 95       	ret

00001b70 <prvWriteBytesToBuffer>:
    1b70:	af 92       	push	r10
    1b72:	bf 92       	push	r11
    1b74:	cf 92       	push	r12
    1b76:	df 92       	push	r13
    1b78:	ef 92       	push	r14
    1b7a:	ff 92       	push	r15
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	6c 01       	movw	r12, r24
    1b86:	5b 01       	movw	r10, r22
    1b88:	7a 01       	movw	r14, r20
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	c2 81       	ldd	r28, Z+2	; 0x02
    1b8e:	d3 81       	ldd	r29, Z+3	; 0x03
    1b90:	04 81       	ldd	r16, Z+4	; 0x04
    1b92:	15 81       	ldd	r17, Z+5	; 0x05
    1b94:	0c 1b       	sub	r16, r28
    1b96:	1d 0b       	sbc	r17, r29
    1b98:	40 17       	cp	r20, r16
    1b9a:	51 07       	cpc	r21, r17
    1b9c:	08 f4       	brcc	.+2      	; 0x1ba0 <prvWriteBytesToBuffer+0x30>
    1b9e:	8a 01       	movw	r16, r20
    1ba0:	f6 01       	movw	r30, r12
    1ba2:	84 85       	ldd	r24, Z+12	; 0x0c
    1ba4:	95 85       	ldd	r25, Z+13	; 0x0d
    1ba6:	a8 01       	movw	r20, r16
    1ba8:	b5 01       	movw	r22, r10
    1baa:	8c 0f       	add	r24, r28
    1bac:	9d 1f       	adc	r25, r29
    1bae:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <memcpy>
    1bb2:	0e 15       	cp	r16, r14
    1bb4:	1f 05       	cpc	r17, r15
    1bb6:	58 f4       	brcc	.+22     	; 0x1bce <prvWriteBytesToBuffer+0x5e>
    1bb8:	a7 01       	movw	r20, r14
    1bba:	40 1b       	sub	r20, r16
    1bbc:	51 0b       	sbc	r21, r17
    1bbe:	b5 01       	movw	r22, r10
    1bc0:	60 0f       	add	r22, r16
    1bc2:	71 1f       	adc	r23, r17
    1bc4:	f6 01       	movw	r30, r12
    1bc6:	84 85       	ldd	r24, Z+12	; 0x0c
    1bc8:	95 85       	ldd	r25, Z+13	; 0x0d
    1bca:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <memcpy>
    1bce:	ce 01       	movw	r24, r28
    1bd0:	8e 0d       	add	r24, r14
    1bd2:	9f 1d       	adc	r25, r15
    1bd4:	f6 01       	movw	r30, r12
    1bd6:	24 81       	ldd	r18, Z+4	; 0x04
    1bd8:	35 81       	ldd	r19, Z+5	; 0x05
    1bda:	82 17       	cp	r24, r18
    1bdc:	93 07       	cpc	r25, r19
    1bde:	10 f0       	brcs	.+4      	; 0x1be4 <prvWriteBytesToBuffer+0x74>
    1be0:	82 1b       	sub	r24, r18
    1be2:	93 0b       	sbc	r25, r19
    1be4:	f6 01       	movw	r30, r12
    1be6:	93 83       	std	Z+3, r25	; 0x03
    1be8:	82 83       	std	Z+2, r24	; 0x02
    1bea:	c7 01       	movw	r24, r14
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	1f 91       	pop	r17
    1bf2:	0f 91       	pop	r16
    1bf4:	ff 90       	pop	r15
    1bf6:	ef 90       	pop	r14
    1bf8:	df 90       	pop	r13
    1bfa:	cf 90       	pop	r12
    1bfc:	bf 90       	pop	r11
    1bfe:	af 90       	pop	r10
    1c00:	08 95       	ret

00001c02 <prvWriteMessageToBuffer>:
    1c02:	cf 92       	push	r12
    1c04:	df 92       	push	r13
    1c06:	ef 92       	push	r14
    1c08:	ff 92       	push	r15
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	1f 92       	push	r1
    1c14:	1f 92       	push	r1
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	5a 83       	std	Y+2, r21	; 0x02
    1c1c:	49 83       	std	Y+1, r20	; 0x01
    1c1e:	21 15       	cp	r18, r1
    1c20:	31 05       	cpc	r19, r1
    1c22:	c9 f0       	breq	.+50     	; 0x1c56 <prvWriteMessageToBuffer+0x54>
    1c24:	6b 01       	movw	r12, r22
    1c26:	7c 01       	movw	r14, r24
    1c28:	fc 01       	movw	r30, r24
    1c2a:	86 85       	ldd	r24, Z+14	; 0x0e
    1c2c:	80 fd       	sbrc	r24, 0
    1c2e:	08 c0       	rjmp	.+16     	; 0x1c40 <prvWriteMessageToBuffer+0x3e>
    1c30:	ca 01       	movw	r24, r20
    1c32:	24 17       	cp	r18, r20
    1c34:	35 07       	cpc	r19, r21
    1c36:	08 f4       	brcc	.+2      	; 0x1c3a <prvWriteMessageToBuffer+0x38>
    1c38:	c9 01       	movw	r24, r18
    1c3a:	9a 83       	std	Y+2, r25	; 0x02
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	11 c0       	rjmp	.+34     	; 0x1c62 <prvWriteMessageToBuffer+0x60>
    1c40:	20 17       	cp	r18, r16
    1c42:	31 07       	cpc	r19, r17
    1c44:	58 f0       	brcs	.+22     	; 0x1c5c <prvWriteMessageToBuffer+0x5a>
    1c46:	42 e0       	ldi	r20, 0x02	; 2
    1c48:	50 e0       	ldi	r21, 0x00	; 0
    1c4a:	be 01       	movw	r22, r28
    1c4c:	6f 5f       	subi	r22, 0xFF	; 255
    1c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c50:	c7 01       	movw	r24, r14
    1c52:	8e df       	rcall	.-228    	; 0x1b70 <prvWriteBytesToBuffer>
    1c54:	06 c0       	rjmp	.+12     	; 0x1c62 <prvWriteMessageToBuffer+0x60>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	08 c0       	rjmp	.+16     	; 0x1c6c <prvWriteMessageToBuffer+0x6a>
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	05 c0       	rjmp	.+10     	; 0x1c6c <prvWriteMessageToBuffer+0x6a>
    1c62:	49 81       	ldd	r20, Y+1	; 0x01
    1c64:	5a 81       	ldd	r21, Y+2	; 0x02
    1c66:	b6 01       	movw	r22, r12
    1c68:	c7 01       	movw	r24, r14
    1c6a:	82 df       	rcall	.-252    	; 0x1b70 <prvWriteBytesToBuffer>
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	1f 91       	pop	r17
    1c76:	0f 91       	pop	r16
    1c78:	ff 90       	pop	r15
    1c7a:	ef 90       	pop	r14
    1c7c:	df 90       	pop	r13
    1c7e:	cf 90       	pop	r12
    1c80:	08 95       	ret

00001c82 <prvReadBytesFromBuffer>:
    1c82:	af 92       	push	r10
    1c84:	bf 92       	push	r11
    1c86:	cf 92       	push	r12
    1c88:	df 92       	push	r13
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	7c 01       	movw	r14, r24
    1c98:	5b 01       	movw	r10, r22
    1c9a:	e9 01       	movw	r28, r18
    1c9c:	42 17       	cp	r20, r18
    1c9e:	53 07       	cpc	r21, r19
    1ca0:	08 f4       	brcc	.+2      	; 0x1ca4 <prvReadBytesFromBuffer+0x22>
    1ca2:	ea 01       	movw	r28, r20
    1ca4:	20 97       	sbiw	r28, 0x00	; 0
    1ca6:	79 f1       	breq	.+94     	; 0x1d06 <prvReadBytesFromBuffer+0x84>
    1ca8:	f7 01       	movw	r30, r14
    1caa:	00 81       	ld	r16, Z
    1cac:	11 81       	ldd	r17, Z+1	; 0x01
    1cae:	c4 80       	ldd	r12, Z+4	; 0x04
    1cb0:	d5 80       	ldd	r13, Z+5	; 0x05
    1cb2:	c0 1a       	sub	r12, r16
    1cb4:	d1 0a       	sbc	r13, r17
    1cb6:	cc 15       	cp	r28, r12
    1cb8:	dd 05       	cpc	r29, r13
    1cba:	08 f4       	brcc	.+2      	; 0x1cbe <prvReadBytesFromBuffer+0x3c>
    1cbc:	6e 01       	movw	r12, r28
    1cbe:	f7 01       	movw	r30, r14
    1cc0:	64 85       	ldd	r22, Z+12	; 0x0c
    1cc2:	75 85       	ldd	r23, Z+13	; 0x0d
    1cc4:	60 0f       	add	r22, r16
    1cc6:	71 1f       	adc	r23, r17
    1cc8:	a6 01       	movw	r20, r12
    1cca:	c5 01       	movw	r24, r10
    1ccc:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <memcpy>
    1cd0:	cc 16       	cp	r12, r28
    1cd2:	dd 06       	cpc	r13, r29
    1cd4:	58 f4       	brcc	.+22     	; 0x1cec <prvReadBytesFromBuffer+0x6a>
    1cd6:	ae 01       	movw	r20, r28
    1cd8:	4c 19       	sub	r20, r12
    1cda:	5d 09       	sbc	r21, r13
    1cdc:	f7 01       	movw	r30, r14
    1cde:	64 85       	ldd	r22, Z+12	; 0x0c
    1ce0:	75 85       	ldd	r23, Z+13	; 0x0d
    1ce2:	c5 01       	movw	r24, r10
    1ce4:	8c 0d       	add	r24, r12
    1ce6:	9d 1d       	adc	r25, r13
    1ce8:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <memcpy>
    1cec:	0c 0f       	add	r16, r28
    1cee:	1d 1f       	adc	r17, r29
    1cf0:	f7 01       	movw	r30, r14
    1cf2:	84 81       	ldd	r24, Z+4	; 0x04
    1cf4:	95 81       	ldd	r25, Z+5	; 0x05
    1cf6:	08 17       	cp	r16, r24
    1cf8:	19 07       	cpc	r17, r25
    1cfa:	10 f0       	brcs	.+4      	; 0x1d00 <prvReadBytesFromBuffer+0x7e>
    1cfc:	08 1b       	sub	r16, r24
    1cfe:	19 0b       	sbc	r17, r25
    1d00:	f7 01       	movw	r30, r14
    1d02:	11 83       	std	Z+1, r17	; 0x01
    1d04:	00 83       	st	Z, r16
    1d06:	ce 01       	movw	r24, r28
    1d08:	df 91       	pop	r29
    1d0a:	cf 91       	pop	r28
    1d0c:	1f 91       	pop	r17
    1d0e:	0f 91       	pop	r16
    1d10:	ff 90       	pop	r15
    1d12:	ef 90       	pop	r14
    1d14:	df 90       	pop	r13
    1d16:	cf 90       	pop	r12
    1d18:	bf 90       	pop	r11
    1d1a:	af 90       	pop	r10
    1d1c:	08 95       	ret

00001d1e <xStreamBufferGenericCreate>:
    1d1e:	ef 92       	push	r14
    1d20:	ff 92       	push	r15
    1d22:	1f 93       	push	r17
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	eb 01       	movw	r28, r22
    1d2a:	11 e0       	ldi	r17, 0x01	; 1
    1d2c:	41 30       	cpi	r20, 0x01	; 1
    1d2e:	09 f0       	breq	.+2      	; 0x1d32 <xStreamBufferGenericCreate+0x14>
    1d30:	10 e0       	ldi	r17, 0x00	; 0
    1d32:	20 97       	sbiw	r28, 0x00	; 0
    1d34:	11 f4       	brne	.+4      	; 0x1d3a <xStreamBufferGenericCreate+0x1c>
    1d36:	c1 e0       	ldi	r28, 0x01	; 1
    1d38:	d0 e0       	ldi	r29, 0x00	; 0
    1d3a:	7c 01       	movw	r14, r24
    1d3c:	2f ef       	ldi	r18, 0xFF	; 255
    1d3e:	e2 1a       	sub	r14, r18
    1d40:	f2 0a       	sbc	r15, r18
    1d42:	41 96       	adiw	r24, 0x11	; 17
    1d44:	51 d8       	rcall	.-3934   	; 0xde8 <pvPortMalloc>
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	81 f0       	breq	.+32     	; 0x1d6a <xStreamBufferGenericCreate+0x4c>
    1d4a:	20 e1       	ldi	r18, 0x10	; 16
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	11 92       	st	Z+, r1
    1d50:	2a 95       	dec	r18
    1d52:	e9 f7       	brne	.-6      	; 0x1d4e <xStreamBufferGenericCreate+0x30>
    1d54:	9c 01       	movw	r18, r24
    1d56:	20 5f       	subi	r18, 0xF0	; 240
    1d58:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	35 87       	std	Z+13, r19	; 0x0d
    1d5e:	24 87       	std	Z+12, r18	; 0x0c
    1d60:	f5 82       	std	Z+5, r15	; 0x05
    1d62:	e4 82       	std	Z+4, r14	; 0x04
    1d64:	d7 83       	std	Z+7, r29	; 0x07
    1d66:	c6 83       	std	Z+6, r28	; 0x06
    1d68:	16 87       	std	Z+14, r17	; 0x0e
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	1f 91       	pop	r17
    1d70:	ff 90       	pop	r15
    1d72:	ef 90       	pop	r14
    1d74:	08 95       	ret

00001d76 <xStreamBufferReset>:
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	27 85       	ldd	r18, Z+15	; 0x0f
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	0f 92       	push	r0
    1d84:	80 85       	ldd	r24, Z+8	; 0x08
    1d86:	91 85       	ldd	r25, Z+9	; 0x09
    1d88:	89 2b       	or	r24, r25
    1d8a:	d1 f4       	brne	.+52     	; 0x1dc0 <xStreamBufferReset+0x4a>
    1d8c:	82 85       	ldd	r24, Z+10	; 0x0a
    1d8e:	93 85       	ldd	r25, Z+11	; 0x0b
    1d90:	89 2b       	or	r24, r25
    1d92:	c1 f4       	brne	.+48     	; 0x1dc4 <xStreamBufferReset+0x4e>
    1d94:	86 85       	ldd	r24, Z+14	; 0x0e
    1d96:	46 81       	ldd	r20, Z+6	; 0x06
    1d98:	57 81       	ldd	r21, Z+7	; 0x07
    1d9a:	64 81       	ldd	r22, Z+4	; 0x04
    1d9c:	75 81       	ldd	r23, Z+5	; 0x05
    1d9e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1da0:	b5 85       	ldd	r27, Z+13	; 0x0d
    1da2:	90 e1       	ldi	r25, 0x10	; 16
    1da4:	ef 01       	movw	r28, r30
    1da6:	19 92       	st	Y+, r1
    1da8:	9a 95       	dec	r25
    1daa:	e9 f7       	brne	.-6      	; 0x1da6 <xStreamBufferReset+0x30>
    1dac:	b5 87       	std	Z+13, r27	; 0x0d
    1dae:	a4 87       	std	Z+12, r26	; 0x0c
    1db0:	75 83       	std	Z+5, r23	; 0x05
    1db2:	64 83       	std	Z+4, r22	; 0x04
    1db4:	57 83       	std	Z+7, r21	; 0x07
    1db6:	46 83       	std	Z+6, r20	; 0x06
    1db8:	86 87       	std	Z+14, r24	; 0x0e
    1dba:	27 87       	std	Z+15, r18	; 0x0f
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	03 c0       	rjmp	.+6      	; 0x1dc6 <xStreamBufferReset+0x50>
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	01 c0       	rjmp	.+2      	; 0x1dc6 <xStreamBufferReset+0x50>
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	0f 90       	pop	r0
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	08 95       	ret

00001dd0 <xStreamBufferSpacesAvailable>:
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	24 81       	ldd	r18, Z+4	; 0x04
    1dd4:	35 81       	ldd	r19, Z+5	; 0x05
    1dd6:	80 81       	ld	r24, Z
    1dd8:	91 81       	ldd	r25, Z+1	; 0x01
    1dda:	42 81       	ldd	r20, Z+2	; 0x02
    1ddc:	53 81       	ldd	r21, Z+3	; 0x03
    1dde:	82 0f       	add	r24, r18
    1de0:	93 1f       	adc	r25, r19
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	84 1b       	sub	r24, r20
    1de6:	95 0b       	sbc	r25, r21
    1de8:	82 17       	cp	r24, r18
    1dea:	93 07       	cpc	r25, r19
    1dec:	10 f0       	brcs	.+4      	; 0x1df2 <xStreamBufferSpacesAvailable+0x22>
    1dee:	82 1b       	sub	r24, r18
    1df0:	93 0b       	sbc	r25, r19
    1df2:	08 95       	ret

00001df4 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1df4:	2f 92       	push	r2
    1df6:	3f 92       	push	r3
    1df8:	4f 92       	push	r4
    1dfa:	5f 92       	push	r5
    1dfc:	6f 92       	push	r6
    1dfe:	7f 92       	push	r7
    1e00:	8f 92       	push	r8
    1e02:	9f 92       	push	r9
    1e04:	af 92       	push	r10
    1e06:	bf 92       	push	r11
    1e08:	cf 92       	push	r12
    1e0a:	df 92       	push	r13
    1e0c:	ef 92       	push	r14
    1e0e:	ff 92       	push	r15
    1e10:	0f 93       	push	r16
    1e12:	1f 93       	push	r17
    1e14:	cf 93       	push	r28
    1e16:	df 93       	push	r29
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	29 97       	sbiw	r28, 0x09	; 9
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	5c 01       	movw	r10, r24
    1e2a:	1b 01       	movw	r2, r22
    1e2c:	2a 01       	movw	r4, r20
    1e2e:	0e 83       	std	Y+6, r16	; 0x06
    1e30:	1f 83       	std	Y+7, r17	; 0x07
    1e32:	28 87       	std	Y+8, r18	; 0x08
    1e34:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1e36:	fc 01       	movw	r30, r24
    1e38:	86 85       	ldd	r24, Z+14	; 0x0e
    1e3a:	80 ff       	sbrs	r24, 0
    1e3c:	05 c0       	rjmp	.+10     	; 0x1e48 <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1e3e:	3a 01       	movw	r6, r20
    1e40:	f2 e0       	ldi	r31, 0x02	; 2
    1e42:	6f 0e       	add	r6, r31
    1e44:	71 1c       	adc	r7, r1
    1e46:	01 c0       	rjmp	.+2      	; 0x1e4a <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    1e48:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1e4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e4e:	a8 85       	ldd	r26, Y+8	; 0x08
    1e50:	b9 85       	ldd	r27, Y+9	; 0x09
    1e52:	89 2b       	or	r24, r25
    1e54:	8a 2b       	or	r24, r26
    1e56:	8b 2b       	or	r24, r27
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <xStreamBufferSend+0x68>
    1e5a:	35 c0       	rjmp	.+106    	; 0x1ec6 <xStreamBufferSend+0xd2>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	01 96       	adiw	r24, 0x01	; 1
    1e60:	81 d6       	rcall	.+3330   	; 0x2b64 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1e68:	c5 01       	movw	r24, r10
    1e6a:	b2 df       	rcall	.-156    	; 0x1dd0 <xStreamBufferSpacesAvailable>
    1e6c:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    1e6e:	86 15       	cp	r24, r6
    1e70:	97 05       	cpc	r25, r7
    1e72:	20 f5       	brcc	.+72     	; 0x1ebc <xStreamBufferSend+0xc8>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	0e 94 04 19 	call	0x3208	; 0x3208 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1e7c:	f3 d6       	rcall	.+3558   	; 0x2c64 <xTaskGetCurrentTaskHandle>
    1e7e:	f5 01       	movw	r30, r10
    1e80:	93 87       	std	Z+11, r25	; 0x0b
    1e82:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1e84:	0f 90       	pop	r0
    1e86:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1e88:	ce 80       	ldd	r12, Y+6	; 0x06
    1e8a:	df 80       	ldd	r13, Y+7	; 0x07
    1e8c:	e8 84       	ldd	r14, Y+8	; 0x08
    1e8e:	f9 84       	ldd	r15, Y+9	; 0x09
    1e90:	00 e0       	ldi	r16, 0x00	; 0
    1e92:	10 e0       	ldi	r17, 0x00	; 0
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	a9 01       	movw	r20, r18
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	70 e0       	ldi	r23, 0x00	; 0
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1ea4:	f5 01       	movw	r30, r10
    1ea6:	13 86       	std	Z+11, r1	; 0x0b
    1ea8:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1eaa:	be 01       	movw	r22, r28
    1eac:	6a 5f       	subi	r22, 0xFA	; 250
    1eae:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	01 96       	adiw	r24, 0x01	; 1
    1eb4:	7e d6       	rcall	.+3324   	; 0x2bb2 <xTaskCheckForTimeOut>
    1eb6:	88 23       	and	r24, r24
    1eb8:	a1 f2       	breq	.-88     	; 0x1e62 <xStreamBufferSend+0x6e>
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <xStreamBufferSend+0xcc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1ebc:	0f 90       	pop	r0
    1ebe:	0f be       	out	0x3f, r0	; 63
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1ec0:	81 14       	cp	r8, r1
    1ec2:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1ec4:	19 f4       	brne	.+6      	; 0x1ecc <xStreamBufferSend+0xd8>
    1ec6:	c5 01       	movw	r24, r10
    1ec8:	83 df       	rcall	.-250    	; 0x1dd0 <xStreamBufferSpacesAvailable>
    1eca:	4c 01       	movw	r8, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1ecc:	83 01       	movw	r16, r6
    1ece:	94 01       	movw	r18, r8
    1ed0:	a2 01       	movw	r20, r4
    1ed2:	b1 01       	movw	r22, r2
    1ed4:	c5 01       	movw	r24, r10
    1ed6:	95 de       	rcall	.-726    	; 0x1c02 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    1ed8:	7c 01       	movw	r14, r24
    1eda:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1edc:	e1 f0       	breq	.+56     	; 0x1f16 <xStreamBufferSend+0x122>
    1ede:	c5 01       	movw	r24, r10
    1ee0:	34 de       	rcall	.-920    	; 0x1b4a <prvBytesInBuffer>
    1ee2:	f5 01       	movw	r30, r10
    1ee4:	26 81       	ldd	r18, Z+6	; 0x06
    1ee6:	37 81       	ldd	r19, Z+7	; 0x07
    1ee8:	82 17       	cp	r24, r18
    1eea:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1eec:	a0 f0       	brcs	.+40     	; 0x1f16 <xStreamBufferSend+0x122>
    1eee:	0e d3       	rcall	.+1564   	; 0x250c <vTaskSuspendAll>
    1ef0:	f5 01       	movw	r30, r10
    1ef2:	80 85       	ldd	r24, Z+8	; 0x08
    1ef4:	91 85       	ldd	r25, Z+9	; 0x09
    1ef6:	89 2b       	or	r24, r25
    1ef8:	69 f0       	breq	.+26     	; 0x1f14 <xStreamBufferSend+0x120>
    1efa:	80 85       	ldd	r24, Z+8	; 0x08
    1efc:	91 85       	ldd	r25, Z+9	; 0x09
    1efe:	00 e0       	ldi	r16, 0x00	; 0
    1f00:	10 e0       	ldi	r17, 0x00	; 0
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	40 e0       	ldi	r20, 0x00	; 0
    1f06:	50 e0       	ldi	r21, 0x00	; 0
    1f08:	ba 01       	movw	r22, r20
    1f0a:	0e 94 03 18 	call	0x3006	; 0x3006 <xTaskGenericNotify>
    1f0e:	f5 01       	movw	r30, r10
    1f10:	11 86       	std	Z+9, r1	; 0x09
    1f12:	10 86       	std	Z+8, r1	; 0x08
    1f14:	e4 d3       	rcall	.+1992   	; 0x26de <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1f16:	c7 01       	movw	r24, r14
    1f18:	29 96       	adiw	r28, 0x09	; 9
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	ff 90       	pop	r15
    1f2e:	ef 90       	pop	r14
    1f30:	df 90       	pop	r13
    1f32:	cf 90       	pop	r12
    1f34:	bf 90       	pop	r11
    1f36:	af 90       	pop	r10
    1f38:	9f 90       	pop	r9
    1f3a:	8f 90       	pop	r8
    1f3c:	7f 90       	pop	r7
    1f3e:	6f 90       	pop	r6
    1f40:	5f 90       	pop	r5
    1f42:	4f 90       	pop	r4
    1f44:	3f 90       	pop	r3
    1f46:	2f 90       	pop	r2
    1f48:	08 95       	ret

00001f4a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1f4a:	af 92       	push	r10
    1f4c:	bf 92       	push	r11
    1f4e:	cf 92       	push	r12
    1f50:	df 92       	push	r13
    1f52:	ef 92       	push	r14
    1f54:	ff 92       	push	r15
    1f56:	0f 93       	push	r16
    1f58:	1f 93       	push	r17
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	ec 01       	movw	r28, r24
    1f60:	5b 01       	movw	r10, r22
    1f62:	6a 01       	movw	r12, r20
    1f64:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1f66:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f68:	80 ff       	sbrs	r24, 0
    1f6a:	04 c0       	rjmp	.+8      	; 0x1f74 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1f6c:	8a 01       	movw	r16, r20
    1f6e:	0e 5f       	subi	r16, 0xFE	; 254
    1f70:	1f 4f       	sbci	r17, 0xFF	; 255
    1f72:	01 c0       	rjmp	.+2      	; 0x1f76 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    1f74:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1f76:	ce 01       	movw	r24, r28
    1f78:	2b df       	rcall	.-426    	; 0x1dd0 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1f7a:	9c 01       	movw	r18, r24
    1f7c:	a6 01       	movw	r20, r12
    1f7e:	b5 01       	movw	r22, r10
    1f80:	ce 01       	movw	r24, r28
    1f82:	3f de       	rcall	.-898    	; 0x1c02 <prvWriteMessageToBuffer>
    1f84:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1f86:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1f88:	b9 f0       	breq	.+46     	; 0x1fb8 <xStreamBufferSendFromISR+0x6e>
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	de dd       	rcall	.-1092   	; 0x1b4a <prvBytesInBuffer>
    1f8e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f90:	3f 81       	ldd	r19, Y+7	; 0x07
    1f92:	82 17       	cp	r24, r18
    1f94:	93 07       	cpc	r25, r19
    1f96:	80 f0       	brcs	.+32     	; 0x1fb8 <xStreamBufferSendFromISR+0x6e>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1f98:	88 85       	ldd	r24, Y+8	; 0x08
    1f9a:	99 85       	ldd	r25, Y+9	; 0x09
    1f9c:	89 2b       	or	r24, r25
    1f9e:	61 f0       	breq	.+24     	; 0x1fb8 <xStreamBufferSendFromISR+0x6e>
    1fa0:	88 85       	ldd	r24, Y+8	; 0x08
    1fa2:	99 85       	ldd	r25, Y+9	; 0x09
    1fa4:	00 e0       	ldi	r16, 0x00	; 0
    1fa6:	10 e0       	ldi	r17, 0x00	; 0
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	ba 01       	movw	r22, r20
    1fb0:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <xTaskGenericNotifyFromISR>
    1fb4:	19 86       	std	Y+9, r1	; 0x09
    1fb6:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1fb8:	c6 01       	movw	r24, r12
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	ff 90       	pop	r15
    1fc4:	ef 90       	pop	r14
    1fc6:	df 90       	pop	r13
    1fc8:	cf 90       	pop	r12
    1fca:	bf 90       	pop	r11
    1fcc:	af 90       	pop	r10
    1fce:	08 95       	ret

00001fd0 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1fd0:	4f 92       	push	r4
    1fd2:	5f 92       	push	r5
    1fd4:	6f 92       	push	r6
    1fd6:	7f 92       	push	r7
    1fd8:	8f 92       	push	r8
    1fda:	9f 92       	push	r9
    1fdc:	af 92       	push	r10
    1fde:	bf 92       	push	r11
    1fe0:	cf 92       	push	r12
    1fe2:	df 92       	push	r13
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	0f 93       	push	r16
    1fea:	1f 93       	push	r17
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	1f 92       	push	r1
    1ff2:	1f 92       	push	r1
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	5c 01       	movw	r10, r24
    1ffa:	2b 01       	movw	r4, r22
    1ffc:	3a 01       	movw	r6, r20
    1ffe:	68 01       	movw	r12, r16
    2000:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2002:	fc 01       	movw	r30, r24
    2004:	86 85       	ldd	r24, Z+14	; 0x0e
    2006:	80 fd       	sbrc	r24, 0
    2008:	03 c0       	rjmp	.+6      	; 0x2010 <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    200a:	81 2c       	mov	r8, r1
    200c:	91 2c       	mov	r9, r1
    200e:	04 c0       	rjmp	.+8      	; 0x2018 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2010:	68 94       	set
    2012:	88 24       	eor	r8, r8
    2014:	81 f8       	bld	r8, 1
    2016:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2018:	c1 14       	cp	r12, r1
    201a:	d1 04       	cpc	r13, r1
    201c:	e1 04       	cpc	r14, r1
    201e:	f1 04       	cpc	r15, r1
    2020:	31 f1       	breq	.+76     	; 0x206e <xStreamBufferReceive+0x9e>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2028:	c5 01       	movw	r24, r10
    202a:	8f dd       	rcall	.-1250   	; 0x1b4a <prvBytesInBuffer>
    202c:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    202e:	88 16       	cp	r8, r24
    2030:	99 06       	cpc	r9, r25
    2032:	40 f0       	brcs	.+16     	; 0x2044 <xStreamBufferReceive+0x74>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	0e 94 04 19 	call	0x3208	; 0x3208 <xTaskNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    203c:	13 d6       	rcall	.+3110   	; 0x2c64 <xTaskGetCurrentTaskHandle>
    203e:	f5 01       	movw	r30, r10
    2040:	91 87       	std	Z+9, r25	; 0x09
    2042:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2044:	0f 90       	pop	r0
    2046:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2048:	80 16       	cp	r8, r16
    204a:	91 06       	cpc	r9, r17
    204c:	b0 f0       	brcs	.+44     	; 0x207a <xStreamBufferReceive+0xaa>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    204e:	00 e0       	ldi	r16, 0x00	; 0
    2050:	10 e0       	ldi	r17, 0x00	; 0
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	a9 01       	movw	r20, r18
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	70 e0       	ldi	r23, 0x00	; 0
    205c:	cb 01       	movw	r24, r22
    205e:	49 d7       	rcall	.+3730   	; 0x2ef2 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    2060:	f5 01       	movw	r30, r10
    2062:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2064:	10 86       	std	Z+8, r1	; 0x08
    2066:	c5 01       	movw	r24, r10
    2068:	70 dd       	rcall	.-1312   	; 0x1b4a <prvBytesInBuffer>
    206a:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    206c:	03 c0       	rjmp	.+6      	; 0x2074 <xStreamBufferReceive+0xa4>
    206e:	c5 01       	movw	r24, r10
    2070:	6c dd       	rcall	.-1320   	; 0x1b4a <prvBytesInBuffer>
    2072:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2074:	80 16       	cp	r8, r16
    2076:	91 06       	cpc	r9, r17
    2078:	b8 f5       	brcc	.+110    	; 0x20e8 <xStreamBufferReceive+0x118>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    207a:	81 14       	cp	r8, r1
    207c:	91 04       	cpc	r9, r1
    207e:	c1 f0       	breq	.+48     	; 0x20b0 <xStreamBufferReceive+0xe0>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    2080:	f5 01       	movw	r30, r10
    2082:	e0 80       	ld	r14, Z
    2084:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    2086:	98 01       	movw	r18, r16
    2088:	a4 01       	movw	r20, r8
    208a:	be 01       	movw	r22, r28
    208c:	6f 5f       	subi	r22, 0xFF	; 255
    208e:	7f 4f       	sbci	r23, 0xFF	; 255
    2090:	c5 01       	movw	r24, r10
    2092:	f7 dd       	rcall	.-1042   	; 0x1c82 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    2098:	08 19       	sub	r16, r8
    209a:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    209c:	68 16       	cp	r6, r24
    209e:	79 06       	cpc	r7, r25
    20a0:	30 f4       	brcc	.+12     	; 0x20ae <xStreamBufferReceive+0xde>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    20a2:	f5 01       	movw	r30, r10
    20a4:	f1 82       	std	Z+1, r15	; 0x01
    20a6:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    20a8:	61 2c       	mov	r6, r1
    20aa:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    20ac:	01 c0       	rjmp	.+2      	; 0x20b0 <xStreamBufferReceive+0xe0>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    20ae:	3c 01       	movw	r6, r24
    20b0:	98 01       	movw	r18, r16
    20b2:	a3 01       	movw	r20, r6
    20b4:	b2 01       	movw	r22, r4
    20b6:	c5 01       	movw	r24, r10
    20b8:	e4 dd       	rcall	.-1080   	; 0x1c82 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    20ba:	7c 01       	movw	r14, r24
    20bc:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    20be:	b1 f0       	breq	.+44     	; 0x20ec <xStreamBufferReceive+0x11c>
    20c0:	25 d2       	rcall	.+1098   	; 0x250c <vTaskSuspendAll>
    20c2:	f5 01       	movw	r30, r10
    20c4:	82 85       	ldd	r24, Z+10	; 0x0a
    20c6:	93 85       	ldd	r25, Z+11	; 0x0b
    20c8:	89 2b       	or	r24, r25
    20ca:	61 f0       	breq	.+24     	; 0x20e4 <xStreamBufferReceive+0x114>
    20cc:	82 85       	ldd	r24, Z+10	; 0x0a
    20ce:	93 85       	ldd	r25, Z+11	; 0x0b
    20d0:	00 e0       	ldi	r16, 0x00	; 0
    20d2:	10 e0       	ldi	r17, 0x00	; 0
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	40 e0       	ldi	r20, 0x00	; 0
    20d8:	50 e0       	ldi	r21, 0x00	; 0
    20da:	ba 01       	movw	r22, r20
    20dc:	94 d7       	rcall	.+3880   	; 0x3006 <xTaskGenericNotify>
    20de:	f5 01       	movw	r30, r10
    20e0:	13 86       	std	Z+11, r1	; 0x0b
    20e2:	12 86       	std	Z+10, r1	; 0x0a
    20e4:	fc d2       	rcall	.+1528   	; 0x26de <xTaskResumeAll>
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <xStreamBufferReceive+0x11c>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    20e8:	e1 2c       	mov	r14, r1
    20ea:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    20ec:	c7 01       	movw	r24, r14
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	df 91       	pop	r29
    20f4:	cf 91       	pop	r28
    20f6:	1f 91       	pop	r17
    20f8:	0f 91       	pop	r16
    20fa:	ff 90       	pop	r15
    20fc:	ef 90       	pop	r14
    20fe:	df 90       	pop	r13
    2100:	cf 90       	pop	r12
    2102:	bf 90       	pop	r11
    2104:	af 90       	pop	r10
    2106:	9f 90       	pop	r9
    2108:	8f 90       	pop	r8
    210a:	7f 90       	pop	r7
    210c:	6f 90       	pop	r6
    210e:	5f 90       	pop	r5
    2110:	4f 90       	pop	r4
    2112:	08 95       	ret

00002114 <prvResetNextTaskUnblockTime>:
    2114:	e0 91 b7 18 	lds	r30, 0x18B7	; 0x8018b7 <pxDelayedTaskList>
    2118:	f0 91 b8 18 	lds	r31, 0x18B8	; 0x8018b8 <pxDelayedTaskList+0x1>
    211c:	80 81       	ld	r24, Z
    211e:	81 11       	cpse	r24, r1
    2120:	0c c0       	rjmp	.+24     	; 0x213a <prvResetNextTaskUnblockTime+0x26>
    2122:	8f ef       	ldi	r24, 0xFF	; 255
    2124:	9f ef       	ldi	r25, 0xFF	; 255
    2126:	dc 01       	movw	r26, r24
    2128:	80 93 84 18 	sts	0x1884, r24	; 0x801884 <xNextTaskUnblockTime>
    212c:	90 93 85 18 	sts	0x1885, r25	; 0x801885 <xNextTaskUnblockTime+0x1>
    2130:	a0 93 86 18 	sts	0x1886, r26	; 0x801886 <xNextTaskUnblockTime+0x2>
    2134:	b0 93 87 18 	sts	0x1887, r27	; 0x801887 <xNextTaskUnblockTime+0x3>
    2138:	08 95       	ret
    213a:	e0 91 b7 18 	lds	r30, 0x18B7	; 0x8018b7 <pxDelayedTaskList>
    213e:	f0 91 b8 18 	lds	r31, 0x18B8	; 0x8018b8 <pxDelayedTaskList+0x1>
    2142:	07 80       	ldd	r0, Z+7	; 0x07
    2144:	f0 85       	ldd	r31, Z+8	; 0x08
    2146:	e0 2d       	mov	r30, r0
    2148:	00 84       	ldd	r0, Z+8	; 0x08
    214a:	f1 85       	ldd	r31, Z+9	; 0x09
    214c:	e0 2d       	mov	r30, r0
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	93 81       	ldd	r25, Z+3	; 0x03
    2152:	a4 81       	ldd	r26, Z+4	; 0x04
    2154:	b5 81       	ldd	r27, Z+5	; 0x05
    2156:	80 93 84 18 	sts	0x1884, r24	; 0x801884 <xNextTaskUnblockTime>
    215a:	90 93 85 18 	sts	0x1885, r25	; 0x801885 <xNextTaskUnblockTime+0x1>
    215e:	a0 93 86 18 	sts	0x1886, r26	; 0x801886 <xNextTaskUnblockTime+0x2>
    2162:	b0 93 87 18 	sts	0x1887, r27	; 0x801887 <xNextTaskUnblockTime+0x3>
    2166:	08 95       	ret

00002168 <prvAddCurrentTaskToDelayedList>:
    2168:	8f 92       	push	r8
    216a:	9f 92       	push	r9
    216c:	af 92       	push	r10
    216e:	bf 92       	push	r11
    2170:	cf 92       	push	r12
    2172:	df 92       	push	r13
    2174:	ef 92       	push	r14
    2176:	ff 92       	push	r15
    2178:	cf 93       	push	r28
    217a:	6b 01       	movw	r12, r22
    217c:	7c 01       	movw	r14, r24
    217e:	c4 2f       	mov	r28, r20
    2180:	80 90 8e 18 	lds	r8, 0x188E	; 0x80188e <xTickCount>
    2184:	90 90 8f 18 	lds	r9, 0x188F	; 0x80188f <xTickCount+0x1>
    2188:	a0 90 90 18 	lds	r10, 0x1890	; 0x801890 <xTickCount+0x2>
    218c:	b0 90 91 18 	lds	r11, 0x1891	; 0x801891 <xTickCount+0x3>
    2190:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2194:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2198:	02 96       	adiw	r24, 0x02	; 2
    219a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <uxListRemove>
    219e:	8f ef       	ldi	r24, 0xFF	; 255
    21a0:	c8 16       	cp	r12, r24
    21a2:	d8 06       	cpc	r13, r24
    21a4:	e8 06       	cpc	r14, r24
    21a6:	f8 06       	cpc	r15, r24
    21a8:	69 f4       	brne	.+26     	; 0x21c4 <prvAddCurrentTaskToDelayedList+0x5c>
    21aa:	cc 23       	and	r28, r28
    21ac:	59 f0       	breq	.+22     	; 0x21c4 <prvAddCurrentTaskToDelayedList+0x5c>
    21ae:	60 91 fb 18 	lds	r22, 0x18FB	; 0x8018fb <pxCurrentTCB>
    21b2:	70 91 fc 18 	lds	r23, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    21b6:	6e 5f       	subi	r22, 0xFE	; 254
    21b8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ba:	83 e9       	ldi	r24, 0x93	; 147
    21bc:	98 e1       	ldi	r25, 0x18	; 24
    21be:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInsertEnd>
    21c2:	3f c0       	rjmp	.+126    	; 0x2242 <__stack+0x43>
    21c4:	c8 0c       	add	r12, r8
    21c6:	d9 1c       	adc	r13, r9
    21c8:	ea 1c       	adc	r14, r10
    21ca:	fb 1c       	adc	r15, r11
    21cc:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    21d0:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    21d4:	c2 82       	std	Z+2, r12	; 0x02
    21d6:	d3 82       	std	Z+3, r13	; 0x03
    21d8:	e4 82       	std	Z+4, r14	; 0x04
    21da:	f5 82       	std	Z+5, r15	; 0x05
    21dc:	c8 14       	cp	r12, r8
    21de:	d9 04       	cpc	r13, r9
    21e0:	ea 04       	cpc	r14, r10
    21e2:	fb 04       	cpc	r15, r11
    21e4:	68 f4       	brcc	.+26     	; 0x2200 <__stack+0x1>
    21e6:	60 91 fb 18 	lds	r22, 0x18FB	; 0x8018fb <pxCurrentTCB>
    21ea:	70 91 fc 18 	lds	r23, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    21ee:	80 91 b5 18 	lds	r24, 0x18B5	; 0x8018b5 <pxOverflowDelayedTaskList>
    21f2:	90 91 b6 18 	lds	r25, 0x18B6	; 0x8018b6 <pxOverflowDelayedTaskList+0x1>
    21f6:	6e 5f       	subi	r22, 0xFE	; 254
    21f8:	7f 4f       	sbci	r23, 0xFF	; 255
    21fa:	0e 94 14 08 	call	0x1028	; 0x1028 <vListInsert>
    21fe:	21 c0       	rjmp	.+66     	; 0x2242 <__stack+0x43>
    2200:	60 91 fb 18 	lds	r22, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2204:	70 91 fc 18 	lds	r23, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2208:	80 91 b7 18 	lds	r24, 0x18B7	; 0x8018b7 <pxDelayedTaskList>
    220c:	90 91 b8 18 	lds	r25, 0x18B8	; 0x8018b8 <pxDelayedTaskList+0x1>
    2210:	6e 5f       	subi	r22, 0xFE	; 254
    2212:	7f 4f       	sbci	r23, 0xFF	; 255
    2214:	0e 94 14 08 	call	0x1028	; 0x1028 <vListInsert>
    2218:	80 91 84 18 	lds	r24, 0x1884	; 0x801884 <xNextTaskUnblockTime>
    221c:	90 91 85 18 	lds	r25, 0x1885	; 0x801885 <xNextTaskUnblockTime+0x1>
    2220:	a0 91 86 18 	lds	r26, 0x1886	; 0x801886 <xNextTaskUnblockTime+0x2>
    2224:	b0 91 87 18 	lds	r27, 0x1887	; 0x801887 <xNextTaskUnblockTime+0x3>
    2228:	c8 16       	cp	r12, r24
    222a:	d9 06       	cpc	r13, r25
    222c:	ea 06       	cpc	r14, r26
    222e:	fb 06       	cpc	r15, r27
    2230:	40 f4       	brcc	.+16     	; 0x2242 <__stack+0x43>
    2232:	c0 92 84 18 	sts	0x1884, r12	; 0x801884 <xNextTaskUnblockTime>
    2236:	d0 92 85 18 	sts	0x1885, r13	; 0x801885 <xNextTaskUnblockTime+0x1>
    223a:	e0 92 86 18 	sts	0x1886, r14	; 0x801886 <xNextTaskUnblockTime+0x2>
    223e:	f0 92 87 18 	sts	0x1887, r15	; 0x801887 <xNextTaskUnblockTime+0x3>
    2242:	cf 91       	pop	r28
    2244:	ff 90       	pop	r15
    2246:	ef 90       	pop	r14
    2248:	df 90       	pop	r13
    224a:	cf 90       	pop	r12
    224c:	bf 90       	pop	r11
    224e:	af 90       	pop	r10
    2250:	9f 90       	pop	r9
    2252:	8f 90       	pop	r8
    2254:	08 95       	ret

00002256 <xTaskCreate>:
    2256:	4f 92       	push	r4
    2258:	5f 92       	push	r5
    225a:	6f 92       	push	r6
    225c:	7f 92       	push	r7
    225e:	8f 92       	push	r8
    2260:	9f 92       	push	r9
    2262:	af 92       	push	r10
    2264:	bf 92       	push	r11
    2266:	cf 92       	push	r12
    2268:	df 92       	push	r13
    226a:	ef 92       	push	r14
    226c:	ff 92       	push	r15
    226e:	0f 93       	push	r16
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	4c 01       	movw	r8, r24
    2276:	6b 01       	movw	r12, r22
    2278:	5a 01       	movw	r10, r20
    227a:	29 01       	movw	r4, r18
    227c:	ca 01       	movw	r24, r20
    227e:	0e 94 f4 06 	call	0xde8	; 0xde8 <pvPortMalloc>
    2282:	3c 01       	movw	r6, r24
    2284:	89 2b       	or	r24, r25
    2286:	09 f4       	brne	.+2      	; 0x228a <xTaskCreate+0x34>
    2288:	f4 c0       	rjmp	.+488    	; 0x2472 <xTaskCreate+0x21c>
    228a:	80 e3       	ldi	r24, 0x30	; 48
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0e 94 f4 06 	call	0xde8	; 0xde8 <pvPortMalloc>
    2292:	ec 01       	movw	r28, r24
    2294:	89 2b       	or	r24, r25
    2296:	99 f0       	breq	.+38     	; 0x22be <xTaskCreate+0x68>
    2298:	7c 8e       	std	Y+28, r7	; 0x1c
    229a:	6b 8e       	std	Y+27, r6	; 0x1b
    229c:	a5 01       	movw	r20, r10
    229e:	65 ea       	ldi	r22, 0xA5	; 165
    22a0:	70 e0       	ldi	r23, 0x00	; 0
    22a2:	c3 01       	movw	r24, r6
    22a4:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <memset>
    22a8:	21 e0       	ldi	r18, 0x01	; 1
    22aa:	a2 1a       	sub	r10, r18
    22ac:	b1 08       	sbc	r11, r1
    22ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22b2:	a8 0e       	add	r10, r24
    22b4:	b9 1e       	adc	r11, r25
    22b6:	c1 14       	cp	r12, r1
    22b8:	d1 04       	cpc	r13, r1
    22ba:	29 f4       	brne	.+10     	; 0x22c6 <xTaskCreate+0x70>
    22bc:	20 c0       	rjmp	.+64     	; 0x22fe <xTaskCreate+0xa8>
    22be:	c3 01       	movw	r24, r6
    22c0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <vPortFree>
    22c4:	d6 c0       	rjmp	.+428    	; 0x2472 <xTaskCreate+0x21c>
    22c6:	d6 01       	movw	r26, r12
    22c8:	8c 91       	ld	r24, X
    22ca:	8d 8f       	std	Y+29, r24	; 0x1d
    22cc:	8c 91       	ld	r24, X
    22ce:	88 23       	and	r24, r24
    22d0:	a1 f0       	breq	.+40     	; 0x22fa <xTaskCreate+0xa4>
    22d2:	ae 01       	movw	r20, r28
    22d4:	42 5e       	subi	r20, 0xE2	; 226
    22d6:	5f 4f       	sbci	r21, 0xFF	; 255
    22d8:	f6 01       	movw	r30, r12
    22da:	31 96       	adiw	r30, 0x01	; 1
    22dc:	b8 e0       	ldi	r27, 0x08	; 8
    22de:	cb 0e       	add	r12, r27
    22e0:	d1 1c       	adc	r13, r1
    22e2:	cf 01       	movw	r24, r30
    22e4:	21 91       	ld	r18, Z+
    22e6:	da 01       	movw	r26, r20
    22e8:	2d 93       	st	X+, r18
    22ea:	ad 01       	movw	r20, r26
    22ec:	dc 01       	movw	r26, r24
    22ee:	8c 91       	ld	r24, X
    22f0:	88 23       	and	r24, r24
    22f2:	19 f0       	breq	.+6      	; 0x22fa <xTaskCreate+0xa4>
    22f4:	ec 15       	cp	r30, r12
    22f6:	fd 05       	cpc	r31, r13
    22f8:	a1 f7       	brne	.-24     	; 0x22e2 <xTaskCreate+0x8c>
    22fa:	1c a2       	std	Y+36, r1	; 0x24
    22fc:	01 c0       	rjmp	.+2      	; 0x2300 <xTaskCreate+0xaa>
    22fe:	1d 8e       	std	Y+29, r1	; 0x1d
    2300:	04 30       	cpi	r16, 0x04	; 4
    2302:	08 f0       	brcs	.+2      	; 0x2306 <xTaskCreate+0xb0>
    2304:	03 e0       	ldi	r16, 0x03	; 3
    2306:	0a 8f       	std	Y+26, r16	; 0x1a
    2308:	0f a3       	std	Y+39, r16	; 0x27
    230a:	18 a6       	std	Y+40, r1	; 0x28
    230c:	6e 01       	movw	r12, r28
    230e:	b2 e0       	ldi	r27, 0x02	; 2
    2310:	cb 0e       	add	r12, r27
    2312:	d1 1c       	adc	r13, r1
    2314:	c6 01       	movw	r24, r12
    2316:	0e 94 ef 07 	call	0xfde	; 0xfde <vListInitialiseItem>
    231a:	ce 01       	movw	r24, r28
    231c:	0e 96       	adiw	r24, 0x0e	; 14
    231e:	0e 94 ef 07 	call	0xfde	; 0xfde <vListInitialiseItem>
    2322:	db 87       	std	Y+11, r29	; 0x0b
    2324:	ca 87       	std	Y+10, r28	; 0x0a
    2326:	84 e0       	ldi	r24, 0x04	; 4
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	a0 e0       	ldi	r26, 0x00	; 0
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	80 1b       	sub	r24, r16
    2330:	91 09       	sbc	r25, r1
    2332:	a1 09       	sbc	r26, r1
    2334:	b1 09       	sbc	r27, r1
    2336:	8e 87       	std	Y+14, r24	; 0x0e
    2338:	9f 87       	std	Y+15, r25	; 0x0f
    233a:	a8 8b       	std	Y+16, r26	; 0x10
    233c:	b9 8b       	std	Y+17, r27	; 0x11
    233e:	df 8b       	std	Y+23, r29	; 0x17
    2340:	ce 8b       	std	Y+22, r28	; 0x16
    2342:	1a a6       	std	Y+42, r1	; 0x2a
    2344:	19 a6       	std	Y+41, r1	; 0x29
    2346:	1b a6       	std	Y+43, r1	; 0x2b
    2348:	1c a6       	std	Y+44, r1	; 0x2c
    234a:	1d a6       	std	Y+45, r1	; 0x2d
    234c:	1e a6       	std	Y+46, r1	; 0x2e
    234e:	1f a6       	std	Y+47, r1	; 0x2f
    2350:	a2 01       	movw	r20, r4
    2352:	b4 01       	movw	r22, r8
    2354:	c5 01       	movw	r24, r10
    2356:	0e 94 78 08 	call	0x10f0	; 0x10f0 <pxPortInitialiseStack>
    235a:	99 83       	std	Y+1, r25	; 0x01
    235c:	88 83       	st	Y, r24
    235e:	e1 14       	cp	r14, r1
    2360:	f1 04       	cpc	r15, r1
    2362:	19 f0       	breq	.+6      	; 0x236a <xTaskCreate+0x114>
    2364:	f7 01       	movw	r30, r14
    2366:	d1 83       	std	Z+1, r29	; 0x01
    2368:	c0 83       	st	Z, r28
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	0f 92       	push	r0
    2370:	80 91 92 18 	lds	r24, 0x1892	; 0x801892 <uxCurrentNumberOfTasks>
    2374:	8f 5f       	subi	r24, 0xFF	; 255
    2376:	80 93 92 18 	sts	0x1892, r24	; 0x801892 <uxCurrentNumberOfTasks>
    237a:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <pxCurrentTCB>
    237e:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2382:	89 2b       	or	r24, r25
    2384:	d1 f5       	brne	.+116    	; 0x23fa <xTaskCreate+0x1a4>
    2386:	d0 93 fc 18 	sts	0x18FC, r29	; 0x8018fc <pxCurrentTCB+0x1>
    238a:	c0 93 fb 18 	sts	0x18FB, r28	; 0x8018fb <pxCurrentTCB>
    238e:	80 91 92 18 	lds	r24, 0x1892	; 0x801892 <uxCurrentNumberOfTasks>
    2392:	81 30       	cpi	r24, 0x01	; 1
    2394:	09 f0       	breq	.+2      	; 0x2398 <xTaskCreate+0x142>
    2396:	41 c0       	rjmp	.+130    	; 0x241a <xTaskCreate+0x1c4>
    2398:	8f ec       	ldi	r24, 0xCF	; 207
    239a:	98 e1       	ldi	r25, 0x18	; 24
    239c:	0e 94 de 07 	call	0xfbc	; 0xfbc <vListInitialise>
    23a0:	8a ed       	ldi	r24, 0xDA	; 218
    23a2:	98 e1       	ldi	r25, 0x18	; 24
    23a4:	0e 94 de 07 	call	0xfbc	; 0xfbc <vListInitialise>
    23a8:	85 ee       	ldi	r24, 0xE5	; 229
    23aa:	98 e1       	ldi	r25, 0x18	; 24
    23ac:	0e 94 de 07 	call	0xfbc	; 0xfbc <vListInitialise>
    23b0:	80 ef       	ldi	r24, 0xF0	; 240
    23b2:	98 e1       	ldi	r25, 0x18	; 24
    23b4:	0e 94 de 07 	call	0xfbc	; 0xfbc <vListInitialise>
    23b8:	84 ec       	ldi	r24, 0xC4	; 196
    23ba:	98 e1       	ldi	r25, 0x18	; 24
    23bc:	0e 94 de 07 	call	0xfbc	; 0xfbc <vListInitialise>
    23c0:	89 eb       	ldi	r24, 0xB9	; 185
    23c2:	98 e1       	ldi	r25, 0x18	; 24
    23c4:	0e 94 de 07 	call	0xfbc	; 0xfbc <vListInitialise>
    23c8:	8a ea       	ldi	r24, 0xAA	; 170
    23ca:	98 e1       	ldi	r25, 0x18	; 24
    23cc:	0e 94 de 07 	call	0xfbc	; 0xfbc <vListInitialise>
    23d0:	8f e9       	ldi	r24, 0x9F	; 159
    23d2:	98 e1       	ldi	r25, 0x18	; 24
    23d4:	0e 94 de 07 	call	0xfbc	; 0xfbc <vListInitialise>
    23d8:	83 e9       	ldi	r24, 0x93	; 147
    23da:	98 e1       	ldi	r25, 0x18	; 24
    23dc:	0e 94 de 07 	call	0xfbc	; 0xfbc <vListInitialise>
    23e0:	84 ec       	ldi	r24, 0xC4	; 196
    23e2:	98 e1       	ldi	r25, 0x18	; 24
    23e4:	90 93 b8 18 	sts	0x18B8, r25	; 0x8018b8 <pxDelayedTaskList+0x1>
    23e8:	80 93 b7 18 	sts	0x18B7, r24	; 0x8018b7 <pxDelayedTaskList>
    23ec:	89 eb       	ldi	r24, 0xB9	; 185
    23ee:	98 e1       	ldi	r25, 0x18	; 24
    23f0:	90 93 b6 18 	sts	0x18B6, r25	; 0x8018b6 <pxOverflowDelayedTaskList+0x1>
    23f4:	80 93 b5 18 	sts	0x18B5, r24	; 0x8018b5 <pxOverflowDelayedTaskList>
    23f8:	10 c0       	rjmp	.+32     	; 0x241a <xTaskCreate+0x1c4>
    23fa:	80 91 8c 18 	lds	r24, 0x188C	; 0x80188c <xSchedulerRunning>
    23fe:	81 11       	cpse	r24, r1
    2400:	0c c0       	rjmp	.+24     	; 0x241a <xTaskCreate+0x1c4>
    2402:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2406:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    240a:	92 8d       	ldd	r25, Z+26	; 0x1a
    240c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    240e:	89 17       	cp	r24, r25
    2410:	20 f0       	brcs	.+8      	; 0x241a <xTaskCreate+0x1c4>
    2412:	d0 93 fc 18 	sts	0x18FC, r29	; 0x8018fc <pxCurrentTCB+0x1>
    2416:	c0 93 fb 18 	sts	0x18FB, r28	; 0x8018fb <pxCurrentTCB>
    241a:	80 91 88 18 	lds	r24, 0x1888	; 0x801888 <uxTaskNumber>
    241e:	8f 5f       	subi	r24, 0xFF	; 255
    2420:	80 93 88 18 	sts	0x1888, r24	; 0x801888 <uxTaskNumber>
    2424:	8d a3       	std	Y+37, r24	; 0x25
    2426:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2428:	90 91 8d 18 	lds	r25, 0x188D	; 0x80188d <uxTopReadyPriority>
    242c:	98 17       	cp	r25, r24
    242e:	10 f4       	brcc	.+4      	; 0x2434 <xTaskCreate+0x1de>
    2430:	80 93 8d 18 	sts	0x188D, r24	; 0x80188d <uxTopReadyPriority>
    2434:	fb e0       	ldi	r31, 0x0B	; 11
    2436:	8f 9f       	mul	r24, r31
    2438:	c0 01       	movw	r24, r0
    243a:	11 24       	eor	r1, r1
    243c:	b6 01       	movw	r22, r12
    243e:	81 53       	subi	r24, 0x31	; 49
    2440:	97 4e       	sbci	r25, 0xE7	; 231
    2442:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInsertEnd>
    2446:	0f 90       	pop	r0
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	80 91 8c 18 	lds	r24, 0x188C	; 0x80188c <xSchedulerRunning>
    244e:	88 23       	and	r24, r24
    2450:	61 f0       	breq	.+24     	; 0x246a <xTaskCreate+0x214>
    2452:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2456:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    245a:	92 8d       	ldd	r25, Z+26	; 0x1a
    245c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    245e:	98 17       	cp	r25, r24
    2460:	30 f4       	brcc	.+12     	; 0x246e <xTaskCreate+0x218>
    2462:	0e 94 26 09 	call	0x124c	; 0x124c <vPortYield>
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	05 c0       	rjmp	.+10     	; 0x2474 <xTaskCreate+0x21e>
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	03 c0       	rjmp	.+6      	; 0x2474 <xTaskCreate+0x21e>
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <xTaskCreate+0x21e>
    2472:	8f ef       	ldi	r24, 0xFF	; 255
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	0f 91       	pop	r16
    247a:	ff 90       	pop	r15
    247c:	ef 90       	pop	r14
    247e:	df 90       	pop	r13
    2480:	cf 90       	pop	r12
    2482:	bf 90       	pop	r11
    2484:	af 90       	pop	r10
    2486:	9f 90       	pop	r9
    2488:	8f 90       	pop	r8
    248a:	7f 90       	pop	r7
    248c:	6f 90       	pop	r6
    248e:	5f 90       	pop	r5
    2490:	4f 90       	pop	r4
    2492:	08 95       	ret

00002494 <vTaskStartScheduler>:
    2494:	ef 92       	push	r14
    2496:	ff 92       	push	r15
    2498:	0f 93       	push	r16
    249a:	0f 2e       	mov	r0, r31
    249c:	f2 e8       	ldi	r31, 0x82	; 130
    249e:	ef 2e       	mov	r14, r31
    24a0:	f8 e1       	ldi	r31, 0x18	; 24
    24a2:	ff 2e       	mov	r15, r31
    24a4:	f0 2d       	mov	r31, r0
    24a6:	00 e0       	ldi	r16, 0x00	; 0
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 ec       	ldi	r20, 0xC0	; 192
    24ae:	50 e0       	ldi	r21, 0x00	; 0
    24b0:	67 e2       	ldi	r22, 0x27	; 39
    24b2:	74 e0       	ldi	r23, 0x04	; 4
    24b4:	8d ec       	ldi	r24, 0xCD	; 205
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	ce de       	rcall	.-612    	; 0x2256 <xTaskCreate>
    24ba:	81 30       	cpi	r24, 0x01	; 1
    24bc:	19 f5       	brne	.+70     	; 0x2504 <vTaskStartScheduler+0x70>
    24be:	2a d7       	rcall	.+3668   	; 0x3314 <xTimerCreateTimerTask>
    24c0:	81 30       	cpi	r24, 0x01	; 1
    24c2:	01 f5       	brne	.+64     	; 0x2504 <vTaskStartScheduler+0x70>
    24c4:	f8 94       	cli
    24c6:	8f ef       	ldi	r24, 0xFF	; 255
    24c8:	9f ef       	ldi	r25, 0xFF	; 255
    24ca:	dc 01       	movw	r26, r24
    24cc:	80 93 84 18 	sts	0x1884, r24	; 0x801884 <xNextTaskUnblockTime>
    24d0:	90 93 85 18 	sts	0x1885, r25	; 0x801885 <xNextTaskUnblockTime+0x1>
    24d4:	a0 93 86 18 	sts	0x1886, r26	; 0x801886 <xNextTaskUnblockTime+0x2>
    24d8:	b0 93 87 18 	sts	0x1887, r27	; 0x801887 <xNextTaskUnblockTime+0x3>
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	80 93 8c 18 	sts	0x188C, r24	; 0x80188c <xSchedulerRunning>
    24e2:	10 92 8e 18 	sts	0x188E, r1	; 0x80188e <xTickCount>
    24e6:	10 92 8f 18 	sts	0x188F, r1	; 0x80188f <xTickCount+0x1>
    24ea:	10 92 90 18 	sts	0x1890, r1	; 0x801890 <xTickCount+0x2>
    24ee:	10 92 91 18 	sts	0x1891, r1	; 0x801891 <xTickCount+0x3>
    24f2:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    24f6:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    24fa:	81 a5       	ldd	r24, Z+41	; 0x29
    24fc:	0e 94 2b 05 	call	0xa56	; 0xa56 <task_switch_in>
    2500:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <xPortStartScheduler>
    2504:	0f 91       	pop	r16
    2506:	ff 90       	pop	r15
    2508:	ef 90       	pop	r14
    250a:	08 95       	ret

0000250c <vTaskSuspendAll>:
    250c:	80 91 81 18 	lds	r24, 0x1881	; 0x801881 <uxSchedulerSuspended>
    2510:	8f 5f       	subi	r24, 0xFF	; 255
    2512:	80 93 81 18 	sts	0x1881, r24	; 0x801881 <uxSchedulerSuspended>
    2516:	08 95       	ret

00002518 <xTaskGetTickCount>:
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	0f 92       	push	r0
    251e:	60 91 8e 18 	lds	r22, 0x188E	; 0x80188e <xTickCount>
    2522:	70 91 8f 18 	lds	r23, 0x188F	; 0x80188f <xTickCount+0x1>
    2526:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <xTickCount+0x2>
    252a:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <xTickCount+0x3>
    252e:	0f 90       	pop	r0
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	08 95       	ret

00002534 <xTaskIncrementTick>:
    2534:	9f 92       	push	r9
    2536:	af 92       	push	r10
    2538:	bf 92       	push	r11
    253a:	cf 92       	push	r12
    253c:	df 92       	push	r13
    253e:	ef 92       	push	r14
    2540:	ff 92       	push	r15
    2542:	0f 93       	push	r16
    2544:	1f 93       	push	r17
    2546:	cf 93       	push	r28
    2548:	df 93       	push	r29
    254a:	80 91 81 18 	lds	r24, 0x1881	; 0x801881 <uxSchedulerSuspended>
    254e:	81 11       	cpse	r24, r1
    2550:	ad c0       	rjmp	.+346    	; 0x26ac <xTaskIncrementTick+0x178>
    2552:	c0 90 8e 18 	lds	r12, 0x188E	; 0x80188e <xTickCount>
    2556:	d0 90 8f 18 	lds	r13, 0x188F	; 0x80188f <xTickCount+0x1>
    255a:	e0 90 90 18 	lds	r14, 0x1890	; 0x801890 <xTickCount+0x2>
    255e:	f0 90 91 18 	lds	r15, 0x1891	; 0x801891 <xTickCount+0x3>
    2562:	8f ef       	ldi	r24, 0xFF	; 255
    2564:	c8 1a       	sub	r12, r24
    2566:	d8 0a       	sbc	r13, r24
    2568:	e8 0a       	sbc	r14, r24
    256a:	f8 0a       	sbc	r15, r24
    256c:	c0 92 8e 18 	sts	0x188E, r12	; 0x80188e <xTickCount>
    2570:	d0 92 8f 18 	sts	0x188F, r13	; 0x80188f <xTickCount+0x1>
    2574:	e0 92 90 18 	sts	0x1890, r14	; 0x801890 <xTickCount+0x2>
    2578:	f0 92 91 18 	sts	0x1891, r15	; 0x801891 <xTickCount+0x3>
    257c:	c1 14       	cp	r12, r1
    257e:	d1 04       	cpc	r13, r1
    2580:	e1 04       	cpc	r14, r1
    2582:	f1 04       	cpc	r15, r1
    2584:	b1 f4       	brne	.+44     	; 0x25b2 <xTaskIncrementTick+0x7e>
    2586:	80 91 b7 18 	lds	r24, 0x18B7	; 0x8018b7 <pxDelayedTaskList>
    258a:	90 91 b8 18 	lds	r25, 0x18B8	; 0x8018b8 <pxDelayedTaskList+0x1>
    258e:	20 91 b5 18 	lds	r18, 0x18B5	; 0x8018b5 <pxOverflowDelayedTaskList>
    2592:	30 91 b6 18 	lds	r19, 0x18B6	; 0x8018b6 <pxOverflowDelayedTaskList+0x1>
    2596:	30 93 b8 18 	sts	0x18B8, r19	; 0x8018b8 <pxDelayedTaskList+0x1>
    259a:	20 93 b7 18 	sts	0x18B7, r18	; 0x8018b7 <pxDelayedTaskList>
    259e:	90 93 b6 18 	sts	0x18B6, r25	; 0x8018b6 <pxOverflowDelayedTaskList+0x1>
    25a2:	80 93 b5 18 	sts	0x18B5, r24	; 0x8018b5 <pxOverflowDelayedTaskList>
    25a6:	80 91 89 18 	lds	r24, 0x1889	; 0x801889 <xNumOfOverflows>
    25aa:	8f 5f       	subi	r24, 0xFF	; 255
    25ac:	80 93 89 18 	sts	0x1889, r24	; 0x801889 <xNumOfOverflows>
    25b0:	b1 dd       	rcall	.-1182   	; 0x2114 <prvResetNextTaskUnblockTime>
    25b2:	80 91 84 18 	lds	r24, 0x1884	; 0x801884 <xNextTaskUnblockTime>
    25b6:	90 91 85 18 	lds	r25, 0x1885	; 0x801885 <xNextTaskUnblockTime+0x1>
    25ba:	a0 91 86 18 	lds	r26, 0x1886	; 0x801886 <xNextTaskUnblockTime+0x2>
    25be:	b0 91 87 18 	lds	r27, 0x1887	; 0x801887 <xNextTaskUnblockTime+0x3>
    25c2:	c8 16       	cp	r12, r24
    25c4:	d9 06       	cpc	r13, r25
    25c6:	ea 06       	cpc	r14, r26
    25c8:	fb 06       	cpc	r15, r27
    25ca:	10 f4       	brcc	.+4      	; 0x25d0 <xTaskIncrementTick+0x9c>
    25cc:	b1 2c       	mov	r11, r1
    25ce:	5d c0       	rjmp	.+186    	; 0x268a <xTaskIncrementTick+0x156>
    25d0:	b1 2c       	mov	r11, r1
    25d2:	0f 2e       	mov	r0, r31
    25d4:	fb e0       	ldi	r31, 0x0B	; 11
    25d6:	af 2e       	mov	r10, r31
    25d8:	f0 2d       	mov	r31, r0
    25da:	99 24       	eor	r9, r9
    25dc:	93 94       	inc	r9
    25de:	e0 91 b7 18 	lds	r30, 0x18B7	; 0x8018b7 <pxDelayedTaskList>
    25e2:	f0 91 b8 18 	lds	r31, 0x18B8	; 0x8018b8 <pxDelayedTaskList+0x1>
    25e6:	80 81       	ld	r24, Z
    25e8:	81 11       	cpse	r24, r1
    25ea:	0c c0       	rjmp	.+24     	; 0x2604 <xTaskIncrementTick+0xd0>
    25ec:	8f ef       	ldi	r24, 0xFF	; 255
    25ee:	9f ef       	ldi	r25, 0xFF	; 255
    25f0:	dc 01       	movw	r26, r24
    25f2:	80 93 84 18 	sts	0x1884, r24	; 0x801884 <xNextTaskUnblockTime>
    25f6:	90 93 85 18 	sts	0x1885, r25	; 0x801885 <xNextTaskUnblockTime+0x1>
    25fa:	a0 93 86 18 	sts	0x1886, r26	; 0x801886 <xNextTaskUnblockTime+0x2>
    25fe:	b0 93 87 18 	sts	0x1887, r27	; 0x801887 <xNextTaskUnblockTime+0x3>
    2602:	43 c0       	rjmp	.+134    	; 0x268a <xTaskIncrementTick+0x156>
    2604:	e0 91 b7 18 	lds	r30, 0x18B7	; 0x8018b7 <pxDelayedTaskList>
    2608:	f0 91 b8 18 	lds	r31, 0x18B8	; 0x8018b8 <pxDelayedTaskList+0x1>
    260c:	07 80       	ldd	r0, Z+7	; 0x07
    260e:	f0 85       	ldd	r31, Z+8	; 0x08
    2610:	e0 2d       	mov	r30, r0
    2612:	c0 85       	ldd	r28, Z+8	; 0x08
    2614:	d1 85       	ldd	r29, Z+9	; 0x09
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	9b 81       	ldd	r25, Y+3	; 0x03
    261a:	ac 81       	ldd	r26, Y+4	; 0x04
    261c:	bd 81       	ldd	r27, Y+5	; 0x05
    261e:	c8 16       	cp	r12, r24
    2620:	d9 06       	cpc	r13, r25
    2622:	ea 06       	cpc	r14, r26
    2624:	fb 06       	cpc	r15, r27
    2626:	48 f4       	brcc	.+18     	; 0x263a <xTaskIncrementTick+0x106>
    2628:	80 93 84 18 	sts	0x1884, r24	; 0x801884 <xNextTaskUnblockTime>
    262c:	90 93 85 18 	sts	0x1885, r25	; 0x801885 <xNextTaskUnblockTime+0x1>
    2630:	a0 93 86 18 	sts	0x1886, r26	; 0x801886 <xNextTaskUnblockTime+0x2>
    2634:	b0 93 87 18 	sts	0x1887, r27	; 0x801887 <xNextTaskUnblockTime+0x3>
    2638:	28 c0       	rjmp	.+80     	; 0x268a <xTaskIncrementTick+0x156>
    263a:	8e 01       	movw	r16, r28
    263c:	0e 5f       	subi	r16, 0xFE	; 254
    263e:	1f 4f       	sbci	r17, 0xFF	; 255
    2640:	c8 01       	movw	r24, r16
    2642:	0e 94 51 08 	call	0x10a2	; 0x10a2 <uxListRemove>
    2646:	88 8d       	ldd	r24, Y+24	; 0x18
    2648:	99 8d       	ldd	r25, Y+25	; 0x19
    264a:	89 2b       	or	r24, r25
    264c:	21 f0       	breq	.+8      	; 0x2656 <xTaskIncrementTick+0x122>
    264e:	ce 01       	movw	r24, r28
    2650:	0e 96       	adiw	r24, 0x0e	; 14
    2652:	0e 94 51 08 	call	0x10a2	; 0x10a2 <uxListRemove>
    2656:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2658:	90 91 8d 18 	lds	r25, 0x188D	; 0x80188d <uxTopReadyPriority>
    265c:	98 17       	cp	r25, r24
    265e:	10 f4       	brcc	.+4      	; 0x2664 <xTaskIncrementTick+0x130>
    2660:	80 93 8d 18 	sts	0x188D, r24	; 0x80188d <uxTopReadyPriority>
    2664:	a8 9e       	mul	r10, r24
    2666:	c0 01       	movw	r24, r0
    2668:	11 24       	eor	r1, r1
    266a:	b8 01       	movw	r22, r16
    266c:	81 53       	subi	r24, 0x31	; 49
    266e:	97 4e       	sbci	r25, 0xE7	; 231
    2670:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInsertEnd>
    2674:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2678:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    267c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    267e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2680:	98 17       	cp	r25, r24
    2682:	08 f4       	brcc	.+2      	; 0x2686 <xTaskIncrementTick+0x152>
    2684:	ac cf       	rjmp	.-168    	; 0x25de <xTaskIncrementTick+0xaa>
    2686:	b9 2c       	mov	r11, r9
    2688:	aa cf       	rjmp	.-172    	; 0x25de <xTaskIncrementTick+0xaa>
    268a:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    268e:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2692:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2694:	8b e0       	ldi	r24, 0x0B	; 11
    2696:	e8 9f       	mul	r30, r24
    2698:	f0 01       	movw	r30, r0
    269a:	11 24       	eor	r1, r1
    269c:	e1 53       	subi	r30, 0x31	; 49
    269e:	f7 4e       	sbci	r31, 0xE7	; 231
    26a0:	80 81       	ld	r24, Z
    26a2:	82 30       	cpi	r24, 0x02	; 2
    26a4:	48 f0       	brcs	.+18     	; 0x26b8 <xTaskIncrementTick+0x184>
    26a6:	bb 24       	eor	r11, r11
    26a8:	b3 94       	inc	r11
    26aa:	06 c0       	rjmp	.+12     	; 0x26b8 <xTaskIncrementTick+0x184>
    26ac:	80 91 8b 18 	lds	r24, 0x188B	; 0x80188b <uxPendedTicks>
    26b0:	8f 5f       	subi	r24, 0xFF	; 255
    26b2:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <uxPendedTicks>
    26b6:	b1 2c       	mov	r11, r1
    26b8:	80 91 8a 18 	lds	r24, 0x188A	; 0x80188a <xYieldPending>
    26bc:	88 23       	and	r24, r24
    26be:	11 f0       	breq	.+4      	; 0x26c4 <xTaskIncrementTick+0x190>
    26c0:	bb 24       	eor	r11, r11
    26c2:	b3 94       	inc	r11
    26c4:	8b 2d       	mov	r24, r11
    26c6:	df 91       	pop	r29
    26c8:	cf 91       	pop	r28
    26ca:	1f 91       	pop	r17
    26cc:	0f 91       	pop	r16
    26ce:	ff 90       	pop	r15
    26d0:	ef 90       	pop	r14
    26d2:	df 90       	pop	r13
    26d4:	cf 90       	pop	r12
    26d6:	bf 90       	pop	r11
    26d8:	af 90       	pop	r10
    26da:	9f 90       	pop	r9
    26dc:	08 95       	ret

000026de <xTaskResumeAll>:
    26de:	cf 92       	push	r12
    26e0:	df 92       	push	r13
    26e2:	ef 92       	push	r14
    26e4:	ff 92       	push	r15
    26e6:	0f 93       	push	r16
    26e8:	1f 93       	push	r17
    26ea:	cf 93       	push	r28
    26ec:	df 93       	push	r29
    26ee:	0f b6       	in	r0, 0x3f	; 63
    26f0:	f8 94       	cli
    26f2:	0f 92       	push	r0
    26f4:	80 91 81 18 	lds	r24, 0x1881	; 0x801881 <uxSchedulerSuspended>
    26f8:	81 50       	subi	r24, 0x01	; 1
    26fa:	80 93 81 18 	sts	0x1881, r24	; 0x801881 <uxSchedulerSuspended>
    26fe:	80 91 81 18 	lds	r24, 0x1881	; 0x801881 <uxSchedulerSuspended>
    2702:	81 11       	cpse	r24, r1
    2704:	5a c0       	rjmp	.+180    	; 0x27ba <xTaskResumeAll+0xdc>
    2706:	80 91 92 18 	lds	r24, 0x1892	; 0x801892 <uxCurrentNumberOfTasks>
    270a:	81 11       	cpse	r24, r1
    270c:	2c c0       	rjmp	.+88     	; 0x2766 <xTaskResumeAll+0x88>
    270e:	58 c0       	rjmp	.+176    	; 0x27c0 <xTaskResumeAll+0xe2>
    2710:	d7 01       	movw	r26, r14
    2712:	17 96       	adiw	r26, 0x07	; 7
    2714:	ed 91       	ld	r30, X+
    2716:	fc 91       	ld	r31, X
    2718:	18 97       	sbiw	r26, 0x08	; 8
    271a:	c0 85       	ldd	r28, Z+8	; 0x08
    271c:	d1 85       	ldd	r29, Z+9	; 0x09
    271e:	ce 01       	movw	r24, r28
    2720:	0e 96       	adiw	r24, 0x0e	; 14
    2722:	0e 94 51 08 	call	0x10a2	; 0x10a2 <uxListRemove>
    2726:	8e 01       	movw	r16, r28
    2728:	0e 5f       	subi	r16, 0xFE	; 254
    272a:	1f 4f       	sbci	r17, 0xFF	; 255
    272c:	c8 01       	movw	r24, r16
    272e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <uxListRemove>
    2732:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2734:	90 91 8d 18 	lds	r25, 0x188D	; 0x80188d <uxTopReadyPriority>
    2738:	98 17       	cp	r25, r24
    273a:	10 f4       	brcc	.+4      	; 0x2740 <xTaskResumeAll+0x62>
    273c:	80 93 8d 18 	sts	0x188D, r24	; 0x80188d <uxTopReadyPriority>
    2740:	d8 9e       	mul	r13, r24
    2742:	c0 01       	movw	r24, r0
    2744:	11 24       	eor	r1, r1
    2746:	b8 01       	movw	r22, r16
    2748:	81 53       	subi	r24, 0x31	; 49
    274a:	97 4e       	sbci	r25, 0xE7	; 231
    274c:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInsertEnd>
    2750:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2754:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2758:	9a 8d       	ldd	r25, Y+26	; 0x1a
    275a:	82 8d       	ldd	r24, Z+26	; 0x1a
    275c:	98 17       	cp	r25, r24
    275e:	88 f0       	brcs	.+34     	; 0x2782 <xTaskResumeAll+0xa4>
    2760:	c0 92 8a 18 	sts	0x188A, r12	; 0x80188a <xYieldPending>
    2764:	0e c0       	rjmp	.+28     	; 0x2782 <xTaskResumeAll+0xa4>
    2766:	c0 e0       	ldi	r28, 0x00	; 0
    2768:	d0 e0       	ldi	r29, 0x00	; 0
    276a:	0f 2e       	mov	r0, r31
    276c:	fa ea       	ldi	r31, 0xAA	; 170
    276e:	ef 2e       	mov	r14, r31
    2770:	f8 e1       	ldi	r31, 0x18	; 24
    2772:	ff 2e       	mov	r15, r31
    2774:	f0 2d       	mov	r31, r0
    2776:	0f 2e       	mov	r0, r31
    2778:	fb e0       	ldi	r31, 0x0B	; 11
    277a:	df 2e       	mov	r13, r31
    277c:	f0 2d       	mov	r31, r0
    277e:	cc 24       	eor	r12, r12
    2780:	c3 94       	inc	r12
    2782:	f7 01       	movw	r30, r14
    2784:	80 81       	ld	r24, Z
    2786:	81 11       	cpse	r24, r1
    2788:	c3 cf       	rjmp	.-122    	; 0x2710 <xTaskResumeAll+0x32>
    278a:	cd 2b       	or	r28, r29
    278c:	09 f0       	breq	.+2      	; 0x2790 <xTaskResumeAll+0xb2>
    278e:	c2 dc       	rcall	.-1660   	; 0x2114 <prvResetNextTaskUnblockTime>
    2790:	c0 91 8b 18 	lds	r28, 0x188B	; 0x80188b <uxPendedTicks>
    2794:	cc 23       	and	r28, r28
    2796:	49 f0       	breq	.+18     	; 0x27aa <xTaskResumeAll+0xcc>
    2798:	d1 e0       	ldi	r29, 0x01	; 1
    279a:	cc de       	rcall	.-616    	; 0x2534 <xTaskIncrementTick>
    279c:	81 11       	cpse	r24, r1
    279e:	d0 93 8a 18 	sts	0x188A, r29	; 0x80188a <xYieldPending>
    27a2:	c1 50       	subi	r28, 0x01	; 1
    27a4:	d1 f7       	brne	.-12     	; 0x279a <xTaskResumeAll+0xbc>
    27a6:	10 92 8b 18 	sts	0x188B, r1	; 0x80188b <uxPendedTicks>
    27aa:	80 91 8a 18 	lds	r24, 0x188A	; 0x80188a <xYieldPending>
    27ae:	88 23       	and	r24, r24
    27b0:	31 f0       	breq	.+12     	; 0x27be <xTaskResumeAll+0xe0>
    27b2:	0e 94 26 09 	call	0x124c	; 0x124c <vPortYield>
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	03 c0       	rjmp	.+6      	; 0x27c0 <xTaskResumeAll+0xe2>
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	01 c0       	rjmp	.+2      	; 0x27c0 <xTaskResumeAll+0xe2>
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	0f 90       	pop	r0
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	df 91       	pop	r29
    27c6:	cf 91       	pop	r28
    27c8:	1f 91       	pop	r17
    27ca:	0f 91       	pop	r16
    27cc:	ff 90       	pop	r15
    27ce:	ef 90       	pop	r14
    27d0:	df 90       	pop	r13
    27d2:	cf 90       	pop	r12
    27d4:	08 95       	ret

000027d6 <vTaskDelayUntil>:
    27d6:	cf 92       	push	r12
    27d8:	df 92       	push	r13
    27da:	ef 92       	push	r14
    27dc:	ff 92       	push	r15
    27de:	0f 93       	push	r16
    27e0:	1f 93       	push	r17
    27e2:	cf 93       	push	r28
    27e4:	df 93       	push	r29
    27e6:	ec 01       	movw	r28, r24
    27e8:	6a 01       	movw	r12, r20
    27ea:	7b 01       	movw	r14, r22
    27ec:	8f de       	rcall	.-738    	; 0x250c <vTaskSuspendAll>
    27ee:	00 91 8e 18 	lds	r16, 0x188E	; 0x80188e <xTickCount>
    27f2:	10 91 8f 18 	lds	r17, 0x188F	; 0x80188f <xTickCount+0x1>
    27f6:	20 91 90 18 	lds	r18, 0x1890	; 0x801890 <xTickCount+0x2>
    27fa:	30 91 91 18 	lds	r19, 0x1891	; 0x801891 <xTickCount+0x3>
    27fe:	88 81       	ld	r24, Y
    2800:	99 81       	ldd	r25, Y+1	; 0x01
    2802:	aa 81       	ldd	r26, Y+2	; 0x02
    2804:	bb 81       	ldd	r27, Y+3	; 0x03
    2806:	ac 01       	movw	r20, r24
    2808:	bd 01       	movw	r22, r26
    280a:	4c 0d       	add	r20, r12
    280c:	5d 1d       	adc	r21, r13
    280e:	6e 1d       	adc	r22, r14
    2810:	7f 1d       	adc	r23, r15
    2812:	08 17       	cp	r16, r24
    2814:	19 07       	cpc	r17, r25
    2816:	2a 07       	cpc	r18, r26
    2818:	3b 07       	cpc	r19, r27
    281a:	78 f4       	brcc	.+30     	; 0x283a <vTaskDelayUntil+0x64>
    281c:	48 17       	cp	r20, r24
    281e:	59 07       	cpc	r21, r25
    2820:	6a 07       	cpc	r22, r26
    2822:	7b 07       	cpc	r23, r27
    2824:	40 f5       	brcc	.+80     	; 0x2876 <vTaskDelayUntil+0xa0>
    2826:	48 83       	st	Y, r20
    2828:	59 83       	std	Y+1, r21	; 0x01
    282a:	6a 83       	std	Y+2, r22	; 0x02
    282c:	7b 83       	std	Y+3, r23	; 0x03
    282e:	04 17       	cp	r16, r20
    2830:	15 07       	cpc	r17, r21
    2832:	26 07       	cpc	r18, r22
    2834:	37 07       	cpc	r19, r23
    2836:	a0 f4       	brcc	.+40     	; 0x2860 <vTaskDelayUntil+0x8a>
    2838:	0b c0       	rjmp	.+22     	; 0x2850 <vTaskDelayUntil+0x7a>
    283a:	48 17       	cp	r20, r24
    283c:	59 07       	cpc	r21, r25
    283e:	6a 07       	cpc	r22, r26
    2840:	7b 07       	cpc	r23, r27
    2842:	a0 f0       	brcs	.+40     	; 0x286c <vTaskDelayUntil+0x96>
    2844:	04 17       	cp	r16, r20
    2846:	15 07       	cpc	r17, r21
    2848:	26 07       	cpc	r18, r22
    284a:	37 07       	cpc	r19, r23
    284c:	78 f0       	brcs	.+30     	; 0x286c <vTaskDelayUntil+0x96>
    284e:	13 c0       	rjmp	.+38     	; 0x2876 <vTaskDelayUntil+0xa0>
    2850:	cb 01       	movw	r24, r22
    2852:	ba 01       	movw	r22, r20
    2854:	60 1b       	sub	r22, r16
    2856:	71 0b       	sbc	r23, r17
    2858:	82 0b       	sbc	r24, r18
    285a:	93 0b       	sbc	r25, r19
    285c:	40 e0       	ldi	r20, 0x00	; 0
    285e:	84 dc       	rcall	.-1784   	; 0x2168 <prvAddCurrentTaskToDelayedList>
    2860:	3e df       	rcall	.-388    	; 0x26de <xTaskResumeAll>
    2862:	81 11       	cpse	r24, r1
    2864:	0d c0       	rjmp	.+26     	; 0x2880 <vTaskDelayUntil+0xaa>
    2866:	0e 94 26 09 	call	0x124c	; 0x124c <vPortYield>
    286a:	0a c0       	rjmp	.+20     	; 0x2880 <vTaskDelayUntil+0xaa>
    286c:	48 83       	st	Y, r20
    286e:	59 83       	std	Y+1, r21	; 0x01
    2870:	6a 83       	std	Y+2, r22	; 0x02
    2872:	7b 83       	std	Y+3, r23	; 0x03
    2874:	ed cf       	rjmp	.-38     	; 0x2850 <vTaskDelayUntil+0x7a>
    2876:	48 83       	st	Y, r20
    2878:	59 83       	std	Y+1, r21	; 0x01
    287a:	6a 83       	std	Y+2, r22	; 0x02
    287c:	7b 83       	std	Y+3, r23	; 0x03
    287e:	f0 cf       	rjmp	.-32     	; 0x2860 <vTaskDelayUntil+0x8a>
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	1f 91       	pop	r17
    2886:	0f 91       	pop	r16
    2888:	ff 90       	pop	r15
    288a:	ef 90       	pop	r14
    288c:	df 90       	pop	r13
    288e:	cf 90       	pop	r12
    2890:	08 95       	ret

00002892 <vTaskDelay>:
    2892:	cf 92       	push	r12
    2894:	df 92       	push	r13
    2896:	ef 92       	push	r14
    2898:	ff 92       	push	r15
    289a:	6b 01       	movw	r12, r22
    289c:	7c 01       	movw	r14, r24
    289e:	67 2b       	or	r22, r23
    28a0:	68 2b       	or	r22, r24
    28a2:	69 2b       	or	r22, r25
    28a4:	41 f0       	breq	.+16     	; 0x28b6 <vTaskDelay+0x24>
    28a6:	32 de       	rcall	.-924    	; 0x250c <vTaskSuspendAll>
    28a8:	40 e0       	ldi	r20, 0x00	; 0
    28aa:	c7 01       	movw	r24, r14
    28ac:	b6 01       	movw	r22, r12
    28ae:	5c dc       	rcall	.-1864   	; 0x2168 <prvAddCurrentTaskToDelayedList>
    28b0:	16 df       	rcall	.-468    	; 0x26de <xTaskResumeAll>
    28b2:	81 11       	cpse	r24, r1
    28b4:	02 c0       	rjmp	.+4      	; 0x28ba <vTaskDelay+0x28>
    28b6:	0e 94 26 09 	call	0x124c	; 0x124c <vPortYield>
    28ba:	ff 90       	pop	r15
    28bc:	ef 90       	pop	r14
    28be:	df 90       	pop	r13
    28c0:	cf 90       	pop	r12
    28c2:	08 95       	ret

000028c4 <vTaskSwitchContext>:
    28c4:	80 91 81 18 	lds	r24, 0x1881	; 0x801881 <uxSchedulerSuspended>
    28c8:	88 23       	and	r24, r24
    28ca:	21 f0       	breq	.+8      	; 0x28d4 <vTaskSwitchContext+0x10>
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	80 93 8a 18 	sts	0x188A, r24	; 0x80188a <xYieldPending>
    28d2:	08 95       	ret
    28d4:	10 92 8a 18 	sts	0x188A, r1	; 0x80188a <xYieldPending>
    28d8:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    28dc:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    28e0:	81 a5       	ldd	r24, Z+41	; 0x29
    28e2:	0e 94 35 05 	call	0xa6a	; 0xa6a <task_switch_out>
    28e6:	a0 91 fb 18 	lds	r26, 0x18FB	; 0x8018fb <pxCurrentTCB>
    28ea:	b0 91 fc 18 	lds	r27, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    28ee:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    28f2:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    28f6:	2d 91       	ld	r18, X+
    28f8:	3c 91       	ld	r19, X
    28fa:	83 8d       	ldd	r24, Z+27	; 0x1b
    28fc:	94 8d       	ldd	r25, Z+28	; 0x1c
    28fe:	82 17       	cp	r24, r18
    2900:	93 07       	cpc	r25, r19
    2902:	58 f0       	brcs	.+22     	; 0x291a <vTaskSwitchContext+0x56>
    2904:	60 91 fb 18 	lds	r22, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2908:	70 91 fc 18 	lds	r23, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    290c:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2910:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2914:	63 5e       	subi	r22, 0xE3	; 227
    2916:	7f 4f       	sbci	r23, 0xFF	; 255
    2918:	20 d6       	rcall	.+3136   	; 0x355a <vApplicationStackOverflowHook>
    291a:	80 91 8d 18 	lds	r24, 0x188D	; 0x80188d <uxTopReadyPriority>
    291e:	28 2f       	mov	r18, r24
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	9b e0       	ldi	r25, 0x0B	; 11
    2924:	89 9f       	mul	r24, r25
    2926:	f0 01       	movw	r30, r0
    2928:	11 24       	eor	r1, r1
    292a:	e1 53       	subi	r30, 0x31	; 49
    292c:	f7 4e       	sbci	r31, 0xE7	; 231
    292e:	90 81       	ld	r25, Z
    2930:	91 11       	cpse	r25, r1
    2932:	0e c0       	rjmp	.+28     	; 0x2950 <vTaskSwitchContext+0x8c>
    2934:	4b e0       	ldi	r20, 0x0B	; 11
    2936:	81 50       	subi	r24, 0x01	; 1
    2938:	28 2f       	mov	r18, r24
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	42 9f       	mul	r20, r18
    293e:	f0 01       	movw	r30, r0
    2940:	43 9f       	mul	r20, r19
    2942:	f0 0d       	add	r31, r0
    2944:	11 24       	eor	r1, r1
    2946:	e1 53       	subi	r30, 0x31	; 49
    2948:	f7 4e       	sbci	r31, 0xE7	; 231
    294a:	90 81       	ld	r25, Z
    294c:	99 23       	and	r25, r25
    294e:	99 f3       	breq	.-26     	; 0x2936 <vTaskSwitchContext+0x72>
    2950:	9b e0       	ldi	r25, 0x0B	; 11
    2952:	92 9f       	mul	r25, r18
    2954:	a0 01       	movw	r20, r0
    2956:	93 9f       	mul	r25, r19
    2958:	50 0d       	add	r21, r0
    295a:	11 24       	eor	r1, r1
    295c:	da 01       	movw	r26, r20
    295e:	a1 53       	subi	r26, 0x31	; 49
    2960:	b7 4e       	sbci	r27, 0xE7	; 231
    2962:	11 96       	adiw	r26, 0x01	; 1
    2964:	ed 91       	ld	r30, X+
    2966:	fc 91       	ld	r31, X
    2968:	12 97       	sbiw	r26, 0x02	; 2
    296a:	04 80       	ldd	r0, Z+4	; 0x04
    296c:	f5 81       	ldd	r31, Z+5	; 0x05
    296e:	e0 2d       	mov	r30, r0
    2970:	12 96       	adiw	r26, 0x02	; 2
    2972:	fc 93       	st	X, r31
    2974:	ee 93       	st	-X, r30
    2976:	11 97       	sbiw	r26, 0x01	; 1
    2978:	4e 52       	subi	r20, 0x2E	; 46
    297a:	57 4e       	sbci	r21, 0xE7	; 231
    297c:	e4 17       	cp	r30, r20
    297e:	f5 07       	cpc	r31, r21
    2980:	29 f4       	brne	.+10     	; 0x298c <vTaskSwitchContext+0xc8>
    2982:	44 81       	ldd	r20, Z+4	; 0x04
    2984:	55 81       	ldd	r21, Z+5	; 0x05
    2986:	fd 01       	movw	r30, r26
    2988:	52 83       	std	Z+2, r21	; 0x02
    298a:	41 83       	std	Z+1, r20	; 0x01
    298c:	9b e0       	ldi	r25, 0x0B	; 11
    298e:	92 9f       	mul	r25, r18
    2990:	f0 01       	movw	r30, r0
    2992:	93 9f       	mul	r25, r19
    2994:	f0 0d       	add	r31, r0
    2996:	11 24       	eor	r1, r1
    2998:	e1 53       	subi	r30, 0x31	; 49
    299a:	f7 4e       	sbci	r31, 0xE7	; 231
    299c:	01 80       	ldd	r0, Z+1	; 0x01
    299e:	f2 81       	ldd	r31, Z+2	; 0x02
    29a0:	e0 2d       	mov	r30, r0
    29a2:	20 85       	ldd	r18, Z+8	; 0x08
    29a4:	31 85       	ldd	r19, Z+9	; 0x09
    29a6:	30 93 fc 18 	sts	0x18FC, r19	; 0x8018fc <pxCurrentTCB+0x1>
    29aa:	20 93 fb 18 	sts	0x18FB, r18	; 0x8018fb <pxCurrentTCB>
    29ae:	80 93 8d 18 	sts	0x188D, r24	; 0x80188d <uxTopReadyPriority>
    29b2:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    29b6:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    29ba:	81 a5       	ldd	r24, Z+41	; 0x29
    29bc:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <task_switch_in>
    29c0:	08 95       	ret

000029c2 <vTaskPlaceOnEventList>:
    29c2:	cf 92       	push	r12
    29c4:	df 92       	push	r13
    29c6:	ef 92       	push	r14
    29c8:	ff 92       	push	r15
    29ca:	6a 01       	movw	r12, r20
    29cc:	7b 01       	movw	r14, r22
    29ce:	60 91 fb 18 	lds	r22, 0x18FB	; 0x8018fb <pxCurrentTCB>
    29d2:	70 91 fc 18 	lds	r23, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    29d6:	62 5f       	subi	r22, 0xF2	; 242
    29d8:	7f 4f       	sbci	r23, 0xFF	; 255
    29da:	0e 94 14 08 	call	0x1028	; 0x1028 <vListInsert>
    29de:	41 e0       	ldi	r20, 0x01	; 1
    29e0:	c7 01       	movw	r24, r14
    29e2:	b6 01       	movw	r22, r12
    29e4:	c1 db       	rcall	.-2174   	; 0x2168 <prvAddCurrentTaskToDelayedList>
    29e6:	ff 90       	pop	r15
    29e8:	ef 90       	pop	r14
    29ea:	df 90       	pop	r13
    29ec:	cf 90       	pop	r12
    29ee:	08 95       	ret

000029f0 <vTaskPlaceOnUnorderedEventList>:
    29f0:	cf 92       	push	r12
    29f2:	df 92       	push	r13
    29f4:	ef 92       	push	r14
    29f6:	ff 92       	push	r15
    29f8:	0f 93       	push	r16
    29fa:	1f 93       	push	r17
    29fc:	68 01       	movw	r12, r16
    29fe:	79 01       	movw	r14, r18
    2a00:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2a04:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2a08:	70 68       	ori	r23, 0x80	; 128
    2a0a:	46 87       	std	Z+14, r20	; 0x0e
    2a0c:	57 87       	std	Z+15, r21	; 0x0f
    2a0e:	60 8b       	std	Z+16, r22	; 0x10
    2a10:	71 8b       	std	Z+17, r23	; 0x11
    2a12:	60 91 fb 18 	lds	r22, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2a16:	70 91 fc 18 	lds	r23, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2a1a:	62 5f       	subi	r22, 0xF2	; 242
    2a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1e:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInsertEnd>
    2a22:	41 e0       	ldi	r20, 0x01	; 1
    2a24:	c7 01       	movw	r24, r14
    2a26:	b6 01       	movw	r22, r12
    2a28:	9f db       	rcall	.-2242   	; 0x2168 <prvAddCurrentTaskToDelayedList>
    2a2a:	1f 91       	pop	r17
    2a2c:	0f 91       	pop	r16
    2a2e:	ff 90       	pop	r15
    2a30:	ef 90       	pop	r14
    2a32:	df 90       	pop	r13
    2a34:	cf 90       	pop	r12
    2a36:	08 95       	ret

00002a38 <vTaskPlaceOnEventListRestricted>:
    2a38:	cf 92       	push	r12
    2a3a:	df 92       	push	r13
    2a3c:	ef 92       	push	r14
    2a3e:	ff 92       	push	r15
    2a40:	cf 93       	push	r28
    2a42:	6a 01       	movw	r12, r20
    2a44:	7b 01       	movw	r14, r22
    2a46:	c2 2f       	mov	r28, r18
    2a48:	60 91 fb 18 	lds	r22, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2a4c:	70 91 fc 18 	lds	r23, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2a50:	62 5f       	subi	r22, 0xF2	; 242
    2a52:	7f 4f       	sbci	r23, 0xFF	; 255
    2a54:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInsertEnd>
    2a58:	cc 23       	and	r28, r28
    2a5a:	21 f0       	breq	.+8      	; 0x2a64 <vTaskPlaceOnEventListRestricted+0x2c>
    2a5c:	cc 24       	eor	r12, r12
    2a5e:	ca 94       	dec	r12
    2a60:	dc 2c       	mov	r13, r12
    2a62:	76 01       	movw	r14, r12
    2a64:	4c 2f       	mov	r20, r28
    2a66:	c7 01       	movw	r24, r14
    2a68:	b6 01       	movw	r22, r12
    2a6a:	7e db       	rcall	.-2308   	; 0x2168 <prvAddCurrentTaskToDelayedList>
    2a6c:	cf 91       	pop	r28
    2a6e:	ff 90       	pop	r15
    2a70:	ef 90       	pop	r14
    2a72:	df 90       	pop	r13
    2a74:	cf 90       	pop	r12
    2a76:	08 95       	ret

00002a78 <xTaskRemoveFromEventList>:
    2a78:	0f 93       	push	r16
    2a7a:	1f 93       	push	r17
    2a7c:	cf 93       	push	r28
    2a7e:	df 93       	push	r29
    2a80:	dc 01       	movw	r26, r24
    2a82:	17 96       	adiw	r26, 0x07	; 7
    2a84:	ed 91       	ld	r30, X+
    2a86:	fc 91       	ld	r31, X
    2a88:	18 97       	sbiw	r26, 0x08	; 8
    2a8a:	c0 85       	ldd	r28, Z+8	; 0x08
    2a8c:	d1 85       	ldd	r29, Z+9	; 0x09
    2a8e:	8e 01       	movw	r16, r28
    2a90:	02 5f       	subi	r16, 0xF2	; 242
    2a92:	1f 4f       	sbci	r17, 0xFF	; 255
    2a94:	c8 01       	movw	r24, r16
    2a96:	0e 94 51 08 	call	0x10a2	; 0x10a2 <uxListRemove>
    2a9a:	80 91 81 18 	lds	r24, 0x1881	; 0x801881 <uxSchedulerSuspended>
    2a9e:	81 11       	cpse	r24, r1
    2aa0:	16 c0       	rjmp	.+44     	; 0x2ace <xTaskRemoveFromEventList+0x56>
    2aa2:	0c 50       	subi	r16, 0x0C	; 12
    2aa4:	11 09       	sbc	r17, r1
    2aa6:	c8 01       	movw	r24, r16
    2aa8:	0e 94 51 08 	call	0x10a2	; 0x10a2 <uxListRemove>
    2aac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2aae:	90 91 8d 18 	lds	r25, 0x188D	; 0x80188d <uxTopReadyPriority>
    2ab2:	98 17       	cp	r25, r24
    2ab4:	10 f4       	brcc	.+4      	; 0x2aba <xTaskRemoveFromEventList+0x42>
    2ab6:	80 93 8d 18 	sts	0x188D, r24	; 0x80188d <uxTopReadyPriority>
    2aba:	bb e0       	ldi	r27, 0x0B	; 11
    2abc:	8b 9f       	mul	r24, r27
    2abe:	c0 01       	movw	r24, r0
    2ac0:	11 24       	eor	r1, r1
    2ac2:	b8 01       	movw	r22, r16
    2ac4:	81 53       	subi	r24, 0x31	; 49
    2ac6:	97 4e       	sbci	r25, 0xE7	; 231
    2ac8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInsertEnd>
    2acc:	05 c0       	rjmp	.+10     	; 0x2ad8 <xTaskRemoveFromEventList+0x60>
    2ace:	b8 01       	movw	r22, r16
    2ad0:	8a ea       	ldi	r24, 0xAA	; 170
    2ad2:	98 e1       	ldi	r25, 0x18	; 24
    2ad4:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInsertEnd>
    2ad8:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2adc:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2ae0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ae2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ae4:	89 17       	cp	r24, r25
    2ae6:	20 f4       	brcc	.+8      	; 0x2af0 <xTaskRemoveFromEventList+0x78>
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	80 93 8a 18 	sts	0x188A, r24	; 0x80188a <xYieldPending>
    2aee:	01 c0       	rjmp	.+2      	; 0x2af2 <xTaskRemoveFromEventList+0x7a>
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	1f 91       	pop	r17
    2af8:	0f 91       	pop	r16
    2afa:	08 95       	ret

00002afc <vTaskRemoveFromUnorderedEventList>:
    2afc:	0f 93       	push	r16
    2afe:	1f 93       	push	r17
    2b00:	cf 93       	push	r28
    2b02:	df 93       	push	r29
    2b04:	70 68       	ori	r23, 0x80	; 128
    2b06:	fc 01       	movw	r30, r24
    2b08:	40 83       	st	Z, r20
    2b0a:	51 83       	std	Z+1, r21	; 0x01
    2b0c:	62 83       	std	Z+2, r22	; 0x02
    2b0e:	73 83       	std	Z+3, r23	; 0x03
    2b10:	c0 85       	ldd	r28, Z+8	; 0x08
    2b12:	d1 85       	ldd	r29, Z+9	; 0x09
    2b14:	0e 94 51 08 	call	0x10a2	; 0x10a2 <uxListRemove>
    2b18:	8e 01       	movw	r16, r28
    2b1a:	0e 5f       	subi	r16, 0xFE	; 254
    2b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b1e:	c8 01       	movw	r24, r16
    2b20:	0e 94 51 08 	call	0x10a2	; 0x10a2 <uxListRemove>
    2b24:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b26:	90 91 8d 18 	lds	r25, 0x188D	; 0x80188d <uxTopReadyPriority>
    2b2a:	98 17       	cp	r25, r24
    2b2c:	10 f4       	brcc	.+4      	; 0x2b32 <vTaskRemoveFromUnorderedEventList+0x36>
    2b2e:	80 93 8d 18 	sts	0x188D, r24	; 0x80188d <uxTopReadyPriority>
    2b32:	fb e0       	ldi	r31, 0x0B	; 11
    2b34:	8f 9f       	mul	r24, r31
    2b36:	c0 01       	movw	r24, r0
    2b38:	11 24       	eor	r1, r1
    2b3a:	b8 01       	movw	r22, r16
    2b3c:	81 53       	subi	r24, 0x31	; 49
    2b3e:	97 4e       	sbci	r25, 0xE7	; 231
    2b40:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInsertEnd>
    2b44:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2b48:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2b4c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b4e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b50:	89 17       	cp	r24, r25
    2b52:	18 f4       	brcc	.+6      	; 0x2b5a <vTaskRemoveFromUnorderedEventList+0x5e>
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	80 93 8a 18 	sts	0x188A, r24	; 0x80188a <xYieldPending>
    2b5a:	df 91       	pop	r29
    2b5c:	cf 91       	pop	r28
    2b5e:	1f 91       	pop	r17
    2b60:	0f 91       	pop	r16
    2b62:	08 95       	ret

00002b64 <vTaskSetTimeOutState>:
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	0f 92       	push	r0
    2b6a:	20 91 89 18 	lds	r18, 0x1889	; 0x801889 <xNumOfOverflows>
    2b6e:	fc 01       	movw	r30, r24
    2b70:	20 83       	st	Z, r18
    2b72:	40 91 8e 18 	lds	r20, 0x188E	; 0x80188e <xTickCount>
    2b76:	50 91 8f 18 	lds	r21, 0x188F	; 0x80188f <xTickCount+0x1>
    2b7a:	60 91 90 18 	lds	r22, 0x1890	; 0x801890 <xTickCount+0x2>
    2b7e:	70 91 91 18 	lds	r23, 0x1891	; 0x801891 <xTickCount+0x3>
    2b82:	41 83       	std	Z+1, r20	; 0x01
    2b84:	52 83       	std	Z+2, r21	; 0x02
    2b86:	63 83       	std	Z+3, r22	; 0x03
    2b88:	74 83       	std	Z+4, r23	; 0x04
    2b8a:	0f 90       	pop	r0
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	08 95       	ret

00002b90 <vTaskInternalSetTimeOutState>:
    2b90:	20 91 89 18 	lds	r18, 0x1889	; 0x801889 <xNumOfOverflows>
    2b94:	fc 01       	movw	r30, r24
    2b96:	20 83       	st	Z, r18
    2b98:	40 91 8e 18 	lds	r20, 0x188E	; 0x80188e <xTickCount>
    2b9c:	50 91 8f 18 	lds	r21, 0x188F	; 0x80188f <xTickCount+0x1>
    2ba0:	60 91 90 18 	lds	r22, 0x1890	; 0x801890 <xTickCount+0x2>
    2ba4:	70 91 91 18 	lds	r23, 0x1891	; 0x801891 <xTickCount+0x3>
    2ba8:	41 83       	std	Z+1, r20	; 0x01
    2baa:	52 83       	std	Z+2, r21	; 0x02
    2bac:	63 83       	std	Z+3, r22	; 0x03
    2bae:	74 83       	std	Z+4, r23	; 0x04
    2bb0:	08 95       	ret

00002bb2 <xTaskCheckForTimeOut>:
    2bb2:	cf 92       	push	r12
    2bb4:	df 92       	push	r13
    2bb6:	ef 92       	push	r14
    2bb8:	ff 92       	push	r15
    2bba:	0f 93       	push	r16
    2bbc:	1f 93       	push	r17
    2bbe:	cf 93       	push	r28
    2bc0:	df 93       	push	r29
    2bc2:	fb 01       	movw	r30, r22
    2bc4:	0f b6       	in	r0, 0x3f	; 63
    2bc6:	f8 94       	cli
    2bc8:	0f 92       	push	r0
    2bca:	40 91 8e 18 	lds	r20, 0x188E	; 0x80188e <xTickCount>
    2bce:	50 91 8f 18 	lds	r21, 0x188F	; 0x80188f <xTickCount+0x1>
    2bd2:	60 91 90 18 	lds	r22, 0x1890	; 0x801890 <xTickCount+0x2>
    2bd6:	70 91 91 18 	lds	r23, 0x1891	; 0x801891 <xTickCount+0x3>
    2bda:	00 81       	ld	r16, Z
    2bdc:	11 81       	ldd	r17, Z+1	; 0x01
    2bde:	22 81       	ldd	r18, Z+2	; 0x02
    2be0:	33 81       	ldd	r19, Z+3	; 0x03
    2be2:	0f 3f       	cpi	r16, 0xFF	; 255
    2be4:	af ef       	ldi	r26, 0xFF	; 255
    2be6:	1a 07       	cpc	r17, r26
    2be8:	2a 07       	cpc	r18, r26
    2bea:	3a 07       	cpc	r19, r26
    2bec:	49 f1       	breq	.+82     	; 0x2c40 <xTaskCheckForTimeOut+0x8e>
    2bee:	ec 01       	movw	r28, r24
    2bf0:	c9 80       	ldd	r12, Y+1	; 0x01
    2bf2:	da 80       	ldd	r13, Y+2	; 0x02
    2bf4:	eb 80       	ldd	r14, Y+3	; 0x03
    2bf6:	fc 80       	ldd	r15, Y+4	; 0x04
    2bf8:	a0 91 89 18 	lds	r26, 0x1889	; 0x801889 <xNumOfOverflows>
    2bfc:	b8 81       	ld	r27, Y
    2bfe:	ba 17       	cp	r27, r26
    2c00:	29 f0       	breq	.+10     	; 0x2c0c <xTaskCheckForTimeOut+0x5a>
    2c02:	4c 15       	cp	r20, r12
    2c04:	5d 05       	cpc	r21, r13
    2c06:	6e 05       	cpc	r22, r14
    2c08:	7f 05       	cpc	r23, r15
    2c0a:	e0 f4       	brcc	.+56     	; 0x2c44 <xTaskCheckForTimeOut+0x92>
    2c0c:	4c 19       	sub	r20, r12
    2c0e:	5d 09       	sbc	r21, r13
    2c10:	6e 09       	sbc	r22, r14
    2c12:	7f 09       	sbc	r23, r15
    2c14:	40 17       	cp	r20, r16
    2c16:	51 07       	cpc	r21, r17
    2c18:	62 07       	cpc	r22, r18
    2c1a:	73 07       	cpc	r23, r19
    2c1c:	58 f4       	brcc	.+22     	; 0x2c34 <xTaskCheckForTimeOut+0x82>
    2c1e:	04 1b       	sub	r16, r20
    2c20:	15 0b       	sbc	r17, r21
    2c22:	26 0b       	sbc	r18, r22
    2c24:	37 0b       	sbc	r19, r23
    2c26:	00 83       	st	Z, r16
    2c28:	11 83       	std	Z+1, r17	; 0x01
    2c2a:	22 83       	std	Z+2, r18	; 0x02
    2c2c:	33 83       	std	Z+3, r19	; 0x03
    2c2e:	b0 df       	rcall	.-160    	; 0x2b90 <vTaskInternalSetTimeOutState>
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	09 c0       	rjmp	.+18     	; 0x2c46 <xTaskCheckForTimeOut+0x94>
    2c34:	10 82       	st	Z, r1
    2c36:	11 82       	std	Z+1, r1	; 0x01
    2c38:	12 82       	std	Z+2, r1	; 0x02
    2c3a:	13 82       	std	Z+3, r1	; 0x03
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	03 c0       	rjmp	.+6      	; 0x2c46 <xTaskCheckForTimeOut+0x94>
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	01 c0       	rjmp	.+2      	; 0x2c46 <xTaskCheckForTimeOut+0x94>
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	0f 90       	pop	r0
    2c48:	0f be       	out	0x3f, r0	; 63
    2c4a:	df 91       	pop	r29
    2c4c:	cf 91       	pop	r28
    2c4e:	1f 91       	pop	r17
    2c50:	0f 91       	pop	r16
    2c52:	ff 90       	pop	r15
    2c54:	ef 90       	pop	r14
    2c56:	df 90       	pop	r13
    2c58:	cf 90       	pop	r12
    2c5a:	08 95       	ret

00002c5c <vTaskMissedYield>:
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	80 93 8a 18 	sts	0x188A, r24	; 0x80188a <xYieldPending>
    2c62:	08 95       	ret

00002c64 <xTaskGetCurrentTaskHandle>:
    2c64:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2c68:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2c6c:	08 95       	ret

00002c6e <xTaskGetSchedulerState>:
    2c6e:	80 91 8c 18 	lds	r24, 0x188C	; 0x80188c <xSchedulerRunning>
    2c72:	88 23       	and	r24, r24
    2c74:	31 f0       	breq	.+12     	; 0x2c82 <xTaskGetSchedulerState+0x14>
    2c76:	80 91 81 18 	lds	r24, 0x1881	; 0x801881 <uxSchedulerSuspended>
    2c7a:	88 23       	and	r24, r24
    2c7c:	21 f0       	breq	.+8      	; 0x2c86 <xTaskGetSchedulerState+0x18>
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	08 95       	ret
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	08 95       	ret
    2c86:	82 e0       	ldi	r24, 0x02	; 2
    2c88:	08 95       	ret

00002c8a <xTaskPriorityInherit>:
    2c8a:	0f 93       	push	r16
    2c8c:	1f 93       	push	r17
    2c8e:	cf 93       	push	r28
    2c90:	df 93       	push	r29
    2c92:	fc 01       	movw	r30, r24
    2c94:	89 2b       	or	r24, r25
    2c96:	09 f4       	brne	.+2      	; 0x2c9a <xTaskPriorityInherit+0x10>
    2c98:	60 c0       	rjmp	.+192    	; 0x2d5a <xTaskPriorityInherit+0xd0>
    2c9a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c9c:	a0 91 fb 18 	lds	r26, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2ca0:	b0 91 fc 18 	lds	r27, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2ca4:	5a 96       	adiw	r26, 0x1a	; 26
    2ca6:	9c 91       	ld	r25, X
    2ca8:	89 17       	cp	r24, r25
    2caa:	08 f0       	brcs	.+2      	; 0x2cae <xTaskPriorityInherit+0x24>
    2cac:	4a c0       	rjmp	.+148    	; 0x2d42 <xTaskPriorityInherit+0xb8>
    2cae:	46 85       	ldd	r20, Z+14	; 0x0e
    2cb0:	57 85       	ldd	r21, Z+15	; 0x0f
    2cb2:	60 89       	ldd	r22, Z+16	; 0x10
    2cb4:	71 89       	ldd	r23, Z+17	; 0x11
    2cb6:	77 23       	and	r23, r23
    2cb8:	94 f0       	brlt	.+36     	; 0x2cde <xTaskPriorityInherit+0x54>
    2cba:	a0 91 fb 18 	lds	r26, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2cbe:	b0 91 fc 18 	lds	r27, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2cc2:	5a 96       	adiw	r26, 0x1a	; 26
    2cc4:	9c 91       	ld	r25, X
    2cc6:	44 e0       	ldi	r20, 0x04	; 4
    2cc8:	50 e0       	ldi	r21, 0x00	; 0
    2cca:	60 e0       	ldi	r22, 0x00	; 0
    2ccc:	70 e0       	ldi	r23, 0x00	; 0
    2cce:	49 1b       	sub	r20, r25
    2cd0:	51 09       	sbc	r21, r1
    2cd2:	61 09       	sbc	r22, r1
    2cd4:	71 09       	sbc	r23, r1
    2cd6:	46 87       	std	Z+14, r20	; 0x0e
    2cd8:	57 87       	std	Z+15, r21	; 0x0f
    2cda:	60 8b       	std	Z+16, r22	; 0x10
    2cdc:	71 8b       	std	Z+17, r23	; 0x11
    2cde:	2b e0       	ldi	r18, 0x0B	; 11
    2ce0:	82 9f       	mul	r24, r18
    2ce2:	c0 01       	movw	r24, r0
    2ce4:	11 24       	eor	r1, r1
    2ce6:	81 53       	subi	r24, 0x31	; 49
    2ce8:	97 4e       	sbci	r25, 0xE7	; 231
    2cea:	24 85       	ldd	r18, Z+12	; 0x0c
    2cec:	35 85       	ldd	r19, Z+13	; 0x0d
    2cee:	28 17       	cp	r18, r24
    2cf0:	39 07       	cpc	r19, r25
    2cf2:	f1 f4       	brne	.+60     	; 0x2d30 <xTaskPriorityInherit+0xa6>
    2cf4:	8f 01       	movw	r16, r30
    2cf6:	ef 01       	movw	r28, r30
    2cf8:	22 96       	adiw	r28, 0x02	; 2
    2cfa:	ce 01       	movw	r24, r28
    2cfc:	0e 94 51 08 	call	0x10a2	; 0x10a2 <uxListRemove>
    2d00:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2d04:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2d08:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d0a:	f8 01       	movw	r30, r16
    2d0c:	82 8f       	std	Z+26, r24	; 0x1a
    2d0e:	90 91 8d 18 	lds	r25, 0x188D	; 0x80188d <uxTopReadyPriority>
    2d12:	98 17       	cp	r25, r24
    2d14:	10 f4       	brcc	.+4      	; 0x2d1a <xTaskPriorityInherit+0x90>
    2d16:	80 93 8d 18 	sts	0x188D, r24	; 0x80188d <uxTopReadyPriority>
    2d1a:	fb e0       	ldi	r31, 0x0B	; 11
    2d1c:	8f 9f       	mul	r24, r31
    2d1e:	c0 01       	movw	r24, r0
    2d20:	11 24       	eor	r1, r1
    2d22:	be 01       	movw	r22, r28
    2d24:	81 53       	subi	r24, 0x31	; 49
    2d26:	97 4e       	sbci	r25, 0xE7	; 231
    2d28:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInsertEnd>
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	16 c0       	rjmp	.+44     	; 0x2d5c <xTaskPriorityInherit+0xd2>
    2d30:	a0 91 fb 18 	lds	r26, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2d34:	b0 91 fc 18 	lds	r27, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2d38:	5a 96       	adiw	r26, 0x1a	; 26
    2d3a:	8c 91       	ld	r24, X
    2d3c:	82 8f       	std	Z+26, r24	; 0x1a
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	0d c0       	rjmp	.+26     	; 0x2d5c <xTaskPriorityInherit+0xd2>
    2d42:	a0 91 fb 18 	lds	r26, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2d46:	b0 91 fc 18 	lds	r27, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	27 a1       	ldd	r18, Z+39	; 0x27
    2d4e:	5a 96       	adiw	r26, 0x1a	; 26
    2d50:	9c 91       	ld	r25, X
    2d52:	29 17       	cp	r18, r25
    2d54:	18 f0       	brcs	.+6      	; 0x2d5c <xTaskPriorityInherit+0xd2>
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	01 c0       	rjmp	.+2      	; 0x2d5c <xTaskPriorityInherit+0xd2>
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	1f 91       	pop	r17
    2d62:	0f 91       	pop	r16
    2d64:	08 95       	ret

00002d66 <xTaskPriorityDisinherit>:
    2d66:	0f 93       	push	r16
    2d68:	1f 93       	push	r17
    2d6a:	cf 93       	push	r28
    2d6c:	df 93       	push	r29
    2d6e:	fc 01       	movw	r30, r24
    2d70:	89 2b       	or	r24, r25
    2d72:	79 f1       	breq	.+94     	; 0x2dd2 <xTaskPriorityDisinherit+0x6c>
    2d74:	80 a5       	ldd	r24, Z+40	; 0x28
    2d76:	81 50       	subi	r24, 0x01	; 1
    2d78:	80 a7       	std	Z+40, r24	; 0x28
    2d7a:	22 8d       	ldd	r18, Z+26	; 0x1a
    2d7c:	97 a1       	ldd	r25, Z+39	; 0x27
    2d7e:	29 17       	cp	r18, r25
    2d80:	51 f1       	breq	.+84     	; 0x2dd6 <xTaskPriorityDisinherit+0x70>
    2d82:	81 11       	cpse	r24, r1
    2d84:	2a c0       	rjmp	.+84     	; 0x2dda <xTaskPriorityDisinherit+0x74>
    2d86:	ef 01       	movw	r28, r30
    2d88:	8f 01       	movw	r16, r30
    2d8a:	0e 5f       	subi	r16, 0xFE	; 254
    2d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d8e:	c8 01       	movw	r24, r16
    2d90:	0e 94 51 08 	call	0x10a2	; 0x10a2 <uxListRemove>
    2d94:	8f a1       	ldd	r24, Y+39	; 0x27
    2d96:	8a 8f       	std	Y+26, r24	; 0x1a
    2d98:	44 e0       	ldi	r20, 0x04	; 4
    2d9a:	50 e0       	ldi	r21, 0x00	; 0
    2d9c:	60 e0       	ldi	r22, 0x00	; 0
    2d9e:	70 e0       	ldi	r23, 0x00	; 0
    2da0:	48 1b       	sub	r20, r24
    2da2:	51 09       	sbc	r21, r1
    2da4:	61 09       	sbc	r22, r1
    2da6:	71 09       	sbc	r23, r1
    2da8:	4e 87       	std	Y+14, r20	; 0x0e
    2daa:	5f 87       	std	Y+15, r21	; 0x0f
    2dac:	68 8b       	std	Y+16, r22	; 0x10
    2dae:	79 8b       	std	Y+17, r23	; 0x11
    2db0:	90 91 8d 18 	lds	r25, 0x188D	; 0x80188d <uxTopReadyPriority>
    2db4:	98 17       	cp	r25, r24
    2db6:	10 f4       	brcc	.+4      	; 0x2dbc <xTaskPriorityDisinherit+0x56>
    2db8:	80 93 8d 18 	sts	0x188D, r24	; 0x80188d <uxTopReadyPriority>
    2dbc:	2b e0       	ldi	r18, 0x0B	; 11
    2dbe:	82 9f       	mul	r24, r18
    2dc0:	c0 01       	movw	r24, r0
    2dc2:	11 24       	eor	r1, r1
    2dc4:	b8 01       	movw	r22, r16
    2dc6:	81 53       	subi	r24, 0x31	; 49
    2dc8:	97 4e       	sbci	r25, 0xE7	; 231
    2dca:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInsertEnd>
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	05 c0       	rjmp	.+10     	; 0x2ddc <xTaskPriorityDisinherit+0x76>
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	03 c0       	rjmp	.+6      	; 0x2ddc <xTaskPriorityDisinherit+0x76>
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	01 c0       	rjmp	.+2      	; 0x2ddc <xTaskPriorityDisinherit+0x76>
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	df 91       	pop	r29
    2dde:	cf 91       	pop	r28
    2de0:	1f 91       	pop	r17
    2de2:	0f 91       	pop	r16
    2de4:	08 95       	ret

00002de6 <vTaskPriorityDisinheritAfterTimeout>:
    2de6:	0f 93       	push	r16
    2de8:	1f 93       	push	r17
    2dea:	cf 93       	push	r28
    2dec:	df 93       	push	r29
    2dee:	fc 01       	movw	r30, r24
    2df0:	89 2b       	or	r24, r25
    2df2:	09 f4       	brne	.+2      	; 0x2df6 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2df4:	3f c0       	rjmp	.+126    	; 0x2e74 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2df6:	87 a1       	ldd	r24, Z+39	; 0x27
    2df8:	86 17       	cp	r24, r22
    2dfa:	08 f4       	brcc	.+2      	; 0x2dfe <vTaskPriorityDisinheritAfterTimeout+0x18>
    2dfc:	86 2f       	mov	r24, r22
    2dfe:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e00:	98 17       	cp	r25, r24
    2e02:	c1 f1       	breq	.+112    	; 0x2e74 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2e04:	20 a5       	ldd	r18, Z+40	; 0x28
    2e06:	21 30       	cpi	r18, 0x01	; 1
    2e08:	a9 f5       	brne	.+106    	; 0x2e74 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2e0a:	82 8f       	std	Z+26, r24	; 0x1a
    2e0c:	46 85       	ldd	r20, Z+14	; 0x0e
    2e0e:	57 85       	ldd	r21, Z+15	; 0x0f
    2e10:	60 89       	ldd	r22, Z+16	; 0x10
    2e12:	71 89       	ldd	r23, Z+17	; 0x11
    2e14:	77 23       	and	r23, r23
    2e16:	64 f0       	brlt	.+24     	; 0x2e30 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    2e18:	44 e0       	ldi	r20, 0x04	; 4
    2e1a:	50 e0       	ldi	r21, 0x00	; 0
    2e1c:	60 e0       	ldi	r22, 0x00	; 0
    2e1e:	70 e0       	ldi	r23, 0x00	; 0
    2e20:	48 1b       	sub	r20, r24
    2e22:	51 09       	sbc	r21, r1
    2e24:	61 09       	sbc	r22, r1
    2e26:	71 09       	sbc	r23, r1
    2e28:	46 87       	std	Z+14, r20	; 0x0e
    2e2a:	57 87       	std	Z+15, r21	; 0x0f
    2e2c:	60 8b       	std	Z+16, r22	; 0x10
    2e2e:	71 8b       	std	Z+17, r23	; 0x11
    2e30:	2b e0       	ldi	r18, 0x0B	; 11
    2e32:	92 9f       	mul	r25, r18
    2e34:	c0 01       	movw	r24, r0
    2e36:	11 24       	eor	r1, r1
    2e38:	81 53       	subi	r24, 0x31	; 49
    2e3a:	97 4e       	sbci	r25, 0xE7	; 231
    2e3c:	24 85       	ldd	r18, Z+12	; 0x0c
    2e3e:	35 85       	ldd	r19, Z+13	; 0x0d
    2e40:	28 17       	cp	r18, r24
    2e42:	39 07       	cpc	r19, r25
    2e44:	b9 f4       	brne	.+46     	; 0x2e74 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2e46:	ef 01       	movw	r28, r30
    2e48:	8f 01       	movw	r16, r30
    2e4a:	0e 5f       	subi	r16, 0xFE	; 254
    2e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4e:	c8 01       	movw	r24, r16
    2e50:	0e 94 51 08 	call	0x10a2	; 0x10a2 <uxListRemove>
    2e54:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e56:	90 91 8d 18 	lds	r25, 0x188D	; 0x80188d <uxTopReadyPriority>
    2e5a:	98 17       	cp	r25, r24
    2e5c:	10 f4       	brcc	.+4      	; 0x2e62 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    2e5e:	80 93 8d 18 	sts	0x188D, r24	; 0x80188d <uxTopReadyPriority>
    2e62:	2b e0       	ldi	r18, 0x0B	; 11
    2e64:	82 9f       	mul	r24, r18
    2e66:	c0 01       	movw	r24, r0
    2e68:	11 24       	eor	r1, r1
    2e6a:	b8 01       	movw	r22, r16
    2e6c:	81 53       	subi	r24, 0x31	; 49
    2e6e:	97 4e       	sbci	r25, 0xE7	; 231
    2e70:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInsertEnd>
    2e74:	df 91       	pop	r29
    2e76:	cf 91       	pop	r28
    2e78:	1f 91       	pop	r17
    2e7a:	0f 91       	pop	r16
    2e7c:	08 95       	ret

00002e7e <uxTaskResetEventItemValue>:
    2e7e:	cf 92       	push	r12
    2e80:	df 92       	push	r13
    2e82:	ef 92       	push	r14
    2e84:	ff 92       	push	r15
    2e86:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2e8a:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2e8e:	66 85       	ldd	r22, Z+14	; 0x0e
    2e90:	77 85       	ldd	r23, Z+15	; 0x0f
    2e92:	80 89       	ldd	r24, Z+16	; 0x10
    2e94:	91 89       	ldd	r25, Z+17	; 0x11
    2e96:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2e9a:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2e9e:	a0 91 fb 18 	lds	r26, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2ea2:	b0 91 fc 18 	lds	r27, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2ea6:	5a 96       	adiw	r26, 0x1a	; 26
    2ea8:	2c 91       	ld	r18, X
    2eaa:	c1 2c       	mov	r12, r1
    2eac:	d1 2c       	mov	r13, r1
    2eae:	76 01       	movw	r14, r12
    2eb0:	68 94       	set
    2eb2:	c2 f8       	bld	r12, 2
    2eb4:	c2 1a       	sub	r12, r18
    2eb6:	d1 08       	sbc	r13, r1
    2eb8:	e1 08       	sbc	r14, r1
    2eba:	f1 08       	sbc	r15, r1
    2ebc:	c6 86       	std	Z+14, r12	; 0x0e
    2ebe:	d7 86       	std	Z+15, r13	; 0x0f
    2ec0:	e0 8a       	std	Z+16, r14	; 0x10
    2ec2:	f1 8a       	std	Z+17, r15	; 0x11
    2ec4:	ff 90       	pop	r15
    2ec6:	ef 90       	pop	r14
    2ec8:	df 90       	pop	r13
    2eca:	cf 90       	pop	r12
    2ecc:	08 95       	ret

00002ece <pvTaskIncrementMutexHeldCount>:
    2ece:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2ed2:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2ed6:	89 2b       	or	r24, r25
    2ed8:	39 f0       	breq	.+14     	; 0x2ee8 <pvTaskIncrementMutexHeldCount+0x1a>
    2eda:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2ede:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2ee2:	80 a5       	ldd	r24, Z+40	; 0x28
    2ee4:	8f 5f       	subi	r24, 0xFF	; 255
    2ee6:	80 a7       	std	Z+40, r24	; 0x28
    2ee8:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2eec:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2ef0:	08 95       	ret

00002ef2 <xTaskNotifyWait>:
    2ef2:	4f 92       	push	r4
    2ef4:	5f 92       	push	r5
    2ef6:	6f 92       	push	r6
    2ef8:	7f 92       	push	r7
    2efa:	8f 92       	push	r8
    2efc:	9f 92       	push	r9
    2efe:	af 92       	push	r10
    2f00:	bf 92       	push	r11
    2f02:	cf 92       	push	r12
    2f04:	df 92       	push	r13
    2f06:	ef 92       	push	r14
    2f08:	ff 92       	push	r15
    2f0a:	0f 93       	push	r16
    2f0c:	1f 93       	push	r17
    2f0e:	49 01       	movw	r8, r18
    2f10:	5a 01       	movw	r10, r20
    2f12:	0f b6       	in	r0, 0x3f	; 63
    2f14:	f8 94       	cli
    2f16:	0f 92       	push	r0
    2f18:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2f1c:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2f20:	27 a5       	ldd	r18, Z+47	; 0x2f
    2f22:	22 30       	cpi	r18, 0x02	; 2
    2f24:	39 f1       	breq	.+78     	; 0x2f74 <xTaskNotifyWait+0x82>
    2f26:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2f2a:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2f2e:	43 a4       	ldd	r4, Z+43	; 0x2b
    2f30:	54 a4       	ldd	r5, Z+44	; 0x2c
    2f32:	65 a4       	ldd	r6, Z+45	; 0x2d
    2f34:	76 a4       	ldd	r7, Z+46	; 0x2e
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	80 95       	com	r24
    2f3c:	90 95       	com	r25
    2f3e:	a0 95       	com	r26
    2f40:	b0 95       	com	r27
    2f42:	84 21       	and	r24, r4
    2f44:	95 21       	and	r25, r5
    2f46:	a6 21       	and	r26, r6
    2f48:	b7 21       	and	r27, r7
    2f4a:	83 a7       	std	Z+43, r24	; 0x2b
    2f4c:	94 a7       	std	Z+44, r25	; 0x2c
    2f4e:	a5 a7       	std	Z+45, r26	; 0x2d
    2f50:	b6 a7       	std	Z+46, r27	; 0x2e
    2f52:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2f56:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	87 a7       	std	Z+47, r24	; 0x2f
    2f5e:	c1 14       	cp	r12, r1
    2f60:	d1 04       	cpc	r13, r1
    2f62:	e1 04       	cpc	r14, r1
    2f64:	f1 04       	cpc	r15, r1
    2f66:	31 f0       	breq	.+12     	; 0x2f74 <xTaskNotifyWait+0x82>
    2f68:	41 e0       	ldi	r20, 0x01	; 1
    2f6a:	c7 01       	movw	r24, r14
    2f6c:	b6 01       	movw	r22, r12
    2f6e:	fc d8       	rcall	.-3592   	; 0x2168 <prvAddCurrentTaskToDelayedList>
    2f70:	0e 94 26 09 	call	0x124c	; 0x124c <vPortYield>
    2f74:	0f 90       	pop	r0
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	0f 92       	push	r0
    2f7e:	01 15       	cp	r16, r1
    2f80:	11 05       	cpc	r17, r1
    2f82:	69 f0       	breq	.+26     	; 0x2f9e <xTaskNotifyWait+0xac>
    2f84:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2f88:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2f8c:	83 a5       	ldd	r24, Z+43	; 0x2b
    2f8e:	94 a5       	ldd	r25, Z+44	; 0x2c
    2f90:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2f92:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2f94:	f8 01       	movw	r30, r16
    2f96:	80 83       	st	Z, r24
    2f98:	91 83       	std	Z+1, r25	; 0x01
    2f9a:	a2 83       	std	Z+2, r26	; 0x02
    2f9c:	b3 83       	std	Z+3, r27	; 0x03
    2f9e:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2fa2:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2fa6:	87 a5       	ldd	r24, Z+47	; 0x2f
    2fa8:	82 30       	cpi	r24, 0x02	; 2
    2faa:	b1 f4       	brne	.+44     	; 0x2fd8 <xTaskNotifyWait+0xe6>
    2fac:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2fb0:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2fb4:	83 a5       	ldd	r24, Z+43	; 0x2b
    2fb6:	94 a5       	ldd	r25, Z+44	; 0x2c
    2fb8:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2fba:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2fbc:	80 94       	com	r8
    2fbe:	90 94       	com	r9
    2fc0:	a0 94       	com	r10
    2fc2:	b0 94       	com	r11
    2fc4:	88 22       	and	r8, r24
    2fc6:	99 22       	and	r9, r25
    2fc8:	aa 22       	and	r10, r26
    2fca:	bb 22       	and	r11, r27
    2fcc:	83 a6       	std	Z+43, r8	; 0x2b
    2fce:	94 a6       	std	Z+44, r9	; 0x2c
    2fd0:	a5 a6       	std	Z+45, r10	; 0x2d
    2fd2:	b6 a6       	std	Z+46, r11	; 0x2e
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	01 c0       	rjmp	.+2      	; 0x2fda <xTaskNotifyWait+0xe8>
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    2fde:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    2fe2:	17 a6       	std	Z+47, r1	; 0x2f
    2fe4:	0f 90       	pop	r0
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	1f 91       	pop	r17
    2fea:	0f 91       	pop	r16
    2fec:	ff 90       	pop	r15
    2fee:	ef 90       	pop	r14
    2ff0:	df 90       	pop	r13
    2ff2:	cf 90       	pop	r12
    2ff4:	bf 90       	pop	r11
    2ff6:	af 90       	pop	r10
    2ff8:	9f 90       	pop	r9
    2ffa:	8f 90       	pop	r8
    2ffc:	7f 90       	pop	r7
    2ffe:	6f 90       	pop	r6
    3000:	5f 90       	pop	r5
    3002:	4f 90       	pop	r4
    3004:	08 95       	ret

00003006 <xTaskGenericNotify>:
    3006:	0f 93       	push	r16
    3008:	1f 93       	push	r17
    300a:	cf 93       	push	r28
    300c:	df 93       	push	r29
    300e:	fc 01       	movw	r30, r24
    3010:	0f b6       	in	r0, 0x3f	; 63
    3012:	f8 94       	cli
    3014:	0f 92       	push	r0
    3016:	01 15       	cp	r16, r1
    3018:	11 05       	cpc	r17, r1
    301a:	49 f0       	breq	.+18     	; 0x302e <xTaskGenericNotify+0x28>
    301c:	83 a5       	ldd	r24, Z+43	; 0x2b
    301e:	94 a5       	ldd	r25, Z+44	; 0x2c
    3020:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3022:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3024:	e8 01       	movw	r28, r16
    3026:	88 83       	st	Y, r24
    3028:	99 83       	std	Y+1, r25	; 0x01
    302a:	aa 83       	std	Y+2, r26	; 0x02
    302c:	bb 83       	std	Y+3, r27	; 0x03
    302e:	87 a5       	ldd	r24, Z+47	; 0x2f
    3030:	92 e0       	ldi	r25, 0x02	; 2
    3032:	97 a7       	std	Z+47, r25	; 0x2f
    3034:	22 30       	cpi	r18, 0x02	; 2
    3036:	b1 f0       	breq	.+44     	; 0x3064 <xTaskGenericNotify+0x5e>
    3038:	18 f4       	brcc	.+6      	; 0x3040 <xTaskGenericNotify+0x3a>
    303a:	21 30       	cpi	r18, 0x01	; 1
    303c:	31 f0       	breq	.+12     	; 0x304a <xTaskGenericNotify+0x44>
    303e:	2a c0       	rjmp	.+84     	; 0x3094 <xTaskGenericNotify+0x8e>
    3040:	23 30       	cpi	r18, 0x03	; 3
    3042:	e9 f0       	breq	.+58     	; 0x307e <xTaskGenericNotify+0x78>
    3044:	24 30       	cpi	r18, 0x04	; 4
    3046:	01 f1       	breq	.+64     	; 0x3088 <xTaskGenericNotify+0x82>
    3048:	25 c0       	rjmp	.+74     	; 0x3094 <xTaskGenericNotify+0x8e>
    304a:	03 a5       	ldd	r16, Z+43	; 0x2b
    304c:	14 a5       	ldd	r17, Z+44	; 0x2c
    304e:	25 a5       	ldd	r18, Z+45	; 0x2d
    3050:	36 a5       	ldd	r19, Z+46	; 0x2e
    3052:	40 2b       	or	r20, r16
    3054:	51 2b       	or	r21, r17
    3056:	62 2b       	or	r22, r18
    3058:	73 2b       	or	r23, r19
    305a:	43 a7       	std	Z+43, r20	; 0x2b
    305c:	54 a7       	std	Z+44, r21	; 0x2c
    305e:	65 a7       	std	Z+45, r22	; 0x2d
    3060:	76 a7       	std	Z+46, r23	; 0x2e
    3062:	18 c0       	rjmp	.+48     	; 0x3094 <xTaskGenericNotify+0x8e>
    3064:	43 a5       	ldd	r20, Z+43	; 0x2b
    3066:	54 a5       	ldd	r21, Z+44	; 0x2c
    3068:	65 a5       	ldd	r22, Z+45	; 0x2d
    306a:	76 a5       	ldd	r23, Z+46	; 0x2e
    306c:	4f 5f       	subi	r20, 0xFF	; 255
    306e:	5f 4f       	sbci	r21, 0xFF	; 255
    3070:	6f 4f       	sbci	r22, 0xFF	; 255
    3072:	7f 4f       	sbci	r23, 0xFF	; 255
    3074:	43 a7       	std	Z+43, r20	; 0x2b
    3076:	54 a7       	std	Z+44, r21	; 0x2c
    3078:	65 a7       	std	Z+45, r22	; 0x2d
    307a:	76 a7       	std	Z+46, r23	; 0x2e
    307c:	0b c0       	rjmp	.+22     	; 0x3094 <xTaskGenericNotify+0x8e>
    307e:	43 a7       	std	Z+43, r20	; 0x2b
    3080:	54 a7       	std	Z+44, r21	; 0x2c
    3082:	65 a7       	std	Z+45, r22	; 0x2d
    3084:	76 a7       	std	Z+46, r23	; 0x2e
    3086:	06 c0       	rjmp	.+12     	; 0x3094 <xTaskGenericNotify+0x8e>
    3088:	82 30       	cpi	r24, 0x02	; 2
    308a:	49 f1       	breq	.+82     	; 0x30de <xTaskGenericNotify+0xd8>
    308c:	43 a7       	std	Z+43, r20	; 0x2b
    308e:	54 a7       	std	Z+44, r21	; 0x2c
    3090:	65 a7       	std	Z+45, r22	; 0x2d
    3092:	76 a7       	std	Z+46, r23	; 0x2e
    3094:	81 30       	cpi	r24, 0x01	; 1
    3096:	29 f5       	brne	.+74     	; 0x30e2 <xTaskGenericNotify+0xdc>
    3098:	ef 01       	movw	r28, r30
    309a:	8f 01       	movw	r16, r30
    309c:	0e 5f       	subi	r16, 0xFE	; 254
    309e:	1f 4f       	sbci	r17, 0xFF	; 255
    30a0:	c8 01       	movw	r24, r16
    30a2:	0e 94 51 08 	call	0x10a2	; 0x10a2 <uxListRemove>
    30a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30a8:	90 91 8d 18 	lds	r25, 0x188D	; 0x80188d <uxTopReadyPriority>
    30ac:	98 17       	cp	r25, r24
    30ae:	10 f4       	brcc	.+4      	; 0x30b4 <xTaskGenericNotify+0xae>
    30b0:	80 93 8d 18 	sts	0x188D, r24	; 0x80188d <uxTopReadyPriority>
    30b4:	2b e0       	ldi	r18, 0x0B	; 11
    30b6:	82 9f       	mul	r24, r18
    30b8:	c0 01       	movw	r24, r0
    30ba:	11 24       	eor	r1, r1
    30bc:	b8 01       	movw	r22, r16
    30be:	81 53       	subi	r24, 0x31	; 49
    30c0:	97 4e       	sbci	r25, 0xE7	; 231
    30c2:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInsertEnd>
    30c6:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    30ca:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    30ce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    30d2:	89 17       	cp	r24, r25
    30d4:	40 f4       	brcc	.+16     	; 0x30e6 <xTaskGenericNotify+0xe0>
    30d6:	0e 94 26 09 	call	0x124c	; 0x124c <vPortYield>
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	05 c0       	rjmp	.+10     	; 0x30e8 <xTaskGenericNotify+0xe2>
    30de:	80 e0       	ldi	r24, 0x00	; 0
    30e0:	03 c0       	rjmp	.+6      	; 0x30e8 <xTaskGenericNotify+0xe2>
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	01 c0       	rjmp	.+2      	; 0x30e8 <xTaskGenericNotify+0xe2>
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	0f 90       	pop	r0
    30ea:	0f be       	out	0x3f, r0	; 63
    30ec:	df 91       	pop	r29
    30ee:	cf 91       	pop	r28
    30f0:	1f 91       	pop	r17
    30f2:	0f 91       	pop	r16
    30f4:	08 95       	ret

000030f6 <xTaskGenericNotifyFromISR>:
    30f6:	ef 92       	push	r14
    30f8:	ff 92       	push	r15
    30fa:	0f 93       	push	r16
    30fc:	1f 93       	push	r17
    30fe:	cf 93       	push	r28
    3100:	df 93       	push	r29
    3102:	fc 01       	movw	r30, r24
    3104:	01 15       	cp	r16, r1
    3106:	11 05       	cpc	r17, r1
    3108:	49 f0       	breq	.+18     	; 0x311c <xTaskGenericNotifyFromISR+0x26>
    310a:	83 a5       	ldd	r24, Z+43	; 0x2b
    310c:	94 a5       	ldd	r25, Z+44	; 0x2c
    310e:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3110:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3112:	e8 01       	movw	r28, r16
    3114:	88 83       	st	Y, r24
    3116:	99 83       	std	Y+1, r25	; 0x01
    3118:	aa 83       	std	Y+2, r26	; 0x02
    311a:	bb 83       	std	Y+3, r27	; 0x03
    311c:	87 a5       	ldd	r24, Z+47	; 0x2f
    311e:	92 e0       	ldi	r25, 0x02	; 2
    3120:	97 a7       	std	Z+47, r25	; 0x2f
    3122:	22 30       	cpi	r18, 0x02	; 2
    3124:	b1 f0       	breq	.+44     	; 0x3152 <xTaskGenericNotifyFromISR+0x5c>
    3126:	18 f4       	brcc	.+6      	; 0x312e <xTaskGenericNotifyFromISR+0x38>
    3128:	21 30       	cpi	r18, 0x01	; 1
    312a:	31 f0       	breq	.+12     	; 0x3138 <xTaskGenericNotifyFromISR+0x42>
    312c:	2a c0       	rjmp	.+84     	; 0x3182 <xTaskGenericNotifyFromISR+0x8c>
    312e:	23 30       	cpi	r18, 0x03	; 3
    3130:	e9 f0       	breq	.+58     	; 0x316c <xTaskGenericNotifyFromISR+0x76>
    3132:	24 30       	cpi	r18, 0x04	; 4
    3134:	01 f1       	breq	.+64     	; 0x3176 <xTaskGenericNotifyFromISR+0x80>
    3136:	25 c0       	rjmp	.+74     	; 0x3182 <xTaskGenericNotifyFromISR+0x8c>
    3138:	03 a5       	ldd	r16, Z+43	; 0x2b
    313a:	14 a5       	ldd	r17, Z+44	; 0x2c
    313c:	25 a5       	ldd	r18, Z+45	; 0x2d
    313e:	36 a5       	ldd	r19, Z+46	; 0x2e
    3140:	40 2b       	or	r20, r16
    3142:	51 2b       	or	r21, r17
    3144:	62 2b       	or	r22, r18
    3146:	73 2b       	or	r23, r19
    3148:	43 a7       	std	Z+43, r20	; 0x2b
    314a:	54 a7       	std	Z+44, r21	; 0x2c
    314c:	65 a7       	std	Z+45, r22	; 0x2d
    314e:	76 a7       	std	Z+46, r23	; 0x2e
    3150:	18 c0       	rjmp	.+48     	; 0x3182 <xTaskGenericNotifyFromISR+0x8c>
    3152:	43 a5       	ldd	r20, Z+43	; 0x2b
    3154:	54 a5       	ldd	r21, Z+44	; 0x2c
    3156:	65 a5       	ldd	r22, Z+45	; 0x2d
    3158:	76 a5       	ldd	r23, Z+46	; 0x2e
    315a:	4f 5f       	subi	r20, 0xFF	; 255
    315c:	5f 4f       	sbci	r21, 0xFF	; 255
    315e:	6f 4f       	sbci	r22, 0xFF	; 255
    3160:	7f 4f       	sbci	r23, 0xFF	; 255
    3162:	43 a7       	std	Z+43, r20	; 0x2b
    3164:	54 a7       	std	Z+44, r21	; 0x2c
    3166:	65 a7       	std	Z+45, r22	; 0x2d
    3168:	76 a7       	std	Z+46, r23	; 0x2e
    316a:	0b c0       	rjmp	.+22     	; 0x3182 <xTaskGenericNotifyFromISR+0x8c>
    316c:	43 a7       	std	Z+43, r20	; 0x2b
    316e:	54 a7       	std	Z+44, r21	; 0x2c
    3170:	65 a7       	std	Z+45, r22	; 0x2d
    3172:	76 a7       	std	Z+46, r23	; 0x2e
    3174:	06 c0       	rjmp	.+12     	; 0x3182 <xTaskGenericNotifyFromISR+0x8c>
    3176:	82 30       	cpi	r24, 0x02	; 2
    3178:	d9 f1       	breq	.+118    	; 0x31f0 <xTaskGenericNotifyFromISR+0xfa>
    317a:	43 a7       	std	Z+43, r20	; 0x2b
    317c:	54 a7       	std	Z+44, r21	; 0x2c
    317e:	65 a7       	std	Z+45, r22	; 0x2d
    3180:	76 a7       	std	Z+46, r23	; 0x2e
    3182:	81 30       	cpi	r24, 0x01	; 1
    3184:	b9 f5       	brne	.+110    	; 0x31f4 <xTaskGenericNotifyFromISR+0xfe>
    3186:	ef 01       	movw	r28, r30
    3188:	80 91 81 18 	lds	r24, 0x1881	; 0x801881 <uxSchedulerSuspended>
    318c:	81 11       	cpse	r24, r1
    318e:	17 c0       	rjmp	.+46     	; 0x31be <xTaskGenericNotifyFromISR+0xc8>
    3190:	8f 01       	movw	r16, r30
    3192:	0e 5f       	subi	r16, 0xFE	; 254
    3194:	1f 4f       	sbci	r17, 0xFF	; 255
    3196:	c8 01       	movw	r24, r16
    3198:	0e 94 51 08 	call	0x10a2	; 0x10a2 <uxListRemove>
    319c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    319e:	90 91 8d 18 	lds	r25, 0x188D	; 0x80188d <uxTopReadyPriority>
    31a2:	98 17       	cp	r25, r24
    31a4:	10 f4       	brcc	.+4      	; 0x31aa <xTaskGenericNotifyFromISR+0xb4>
    31a6:	80 93 8d 18 	sts	0x188D, r24	; 0x80188d <uxTopReadyPriority>
    31aa:	eb e0       	ldi	r30, 0x0B	; 11
    31ac:	8e 9f       	mul	r24, r30
    31ae:	c0 01       	movw	r24, r0
    31b0:	11 24       	eor	r1, r1
    31b2:	b8 01       	movw	r22, r16
    31b4:	81 53       	subi	r24, 0x31	; 49
    31b6:	97 4e       	sbci	r25, 0xE7	; 231
    31b8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInsertEnd>
    31bc:	07 c0       	rjmp	.+14     	; 0x31cc <xTaskGenericNotifyFromISR+0xd6>
    31be:	bf 01       	movw	r22, r30
    31c0:	62 5f       	subi	r22, 0xF2	; 242
    31c2:	7f 4f       	sbci	r23, 0xFF	; 255
    31c4:	8a ea       	ldi	r24, 0xAA	; 170
    31c6:	98 e1       	ldi	r25, 0x18	; 24
    31c8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInsertEnd>
    31cc:	e0 91 fb 18 	lds	r30, 0x18FB	; 0x8018fb <pxCurrentTCB>
    31d0:	f0 91 fc 18 	lds	r31, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>
    31d4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    31d6:	82 8d       	ldd	r24, Z+26	; 0x1a
    31d8:	89 17       	cp	r24, r25
    31da:	70 f4       	brcc	.+28     	; 0x31f8 <xTaskGenericNotifyFromISR+0x102>
    31dc:	e1 14       	cp	r14, r1
    31de:	f1 04       	cpc	r15, r1
    31e0:	19 f0       	breq	.+6      	; 0x31e8 <xTaskGenericNotifyFromISR+0xf2>
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	e7 01       	movw	r28, r14
    31e6:	88 83       	st	Y, r24
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	80 93 8a 18 	sts	0x188A, r24	; 0x80188a <xYieldPending>
    31ee:	05 c0       	rjmp	.+10     	; 0x31fa <xTaskGenericNotifyFromISR+0x104>
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	03 c0       	rjmp	.+6      	; 0x31fa <xTaskGenericNotifyFromISR+0x104>
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	01 c0       	rjmp	.+2      	; 0x31fa <xTaskGenericNotifyFromISR+0x104>
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	df 91       	pop	r29
    31fc:	cf 91       	pop	r28
    31fe:	1f 91       	pop	r17
    3200:	0f 91       	pop	r16
    3202:	ff 90       	pop	r15
    3204:	ef 90       	pop	r14
    3206:	08 95       	ret

00003208 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3208:	00 97       	sbiw	r24, 0x00	; 0
    320a:	21 f4       	brne	.+8      	; 0x3214 <xTaskNotifyStateClear+0xc>
    320c:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <pxCurrentTCB>
    3210:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3214:	0f b6       	in	r0, 0x3f	; 63
    3216:	f8 94       	cli
    3218:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    321a:	fc 01       	movw	r30, r24
    321c:	27 a5       	ldd	r18, Z+47	; 0x2f
    321e:	22 30       	cpi	r18, 0x02	; 2
    3220:	19 f4       	brne	.+6      	; 0x3228 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3222:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	01 c0       	rjmp	.+2      	; 0x322a <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    3228:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    322a:	0f 90       	pop	r0
    322c:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    322e:	08 95       	ret

00003230 <prvInsertTimerInActiveList>:
    3230:	cf 92       	push	r12
    3232:	df 92       	push	r13
    3234:	ef 92       	push	r14
    3236:	ff 92       	push	r15
    3238:	0f 93       	push	r16
    323a:	1f 93       	push	r17
    323c:	fc 01       	movw	r30, r24
    323e:	42 83       	std	Z+2, r20	; 0x02
    3240:	53 83       	std	Z+3, r21	; 0x03
    3242:	64 83       	std	Z+4, r22	; 0x04
    3244:	75 83       	std	Z+5, r23	; 0x05
    3246:	93 87       	std	Z+11, r25	; 0x0b
    3248:	82 87       	std	Z+10, r24	; 0x0a
    324a:	04 17       	cp	r16, r20
    324c:	15 07       	cpc	r17, r21
    324e:	26 07       	cpc	r18, r22
    3250:	37 07       	cpc	r19, r23
    3252:	c0 f0       	brcs	.+48     	; 0x3284 <prvInsertTimerInActiveList+0x54>
    3254:	0c 19       	sub	r16, r12
    3256:	1d 09       	sbc	r17, r13
    3258:	2e 09       	sbc	r18, r14
    325a:	3f 09       	sbc	r19, r15
    325c:	86 85       	ldd	r24, Z+14	; 0x0e
    325e:	97 85       	ldd	r25, Z+15	; 0x0f
    3260:	a0 89       	ldd	r26, Z+16	; 0x10
    3262:	b1 89       	ldd	r27, Z+17	; 0x11
    3264:	08 17       	cp	r16, r24
    3266:	19 07       	cpc	r17, r25
    3268:	2a 07       	cpc	r18, r26
    326a:	3b 07       	cpc	r19, r27
    326c:	00 f5       	brcc	.+64     	; 0x32ae <prvInsertTimerInActiveList+0x7e>
    326e:	bf 01       	movw	r22, r30
    3270:	6e 5f       	subi	r22, 0xFE	; 254
    3272:	7f 4f       	sbci	r23, 0xFF	; 255
    3274:	80 91 05 19 	lds	r24, 0x1905	; 0x801905 <pxOverflowTimerList>
    3278:	90 91 06 19 	lds	r25, 0x1906	; 0x801906 <pxOverflowTimerList+0x1>
    327c:	0e 94 14 08 	call	0x1028	; 0x1028 <vListInsert>
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	18 c0       	rjmp	.+48     	; 0x32b4 <prvInsertTimerInActiveList+0x84>
    3284:	0c 15       	cp	r16, r12
    3286:	1d 05       	cpc	r17, r13
    3288:	2e 05       	cpc	r18, r14
    328a:	3f 05       	cpc	r19, r15
    328c:	28 f4       	brcc	.+10     	; 0x3298 <prvInsertTimerInActiveList+0x68>
    328e:	4c 15       	cp	r20, r12
    3290:	5d 05       	cpc	r21, r13
    3292:	6e 05       	cpc	r22, r14
    3294:	7f 05       	cpc	r23, r15
    3296:	68 f4       	brcc	.+26     	; 0x32b2 <prvInsertTimerInActiveList+0x82>
    3298:	bf 01       	movw	r22, r30
    329a:	6e 5f       	subi	r22, 0xFE	; 254
    329c:	7f 4f       	sbci	r23, 0xFF	; 255
    329e:	80 91 07 19 	lds	r24, 0x1907	; 0x801907 <pxCurrentTimerList>
    32a2:	90 91 08 19 	lds	r25, 0x1908	; 0x801908 <pxCurrentTimerList+0x1>
    32a6:	0e 94 14 08 	call	0x1028	; 0x1028 <vListInsert>
    32aa:	80 e0       	ldi	r24, 0x00	; 0
    32ac:	03 c0       	rjmp	.+6      	; 0x32b4 <prvInsertTimerInActiveList+0x84>
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	01 c0       	rjmp	.+2      	; 0x32b4 <prvInsertTimerInActiveList+0x84>
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	1f 91       	pop	r17
    32b6:	0f 91       	pop	r16
    32b8:	ff 90       	pop	r15
    32ba:	ef 90       	pop	r14
    32bc:	df 90       	pop	r13
    32be:	cf 90       	pop	r12
    32c0:	08 95       	ret

000032c2 <prvCheckForValidListAndQueue>:
    32c2:	0f b6       	in	r0, 0x3f	; 63
    32c4:	f8 94       	cli
    32c6:	0f 92       	push	r0
    32c8:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <xTimerQueue>
    32cc:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <xTimerQueue+0x1>
    32d0:	89 2b       	or	r24, r25
    32d2:	e9 f4       	brne	.+58     	; 0x330e <prvCheckForValidListAndQueue+0x4c>
    32d4:	84 e1       	ldi	r24, 0x14	; 20
    32d6:	99 e1       	ldi	r25, 0x19	; 25
    32d8:	0e 94 de 07 	call	0xfbc	; 0xfbc <vListInitialise>
    32dc:	89 e0       	ldi	r24, 0x09	; 9
    32de:	99 e1       	ldi	r25, 0x19	; 25
    32e0:	0e 94 de 07 	call	0xfbc	; 0xfbc <vListInitialise>
    32e4:	84 e1       	ldi	r24, 0x14	; 20
    32e6:	99 e1       	ldi	r25, 0x19	; 25
    32e8:	90 93 08 19 	sts	0x1908, r25	; 0x801908 <pxCurrentTimerList+0x1>
    32ec:	80 93 07 19 	sts	0x1907, r24	; 0x801907 <pxCurrentTimerList>
    32f0:	89 e0       	ldi	r24, 0x09	; 9
    32f2:	99 e1       	ldi	r25, 0x19	; 25
    32f4:	90 93 06 19 	sts	0x1906, r25	; 0x801906 <pxOverflowTimerList+0x1>
    32f8:	80 93 05 19 	sts	0x1905, r24	; 0x801905 <pxOverflowTimerList>
    32fc:	40 e0       	ldi	r20, 0x00	; 0
    32fe:	67 e0       	ldi	r22, 0x07	; 7
    3300:	8a e0       	ldi	r24, 0x0A	; 10
    3302:	0e 94 02 0b 	call	0x1604	; 0x1604 <xQueueGenericCreate>
    3306:	90 93 04 19 	sts	0x1904, r25	; 0x801904 <xTimerQueue+0x1>
    330a:	80 93 03 19 	sts	0x1903, r24	; 0x801903 <xTimerQueue>
    330e:	0f 90       	pop	r0
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	08 95       	ret

00003314 <xTimerCreateTimerTask>:
    3314:	ef 92       	push	r14
    3316:	ff 92       	push	r15
    3318:	0f 93       	push	r16
    331a:	d3 df       	rcall	.-90     	; 0x32c2 <prvCheckForValidListAndQueue>
    331c:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <xTimerQueue>
    3320:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <xTimerQueue+0x1>
    3324:	89 2b       	or	r24, r25
    3326:	91 f0       	breq	.+36     	; 0x334c <xTimerCreateTimerTask+0x38>
    3328:	0f 2e       	mov	r0, r31
    332a:	f1 e0       	ldi	r31, 0x01	; 1
    332c:	ef 2e       	mov	r14, r31
    332e:	f9 e1       	ldi	r31, 0x19	; 25
    3330:	ff 2e       	mov	r15, r31
    3332:	f0 2d       	mov	r31, r0
    3334:	03 e0       	ldi	r16, 0x03	; 3
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	45 e5       	ldi	r20, 0x55	; 85
    333c:	50 e0       	ldi	r21, 0x00	; 0
    333e:	6c e2       	ldi	r22, 0x2C	; 44
    3340:	74 e0       	ldi	r23, 0x04	; 4
    3342:	84 e0       	ldi	r24, 0x04	; 4
    3344:	91 e0       	ldi	r25, 0x01	; 1
    3346:	0e 94 2b 11 	call	0x2256	; 0x2256 <xTaskCreate>
    334a:	01 c0       	rjmp	.+2      	; 0x334e <xTimerCreateTimerTask+0x3a>
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	0f 91       	pop	r16
    3350:	ff 90       	pop	r15
    3352:	ef 90       	pop	r14
    3354:	08 95       	ret

00003356 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3356:	8f 92       	push	r8
    3358:	9f 92       	push	r9
    335a:	af 92       	push	r10
    335c:	bf 92       	push	r11
    335e:	cf 92       	push	r12
    3360:	df 92       	push	r13
    3362:	ef 92       	push	r14
    3364:	ff 92       	push	r15
    3366:	0f 93       	push	r16
    3368:	1f 93       	push	r17
    336a:	cf 93       	push	r28
    336c:	df 93       	push	r29
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
    3372:	27 97       	sbiw	r28, 0x07	; 7
    3374:	0f b6       	in	r0, 0x3f	; 63
    3376:	f8 94       	cli
    3378:	de bf       	out	0x3e, r29	; 62
    337a:	0f be       	out	0x3f, r0	; 63
    337c:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    337e:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <xTimerQueue>
    3382:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <xTimerQueue+0x1>
    3386:	30 97       	sbiw	r30, 0x00	; 0
    3388:	81 f1       	breq	.+96     	; 0x33ea <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    338a:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    338c:	2a 83       	std	Y+2, r18	; 0x02
    338e:	3b 83       	std	Y+3, r19	; 0x03
    3390:	4c 83       	std	Y+4, r20	; 0x04
    3392:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3394:	9f 83       	std	Y+7, r25	; 0x07
    3396:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3398:	66 30       	cpi	r22, 0x06	; 6
    339a:	f4 f4       	brge	.+60     	; 0x33d8 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    339c:	68 dc       	rcall	.-1840   	; 0x2c6e <xTaskGetSchedulerState>
    339e:	82 30       	cpi	r24, 0x02	; 2
    33a0:	69 f4       	brne	.+26     	; 0x33bc <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    33a2:	00 e0       	ldi	r16, 0x00	; 0
    33a4:	a7 01       	movw	r20, r14
    33a6:	96 01       	movw	r18, r12
    33a8:	be 01       	movw	r22, r28
    33aa:	6f 5f       	subi	r22, 0xFF	; 255
    33ac:	7f 4f       	sbci	r23, 0xFF	; 255
    33ae:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <xTimerQueue>
    33b2:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <xTimerQueue+0x1>
    33b6:	0e 94 30 0b 	call	0x1660	; 0x1660 <xQueueGenericSend>
    33ba:	18 c0       	rjmp	.+48     	; 0x33ec <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    33bc:	00 e0       	ldi	r16, 0x00	; 0
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	a9 01       	movw	r20, r18
    33c4:	be 01       	movw	r22, r28
    33c6:	6f 5f       	subi	r22, 0xFF	; 255
    33c8:	7f 4f       	sbci	r23, 0xFF	; 255
    33ca:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <xTimerQueue>
    33ce:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <xTimerQueue+0x1>
    33d2:	0e 94 30 0b 	call	0x1660	; 0x1660 <xQueueGenericSend>
    33d6:	0a c0       	rjmp	.+20     	; 0x33ec <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	a8 01       	movw	r20, r16
    33dc:	be 01       	movw	r22, r28
    33de:	6f 5f       	subi	r22, 0xFF	; 255
    33e0:	7f 4f       	sbci	r23, 0xFF	; 255
    33e2:	cf 01       	movw	r24, r30
    33e4:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <xQueueGenericSendFromISR>
    33e8:	01 c0       	rjmp	.+2      	; 0x33ec <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    33ea:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    33ec:	27 96       	adiw	r28, 0x07	; 7
    33ee:	0f b6       	in	r0, 0x3f	; 63
    33f0:	f8 94       	cli
    33f2:	de bf       	out	0x3e, r29	; 62
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	cd bf       	out	0x3d, r28	; 61
    33f8:	df 91       	pop	r29
    33fa:	cf 91       	pop	r28
    33fc:	1f 91       	pop	r17
    33fe:	0f 91       	pop	r16
    3400:	ff 90       	pop	r15
    3402:	ef 90       	pop	r14
    3404:	df 90       	pop	r13
    3406:	cf 90       	pop	r12
    3408:	bf 90       	pop	r11
    340a:	af 90       	pop	r10
    340c:	9f 90       	pop	r9
    340e:	8f 90       	pop	r8
    3410:	08 95       	ret

00003412 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3412:	2f 92       	push	r2
    3414:	3f 92       	push	r3
    3416:	4f 92       	push	r4
    3418:	5f 92       	push	r5
    341a:	6f 92       	push	r6
    341c:	7f 92       	push	r7
    341e:	8f 92       	push	r8
    3420:	9f 92       	push	r9
    3422:	af 92       	push	r10
    3424:	bf 92       	push	r11
    3426:	cf 92       	push	r12
    3428:	df 92       	push	r13
    342a:	ef 92       	push	r14
    342c:	ff 92       	push	r15
    342e:	0f 93       	push	r16
    3430:	1f 93       	push	r17
    3432:	cf 93       	push	r28
    3434:	df 93       	push	r29
    3436:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3438:	6f d8       	rcall	.-3874   	; 0x2518 <xTaskGetTickCount>
    343a:	2b 01       	movw	r4, r22
    343c:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    343e:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <xLastTime.2432>
    3442:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <xLastTime.2432+0x1>
    3446:	a0 91 ff 18 	lds	r26, 0x18FF	; 0x8018ff <xLastTime.2432+0x2>
    344a:	b0 91 00 19 	lds	r27, 0x1900	; 0x801900 <xLastTime.2432+0x3>
    344e:	48 16       	cp	r4, r24
    3450:	59 06       	cpc	r5, r25
    3452:	6a 06       	cpc	r6, r26
    3454:	7b 06       	cpc	r7, r27
    3456:	08 f0       	brcs	.+2      	; 0x345a <prvSampleTimeNow+0x48>
    3458:	53 c0       	rjmp	.+166    	; 0x3500 <prvSampleTimeNow+0xee>
    345a:	3b c0       	rjmp	.+118    	; 0x34d2 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    345c:	07 80       	ldd	r0, Z+7	; 0x07
    345e:	f0 85       	ldd	r31, Z+8	; 0x08
    3460:	e0 2d       	mov	r30, r0
    3462:	80 80       	ld	r8, Z
    3464:	91 80       	ldd	r9, Z+1	; 0x01
    3466:	a2 80       	ldd	r10, Z+2	; 0x02
    3468:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    346a:	c0 85       	ldd	r28, Z+8	; 0x08
    346c:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    346e:	8e 01       	movw	r16, r28
    3470:	0e 5f       	subi	r16, 0xFE	; 254
    3472:	1f 4f       	sbci	r17, 0xFF	; 255
    3474:	c8 01       	movw	r24, r16
    3476:	0e 94 51 08 	call	0x10a2	; 0x10a2 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    347a:	ec 89       	ldd	r30, Y+20	; 0x14
    347c:	fd 89       	ldd	r31, Y+21	; 0x15
    347e:	ce 01       	movw	r24, r28
    3480:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3482:	8f 89       	ldd	r24, Y+23	; 0x17
    3484:	82 ff       	sbrs	r24, 2
    3486:	25 c0       	rjmp	.+74     	; 0x34d2 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3488:	8e 85       	ldd	r24, Y+14	; 0x0e
    348a:	9f 85       	ldd	r25, Y+15	; 0x0f
    348c:	a8 89       	ldd	r26, Y+16	; 0x10
    348e:	b9 89       	ldd	r27, Y+17	; 0x11
    3490:	88 0d       	add	r24, r8
    3492:	99 1d       	adc	r25, r9
    3494:	aa 1d       	adc	r26, r10
    3496:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    3498:	88 16       	cp	r8, r24
    349a:	99 06       	cpc	r9, r25
    349c:	aa 06       	cpc	r10, r26
    349e:	bb 06       	cpc	r11, r27
    34a0:	70 f4       	brcc	.+28     	; 0x34be <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    34a2:	8a 83       	std	Y+2, r24	; 0x02
    34a4:	9b 83       	std	Y+3, r25	; 0x03
    34a6:	ac 83       	std	Y+4, r26	; 0x04
    34a8:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    34aa:	db 87       	std	Y+11, r29	; 0x0b
    34ac:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    34ae:	b8 01       	movw	r22, r16
    34b0:	80 91 07 19 	lds	r24, 0x1907	; 0x801907 <pxCurrentTimerList>
    34b4:	90 91 08 19 	lds	r25, 0x1908	; 0x801908 <pxCurrentTimerList+0x1>
    34b8:	0e 94 14 08 	call	0x1028	; 0x1028 <vListInsert>
    34bc:	0a c0       	rjmp	.+20     	; 0x34d2 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    34be:	c1 2c       	mov	r12, r1
    34c0:	d1 2c       	mov	r13, r1
    34c2:	76 01       	movw	r14, r12
    34c4:	00 e0       	ldi	r16, 0x00	; 0
    34c6:	10 e0       	ldi	r17, 0x00	; 0
    34c8:	a5 01       	movw	r20, r10
    34ca:	94 01       	movw	r18, r8
    34cc:	60 e0       	ldi	r22, 0x00	; 0
    34ce:	ce 01       	movw	r24, r28
    34d0:	42 df       	rcall	.-380    	; 0x3356 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    34d2:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <pxCurrentTimerList>
    34d6:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <pxCurrentTimerList+0x1>
    34da:	80 81       	ld	r24, Z
    34dc:	81 11       	cpse	r24, r1
    34de:	be cf       	rjmp	.-132    	; 0x345c <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    34e0:	80 91 05 19 	lds	r24, 0x1905	; 0x801905 <pxOverflowTimerList>
    34e4:	90 91 06 19 	lds	r25, 0x1906	; 0x801906 <pxOverflowTimerList+0x1>
    34e8:	90 93 08 19 	sts	0x1908, r25	; 0x801908 <pxCurrentTimerList+0x1>
    34ec:	80 93 07 19 	sts	0x1907, r24	; 0x801907 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    34f0:	f0 93 06 19 	sts	0x1906, r31	; 0x801906 <pxOverflowTimerList+0x1>
    34f4:	e0 93 05 19 	sts	0x1905, r30	; 0x801905 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	f1 01       	movw	r30, r2
    34fc:	80 83       	st	Z, r24
    34fe:	02 c0       	rjmp	.+4      	; 0x3504 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3500:	f1 01       	movw	r30, r2
    3502:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3504:	40 92 fd 18 	sts	0x18FD, r4	; 0x8018fd <xLastTime.2432>
    3508:	50 92 fe 18 	sts	0x18FE, r5	; 0x8018fe <xLastTime.2432+0x1>
    350c:	60 92 ff 18 	sts	0x18FF, r6	; 0x8018ff <xLastTime.2432+0x2>
    3510:	70 92 00 19 	sts	0x1900, r7	; 0x801900 <xLastTime.2432+0x3>

    return xTimeNow;
}
    3514:	c3 01       	movw	r24, r6
    3516:	b2 01       	movw	r22, r4
    3518:	df 91       	pop	r29
    351a:	cf 91       	pop	r28
    351c:	1f 91       	pop	r17
    351e:	0f 91       	pop	r16
    3520:	ff 90       	pop	r15
    3522:	ef 90       	pop	r14
    3524:	df 90       	pop	r13
    3526:	cf 90       	pop	r12
    3528:	bf 90       	pop	r11
    352a:	af 90       	pop	r10
    352c:	9f 90       	pop	r9
    352e:	8f 90       	pop	r8
    3530:	7f 90       	pop	r7
    3532:	6f 90       	pop	r6
    3534:	5f 90       	pop	r5
    3536:	4f 90       	pop	r4
    3538:	3f 90       	pop	r3
    353a:	2f 90       	pop	r2
    353c:	08 95       	ret

0000353e <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    353e:	08 95       	ret

00003540 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3540:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3542:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3544:	2f ef       	ldi	r18, 0xFF	; 255
    3546:	80 e7       	ldi	r24, 0x70	; 112
    3548:	92 e0       	ldi	r25, 0x02	; 2
    354a:	21 50       	subi	r18, 0x01	; 1
    354c:	80 40       	sbci	r24, 0x00	; 0
    354e:	90 40       	sbci	r25, 0x00	; 0
    3550:	e1 f7       	brne	.-8      	; 0x354a <vApplicationMallocFailedHook+0xa>
    3552:	00 c0       	rjmp	.+0      	; 0x3554 <vApplicationMallocFailedHook+0x14>
    3554:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    3556:	1f 9a       	sbi	0x03, 7	; 3
    3558:	f5 cf       	rjmp	.-22     	; 0x3544 <vApplicationMallocFailedHook+0x4>

0000355a <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    355a:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    355c:	2f 9a       	sbi	0x05, 7	; 5
    355e:	2f ef       	ldi	r18, 0xFF	; 255
    3560:	87 ea       	ldi	r24, 0xA7	; 167
    3562:	91 e6       	ldi	r25, 0x61	; 97
    3564:	21 50       	subi	r18, 0x01	; 1
    3566:	80 40       	sbci	r24, 0x00	; 0
    3568:	90 40       	sbci	r25, 0x00	; 0
    356a:	e1 f7       	brne	.-8      	; 0x3564 <vApplicationStackOverflowHook+0xa>
    356c:	00 c0       	rjmp	.+0      	; 0x356e <vApplicationStackOverflowHook+0x14>
    356e:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    3570:	1f 9a       	sbi	0x03, 7	; 3
    3572:	f5 cf       	rjmp	.-22     	; 0x355e <vApplicationStackOverflowHook+0x4>

00003574 <hum_temp_task>:
		if((measureBits & (Hum_temp_measure_bit)) == (Hum_temp_measure_bit)){
			
				driver_ready_check = hih8120Wakeup();
				while (driver_ready_check != HIH8120_OK)
				{
					printf("%s%i%s\n", "Something went wrong with HIH8120 wakeup call! Return value was: ", driver_ready_check," . Retrying...");
    3574:	0f 2e       	mov	r0, r31
    3576:	fe e6       	ldi	r31, 0x6E	; 110
    3578:	af 2e       	mov	r10, r31
    357a:	f2 e0       	ldi	r31, 0x02	; 2
    357c:	bf 2e       	mov	r11, r31
    357e:	f0 2d       	mov	r31, r0
    3580:	0f 2e       	mov	r0, r31
    3582:	f4 e3       	ldi	r31, 0x34	; 52
    3584:	8f 2e       	mov	r8, r31
    3586:	f4 e0       	ldi	r31, 0x04	; 4
    3588:	9f 2e       	mov	r9, r31
    358a:	f0 2d       	mov	r31, r0
    358c:	c9 ea       	ldi	r28, 0xA9	; 169
    358e:	d2 e0       	ldi	r29, 0x02	; 2
				
				driver_ready_check = hih8120Meassure();
				
				while (driver_ready_check != HIH8120_OK)
				{
					printf("%s%i%s\n", "Something went wrong with HIH8120 measure call! Return value was: ", driver_ready_check," . Retrying...");
    3590:	0f 2e       	mov	r0, r31
    3592:	f6 e7       	ldi	r31, 0x76	; 118
    3594:	6f 2e       	mov	r6, r31
    3596:	f4 e0       	ldi	r31, 0x04	; 4
    3598:	7f 2e       	mov	r7, r31
    359a:	f0 2d       	mov	r31, r0
			
				setHumidity(hih8120GetHumidity());
				setTemperature(hih8120GetTemperature());
				
				
				printf("%s%i%s\n", "Arduino humidity level: ", (int)getHumidity(), "%");
    359c:	0f 2e       	mov	r0, r31
    359e:	f9 eb       	ldi	r31, 0xB9	; 185
    35a0:	4f 2e       	mov	r4, r31
    35a2:	f4 e0       	ldi	r31, 0x04	; 4
    35a4:	5f 2e       	mov	r5, r31
    35a6:	f0 2d       	mov	r31, r0
    35a8:	0f 2e       	mov	r0, r31
    35aa:	fb eb       	ldi	r31, 0xBB	; 187
    35ac:	2f 2e       	mov	r2, r31
    35ae:	f4 e0       	ldi	r31, 0x04	; 4
    35b0:	3f 2e       	mov	r3, r31
    35b2:	f0 2d       	mov	r31, r0
{

	for (;;) 
	{
		
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, Hum_temp_measure_bit, pdTRUE, pdTRUE, 500);
    35b4:	0f 2e       	mov	r0, r31
    35b6:	f4 ef       	ldi	r31, 0xF4	; 244
    35b8:	cf 2e       	mov	r12, r31
    35ba:	dd 24       	eor	r13, r13
    35bc:	d3 94       	inc	r13
    35be:	e1 2c       	mov	r14, r1
    35c0:	f1 2c       	mov	r15, r1
    35c2:	f0 2d       	mov	r31, r0
    35c4:	01 e0       	ldi	r16, 0x01	; 1
    35c6:	21 e0       	ldi	r18, 0x01	; 1
    35c8:	42 e0       	ldi	r20, 0x02	; 2
    35ca:	50 e0       	ldi	r21, 0x00	; 0
    35cc:	60 e0       	ldi	r22, 0x00	; 0
    35ce:	70 e0       	ldi	r23, 0x00	; 0
    35d0:	80 91 7f 1a 	lds	r24, 0x1A7F	; 0x801a7f <Measure_event_group>
    35d4:	90 91 80 1a 	lds	r25, 0x1A80	; 0x801a80 <Measure_event_group+0x1>
    35d8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <xEventGroupWaitBits>
		
		if((measureBits & (Hum_temp_measure_bit)) == (Hum_temp_measure_bit)){
    35dc:	61 ff       	sbrs	r22, 1
    35de:	ea cf       	rjmp	.-44     	; 0x35b4 <hum_temp_task+0x40>
			
				driver_ready_check = hih8120Wakeup();
    35e0:	00 d2       	rcall	.+1024   	; 0x39e2 <hih8120Wakeup>
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	90 93 91 1a 	sts	0x1A91, r25	; 0x801a91 <driver_ready_check+0x1>
    35e8:	80 93 90 1a 	sts	0x1A90, r24	; 0x801a90 <driver_ready_check>
				while (driver_ready_check != HIH8120_OK)
    35ec:	00 97       	sbiw	r24, 0x00	; 0
    35ee:	01 f1       	breq	.+64     	; 0x3630 <hum_temp_task+0xbc>
				{
					printf("%s%i%s\n", "Something went wrong with HIH8120 wakeup call! Return value was: ", driver_ready_check," . Retrying...");
    35f0:	bf 92       	push	r11
    35f2:	af 92       	push	r10
    35f4:	9f 93       	push	r25
    35f6:	8f 93       	push	r24
    35f8:	9f 92       	push	r9
    35fa:	8f 92       	push	r8
    35fc:	df 93       	push	r29
    35fe:	cf 93       	push	r28
    3600:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <printf>
					vTaskDelay(50);
    3604:	62 e3       	ldi	r22, 0x32	; 50
    3606:	70 e0       	ldi	r23, 0x00	; 0
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	90 e0       	ldi	r25, 0x00	; 0
					driver_ready_check = hih8120Wakeup();
    360c:	42 d9       	rcall	.-3452   	; 0x2892 <vTaskDelay>
    360e:	e9 d1       	rcall	.+978    	; 0x39e2 <hih8120Wakeup>
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	90 93 91 1a 	sts	0x1A91, r25	; 0x801a91 <driver_ready_check+0x1>
    3616:	80 93 90 1a 	sts	0x1A90, r24	; 0x801a90 <driver_ready_check>
		EventBits_t measureBits = xEventGroupWaitBits(Measure_event_group, Hum_temp_measure_bit, pdTRUE, pdTRUE, 500);
		
		if((measureBits & (Hum_temp_measure_bit)) == (Hum_temp_measure_bit)){
			
				driver_ready_check = hih8120Wakeup();
				while (driver_ready_check != HIH8120_OK)
    361a:	2d b7       	in	r18, 0x3d	; 61
    361c:	3e b7       	in	r19, 0x3e	; 62
    361e:	28 5f       	subi	r18, 0xF8	; 248
    3620:	3f 4f       	sbci	r19, 0xFF	; 255
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	3e bf       	out	0x3e, r19	; 62
    3628:	0f be       	out	0x3f, r0	; 63
    362a:	2d bf       	out	0x3d, r18	; 61
    362c:	00 97       	sbiw	r24, 0x00	; 0
    362e:	01 f7       	brne	.-64     	; 0x35f0 <hum_temp_task+0x7c>
					
				}
				//if (HIH8120_OK != driver_ready_check)
				//printf("%s", "Something went wrong with HIH8120 wakeup call! Return value was: ", driver_ready_check);

				vTaskDelay(60); // necessary wait delay after calling wakeup
    3630:	6c e3       	ldi	r22, 0x3C	; 60
    3632:	70 e0       	ldi	r23, 0x00	; 0
    3634:	80 e0       	ldi	r24, 0x00	; 0
    3636:	90 e0       	ldi	r25, 0x00	; 0
				
				driver_ready_check = hih8120Meassure();
    3638:	2c d9       	rcall	.-3496   	; 0x2892 <vTaskDelay>
    363a:	e8 d1       	rcall	.+976    	; 0x3a0c <hih8120Meassure>
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	90 93 91 1a 	sts	0x1A91, r25	; 0x801a91 <driver_ready_check+0x1>
    3642:	80 93 90 1a 	sts	0x1A90, r24	; 0x801a90 <driver_ready_check>
				
				while (driver_ready_check != HIH8120_OK)
    3646:	00 97       	sbiw	r24, 0x00	; 0
    3648:	01 f1       	breq	.+64     	; 0x368a <hum_temp_task+0x116>
				{
					printf("%s%i%s\n", "Something went wrong with HIH8120 measure call! Return value was: ", driver_ready_check," . Retrying...");
    364a:	bf 92       	push	r11
    364c:	af 92       	push	r10
    364e:	9f 93       	push	r25
    3650:	8f 93       	push	r24
    3652:	7f 92       	push	r7
    3654:	6f 92       	push	r6
    3656:	df 93       	push	r29
    3658:	cf 93       	push	r28
    365a:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <printf>
					vTaskDelay(50);
    365e:	62 e3       	ldi	r22, 0x32	; 50
    3660:	70 e0       	ldi	r23, 0x00	; 0
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	90 e0       	ldi	r25, 0x00	; 0
					driver_ready_check = hih8120Meassure();
    3666:	15 d9       	rcall	.-3542   	; 0x2892 <vTaskDelay>
    3668:	d1 d1       	rcall	.+930    	; 0x3a0c <hih8120Meassure>
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	90 93 91 1a 	sts	0x1A91, r25	; 0x801a91 <driver_ready_check+0x1>
    3670:	80 93 90 1a 	sts	0x1A90, r24	; 0x801a90 <driver_ready_check>

				vTaskDelay(60); // necessary wait delay after calling wakeup
				
				driver_ready_check = hih8120Meassure();
				
				while (driver_ready_check != HIH8120_OK)
    3674:	2d b7       	in	r18, 0x3d	; 61
    3676:	3e b7       	in	r19, 0x3e	; 62
    3678:	28 5f       	subi	r18, 0xF8	; 248
    367a:	3f 4f       	sbci	r19, 0xFF	; 255
    367c:	0f b6       	in	r0, 0x3f	; 63
    367e:	f8 94       	cli
    3680:	3e bf       	out	0x3e, r19	; 62
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	2d bf       	out	0x3d, r18	; 61
					printf("%s%i%s\n", "Something went wrong with HIH8120 measure call! Return value was: ", driver_ready_check," . Retrying...");
					vTaskDelay(50);
					driver_ready_check = hih8120Meassure();
				}
				
				vTaskDelay(20); // giving it some time to get the values
    3686:	00 97       	sbiw	r24, 0x00	; 0
    3688:	01 f7       	brne	.-64     	; 0x364a <hum_temp_task+0xd6>
    368a:	64 e1       	ldi	r22, 0x14	; 20
    368c:	70 e0       	ldi	r23, 0x00	; 0
    368e:	80 e0       	ldi	r24, 0x00	; 0
			
				setHumidity(hih8120GetHumidity());
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	ff d8       	rcall	.-3586   	; 0x2892 <vTaskDelay>
    3694:	cc d1       	rcall	.+920    	; 0x3a2e <hih8120GetHumidity>
				setTemperature(hih8120GetTemperature());
    3696:	0e 94 a9 04 	call	0x952	; 0x952 <setHumidity>
    369a:	de d1       	rcall	.+956    	; 0x3a58 <hih8120GetTemperature>
    369c:	0e 94 ef 04 	call	0x9de	; 0x9de <setTemperature>
				
				
				printf("%s%i%s\n", "Arduino humidity level: ", (int)getHumidity(), "%");
    36a0:	0e 94 92 04 	call	0x924	; 0x924 <getHumidity>
    36a4:	5f 92       	push	r5
    36a6:	4f 92       	push	r4
    36a8:	cb d0       	rcall	.+406    	; 0x3840 <__fixsfsi>
    36aa:	7f 93       	push	r23
    36ac:	6f 93       	push	r22
    36ae:	3f 92       	push	r3
    36b0:	2f 92       	push	r2
    36b2:	df 93       	push	r29
    36b4:	cf 93       	push	r28
    36b6:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <printf>
				printf("%s%i%s\n","Arduino temperature: ", (int)getTemperature(), "C");
    36ba:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <getTemperature>
    36be:	24 ed       	ldi	r18, 0xD4	; 212
    36c0:	34 e0       	ldi	r19, 0x04	; 4
    36c2:	3f 93       	push	r19
    36c4:	2f 93       	push	r18
    36c6:	bc d0       	rcall	.+376    	; 0x3840 <__fixsfsi>
    36c8:	7f 93       	push	r23
    36ca:	6f 93       	push	r22
    36cc:	86 ed       	ldi	r24, 0xD6	; 214
    36ce:	94 e0       	ldi	r25, 0x04	; 4
    36d0:	9f 93       	push	r25
    36d2:	8f 93       	push	r24
    36d4:	df 93       	push	r29
    36d6:	cf 93       	push	r28
    36d8:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <printf>
				xEventGroupSetBits(Data_event_group, Hum_temp_data_bit);
    36dc:	48 e0       	ldi	r20, 0x08	; 8
    36de:	50 e0       	ldi	r21, 0x00	; 0
    36e0:	60 e0       	ldi	r22, 0x00	; 0
    36e2:	70 e0       	ldi	r23, 0x00	; 0
    36e4:	80 91 7d 1a 	lds	r24, 0x1A7D	; 0x801a7d <Data_event_group>
    36e8:	90 91 7e 1a 	lds	r25, 0x1A7E	; 0x801a7e <Data_event_group+0x1>
    36ec:	0e 94 0e 06 	call	0xc1c	; 0xc1c <xEventGroupSetBits>
    36f0:	8d b7       	in	r24, 0x3d	; 61
    36f2:	9e b7       	in	r25, 0x3e	; 62
    36f4:	40 96       	adiw	r24, 0x10	; 16
    36f6:	0f b6       	in	r0, 0x3f	; 63
    36f8:	f8 94       	cli
    36fa:	9e bf       	out	0x3e, r25	; 62
    36fc:	0f be       	out	0x3f, r0	; 63
    36fe:	8d bf       	out	0x3d, r24	; 61
    3700:	59 cf       	rjmp	.-334    	; 0x35b4 <hum_temp_task+0x40>

00003702 <HumidityTemperatureSensor_create>:

	
void hum_temp_task(void *pvParameters);

void HumidityTemperatureSensor_create()
{
    3702:	ef 92       	push	r14
    3704:	ff 92       	push	r15
    3706:	0f 93       	push	r16
	hih8120Create(); 
    3708:	54 d1       	rcall	.+680    	; 0x39b2 <hih8120Create>
	
	xTaskCreate(
    370a:	e1 2c       	mov	r14, r1
    370c:	f1 2c       	mov	r15, r1
    370e:	03 e0       	ldi	r16, 0x03	; 3
    3710:	20 e0       	ldi	r18, 0x00	; 0
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	48 e8       	ldi	r20, 0x88	; 136
    3716:	51 e0       	ldi	r21, 0x01	; 1
    3718:	6c ee       	ldi	r22, 0xEC	; 236
    371a:	74 e0       	ldi	r23, 0x04	; 4
    371c:	8a eb       	ldi	r24, 0xBA	; 186
    371e:	9a e1       	ldi	r25, 0x1A	; 26
    3720:	0e 94 2b 11 	call	0x2256	; 0x2256 <xTaskCreate>
		configMINIMAL_STACK_SIZE+200,  // This stack size can be checked & adjusted by reading the Stack Highwater
		NULL,
		3,  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
		NULL
	 );
}
    3724:	0f 91       	pop	r16
    3726:	ff 90       	pop	r15
    3728:	ef 90       	pop	r14
    372a:	08 95       	ret

0000372c <create_tasks_and_semaphores>:



/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{	
    372c:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	
	if ( Mutex_CO2 == NULL )  // Check to confirm that the Semaphore has not already been created.
    372e:	80 91 84 1a 	lds	r24, 0x1A84	; 0x801a84 <Mutex_CO2>
    3732:	90 91 85 1a 	lds	r25, 0x1A85	; 0x801a85 <Mutex_CO2+0x1>
    3736:	89 2b       	or	r24, r25
    3738:	89 f4       	brne	.+34     	; 0x375c <create_tasks_and_semaphores+0x30>
	{
		Mutex_CO2 = xSemaphoreCreateMutex();  // Create a MUTEX semaphore.
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <xQueueCreateMutex>
    3740:	90 93 85 1a 	sts	0x1A85, r25	; 0x801a85 <Mutex_CO2+0x1>
    3744:	80 93 84 1a 	sts	0x1A84, r24	; 0x801a84 <Mutex_CO2>
		if ( ( Mutex_CO2 ) != NULL )
    3748:	00 97       	sbiw	r24, 0x00	; 0
    374a:	41 f0       	breq	.+16     	; 0x375c <create_tasks_and_semaphores+0x30>
		{
			xSemaphoreGive( ( Mutex_CO2 ) );  // Make the MUTEX available for use, by initially "Giving" the Semaphore.
    374c:	00 e0       	ldi	r16, 0x00	; 0
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	a9 01       	movw	r20, r18
    3754:	60 e0       	ldi	r22, 0x00	; 0
    3756:	70 e0       	ldi	r23, 0x00	; 0
    3758:	0e 94 30 0b 	call	0x1660	; 0x1660 <xQueueGenericSend>
		}
	}
	
	if ( Mutex_humidity == NULL )  // Check to confirm that the Semaphore has not already been created.
    375c:	80 91 7b 1a 	lds	r24, 0x1A7B	; 0x801a7b <Mutex_humidity>
    3760:	90 91 7c 1a 	lds	r25, 0x1A7C	; 0x801a7c <Mutex_humidity+0x1>
    3764:	89 2b       	or	r24, r25
    3766:	89 f4       	brne	.+34     	; 0x378a <create_tasks_and_semaphores+0x5e>
	{
		Mutex_humidity = xSemaphoreCreateMutex();  // Create a MUTEX semaphore.
    3768:	81 e0       	ldi	r24, 0x01	; 1
    376a:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <xQueueCreateMutex>
    376e:	90 93 7c 1a 	sts	0x1A7C, r25	; 0x801a7c <Mutex_humidity+0x1>
    3772:	80 93 7b 1a 	sts	0x1A7B, r24	; 0x801a7b <Mutex_humidity>
		if ( ( Mutex_humidity ) != NULL )
    3776:	00 97       	sbiw	r24, 0x00	; 0
    3778:	41 f0       	breq	.+16     	; 0x378a <create_tasks_and_semaphores+0x5e>
		{
			xSemaphoreGive( ( Mutex_humidity ) );  // Make the MUTEX available for use, by initially "Giving" the Semaphore.
    377a:	00 e0       	ldi	r16, 0x00	; 0
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	a9 01       	movw	r20, r18
    3782:	60 e0       	ldi	r22, 0x00	; 0
    3784:	70 e0       	ldi	r23, 0x00	; 0
    3786:	0e 94 30 0b 	call	0x1660	; 0x1660 <xQueueGenericSend>
		}
	}
	
	if ( Mutex_temperature == NULL )  // Check to confirm that the Semaphore has not already been created.
    378a:	80 91 82 1a 	lds	r24, 0x1A82	; 0x801a82 <Mutex_temperature>
    378e:	90 91 83 1a 	lds	r25, 0x1A83	; 0x801a83 <Mutex_temperature+0x1>
    3792:	89 2b       	or	r24, r25
    3794:	89 f4       	brne	.+34     	; 0x37b8 <create_tasks_and_semaphores+0x8c>
	{
		Mutex_temperature = xSemaphoreCreateMutex();  // Create a MUTEX semaphore.
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <xQueueCreateMutex>
    379c:	90 93 83 1a 	sts	0x1A83, r25	; 0x801a83 <Mutex_temperature+0x1>
    37a0:	80 93 82 1a 	sts	0x1A82, r24	; 0x801a82 <Mutex_temperature>
		if ( ( Mutex_temperature ) != NULL )
    37a4:	00 97       	sbiw	r24, 0x00	; 0
    37a6:	41 f0       	breq	.+16     	; 0x37b8 <create_tasks_and_semaphores+0x8c>
		{
			xSemaphoreGive( ( Mutex_temperature ) );  // Make the MUTEX available for use, by initially "Giving" the Semaphore.
    37a8:	00 e0       	ldi	r16, 0x00	; 0
    37aa:	20 e0       	ldi	r18, 0x00	; 0
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	a9 01       	movw	r20, r18
    37b0:	60 e0       	ldi	r22, 0x00	; 0
    37b2:	70 e0       	ldi	r23, 0x00	; 0
    37b4:	0e 94 30 0b 	call	0x1660	; 0x1660 <xQueueGenericSend>
		}
	}
	
	init_resources();
    37b8:	0e 94 1d 05 	call	0xa3a	; 0xa3a <init_resources>
	
		HumidityTemperatureSensor_create();
    37bc:	a2 df       	rcall	.-188    	; 0x3702 <HumidityTemperatureSensor_create>
		CO2Sensor_create();
    37be:	0e 94 df 02 	call	0x5be	; 0x5be <CO2Sensor_create>
		
}
    37c2:	0f 91       	pop	r16
    37c4:	08 95       	ret

000037c6 <create_Event_Groups>:

void create_Event_Groups()
{
	
	Measure_event_group = xEventGroupCreate();
    37c6:	0e 94 3b 05 	call	0xa76	; 0xa76 <xEventGroupCreate>
    37ca:	90 93 80 1a 	sts	0x1A80, r25	; 0x801a80 <Measure_event_group+0x1>
    37ce:	80 93 7f 1a 	sts	0x1A7F, r24	; 0x801a7f <Measure_event_group>
	if(Measure_event_group == NULL)
    37d2:	89 2b       	or	r24, r25
    37d4:	21 f4       	brne	.+8      	; 0x37de <create_Event_Groups+0x18>
	{
			printf("%s\n","#ERROR - Measure_event_group was NOT created because there was insufficient FreeRTOS heap available");
    37d6:	88 ef       	ldi	r24, 0xF8	; 248
    37d8:	94 e0       	ldi	r25, 0x04	; 4
    37da:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <puts>
		}
	Data_event_group = xEventGroupCreate();
    37de:	0e 94 3b 05 	call	0xa76	; 0xa76 <xEventGroupCreate>
    37e2:	90 93 7e 1a 	sts	0x1A7E, r25	; 0x801a7e <Data_event_group+0x1>
    37e6:	80 93 7d 1a 	sts	0x1A7D, r24	; 0x801a7d <Data_event_group>
	if(Data_event_group == NULL) 
    37ea:	89 2b       	or	r24, r25
    37ec:	21 f4       	brne	.+8      	; 0x37f6 <create_Event_Groups+0x30>
			printf("%s\n","#ERROR - Measure_event_group was NOT created because there was insufficient FreeRTOS heap available");
    37ee:	88 ef       	ldi	r24, 0xF8	; 248
    37f0:	94 e0       	ldi	r25, 0x04	; 4
    37f2:	0c 94 45 2d 	jmp	0x5a8a	; 0x5a8a <puts>
    37f6:	08 95       	ret

000037f8 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for LEDS used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    37f8:	81 b1       	in	r24, 0x01	; 1
    37fa:	81 68       	ori	r24, 0x81	; 129
    37fc:	81 b9       	out	0x01, r24	; 1
	
	// Initialize the trace-driver to be used together with the R2R-Network
	trace_init();
    37fe:	0e 94 25 05 	call	0xa4a	; 0xa4a <trace_init>
	
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    3802:	80 e0       	ldi	r24, 0x00	; 0
    3804:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <stdioCreate>
	
	// Let's create some tasks
	create_Event_Groups();
    3808:	de df       	rcall	.-68     	; 0x37c6 <create_Event_Groups>
	create_tasks_and_semaphores();
    380a:	90 df       	rcall	.-224    	; 0x372c <create_tasks_and_semaphores>
	

	// Initialize the HAL layer and use 5 for LED driver priority
	hal_create(5);
    380c:	85 e0       	ldi	r24, 0x05	; 5
    380e:	72 d0       	rcall	.+228    	; 0x38f4 <hal_create>
    3810:	60 e0       	ldi	r22, 0x00	; 0
	
	// Initialize the LoRaWAN driver without down-link buffer
	lora_driver_create(LORA_USART, NULL);
    3812:	70 e0       	ldi	r23, 0x00	; 0
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	e6 d3       	rcall	.+1996   	; 0x3fe4 <lora_driver_create>
    3818:	83 e0       	ldi	r24, 0x03	; 3
	
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_create(3);
    381a:	0c 94 45 04 	jmp	0x88a	; 0x88a <lora_handler_create>
    381e:	08 95       	ret

00003820 <main>:
    3820:	eb df       	rcall	.-42     	; 0x37f8 <initialiseSystem>
/*-----------------------------------------------------------*/
int main(void)
{	
	
	initialiseSystem(); 
	printf("START\n");
    3822:	8c e5       	ldi	r24, 0x5C	; 92
    3824:	95 e0       	ldi	r25, 0x05	; 5
    3826:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <puts>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    382a:	0e 94 4a 12 	call	0x2494	; 0x2494 <vTaskStartScheduler>
	while (1)
	{
		printf("This bit of code shouldn't run!!");
    382e:	c2 e6       	ldi	r28, 0x62	; 98
    3830:	d5 e0       	ldi	r29, 0x05	; 5
    3832:	df 93       	push	r29
    3834:	cf 93       	push	r28
    3836:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <printf>
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	f9 cf       	rjmp	.-14     	; 0x3832 <main+0x12>

00003840 <__fixsfsi>:
    3840:	04 d0       	rcall	.+8      	; 0x384a <__fixunssfsi>
    3842:	68 94       	set
    3844:	b1 11       	cpse	r27, r1
    3846:	50 c0       	rjmp	.+160    	; 0x38e8 <__fp_szero>
    3848:	08 95       	ret

0000384a <__fixunssfsi>:
    384a:	33 d0       	rcall	.+102    	; 0x38b2 <__fp_splitA>
    384c:	88 f0       	brcs	.+34     	; 0x3870 <__fixunssfsi+0x26>
    384e:	9f 57       	subi	r25, 0x7F	; 127
    3850:	90 f0       	brcs	.+36     	; 0x3876 <__fixunssfsi+0x2c>
    3852:	b9 2f       	mov	r27, r25
    3854:	99 27       	eor	r25, r25
    3856:	b7 51       	subi	r27, 0x17	; 23
    3858:	a0 f0       	brcs	.+40     	; 0x3882 <__fixunssfsi+0x38>
    385a:	d1 f0       	breq	.+52     	; 0x3890 <__fixunssfsi+0x46>
    385c:	66 0f       	add	r22, r22
    385e:	77 1f       	adc	r23, r23
    3860:	88 1f       	adc	r24, r24
    3862:	99 1f       	adc	r25, r25
    3864:	1a f0       	brmi	.+6      	; 0x386c <__fixunssfsi+0x22>
    3866:	ba 95       	dec	r27
    3868:	c9 f7       	brne	.-14     	; 0x385c <__fixunssfsi+0x12>
    386a:	12 c0       	rjmp	.+36     	; 0x3890 <__fixunssfsi+0x46>
    386c:	b1 30       	cpi	r27, 0x01	; 1
    386e:	81 f0       	breq	.+32     	; 0x3890 <__fixunssfsi+0x46>
    3870:	3a d0       	rcall	.+116    	; 0x38e6 <__fp_zero>
    3872:	b1 e0       	ldi	r27, 0x01	; 1
    3874:	08 95       	ret
    3876:	37 c0       	rjmp	.+110    	; 0x38e6 <__fp_zero>
    3878:	67 2f       	mov	r22, r23
    387a:	78 2f       	mov	r23, r24
    387c:	88 27       	eor	r24, r24
    387e:	b8 5f       	subi	r27, 0xF8	; 248
    3880:	39 f0       	breq	.+14     	; 0x3890 <__fixunssfsi+0x46>
    3882:	b9 3f       	cpi	r27, 0xF9	; 249
    3884:	cc f3       	brlt	.-14     	; 0x3878 <__fixunssfsi+0x2e>
    3886:	86 95       	lsr	r24
    3888:	77 95       	ror	r23
    388a:	67 95       	ror	r22
    388c:	b3 95       	inc	r27
    388e:	d9 f7       	brne	.-10     	; 0x3886 <__fixunssfsi+0x3c>
    3890:	3e f4       	brtc	.+14     	; 0x38a0 <__fixunssfsi+0x56>
    3892:	90 95       	com	r25
    3894:	80 95       	com	r24
    3896:	70 95       	com	r23
    3898:	61 95       	neg	r22
    389a:	7f 4f       	sbci	r23, 0xFF	; 255
    389c:	8f 4f       	sbci	r24, 0xFF	; 255
    389e:	9f 4f       	sbci	r25, 0xFF	; 255
    38a0:	08 95       	ret

000038a2 <__fp_split3>:
    38a2:	57 fd       	sbrc	r21, 7
    38a4:	90 58       	subi	r25, 0x80	; 128
    38a6:	44 0f       	add	r20, r20
    38a8:	55 1f       	adc	r21, r21
    38aa:	59 f0       	breq	.+22     	; 0x38c2 <__fp_splitA+0x10>
    38ac:	5f 3f       	cpi	r21, 0xFF	; 255
    38ae:	71 f0       	breq	.+28     	; 0x38cc <__fp_splitA+0x1a>
    38b0:	47 95       	ror	r20

000038b2 <__fp_splitA>:
    38b2:	88 0f       	add	r24, r24
    38b4:	97 fb       	bst	r25, 7
    38b6:	99 1f       	adc	r25, r25
    38b8:	61 f0       	breq	.+24     	; 0x38d2 <__fp_splitA+0x20>
    38ba:	9f 3f       	cpi	r25, 0xFF	; 255
    38bc:	79 f0       	breq	.+30     	; 0x38dc <__fp_splitA+0x2a>
    38be:	87 95       	ror	r24
    38c0:	08 95       	ret
    38c2:	12 16       	cp	r1, r18
    38c4:	13 06       	cpc	r1, r19
    38c6:	14 06       	cpc	r1, r20
    38c8:	55 1f       	adc	r21, r21
    38ca:	f2 cf       	rjmp	.-28     	; 0x38b0 <__fp_split3+0xe>
    38cc:	46 95       	lsr	r20
    38ce:	f1 df       	rcall	.-30     	; 0x38b2 <__fp_splitA>
    38d0:	08 c0       	rjmp	.+16     	; 0x38e2 <__fp_splitA+0x30>
    38d2:	16 16       	cp	r1, r22
    38d4:	17 06       	cpc	r1, r23
    38d6:	18 06       	cpc	r1, r24
    38d8:	99 1f       	adc	r25, r25
    38da:	f1 cf       	rjmp	.-30     	; 0x38be <__fp_splitA+0xc>
    38dc:	86 95       	lsr	r24
    38de:	71 05       	cpc	r23, r1
    38e0:	61 05       	cpc	r22, r1
    38e2:	08 94       	sec
    38e4:	08 95       	ret

000038e6 <__fp_zero>:
    38e6:	e8 94       	clt

000038e8 <__fp_szero>:
    38e8:	bb 27       	eor	r27, r27
    38ea:	66 27       	eor	r22, r22
    38ec:	77 27       	eor	r23, r23
    38ee:	cb 01       	movw	r24, r22
    38f0:	97 f9       	bld	r25, 7
    38f2:	08 95       	ret

000038f4 <hal_create>:
    38f4:	e2 e9       	ldi	r30, 0x92	; 146
    38f6:	fa e1       	ldi	r31, 0x1A	; 26
    38f8:	27 e4       	ldi	r18, 0x47	; 71
    38fa:	33 e2       	ldi	r19, 0x23	; 35
    38fc:	31 83       	std	Z+1, r19	; 0x01
    38fe:	20 83       	st	Z, r18
    3900:	2a e4       	ldi	r18, 0x4A	; 74
    3902:	33 e2       	ldi	r19, 0x23	; 35
    3904:	33 83       	std	Z+3, r19	; 0x03
    3906:	22 83       	std	Z+2, r18	; 0x02
    3908:	25 e5       	ldi	r18, 0x55	; 85
    390a:	33 e2       	ldi	r19, 0x23	; 35
    390c:	35 83       	std	Z+5, r19	; 0x05
    390e:	24 83       	std	Z+4, r18	; 0x04
    3910:	29 e5       	ldi	r18, 0x59	; 89
    3912:	33 e2       	ldi	r19, 0x23	; 35
    3914:	37 83       	std	Z+7, r19	; 0x07
    3916:	26 83       	std	Z+6, r18	; 0x06
    3918:	2f e5       	ldi	r18, 0x5F	; 95
    391a:	33 e2       	ldi	r19, 0x23	; 35
    391c:	31 87       	std	Z+9, r19	; 0x09
    391e:	20 87       	std	Z+8, r18	; 0x08
    3920:	2b e6       	ldi	r18, 0x6B	; 107
    3922:	33 e2       	ldi	r19, 0x23	; 35
    3924:	33 87       	std	Z+11, r19	; 0x0b
    3926:	22 87       	std	Z+10, r18	; 0x0a
    3928:	20 e7       	ldi	r18, 0x70	; 112
    392a:	33 e2       	ldi	r19, 0x23	; 35
    392c:	35 87       	std	Z+13, r19	; 0x0d
    392e:	24 87       	std	Z+12, r18	; 0x0c
    3930:	2c e7       	ldi	r18, 0x7C	; 124
    3932:	33 e2       	ldi	r19, 0x23	; 35
    3934:	37 87       	std	Z+15, r19	; 0x0f
    3936:	26 87       	std	Z+14, r18	; 0x0e
    3938:	2c e5       	ldi	r18, 0x5C	; 92
    393a:	33 e2       	ldi	r19, 0x23	; 35
    393c:	31 8b       	std	Z+17, r19	; 0x11
    393e:	20 8b       	std	Z+16, r18	; 0x10
    3940:	21 e8       	ldi	r18, 0x81	; 129
    3942:	33 e2       	ldi	r19, 0x23	; 35
    3944:	33 8b       	std	Z+19, r19	; 0x13
    3946:	22 8b       	std	Z+18, r18	; 0x12
    3948:	2e e8       	ldi	r18, 0x8E	; 142
    394a:	33 e2       	ldi	r19, 0x23	; 35
    394c:	35 8b       	std	Z+21, r19	; 0x15
    394e:	24 8b       	std	Z+20, r18	; 0x14
    3950:	68 2f       	mov	r22, r24
    3952:	cf 01       	movw	r24, r30
    3954:	3a c1       	rjmp	.+628    	; 0x3bca <led_create>
    3956:	08 95       	ret

00003958 <_hihTwiCallback>:
    3958:	65 30       	cpi	r22, 0x05	; 5
    395a:	f1 f4       	brne	.+60     	; 0x3998 <_hihTwiCallback+0x40>
    395c:	fa 01       	movw	r30, r20
    395e:	80 81       	ld	r24, Z
    3960:	8f 73       	andi	r24, 0x3F	; 63
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	98 2f       	mov	r25, r24
    3966:	88 27       	eor	r24, r24
    3968:	21 81       	ldd	r18, Z+1	; 0x01
    396a:	82 2b       	or	r24, r18
    396c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3970:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    3974:	82 81       	ldd	r24, Z+2	; 0x02
    3976:	f0 e4       	ldi	r31, 0x40	; 64
    3978:	8f 9f       	mul	r24, r31
    397a:	c0 01       	movw	r24, r0
    397c:	11 24       	eor	r1, r1
    397e:	fa 01       	movw	r30, r20
    3980:	23 81       	ldd	r18, Z+3	; 0x03
    3982:	26 95       	lsr	r18
    3984:	26 95       	lsr	r18
    3986:	82 2b       	or	r24, r18
    3988:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    398c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	80 93 1f 19 	sts	0x191F, r24	; 0x80191f <_measuringIsReady>
    3996:	08 95       	ret
    3998:	64 30       	cpi	r22, 0x04	; 4
    399a:	51 f0       	breq	.+20     	; 0x39b0 <_hihTwiCallback+0x58>
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	90 e4       	ldi	r25, 0x40	; 64
    39a0:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    39a4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    39a8:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    39ac:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    39b0:	08 95       	ret

000039b2 <hih8120Create>:
    39b2:	0f 93       	push	r16
    39b4:	1f 93       	push	r17
    39b6:	0c ea       	ldi	r16, 0xAC	; 172
    39b8:	1c e1       	ldi	r17, 0x1C	; 28
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	34 e2       	ldi	r19, 0x24	; 36
    39be:	44 ef       	ldi	r20, 0xF4	; 244
    39c0:	50 e0       	ldi	r21, 0x00	; 0
    39c2:	60 e0       	ldi	r22, 0x00	; 0
    39c4:	87 e2       	ldi	r24, 0x27	; 39
    39c6:	0e 94 24 28 	call	0x5048	; 0x5048 <twiCreate>
    39ca:	90 93 21 19 	sts	0x1921, r25	; 0x801921 <_hih8120Handler+0x1>
    39ce:	80 93 20 19 	sts	0x1920, r24	; 0x801920 <_hih8120Handler>
    39d2:	21 e0       	ldi	r18, 0x01	; 1
    39d4:	89 2b       	or	r24, r25
    39d6:	09 f0       	breq	.+2      	; 0x39da <hih8120Create+0x28>
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	82 2f       	mov	r24, r18
    39dc:	1f 91       	pop	r17
    39de:	0f 91       	pop	r16
    39e0:	08 95       	ret

000039e2 <hih8120Wakeup>:
    39e2:	80 91 20 19 	lds	r24, 0x1920	; 0x801920 <_hih8120Handler>
    39e6:	90 91 21 19 	lds	r25, 0x1921	; 0x801921 <_hih8120Handler+0x1>
    39ea:	00 97       	sbiw	r24, 0x00	; 0
    39ec:	59 f0       	breq	.+22     	; 0x3a04 <hih8120Wakeup+0x22>
    39ee:	40 e0       	ldi	r20, 0x00	; 0
    39f0:	60 e0       	ldi	r22, 0x00	; 0
    39f2:	70 e0       	ldi	r23, 0x00	; 0
    39f4:	0e 94 75 28 	call	0x50ea	; 0x50ea <twiTransmit>
    39f8:	84 30       	cpi	r24, 0x04	; 4
    39fa:	31 f4       	brne	.+12     	; 0x3a08 <hih8120Wakeup+0x26>
    39fc:	10 92 1f 19 	sts	0x191F, r1	; 0x80191f <_measuringIsReady>
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	08 95       	ret
    3a04:	82 e0       	ldi	r24, 0x02	; 2
    3a06:	08 95       	ret
    3a08:	83 e0       	ldi	r24, 0x03	; 3
    3a0a:	08 95       	ret

00003a0c <hih8120Meassure>:
    3a0c:	80 91 20 19 	lds	r24, 0x1920	; 0x801920 <_hih8120Handler>
    3a10:	90 91 21 19 	lds	r25, 0x1921	; 0x801921 <_hih8120Handler+0x1>
    3a14:	00 97       	sbiw	r24, 0x00	; 0
    3a16:	39 f0       	breq	.+14     	; 0x3a26 <hih8120Meassure+0x1a>
    3a18:	64 e0       	ldi	r22, 0x04	; 4
    3a1a:	0e 94 c1 28 	call	0x5182	; 0x5182 <twiReceive>
    3a1e:	85 30       	cpi	r24, 0x05	; 5
    3a20:	21 f0       	breq	.+8      	; 0x3a2a <hih8120Meassure+0x1e>
    3a22:	83 e0       	ldi	r24, 0x03	; 3
    3a24:	08 95       	ret
    3a26:	82 e0       	ldi	r24, 0x02	; 2
    3a28:	08 95       	ret
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	08 95       	ret

00003a2e <hih8120GetHumidity>:
    3a2e:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    3a32:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    3a36:	80 e0       	ldi	r24, 0x00	; 0
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	0e 94 9f 2a 	call	0x553e	; 0x553e <__floatunsisf>
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	48 ec       	ldi	r20, 0xC8	; 200
    3a44:	52 e4       	ldi	r21, 0x42	; 66
    3a46:	0e 94 04 2b 	call	0x5608	; 0x5608 <__mulsf3>
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	38 ef       	ldi	r19, 0xF8	; 248
    3a4e:	4f e7       	ldi	r20, 0x7F	; 127
    3a50:	56 e4       	ldi	r21, 0x46	; 70
    3a52:	0c 94 34 2a 	jmp	0x5468	; 0x5468 <__divsf3>
    3a56:	08 95       	ret

00003a58 <hih8120GetTemperature>:
    3a58:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    3a5c:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	0e 94 9f 2a 	call	0x553e	; 0x553e <__floatunsisf>
    3a68:	20 e0       	ldi	r18, 0x00	; 0
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	45 e2       	ldi	r20, 0x25	; 37
    3a6e:	53 e4       	ldi	r21, 0x43	; 67
    3a70:	0e 94 04 2b 	call	0x5608	; 0x5608 <__mulsf3>
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	38 ef       	ldi	r19, 0xF8	; 248
    3a78:	4f e7       	ldi	r20, 0x7F	; 127
    3a7a:	56 e4       	ldi	r21, 0x46	; 70
    3a7c:	0e 94 34 2a 	call	0x5468	; 0x5468 <__divsf3>
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	40 e2       	ldi	r20, 0x20	; 32
    3a86:	52 e4       	ldi	r21, 0x42	; 66
    3a88:	0c 94 cd 29 	jmp	0x539a	; 0x539a <__subsf3>
    3a8c:	08 95       	ret

00003a8e <_turn_off>:
    3a8e:	cf 93       	push	r28
    3a90:	df 93       	push	r29
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	fc 01       	movw	r30, r24
    3a96:	ee 0f       	add	r30, r30
    3a98:	ff 1f       	adc	r31, r31
    3a9a:	e8 0f       	add	r30, r24
    3a9c:	f9 1f       	adc	r31, r25
    3a9e:	ee 0f       	add	r30, r30
    3aa0:	ff 1f       	adc	r31, r31
    3aa2:	ee 5d       	subi	r30, 0xDE	; 222
    3aa4:	f6 4e       	sbci	r31, 0xE6	; 230
    3aa6:	23 81       	ldd	r18, Z+3	; 0x03
    3aa8:	21 11       	cpse	r18, r1
    3aaa:	0a c0       	rjmp	.+20     	; 0x3ac0 <_turn_off+0x32>
    3aac:	ef 01       	movw	r28, r30
    3aae:	e0 91 9a 1a 	lds	r30, 0x1A9A	; 0x801a9a <register_access+0x8>
    3ab2:	f0 91 9b 1a 	lds	r31, 0x1A9B	; 0x801a9b <register_access+0x9>
    3ab6:	6a 81       	ldd	r22, Y+2	; 0x02
    3ab8:	88 81       	ld	r24, Y
    3aba:	99 81       	ldd	r25, Y+1	; 0x01
    3abc:	19 95       	eicall
    3abe:	12 c0       	rjmp	.+36     	; 0x3ae4 <_turn_off+0x56>
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	aa 0f       	add	r26, r26
    3ac4:	bb 1f       	adc	r27, r27
    3ac6:	ed 01       	movw	r28, r26
    3ac8:	c8 0f       	add	r28, r24
    3aca:	d9 1f       	adc	r29, r25
    3acc:	cc 0f       	add	r28, r28
    3ace:	dd 1f       	adc	r29, r29
    3ad0:	ce 5d       	subi	r28, 0xDE	; 222
    3ad2:	d6 4e       	sbci	r29, 0xE6	; 230
    3ad4:	e0 91 a4 1a 	lds	r30, 0x1AA4	; 0x801aa4 <register_access+0x12>
    3ad8:	f0 91 a5 1a 	lds	r31, 0x1AA5	; 0x801aa5 <register_access+0x13>
    3adc:	6a 81       	ldd	r22, Y+2	; 0x02
    3ade:	88 81       	ld	r24, Y
    3ae0:	99 81       	ldd	r25, Y+1	; 0x01
    3ae2:	19 95       	eicall
    3ae4:	df 91       	pop	r29
    3ae6:	cf 91       	pop	r28
    3ae8:	08 95       	ret

00003aea <_turn_on>:
    3aea:	cf 93       	push	r28
    3aec:	df 93       	push	r29
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	fc 01       	movw	r30, r24
    3af2:	ee 0f       	add	r30, r30
    3af4:	ff 1f       	adc	r31, r31
    3af6:	e8 0f       	add	r30, r24
    3af8:	f9 1f       	adc	r31, r25
    3afa:	ee 0f       	add	r30, r30
    3afc:	ff 1f       	adc	r31, r31
    3afe:	ee 5d       	subi	r30, 0xDE	; 222
    3b00:	f6 4e       	sbci	r31, 0xE6	; 230
    3b02:	23 81       	ldd	r18, Z+3	; 0x03
    3b04:	21 11       	cpse	r18, r1
    3b06:	0a c0       	rjmp	.+20     	; 0x3b1c <_turn_on+0x32>
    3b08:	ef 01       	movw	r28, r30
    3b0a:	e0 91 a4 1a 	lds	r30, 0x1AA4	; 0x801aa4 <register_access+0x12>
    3b0e:	f0 91 a5 1a 	lds	r31, 0x1AA5	; 0x801aa5 <register_access+0x13>
    3b12:	6a 81       	ldd	r22, Y+2	; 0x02
    3b14:	88 81       	ld	r24, Y
    3b16:	99 81       	ldd	r25, Y+1	; 0x01
    3b18:	19 95       	eicall
    3b1a:	12 c0       	rjmp	.+36     	; 0x3b40 <_turn_on+0x56>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	aa 0f       	add	r26, r26
    3b20:	bb 1f       	adc	r27, r27
    3b22:	ed 01       	movw	r28, r26
    3b24:	c8 0f       	add	r28, r24
    3b26:	d9 1f       	adc	r29, r25
    3b28:	cc 0f       	add	r28, r28
    3b2a:	dd 1f       	adc	r29, r29
    3b2c:	ce 5d       	subi	r28, 0xDE	; 222
    3b2e:	d6 4e       	sbci	r29, 0xE6	; 230
    3b30:	e0 91 9a 1a 	lds	r30, 0x1A9A	; 0x801a9a <register_access+0x8>
    3b34:	f0 91 9b 1a 	lds	r31, 0x1A9B	; 0x801a9b <register_access+0x9>
    3b38:	6a 81       	ldd	r22, Y+2	; 0x02
    3b3a:	88 81       	ld	r24, Y
    3b3c:	99 81       	ldd	r25, Y+1	; 0x01
    3b3e:	19 95       	eicall
    3b40:	df 91       	pop	r29
    3b42:	cf 91       	pop	r28
    3b44:	08 95       	ret

00003b46 <_hal_led_task>:
    3b46:	0f 2e       	mov	r0, r31
    3b48:	f2 e9       	ldi	r31, 0x92	; 146
    3b4a:	cf 2e       	mov	r12, r31
    3b4c:	fa e1       	ldi	r31, 0x1A	; 26
    3b4e:	df 2e       	mov	r13, r31
    3b50:	f0 2d       	mov	r31, r0
    3b52:	04 e0       	ldi	r16, 0x04	; 4
    3b54:	c2 e2       	ldi	r28, 0x22	; 34
    3b56:	d9 e1       	ldi	r29, 0x19	; 25
    3b58:	10 e0       	ldi	r17, 0x00	; 0
    3b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b5c:	81 30       	cpi	r24, 0x01	; 1
    3b5e:	69 f0       	breq	.+26     	; 0x3b7a <_hal_led_task+0x34>
    3b60:	e8 f0       	brcs	.+58     	; 0x3b9c <_hal_led_task+0x56>
    3b62:	82 30       	cpi	r24, 0x02	; 2
    3b64:	39 f5       	brne	.+78     	; 0x3bb4 <_hal_led_task+0x6e>
    3b66:	d6 01       	movw	r26, r12
    3b68:	1c 96       	adiw	r26, 0x0c	; 12
    3b6a:	ed 91       	ld	r30, X+
    3b6c:	fc 91       	ld	r31, X
    3b6e:	1d 97       	sbiw	r26, 0x0d	; 13
    3b70:	6a 81       	ldd	r22, Y+2	; 0x02
    3b72:	88 81       	ld	r24, Y
    3b74:	99 81       	ldd	r25, Y+1	; 0x01
    3b76:	19 95       	eicall
    3b78:	1d c0       	rjmp	.+58     	; 0x3bb4 <_hal_led_task+0x6e>
    3b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7c:	8f 5f       	subi	r24, 0xFF	; 255
    3b7e:	8a 30       	cpi	r24, 0x0A	; 10
    3b80:	10 f4       	brcc	.+4      	; 0x3b86 <_hal_led_task+0x40>
    3b82:	8d 83       	std	Y+5, r24	; 0x05
    3b84:	17 c0       	rjmp	.+46     	; 0x3bb4 <_hal_led_task+0x6e>
    3b86:	1d 82       	std	Y+5, r1	; 0x05
    3b88:	d6 01       	movw	r26, r12
    3b8a:	1c 96       	adiw	r26, 0x0c	; 12
    3b8c:	ed 91       	ld	r30, X+
    3b8e:	fc 91       	ld	r31, X
    3b90:	1d 97       	sbiw	r26, 0x0d	; 13
    3b92:	6a 81       	ldd	r22, Y+2	; 0x02
    3b94:	88 81       	ld	r24, Y
    3b96:	99 81       	ldd	r25, Y+1	; 0x01
    3b98:	19 95       	eicall
    3b9a:	0c c0       	rjmp	.+24     	; 0x3bb4 <_hal_led_task+0x6e>
    3b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9e:	88 23       	and	r24, r24
    3ba0:	31 f0       	breq	.+12     	; 0x3bae <_hal_led_task+0x68>
    3ba2:	81 2f       	mov	r24, r17
    3ba4:	a2 df       	rcall	.-188    	; 0x3aea <_turn_on>
    3ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba8:	81 50       	subi	r24, 0x01	; 1
    3baa:	8d 83       	std	Y+5, r24	; 0x05
    3bac:	03 c0       	rjmp	.+6      	; 0x3bb4 <_hal_led_task+0x6e>
    3bae:	0c 83       	std	Y+4, r16	; 0x04
    3bb0:	81 2f       	mov	r24, r17
    3bb2:	6d df       	rcall	.-294    	; 0x3a8e <_turn_off>
    3bb4:	1f 5f       	subi	r17, 0xFF	; 255
    3bb6:	26 96       	adiw	r28, 0x06	; 6
    3bb8:	14 30       	cpi	r17, 0x04	; 4
    3bba:	79 f6       	brne	.-98     	; 0x3b5a <_hal_led_task+0x14>
    3bbc:	65 e0       	ldi	r22, 0x05	; 5
    3bbe:	70 e0       	ldi	r23, 0x00	; 0
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	0e 94 49 14 	call	0x2892	; 0x2892 <vTaskDelay>
    3bc8:	c5 cf       	rjmp	.-118    	; 0x3b54 <_hal_led_task+0xe>

00003bca <led_create>:
    3bca:	cf 92       	push	r12
    3bcc:	df 92       	push	r13
    3bce:	ef 92       	push	r14
    3bd0:	ff 92       	push	r15
    3bd2:	0f 93       	push	r16
    3bd4:	1f 93       	push	r17
    3bd6:	cf 93       	push	r28
    3bd8:	df 93       	push	r29
    3bda:	06 2f       	mov	r16, r22
    3bdc:	0f 2e       	mov	r0, r31
    3bde:	f2 e9       	ldi	r31, 0x92	; 146
    3be0:	ef 2e       	mov	r14, r31
    3be2:	fa e1       	ldi	r31, 0x1A	; 26
    3be4:	ff 2e       	mov	r15, r31
    3be6:	f0 2d       	mov	r31, r0
    3be8:	d7 01       	movw	r26, r14
    3bea:	18 96       	adiw	r26, 0x08	; 8
    3bec:	ed 91       	ld	r30, X+
    3bee:	fc 91       	ld	r31, X
    3bf0:	19 97       	sbiw	r26, 0x09	; 9
    3bf2:	66 e0       	ldi	r22, 0x06	; 6
    3bf4:	87 e2       	ldi	r24, 0x27	; 39
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	19 95       	eicall
    3bfa:	c2 e2       	ldi	r28, 0x22	; 34
    3bfc:	d9 e1       	ldi	r29, 0x19	; 25
    3bfe:	0f 2e       	mov	r0, r31
    3c00:	f8 e2       	ldi	r31, 0x28	; 40
    3c02:	cf 2e       	mov	r12, r31
    3c04:	d1 2c       	mov	r13, r1
    3c06:	f0 2d       	mov	r31, r0
    3c08:	d9 82       	std	Y+1, r13	; 0x01
    3c0a:	c8 82       	st	Y, r12
    3c0c:	86 e0       	ldi	r24, 0x06	; 6
    3c0e:	8a 83       	std	Y+2, r24	; 0x02
    3c10:	1b 82       	std	Y+3, r1	; 0x03
    3c12:	14 e0       	ldi	r17, 0x04	; 4
    3c14:	1c 83       	std	Y+4, r17	; 0x04
    3c16:	80 e0       	ldi	r24, 0x00	; 0
    3c18:	3a df       	rcall	.-396    	; 0x3a8e <_turn_off>
    3c1a:	d7 01       	movw	r26, r14
    3c1c:	18 96       	adiw	r26, 0x08	; 8
    3c1e:	ed 91       	ld	r30, X+
    3c20:	fc 91       	ld	r31, X
    3c22:	19 97       	sbiw	r26, 0x09	; 9
    3c24:	67 e0       	ldi	r22, 0x07	; 7
    3c26:	87 e2       	ldi	r24, 0x27	; 39
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	19 95       	eicall
    3c2c:	df 82       	std	Y+7, r13	; 0x07
    3c2e:	ce 82       	std	Y+6, r12	; 0x06
    3c30:	87 e0       	ldi	r24, 0x07	; 7
    3c32:	88 87       	std	Y+8, r24	; 0x08
    3c34:	19 86       	std	Y+9, r1	; 0x09
    3c36:	1a 87       	std	Y+10, r17	; 0x0a
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	29 df       	rcall	.-430    	; 0x3a8e <_turn_off>
    3c3c:	d7 01       	movw	r26, r14
    3c3e:	18 96       	adiw	r26, 0x08	; 8
    3c40:	ed 91       	ld	r30, X+
    3c42:	fc 91       	ld	r31, X
    3c44:	19 97       	sbiw	r26, 0x09	; 9
    3c46:	65 e0       	ldi	r22, 0x05	; 5
    3c48:	83 e3       	ldi	r24, 0x33	; 51
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	19 95       	eicall
    3c4e:	d7 01       	movw	r26, r14
    3c50:	18 96       	adiw	r26, 0x08	; 8
    3c52:	ed 91       	ld	r30, X+
    3c54:	fc 91       	ld	r31, X
    3c56:	19 97       	sbiw	r26, 0x09	; 9
    3c58:	61 e0       	ldi	r22, 0x01	; 1
    3c5a:	84 e3       	ldi	r24, 0x34	; 52
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	19 95       	eicall
    3c60:	84 e3       	ldi	r24, 0x34	; 52
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	9d 87       	std	Y+13, r25	; 0x0d
    3c66:	8c 87       	std	Y+12, r24	; 0x0c
    3c68:	85 e0       	ldi	r24, 0x05	; 5
    3c6a:	8e 87       	std	Y+14, r24	; 0x0e
    3c6c:	1f 86       	std	Y+15, r1	; 0x0f
    3c6e:	18 8b       	std	Y+16, r17	; 0x10
    3c70:	82 e0       	ldi	r24, 0x02	; 2
    3c72:	0d df       	rcall	.-486    	; 0x3a8e <_turn_off>
    3c74:	d7 01       	movw	r26, r14
    3c76:	18 96       	adiw	r26, 0x08	; 8
    3c78:	ed 91       	ld	r30, X+
    3c7a:	fc 91       	ld	r31, X
    3c7c:	19 97       	sbiw	r26, 0x09	; 9
    3c7e:	64 e0       	ldi	r22, 0x04	; 4
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	91 e0       	ldi	r25, 0x01	; 1
    3c84:	19 95       	eicall
    3c86:	d7 01       	movw	r26, r14
    3c88:	18 96       	adiw	r26, 0x08	; 8
    3c8a:	ed 91       	ld	r30, X+
    3c8c:	fc 91       	ld	r31, X
    3c8e:	19 97       	sbiw	r26, 0x09	; 9
    3c90:	61 e0       	ldi	r22, 0x01	; 1
    3c92:	82 e0       	ldi	r24, 0x02	; 2
    3c94:	91 e0       	ldi	r25, 0x01	; 1
    3c96:	19 95       	eicall
    3c98:	82 e0       	ldi	r24, 0x02	; 2
    3c9a:	91 e0       	ldi	r25, 0x01	; 1
    3c9c:	9b 8b       	std	Y+19, r25	; 0x13
    3c9e:	8a 8b       	std	Y+18, r24	; 0x12
    3ca0:	1c 8b       	std	Y+20, r17	; 0x14
    3ca2:	1d 8a       	std	Y+21, r1	; 0x15
    3ca4:	1e 8b       	std	Y+22, r17	; 0x16
    3ca6:	83 e0       	ldi	r24, 0x03	; 3
    3ca8:	f2 de       	rcall	.-540    	; 0x3a8e <_turn_off>
    3caa:	e1 2c       	mov	r14, r1
    3cac:	f1 2c       	mov	r15, r1
    3cae:	20 e0       	ldi	r18, 0x00	; 0
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	40 ec       	ldi	r20, 0xC0	; 192
    3cb4:	50 e0       	ldi	r21, 0x00	; 0
    3cb6:	63 e8       	ldi	r22, 0x83	; 131
    3cb8:	75 e0       	ldi	r23, 0x05	; 5
    3cba:	83 ea       	ldi	r24, 0xA3	; 163
    3cbc:	9d e1       	ldi	r25, 0x1D	; 29
    3cbe:	0e 94 2b 11 	call	0x2256	; 0x2256 <xTaskCreate>
    3cc2:	df 91       	pop	r29
    3cc4:	cf 91       	pop	r28
    3cc6:	1f 91       	pop	r17
    3cc8:	0f 91       	pop	r16
    3cca:	ff 90       	pop	r15
    3ccc:	ef 90       	pop	r14
    3cce:	df 90       	pop	r13
    3cd0:	cf 90       	pop	r12
    3cd2:	08 95       	ret

00003cd4 <led_fast_blink>:
    3cd4:	0f 93       	push	r16
    3cd6:	1f 93       	push	r17
    3cd8:	cf 93       	push	r28
    3cda:	df 93       	push	r29
    3cdc:	c8 2f       	mov	r28, r24
    3cde:	d0 e0       	ldi	r29, 0x00	; 0
    3ce0:	8e 01       	movw	r16, r28
    3ce2:	00 0f       	add	r16, r16
    3ce4:	11 1f       	adc	r17, r17
    3ce6:	d8 01       	movw	r26, r16
    3ce8:	ac 0f       	add	r26, r28
    3cea:	bd 1f       	adc	r27, r29
    3cec:	aa 0f       	add	r26, r26
    3cee:	bb 1f       	adc	r27, r27
    3cf0:	ae 5d       	subi	r26, 0xDE	; 222
    3cf2:	b6 4e       	sbci	r27, 0xE6	; 230
    3cf4:	e0 91 9e 1a 	lds	r30, 0x1A9E	; 0x801a9e <register_access+0xc>
    3cf8:	f0 91 9f 1a 	lds	r31, 0x1A9F	; 0x801a9f <register_access+0xd>
    3cfc:	12 96       	adiw	r26, 0x02	; 2
    3cfe:	6c 91       	ld	r22, X
    3d00:	12 97       	sbiw	r26, 0x02	; 2
    3d02:	8d 91       	ld	r24, X+
    3d04:	9c 91       	ld	r25, X
    3d06:	19 95       	eicall
    3d08:	c0 0f       	add	r28, r16
    3d0a:	d1 1f       	adc	r29, r17
    3d0c:	cc 0f       	add	r28, r28
    3d0e:	dd 1f       	adc	r29, r29
    3d10:	ce 5d       	subi	r28, 0xDE	; 222
    3d12:	d6 4e       	sbci	r29, 0xE6	; 230
    3d14:	82 e0       	ldi	r24, 0x02	; 2
    3d16:	8c 83       	std	Y+4, r24	; 0x04
    3d18:	df 91       	pop	r29
    3d1a:	cf 91       	pop	r28
    3d1c:	1f 91       	pop	r17
    3d1e:	0f 91       	pop	r16
    3d20:	08 95       	ret

00003d22 <led_led_on>:
    3d22:	28 2f       	mov	r18, r24
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	f9 01       	movw	r30, r18
    3d28:	ee 0f       	add	r30, r30
    3d2a:	ff 1f       	adc	r31, r31
    3d2c:	e2 0f       	add	r30, r18
    3d2e:	f3 1f       	adc	r31, r19
    3d30:	ee 0f       	add	r30, r30
    3d32:	ff 1f       	adc	r31, r31
    3d34:	ee 5d       	subi	r30, 0xDE	; 222
    3d36:	f6 4e       	sbci	r31, 0xE6	; 230
    3d38:	93 e0       	ldi	r25, 0x03	; 3
    3d3a:	94 83       	std	Z+4, r25	; 0x04
    3d3c:	d6 ce       	rjmp	.-596    	; 0x3aea <_turn_on>
    3d3e:	08 95       	ret

00003d40 <led_led_off>:
    3d40:	28 2f       	mov	r18, r24
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	f9 01       	movw	r30, r18
    3d46:	ee 0f       	add	r30, r30
    3d48:	ff 1f       	adc	r31, r31
    3d4a:	e2 0f       	add	r30, r18
    3d4c:	f3 1f       	adc	r31, r19
    3d4e:	ee 0f       	add	r30, r30
    3d50:	ff 1f       	adc	r31, r31
    3d52:	ee 5d       	subi	r30, 0xDE	; 222
    3d54:	f6 4e       	sbci	r31, 0xE6	; 230
    3d56:	94 e0       	ldi	r25, 0x04	; 4
    3d58:	94 83       	std	Z+4, r25	; 0x04
    3d5a:	99 ce       	rjmp	.-718    	; 0x3a8e <_turn_off>
    3d5c:	08 95       	ret

00003d5e <led_long_puls>:
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	fc 01       	movw	r30, r24
    3d62:	ee 0f       	add	r30, r30
    3d64:	ff 1f       	adc	r31, r31
    3d66:	df 01       	movw	r26, r30
    3d68:	a8 0f       	add	r26, r24
    3d6a:	b9 1f       	adc	r27, r25
    3d6c:	aa 0f       	add	r26, r26
    3d6e:	bb 1f       	adc	r27, r27
    3d70:	ae 5d       	subi	r26, 0xDE	; 222
    3d72:	b6 4e       	sbci	r27, 0xE6	; 230
    3d74:	24 e0       	ldi	r18, 0x04	; 4
    3d76:	15 96       	adiw	r26, 0x05	; 5
    3d78:	2c 93       	st	X, r18
    3d7a:	15 97       	sbiw	r26, 0x05	; 5
    3d7c:	fd 01       	movw	r30, r26
    3d7e:	14 82       	std	Z+4, r1	; 0x04
    3d80:	08 95       	ret

00003d82 <led_short_puls>:
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	fc 01       	movw	r30, r24
    3d86:	ee 0f       	add	r30, r30
    3d88:	ff 1f       	adc	r31, r31
    3d8a:	df 01       	movw	r26, r30
    3d8c:	a8 0f       	add	r26, r24
    3d8e:	b9 1f       	adc	r27, r25
    3d90:	aa 0f       	add	r26, r26
    3d92:	bb 1f       	adc	r27, r27
    3d94:	ae 5d       	subi	r26, 0xDE	; 222
    3d96:	b6 4e       	sbci	r27, 0xE6	; 230
    3d98:	21 e0       	ldi	r18, 0x01	; 1
    3d9a:	15 96       	adiw	r26, 0x05	; 5
    3d9c:	2c 93       	st	X, r18
    3d9e:	15 97       	sbiw	r26, 0x05	; 5
    3da0:	fd 01       	movw	r30, r26
    3da2:	14 82       	std	Z+4, r1	; 0x04
    3da4:	08 95       	ret

00003da6 <_serial_call_back>:
    3da6:	0f 93       	push	r16
    3da8:	1f 93       	push	r17
    3daa:	cf 93       	push	r28
    3dac:	df 93       	push	r29
    3dae:	1f 92       	push	r1
    3db0:	1f 92       	push	r1
    3db2:	cd b7       	in	r28, 0x3d	; 61
    3db4:	de b7       	in	r29, 0x3e	; 62
    3db6:	8c 01       	movw	r16, r24
    3db8:	19 82       	std	Y+1, r1	; 0x01
    3dba:	2d c0       	rjmp	.+90     	; 0x3e16 <_serial_call_back+0x70>
    3dbc:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <rec_buf_inp.2947>
    3dc0:	ec 32       	cpi	r30, 0x2C	; 44
    3dc2:	50 f4       	brcc	.+20     	; 0x3dd8 <_serial_call_back+0x32>
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	8e 0f       	add	r24, r30
    3dc8:	80 93 9e 19 	sts	0x199E, r24	; 0x80199e <rec_buf_inp.2947>
    3dcc:	f0 e0       	ldi	r31, 0x00	; 0
    3dce:	e0 53       	subi	r30, 0x30	; 48
    3dd0:	f6 4e       	sbci	r31, 0xE6	; 230
    3dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd4:	80 83       	st	Z, r24
    3dd6:	02 c0       	rjmp	.+4      	; 0x3ddc <_serial_call_back+0x36>
    3dd8:	10 92 9e 19 	sts	0x199E, r1	; 0x80199e <rec_buf_inp.2947>
    3ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dde:	8a 30       	cpi	r24, 0x0A	; 10
    3de0:	d1 f4       	brne	.+52     	; 0x3e16 <_serial_call_back+0x70>
    3de2:	40 91 9e 19 	lds	r20, 0x199E	; 0x80199e <rec_buf_inp.2947>
    3de6:	50 e0       	ldi	r21, 0x00	; 0
    3de8:	fa 01       	movw	r30, r20
    3dea:	e2 53       	subi	r30, 0x32	; 50
    3dec:	f6 4e       	sbci	r31, 0xE6	; 230
    3dee:	10 82       	st	Z, r1
    3df0:	41 50       	subi	r20, 0x01	; 1
    3df2:	51 09       	sbc	r21, r1
    3df4:	9e 01       	movw	r18, r28
    3df6:	2f 5f       	subi	r18, 0xFF	; 255
    3df8:	3f 4f       	sbci	r19, 0xFF	; 255
    3dfa:	60 ed       	ldi	r22, 0xD0	; 208
    3dfc:	79 e1       	ldi	r23, 0x19	; 25
    3dfe:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <_serial_reply_buffer_handle>
    3e02:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <_serial_reply_buffer_handle+0x1>
    3e06:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <xStreamBufferSendFromISR>
    3e0a:	89 81       	ldd	r24, Y+1	; 0x01
    3e0c:	81 11       	cpse	r24, r1
    3e0e:	0e 94 26 09 	call	0x124c	; 0x124c <vPortYield>
    3e12:	10 92 9e 19 	sts	0x199E, r1	; 0x80199e <rec_buf_inp.2947>
    3e16:	be 01       	movw	r22, r28
    3e18:	6e 5f       	subi	r22, 0xFE	; 254
    3e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e1c:	c8 01       	movw	r24, r16
    3e1e:	48 d6       	rcall	.+3216   	; 0x4ab0 <serial_get_byte>
    3e20:	88 23       	and	r24, r24
    3e22:	61 f2       	breq	.-104    	; 0x3dbc <_serial_call_back+0x16>
    3e24:	0f 90       	pop	r0
    3e26:	0f 90       	pop	r0
    3e28:	df 91       	pop	r29
    3e2a:	cf 91       	pop	r28
    3e2c:	1f 91       	pop	r17
    3e2e:	0f 91       	pop	r16
    3e30:	08 95       	ret

00003e32 <_upload_message>:
    3e32:	0f 93       	push	r16
    3e34:	1f 93       	push	r17
    3e36:	cf 93       	push	r28
    3e38:	df 93       	push	r29
    3e3a:	8c 01       	movw	r16, r24
    3e3c:	eb 01       	movw	r28, r22
    3e3e:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <_serial_reply_buffer_handle>
    3e42:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <_serial_reply_buffer_handle+0x1>
    3e46:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <xStreamBufferReset>
    3e4a:	b8 01       	movw	r22, r16
    3e4c:	8a e3       	ldi	r24, 0x3A	; 58
    3e4e:	99 e1       	ldi	r25, 0x19	; 25
    3e50:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <strcpy>
    3e54:	20 97       	sbiw	r28, 0x00	; 0
    3e56:	79 f0       	breq	.+30     	; 0x3e76 <_upload_message+0x44>
    3e58:	ea e3       	ldi	r30, 0x3A	; 58
    3e5a:	f9 e1       	ldi	r31, 0x19	; 25
    3e5c:	01 90       	ld	r0, Z+
    3e5e:	00 20       	and	r0, r0
    3e60:	e9 f7       	brne	.-6      	; 0x3e5c <_upload_message+0x2a>
    3e62:	31 97       	sbiw	r30, 0x01	; 1
    3e64:	80 e2       	ldi	r24, 0x20	; 32
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	91 83       	std	Z+1, r25	; 0x01
    3e6a:	80 83       	st	Z, r24
    3e6c:	be 01       	movw	r22, r28
    3e6e:	8a e3       	ldi	r24, 0x3A	; 58
    3e70:	99 e1       	ldi	r25, 0x19	; 25
    3e72:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <strcat>
    3e76:	ea e3       	ldi	r30, 0x3A	; 58
    3e78:	f9 e1       	ldi	r31, 0x19	; 25
    3e7a:	df 01       	movw	r26, r30
    3e7c:	0d 90       	ld	r0, X+
    3e7e:	00 20       	and	r0, r0
    3e80:	e9 f7       	brne	.-6      	; 0x3e7c <_upload_message+0x4a>
    3e82:	11 97       	sbiw	r26, 0x01	; 1
    3e84:	8d e0       	ldi	r24, 0x0D	; 13
    3e86:	9a e0       	ldi	r25, 0x0A	; 10
    3e88:	11 96       	adiw	r26, 0x01	; 1
    3e8a:	9c 93       	st	X, r25
    3e8c:	8e 93       	st	-X, r24
    3e8e:	12 96       	adiw	r26, 0x02	; 2
    3e90:	1c 92       	st	X, r1
    3e92:	01 90       	ld	r0, Z+
    3e94:	00 20       	and	r0, r0
    3e96:	e9 f7       	brne	.-6      	; 0x3e92 <_upload_message+0x60>
    3e98:	31 97       	sbiw	r30, 0x01	; 1
    3e9a:	ea 53       	subi	r30, 0x3A	; 58
    3e9c:	f9 41       	sbci	r31, 0x19	; 25
    3e9e:	ae 2f       	mov	r26, r30
    3ea0:	8a e3       	ldi	r24, 0x3A	; 58
    3ea2:	99 e1       	ldi	r25, 0x19	; 25
    3ea4:	ac 01       	movw	r20, r24
    3ea6:	6a 2f       	mov	r22, r26
    3ea8:	80 91 a3 19 	lds	r24, 0x19A3	; 0x8019a3 <_rn2483_serial>
    3eac:	90 91 a4 19 	lds	r25, 0x19A4	; 0x8019a4 <_rn2483_serial+0x1>
    3eb0:	af d5       	rcall	.+2910   	; 0x4a10 <serial_send_bytes>
    3eb2:	81 11       	cpse	r24, r1
    3eb4:	11 c0       	rjmp	.+34     	; 0x3ed8 <_upload_message+0xa6>
    3eb6:	08 e2       	ldi	r16, 0x28	; 40
    3eb8:	15 e0       	ldi	r17, 0x05	; 5
    3eba:	20 e0       	ldi	r18, 0x00	; 0
    3ebc:	30 e0       	ldi	r19, 0x00	; 0
    3ebe:	4d e2       	ldi	r20, 0x2D	; 45
    3ec0:	50 e0       	ldi	r21, 0x00	; 0
    3ec2:	6a e2       	ldi	r22, 0x2A	; 42
    3ec4:	7a e1       	ldi	r23, 0x1A	; 26
    3ec6:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <_serial_reply_buffer_handle>
    3eca:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <_serial_reply_buffer_handle+0x1>
    3ece:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <xStreamBufferReceive>
    3ed2:	8a e2       	ldi	r24, 0x2A	; 42
    3ed4:	9a e1       	ldi	r25, 0x1A	; 26
    3ed6:	02 c0       	rjmp	.+4      	; 0x3edc <_upload_message+0xaa>
    3ed8:	80 e0       	ldi	r24, 0x00	; 0
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	df 91       	pop	r29
    3ede:	cf 91       	pop	r28
    3ee0:	1f 91       	pop	r17
    3ee2:	0f 91       	pop	r16
    3ee4:	08 95       	ret

00003ee6 <_reply2return_code>:
    3ee6:	2f 92       	push	r2
    3ee8:	3f 92       	push	r3
    3eea:	4f 92       	push	r4
    3eec:	5f 92       	push	r5
    3eee:	6f 92       	push	r6
    3ef0:	7f 92       	push	r7
    3ef2:	8f 92       	push	r8
    3ef4:	9f 92       	push	r9
    3ef6:	af 92       	push	r10
    3ef8:	bf 92       	push	r11
    3efa:	cf 92       	push	r12
    3efc:	df 92       	push	r13
    3efe:	ef 92       	push	r14
    3f00:	ff 92       	push	r15
    3f02:	0f 93       	push	r16
    3f04:	1f 93       	push	r17
    3f06:	cf 93       	push	r28
    3f08:	df 93       	push	r29
    3f0a:	5c 01       	movw	r10, r24
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	01 90       	ld	r0, Z+
    3f10:	00 20       	and	r0, r0
    3f12:	e9 f7       	brne	.-6      	; 0x3f0e <_reply2return_code+0x28>
    3f14:	31 97       	sbiw	r30, 0x01	; 1
    3f16:	6f 01       	movw	r12, r30
    3f18:	c8 1a       	sub	r12, r24
    3f1a:	d9 0a       	sbc	r13, r25
    3f1c:	5c 2c       	mov	r5, r12
    3f1e:	0f 2e       	mov	r0, r31
    3f20:	f4 e2       	ldi	r31, 0x24	; 36
    3f22:	8f 2e       	mov	r8, r31
    3f24:	f8 e0       	ldi	r31, 0x08	; 8
    3f26:	9f 2e       	mov	r9, r31
    3f28:	f0 2d       	mov	r31, r0
    3f2a:	e1 2c       	mov	r14, r1
    3f2c:	f1 2c       	mov	r15, r1
    3f2e:	4c 2c       	mov	r4, r12
    3f30:	37 01       	movw	r6, r14
    3f32:	f4 01       	movw	r30, r8
    3f34:	01 81       	ldd	r16, Z+1	; 0x01
    3f36:	12 81       	ldd	r17, Z+2	; 0x02
    3f38:	e8 01       	movw	r28, r16
    3f3a:	09 90       	ld	r0, Y+
    3f3c:	00 20       	and	r0, r0
    3f3e:	e9 f7       	brne	.-6      	; 0x3f3a <_reply2return_code+0x54>
    3f40:	21 97       	sbiw	r28, 0x01	; 1
    3f42:	c0 1b       	sub	r28, r16
    3f44:	d1 0b       	sbc	r29, r17
    3f46:	3c 2e       	mov	r3, r28
    3f48:	f9 e0       	ldi	r31, 0x09	; 9
    3f4a:	cf 16       	cp	r12, r31
    3f4c:	d1 04       	cpc	r13, r1
    3f4e:	58 f0       	brcs	.+22     	; 0x3f66 <_reply2return_code+0x80>
    3f50:	f4 01       	movw	r30, r8
    3f52:	20 80       	ld	r2, Z
    3f54:	fe e0       	ldi	r31, 0x0E	; 14
    3f56:	2f 12       	cpse	r2, r31
    3f58:	06 c0       	rjmp	.+12     	; 0x3f66 <_reply2return_code+0x80>
    3f5a:	b8 01       	movw	r22, r16
    3f5c:	c5 01       	movw	r24, r10
    3f5e:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <strcasestr>
    3f62:	89 2b       	or	r24, r25
    3f64:	09 f5       	brne	.+66     	; 0x3fa8 <_reply2return_code+0xc2>
    3f66:	44 2d       	mov	r20, r4
    3f68:	35 14       	cp	r3, r5
    3f6a:	08 f4       	brcc	.+2      	; 0x3f6e <_reply2return_code+0x88>
    3f6c:	4c 2f       	mov	r20, r28
    3f6e:	50 e0       	ldi	r21, 0x00	; 0
    3f70:	b8 01       	movw	r22, r16
    3f72:	c5 01       	movw	r24, r10
    3f74:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <strncasecmp>
    3f78:	89 2b       	or	r24, r25
    3f7a:	49 f4       	brne	.+18     	; 0x3f8e <_reply2return_code+0xa8>
    3f7c:	f3 01       	movw	r30, r6
    3f7e:	ee 0f       	add	r30, r30
    3f80:	ff 1f       	adc	r31, r31
    3f82:	e6 0d       	add	r30, r6
    3f84:	f7 1d       	adc	r31, r7
    3f86:	ec 5d       	subi	r30, 0xDC	; 220
    3f88:	f7 4f       	sbci	r31, 0xF7	; 247
    3f8a:	20 80       	ld	r2, Z
    3f8c:	0d c0       	rjmp	.+26     	; 0x3fa8 <_reply2return_code+0xc2>
    3f8e:	8f ef       	ldi	r24, 0xFF	; 255
    3f90:	e8 1a       	sub	r14, r24
    3f92:	f8 0a       	sbc	r15, r24
    3f94:	e3 e0       	ldi	r30, 0x03	; 3
    3f96:	8e 0e       	add	r8, r30
    3f98:	91 1c       	adc	r9, r1
    3f9a:	f1 e1       	ldi	r31, 0x11	; 17
    3f9c:	ef 16       	cp	r14, r31
    3f9e:	f1 04       	cpc	r15, r1
    3fa0:	39 f6       	brne	.-114    	; 0x3f30 <_reply2return_code+0x4a>
    3fa2:	68 94       	set
    3fa4:	22 24       	eor	r2, r2
    3fa6:	24 f8       	bld	r2, 4
    3fa8:	82 2d       	mov	r24, r2
    3faa:	df 91       	pop	r29
    3fac:	cf 91       	pop	r28
    3fae:	1f 91       	pop	r17
    3fb0:	0f 91       	pop	r16
    3fb2:	ff 90       	pop	r15
    3fb4:	ef 90       	pop	r14
    3fb6:	df 90       	pop	r13
    3fb8:	cf 90       	pop	r12
    3fba:	bf 90       	pop	r11
    3fbc:	af 90       	pop	r10
    3fbe:	9f 90       	pop	r9
    3fc0:	8f 90       	pop	r8
    3fc2:	7f 90       	pop	r7
    3fc4:	6f 90       	pop	r6
    3fc6:	5f 90       	pop	r5
    3fc8:	4f 90       	pop	r4
    3fca:	3f 90       	pop	r3
    3fcc:	2f 90       	pop	r2
    3fce:	08 95       	ret

00003fd0 <_upload_message_rc>:
    3fd0:	30 df       	rcall	.-416    	; 0x3e32 <_upload_message>
    3fd2:	89 cf       	rjmp	.-238    	; 0x3ee6 <_reply2return_code>
    3fd4:	08 95       	ret

00003fd6 <lora_driver_flush_buffers>:
    3fd6:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <_serial_reply_buffer_handle>
    3fda:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <_serial_reply_buffer_handle+0x1>
    3fde:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <xStreamBufferReset>
    3fe2:	08 95       	ret

00003fe4 <lora_driver_create>:
    3fe4:	8f 92       	push	r8
    3fe6:	9f 92       	push	r9
    3fe8:	af 92       	push	r10
    3fea:	cf 92       	push	r12
    3fec:	ef 92       	push	r14
    3fee:	0f 93       	push	r16
    3ff0:	1f 93       	push	r17
    3ff2:	cf 93       	push	r28
    3ff4:	c8 2f       	mov	r28, r24
    3ff6:	8b 01       	movw	r16, r22
    3ff8:	41 e0       	ldi	r20, 0x01	; 1
    3ffa:	60 e0       	ldi	r22, 0x00	; 0
    3ffc:	70 e0       	ldi	r23, 0x00	; 0
    3ffe:	88 ec       	ldi	r24, 0xC8	; 200
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <xStreamBufferGenericCreate>
    4006:	90 93 a2 19 	sts	0x19A2, r25	; 0x8019a2 <_serial_reply_buffer_handle+0x1>
    400a:	80 93 a1 19 	sts	0x19A1, r24	; 0x8019a1 <_serial_reply_buffer_handle>
    400e:	10 93 a0 19 	sts	0x19A0, r17	; 0x8019a0 <_downlinkMessageBuffer+0x1>
    4012:	00 93 9f 19 	sts	0x199F, r16	; 0x80199f <_downlinkMessageBuffer>
    4016:	0f 2e       	mov	r0, r31
    4018:	f3 ed       	ldi	r31, 0xD3	; 211
    401a:	8f 2e       	mov	r8, r31
    401c:	fe e1       	ldi	r31, 0x1E	; 30
    401e:	9f 2e       	mov	r9, r31
    4020:	f0 2d       	mov	r31, r0
    4022:	68 94       	set
    4024:	aa 24       	eor	r10, r10
    4026:	a6 f8       	bld	r10, 6
    4028:	68 94       	set
    402a:	cc 24       	eor	r12, r12
    402c:	c6 f8       	bld	r12, 6
    402e:	e1 2c       	mov	r14, r1
    4030:	00 e0       	ldi	r16, 0x00	; 0
    4032:	23 e0       	ldi	r18, 0x03	; 3
    4034:	40 e0       	ldi	r20, 0x00	; 0
    4036:	51 ee       	ldi	r21, 0xE1	; 225
    4038:	60 e0       	ldi	r22, 0x00	; 0
    403a:	70 e0       	ldi	r23, 0x00	; 0
    403c:	8c 2f       	mov	r24, r28
    403e:	2c d4       	rcall	.+2136   	; 0x4898 <serial_new_instance>
    4040:	90 93 a4 19 	sts	0x19A4, r25	; 0x8019a4 <_rn2483_serial+0x1>
    4044:	80 93 a3 19 	sts	0x19A3, r24	; 0x8019a3 <_rn2483_serial>
    4048:	e0 91 9a 1a 	lds	r30, 0x1A9A	; 0x801a9a <register_access+0x8>
    404c:	f0 91 9b 1a 	lds	r31, 0x1A9B	; 0x801a9b <register_access+0x9>
    4050:	64 e0       	ldi	r22, 0x04	; 4
    4052:	87 e0       	ldi	r24, 0x07	; 7
    4054:	91 e0       	ldi	r25, 0x01	; 1
    4056:	19 95       	eicall
    4058:	cf 91       	pop	r28
    405a:	1f 91       	pop	r17
    405c:	0f 91       	pop	r16
    405e:	ef 90       	pop	r14
    4060:	cf 90       	pop	r12
    4062:	af 90       	pop	r10
    4064:	9f 90       	pop	r9
    4066:	8f 90       	pop	r8
    4068:	08 95       	ret

0000406a <lora_driver_reset_rn2483>:
    406a:	88 23       	and	r24, r24
    406c:	49 f0       	breq	.+18     	; 0x4080 <lora_driver_reset_rn2483+0x16>
    406e:	e0 91 a4 1a 	lds	r30, 0x1AA4	; 0x801aa4 <register_access+0x12>
    4072:	f0 91 a5 1a 	lds	r31, 0x1AA5	; 0x801aa5 <register_access+0x13>
    4076:	64 e0       	ldi	r22, 0x04	; 4
    4078:	88 e0       	ldi	r24, 0x08	; 8
    407a:	91 e0       	ldi	r25, 0x01	; 1
    407c:	19 95       	eicall
    407e:	08 95       	ret
    4080:	e0 91 9a 1a 	lds	r30, 0x1A9A	; 0x801a9a <register_access+0x8>
    4084:	f0 91 9b 1a 	lds	r31, 0x1A9B	; 0x801a9b <register_access+0x9>
    4088:	64 e0       	ldi	r22, 0x04	; 4
    408a:	88 e0       	ldi	r24, 0x08	; 8
    408c:	91 e0       	ldi	r25, 0x01	; 1
    408e:	19 95       	eicall
    4090:	08 95       	ret

00004092 <lora_driver_rn2483_factory_reset>:
    4092:	60 e0       	ldi	r22, 0x00	; 0
    4094:	70 e0       	ldi	r23, 0x00	; 0
    4096:	8a ea       	ldi	r24, 0xAA	; 170
    4098:	95 e0       	ldi	r25, 0x05	; 5
    409a:	cb de       	rcall	.-618    	; 0x3e32 <_upload_message>
    409c:	ea e2       	ldi	r30, 0x2A	; 42
    409e:	fa e1       	ldi	r31, 0x1A	; 26
    40a0:	01 90       	ld	r0, Z+
    40a2:	00 20       	and	r0, r0
    40a4:	e9 f7       	brne	.-6      	; 0x40a0 <lora_driver_rn2483_factory_reset+0xe>
    40a6:	31 97       	sbiw	r30, 0x01	; 1
    40a8:	ea 52       	subi	r30, 0x2A	; 42
    40aa:	fa 41       	sbci	r31, 0x1A	; 26
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	75 97       	sbiw	r30, 0x15	; 21
    40b0:	08 f0       	brcs	.+2      	; 0x40b4 <lora_driver_rn2483_factory_reset+0x22>
    40b2:	80 e0       	ldi	r24, 0x00	; 0
    40b4:	08 95       	ret

000040b6 <lora_driver_get_rn2483_hweui>:
    40b6:	cf 93       	push	r28
    40b8:	df 93       	push	r29
    40ba:	ec 01       	movw	r28, r24
    40bc:	60 e0       	ldi	r22, 0x00	; 0
    40be:	70 e0       	ldi	r23, 0x00	; 0
    40c0:	8b eb       	ldi	r24, 0xBB	; 187
    40c2:	95 e0       	ldi	r25, 0x05	; 5
    40c4:	b6 de       	rcall	.-660    	; 0x3e32 <_upload_message>
    40c6:	ea e2       	ldi	r30, 0x2A	; 42
    40c8:	fa e1       	ldi	r31, 0x1A	; 26
    40ca:	01 90       	ld	r0, Z+
    40cc:	00 20       	and	r0, r0
    40ce:	e9 f7       	brne	.-6      	; 0x40ca <lora_driver_get_rn2483_hweui+0x14>
    40d0:	eb 53       	subi	r30, 0x3B	; 59
    40d2:	fa 41       	sbci	r31, 0x1A	; 26
    40d4:	39 f4       	brne	.+14     	; 0x40e4 <lora_driver_get_rn2483_hweui+0x2e>
    40d6:	6a e2       	ldi	r22, 0x2A	; 42
    40d8:	7a e1       	ldi	r23, 0x1A	; 26
    40da:	ce 01       	movw	r24, r28
    40dc:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <strcpy>
    40e0:	80 e0       	ldi	r24, 0x00	; 0
    40e2:	02 c0       	rjmp	.+4      	; 0x40e8 <lora_driver_get_rn2483_hweui+0x32>
    40e4:	18 82       	st	Y, r1
    40e6:	81 e0       	ldi	r24, 0x01	; 1
    40e8:	df 91       	pop	r29
    40ea:	cf 91       	pop	r28
    40ec:	08 95       	ret

000040ee <lora_driver_set_device_identifier>:
    40ee:	fc 01       	movw	r30, r24
    40f0:	01 90       	ld	r0, Z+
    40f2:	00 20       	and	r0, r0
    40f4:	e9 f7       	brne	.-6      	; 0x40f0 <lora_driver_set_device_identifier+0x2>
    40f6:	9f 01       	movw	r18, r30
    40f8:	21 51       	subi	r18, 0x11	; 17
    40fa:	31 09       	sbc	r19, r1
    40fc:	28 17       	cp	r18, r24
    40fe:	39 07       	cpc	r19, r25
    4100:	29 f4       	brne	.+10     	; 0x410c <lora_driver_set_device_identifier+0x1e>
    4102:	bc 01       	movw	r22, r24
    4104:	89 ee       	ldi	r24, 0xE9	; 233
    4106:	95 e0       	ldi	r25, 0x05	; 5
    4108:	63 cf       	rjmp	.-314    	; 0x3fd0 <_upload_message_rc>
    410a:	08 95       	ret
    410c:	89 e0       	ldi	r24, 0x09	; 9
    410e:	08 95       	ret

00004110 <lora_driver_set_application_identifier>:
    4110:	fc 01       	movw	r30, r24
    4112:	01 90       	ld	r0, Z+
    4114:	00 20       	and	r0, r0
    4116:	e9 f7       	brne	.-6      	; 0x4112 <lora_driver_set_application_identifier+0x2>
    4118:	9f 01       	movw	r18, r30
    411a:	21 51       	subi	r18, 0x11	; 17
    411c:	31 09       	sbc	r19, r1
    411e:	28 17       	cp	r18, r24
    4120:	39 07       	cpc	r19, r25
    4122:	29 f4       	brne	.+10     	; 0x412e <lora_driver_set_application_identifier+0x1e>
    4124:	bc 01       	movw	r22, r24
    4126:	88 ef       	ldi	r24, 0xF8	; 248
    4128:	95 e0       	ldi	r25, 0x05	; 5
    412a:	52 cf       	rjmp	.-348    	; 0x3fd0 <_upload_message_rc>
    412c:	08 95       	ret
    412e:	89 e0       	ldi	r24, 0x09	; 9
    4130:	08 95       	ret

00004132 <lora_driver_set_application_key>:
    4132:	fc 01       	movw	r30, r24
    4134:	01 90       	ld	r0, Z+
    4136:	00 20       	and	r0, r0
    4138:	e9 f7       	brne	.-6      	; 0x4134 <lora_driver_set_application_key+0x2>
    413a:	9f 01       	movw	r18, r30
    413c:	21 52       	subi	r18, 0x21	; 33
    413e:	31 09       	sbc	r19, r1
    4140:	28 17       	cp	r18, r24
    4142:	39 07       	cpc	r19, r25
    4144:	29 f4       	brne	.+10     	; 0x4150 <lora_driver_set_application_key+0x1e>
    4146:	bc 01       	movw	r22, r24
    4148:	87 e0       	ldi	r24, 0x07	; 7
    414a:	96 e0       	ldi	r25, 0x06	; 6
    414c:	41 cf       	rjmp	.-382    	; 0x3fd0 <_upload_message_rc>
    414e:	08 95       	ret
    4150:	89 e0       	ldi	r24, 0x09	; 9
    4152:	08 95       	ret

00004154 <lora_driver_save_mac>:
    4154:	60 e0       	ldi	r22, 0x00	; 0
    4156:	70 e0       	ldi	r23, 0x00	; 0
    4158:	86 e4       	ldi	r24, 0x46	; 70
    415a:	96 e0       	ldi	r25, 0x06	; 6
    415c:	39 cf       	rjmp	.-398    	; 0x3fd0 <_upload_message_rc>
    415e:	08 95       	ret

00004160 <lora_driver_join>:
    4160:	0f 93       	push	r16
    4162:	1f 93       	push	r17
    4164:	e8 2f       	mov	r30, r24
    4166:	f0 e0       	ldi	r31, 0x00	; 0
    4168:	ee 0f       	add	r30, r30
    416a:	ff 1f       	adc	r31, r31
    416c:	e0 5e       	subi	r30, 0xE0	; 224
    416e:	f7 4f       	sbci	r31, 0xF7	; 247
    4170:	60 81       	ld	r22, Z
    4172:	71 81       	ldd	r23, Z+1	; 0x01
    4174:	8f e4       	ldi	r24, 0x4F	; 79
    4176:	96 e0       	ldi	r25, 0x06	; 6
    4178:	2b df       	rcall	.-426    	; 0x3fd0 <_upload_message_rc>
    417a:	81 11       	cpse	r24, r1
    417c:	14 c0       	rjmp	.+40     	; 0x41a6 <lora_driver_join+0x46>
    417e:	08 e2       	ldi	r16, 0x28	; 40
    4180:	15 e0       	ldi	r17, 0x05	; 5
    4182:	20 e0       	ldi	r18, 0x00	; 0
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	4d e2       	ldi	r20, 0x2D	; 45
    4188:	50 e0       	ldi	r21, 0x00	; 0
    418a:	6a e2       	ldi	r22, 0x2A	; 42
    418c:	7a e1       	ldi	r23, 0x1A	; 26
    418e:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <_serial_reply_buffer_handle>
    4192:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <_serial_reply_buffer_handle+0x1>
    4196:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <xStreamBufferReceive>
    419a:	88 23       	and	r24, r24
    419c:	21 f0       	breq	.+8      	; 0x41a6 <lora_driver_join+0x46>
    419e:	8a e2       	ldi	r24, 0x2A	; 42
    41a0:	9a e1       	ldi	r25, 0x1A	; 26
    41a2:	a1 de       	rcall	.-702    	; 0x3ee6 <_reply2return_code>
    41a4:	03 c0       	rjmp	.+6      	; 0x41ac <lora_driver_join+0x4c>
    41a6:	8a e2       	ldi	r24, 0x2A	; 42
    41a8:	9a e1       	ldi	r25, 0x1A	; 26
    41aa:	9d de       	rcall	.-710    	; 0x3ee6 <_reply2return_code>
    41ac:	1f 91       	pop	r17
    41ae:	0f 91       	pop	r16
    41b0:	08 95       	ret

000041b2 <lora_driver_sent_upload_message>:
    41b2:	0f 93       	push	r16
    41b4:	1f 93       	push	r17
    41b6:	cf 93       	push	r28
    41b8:	df 93       	push	r29
    41ba:	1f 92       	push	r1
    41bc:	cd b7       	in	r28, 0x3d	; 61
    41be:	de b7       	in	r29, 0x3e	; 62
    41c0:	db 01       	movw	r26, r22
    41c2:	11 96       	adiw	r26, 0x01	; 1
    41c4:	9c 91       	ld	r25, X
    41c6:	11 97       	sbiw	r26, 0x01	; 1
    41c8:	95 31       	cpi	r25, 0x15	; 21
    41ca:	08 f0       	brcs	.+2      	; 0x41ce <lora_driver_sent_upload_message+0x1c>
    41cc:	b4 c0       	rjmp	.+360    	; 0x4336 <lora_driver_sent_upload_message+0x184>
    41ce:	99 23       	and	r25, r25
    41d0:	81 f1       	breq	.+96     	; 0x4232 <lora_driver_sent_upload_message+0x80>
    41d2:	60 e0       	ldi	r22, 0x00	; 0
    41d4:	70 e0       	ldi	r23, 0x00	; 0
    41d6:	27 2f       	mov	r18, r23
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	46 2f       	mov	r20, r22
    41dc:	50 e0       	ldi	r21, 0x00	; 0
    41de:	fd 01       	movw	r30, r26
    41e0:	e4 0f       	add	r30, r20
    41e2:	f5 1f       	adc	r31, r21
    41e4:	92 81       	ldd	r25, Z+2	; 0x02
    41e6:	92 95       	swap	r25
    41e8:	9f 70       	andi	r25, 0x0F	; 15
    41ea:	9a 30       	cpi	r25, 0x0A	; 10
    41ec:	10 f0       	brcs	.+4      	; 0x41f2 <lora_driver_sent_upload_message+0x40>
    41ee:	99 5c       	subi	r25, 0xC9	; 201
    41f0:	01 c0       	rjmp	.+2      	; 0x41f4 <lora_driver_sent_upload_message+0x42>
    41f2:	90 5d       	subi	r25, 0xD0	; 208
    41f4:	f9 01       	movw	r30, r18
    41f6:	e5 54       	subi	r30, 0x45	; 69
    41f8:	f6 4e       	sbci	r31, 0xE6	; 230
    41fa:	90 83       	st	Z, r25
    41fc:	2f 5f       	subi	r18, 0xFF	; 255
    41fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4200:	fd 01       	movw	r30, r26
    4202:	e4 0f       	add	r30, r20
    4204:	f5 1f       	adc	r31, r21
    4206:	92 81       	ldd	r25, Z+2	; 0x02
    4208:	9f 70       	andi	r25, 0x0F	; 15
    420a:	49 2f       	mov	r20, r25
    420c:	50 e0       	ldi	r21, 0x00	; 0
    420e:	4a 30       	cpi	r20, 0x0A	; 10
    4210:	51 05       	cpc	r21, r1
    4212:	14 f0       	brlt	.+4      	; 0x4218 <lora_driver_sent_upload_message+0x66>
    4214:	99 5c       	subi	r25, 0xC9	; 201
    4216:	01 c0       	rjmp	.+2      	; 0x421a <lora_driver_sent_upload_message+0x68>
    4218:	90 5d       	subi	r25, 0xD0	; 208
    421a:	f9 01       	movw	r30, r18
    421c:	e5 54       	subi	r30, 0x45	; 69
    421e:	f6 4e       	sbci	r31, 0xE6	; 230
    4220:	90 83       	st	Z, r25
    4222:	7e 5f       	subi	r23, 0xFE	; 254
    4224:	6f 5f       	subi	r22, 0xFF	; 255
    4226:	11 96       	adiw	r26, 0x01	; 1
    4228:	9c 91       	ld	r25, X
    422a:	11 97       	sbiw	r26, 0x01	; 1
    422c:	69 17       	cp	r22, r25
    422e:	98 f2       	brcs	.-90     	; 0x41d6 <lora_driver_sent_upload_message+0x24>
    4230:	01 c0       	rjmp	.+2      	; 0x4234 <lora_driver_sent_upload_message+0x82>
    4232:	70 e0       	ldi	r23, 0x00	; 0
    4234:	e7 2f       	mov	r30, r23
    4236:	f0 e0       	ldi	r31, 0x00	; 0
    4238:	e5 54       	subi	r30, 0x45	; 69
    423a:	f6 4e       	sbci	r31, 0xE6	; 230
    423c:	10 82       	st	Z, r1
    423e:	4c 91       	ld	r20, X
    4240:	81 11       	cpse	r24, r1
    4242:	03 c0       	rjmp	.+6      	; 0x424a <lora_driver_sent_upload_message+0x98>
    4244:	88 e5       	ldi	r24, 0x58	; 88
    4246:	96 e0       	ldi	r25, 0x06	; 6
    4248:	02 c0       	rjmp	.+4      	; 0x424e <lora_driver_sent_upload_message+0x9c>
    424a:	8a e5       	ldi	r24, 0x5A	; 90
    424c:	96 e0       	ldi	r25, 0x06	; 6
    424e:	2b eb       	ldi	r18, 0xBB	; 187
    4250:	39 e1       	ldi	r19, 0x19	; 25
    4252:	3f 93       	push	r19
    4254:	2f 93       	push	r18
    4256:	1f 92       	push	r1
    4258:	4f 93       	push	r20
    425a:	9f 93       	push	r25
    425c:	8f 93       	push	r24
    425e:	8e e5       	ldi	r24, 0x5E	; 94
    4260:	96 e0       	ldi	r25, 0x06	; 6
    4262:	9f 93       	push	r25
    4264:	8f 93       	push	r24
    4266:	8d ef       	ldi	r24, 0xFD	; 253
    4268:	99 e1       	ldi	r25, 0x19	; 25
    426a:	9f 93       	push	r25
    426c:	8f 93       	push	r24
    426e:	0e 94 75 2d 	call	0x5aea	; 0x5aea <sprintf>
    4272:	60 e0       	ldi	r22, 0x00	; 0
    4274:	70 e0       	ldi	r23, 0x00	; 0
    4276:	8d ef       	ldi	r24, 0xFD	; 253
    4278:	99 e1       	ldi	r25, 0x19	; 25
    427a:	aa de       	rcall	.-684    	; 0x3fd0 <_upload_message_rc>
    427c:	0f b6       	in	r0, 0x3f	; 63
    427e:	f8 94       	cli
    4280:	de bf       	out	0x3e, r29	; 62
    4282:	0f be       	out	0x3f, r0	; 63
    4284:	cd bf       	out	0x3d, r28	; 61
    4286:	81 11       	cpse	r24, r1
    4288:	59 c0       	rjmp	.+178    	; 0x433c <lora_driver_sent_upload_message+0x18a>
    428a:	08 e2       	ldi	r16, 0x28	; 40
    428c:	15 e0       	ldi	r17, 0x05	; 5
    428e:	20 e0       	ldi	r18, 0x00	; 0
    4290:	30 e0       	ldi	r19, 0x00	; 0
    4292:	4d e2       	ldi	r20, 0x2D	; 45
    4294:	50 e0       	ldi	r21, 0x00	; 0
    4296:	6a e2       	ldi	r22, 0x2A	; 42
    4298:	7a e1       	ldi	r23, 0x1A	; 26
    429a:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <_serial_reply_buffer_handle>
    429e:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <_serial_reply_buffer_handle+0x1>
    42a2:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <xStreamBufferReceive>
    42a6:	88 23       	and	r24, r24
    42a8:	09 f4       	brne	.+2      	; 0x42ac <lora_driver_sent_upload_message+0xfa>
    42aa:	47 c0       	rjmp	.+142    	; 0x433a <lora_driver_sent_upload_message+0x188>
    42ac:	8a e2       	ldi	r24, 0x2A	; 42
    42ae:	9a e1       	ldi	r25, 0x1A	; 26
    42b0:	1a de       	rcall	.-972    	; 0x3ee6 <_reply2return_code>
    42b2:	8e 30       	cpi	r24, 0x0E	; 14
    42b4:	09 f0       	breq	.+2      	; 0x42b8 <lora_driver_sent_upload_message+0x106>
    42b6:	42 c0       	rjmp	.+132    	; 0x433c <lora_driver_sent_upload_message+0x18a>
    42b8:	87 e0       	ldi	r24, 0x07	; 7
    42ba:	89 83       	std	Y+1, r24	; 0x01
    42bc:	80 91 9f 19 	lds	r24, 0x199F	; 0x80199f <_downlinkMessageBuffer>
    42c0:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <_downlinkMessageBuffer+0x1>
    42c4:	89 2b       	or	r24, r25
    42c6:	a9 f1       	breq	.+106    	; 0x4332 <lora_driver_sent_upload_message+0x180>
    42c8:	be 01       	movw	r22, r28
    42ca:	6f 5f       	subi	r22, 0xFF	; 255
    42cc:	7f 4f       	sbci	r23, 0xFF	; 255
    42ce:	8a e2       	ldi	r24, 0x2A	; 42
    42d0:	9a e1       	ldi	r25, 0x1A	; 26
    42d2:	68 d1       	rcall	.+720    	; 0x45a4 <decode_port_no>
    42d4:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <_downlink_payload>
    42d8:	e9 81       	ldd	r30, Y+1	; 0x01
    42da:	f0 e0       	ldi	r31, 0x00	; 0
    42dc:	e6 5d       	subi	r30, 0xD6	; 214
    42de:	f5 4e       	sbci	r31, 0xE5	; 229
    42e0:	df 01       	movw	r26, r30
    42e2:	0d 90       	ld	r0, X+
    42e4:	00 20       	and	r0, r0
    42e6:	e9 f7       	brne	.-6      	; 0x42e2 <lora_driver_sent_upload_message+0x130>
    42e8:	11 97       	sbiw	r26, 0x01	; 1
    42ea:	ae 1b       	sub	r26, r30
    42ec:	bf 0b       	sbc	r27, r31
    42ee:	aa 23       	and	r26, r26
    42f0:	91 f0       	breq	.+36     	; 0x4316 <lora_driver_sent_upload_message+0x164>
    42f2:	bb 27       	eor	r27, r27
    42f4:	cd 01       	movw	r24, r26
    42f6:	01 97       	sbiw	r24, 0x01	; 1
    42f8:	9c 01       	movw	r18, r24
    42fa:	12 f4       	brpl	.+4      	; 0x4300 <lora_driver_sent_upload_message+0x14e>
    42fc:	2f 5f       	subi	r18, 0xFF	; 255
    42fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4300:	35 95       	asr	r19
    4302:	27 95       	ror	r18
    4304:	20 93 a6 19 	sts	0x19A6, r18	; 0x8019a6 <_downlink_payload+0x1>
    4308:	af 01       	movw	r20, r30
    430a:	4f 5f       	subi	r20, 0xFF	; 255
    430c:	5f 4f       	sbci	r21, 0xFF	; 255
    430e:	64 e1       	ldi	r22, 0x14	; 20
    4310:	87 ea       	ldi	r24, 0xA7	; 167
    4312:	99 e1       	ldi	r25, 0x19	; 25
    4314:	73 d1       	rcall	.+742    	; 0x45fc <decode_hexadecimal_string_bytes>
    4316:	01 e0       	ldi	r16, 0x01	; 1
    4318:	10 e0       	ldi	r17, 0x00	; 0
    431a:	20 e0       	ldi	r18, 0x00	; 0
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	46 e1       	ldi	r20, 0x16	; 22
    4320:	50 e0       	ldi	r21, 0x00	; 0
    4322:	65 ea       	ldi	r22, 0xA5	; 165
    4324:	79 e1       	ldi	r23, 0x19	; 25
    4326:	80 91 9f 19 	lds	r24, 0x199F	; 0x80199f <_downlinkMessageBuffer>
    432a:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <_downlinkMessageBuffer+0x1>
    432e:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <xStreamBufferSend>
    4332:	8e e0       	ldi	r24, 0x0E	; 14
    4334:	03 c0       	rjmp	.+6      	; 0x433c <lora_driver_sent_upload_message+0x18a>
    4336:	84 e1       	ldi	r24, 0x14	; 20
    4338:	01 c0       	rjmp	.+2      	; 0x433c <lora_driver_sent_upload_message+0x18a>
    433a:	80 e0       	ldi	r24, 0x00	; 0
    433c:	0f 90       	pop	r0
    433e:	df 91       	pop	r29
    4340:	cf 91       	pop	r28
    4342:	1f 91       	pop	r17
    4344:	0f 91       	pop	r16
    4346:	08 95       	ret

00004348 <lora_driver_set_adaptive_data_rate>:
    4348:	81 30       	cpi	r24, 0x01	; 1
    434a:	19 f0       	breq	.+6      	; 0x4352 <lora_driver_set_adaptive_data_rate+0xa>
    434c:	6e e6       	ldi	r22, 0x6E	; 110
    434e:	76 e0       	ldi	r23, 0x06	; 6
    4350:	02 c0       	rjmp	.+4      	; 0x4356 <lora_driver_set_adaptive_data_rate+0xe>
    4352:	67 e4       	ldi	r22, 0x47	; 71
    4354:	77 e0       	ldi	r23, 0x07	; 7
    4356:	82 e7       	ldi	r24, 0x72	; 114
    4358:	96 e0       	ldi	r25, 0x06	; 6
    435a:	3a ce       	rjmp	.-908    	; 0x3fd0 <_upload_message_rc>
    435c:	08 95       	ret

0000435e <lora_driver_set_receive_delay>:
    435e:	9f 93       	push	r25
    4360:	8f 93       	push	r24
    4362:	83 ea       	ldi	r24, 0xA3	; 163
    4364:	96 e0       	ldi	r25, 0x06	; 6
    4366:	9f 93       	push	r25
    4368:	8f 93       	push	r24
    436a:	8d ef       	ldi	r24, 0xFD	; 253
    436c:	99 e1       	ldi	r25, 0x19	; 25
    436e:	9f 93       	push	r25
    4370:	8f 93       	push	r24
    4372:	0e 94 75 2d 	call	0x5aea	; 0x5aea <sprintf>
    4376:	60 e0       	ldi	r22, 0x00	; 0
    4378:	70 e0       	ldi	r23, 0x00	; 0
    437a:	8d ef       	ldi	r24, 0xFD	; 253
    437c:	99 e1       	ldi	r25, 0x19	; 25
    437e:	28 de       	rcall	.-944    	; 0x3fd0 <_upload_message_rc>
    4380:	0f 90       	pop	r0
    4382:	0f 90       	pop	r0
    4384:	0f 90       	pop	r0
    4386:	0f 90       	pop	r0
    4388:	0f 90       	pop	r0
    438a:	0f 90       	pop	r0
    438c:	08 95       	ret

0000438e <lora_driver_configure_to_eu868>:
    438e:	2f 92       	push	r2
    4390:	3f 92       	push	r3
    4392:	4f 92       	push	r4
    4394:	5f 92       	push	r5
    4396:	6f 92       	push	r6
    4398:	7f 92       	push	r7
    439a:	8f 92       	push	r8
    439c:	9f 92       	push	r9
    439e:	af 92       	push	r10
    43a0:	bf 92       	push	r11
    43a2:	cf 92       	push	r12
    43a4:	df 92       	push	r13
    43a6:	ef 92       	push	r14
    43a8:	ff 92       	push	r15
    43aa:	0f 93       	push	r16
    43ac:	1f 93       	push	r17
    43ae:	cf 93       	push	r28
    43b0:	df 93       	push	r29
    43b2:	cd b7       	in	r28, 0x3d	; 61
    43b4:	de b7       	in	r29, 0x3e	; 62
    43b6:	a0 97       	sbiw	r28, 0x20	; 32
    43b8:	0f b6       	in	r0, 0x3f	; 63
    43ba:	f8 94       	cli
    43bc:	de bf       	out	0x3e, r29	; 62
    43be:	0f be       	out	0x3f, r0	; 63
    43c0:	cd bf       	out	0x3d, r28	; 61
    43c2:	60 ed       	ldi	r22, 0xD0	; 208
    43c4:	76 e0       	ldi	r23, 0x06	; 6
    43c6:	8c ed       	ldi	r24, 0xDC	; 220
    43c8:	96 e0       	ldi	r25, 0x06	; 6
    43ca:	33 dd       	rcall	.-1434   	; 0x3e32 <_upload_message>
    43cc:	8c dd       	rcall	.-1256   	; 0x3ee6 <_reply2return_code>
    43ce:	81 11       	cpse	r24, r1
    43d0:	a3 c0       	rjmp	.+326    	; 0x4518 <lora_driver_configure_to_eu868+0x18a>
    43d2:	80 e2       	ldi	r24, 0x20	; 32
    43d4:	e1 e2       	ldi	r30, 0x21	; 33
    43d6:	f2 e0       	ldi	r31, 0x02	; 2
    43d8:	de 01       	movw	r26, r28
    43da:	11 96       	adiw	r26, 0x01	; 1
    43dc:	01 90       	ld	r0, Z+
    43de:	0d 92       	st	X+, r0
    43e0:	8a 95       	dec	r24
    43e2:	e1 f7       	brne	.-8      	; 0x43dc <lora_driver_configure_to_eu868+0x4e>
    43e4:	9e 01       	movw	r18, r28
    43e6:	2f 5f       	subi	r18, 0xFF	; 255
    43e8:	3f 4f       	sbci	r19, 0xFF	; 255
    43ea:	69 01       	movw	r12, r18
    43ec:	e1 2c       	mov	r14, r1
    43ee:	f1 2c       	mov	r15, r1
    43f0:	0f 2e       	mov	r0, r31
    43f2:	f8 ee       	ldi	r31, 0xE8	; 232
    43f4:	af 2e       	mov	r10, r31
    43f6:	f6 e0       	ldi	r31, 0x06	; 6
    43f8:	bf 2e       	mov	r11, r31
    43fa:	f0 2d       	mov	r31, r0
    43fc:	0d ef       	ldi	r16, 0xFD	; 253
    43fe:	19 e1       	ldi	r17, 0x19	; 25
    4400:	0f 2e       	mov	r0, r31
    4402:	f1 e0       	ldi	r31, 0x01	; 1
    4404:	4f 2e       	mov	r4, r31
    4406:	f7 e0       	ldi	r31, 0x07	; 7
    4408:	5f 2e       	mov	r5, r31
    440a:	f0 2d       	mov	r31, r0
    440c:	0f 2e       	mov	r0, r31
    440e:	f8 e1       	ldi	r31, 0x18	; 24
    4410:	8f 2e       	mov	r8, r31
    4412:	f7 e0       	ldi	r31, 0x07	; 7
    4414:	9f 2e       	mov	r9, r31
    4416:	f0 2d       	mov	r31, r0
    4418:	0f 2e       	mov	r0, r31
    441a:	f2 e3       	ldi	r31, 0x32	; 50
    441c:	6f 2e       	mov	r6, r31
    441e:	f7 e0       	ldi	r31, 0x07	; 7
    4420:	7f 2e       	mov	r7, r31
    4422:	f0 2d       	mov	r31, r0
    4424:	3e 2c       	mov	r3, r14
    4426:	2f 2c       	mov	r2, r15
    4428:	ff 92       	push	r15
    442a:	ef 92       	push	r14
    442c:	bf 92       	push	r11
    442e:	af 92       	push	r10
    4430:	1f 93       	push	r17
    4432:	0f 93       	push	r16
    4434:	0e 94 75 2d 	call	0x5aea	; 0x5aea <sprintf>
    4438:	60 e0       	ldi	r22, 0x00	; 0
    443a:	70 e0       	ldi	r23, 0x00	; 0
    443c:	c8 01       	movw	r24, r16
    443e:	f9 dc       	rcall	.-1550   	; 0x3e32 <_upload_message>
    4440:	52 dd       	rcall	.-1372   	; 0x3ee6 <_reply2return_code>
    4442:	0f 90       	pop	r0
    4444:	0f 90       	pop	r0
    4446:	0f 90       	pop	r0
    4448:	0f 90       	pop	r0
    444a:	0f 90       	pop	r0
    444c:	0f 90       	pop	r0
    444e:	81 11       	cpse	r24, r1
    4450:	63 c0       	rjmp	.+198    	; 0x4518 <lora_driver_configure_to_eu868+0x18a>
    4452:	32 e0       	ldi	r19, 0x02	; 2
    4454:	3e 15       	cp	r19, r14
    4456:	e8 f4       	brcc	.+58     	; 0x4492 <lora_driver_configure_to_eu868+0x104>
    4458:	f6 01       	movw	r30, r12
    445a:	83 81       	ldd	r24, Z+3	; 0x03
    445c:	8f 93       	push	r24
    445e:	82 81       	ldd	r24, Z+2	; 0x02
    4460:	8f 93       	push	r24
    4462:	81 81       	ldd	r24, Z+1	; 0x01
    4464:	8f 93       	push	r24
    4466:	80 81       	ld	r24, Z
    4468:	8f 93       	push	r24
    446a:	ff 92       	push	r15
    446c:	ef 92       	push	r14
    446e:	5f 92       	push	r5
    4470:	4f 92       	push	r4
    4472:	1f 93       	push	r17
    4474:	0f 93       	push	r16
    4476:	0e 94 75 2d 	call	0x5aea	; 0x5aea <sprintf>
    447a:	60 e0       	ldi	r22, 0x00	; 0
    447c:	70 e0       	ldi	r23, 0x00	; 0
    447e:	c8 01       	movw	r24, r16
    4480:	d8 dc       	rcall	.-1616   	; 0x3e32 <_upload_message>
    4482:	31 dd       	rcall	.-1438   	; 0x3ee6 <_reply2return_code>
    4484:	0f b6       	in	r0, 0x3f	; 63
    4486:	f8 94       	cli
    4488:	de bf       	out	0x3e, r29	; 62
    448a:	0f be       	out	0x3f, r0	; 63
    448c:	cd bf       	out	0x3d, r28	; 61
    448e:	81 11       	cpse	r24, r1
    4490:	43 c0       	rjmp	.+134    	; 0x4518 <lora_driver_configure_to_eu868+0x18a>
    4492:	2f 92       	push	r2
    4494:	3f 92       	push	r3
    4496:	9f 92       	push	r9
    4498:	8f 92       	push	r8
    449a:	1f 93       	push	r17
    449c:	0f 93       	push	r16
    449e:	0e 94 75 2d 	call	0x5aea	; 0x5aea <sprintf>
    44a2:	60 e0       	ldi	r22, 0x00	; 0
    44a4:	70 e0       	ldi	r23, 0x00	; 0
    44a6:	c8 01       	movw	r24, r16
    44a8:	c4 dc       	rcall	.-1656   	; 0x3e32 <_upload_message>
    44aa:	1d dd       	rcall	.-1478   	; 0x3ee6 <_reply2return_code>
    44ac:	0f 90       	pop	r0
    44ae:	0f 90       	pop	r0
    44b0:	0f 90       	pop	r0
    44b2:	0f 90       	pop	r0
    44b4:	0f 90       	pop	r0
    44b6:	0f 90       	pop	r0
    44b8:	81 11       	cpse	r24, r1
    44ba:	2e c0       	rjmp	.+92     	; 0x4518 <lora_driver_configure_to_eu868+0x18a>
    44bc:	2f 92       	push	r2
    44be:	3f 92       	push	r3
    44c0:	7f 92       	push	r7
    44c2:	6f 92       	push	r6
    44c4:	1f 93       	push	r17
    44c6:	0f 93       	push	r16
    44c8:	0e 94 75 2d 	call	0x5aea	; 0x5aea <sprintf>
    44cc:	60 e0       	ldi	r22, 0x00	; 0
    44ce:	70 e0       	ldi	r23, 0x00	; 0
    44d0:	c8 01       	movw	r24, r16
    44d2:	af dc       	rcall	.-1698   	; 0x3e32 <_upload_message>
    44d4:	08 dd       	rcall	.-1520   	; 0x3ee6 <_reply2return_code>
    44d6:	0f 90       	pop	r0
    44d8:	0f 90       	pop	r0
    44da:	0f 90       	pop	r0
    44dc:	0f 90       	pop	r0
    44de:	0f 90       	pop	r0
    44e0:	0f 90       	pop	r0
    44e2:	81 11       	cpse	r24, r1
    44e4:	19 c0       	rjmp	.+50     	; 0x4518 <lora_driver_configure_to_eu868+0x18a>
    44e6:	3f ef       	ldi	r19, 0xFF	; 255
    44e8:	e3 1a       	sub	r14, r19
    44ea:	f3 0a       	sbc	r15, r19
    44ec:	84 e0       	ldi	r24, 0x04	; 4
    44ee:	c8 0e       	add	r12, r24
    44f0:	d1 1c       	adc	r13, r1
    44f2:	98 e0       	ldi	r25, 0x08	; 8
    44f4:	e9 16       	cp	r14, r25
    44f6:	f1 04       	cpc	r15, r1
    44f8:	09 f0       	breq	.+2      	; 0x44fc <lora_driver_configure_to_eu868+0x16e>
    44fa:	94 cf       	rjmp	.-216    	; 0x4424 <lora_driver_configure_to_eu868+0x96>
    44fc:	60 e0       	ldi	r22, 0x00	; 0
    44fe:	70 e0       	ldi	r23, 0x00	; 0
    4500:	8a e4       	ldi	r24, 0x4A	; 74
    4502:	97 e0       	ldi	r25, 0x07	; 7
    4504:	96 dc       	rcall	.-1748   	; 0x3e32 <_upload_message>
    4506:	ef dc       	rcall	.-1570   	; 0x3ee6 <_reply2return_code>
    4508:	81 11       	cpse	r24, r1
    450a:	06 c0       	rjmp	.+12     	; 0x4518 <lora_driver_configure_to_eu868+0x18a>
    450c:	60 e0       	ldi	r22, 0x00	; 0
    450e:	70 e0       	ldi	r23, 0x00	; 0
    4510:	8b e5       	ldi	r24, 0x5B	; 91
    4512:	97 e0       	ldi	r25, 0x07	; 7
    4514:	8e dc       	rcall	.-1764   	; 0x3e32 <_upload_message>
    4516:	e7 dc       	rcall	.-1586   	; 0x3ee6 <_reply2return_code>
    4518:	a0 96       	adiw	r28, 0x20	; 32
    451a:	0f b6       	in	r0, 0x3f	; 63
    451c:	f8 94       	cli
    451e:	de bf       	out	0x3e, r29	; 62
    4520:	0f be       	out	0x3f, r0	; 63
    4522:	cd bf       	out	0x3d, r28	; 61
    4524:	df 91       	pop	r29
    4526:	cf 91       	pop	r28
    4528:	1f 91       	pop	r17
    452a:	0f 91       	pop	r16
    452c:	ff 90       	pop	r15
    452e:	ef 90       	pop	r14
    4530:	df 90       	pop	r13
    4532:	cf 90       	pop	r12
    4534:	bf 90       	pop	r11
    4536:	af 90       	pop	r10
    4538:	9f 90       	pop	r9
    453a:	8f 90       	pop	r8
    453c:	7f 90       	pop	r7
    453e:	6f 90       	pop	r6
    4540:	5f 90       	pop	r5
    4542:	4f 90       	pop	r4
    4544:	3f 90       	pop	r3
    4546:	2f 90       	pop	r2
    4548:	08 95       	ret

0000454a <lora_driver_set_otaa_identity>:
    454a:	ef 92       	push	r14
    454c:	ff 92       	push	r15
    454e:	0f 93       	push	r16
    4550:	1f 93       	push	r17
    4552:	cf 93       	push	r28
    4554:	df 93       	push	r29
    4556:	ec 01       	movw	r28, r24
    4558:	8b 01       	movw	r16, r22
    455a:	7a 01       	movw	r14, r20
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	f4 de       	rcall	.-536    	; 0x4348 <lora_driver_set_adaptive_data_rate>
    4560:	81 11       	cpse	r24, r1
    4562:	0d c0       	rjmp	.+26     	; 0x457e <lora_driver_set_otaa_identity+0x34>
    4564:	ce 01       	movw	r24, r28
    4566:	d4 dd       	rcall	.-1112   	; 0x4110 <lora_driver_set_application_identifier>
    4568:	81 11       	cpse	r24, r1
    456a:	09 c0       	rjmp	.+18     	; 0x457e <lora_driver_set_otaa_identity+0x34>
    456c:	c8 01       	movw	r24, r16
    456e:	e1 dd       	rcall	.-1086   	; 0x4132 <lora_driver_set_application_key>
    4570:	81 11       	cpse	r24, r1
    4572:	05 c0       	rjmp	.+10     	; 0x457e <lora_driver_set_otaa_identity+0x34>
    4574:	c7 01       	movw	r24, r14
    4576:	bb dd       	rcall	.-1162   	; 0x40ee <lora_driver_set_device_identifier>
    4578:	81 11       	cpse	r24, r1
    457a:	01 c0       	rjmp	.+2      	; 0x457e <lora_driver_set_otaa_identity+0x34>
    457c:	eb dd       	rcall	.-1066   	; 0x4154 <lora_driver_save_mac>
    457e:	df 91       	pop	r29
    4580:	cf 91       	pop	r28
    4582:	1f 91       	pop	r17
    4584:	0f 91       	pop	r16
    4586:	ff 90       	pop	r15
    4588:	ef 90       	pop	r14
    458a:	08 95       	ret

0000458c <lora_driver_map_return_code_to_text>:
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	fc 01       	movw	r30, r24
    4590:	ee 0f       	add	r30, r30
    4592:	ff 1f       	adc	r31, r31
    4594:	8e 0f       	add	r24, r30
    4596:	9f 1f       	adc	r25, r31
    4598:	fc 01       	movw	r30, r24
    459a:	ec 5d       	subi	r30, 0xDC	; 220
    459c:	f7 4f       	sbci	r31, 0xF7	; 247
    459e:	81 81       	ldd	r24, Z+1	; 0x01
    45a0:	92 81       	ldd	r25, Z+2	; 0x02
    45a2:	08 95       	ret

000045a4 <decode_port_no>:
    45a4:	dc 01       	movw	r26, r24
    45a6:	00 97       	sbiw	r24, 0x00	; 0
    45a8:	29 f1       	breq	.+74     	; 0x45f4 <decode_port_no+0x50>
    45aa:	fb 01       	movw	r30, r22
    45ac:	20 81       	ld	r18, Z
    45ae:	fc 01       	movw	r30, r24
    45b0:	01 90       	ld	r0, Z+
    45b2:	00 20       	and	r0, r0
    45b4:	e9 f7       	brne	.-6      	; 0x45b0 <decode_port_no+0xc>
    45b6:	31 97       	sbiw	r30, 0x01	; 1
    45b8:	e8 1b       	sub	r30, r24
    45ba:	f9 0b       	sbc	r31, r25
    45bc:	82 2f       	mov	r24, r18
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	e8 17       	cp	r30, r24
    45c2:	f9 07       	cpc	r31, r25
    45c4:	c8 f0       	brcs	.+50     	; 0x45f8 <decode_port_no+0x54>
    45c6:	80 e0       	ldi	r24, 0x00	; 0
    45c8:	08 c0       	rjmp	.+16     	; 0x45da <decode_port_no+0x36>
    45ca:	88 0f       	add	r24, r24
    45cc:	38 2f       	mov	r19, r24
    45ce:	33 0f       	add	r19, r19
    45d0:	33 0f       	add	r19, r19
    45d2:	83 0f       	add	r24, r19
    45d4:	80 53       	subi	r24, 0x30	; 48
    45d6:	89 0f       	add	r24, r25
    45d8:	2f 5f       	subi	r18, 0xFF	; 255
    45da:	fd 01       	movw	r30, r26
    45dc:	e2 0f       	add	r30, r18
    45de:	f1 1d       	adc	r31, r1
    45e0:	90 81       	ld	r25, Z
    45e2:	30 ed       	ldi	r19, 0xD0	; 208
    45e4:	39 0f       	add	r19, r25
    45e6:	3a 30       	cpi	r19, 0x0A	; 10
    45e8:	10 f4       	brcc	.+4      	; 0x45ee <decode_port_no+0x4a>
    45ea:	91 11       	cpse	r25, r1
    45ec:	ee cf       	rjmp	.-36     	; 0x45ca <decode_port_no+0x26>
    45ee:	fb 01       	movw	r30, r22
    45f0:	20 83       	st	Z, r18
    45f2:	08 95       	ret
    45f4:	80 e0       	ldi	r24, 0x00	; 0
    45f6:	08 95       	ret
    45f8:	80 e0       	ldi	r24, 0x00	; 0
    45fa:	08 95       	ret

000045fc <decode_hexadecimal_string_bytes>:
    45fc:	0f 93       	push	r16
    45fe:	1f 93       	push	r17
    4600:	cf 93       	push	r28
    4602:	df 93       	push	r29
    4604:	dc 01       	movw	r26, r24
    4606:	ea 01       	movw	r28, r20
    4608:	20 97       	sbiw	r28, 0x00	; 0
    460a:	e1 f1       	breq	.+120    	; 0x4684 <decode_hexadecimal_string_bytes+0x88>
    460c:	fa 01       	movw	r30, r20
    460e:	01 90       	ld	r0, Z+
    4610:	00 20       	and	r0, r0
    4612:	e9 f7       	brne	.-6      	; 0x460e <decode_hexadecimal_string_bytes+0x12>
    4614:	31 97       	sbiw	r30, 0x01	; 1
    4616:	e4 1b       	sub	r30, r20
    4618:	f5 0b       	sbc	r31, r21
    461a:	32 97       	sbiw	r30, 0x02	; 2
    461c:	10 f5       	brcc	.+68     	; 0x4662 <decode_hexadecimal_string_bytes+0x66>
    461e:	32 c0       	rjmp	.+100    	; 0x4684 <decode_hexadecimal_string_bytes+0x88>
    4620:	8d 01       	movw	r16, r26
    4622:	04 0f       	add	r16, r20
    4624:	15 1f       	adc	r17, r21
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	ae 01       	movw	r20, r28
    462a:	42 0f       	add	r20, r18
    462c:	53 1f       	adc	r21, r19
    462e:	fa 01       	movw	r30, r20
    4630:	90 81       	ld	r25, Z
    4632:	91 34       	cpi	r25, 0x41	; 65
    4634:	28 f0       	brcs	.+10     	; 0x4640 <decode_hexadecimal_string_bytes+0x44>
    4636:	97 53       	subi	r25, 0x37	; 55
    4638:	59 2f       	mov	r21, r25
    463a:	52 95       	swap	r21
    463c:	50 7f       	andi	r21, 0xF0	; 240
    463e:	03 c0       	rjmp	.+6      	; 0x4646 <decode_hexadecimal_string_bytes+0x4a>
    4640:	59 2f       	mov	r21, r25
    4642:	52 95       	swap	r21
    4644:	50 7f       	andi	r21, 0xF0	; 240
    4646:	2c 0f       	add	r18, r28
    4648:	3d 1f       	adc	r19, r29
    464a:	f9 01       	movw	r30, r18
    464c:	91 81       	ldd	r25, Z+1	; 0x01
    464e:	91 34       	cpi	r25, 0x41	; 65
    4650:	10 f0       	brcs	.+4      	; 0x4656 <decode_hexadecimal_string_bytes+0x5a>
    4652:	97 53       	subi	r25, 0x37	; 55
    4654:	01 c0       	rjmp	.+2      	; 0x4658 <decode_hexadecimal_string_bytes+0x5c>
    4656:	90 53       	subi	r25, 0x30	; 48
    4658:	95 0f       	add	r25, r21
    465a:	f8 01       	movw	r30, r16
    465c:	90 83       	st	Z, r25
    465e:	8f 5f       	subi	r24, 0xFF	; 255
    4660:	01 c0       	rjmp	.+2      	; 0x4664 <decode_hexadecimal_string_bytes+0x68>
    4662:	80 e0       	ldi	r24, 0x00	; 0
    4664:	28 2f       	mov	r18, r24
    4666:	22 0f       	add	r18, r18
    4668:	48 2f       	mov	r20, r24
    466a:	50 e0       	ldi	r21, 0x00	; 0
    466c:	fe 01       	movw	r30, r28
    466e:	01 90       	ld	r0, Z+
    4670:	00 20       	and	r0, r0
    4672:	e9 f7       	brne	.-6      	; 0x466e <decode_hexadecimal_string_bytes+0x72>
    4674:	31 97       	sbiw	r30, 0x01	; 1
    4676:	ec 1b       	sub	r30, r28
    4678:	fd 0b       	sbc	r31, r29
    467a:	4e 17       	cp	r20, r30
    467c:	5f 07       	cpc	r21, r31
    467e:	10 f4       	brcc	.+4      	; 0x4684 <decode_hexadecimal_string_bytes+0x88>
    4680:	86 13       	cpse	r24, r22
    4682:	ce cf       	rjmp	.-100    	; 0x4620 <decode_hexadecimal_string_bytes+0x24>
    4684:	df 91       	pop	r29
    4686:	cf 91       	pop	r28
    4688:	1f 91       	pop	r17
    468a:	0f 91       	pop	r16
    468c:	08 95       	ret

0000468e <reg_read_register>:
    468e:	fc 01       	movw	r30, r24
    4690:	80 81       	ld	r24, Z
    4692:	08 95       	ret

00004694 <reg_read_bit>:
    4694:	fc 01       	movw	r30, r24
    4696:	20 81       	ld	r18, Z
    4698:	81 e0       	ldi	r24, 0x01	; 1
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	02 c0       	rjmp	.+4      	; 0x46a2 <reg_read_bit+0xe>
    469e:	88 0f       	add	r24, r24
    46a0:	99 1f       	adc	r25, r25
    46a2:	6a 95       	dec	r22
    46a4:	e2 f7       	brpl	.-8      	; 0x469e <reg_read_bit+0xa>
    46a6:	82 23       	and	r24, r18
    46a8:	08 95       	ret

000046aa <reg_read_bits>:
    46aa:	fc 01       	movw	r30, r24
    46ac:	80 81       	ld	r24, Z
    46ae:	86 23       	and	r24, r22
    46b0:	08 95       	ret

000046b2 <reg_set_register>:
    46b2:	fc 01       	movw	r30, r24
    46b4:	60 83       	st	Z, r22
    46b6:	08 95       	ret

000046b8 <reg_clear_register>:
    46b8:	fc 01       	movw	r30, r24
    46ba:	10 82       	st	Z, r1
    46bc:	08 95       	ret

000046be <reg_set_bit>:
    46be:	fc 01       	movw	r30, r24
    46c0:	40 81       	ld	r20, Z
    46c2:	21 e0       	ldi	r18, 0x01	; 1
    46c4:	30 e0       	ldi	r19, 0x00	; 0
    46c6:	02 c0       	rjmp	.+4      	; 0x46cc <reg_set_bit+0xe>
    46c8:	22 0f       	add	r18, r18
    46ca:	33 1f       	adc	r19, r19
    46cc:	6a 95       	dec	r22
    46ce:	e2 f7       	brpl	.-8      	; 0x46c8 <reg_set_bit+0xa>
    46d0:	24 2b       	or	r18, r20
    46d2:	20 83       	st	Z, r18
    46d4:	08 95       	ret

000046d6 <reg_set_bits>:
    46d6:	fc 01       	movw	r30, r24
    46d8:	20 81       	ld	r18, Z
    46da:	62 2b       	or	r22, r18
    46dc:	60 83       	st	Z, r22
    46de:	08 95       	ret

000046e0 <reg_toggle_bit>:
    46e0:	fc 01       	movw	r30, r24
    46e2:	40 81       	ld	r20, Z
    46e4:	21 e0       	ldi	r18, 0x01	; 1
    46e6:	30 e0       	ldi	r19, 0x00	; 0
    46e8:	02 c0       	rjmp	.+4      	; 0x46ee <reg_toggle_bit+0xe>
    46ea:	22 0f       	add	r18, r18
    46ec:	33 1f       	adc	r19, r19
    46ee:	6a 95       	dec	r22
    46f0:	e2 f7       	brpl	.-8      	; 0x46ea <reg_toggle_bit+0xa>
    46f2:	24 27       	eor	r18, r20
    46f4:	20 83       	st	Z, r18
    46f6:	08 95       	ret

000046f8 <reg_toggle_bits>:
    46f8:	fc 01       	movw	r30, r24
    46fa:	20 81       	ld	r18, Z
    46fc:	62 27       	eor	r22, r18
    46fe:	60 83       	st	Z, r22
    4700:	08 95       	ret

00004702 <reg_clear_bit>:
    4702:	fc 01       	movw	r30, r24
    4704:	90 81       	ld	r25, Z
    4706:	21 e0       	ldi	r18, 0x01	; 1
    4708:	30 e0       	ldi	r19, 0x00	; 0
    470a:	02 c0       	rjmp	.+4      	; 0x4710 <reg_clear_bit+0xe>
    470c:	22 0f       	add	r18, r18
    470e:	33 1f       	adc	r19, r19
    4710:	6a 95       	dec	r22
    4712:	e2 f7       	brpl	.-8      	; 0x470c <reg_clear_bit+0xa>
    4714:	20 95       	com	r18
    4716:	29 23       	and	r18, r25
    4718:	20 83       	st	Z, r18
    471a:	08 95       	ret

0000471c <reg_clear_bits>:
    471c:	fc 01       	movw	r30, r24
    471e:	90 81       	ld	r25, Z
    4720:	60 95       	com	r22
    4722:	69 23       	and	r22, r25
    4724:	60 83       	st	Z, r22
    4726:	08 95       	ret

00004728 <_serial_call_back>:
    4728:	80 91 5a 1a 	lds	r24, 0x1A5A	; 0x801a5a <crc_sum.1941>
    472c:	86 0f       	add	r24, r22
    472e:	80 93 5a 1a 	sts	0x1A5A, r24	; 0x801a5a <crc_sum.1941>
    4732:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <_mh_state>
    4736:	91 30       	cpi	r25, 0x01	; 1
    4738:	79 f0       	breq	.+30     	; 0x4758 <_serial_call_back+0x30>
    473a:	28 f0       	brcs	.+10     	; 0x4746 <_serial_call_back+0x1e>
    473c:	92 30       	cpi	r25, 0x02	; 2
    473e:	a9 f0       	breq	.+42     	; 0x476a <_serial_call_back+0x42>
    4740:	93 30       	cpi	r25, 0x03	; 3
    4742:	19 f1       	breq	.+70     	; 0x478a <_serial_call_back+0x62>
    4744:	08 95       	ret
    4746:	6f 3f       	cpi	r22, 0xFF	; 255
    4748:	09 f0       	breq	.+2      	; 0x474c <_serial_call_back+0x24>
    474a:	48 c0       	rjmp	.+144    	; 0x47dc <_serial_call_back+0xb4>
    474c:	10 92 5a 1a 	sts	0x1A5A, r1	; 0x801a5a <crc_sum.1941>
    4750:	81 e0       	ldi	r24, 0x01	; 1
    4752:	80 93 5d 1a 	sts	0x1A5D, r24	; 0x801a5d <_mh_state>
    4756:	08 95       	ret
    4758:	66 38       	cpi	r22, 0x86	; 134
    475a:	09 f0       	breq	.+2      	; 0x475e <_serial_call_back+0x36>
    475c:	3f c0       	rjmp	.+126    	; 0x47dc <_serial_call_back+0xb4>
    475e:	10 92 59 1a 	sts	0x1A59, r1	; 0x801a59 <inDex.1939>
    4762:	82 e0       	ldi	r24, 0x02	; 2
    4764:	80 93 5d 1a 	sts	0x1A5D, r24	; 0x801a5d <_mh_state>
    4768:	08 95       	ret
    476a:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <inDex.1939>
    476e:	81 e0       	ldi	r24, 0x01	; 1
    4770:	8e 0f       	add	r24, r30
    4772:	80 93 59 1a 	sts	0x1A59, r24	; 0x801a59 <inDex.1939>
    4776:	f0 e0       	ldi	r31, 0x00	; 0
    4778:	e9 5a       	subi	r30, 0xA9	; 169
    477a:	f5 4e       	sbci	r31, 0xE5	; 229
    477c:	60 83       	st	Z, r22
    477e:	82 30       	cpi	r24, 0x02	; 2
    4780:	69 f5       	brne	.+90     	; 0x47dc <_serial_call_back+0xb4>
    4782:	83 e0       	ldi	r24, 0x03	; 3
    4784:	80 93 5d 1a 	sts	0x1A5D, r24	; 0x801a5d <_mh_state>
    4788:	08 95       	ret
    478a:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <inDex.1939>
    478e:	21 e0       	ldi	r18, 0x01	; 1
    4790:	29 0f       	add	r18, r25
    4792:	20 93 59 1a 	sts	0x1A59, r18	; 0x801a59 <inDex.1939>
    4796:	96 30       	cpi	r25, 0x06	; 6
    4798:	09 f5       	brne	.+66     	; 0x47dc <_serial_call_back+0xb4>
    479a:	81 11       	cpse	r24, r1
    479c:	0e c0       	rjmp	.+28     	; 0x47ba <_serial_call_back+0x92>
    479e:	e7 e5       	ldi	r30, 0x57	; 87
    47a0:	fa e1       	ldi	r31, 0x1A	; 26
    47a2:	80 81       	ld	r24, Z
    47a4:	90 e0       	ldi	r25, 0x00	; 0
    47a6:	98 2f       	mov	r25, r24
    47a8:	88 27       	eor	r24, r24
    47aa:	21 81       	ldd	r18, Z+1	; 0x01
    47ac:	82 0f       	add	r24, r18
    47ae:	91 1d       	adc	r25, r1
    47b0:	90 93 5f 1a 	sts	0x1A5F, r25	; 0x801a5f <_ppm+0x1>
    47b4:	80 93 5e 1a 	sts	0x1A5E, r24	; 0x801a5e <_ppm>
    47b8:	04 c0       	rjmp	.+8      	; 0x47c2 <_serial_call_back+0x9a>
    47ba:	10 92 5f 1a 	sts	0x1A5F, r1	; 0x801a5f <_ppm+0x1>
    47be:	10 92 5e 1a 	sts	0x1A5E, r1	; 0x801a5e <_ppm>
    47c2:	10 92 5d 1a 	sts	0x1A5D, r1	; 0x801a5d <_mh_state>
    47c6:	e0 91 5b 1a 	lds	r30, 0x1A5B	; 0x801a5b <_app_call_back>
    47ca:	f0 91 5c 1a 	lds	r31, 0x1A5C	; 0x801a5c <_app_call_back+0x1>
    47ce:	30 97       	sbiw	r30, 0x00	; 0
    47d0:	29 f0       	breq	.+10     	; 0x47dc <_serial_call_back+0xb4>
    47d2:	80 91 5e 1a 	lds	r24, 0x1A5E	; 0x801a5e <_ppm>
    47d6:	90 91 5f 1a 	lds	r25, 0x1A5F	; 0x801a5f <_ppm+0x1>
    47da:	19 95       	eicall
    47dc:	08 95       	ret

000047de <mh_z19_create>:
    47de:	8f 92       	push	r8
    47e0:	9f 92       	push	r9
    47e2:	af 92       	push	r10
    47e4:	cf 92       	push	r12
    47e6:	ef 92       	push	r14
    47e8:	0f 93       	push	r16
    47ea:	cf 93       	push	r28
    47ec:	df 93       	push	r29
    47ee:	eb 01       	movw	r28, r22
    47f0:	0f 2e       	mov	r0, r31
    47f2:	f4 e9       	ldi	r31, 0x94	; 148
    47f4:	8f 2e       	mov	r8, r31
    47f6:	f3 e2       	ldi	r31, 0x23	; 35
    47f8:	9f 2e       	mov	r9, r31
    47fa:	f0 2d       	mov	r31, r0
    47fc:	68 94       	set
    47fe:	aa 24       	eor	r10, r10
    4800:	a4 f8       	bld	r10, 4
    4802:	68 94       	set
    4804:	cc 24       	eor	r12, r12
    4806:	c4 f8       	bld	r12, 4
    4808:	e1 2c       	mov	r14, r1
    480a:	00 e0       	ldi	r16, 0x00	; 0
    480c:	23 e0       	ldi	r18, 0x03	; 3
    480e:	40 e8       	ldi	r20, 0x80	; 128
    4810:	55 e2       	ldi	r21, 0x25	; 37
    4812:	60 e0       	ldi	r22, 0x00	; 0
    4814:	70 e0       	ldi	r23, 0x00	; 0
    4816:	40 d0       	rcall	.+128    	; 0x4898 <serial_new_instance>
    4818:	90 93 61 1a 	sts	0x1A61, r25	; 0x801a61 <_serial+0x1>
    481c:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <_serial>
    4820:	d0 93 5c 1a 	sts	0x1A5C, r29	; 0x801a5c <_app_call_back+0x1>
    4824:	c0 93 5b 1a 	sts	0x1A5B, r28	; 0x801a5b <_app_call_back>
    4828:	df 91       	pop	r29
    482a:	cf 91       	pop	r28
    482c:	0f 91       	pop	r16
    482e:	ef 90       	pop	r14
    4830:	cf 90       	pop	r12
    4832:	af 90       	pop	r10
    4834:	9f 90       	pop	r9
    4836:	8f 90       	pop	r8
    4838:	08 95       	ret

0000483a <mh_z19_take_meassuring>:
    483a:	cf 93       	push	r28
    483c:	df 93       	push	r29
    483e:	cd b7       	in	r28, 0x3d	; 61
    4840:	de b7       	in	r29, 0x3e	; 62
    4842:	29 97       	sbiw	r28, 0x09	; 9
    4844:	0f b6       	in	r0, 0x3f	; 63
    4846:	f8 94       	cli
    4848:	de bf       	out	0x3e, r29	; 62
    484a:	0f be       	out	0x3f, r0	; 63
    484c:	cd bf       	out	0x3d, r28	; 61
    484e:	89 e0       	ldi	r24, 0x09	; 9
    4850:	e1 e4       	ldi	r30, 0x41	; 65
    4852:	f2 e0       	ldi	r31, 0x02	; 2
    4854:	9e 01       	movw	r18, r28
    4856:	2f 5f       	subi	r18, 0xFF	; 255
    4858:	3f 4f       	sbci	r19, 0xFF	; 255
    485a:	d9 01       	movw	r26, r18
    485c:	01 90       	ld	r0, Z+
    485e:	0d 92       	st	X+, r0
    4860:	8a 95       	dec	r24
    4862:	e1 f7       	brne	.-8      	; 0x485c <mh_z19_take_meassuring+0x22>
    4864:	10 92 5f 1a 	sts	0x1A5F, r1	; 0x801a5f <_ppm+0x1>
    4868:	10 92 5e 1a 	sts	0x1A5E, r1	; 0x801a5e <_ppm>
    486c:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <_serial>
    4870:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <_serial+0x1>
    4874:	00 97       	sbiw	r24, 0x00	; 0
    4876:	31 f0       	breq	.+12     	; 0x4884 <mh_z19_take_meassuring+0x4a>
    4878:	42 2f       	mov	r20, r18
    487a:	53 2f       	mov	r21, r19
    487c:	69 e0       	ldi	r22, 0x09	; 9
    487e:	c8 d0       	rcall	.+400    	; 0x4a10 <serial_send_bytes>
    4880:	80 e0       	ldi	r24, 0x00	; 0
    4882:	01 c0       	rjmp	.+2      	; 0x4886 <mh_z19_take_meassuring+0x4c>
    4884:	82 e0       	ldi	r24, 0x02	; 2
    4886:	29 96       	adiw	r28, 0x09	; 9
    4888:	0f b6       	in	r0, 0x3f	; 63
    488a:	f8 94       	cli
    488c:	de bf       	out	0x3e, r29	; 62
    488e:	0f be       	out	0x3f, r0	; 63
    4890:	cd bf       	out	0x3d, r28	; 61
    4892:	df 91       	pop	r29
    4894:	cf 91       	pop	r28
    4896:	08 95       	ret

00004898 <serial_new_instance>:
    4898:	2f 92       	push	r2
    489a:	3f 92       	push	r3
    489c:	4f 92       	push	r4
    489e:	5f 92       	push	r5
    48a0:	6f 92       	push	r6
    48a2:	7f 92       	push	r7
    48a4:	8f 92       	push	r8
    48a6:	9f 92       	push	r9
    48a8:	af 92       	push	r10
    48aa:	cf 92       	push	r12
    48ac:	ef 92       	push	r14
    48ae:	ff 92       	push	r15
    48b0:	0f 93       	push	r16
    48b2:	1f 93       	push	r17
    48b4:	cf 93       	push	r28
    48b6:	df 93       	push	r29
    48b8:	cd b7       	in	r28, 0x3d	; 61
    48ba:	de b7       	in	r29, 0x3e	; 62
    48bc:	f8 2e       	mov	r15, r24
    48be:	2a 01       	movw	r4, r20
    48c0:	3b 01       	movw	r6, r22
    48c2:	88 e0       	ldi	r24, 0x08	; 8
    48c4:	90 e0       	ldi	r25, 0x00	; 0
    48c6:	4a d7       	rcall	.+3732   	; 0x575c <malloc>
    48c8:	8c 01       	movw	r16, r24
    48ca:	8f 2d       	mov	r24, r15
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	88 0f       	add	r24, r24
    48d0:	99 1f       	adc	r25, r25
    48d2:	fc 01       	movw	r30, r24
    48d4:	ee 59       	subi	r30, 0x9E	; 158
    48d6:	f5 4e       	sbci	r31, 0xE5	; 229
    48d8:	11 83       	std	Z+1, r17	; 0x01
    48da:	00 83       	st	Z, r16
    48dc:	fc 01       	movw	r30, r24
    48de:	e6 5f       	subi	r30, 0xF6	; 246
    48e0:	fd 4f       	sbci	r31, 0xFD	; 253
    48e2:	80 81       	ld	r24, Z
    48e4:	91 81       	ldd	r25, Z+1	; 0x01
    48e6:	d8 01       	movw	r26, r16
    48e8:	8d 93       	st	X+, r24
    48ea:	9c 93       	st	X, r25
    48ec:	6c 2d       	mov	r22, r12
    48ee:	70 e0       	ldi	r23, 0x00	; 0
    48f0:	84 e0       	ldi	r24, 0x04	; 4
    48f2:	90 e0       	ldi	r25, 0x00	; 0
    48f4:	19 d7       	rcall	.+3634   	; 0x5728 <calloc>
    48f6:	1c 01       	movw	r2, r24
    48f8:	61 e0       	ldi	r22, 0x01	; 1
    48fa:	70 e0       	ldi	r23, 0x00	; 0
    48fc:	86 e0       	ldi	r24, 0x06	; 6
    48fe:	90 e0       	ldi	r25, 0x00	; 0
    4900:	13 d7       	rcall	.+3622   	; 0x5728 <calloc>
    4902:	7c 01       	movw	r14, r24
    4904:	4c 2d       	mov	r20, r12
    4906:	b1 01       	movw	r22, r2
    4908:	2c d5       	rcall	.+2648   	; 0x5362 <fifo_init>
    490a:	f8 01       	movw	r30, r16
    490c:	f5 82       	std	Z+5, r15	; 0x05
    490e:	e4 82       	std	Z+4, r14	; 0x04
    4910:	6a 2d       	mov	r22, r10
    4912:	70 e0       	ldi	r23, 0x00	; 0
    4914:	84 e0       	ldi	r24, 0x04	; 4
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	07 d7       	rcall	.+3598   	; 0x5728 <calloc>
    491a:	1c 01       	movw	r2, r24
    491c:	61 e0       	ldi	r22, 0x01	; 1
    491e:	70 e0       	ldi	r23, 0x00	; 0
    4920:	86 e0       	ldi	r24, 0x06	; 6
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	01 d7       	rcall	.+3586   	; 0x5728 <calloc>
    4926:	7c 01       	movw	r14, r24
    4928:	4a 2d       	mov	r20, r10
    492a:	b1 01       	movw	r22, r2
    492c:	1a d5       	rcall	.+2612   	; 0x5362 <fifo_init>
    492e:	d8 01       	movw	r26, r16
    4930:	13 96       	adiw	r26, 0x03	; 3
    4932:	fc 92       	st	X, r15
    4934:	ee 92       	st	-X, r14
    4936:	12 97       	sbiw	r26, 0x02	; 2
    4938:	17 96       	adiw	r26, 0x07	; 7
    493a:	9c 92       	st	X, r9
    493c:	8e 92       	st	-X, r8
    493e:	16 97       	sbiw	r26, 0x06	; 6
    4940:	ff b6       	in	r15, 0x3f	; 63
    4942:	f8 94       	cli
    4944:	ed 91       	ld	r30, X+
    4946:	fc 91       	ld	r31, X
    4948:	11 97       	sbiw	r26, 0x01	; 1
    494a:	36 97       	sbiw	r30, 0x06	; 6
    494c:	80 81       	ld	r24, Z
    494e:	82 60       	ori	r24, 0x02	; 2
    4950:	80 83       	st	Z, r24
    4952:	8d 90       	ld	r8, X+
    4954:	9c 90       	ld	r9, X
    4956:	c3 01       	movw	r24, r6
    4958:	b2 01       	movw	r22, r4
    495a:	f1 d5       	rcall	.+3042   	; 0x553e <__floatunsisf>
    495c:	20 e0       	ldi	r18, 0x00	; 0
    495e:	30 e0       	ldi	r19, 0x00	; 0
    4960:	40 e0       	ldi	r20, 0x00	; 0
    4962:	51 e4       	ldi	r21, 0x41	; 65
    4964:	51 d6       	rcall	.+3234   	; 0x5608 <__mulsf3>
    4966:	9b 01       	movw	r18, r22
    4968:	ac 01       	movw	r20, r24
    496a:	60 e0       	ldi	r22, 0x00	; 0
    496c:	74 e2       	ldi	r23, 0x24	; 36
    496e:	84 e7       	ldi	r24, 0x74	; 116
    4970:	9b e4       	ldi	r25, 0x4B	; 75
    4972:	7a d5       	rcall	.+2804   	; 0x5468 <__divsf3>
    4974:	20 e0       	ldi	r18, 0x00	; 0
    4976:	30 e0       	ldi	r19, 0x00	; 0
    4978:	40 e8       	ldi	r20, 0x80	; 128
    497a:	5f e3       	ldi	r21, 0x3F	; 63
    497c:	0e d5       	rcall	.+2588   	; 0x539a <__subsf3>
    497e:	0e 94 25 1c 	call	0x384a	; 0x384a <__fixunssfsi>
    4982:	f4 01       	movw	r30, r8
    4984:	32 97       	sbiw	r30, 0x02	; 2
    4986:	60 83       	st	Z, r22
    4988:	d8 01       	movw	r26, r16
    498a:	ed 91       	ld	r30, X+
    498c:	fc 91       	ld	r31, X
    498e:	11 97       	sbiw	r26, 0x01	; 1
    4990:	35 97       	sbiw	r30, 0x05	; 5
    4992:	88 e9       	ldi	r24, 0x98	; 152
    4994:	80 83       	st	Z, r24
    4996:	ed 91       	ld	r30, X+
    4998:	fc 91       	ld	r31, X
    499a:	34 97       	sbiw	r30, 0x04	; 4
    499c:	86 e0       	ldi	r24, 0x06	; 6
    499e:	80 83       	st	Z, r24
    49a0:	ff be       	out	0x3f, r15	; 63
    49a2:	c8 01       	movw	r24, r16
    49a4:	df 91       	pop	r29
    49a6:	cf 91       	pop	r28
    49a8:	1f 91       	pop	r17
    49aa:	0f 91       	pop	r16
    49ac:	ff 90       	pop	r15
    49ae:	ef 90       	pop	r14
    49b0:	cf 90       	pop	r12
    49b2:	af 90       	pop	r10
    49b4:	9f 90       	pop	r9
    49b6:	8f 90       	pop	r8
    49b8:	7f 90       	pop	r7
    49ba:	6f 90       	pop	r6
    49bc:	5f 90       	pop	r5
    49be:	4f 90       	pop	r4
    49c0:	3f 90       	pop	r3
    49c2:	2f 90       	pop	r2
    49c4:	08 95       	ret

000049c6 <serial_send_byte>:
    49c6:	cf 93       	push	r28
    49c8:	df 93       	push	r29
    49ca:	ec 01       	movw	r28, r24
    49cc:	ea 81       	ldd	r30, Y+2	; 0x02
    49ce:	fb 81       	ldd	r31, Y+3	; 0x03
    49d0:	93 81       	ldd	r25, Z+3	; 0x03
    49d2:	82 81       	ldd	r24, Z+2	; 0x02
    49d4:	25 81       	ldd	r18, Z+5	; 0x05
    49d6:	98 1b       	sub	r25, r24
    49d8:	92 23       	and	r25, r18
    49da:	84 81       	ldd	r24, Z+4	; 0x04
    49dc:	98 17       	cp	r25, r24
    49de:	a1 f0       	breq	.+40     	; 0x4a08 <serial_send_byte+0x42>
    49e0:	93 81       	ldd	r25, Z+3	; 0x03
    49e2:	26 95       	lsr	r18
    49e4:	29 23       	and	r18, r25
    49e6:	a0 81       	ld	r26, Z
    49e8:	b1 81       	ldd	r27, Z+1	; 0x01
    49ea:	a2 0f       	add	r26, r18
    49ec:	b1 1d       	adc	r27, r1
    49ee:	6c 93       	st	X, r22
    49f0:	9f 5f       	subi	r25, 0xFF	; 255
    49f2:	25 81       	ldd	r18, Z+5	; 0x05
    49f4:	92 23       	and	r25, r18
    49f6:	93 83       	std	Z+3, r25	; 0x03
    49f8:	e8 81       	ld	r30, Y
    49fa:	f9 81       	ldd	r31, Y+1	; 0x01
    49fc:	35 97       	sbiw	r30, 0x05	; 5
    49fe:	80 81       	ld	r24, Z
    4a00:	80 62       	ori	r24, 0x20	; 32
    4a02:	80 83       	st	Z, r24
    4a04:	80 e0       	ldi	r24, 0x00	; 0
    4a06:	01 c0       	rjmp	.+2      	; 0x4a0a <serial_send_byte+0x44>
    4a08:	82 e0       	ldi	r24, 0x02	; 2
    4a0a:	df 91       	pop	r29
    4a0c:	cf 91       	pop	r28
    4a0e:	08 95       	ret

00004a10 <serial_send_bytes>:
    4a10:	ef 92       	push	r14
    4a12:	ff 92       	push	r15
    4a14:	0f 93       	push	r16
    4a16:	1f 93       	push	r17
    4a18:	cf 93       	push	r28
    4a1a:	df 93       	push	r29
    4a1c:	7c 01       	movw	r14, r24
    4a1e:	dc 01       	movw	r26, r24
    4a20:	12 96       	adiw	r26, 0x02	; 2
    4a22:	ed 91       	ld	r30, X+
    4a24:	fc 91       	ld	r31, X
    4a26:	13 97       	sbiw	r26, 0x03	; 3
    4a28:	93 81       	ldd	r25, Z+3	; 0x03
    4a2a:	82 81       	ldd	r24, Z+2	; 0x02
    4a2c:	98 1b       	sub	r25, r24
    4a2e:	85 81       	ldd	r24, Z+5	; 0x05
    4a30:	98 23       	and	r25, r24
    4a32:	84 81       	ldd	r24, Z+4	; 0x04
    4a34:	89 1b       	sub	r24, r25
    4a36:	86 17       	cp	r24, r22
    4a38:	98 f1       	brcs	.+102    	; 0x4aa0 <serial_send_bytes+0x90>
    4a3a:	66 23       	and	r22, r22
    4a3c:	41 f1       	breq	.+80     	; 0x4a8e <serial_send_bytes+0x7e>
    4a3e:	84 2f       	mov	r24, r20
    4a40:	95 2f       	mov	r25, r21
    4a42:	dc 01       	movw	r26, r24
    4a44:	61 50       	subi	r22, 0x01	; 1
    4a46:	46 2f       	mov	r20, r22
    4a48:	50 e0       	ldi	r21, 0x00	; 0
    4a4a:	4f 5f       	subi	r20, 0xFF	; 255
    4a4c:	5f 4f       	sbci	r21, 0xFF	; 255
    4a4e:	48 0f       	add	r20, r24
    4a50:	59 1f       	adc	r21, r25
    4a52:	e7 01       	movw	r28, r14
    4a54:	ea 81       	ldd	r30, Y+2	; 0x02
    4a56:	fb 81       	ldd	r31, Y+3	; 0x03
    4a58:	93 81       	ldd	r25, Z+3	; 0x03
    4a5a:	82 81       	ldd	r24, Z+2	; 0x02
    4a5c:	25 81       	ldd	r18, Z+5	; 0x05
    4a5e:	98 1b       	sub	r25, r24
    4a60:	92 23       	and	r25, r18
    4a62:	84 81       	ldd	r24, Z+4	; 0x04
    4a64:	98 17       	cp	r25, r24
    4a66:	79 f0       	breq	.+30     	; 0x4a86 <serial_send_bytes+0x76>
    4a68:	8c 91       	ld	r24, X
    4a6a:	93 81       	ldd	r25, Z+3	; 0x03
    4a6c:	26 95       	lsr	r18
    4a6e:	29 23       	and	r18, r25
    4a70:	60 81       	ld	r22, Z
    4a72:	71 81       	ldd	r23, Z+1	; 0x01
    4a74:	8b 01       	movw	r16, r22
    4a76:	02 0f       	add	r16, r18
    4a78:	11 1d       	adc	r17, r1
    4a7a:	e8 01       	movw	r28, r16
    4a7c:	88 83       	st	Y, r24
    4a7e:	9f 5f       	subi	r25, 0xFF	; 255
    4a80:	85 81       	ldd	r24, Z+5	; 0x05
    4a82:	98 23       	and	r25, r24
    4a84:	93 83       	std	Z+3, r25	; 0x03
    4a86:	11 96       	adiw	r26, 0x01	; 1
    4a88:	a4 17       	cp	r26, r20
    4a8a:	b5 07       	cpc	r27, r21
    4a8c:	11 f7       	brne	.-60     	; 0x4a52 <serial_send_bytes+0x42>
    4a8e:	d7 01       	movw	r26, r14
    4a90:	ed 91       	ld	r30, X+
    4a92:	fc 91       	ld	r31, X
    4a94:	35 97       	sbiw	r30, 0x05	; 5
    4a96:	80 81       	ld	r24, Z
    4a98:	80 62       	ori	r24, 0x20	; 32
    4a9a:	80 83       	st	Z, r24
    4a9c:	80 e0       	ldi	r24, 0x00	; 0
    4a9e:	01 c0       	rjmp	.+2      	; 0x4aa2 <serial_send_bytes+0x92>
    4aa0:	82 e0       	ldi	r24, 0x02	; 2
    4aa2:	df 91       	pop	r29
    4aa4:	cf 91       	pop	r28
    4aa6:	1f 91       	pop	r17
    4aa8:	0f 91       	pop	r16
    4aaa:	ff 90       	pop	r15
    4aac:	ef 90       	pop	r14
    4aae:	08 95       	ret

00004ab0 <serial_get_byte>:
    4ab0:	dc 01       	movw	r26, r24
    4ab2:	14 96       	adiw	r26, 0x04	; 4
    4ab4:	ed 91       	ld	r30, X+
    4ab6:	fc 91       	ld	r31, X
    4ab8:	15 97       	sbiw	r26, 0x05	; 5
    4aba:	93 81       	ldd	r25, Z+3	; 0x03
    4abc:	82 81       	ldd	r24, Z+2	; 0x02
    4abe:	98 17       	cp	r25, r24
    4ac0:	89 f0       	breq	.+34     	; 0x4ae4 <serial_get_byte+0x34>
    4ac2:	92 81       	ldd	r25, Z+2	; 0x02
    4ac4:	85 81       	ldd	r24, Z+5	; 0x05
    4ac6:	86 95       	lsr	r24
    4ac8:	89 23       	and	r24, r25
    4aca:	a0 81       	ld	r26, Z
    4acc:	b1 81       	ldd	r27, Z+1	; 0x01
    4ace:	a8 0f       	add	r26, r24
    4ad0:	b1 1d       	adc	r27, r1
    4ad2:	8c 91       	ld	r24, X
    4ad4:	db 01       	movw	r26, r22
    4ad6:	8c 93       	st	X, r24
    4ad8:	9f 5f       	subi	r25, 0xFF	; 255
    4ada:	85 81       	ldd	r24, Z+5	; 0x05
    4adc:	98 23       	and	r25, r24
    4ade:	92 83       	std	Z+2, r25	; 0x02
    4ae0:	80 e0       	ldi	r24, 0x00	; 0
    4ae2:	08 95       	ret
    4ae4:	83 e0       	ldi	r24, 0x03	; 3
    4ae6:	08 95       	ret

00004ae8 <__vector_25>:
    4ae8:	1f 92       	push	r1
    4aea:	0f 92       	push	r0
    4aec:	0f b6       	in	r0, 0x3f	; 63
    4aee:	0f 92       	push	r0
    4af0:	11 24       	eor	r1, r1
    4af2:	0b b6       	in	r0, 0x3b	; 59
    4af4:	0f 92       	push	r0
    4af6:	2f 93       	push	r18
    4af8:	3f 93       	push	r19
    4afa:	4f 93       	push	r20
    4afc:	5f 93       	push	r21
    4afe:	6f 93       	push	r22
    4b00:	7f 93       	push	r23
    4b02:	8f 93       	push	r24
    4b04:	9f 93       	push	r25
    4b06:	af 93       	push	r26
    4b08:	bf 93       	push	r27
    4b0a:	cf 93       	push	r28
    4b0c:	df 93       	push	r29
    4b0e:	ef 93       	push	r30
    4b10:	ff 93       	push	r31
    4b12:	a0 91 62 1a 	lds	r26, 0x1A62	; 0x801a62 <_ser_handle>
    4b16:	b0 91 63 1a 	lds	r27, 0x1A63	; 0x801a63 <_ser_handle+0x1>
    4b1a:	10 97       	sbiw	r26, 0x00	; 0
    4b1c:	11 f1       	breq	.+68     	; 0x4b62 <__vector_25+0x7a>
    4b1e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4b22:	14 96       	adiw	r26, 0x04	; 4
    4b24:	ed 91       	ld	r30, X+
    4b26:	fc 91       	ld	r31, X
    4b28:	15 97       	sbiw	r26, 0x05	; 5
    4b2a:	93 81       	ldd	r25, Z+3	; 0x03
    4b2c:	82 81       	ldd	r24, Z+2	; 0x02
    4b2e:	25 81       	ldd	r18, Z+5	; 0x05
    4b30:	98 1b       	sub	r25, r24
    4b32:	92 23       	and	r25, r18
    4b34:	84 81       	ldd	r24, Z+4	; 0x04
    4b36:	98 17       	cp	r25, r24
    4b38:	61 f0       	breq	.+24     	; 0x4b52 <__vector_25+0x6a>
    4b3a:	83 81       	ldd	r24, Z+3	; 0x03
    4b3c:	26 95       	lsr	r18
    4b3e:	28 23       	and	r18, r24
    4b40:	c0 81       	ld	r28, Z
    4b42:	d1 81       	ldd	r29, Z+1	; 0x01
    4b44:	c2 0f       	add	r28, r18
    4b46:	d1 1d       	adc	r29, r1
    4b48:	68 83       	st	Y, r22
    4b4a:	8f 5f       	subi	r24, 0xFF	; 255
    4b4c:	95 81       	ldd	r25, Z+5	; 0x05
    4b4e:	89 23       	and	r24, r25
    4b50:	83 83       	std	Z+3, r24	; 0x03
    4b52:	16 96       	adiw	r26, 0x06	; 6
    4b54:	ed 91       	ld	r30, X+
    4b56:	fc 91       	ld	r31, X
    4b58:	17 97       	sbiw	r26, 0x07	; 7
    4b5a:	30 97       	sbiw	r30, 0x00	; 0
    4b5c:	11 f0       	breq	.+4      	; 0x4b62 <__vector_25+0x7a>
    4b5e:	cd 01       	movw	r24, r26
    4b60:	19 95       	eicall
    4b62:	ff 91       	pop	r31
    4b64:	ef 91       	pop	r30
    4b66:	df 91       	pop	r29
    4b68:	cf 91       	pop	r28
    4b6a:	bf 91       	pop	r27
    4b6c:	af 91       	pop	r26
    4b6e:	9f 91       	pop	r25
    4b70:	8f 91       	pop	r24
    4b72:	7f 91       	pop	r23
    4b74:	6f 91       	pop	r22
    4b76:	5f 91       	pop	r21
    4b78:	4f 91       	pop	r20
    4b7a:	3f 91       	pop	r19
    4b7c:	2f 91       	pop	r18
    4b7e:	0f 90       	pop	r0
    4b80:	0b be       	out	0x3b, r0	; 59
    4b82:	0f 90       	pop	r0
    4b84:	0f be       	out	0x3f, r0	; 63
    4b86:	0f 90       	pop	r0
    4b88:	1f 90       	pop	r1
    4b8a:	18 95       	reti

00004b8c <__vector_26>:
    4b8c:	1f 92       	push	r1
    4b8e:	0f 92       	push	r0
    4b90:	0f b6       	in	r0, 0x3f	; 63
    4b92:	0f 92       	push	r0
    4b94:	11 24       	eor	r1, r1
    4b96:	0b b6       	in	r0, 0x3b	; 59
    4b98:	0f 92       	push	r0
    4b9a:	2f 93       	push	r18
    4b9c:	8f 93       	push	r24
    4b9e:	9f 93       	push	r25
    4ba0:	af 93       	push	r26
    4ba2:	bf 93       	push	r27
    4ba4:	ef 93       	push	r30
    4ba6:	ff 93       	push	r31
    4ba8:	e0 91 62 1a 	lds	r30, 0x1A62	; 0x801a62 <_ser_handle>
    4bac:	f0 91 63 1a 	lds	r31, 0x1A63	; 0x801a63 <_ser_handle+0x1>
    4bb0:	30 97       	sbiw	r30, 0x00	; 0
    4bb2:	b9 f0       	breq	.+46     	; 0x4be2 <__vector_26+0x56>
    4bb4:	02 80       	ldd	r0, Z+2	; 0x02
    4bb6:	f3 81       	ldd	r31, Z+3	; 0x03
    4bb8:	e0 2d       	mov	r30, r0
    4bba:	93 81       	ldd	r25, Z+3	; 0x03
    4bbc:	82 81       	ldd	r24, Z+2	; 0x02
    4bbe:	98 17       	cp	r25, r24
    4bc0:	b1 f0       	breq	.+44     	; 0x4bee <__vector_26+0x62>
    4bc2:	92 81       	ldd	r25, Z+2	; 0x02
    4bc4:	85 81       	ldd	r24, Z+5	; 0x05
    4bc6:	28 2f       	mov	r18, r24
    4bc8:	26 95       	lsr	r18
    4bca:	29 23       	and	r18, r25
    4bcc:	a0 81       	ld	r26, Z
    4bce:	b1 81       	ldd	r27, Z+1	; 0x01
    4bd0:	a2 0f       	add	r26, r18
    4bd2:	b1 1d       	adc	r27, r1
    4bd4:	2c 91       	ld	r18, X
    4bd6:	9f 5f       	subi	r25, 0xFF	; 255
    4bd8:	89 23       	and	r24, r25
    4bda:	82 83       	std	Z+2, r24	; 0x02
    4bdc:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4be0:	0b c0       	rjmp	.+22     	; 0x4bf8 <__vector_26+0x6c>
    4be2:	e1 ec       	ldi	r30, 0xC1	; 193
    4be4:	f0 e0       	ldi	r31, 0x00	; 0
    4be6:	80 81       	ld	r24, Z
    4be8:	8f 7d       	andi	r24, 0xDF	; 223
    4bea:	80 83       	st	Z, r24
    4bec:	05 c0       	rjmp	.+10     	; 0x4bf8 <__vector_26+0x6c>
    4bee:	e1 ec       	ldi	r30, 0xC1	; 193
    4bf0:	f0 e0       	ldi	r31, 0x00	; 0
    4bf2:	80 81       	ld	r24, Z
    4bf4:	8f 7d       	andi	r24, 0xDF	; 223
    4bf6:	80 83       	st	Z, r24
    4bf8:	ff 91       	pop	r31
    4bfa:	ef 91       	pop	r30
    4bfc:	bf 91       	pop	r27
    4bfe:	af 91       	pop	r26
    4c00:	9f 91       	pop	r25
    4c02:	8f 91       	pop	r24
    4c04:	2f 91       	pop	r18
    4c06:	0f 90       	pop	r0
    4c08:	0b be       	out	0x3b, r0	; 59
    4c0a:	0f 90       	pop	r0
    4c0c:	0f be       	out	0x3f, r0	; 63
    4c0e:	0f 90       	pop	r0
    4c10:	1f 90       	pop	r1
    4c12:	18 95       	reti

00004c14 <__vector_36>:
    4c14:	1f 92       	push	r1
    4c16:	0f 92       	push	r0
    4c18:	0f b6       	in	r0, 0x3f	; 63
    4c1a:	0f 92       	push	r0
    4c1c:	11 24       	eor	r1, r1
    4c1e:	0b b6       	in	r0, 0x3b	; 59
    4c20:	0f 92       	push	r0
    4c22:	2f 93       	push	r18
    4c24:	3f 93       	push	r19
    4c26:	4f 93       	push	r20
    4c28:	5f 93       	push	r21
    4c2a:	6f 93       	push	r22
    4c2c:	7f 93       	push	r23
    4c2e:	8f 93       	push	r24
    4c30:	9f 93       	push	r25
    4c32:	af 93       	push	r26
    4c34:	bf 93       	push	r27
    4c36:	cf 93       	push	r28
    4c38:	df 93       	push	r29
    4c3a:	ef 93       	push	r30
    4c3c:	ff 93       	push	r31
    4c3e:	a0 91 64 1a 	lds	r26, 0x1A64	; 0x801a64 <_ser_handle+0x2>
    4c42:	b0 91 65 1a 	lds	r27, 0x1A65	; 0x801a65 <_ser_handle+0x3>
    4c46:	10 97       	sbiw	r26, 0x00	; 0
    4c48:	11 f1       	breq	.+68     	; 0x4c8e <__vector_36+0x7a>
    4c4a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4c4e:	14 96       	adiw	r26, 0x04	; 4
    4c50:	ed 91       	ld	r30, X+
    4c52:	fc 91       	ld	r31, X
    4c54:	15 97       	sbiw	r26, 0x05	; 5
    4c56:	93 81       	ldd	r25, Z+3	; 0x03
    4c58:	82 81       	ldd	r24, Z+2	; 0x02
    4c5a:	25 81       	ldd	r18, Z+5	; 0x05
    4c5c:	98 1b       	sub	r25, r24
    4c5e:	92 23       	and	r25, r18
    4c60:	84 81       	ldd	r24, Z+4	; 0x04
    4c62:	98 17       	cp	r25, r24
    4c64:	61 f0       	breq	.+24     	; 0x4c7e <__vector_36+0x6a>
    4c66:	83 81       	ldd	r24, Z+3	; 0x03
    4c68:	26 95       	lsr	r18
    4c6a:	28 23       	and	r18, r24
    4c6c:	c0 81       	ld	r28, Z
    4c6e:	d1 81       	ldd	r29, Z+1	; 0x01
    4c70:	c2 0f       	add	r28, r18
    4c72:	d1 1d       	adc	r29, r1
    4c74:	68 83       	st	Y, r22
    4c76:	8f 5f       	subi	r24, 0xFF	; 255
    4c78:	95 81       	ldd	r25, Z+5	; 0x05
    4c7a:	89 23       	and	r24, r25
    4c7c:	83 83       	std	Z+3, r24	; 0x03
    4c7e:	16 96       	adiw	r26, 0x06	; 6
    4c80:	ed 91       	ld	r30, X+
    4c82:	fc 91       	ld	r31, X
    4c84:	17 97       	sbiw	r26, 0x07	; 7
    4c86:	30 97       	sbiw	r30, 0x00	; 0
    4c88:	11 f0       	breq	.+4      	; 0x4c8e <__vector_36+0x7a>
    4c8a:	cd 01       	movw	r24, r26
    4c8c:	19 95       	eicall
    4c8e:	ff 91       	pop	r31
    4c90:	ef 91       	pop	r30
    4c92:	df 91       	pop	r29
    4c94:	cf 91       	pop	r28
    4c96:	bf 91       	pop	r27
    4c98:	af 91       	pop	r26
    4c9a:	9f 91       	pop	r25
    4c9c:	8f 91       	pop	r24
    4c9e:	7f 91       	pop	r23
    4ca0:	6f 91       	pop	r22
    4ca2:	5f 91       	pop	r21
    4ca4:	4f 91       	pop	r20
    4ca6:	3f 91       	pop	r19
    4ca8:	2f 91       	pop	r18
    4caa:	0f 90       	pop	r0
    4cac:	0b be       	out	0x3b, r0	; 59
    4cae:	0f 90       	pop	r0
    4cb0:	0f be       	out	0x3f, r0	; 63
    4cb2:	0f 90       	pop	r0
    4cb4:	1f 90       	pop	r1
    4cb6:	18 95       	reti

00004cb8 <__vector_37>:
    4cb8:	1f 92       	push	r1
    4cba:	0f 92       	push	r0
    4cbc:	0f b6       	in	r0, 0x3f	; 63
    4cbe:	0f 92       	push	r0
    4cc0:	11 24       	eor	r1, r1
    4cc2:	0b b6       	in	r0, 0x3b	; 59
    4cc4:	0f 92       	push	r0
    4cc6:	2f 93       	push	r18
    4cc8:	8f 93       	push	r24
    4cca:	9f 93       	push	r25
    4ccc:	af 93       	push	r26
    4cce:	bf 93       	push	r27
    4cd0:	ef 93       	push	r30
    4cd2:	ff 93       	push	r31
    4cd4:	e0 91 64 1a 	lds	r30, 0x1A64	; 0x801a64 <_ser_handle+0x2>
    4cd8:	f0 91 65 1a 	lds	r31, 0x1A65	; 0x801a65 <_ser_handle+0x3>
    4cdc:	30 97       	sbiw	r30, 0x00	; 0
    4cde:	b9 f0       	breq	.+46     	; 0x4d0e <__vector_37+0x56>
    4ce0:	02 80       	ldd	r0, Z+2	; 0x02
    4ce2:	f3 81       	ldd	r31, Z+3	; 0x03
    4ce4:	e0 2d       	mov	r30, r0
    4ce6:	93 81       	ldd	r25, Z+3	; 0x03
    4ce8:	82 81       	ldd	r24, Z+2	; 0x02
    4cea:	98 17       	cp	r25, r24
    4cec:	b1 f0       	breq	.+44     	; 0x4d1a <__vector_37+0x62>
    4cee:	92 81       	ldd	r25, Z+2	; 0x02
    4cf0:	85 81       	ldd	r24, Z+5	; 0x05
    4cf2:	28 2f       	mov	r18, r24
    4cf4:	26 95       	lsr	r18
    4cf6:	29 23       	and	r18, r25
    4cf8:	a0 81       	ld	r26, Z
    4cfa:	b1 81       	ldd	r27, Z+1	; 0x01
    4cfc:	a2 0f       	add	r26, r18
    4cfe:	b1 1d       	adc	r27, r1
    4d00:	2c 91       	ld	r18, X
    4d02:	9f 5f       	subi	r25, 0xFF	; 255
    4d04:	89 23       	and	r24, r25
    4d06:	82 83       	std	Z+2, r24	; 0x02
    4d08:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4d0c:	0b c0       	rjmp	.+22     	; 0x4d24 <__vector_37+0x6c>
    4d0e:	e9 ec       	ldi	r30, 0xC9	; 201
    4d10:	f0 e0       	ldi	r31, 0x00	; 0
    4d12:	80 81       	ld	r24, Z
    4d14:	8f 7d       	andi	r24, 0xDF	; 223
    4d16:	80 83       	st	Z, r24
    4d18:	05 c0       	rjmp	.+10     	; 0x4d24 <__vector_37+0x6c>
    4d1a:	e9 ec       	ldi	r30, 0xC9	; 201
    4d1c:	f0 e0       	ldi	r31, 0x00	; 0
    4d1e:	80 81       	ld	r24, Z
    4d20:	8f 7d       	andi	r24, 0xDF	; 223
    4d22:	80 83       	st	Z, r24
    4d24:	ff 91       	pop	r31
    4d26:	ef 91       	pop	r30
    4d28:	bf 91       	pop	r27
    4d2a:	af 91       	pop	r26
    4d2c:	9f 91       	pop	r25
    4d2e:	8f 91       	pop	r24
    4d30:	2f 91       	pop	r18
    4d32:	0f 90       	pop	r0
    4d34:	0b be       	out	0x3b, r0	; 59
    4d36:	0f 90       	pop	r0
    4d38:	0f be       	out	0x3f, r0	; 63
    4d3a:	0f 90       	pop	r0
    4d3c:	1f 90       	pop	r1
    4d3e:	18 95       	reti

00004d40 <__vector_51>:
    4d40:	1f 92       	push	r1
    4d42:	0f 92       	push	r0
    4d44:	0f b6       	in	r0, 0x3f	; 63
    4d46:	0f 92       	push	r0
    4d48:	11 24       	eor	r1, r1
    4d4a:	0b b6       	in	r0, 0x3b	; 59
    4d4c:	0f 92       	push	r0
    4d4e:	2f 93       	push	r18
    4d50:	3f 93       	push	r19
    4d52:	4f 93       	push	r20
    4d54:	5f 93       	push	r21
    4d56:	6f 93       	push	r22
    4d58:	7f 93       	push	r23
    4d5a:	8f 93       	push	r24
    4d5c:	9f 93       	push	r25
    4d5e:	af 93       	push	r26
    4d60:	bf 93       	push	r27
    4d62:	cf 93       	push	r28
    4d64:	df 93       	push	r29
    4d66:	ef 93       	push	r30
    4d68:	ff 93       	push	r31
    4d6a:	a0 91 66 1a 	lds	r26, 0x1A66	; 0x801a66 <_ser_handle+0x4>
    4d6e:	b0 91 67 1a 	lds	r27, 0x1A67	; 0x801a67 <_ser_handle+0x5>
    4d72:	10 97       	sbiw	r26, 0x00	; 0
    4d74:	11 f1       	breq	.+68     	; 0x4dba <__vector_51+0x7a>
    4d76:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4d7a:	14 96       	adiw	r26, 0x04	; 4
    4d7c:	ed 91       	ld	r30, X+
    4d7e:	fc 91       	ld	r31, X
    4d80:	15 97       	sbiw	r26, 0x05	; 5
    4d82:	93 81       	ldd	r25, Z+3	; 0x03
    4d84:	82 81       	ldd	r24, Z+2	; 0x02
    4d86:	25 81       	ldd	r18, Z+5	; 0x05
    4d88:	98 1b       	sub	r25, r24
    4d8a:	92 23       	and	r25, r18
    4d8c:	84 81       	ldd	r24, Z+4	; 0x04
    4d8e:	98 17       	cp	r25, r24
    4d90:	61 f0       	breq	.+24     	; 0x4daa <__vector_51+0x6a>
    4d92:	83 81       	ldd	r24, Z+3	; 0x03
    4d94:	26 95       	lsr	r18
    4d96:	28 23       	and	r18, r24
    4d98:	c0 81       	ld	r28, Z
    4d9a:	d1 81       	ldd	r29, Z+1	; 0x01
    4d9c:	c2 0f       	add	r28, r18
    4d9e:	d1 1d       	adc	r29, r1
    4da0:	68 83       	st	Y, r22
    4da2:	8f 5f       	subi	r24, 0xFF	; 255
    4da4:	95 81       	ldd	r25, Z+5	; 0x05
    4da6:	89 23       	and	r24, r25
    4da8:	83 83       	std	Z+3, r24	; 0x03
    4daa:	16 96       	adiw	r26, 0x06	; 6
    4dac:	ed 91       	ld	r30, X+
    4dae:	fc 91       	ld	r31, X
    4db0:	17 97       	sbiw	r26, 0x07	; 7
    4db2:	30 97       	sbiw	r30, 0x00	; 0
    4db4:	11 f0       	breq	.+4      	; 0x4dba <__vector_51+0x7a>
    4db6:	cd 01       	movw	r24, r26
    4db8:	19 95       	eicall
    4dba:	ff 91       	pop	r31
    4dbc:	ef 91       	pop	r30
    4dbe:	df 91       	pop	r29
    4dc0:	cf 91       	pop	r28
    4dc2:	bf 91       	pop	r27
    4dc4:	af 91       	pop	r26
    4dc6:	9f 91       	pop	r25
    4dc8:	8f 91       	pop	r24
    4dca:	7f 91       	pop	r23
    4dcc:	6f 91       	pop	r22
    4dce:	5f 91       	pop	r21
    4dd0:	4f 91       	pop	r20
    4dd2:	3f 91       	pop	r19
    4dd4:	2f 91       	pop	r18
    4dd6:	0f 90       	pop	r0
    4dd8:	0b be       	out	0x3b, r0	; 59
    4dda:	0f 90       	pop	r0
    4ddc:	0f be       	out	0x3f, r0	; 63
    4dde:	0f 90       	pop	r0
    4de0:	1f 90       	pop	r1
    4de2:	18 95       	reti

00004de4 <__vector_52>:
    4de4:	1f 92       	push	r1
    4de6:	0f 92       	push	r0
    4de8:	0f b6       	in	r0, 0x3f	; 63
    4dea:	0f 92       	push	r0
    4dec:	11 24       	eor	r1, r1
    4dee:	0b b6       	in	r0, 0x3b	; 59
    4df0:	0f 92       	push	r0
    4df2:	2f 93       	push	r18
    4df4:	8f 93       	push	r24
    4df6:	9f 93       	push	r25
    4df8:	af 93       	push	r26
    4dfa:	bf 93       	push	r27
    4dfc:	ef 93       	push	r30
    4dfe:	ff 93       	push	r31
    4e00:	e0 91 66 1a 	lds	r30, 0x1A66	; 0x801a66 <_ser_handle+0x4>
    4e04:	f0 91 67 1a 	lds	r31, 0x1A67	; 0x801a67 <_ser_handle+0x5>
    4e08:	30 97       	sbiw	r30, 0x00	; 0
    4e0a:	b9 f0       	breq	.+46     	; 0x4e3a <__vector_52+0x56>
    4e0c:	02 80       	ldd	r0, Z+2	; 0x02
    4e0e:	f3 81       	ldd	r31, Z+3	; 0x03
    4e10:	e0 2d       	mov	r30, r0
    4e12:	93 81       	ldd	r25, Z+3	; 0x03
    4e14:	82 81       	ldd	r24, Z+2	; 0x02
    4e16:	98 17       	cp	r25, r24
    4e18:	b1 f0       	breq	.+44     	; 0x4e46 <__vector_52+0x62>
    4e1a:	92 81       	ldd	r25, Z+2	; 0x02
    4e1c:	85 81       	ldd	r24, Z+5	; 0x05
    4e1e:	28 2f       	mov	r18, r24
    4e20:	26 95       	lsr	r18
    4e22:	29 23       	and	r18, r25
    4e24:	a0 81       	ld	r26, Z
    4e26:	b1 81       	ldd	r27, Z+1	; 0x01
    4e28:	a2 0f       	add	r26, r18
    4e2a:	b1 1d       	adc	r27, r1
    4e2c:	2c 91       	ld	r18, X
    4e2e:	9f 5f       	subi	r25, 0xFF	; 255
    4e30:	89 23       	and	r24, r25
    4e32:	82 83       	std	Z+2, r24	; 0x02
    4e34:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4e38:	0b c0       	rjmp	.+22     	; 0x4e50 <__vector_52+0x6c>
    4e3a:	e1 ed       	ldi	r30, 0xD1	; 209
    4e3c:	f0 e0       	ldi	r31, 0x00	; 0
    4e3e:	80 81       	ld	r24, Z
    4e40:	8f 7d       	andi	r24, 0xDF	; 223
    4e42:	80 83       	st	Z, r24
    4e44:	05 c0       	rjmp	.+10     	; 0x4e50 <__vector_52+0x6c>
    4e46:	e1 ed       	ldi	r30, 0xD1	; 209
    4e48:	f0 e0       	ldi	r31, 0x00	; 0
    4e4a:	80 81       	ld	r24, Z
    4e4c:	8f 7d       	andi	r24, 0xDF	; 223
    4e4e:	80 83       	st	Z, r24
    4e50:	ff 91       	pop	r31
    4e52:	ef 91       	pop	r30
    4e54:	bf 91       	pop	r27
    4e56:	af 91       	pop	r26
    4e58:	9f 91       	pop	r25
    4e5a:	8f 91       	pop	r24
    4e5c:	2f 91       	pop	r18
    4e5e:	0f 90       	pop	r0
    4e60:	0b be       	out	0x3b, r0	; 59
    4e62:	0f 90       	pop	r0
    4e64:	0f be       	out	0x3f, r0	; 63
    4e66:	0f 90       	pop	r0
    4e68:	1f 90       	pop	r1
    4e6a:	18 95       	reti

00004e6c <__vector_54>:
    4e6c:	1f 92       	push	r1
    4e6e:	0f 92       	push	r0
    4e70:	0f b6       	in	r0, 0x3f	; 63
    4e72:	0f 92       	push	r0
    4e74:	11 24       	eor	r1, r1
    4e76:	0b b6       	in	r0, 0x3b	; 59
    4e78:	0f 92       	push	r0
    4e7a:	2f 93       	push	r18
    4e7c:	3f 93       	push	r19
    4e7e:	4f 93       	push	r20
    4e80:	5f 93       	push	r21
    4e82:	6f 93       	push	r22
    4e84:	7f 93       	push	r23
    4e86:	8f 93       	push	r24
    4e88:	9f 93       	push	r25
    4e8a:	af 93       	push	r26
    4e8c:	bf 93       	push	r27
    4e8e:	cf 93       	push	r28
    4e90:	df 93       	push	r29
    4e92:	ef 93       	push	r30
    4e94:	ff 93       	push	r31
    4e96:	a0 91 68 1a 	lds	r26, 0x1A68	; 0x801a68 <_ser_handle+0x6>
    4e9a:	b0 91 69 1a 	lds	r27, 0x1A69	; 0x801a69 <_ser_handle+0x7>
    4e9e:	10 97       	sbiw	r26, 0x00	; 0
    4ea0:	11 f1       	breq	.+68     	; 0x4ee6 <__vector_54+0x7a>
    4ea2:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4ea6:	14 96       	adiw	r26, 0x04	; 4
    4ea8:	ed 91       	ld	r30, X+
    4eaa:	fc 91       	ld	r31, X
    4eac:	15 97       	sbiw	r26, 0x05	; 5
    4eae:	93 81       	ldd	r25, Z+3	; 0x03
    4eb0:	82 81       	ldd	r24, Z+2	; 0x02
    4eb2:	25 81       	ldd	r18, Z+5	; 0x05
    4eb4:	98 1b       	sub	r25, r24
    4eb6:	92 23       	and	r25, r18
    4eb8:	84 81       	ldd	r24, Z+4	; 0x04
    4eba:	98 17       	cp	r25, r24
    4ebc:	61 f0       	breq	.+24     	; 0x4ed6 <__vector_54+0x6a>
    4ebe:	83 81       	ldd	r24, Z+3	; 0x03
    4ec0:	26 95       	lsr	r18
    4ec2:	28 23       	and	r18, r24
    4ec4:	c0 81       	ld	r28, Z
    4ec6:	d1 81       	ldd	r29, Z+1	; 0x01
    4ec8:	c2 0f       	add	r28, r18
    4eca:	d1 1d       	adc	r29, r1
    4ecc:	68 83       	st	Y, r22
    4ece:	8f 5f       	subi	r24, 0xFF	; 255
    4ed0:	95 81       	ldd	r25, Z+5	; 0x05
    4ed2:	89 23       	and	r24, r25
    4ed4:	83 83       	std	Z+3, r24	; 0x03
    4ed6:	16 96       	adiw	r26, 0x06	; 6
    4ed8:	ed 91       	ld	r30, X+
    4eda:	fc 91       	ld	r31, X
    4edc:	17 97       	sbiw	r26, 0x07	; 7
    4ede:	30 97       	sbiw	r30, 0x00	; 0
    4ee0:	11 f0       	breq	.+4      	; 0x4ee6 <__vector_54+0x7a>
    4ee2:	cd 01       	movw	r24, r26
    4ee4:	19 95       	eicall
    4ee6:	ff 91       	pop	r31
    4ee8:	ef 91       	pop	r30
    4eea:	df 91       	pop	r29
    4eec:	cf 91       	pop	r28
    4eee:	bf 91       	pop	r27
    4ef0:	af 91       	pop	r26
    4ef2:	9f 91       	pop	r25
    4ef4:	8f 91       	pop	r24
    4ef6:	7f 91       	pop	r23
    4ef8:	6f 91       	pop	r22
    4efa:	5f 91       	pop	r21
    4efc:	4f 91       	pop	r20
    4efe:	3f 91       	pop	r19
    4f00:	2f 91       	pop	r18
    4f02:	0f 90       	pop	r0
    4f04:	0b be       	out	0x3b, r0	; 59
    4f06:	0f 90       	pop	r0
    4f08:	0f be       	out	0x3f, r0	; 63
    4f0a:	0f 90       	pop	r0
    4f0c:	1f 90       	pop	r1
    4f0e:	18 95       	reti

00004f10 <__vector_55>:
    4f10:	1f 92       	push	r1
    4f12:	0f 92       	push	r0
    4f14:	0f b6       	in	r0, 0x3f	; 63
    4f16:	0f 92       	push	r0
    4f18:	11 24       	eor	r1, r1
    4f1a:	0b b6       	in	r0, 0x3b	; 59
    4f1c:	0f 92       	push	r0
    4f1e:	2f 93       	push	r18
    4f20:	8f 93       	push	r24
    4f22:	9f 93       	push	r25
    4f24:	af 93       	push	r26
    4f26:	bf 93       	push	r27
    4f28:	ef 93       	push	r30
    4f2a:	ff 93       	push	r31
    4f2c:	e0 91 68 1a 	lds	r30, 0x1A68	; 0x801a68 <_ser_handle+0x6>
    4f30:	f0 91 69 1a 	lds	r31, 0x1A69	; 0x801a69 <_ser_handle+0x7>
    4f34:	30 97       	sbiw	r30, 0x00	; 0
    4f36:	b9 f0       	breq	.+46     	; 0x4f66 <__vector_55+0x56>
    4f38:	02 80       	ldd	r0, Z+2	; 0x02
    4f3a:	f3 81       	ldd	r31, Z+3	; 0x03
    4f3c:	e0 2d       	mov	r30, r0
    4f3e:	93 81       	ldd	r25, Z+3	; 0x03
    4f40:	82 81       	ldd	r24, Z+2	; 0x02
    4f42:	98 17       	cp	r25, r24
    4f44:	b1 f0       	breq	.+44     	; 0x4f72 <__vector_55+0x62>
    4f46:	92 81       	ldd	r25, Z+2	; 0x02
    4f48:	85 81       	ldd	r24, Z+5	; 0x05
    4f4a:	28 2f       	mov	r18, r24
    4f4c:	26 95       	lsr	r18
    4f4e:	29 23       	and	r18, r25
    4f50:	a0 81       	ld	r26, Z
    4f52:	b1 81       	ldd	r27, Z+1	; 0x01
    4f54:	a2 0f       	add	r26, r18
    4f56:	b1 1d       	adc	r27, r1
    4f58:	2c 91       	ld	r18, X
    4f5a:	9f 5f       	subi	r25, 0xFF	; 255
    4f5c:	89 23       	and	r24, r25
    4f5e:	82 83       	std	Z+2, r24	; 0x02
    4f60:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4f64:	0b c0       	rjmp	.+22     	; 0x4f7c <__vector_55+0x6c>
    4f66:	e1 e3       	ldi	r30, 0x31	; 49
    4f68:	f1 e0       	ldi	r31, 0x01	; 1
    4f6a:	80 81       	ld	r24, Z
    4f6c:	8f 7d       	andi	r24, 0xDF	; 223
    4f6e:	80 83       	st	Z, r24
    4f70:	05 c0       	rjmp	.+10     	; 0x4f7c <__vector_55+0x6c>
    4f72:	e1 e3       	ldi	r30, 0x31	; 49
    4f74:	f1 e0       	ldi	r31, 0x01	; 1
    4f76:	80 81       	ld	r24, Z
    4f78:	8f 7d       	andi	r24, 0xDF	; 223
    4f7a:	80 83       	st	Z, r24
    4f7c:	ff 91       	pop	r31
    4f7e:	ef 91       	pop	r30
    4f80:	bf 91       	pop	r27
    4f82:	af 91       	pop	r26
    4f84:	9f 91       	pop	r25
    4f86:	8f 91       	pop	r24
    4f88:	2f 91       	pop	r18
    4f8a:	0f 90       	pop	r0
    4f8c:	0b be       	out	0x3b, r0	; 59
    4f8e:	0f 90       	pop	r0
    4f90:	0f be       	out	0x3f, r0	; 63
    4f92:	0f 90       	pop	r0
    4f94:	1f 90       	pop	r1
    4f96:	18 95       	reti

00004f98 <usart_getchar>:
    4f98:	cf 93       	push	r28
    4f9a:	df 93       	push	r29
    4f9c:	1f 92       	push	r1
    4f9e:	cd b7       	in	r28, 0x3d	; 61
    4fa0:	de b7       	in	r29, 0x3e	; 62
    4fa2:	be 01       	movw	r22, r28
    4fa4:	6f 5f       	subi	r22, 0xFF	; 255
    4fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    4fa8:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <_com_serial_instance>
    4fac:	90 91 6b 1a 	lds	r25, 0x1A6B	; 0x801a6b <_com_serial_instance+0x1>
    4fb0:	7f dd       	rcall	.-1282   	; 0x4ab0 <serial_get_byte>
    4fb2:	81 11       	cpse	r24, r1
    4fb4:	f6 cf       	rjmp	.-20     	; 0x4fa2 <usart_getchar+0xa>
    4fb6:	89 81       	ldd	r24, Y+1	; 0x01
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	0f 90       	pop	r0
    4fbc:	df 91       	pop	r29
    4fbe:	cf 91       	pop	r28
    4fc0:	08 95       	ret

00004fc2 <usart_putchar>:
    4fc2:	68 2f       	mov	r22, r24
    4fc4:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <_com_serial_instance>
    4fc8:	90 91 6b 1a 	lds	r25, 0x1A6B	; 0x801a6b <_com_serial_instance+0x1>
    4fcc:	fc dc       	rcall	.-1544   	; 0x49c6 <serial_send_byte>
    4fce:	80 e0       	ldi	r24, 0x00	; 0
    4fd0:	90 e0       	ldi	r25, 0x00	; 0
    4fd2:	08 95       	ret

00004fd4 <stdioCreate>:
    4fd4:	8f 92       	push	r8
    4fd6:	9f 92       	push	r9
    4fd8:	af 92       	push	r10
    4fda:	cf 92       	push	r12
    4fdc:	ef 92       	push	r14
    4fde:	0f 93       	push	r16
    4fe0:	81 2c       	mov	r8, r1
    4fe2:	91 2c       	mov	r9, r1
    4fe4:	68 94       	set
    4fe6:	aa 24       	eor	r10, r10
    4fe8:	a7 f8       	bld	r10, 7
    4fea:	68 94       	set
    4fec:	cc 24       	eor	r12, r12
    4fee:	c7 f8       	bld	r12, 7
    4ff0:	e1 2c       	mov	r14, r1
    4ff2:	00 e0       	ldi	r16, 0x00	; 0
    4ff4:	23 e0       	ldi	r18, 0x03	; 3
    4ff6:	40 e0       	ldi	r20, 0x00	; 0
    4ff8:	51 ee       	ldi	r21, 0xE1	; 225
    4ffa:	60 e0       	ldi	r22, 0x00	; 0
    4ffc:	70 e0       	ldi	r23, 0x00	; 0
    4ffe:	4c dc       	rcall	.-1896   	; 0x4898 <serial_new_instance>
    5000:	90 93 6b 1a 	sts	0x1A6B, r25	; 0x801a6b <_com_serial_instance+0x1>
    5004:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <_com_serial_instance>
    5008:	ec ea       	ldi	r30, 0xAC	; 172
    500a:	fa e1       	ldi	r31, 0x1A	; 26
    500c:	82 e1       	ldi	r24, 0x12	; 18
    500e:	92 e0       	ldi	r25, 0x02	; 2
    5010:	91 83       	std	Z+1, r25	; 0x01
    5012:	80 83       	st	Z, r24
    5014:	93 83       	std	Z+3, r25	; 0x03
    5016:	82 83       	std	Z+2, r24	; 0x02
    5018:	0f 91       	pop	r16
    501a:	ef 90       	pop	r14
    501c:	cf 90       	pop	r12
    501e:	af 90       	pop	r10
    5020:	9f 90       	pop	r9
    5022:	8f 90       	pop	r8
    5024:	08 95       	ret

00005026 <_initTwiInterface>:
    5026:	80 91 7a 1a 	lds	r24, 0x1A7A	; 0x801a7a <_twiIsInitiated>
    502a:	81 11       	cpse	r24, r1
    502c:	0c c0       	rjmp	.+24     	; 0x5046 <_initTwiInterface+0x20>
    502e:	8c e0       	ldi	r24, 0x0C	; 12
    5030:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5034:	8f ef       	ldi	r24, 0xFF	; 255
    5036:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    503a:	84 e0       	ldi	r24, 0x04	; 4
    503c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5040:	81 e0       	ldi	r24, 0x01	; 1
    5042:	80 93 7a 1a 	sts	0x1A7A, r24	; 0x801a7a <_twiIsInitiated>
    5046:	08 95       	ret

00005048 <twiCreate>:
    5048:	af 92       	push	r10
    504a:	bf 92       	push	r11
    504c:	cf 92       	push	r12
    504e:	df 92       	push	r13
    5050:	ef 92       	push	r14
    5052:	ff 92       	push	r15
    5054:	0f 93       	push	r16
    5056:	1f 93       	push	r17
    5058:	cf 93       	push	r28
    505a:	df 93       	push	r29
    505c:	a8 2e       	mov	r10, r24
    505e:	b6 2e       	mov	r11, r22
    5060:	69 01       	movw	r12, r18
    5062:	7a 01       	movw	r14, r20
    5064:	84 e0       	ldi	r24, 0x04	; 4
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	79 d3       	rcall	.+1778   	; 0x575c <malloc>
    506a:	ec 01       	movw	r28, r24
    506c:	89 2b       	or	r24, r25
    506e:	61 f1       	breq	.+88     	; 0x50c8 <twiCreate+0x80>
    5070:	a8 82       	st	Y, r10
    5072:	81 e0       	ldi	r24, 0x01	; 1
    5074:	b8 12       	cpse	r11, r24
    5076:	12 c0       	rjmp	.+36     	; 0x509c <twiCreate+0x54>
    5078:	c7 01       	movw	r24, r14
    507a:	b6 01       	movw	r22, r12
    507c:	20 ea       	ldi	r18, 0xA0	; 160
    507e:	36 e8       	ldi	r19, 0x86	; 134
    5080:	41 e0       	ldi	r20, 0x01	; 1
    5082:	50 e0       	ldi	r21, 0x00	; 0
    5084:	27 d3       	rcall	.+1614   	; 0x56d4 <__udivmodsi4>
    5086:	da 01       	movw	r26, r20
    5088:	c9 01       	movw	r24, r18
    508a:	40 97       	sbiw	r24, 0x10	; 16
    508c:	a1 09       	sbc	r26, r1
    508e:	b1 09       	sbc	r27, r1
    5090:	b6 95       	lsr	r27
    5092:	a7 95       	ror	r26
    5094:	97 95       	ror	r25
    5096:	87 95       	ror	r24
    5098:	89 83       	std	Y+1, r24	; 0x01
    509a:	11 c0       	rjmp	.+34     	; 0x50be <twiCreate+0x76>
    509c:	c7 01       	movw	r24, r14
    509e:	b6 01       	movw	r22, r12
    50a0:	20 e8       	ldi	r18, 0x80	; 128
    50a2:	3a e1       	ldi	r19, 0x1A	; 26
    50a4:	46 e0       	ldi	r20, 0x06	; 6
    50a6:	50 e0       	ldi	r21, 0x00	; 0
    50a8:	15 d3       	rcall	.+1578   	; 0x56d4 <__udivmodsi4>
    50aa:	da 01       	movw	r26, r20
    50ac:	c9 01       	movw	r24, r18
    50ae:	40 97       	sbiw	r24, 0x10	; 16
    50b0:	a1 09       	sbc	r26, r1
    50b2:	b1 09       	sbc	r27, r1
    50b4:	b6 95       	lsr	r27
    50b6:	a7 95       	ror	r26
    50b8:	97 95       	ror	r25
    50ba:	87 95       	ror	r24
    50bc:	89 83       	std	Y+1, r24	; 0x01
    50be:	1b 83       	std	Y+3, r17	; 0x03
    50c0:	0a 83       	std	Y+2, r16	; 0x02
    50c2:	8c 2f       	mov	r24, r28
    50c4:	9d 2f       	mov	r25, r29
    50c6:	02 c0       	rjmp	.+4      	; 0x50cc <twiCreate+0x84>
    50c8:	80 e0       	ldi	r24, 0x00	; 0
    50ca:	90 e0       	ldi	r25, 0x00	; 0
    50cc:	df 91       	pop	r29
    50ce:	cf 91       	pop	r28
    50d0:	1f 91       	pop	r17
    50d2:	0f 91       	pop	r16
    50d4:	ff 90       	pop	r15
    50d6:	ef 90       	pop	r14
    50d8:	df 90       	pop	r13
    50da:	cf 90       	pop	r12
    50dc:	bf 90       	pop	r11
    50de:	af 90       	pop	r10
    50e0:	08 95       	ret

000050e2 <twiIsBusy>:
    50e2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    50e6:	81 70       	andi	r24, 0x01	; 1
    50e8:	08 95       	ret

000050ea <twiTransmit>:
    50ea:	ff 92       	push	r15
    50ec:	0f 93       	push	r16
    50ee:	1f 93       	push	r17
    50f0:	cf 93       	push	r28
    50f2:	df 93       	push	r29
    50f4:	00 97       	sbiw	r24, 0x00	; 0
    50f6:	d1 f1       	breq	.+116    	; 0x516c <twiTransmit+0x82>
    50f8:	4a 30       	cpi	r20, 0x0A	; 10
    50fa:	d0 f5       	brcc	.+116    	; 0x5170 <twiTransmit+0x86>
    50fc:	f4 2e       	mov	r15, r20
    50fe:	8b 01       	movw	r16, r22
    5100:	ec 01       	movw	r28, r24
    5102:	ef df       	rcall	.-34     	; 0x50e2 <twiIsBusy>
    5104:	81 11       	cpse	r24, r1
    5106:	36 c0       	rjmp	.+108    	; 0x5174 <twiTransmit+0x8a>
    5108:	80 91 6d 1a 	lds	r24, 0x1A6D	; 0x801a6d <_twiCurrentHandler>
    510c:	90 91 6e 1a 	lds	r25, 0x1A6E	; 0x801a6e <_twiCurrentHandler+0x1>
    5110:	c8 17       	cp	r28, r24
    5112:	d9 07       	cpc	r29, r25
    5114:	41 f0       	breq	.+16     	; 0x5126 <twiTransmit+0x3c>
    5116:	87 df       	rcall	.-242    	; 0x5026 <_initTwiInterface>
    5118:	89 81       	ldd	r24, Y+1	; 0x01
    511a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    511e:	d0 93 6e 1a 	sts	0x1A6E, r29	; 0x801a6e <_twiCurrentHandler+0x1>
    5122:	c0 93 6d 1a 	sts	0x1A6D, r28	; 0x801a6d <_twiCurrentHandler>
    5126:	81 e0       	ldi	r24, 0x01	; 1
    5128:	8f 0d       	add	r24, r15
    512a:	80 93 6f 1a 	sts	0x1A6F, r24	; 0x801a6f <_twiMessageLen>
    512e:	88 81       	ld	r24, Y
    5130:	88 0f       	add	r24, r24
    5132:	80 93 70 1a 	sts	0x1A70, r24	; 0x801a70 <_twiMessageBuffer>
    5136:	ff 20       	and	r15, r15
    5138:	89 f0       	breq	.+34     	; 0x515c <twiTransmit+0x72>
    513a:	f8 01       	movw	r30, r16
    513c:	a1 e7       	ldi	r26, 0x71	; 113
    513e:	ba e1       	ldi	r27, 0x1A	; 26
    5140:	4f ef       	ldi	r20, 0xFF	; 255
    5142:	4f 0d       	add	r20, r15
    5144:	64 2f       	mov	r22, r20
    5146:	70 e0       	ldi	r23, 0x00	; 0
    5148:	cb 01       	movw	r24, r22
    514a:	01 96       	adiw	r24, 0x01	; 1
    514c:	b8 01       	movw	r22, r16
    514e:	68 0f       	add	r22, r24
    5150:	79 1f       	adc	r23, r25
    5152:	81 91       	ld	r24, Z+
    5154:	8d 93       	st	X+, r24
    5156:	e6 17       	cp	r30, r22
    5158:	f7 07       	cpc	r31, r23
    515a:	d9 f7       	brne	.-10     	; 0x5152 <twiTransmit+0x68>
    515c:	88 ef       	ldi	r24, 0xF8	; 248
    515e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    5162:	85 ea       	ldi	r24, 0xA5	; 165
    5164:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5168:	84 e0       	ldi	r24, 0x04	; 4
    516a:	05 c0       	rjmp	.+10     	; 0x5176 <twiTransmit+0x8c>
    516c:	86 e0       	ldi	r24, 0x06	; 6
    516e:	03 c0       	rjmp	.+6      	; 0x5176 <twiTransmit+0x8c>
    5170:	87 e0       	ldi	r24, 0x07	; 7
    5172:	01 c0       	rjmp	.+2      	; 0x5176 <twiTransmit+0x8c>
    5174:	82 e0       	ldi	r24, 0x02	; 2
    5176:	df 91       	pop	r29
    5178:	cf 91       	pop	r28
    517a:	1f 91       	pop	r17
    517c:	0f 91       	pop	r16
    517e:	ff 90       	pop	r15
    5180:	08 95       	ret

00005182 <twiReceive>:
    5182:	1f 93       	push	r17
    5184:	cf 93       	push	r28
    5186:	df 93       	push	r29
    5188:	00 97       	sbiw	r24, 0x00	; 0
    518a:	29 f1       	breq	.+74     	; 0x51d6 <twiReceive+0x54>
    518c:	6b 30       	cpi	r22, 0x0B	; 11
    518e:	28 f5       	brcc	.+74     	; 0x51da <twiReceive+0x58>
    5190:	16 2f       	mov	r17, r22
    5192:	ec 01       	movw	r28, r24
    5194:	a6 df       	rcall	.-180    	; 0x50e2 <twiIsBusy>
    5196:	81 11       	cpse	r24, r1
    5198:	22 c0       	rjmp	.+68     	; 0x51de <twiReceive+0x5c>
    519a:	80 91 6d 1a 	lds	r24, 0x1A6D	; 0x801a6d <_twiCurrentHandler>
    519e:	90 91 6e 1a 	lds	r25, 0x1A6E	; 0x801a6e <_twiCurrentHandler+0x1>
    51a2:	c8 17       	cp	r28, r24
    51a4:	d9 07       	cpc	r29, r25
    51a6:	41 f0       	breq	.+16     	; 0x51b8 <twiReceive+0x36>
    51a8:	3e df       	rcall	.-388    	; 0x5026 <_initTwiInterface>
    51aa:	89 81       	ldd	r24, Y+1	; 0x01
    51ac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    51b0:	d0 93 6e 1a 	sts	0x1A6E, r29	; 0x801a6e <_twiCurrentHandler+0x1>
    51b4:	c0 93 6d 1a 	sts	0x1A6D, r28	; 0x801a6d <_twiCurrentHandler>
    51b8:	10 93 6f 1a 	sts	0x1A6F, r17	; 0x801a6f <_twiMessageLen>
    51bc:	88 81       	ld	r24, Y
    51be:	88 0f       	add	r24, r24
    51c0:	81 60       	ori	r24, 0x01	; 1
    51c2:	80 93 70 1a 	sts	0x1A70, r24	; 0x801a70 <_twiMessageBuffer>
    51c6:	88 ef       	ldi	r24, 0xF8	; 248
    51c8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    51cc:	85 ea       	ldi	r24, 0xA5	; 165
    51ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    51d2:	85 e0       	ldi	r24, 0x05	; 5
    51d4:	05 c0       	rjmp	.+10     	; 0x51e0 <twiReceive+0x5e>
    51d6:	86 e0       	ldi	r24, 0x06	; 6
    51d8:	03 c0       	rjmp	.+6      	; 0x51e0 <twiReceive+0x5e>
    51da:	87 e0       	ldi	r24, 0x07	; 7
    51dc:	01 c0       	rjmp	.+2      	; 0x51e0 <twiReceive+0x5e>
    51de:	82 e0       	ldi	r24, 0x02	; 2
    51e0:	df 91       	pop	r29
    51e2:	cf 91       	pop	r28
    51e4:	1f 91       	pop	r17
    51e6:	08 95       	ret

000051e8 <__vector_39>:
    51e8:	1f 92       	push	r1
    51ea:	0f 92       	push	r0
    51ec:	0f b6       	in	r0, 0x3f	; 63
    51ee:	0f 92       	push	r0
    51f0:	11 24       	eor	r1, r1
    51f2:	0b b6       	in	r0, 0x3b	; 59
    51f4:	0f 92       	push	r0
    51f6:	2f 93       	push	r18
    51f8:	3f 93       	push	r19
    51fa:	4f 93       	push	r20
    51fc:	5f 93       	push	r21
    51fe:	6f 93       	push	r22
    5200:	7f 93       	push	r23
    5202:	8f 93       	push	r24
    5204:	9f 93       	push	r25
    5206:	af 93       	push	r26
    5208:	bf 93       	push	r27
    520a:	ef 93       	push	r30
    520c:	ff 93       	push	r31
    520e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5212:	8e 2f       	mov	r24, r30
    5214:	90 e0       	ldi	r25, 0x00	; 0
    5216:	fc 01       	movw	r30, r24
    5218:	38 97       	sbiw	r30, 0x08	; 8
    521a:	e1 35       	cpi	r30, 0x51	; 81
    521c:	f1 05       	cpc	r31, r1
    521e:	08 f0       	brcs	.+2      	; 0x5222 <__vector_39+0x3a>
    5220:	75 c0       	rjmp	.+234    	; 0x530c <__vector_39+0x124>
    5222:	88 27       	eor	r24, r24
    5224:	e4 58       	subi	r30, 0x84	; 132
    5226:	ff 4f       	sbci	r31, 0xFF	; 255
    5228:	8f 4f       	sbci	r24, 0xFF	; 255
    522a:	76 c2       	rjmp	.+1260   	; 0x5718 <__tablejump2__>
    522c:	10 92 6c 1a 	sts	0x1A6C, r1	; 0x801a6c <_index.1885>
    5230:	e0 91 6c 1a 	lds	r30, 0x1A6C	; 0x801a6c <_index.1885>
    5234:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <_twiMessageLen>
    5238:	e8 17       	cp	r30, r24
    523a:	70 f4       	brcc	.+28     	; 0x5258 <__vector_39+0x70>
    523c:	81 e0       	ldi	r24, 0x01	; 1
    523e:	8e 0f       	add	r24, r30
    5240:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <_index.1885>
    5244:	f0 e0       	ldi	r31, 0x00	; 0
    5246:	e0 59       	subi	r30, 0x90	; 144
    5248:	f5 4e       	sbci	r31, 0xE5	; 229
    524a:	80 81       	ld	r24, Z
    524c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5250:	85 e8       	ldi	r24, 0x85	; 133
    5252:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5256:	72 c0       	rjmp	.+228    	; 0x533c <__vector_39+0x154>
    5258:	84 e9       	ldi	r24, 0x94	; 148
    525a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    525e:	80 91 6d 1a 	lds	r24, 0x1A6D	; 0x801a6d <_twiCurrentHandler>
    5262:	90 91 6e 1a 	lds	r25, 0x1A6E	; 0x801a6e <_twiCurrentHandler+0x1>
    5266:	dc 01       	movw	r26, r24
    5268:	12 96       	adiw	r26, 0x02	; 2
    526a:	ed 91       	ld	r30, X+
    526c:	fc 91       	ld	r31, X
    526e:	13 97       	sbiw	r26, 0x03	; 3
    5270:	30 97       	sbiw	r30, 0x00	; 0
    5272:	09 f4       	brne	.+2      	; 0x5276 <__vector_39+0x8e>
    5274:	63 c0       	rjmp	.+198    	; 0x533c <__vector_39+0x154>
    5276:	20 e0       	ldi	r18, 0x00	; 0
    5278:	40 e0       	ldi	r20, 0x00	; 0
    527a:	50 e0       	ldi	r21, 0x00	; 0
    527c:	64 e0       	ldi	r22, 0x04	; 4
    527e:	19 95       	eicall
    5280:	5d c0       	rjmp	.+186    	; 0x533c <__vector_39+0x154>
    5282:	e0 91 6c 1a 	lds	r30, 0x1A6C	; 0x801a6c <_index.1885>
    5286:	81 e0       	ldi	r24, 0x01	; 1
    5288:	8e 0f       	add	r24, r30
    528a:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <_index.1885>
    528e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5292:	f0 e0       	ldi	r31, 0x00	; 0
    5294:	e0 59       	subi	r30, 0x90	; 144
    5296:	f5 4e       	sbci	r31, 0xE5	; 229
    5298:	80 83       	st	Z, r24
    529a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    529e:	80 34       	cpi	r24, 0x40	; 64
    52a0:	11 f4       	brne	.+4      	; 0x52a6 <__vector_39+0xbe>
    52a2:	10 92 6c 1a 	sts	0x1A6C, r1	; 0x801a6c <_index.1885>
    52a6:	20 91 6c 1a 	lds	r18, 0x1A6C	; 0x801a6c <_index.1885>
    52aa:	30 e0       	ldi	r19, 0x00	; 0
    52ac:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <_twiMessageLen>
    52b0:	90 e0       	ldi	r25, 0x00	; 0
    52b2:	01 97       	sbiw	r24, 0x01	; 1
    52b4:	28 17       	cp	r18, r24
    52b6:	39 07       	cpc	r19, r25
    52b8:	24 f4       	brge	.+8      	; 0x52c2 <__vector_39+0xda>
    52ba:	85 ec       	ldi	r24, 0xC5	; 197
    52bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52c0:	3d c0       	rjmp	.+122    	; 0x533c <__vector_39+0x154>
    52c2:	85 e8       	ldi	r24, 0x85	; 133
    52c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52c8:	39 c0       	rjmp	.+114    	; 0x533c <__vector_39+0x154>
    52ca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    52ce:	e0 91 6c 1a 	lds	r30, 0x1A6C	; 0x801a6c <_index.1885>
    52d2:	f0 e0       	ldi	r31, 0x00	; 0
    52d4:	e0 59       	subi	r30, 0x90	; 144
    52d6:	f5 4e       	sbci	r31, 0xE5	; 229
    52d8:	80 83       	st	Z, r24
    52da:	84 e9       	ldi	r24, 0x94	; 148
    52dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    52e0:	80 91 6d 1a 	lds	r24, 0x1A6D	; 0x801a6d <_twiCurrentHandler>
    52e4:	90 91 6e 1a 	lds	r25, 0x1A6E	; 0x801a6e <_twiCurrentHandler+0x1>
    52e8:	dc 01       	movw	r26, r24
    52ea:	12 96       	adiw	r26, 0x02	; 2
    52ec:	ed 91       	ld	r30, X+
    52ee:	fc 91       	ld	r31, X
    52f0:	13 97       	sbiw	r26, 0x03	; 3
    52f2:	30 97       	sbiw	r30, 0x00	; 0
    52f4:	19 f1       	breq	.+70     	; 0x533c <__vector_39+0x154>
    52f6:	20 91 6f 1a 	lds	r18, 0x1A6F	; 0x801a6f <_twiMessageLen>
    52fa:	40 e7       	ldi	r20, 0x70	; 112
    52fc:	5a e1       	ldi	r21, 0x1A	; 26
    52fe:	65 e0       	ldi	r22, 0x05	; 5
    5300:	19 95       	eicall
    5302:	1c c0       	rjmp	.+56     	; 0x533c <__vector_39+0x154>
    5304:	85 ea       	ldi	r24, 0xA5	; 165
    5306:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    530a:	18 c0       	rjmp	.+48     	; 0x533c <__vector_39+0x154>
    530c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5310:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    5314:	84 e0       	ldi	r24, 0x04	; 4
    5316:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    531a:	80 91 6d 1a 	lds	r24, 0x1A6D	; 0x801a6d <_twiCurrentHandler>
    531e:	90 91 6e 1a 	lds	r25, 0x1A6E	; 0x801a6e <_twiCurrentHandler+0x1>
    5322:	dc 01       	movw	r26, r24
    5324:	12 96       	adiw	r26, 0x02	; 2
    5326:	ed 91       	ld	r30, X+
    5328:	fc 91       	ld	r31, X
    532a:	13 97       	sbiw	r26, 0x03	; 3
    532c:	30 97       	sbiw	r30, 0x00	; 0
    532e:	31 f0       	breq	.+12     	; 0x533c <__vector_39+0x154>
    5330:	20 e0       	ldi	r18, 0x00	; 0
    5332:	40 e0       	ldi	r20, 0x00	; 0
    5334:	50 e0       	ldi	r21, 0x00	; 0
    5336:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    533a:	19 95       	eicall
    533c:	ff 91       	pop	r31
    533e:	ef 91       	pop	r30
    5340:	bf 91       	pop	r27
    5342:	af 91       	pop	r26
    5344:	9f 91       	pop	r25
    5346:	8f 91       	pop	r24
    5348:	7f 91       	pop	r23
    534a:	6f 91       	pop	r22
    534c:	5f 91       	pop	r21
    534e:	4f 91       	pop	r20
    5350:	3f 91       	pop	r19
    5352:	2f 91       	pop	r18
    5354:	0f 90       	pop	r0
    5356:	0b be       	out	0x3b, r0	; 59
    5358:	0f 90       	pop	r0
    535a:	0f be       	out	0x3f, r0	; 63
    535c:	0f 90       	pop	r0
    535e:	1f 90       	pop	r1
    5360:	18 95       	reti

00005362 <fifo_init>:
    5362:	fc 01       	movw	r30, r24
    5364:	41 11       	cpse	r20, r1
    5366:	01 c0       	rjmp	.+2      	; 0x536a <fifo_init+0x8>
    5368:	1a d3       	rcall	.+1588   	; 0x599e <abort>
    536a:	84 2f       	mov	r24, r20
    536c:	90 e0       	ldi	r25, 0x00	; 0
    536e:	9c 01       	movw	r18, r24
    5370:	21 50       	subi	r18, 0x01	; 1
    5372:	31 09       	sbc	r19, r1
    5374:	82 23       	and	r24, r18
    5376:	93 23       	and	r25, r19
    5378:	89 2b       	or	r24, r25
    537a:	09 f0       	breq	.+2      	; 0x537e <fifo_init+0x1c>
    537c:	10 d3       	rcall	.+1568   	; 0x599e <abort>
    537e:	41 38       	cpi	r20, 0x81	; 129
    5380:	08 f0       	brcs	.+2      	; 0x5384 <fifo_init+0x22>
    5382:	0d d3       	rcall	.+1562   	; 0x599e <abort>
    5384:	12 82       	std	Z+2, r1	; 0x02
    5386:	13 82       	std	Z+3, r1	; 0x03
    5388:	44 83       	std	Z+4, r20	; 0x04
    538a:	44 0f       	add	r20, r20
    538c:	41 50       	subi	r20, 0x01	; 1
    538e:	45 83       	std	Z+5, r20	; 0x05
    5390:	71 83       	std	Z+1, r23	; 0x01
    5392:	60 83       	st	Z, r22
    5394:	80 e0       	ldi	r24, 0x00	; 0
    5396:	90 e0       	ldi	r25, 0x00	; 0
    5398:	08 95       	ret

0000539a <__subsf3>:
    539a:	50 58       	subi	r21, 0x80	; 128

0000539c <__addsf3>:
    539c:	bb 27       	eor	r27, r27
    539e:	aa 27       	eor	r26, r26
    53a0:	0e d0       	rcall	.+28     	; 0x53be <__addsf3x>
    53a2:	21 c1       	rjmp	.+578    	; 0x55e6 <__fp_round>
    53a4:	12 d1       	rcall	.+548    	; 0x55ca <__fp_pscA>
    53a6:	30 f0       	brcs	.+12     	; 0x53b4 <__addsf3+0x18>
    53a8:	17 d1       	rcall	.+558    	; 0x55d8 <__fp_pscB>
    53aa:	20 f0       	brcs	.+8      	; 0x53b4 <__addsf3+0x18>
    53ac:	31 f4       	brne	.+12     	; 0x53ba <__addsf3+0x1e>
    53ae:	9f 3f       	cpi	r25, 0xFF	; 255
    53b0:	11 f4       	brne	.+4      	; 0x53b6 <__addsf3+0x1a>
    53b2:	1e f4       	brtc	.+6      	; 0x53ba <__addsf3+0x1e>
    53b4:	07 c1       	rjmp	.+526    	; 0x55c4 <__fp_nan>
    53b6:	0e f4       	brtc	.+2      	; 0x53ba <__addsf3+0x1e>
    53b8:	e0 95       	com	r30
    53ba:	e7 fb       	bst	r30, 7
    53bc:	fd c0       	rjmp	.+506    	; 0x55b8 <__fp_inf>

000053be <__addsf3x>:
    53be:	e9 2f       	mov	r30, r25
    53c0:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <__fp_split3>
    53c4:	78 f3       	brcs	.-34     	; 0x53a4 <__addsf3+0x8>
    53c6:	ba 17       	cp	r27, r26
    53c8:	62 07       	cpc	r22, r18
    53ca:	73 07       	cpc	r23, r19
    53cc:	84 07       	cpc	r24, r20
    53ce:	95 07       	cpc	r25, r21
    53d0:	20 f0       	brcs	.+8      	; 0x53da <__addsf3x+0x1c>
    53d2:	79 f4       	brne	.+30     	; 0x53f2 <__addsf3x+0x34>
    53d4:	a6 f5       	brtc	.+104    	; 0x543e <__addsf3x+0x80>
    53d6:	0c 94 73 1c 	jmp	0x38e6	; 0x38e6 <__fp_zero>
    53da:	0e f4       	brtc	.+2      	; 0x53de <__addsf3x+0x20>
    53dc:	e0 95       	com	r30
    53de:	0b 2e       	mov	r0, r27
    53e0:	ba 2f       	mov	r27, r26
    53e2:	a0 2d       	mov	r26, r0
    53e4:	0b 01       	movw	r0, r22
    53e6:	b9 01       	movw	r22, r18
    53e8:	90 01       	movw	r18, r0
    53ea:	0c 01       	movw	r0, r24
    53ec:	ca 01       	movw	r24, r20
    53ee:	a0 01       	movw	r20, r0
    53f0:	11 24       	eor	r1, r1
    53f2:	ff 27       	eor	r31, r31
    53f4:	59 1b       	sub	r21, r25
    53f6:	99 f0       	breq	.+38     	; 0x541e <__addsf3x+0x60>
    53f8:	59 3f       	cpi	r21, 0xF9	; 249
    53fa:	50 f4       	brcc	.+20     	; 0x5410 <__addsf3x+0x52>
    53fc:	50 3e       	cpi	r21, 0xE0	; 224
    53fe:	68 f1       	brcs	.+90     	; 0x545a <__addsf3x+0x9c>
    5400:	1a 16       	cp	r1, r26
    5402:	f0 40       	sbci	r31, 0x00	; 0
    5404:	a2 2f       	mov	r26, r18
    5406:	23 2f       	mov	r18, r19
    5408:	34 2f       	mov	r19, r20
    540a:	44 27       	eor	r20, r20
    540c:	58 5f       	subi	r21, 0xF8	; 248
    540e:	f3 cf       	rjmp	.-26     	; 0x53f6 <__addsf3x+0x38>
    5410:	46 95       	lsr	r20
    5412:	37 95       	ror	r19
    5414:	27 95       	ror	r18
    5416:	a7 95       	ror	r26
    5418:	f0 40       	sbci	r31, 0x00	; 0
    541a:	53 95       	inc	r21
    541c:	c9 f7       	brne	.-14     	; 0x5410 <__addsf3x+0x52>
    541e:	7e f4       	brtc	.+30     	; 0x543e <__addsf3x+0x80>
    5420:	1f 16       	cp	r1, r31
    5422:	ba 0b       	sbc	r27, r26
    5424:	62 0b       	sbc	r22, r18
    5426:	73 0b       	sbc	r23, r19
    5428:	84 0b       	sbc	r24, r20
    542a:	ba f0       	brmi	.+46     	; 0x545a <__addsf3x+0x9c>
    542c:	91 50       	subi	r25, 0x01	; 1
    542e:	a1 f0       	breq	.+40     	; 0x5458 <__addsf3x+0x9a>
    5430:	ff 0f       	add	r31, r31
    5432:	bb 1f       	adc	r27, r27
    5434:	66 1f       	adc	r22, r22
    5436:	77 1f       	adc	r23, r23
    5438:	88 1f       	adc	r24, r24
    543a:	c2 f7       	brpl	.-16     	; 0x542c <__addsf3x+0x6e>
    543c:	0e c0       	rjmp	.+28     	; 0x545a <__addsf3x+0x9c>
    543e:	ba 0f       	add	r27, r26
    5440:	62 1f       	adc	r22, r18
    5442:	73 1f       	adc	r23, r19
    5444:	84 1f       	adc	r24, r20
    5446:	48 f4       	brcc	.+18     	; 0x545a <__addsf3x+0x9c>
    5448:	87 95       	ror	r24
    544a:	77 95       	ror	r23
    544c:	67 95       	ror	r22
    544e:	b7 95       	ror	r27
    5450:	f7 95       	ror	r31
    5452:	9e 3f       	cpi	r25, 0xFE	; 254
    5454:	08 f0       	brcs	.+2      	; 0x5458 <__addsf3x+0x9a>
    5456:	b1 cf       	rjmp	.-158    	; 0x53ba <__addsf3+0x1e>
    5458:	93 95       	inc	r25
    545a:	88 0f       	add	r24, r24
    545c:	08 f0       	brcs	.+2      	; 0x5460 <__addsf3x+0xa2>
    545e:	99 27       	eor	r25, r25
    5460:	ee 0f       	add	r30, r30
    5462:	97 95       	ror	r25
    5464:	87 95       	ror	r24
    5466:	08 95       	ret

00005468 <__divsf3>:
    5468:	0d d0       	rcall	.+26     	; 0x5484 <__divsf3x>
    546a:	bd c0       	rjmp	.+378    	; 0x55e6 <__fp_round>
    546c:	b5 d0       	rcall	.+362    	; 0x55d8 <__fp_pscB>
    546e:	48 f0       	brcs	.+18     	; 0x5482 <__divsf3+0x1a>
    5470:	ac d0       	rcall	.+344    	; 0x55ca <__fp_pscA>
    5472:	38 f0       	brcs	.+14     	; 0x5482 <__divsf3+0x1a>
    5474:	21 f4       	brne	.+8      	; 0x547e <__divsf3+0x16>
    5476:	5f 3f       	cpi	r21, 0xFF	; 255
    5478:	21 f0       	breq	.+8      	; 0x5482 <__divsf3+0x1a>
    547a:	9e c0       	rjmp	.+316    	; 0x55b8 <__fp_inf>
    547c:	51 11       	cpse	r21, r1
    547e:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__fp_szero>
    5482:	a0 c0       	rjmp	.+320    	; 0x55c4 <__fp_nan>

00005484 <__divsf3x>:
    5484:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <__fp_split3>
    5488:	88 f3       	brcs	.-30     	; 0x546c <__divsf3+0x4>

0000548a <__divsf3_pse>:
    548a:	99 23       	and	r25, r25
    548c:	b9 f3       	breq	.-18     	; 0x547c <__divsf3+0x14>
    548e:	55 23       	and	r21, r21
    5490:	a1 f3       	breq	.-24     	; 0x547a <__divsf3+0x12>
    5492:	95 1b       	sub	r25, r21
    5494:	55 0b       	sbc	r21, r21
    5496:	bb 27       	eor	r27, r27
    5498:	aa 27       	eor	r26, r26
    549a:	62 17       	cp	r22, r18
    549c:	73 07       	cpc	r23, r19
    549e:	84 07       	cpc	r24, r20
    54a0:	38 f0       	brcs	.+14     	; 0x54b0 <__divsf3_pse+0x26>
    54a2:	9f 5f       	subi	r25, 0xFF	; 255
    54a4:	5f 4f       	sbci	r21, 0xFF	; 255
    54a6:	22 0f       	add	r18, r18
    54a8:	33 1f       	adc	r19, r19
    54aa:	44 1f       	adc	r20, r20
    54ac:	aa 1f       	adc	r26, r26
    54ae:	a9 f3       	breq	.-22     	; 0x549a <__divsf3_pse+0x10>
    54b0:	34 d0       	rcall	.+104    	; 0x551a <__divsf3_pse+0x90>
    54b2:	0e 2e       	mov	r0, r30
    54b4:	3a f0       	brmi	.+14     	; 0x54c4 <__divsf3_pse+0x3a>
    54b6:	e0 e8       	ldi	r30, 0x80	; 128
    54b8:	31 d0       	rcall	.+98     	; 0x551c <__divsf3_pse+0x92>
    54ba:	91 50       	subi	r25, 0x01	; 1
    54bc:	50 40       	sbci	r21, 0x00	; 0
    54be:	e6 95       	lsr	r30
    54c0:	00 1c       	adc	r0, r0
    54c2:	ca f7       	brpl	.-14     	; 0x54b6 <__divsf3_pse+0x2c>
    54c4:	2a d0       	rcall	.+84     	; 0x551a <__divsf3_pse+0x90>
    54c6:	fe 2f       	mov	r31, r30
    54c8:	28 d0       	rcall	.+80     	; 0x551a <__divsf3_pse+0x90>
    54ca:	66 0f       	add	r22, r22
    54cc:	77 1f       	adc	r23, r23
    54ce:	88 1f       	adc	r24, r24
    54d0:	bb 1f       	adc	r27, r27
    54d2:	26 17       	cp	r18, r22
    54d4:	37 07       	cpc	r19, r23
    54d6:	48 07       	cpc	r20, r24
    54d8:	ab 07       	cpc	r26, r27
    54da:	b0 e8       	ldi	r27, 0x80	; 128
    54dc:	09 f0       	breq	.+2      	; 0x54e0 <__divsf3_pse+0x56>
    54de:	bb 0b       	sbc	r27, r27
    54e0:	80 2d       	mov	r24, r0
    54e2:	bf 01       	movw	r22, r30
    54e4:	ff 27       	eor	r31, r31
    54e6:	93 58       	subi	r25, 0x83	; 131
    54e8:	5f 4f       	sbci	r21, 0xFF	; 255
    54ea:	32 f0       	brmi	.+12     	; 0x54f8 <__divsf3_pse+0x6e>
    54ec:	9e 3f       	cpi	r25, 0xFE	; 254
    54ee:	51 05       	cpc	r21, r1
    54f0:	70 f0       	brcs	.+28     	; 0x550e <__divsf3_pse+0x84>
    54f2:	62 c0       	rjmp	.+196    	; 0x55b8 <__fp_inf>
    54f4:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__fp_szero>
    54f8:	5f 3f       	cpi	r21, 0xFF	; 255
    54fa:	e4 f3       	brlt	.-8      	; 0x54f4 <__divsf3_pse+0x6a>
    54fc:	98 3e       	cpi	r25, 0xE8	; 232
    54fe:	d4 f3       	brlt	.-12     	; 0x54f4 <__divsf3_pse+0x6a>
    5500:	86 95       	lsr	r24
    5502:	77 95       	ror	r23
    5504:	67 95       	ror	r22
    5506:	b7 95       	ror	r27
    5508:	f7 95       	ror	r31
    550a:	9f 5f       	subi	r25, 0xFF	; 255
    550c:	c9 f7       	brne	.-14     	; 0x5500 <__divsf3_pse+0x76>
    550e:	88 0f       	add	r24, r24
    5510:	91 1d       	adc	r25, r1
    5512:	96 95       	lsr	r25
    5514:	87 95       	ror	r24
    5516:	97 f9       	bld	r25, 7
    5518:	08 95       	ret
    551a:	e1 e0       	ldi	r30, 0x01	; 1
    551c:	66 0f       	add	r22, r22
    551e:	77 1f       	adc	r23, r23
    5520:	88 1f       	adc	r24, r24
    5522:	bb 1f       	adc	r27, r27
    5524:	62 17       	cp	r22, r18
    5526:	73 07       	cpc	r23, r19
    5528:	84 07       	cpc	r24, r20
    552a:	ba 07       	cpc	r27, r26
    552c:	20 f0       	brcs	.+8      	; 0x5536 <__divsf3_pse+0xac>
    552e:	62 1b       	sub	r22, r18
    5530:	73 0b       	sbc	r23, r19
    5532:	84 0b       	sbc	r24, r20
    5534:	ba 0b       	sbc	r27, r26
    5536:	ee 1f       	adc	r30, r30
    5538:	88 f7       	brcc	.-30     	; 0x551c <__divsf3_pse+0x92>
    553a:	e0 95       	com	r30
    553c:	08 95       	ret

0000553e <__floatunsisf>:
    553e:	e8 94       	clt
    5540:	09 c0       	rjmp	.+18     	; 0x5554 <__floatsisf+0x12>

00005542 <__floatsisf>:
    5542:	97 fb       	bst	r25, 7
    5544:	3e f4       	brtc	.+14     	; 0x5554 <__floatsisf+0x12>
    5546:	90 95       	com	r25
    5548:	80 95       	com	r24
    554a:	70 95       	com	r23
    554c:	61 95       	neg	r22
    554e:	7f 4f       	sbci	r23, 0xFF	; 255
    5550:	8f 4f       	sbci	r24, 0xFF	; 255
    5552:	9f 4f       	sbci	r25, 0xFF	; 255
    5554:	99 23       	and	r25, r25
    5556:	a9 f0       	breq	.+42     	; 0x5582 <__floatsisf+0x40>
    5558:	f9 2f       	mov	r31, r25
    555a:	96 e9       	ldi	r25, 0x96	; 150
    555c:	bb 27       	eor	r27, r27
    555e:	93 95       	inc	r25
    5560:	f6 95       	lsr	r31
    5562:	87 95       	ror	r24
    5564:	77 95       	ror	r23
    5566:	67 95       	ror	r22
    5568:	b7 95       	ror	r27
    556a:	f1 11       	cpse	r31, r1
    556c:	f8 cf       	rjmp	.-16     	; 0x555e <__floatsisf+0x1c>
    556e:	fa f4       	brpl	.+62     	; 0x55ae <__floatsisf+0x6c>
    5570:	bb 0f       	add	r27, r27
    5572:	11 f4       	brne	.+4      	; 0x5578 <__floatsisf+0x36>
    5574:	60 ff       	sbrs	r22, 0
    5576:	1b c0       	rjmp	.+54     	; 0x55ae <__floatsisf+0x6c>
    5578:	6f 5f       	subi	r22, 0xFF	; 255
    557a:	7f 4f       	sbci	r23, 0xFF	; 255
    557c:	8f 4f       	sbci	r24, 0xFF	; 255
    557e:	9f 4f       	sbci	r25, 0xFF	; 255
    5580:	16 c0       	rjmp	.+44     	; 0x55ae <__floatsisf+0x6c>
    5582:	88 23       	and	r24, r24
    5584:	11 f0       	breq	.+4      	; 0x558a <__floatsisf+0x48>
    5586:	96 e9       	ldi	r25, 0x96	; 150
    5588:	11 c0       	rjmp	.+34     	; 0x55ac <__floatsisf+0x6a>
    558a:	77 23       	and	r23, r23
    558c:	21 f0       	breq	.+8      	; 0x5596 <__floatsisf+0x54>
    558e:	9e e8       	ldi	r25, 0x8E	; 142
    5590:	87 2f       	mov	r24, r23
    5592:	76 2f       	mov	r23, r22
    5594:	05 c0       	rjmp	.+10     	; 0x55a0 <__floatsisf+0x5e>
    5596:	66 23       	and	r22, r22
    5598:	71 f0       	breq	.+28     	; 0x55b6 <__floatsisf+0x74>
    559a:	96 e8       	ldi	r25, 0x86	; 134
    559c:	86 2f       	mov	r24, r22
    559e:	70 e0       	ldi	r23, 0x00	; 0
    55a0:	60 e0       	ldi	r22, 0x00	; 0
    55a2:	2a f0       	brmi	.+10     	; 0x55ae <__floatsisf+0x6c>
    55a4:	9a 95       	dec	r25
    55a6:	66 0f       	add	r22, r22
    55a8:	77 1f       	adc	r23, r23
    55aa:	88 1f       	adc	r24, r24
    55ac:	da f7       	brpl	.-10     	; 0x55a4 <__floatsisf+0x62>
    55ae:	88 0f       	add	r24, r24
    55b0:	96 95       	lsr	r25
    55b2:	87 95       	ror	r24
    55b4:	97 f9       	bld	r25, 7
    55b6:	08 95       	ret

000055b8 <__fp_inf>:
    55b8:	97 f9       	bld	r25, 7
    55ba:	9f 67       	ori	r25, 0x7F	; 127
    55bc:	80 e8       	ldi	r24, 0x80	; 128
    55be:	70 e0       	ldi	r23, 0x00	; 0
    55c0:	60 e0       	ldi	r22, 0x00	; 0
    55c2:	08 95       	ret

000055c4 <__fp_nan>:
    55c4:	9f ef       	ldi	r25, 0xFF	; 255
    55c6:	80 ec       	ldi	r24, 0xC0	; 192
    55c8:	08 95       	ret

000055ca <__fp_pscA>:
    55ca:	00 24       	eor	r0, r0
    55cc:	0a 94       	dec	r0
    55ce:	16 16       	cp	r1, r22
    55d0:	17 06       	cpc	r1, r23
    55d2:	18 06       	cpc	r1, r24
    55d4:	09 06       	cpc	r0, r25
    55d6:	08 95       	ret

000055d8 <__fp_pscB>:
    55d8:	00 24       	eor	r0, r0
    55da:	0a 94       	dec	r0
    55dc:	12 16       	cp	r1, r18
    55de:	13 06       	cpc	r1, r19
    55e0:	14 06       	cpc	r1, r20
    55e2:	05 06       	cpc	r0, r21
    55e4:	08 95       	ret

000055e6 <__fp_round>:
    55e6:	09 2e       	mov	r0, r25
    55e8:	03 94       	inc	r0
    55ea:	00 0c       	add	r0, r0
    55ec:	11 f4       	brne	.+4      	; 0x55f2 <__fp_round+0xc>
    55ee:	88 23       	and	r24, r24
    55f0:	52 f0       	brmi	.+20     	; 0x5606 <__fp_round+0x20>
    55f2:	bb 0f       	add	r27, r27
    55f4:	40 f4       	brcc	.+16     	; 0x5606 <__fp_round+0x20>
    55f6:	bf 2b       	or	r27, r31
    55f8:	11 f4       	brne	.+4      	; 0x55fe <__fp_round+0x18>
    55fa:	60 ff       	sbrs	r22, 0
    55fc:	04 c0       	rjmp	.+8      	; 0x5606 <__fp_round+0x20>
    55fe:	6f 5f       	subi	r22, 0xFF	; 255
    5600:	7f 4f       	sbci	r23, 0xFF	; 255
    5602:	8f 4f       	sbci	r24, 0xFF	; 255
    5604:	9f 4f       	sbci	r25, 0xFF	; 255
    5606:	08 95       	ret

00005608 <__mulsf3>:
    5608:	0c d0       	rcall	.+24     	; 0x5622 <__mulsf3x>
    560a:	ed cf       	rjmp	.-38     	; 0x55e6 <__fp_round>
    560c:	de df       	rcall	.-68     	; 0x55ca <__fp_pscA>
    560e:	28 f0       	brcs	.+10     	; 0x561a <__mulsf3+0x12>
    5610:	e3 df       	rcall	.-58     	; 0x55d8 <__fp_pscB>
    5612:	18 f0       	brcs	.+6      	; 0x561a <__mulsf3+0x12>
    5614:	95 23       	and	r25, r21
    5616:	09 f0       	breq	.+2      	; 0x561a <__mulsf3+0x12>
    5618:	cf cf       	rjmp	.-98     	; 0x55b8 <__fp_inf>
    561a:	d4 cf       	rjmp	.-88     	; 0x55c4 <__fp_nan>
    561c:	11 24       	eor	r1, r1
    561e:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__fp_szero>

00005622 <__mulsf3x>:
    5622:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <__fp_split3>
    5626:	90 f3       	brcs	.-28     	; 0x560c <__mulsf3+0x4>

00005628 <__mulsf3_pse>:
    5628:	95 9f       	mul	r25, r21
    562a:	c1 f3       	breq	.-16     	; 0x561c <__mulsf3+0x14>
    562c:	95 0f       	add	r25, r21
    562e:	50 e0       	ldi	r21, 0x00	; 0
    5630:	55 1f       	adc	r21, r21
    5632:	62 9f       	mul	r22, r18
    5634:	f0 01       	movw	r30, r0
    5636:	72 9f       	mul	r23, r18
    5638:	bb 27       	eor	r27, r27
    563a:	f0 0d       	add	r31, r0
    563c:	b1 1d       	adc	r27, r1
    563e:	63 9f       	mul	r22, r19
    5640:	aa 27       	eor	r26, r26
    5642:	f0 0d       	add	r31, r0
    5644:	b1 1d       	adc	r27, r1
    5646:	aa 1f       	adc	r26, r26
    5648:	64 9f       	mul	r22, r20
    564a:	66 27       	eor	r22, r22
    564c:	b0 0d       	add	r27, r0
    564e:	a1 1d       	adc	r26, r1
    5650:	66 1f       	adc	r22, r22
    5652:	82 9f       	mul	r24, r18
    5654:	22 27       	eor	r18, r18
    5656:	b0 0d       	add	r27, r0
    5658:	a1 1d       	adc	r26, r1
    565a:	62 1f       	adc	r22, r18
    565c:	73 9f       	mul	r23, r19
    565e:	b0 0d       	add	r27, r0
    5660:	a1 1d       	adc	r26, r1
    5662:	62 1f       	adc	r22, r18
    5664:	83 9f       	mul	r24, r19
    5666:	a0 0d       	add	r26, r0
    5668:	61 1d       	adc	r22, r1
    566a:	22 1f       	adc	r18, r18
    566c:	74 9f       	mul	r23, r20
    566e:	33 27       	eor	r19, r19
    5670:	a0 0d       	add	r26, r0
    5672:	61 1d       	adc	r22, r1
    5674:	23 1f       	adc	r18, r19
    5676:	84 9f       	mul	r24, r20
    5678:	60 0d       	add	r22, r0
    567a:	21 1d       	adc	r18, r1
    567c:	82 2f       	mov	r24, r18
    567e:	76 2f       	mov	r23, r22
    5680:	6a 2f       	mov	r22, r26
    5682:	11 24       	eor	r1, r1
    5684:	9f 57       	subi	r25, 0x7F	; 127
    5686:	50 40       	sbci	r21, 0x00	; 0
    5688:	92 f0       	brmi	.+36     	; 0x56ae <__mulsf3_pse+0x86>
    568a:	e9 f0       	breq	.+58     	; 0x56c6 <__mulsf3_pse+0x9e>
    568c:	88 23       	and	r24, r24
    568e:	4a f0       	brmi	.+18     	; 0x56a2 <__mulsf3_pse+0x7a>
    5690:	ee 0f       	add	r30, r30
    5692:	ff 1f       	adc	r31, r31
    5694:	bb 1f       	adc	r27, r27
    5696:	66 1f       	adc	r22, r22
    5698:	77 1f       	adc	r23, r23
    569a:	88 1f       	adc	r24, r24
    569c:	91 50       	subi	r25, 0x01	; 1
    569e:	50 40       	sbci	r21, 0x00	; 0
    56a0:	a9 f7       	brne	.-22     	; 0x568c <__mulsf3_pse+0x64>
    56a2:	9e 3f       	cpi	r25, 0xFE	; 254
    56a4:	51 05       	cpc	r21, r1
    56a6:	78 f0       	brcs	.+30     	; 0x56c6 <__mulsf3_pse+0x9e>
    56a8:	87 cf       	rjmp	.-242    	; 0x55b8 <__fp_inf>
    56aa:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__fp_szero>
    56ae:	5f 3f       	cpi	r21, 0xFF	; 255
    56b0:	e4 f3       	brlt	.-8      	; 0x56aa <__mulsf3_pse+0x82>
    56b2:	98 3e       	cpi	r25, 0xE8	; 232
    56b4:	d4 f3       	brlt	.-12     	; 0x56aa <__mulsf3_pse+0x82>
    56b6:	86 95       	lsr	r24
    56b8:	77 95       	ror	r23
    56ba:	67 95       	ror	r22
    56bc:	b7 95       	ror	r27
    56be:	f7 95       	ror	r31
    56c0:	e7 95       	ror	r30
    56c2:	9f 5f       	subi	r25, 0xFF	; 255
    56c4:	c1 f7       	brne	.-16     	; 0x56b6 <__mulsf3_pse+0x8e>
    56c6:	fe 2b       	or	r31, r30
    56c8:	88 0f       	add	r24, r24
    56ca:	91 1d       	adc	r25, r1
    56cc:	96 95       	lsr	r25
    56ce:	87 95       	ror	r24
    56d0:	97 f9       	bld	r25, 7
    56d2:	08 95       	ret

000056d4 <__udivmodsi4>:
    56d4:	a1 e2       	ldi	r26, 0x21	; 33
    56d6:	1a 2e       	mov	r1, r26
    56d8:	aa 1b       	sub	r26, r26
    56da:	bb 1b       	sub	r27, r27
    56dc:	fd 01       	movw	r30, r26
    56de:	0d c0       	rjmp	.+26     	; 0x56fa <__udivmodsi4_ep>

000056e0 <__udivmodsi4_loop>:
    56e0:	aa 1f       	adc	r26, r26
    56e2:	bb 1f       	adc	r27, r27
    56e4:	ee 1f       	adc	r30, r30
    56e6:	ff 1f       	adc	r31, r31
    56e8:	a2 17       	cp	r26, r18
    56ea:	b3 07       	cpc	r27, r19
    56ec:	e4 07       	cpc	r30, r20
    56ee:	f5 07       	cpc	r31, r21
    56f0:	20 f0       	brcs	.+8      	; 0x56fa <__udivmodsi4_ep>
    56f2:	a2 1b       	sub	r26, r18
    56f4:	b3 0b       	sbc	r27, r19
    56f6:	e4 0b       	sbc	r30, r20
    56f8:	f5 0b       	sbc	r31, r21

000056fa <__udivmodsi4_ep>:
    56fa:	66 1f       	adc	r22, r22
    56fc:	77 1f       	adc	r23, r23
    56fe:	88 1f       	adc	r24, r24
    5700:	99 1f       	adc	r25, r25
    5702:	1a 94       	dec	r1
    5704:	69 f7       	brne	.-38     	; 0x56e0 <__udivmodsi4_loop>
    5706:	60 95       	com	r22
    5708:	70 95       	com	r23
    570a:	80 95       	com	r24
    570c:	90 95       	com	r25
    570e:	9b 01       	movw	r18, r22
    5710:	ac 01       	movw	r20, r24
    5712:	bd 01       	movw	r22, r26
    5714:	cf 01       	movw	r24, r30
    5716:	08 95       	ret

00005718 <__tablejump2__>:
    5718:	ee 0f       	add	r30, r30
    571a:	ff 1f       	adc	r31, r31
    571c:	88 1f       	adc	r24, r24
    571e:	8b bf       	out	0x3b, r24	; 59
    5720:	07 90       	elpm	r0, Z+
    5722:	f6 91       	elpm	r31, Z
    5724:	e0 2d       	mov	r30, r0
    5726:	19 94       	eijmp

00005728 <calloc>:
    5728:	0f 93       	push	r16
    572a:	1f 93       	push	r17
    572c:	cf 93       	push	r28
    572e:	df 93       	push	r29
    5730:	86 9f       	mul	r24, r22
    5732:	80 01       	movw	r16, r0
    5734:	87 9f       	mul	r24, r23
    5736:	10 0d       	add	r17, r0
    5738:	96 9f       	mul	r25, r22
    573a:	10 0d       	add	r17, r0
    573c:	11 24       	eor	r1, r1
    573e:	c8 01       	movw	r24, r16
    5740:	0d d0       	rcall	.+26     	; 0x575c <malloc>
    5742:	ec 01       	movw	r28, r24
    5744:	00 97       	sbiw	r24, 0x00	; 0
    5746:	21 f0       	breq	.+8      	; 0x5750 <calloc+0x28>
    5748:	a8 01       	movw	r20, r16
    574a:	60 e0       	ldi	r22, 0x00	; 0
    574c:	70 e0       	ldi	r23, 0x00	; 0
    574e:	34 d1       	rcall	.+616    	; 0x59b8 <memset>
    5750:	ce 01       	movw	r24, r28
    5752:	df 91       	pop	r29
    5754:	cf 91       	pop	r28
    5756:	1f 91       	pop	r17
    5758:	0f 91       	pop	r16
    575a:	08 95       	ret

0000575c <malloc>:
    575c:	0f 93       	push	r16
    575e:	1f 93       	push	r17
    5760:	cf 93       	push	r28
    5762:	df 93       	push	r29
    5764:	82 30       	cpi	r24, 0x02	; 2
    5766:	91 05       	cpc	r25, r1
    5768:	10 f4       	brcc	.+4      	; 0x576e <malloc+0x12>
    576a:	82 e0       	ldi	r24, 0x02	; 2
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	e0 91 aa 1a 	lds	r30, 0x1AAA	; 0x801aaa <__flp>
    5772:	f0 91 ab 1a 	lds	r31, 0x1AAB	; 0x801aab <__flp+0x1>
    5776:	20 e0       	ldi	r18, 0x00	; 0
    5778:	30 e0       	ldi	r19, 0x00	; 0
    577a:	a0 e0       	ldi	r26, 0x00	; 0
    577c:	b0 e0       	ldi	r27, 0x00	; 0
    577e:	30 97       	sbiw	r30, 0x00	; 0
    5780:	19 f1       	breq	.+70     	; 0x57c8 <malloc+0x6c>
    5782:	40 81       	ld	r20, Z
    5784:	51 81       	ldd	r21, Z+1	; 0x01
    5786:	02 81       	ldd	r16, Z+2	; 0x02
    5788:	13 81       	ldd	r17, Z+3	; 0x03
    578a:	48 17       	cp	r20, r24
    578c:	59 07       	cpc	r21, r25
    578e:	c8 f0       	brcs	.+50     	; 0x57c2 <malloc+0x66>
    5790:	84 17       	cp	r24, r20
    5792:	95 07       	cpc	r25, r21
    5794:	69 f4       	brne	.+26     	; 0x57b0 <malloc+0x54>
    5796:	10 97       	sbiw	r26, 0x00	; 0
    5798:	31 f0       	breq	.+12     	; 0x57a6 <malloc+0x4a>
    579a:	12 96       	adiw	r26, 0x02	; 2
    579c:	0c 93       	st	X, r16
    579e:	12 97       	sbiw	r26, 0x02	; 2
    57a0:	13 96       	adiw	r26, 0x03	; 3
    57a2:	1c 93       	st	X, r17
    57a4:	27 c0       	rjmp	.+78     	; 0x57f4 <malloc+0x98>
    57a6:	00 93 aa 1a 	sts	0x1AAA, r16	; 0x801aaa <__flp>
    57aa:	10 93 ab 1a 	sts	0x1AAB, r17	; 0x801aab <__flp+0x1>
    57ae:	22 c0       	rjmp	.+68     	; 0x57f4 <malloc+0x98>
    57b0:	21 15       	cp	r18, r1
    57b2:	31 05       	cpc	r19, r1
    57b4:	19 f0       	breq	.+6      	; 0x57bc <malloc+0x60>
    57b6:	42 17       	cp	r20, r18
    57b8:	53 07       	cpc	r21, r19
    57ba:	18 f4       	brcc	.+6      	; 0x57c2 <malloc+0x66>
    57bc:	9a 01       	movw	r18, r20
    57be:	bd 01       	movw	r22, r26
    57c0:	ef 01       	movw	r28, r30
    57c2:	df 01       	movw	r26, r30
    57c4:	f8 01       	movw	r30, r16
    57c6:	db cf       	rjmp	.-74     	; 0x577e <malloc+0x22>
    57c8:	21 15       	cp	r18, r1
    57ca:	31 05       	cpc	r19, r1
    57cc:	f9 f0       	breq	.+62     	; 0x580c <malloc+0xb0>
    57ce:	28 1b       	sub	r18, r24
    57d0:	39 0b       	sbc	r19, r25
    57d2:	24 30       	cpi	r18, 0x04	; 4
    57d4:	31 05       	cpc	r19, r1
    57d6:	80 f4       	brcc	.+32     	; 0x57f8 <malloc+0x9c>
    57d8:	8a 81       	ldd	r24, Y+2	; 0x02
    57da:	9b 81       	ldd	r25, Y+3	; 0x03
    57dc:	61 15       	cp	r22, r1
    57de:	71 05       	cpc	r23, r1
    57e0:	21 f0       	breq	.+8      	; 0x57ea <malloc+0x8e>
    57e2:	fb 01       	movw	r30, r22
    57e4:	93 83       	std	Z+3, r25	; 0x03
    57e6:	82 83       	std	Z+2, r24	; 0x02
    57e8:	04 c0       	rjmp	.+8      	; 0x57f2 <malloc+0x96>
    57ea:	90 93 ab 1a 	sts	0x1AAB, r25	; 0x801aab <__flp+0x1>
    57ee:	80 93 aa 1a 	sts	0x1AAA, r24	; 0x801aaa <__flp>
    57f2:	fe 01       	movw	r30, r28
    57f4:	32 96       	adiw	r30, 0x02	; 2
    57f6:	44 c0       	rjmp	.+136    	; 0x5880 <malloc+0x124>
    57f8:	fe 01       	movw	r30, r28
    57fa:	e2 0f       	add	r30, r18
    57fc:	f3 1f       	adc	r31, r19
    57fe:	81 93       	st	Z+, r24
    5800:	91 93       	st	Z+, r25
    5802:	22 50       	subi	r18, 0x02	; 2
    5804:	31 09       	sbc	r19, r1
    5806:	39 83       	std	Y+1, r19	; 0x01
    5808:	28 83       	st	Y, r18
    580a:	3a c0       	rjmp	.+116    	; 0x5880 <malloc+0x124>
    580c:	20 91 a8 1a 	lds	r18, 0x1AA8	; 0x801aa8 <__brkval>
    5810:	30 91 a9 1a 	lds	r19, 0x1AA9	; 0x801aa9 <__brkval+0x1>
    5814:	23 2b       	or	r18, r19
    5816:	41 f4       	brne	.+16     	; 0x5828 <malloc+0xcc>
    5818:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    581c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5820:	30 93 a9 1a 	sts	0x1AA9, r19	; 0x801aa9 <__brkval+0x1>
    5824:	20 93 a8 1a 	sts	0x1AA8, r18	; 0x801aa8 <__brkval>
    5828:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    582c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5830:	21 15       	cp	r18, r1
    5832:	31 05       	cpc	r19, r1
    5834:	41 f4       	brne	.+16     	; 0x5846 <malloc+0xea>
    5836:	2d b7       	in	r18, 0x3d	; 61
    5838:	3e b7       	in	r19, 0x3e	; 62
    583a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    583e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5842:	24 1b       	sub	r18, r20
    5844:	35 0b       	sbc	r19, r21
    5846:	e0 91 a8 1a 	lds	r30, 0x1AA8	; 0x801aa8 <__brkval>
    584a:	f0 91 a9 1a 	lds	r31, 0x1AA9	; 0x801aa9 <__brkval+0x1>
    584e:	e2 17       	cp	r30, r18
    5850:	f3 07       	cpc	r31, r19
    5852:	a0 f4       	brcc	.+40     	; 0x587c <malloc+0x120>
    5854:	2e 1b       	sub	r18, r30
    5856:	3f 0b       	sbc	r19, r31
    5858:	28 17       	cp	r18, r24
    585a:	39 07       	cpc	r19, r25
    585c:	78 f0       	brcs	.+30     	; 0x587c <malloc+0x120>
    585e:	ac 01       	movw	r20, r24
    5860:	4e 5f       	subi	r20, 0xFE	; 254
    5862:	5f 4f       	sbci	r21, 0xFF	; 255
    5864:	24 17       	cp	r18, r20
    5866:	35 07       	cpc	r19, r21
    5868:	48 f0       	brcs	.+18     	; 0x587c <malloc+0x120>
    586a:	4e 0f       	add	r20, r30
    586c:	5f 1f       	adc	r21, r31
    586e:	50 93 a9 1a 	sts	0x1AA9, r21	; 0x801aa9 <__brkval+0x1>
    5872:	40 93 a8 1a 	sts	0x1AA8, r20	; 0x801aa8 <__brkval>
    5876:	81 93       	st	Z+, r24
    5878:	91 93       	st	Z+, r25
    587a:	02 c0       	rjmp	.+4      	; 0x5880 <malloc+0x124>
    587c:	e0 e0       	ldi	r30, 0x00	; 0
    587e:	f0 e0       	ldi	r31, 0x00	; 0
    5880:	cf 01       	movw	r24, r30
    5882:	df 91       	pop	r29
    5884:	cf 91       	pop	r28
    5886:	1f 91       	pop	r17
    5888:	0f 91       	pop	r16
    588a:	08 95       	ret

0000588c <free>:
    588c:	cf 93       	push	r28
    588e:	df 93       	push	r29
    5890:	00 97       	sbiw	r24, 0x00	; 0
    5892:	09 f4       	brne	.+2      	; 0x5896 <free+0xa>
    5894:	81 c0       	rjmp	.+258    	; 0x5998 <free+0x10c>
    5896:	fc 01       	movw	r30, r24
    5898:	32 97       	sbiw	r30, 0x02	; 2
    589a:	13 82       	std	Z+3, r1	; 0x03
    589c:	12 82       	std	Z+2, r1	; 0x02
    589e:	a0 91 aa 1a 	lds	r26, 0x1AAA	; 0x801aaa <__flp>
    58a2:	b0 91 ab 1a 	lds	r27, 0x1AAB	; 0x801aab <__flp+0x1>
    58a6:	10 97       	sbiw	r26, 0x00	; 0
    58a8:	81 f4       	brne	.+32     	; 0x58ca <free+0x3e>
    58aa:	20 81       	ld	r18, Z
    58ac:	31 81       	ldd	r19, Z+1	; 0x01
    58ae:	82 0f       	add	r24, r18
    58b0:	93 1f       	adc	r25, r19
    58b2:	20 91 a8 1a 	lds	r18, 0x1AA8	; 0x801aa8 <__brkval>
    58b6:	30 91 a9 1a 	lds	r19, 0x1AA9	; 0x801aa9 <__brkval+0x1>
    58ba:	28 17       	cp	r18, r24
    58bc:	39 07       	cpc	r19, r25
    58be:	51 f5       	brne	.+84     	; 0x5914 <free+0x88>
    58c0:	f0 93 a9 1a 	sts	0x1AA9, r31	; 0x801aa9 <__brkval+0x1>
    58c4:	e0 93 a8 1a 	sts	0x1AA8, r30	; 0x801aa8 <__brkval>
    58c8:	67 c0       	rjmp	.+206    	; 0x5998 <free+0x10c>
    58ca:	ed 01       	movw	r28, r26
    58cc:	20 e0       	ldi	r18, 0x00	; 0
    58ce:	30 e0       	ldi	r19, 0x00	; 0
    58d0:	ce 17       	cp	r28, r30
    58d2:	df 07       	cpc	r29, r31
    58d4:	40 f4       	brcc	.+16     	; 0x58e6 <free+0x5a>
    58d6:	4a 81       	ldd	r20, Y+2	; 0x02
    58d8:	5b 81       	ldd	r21, Y+3	; 0x03
    58da:	9e 01       	movw	r18, r28
    58dc:	41 15       	cp	r20, r1
    58de:	51 05       	cpc	r21, r1
    58e0:	f1 f0       	breq	.+60     	; 0x591e <free+0x92>
    58e2:	ea 01       	movw	r28, r20
    58e4:	f5 cf       	rjmp	.-22     	; 0x58d0 <free+0x44>
    58e6:	d3 83       	std	Z+3, r29	; 0x03
    58e8:	c2 83       	std	Z+2, r28	; 0x02
    58ea:	40 81       	ld	r20, Z
    58ec:	51 81       	ldd	r21, Z+1	; 0x01
    58ee:	84 0f       	add	r24, r20
    58f0:	95 1f       	adc	r25, r21
    58f2:	c8 17       	cp	r28, r24
    58f4:	d9 07       	cpc	r29, r25
    58f6:	59 f4       	brne	.+22     	; 0x590e <free+0x82>
    58f8:	88 81       	ld	r24, Y
    58fa:	99 81       	ldd	r25, Y+1	; 0x01
    58fc:	84 0f       	add	r24, r20
    58fe:	95 1f       	adc	r25, r21
    5900:	02 96       	adiw	r24, 0x02	; 2
    5902:	91 83       	std	Z+1, r25	; 0x01
    5904:	80 83       	st	Z, r24
    5906:	8a 81       	ldd	r24, Y+2	; 0x02
    5908:	9b 81       	ldd	r25, Y+3	; 0x03
    590a:	93 83       	std	Z+3, r25	; 0x03
    590c:	82 83       	std	Z+2, r24	; 0x02
    590e:	21 15       	cp	r18, r1
    5910:	31 05       	cpc	r19, r1
    5912:	29 f4       	brne	.+10     	; 0x591e <free+0x92>
    5914:	f0 93 ab 1a 	sts	0x1AAB, r31	; 0x801aab <__flp+0x1>
    5918:	e0 93 aa 1a 	sts	0x1AAA, r30	; 0x801aaa <__flp>
    591c:	3d c0       	rjmp	.+122    	; 0x5998 <free+0x10c>
    591e:	e9 01       	movw	r28, r18
    5920:	fb 83       	std	Y+3, r31	; 0x03
    5922:	ea 83       	std	Y+2, r30	; 0x02
    5924:	49 91       	ld	r20, Y+
    5926:	59 91       	ld	r21, Y+
    5928:	c4 0f       	add	r28, r20
    592a:	d5 1f       	adc	r29, r21
    592c:	ec 17       	cp	r30, r28
    592e:	fd 07       	cpc	r31, r29
    5930:	61 f4       	brne	.+24     	; 0x594a <free+0xbe>
    5932:	80 81       	ld	r24, Z
    5934:	91 81       	ldd	r25, Z+1	; 0x01
    5936:	84 0f       	add	r24, r20
    5938:	95 1f       	adc	r25, r21
    593a:	02 96       	adiw	r24, 0x02	; 2
    593c:	e9 01       	movw	r28, r18
    593e:	99 83       	std	Y+1, r25	; 0x01
    5940:	88 83       	st	Y, r24
    5942:	82 81       	ldd	r24, Z+2	; 0x02
    5944:	93 81       	ldd	r25, Z+3	; 0x03
    5946:	9b 83       	std	Y+3, r25	; 0x03
    5948:	8a 83       	std	Y+2, r24	; 0x02
    594a:	e0 e0       	ldi	r30, 0x00	; 0
    594c:	f0 e0       	ldi	r31, 0x00	; 0
    594e:	12 96       	adiw	r26, 0x02	; 2
    5950:	8d 91       	ld	r24, X+
    5952:	9c 91       	ld	r25, X
    5954:	13 97       	sbiw	r26, 0x03	; 3
    5956:	00 97       	sbiw	r24, 0x00	; 0
    5958:	19 f0       	breq	.+6      	; 0x5960 <free+0xd4>
    595a:	fd 01       	movw	r30, r26
    595c:	dc 01       	movw	r26, r24
    595e:	f7 cf       	rjmp	.-18     	; 0x594e <free+0xc2>
    5960:	8d 91       	ld	r24, X+
    5962:	9c 91       	ld	r25, X
    5964:	11 97       	sbiw	r26, 0x01	; 1
    5966:	9d 01       	movw	r18, r26
    5968:	2e 5f       	subi	r18, 0xFE	; 254
    596a:	3f 4f       	sbci	r19, 0xFF	; 255
    596c:	82 0f       	add	r24, r18
    596e:	93 1f       	adc	r25, r19
    5970:	20 91 a8 1a 	lds	r18, 0x1AA8	; 0x801aa8 <__brkval>
    5974:	30 91 a9 1a 	lds	r19, 0x1AA9	; 0x801aa9 <__brkval+0x1>
    5978:	28 17       	cp	r18, r24
    597a:	39 07       	cpc	r19, r25
    597c:	69 f4       	brne	.+26     	; 0x5998 <free+0x10c>
    597e:	30 97       	sbiw	r30, 0x00	; 0
    5980:	29 f4       	brne	.+10     	; 0x598c <free+0x100>
    5982:	10 92 ab 1a 	sts	0x1AAB, r1	; 0x801aab <__flp+0x1>
    5986:	10 92 aa 1a 	sts	0x1AAA, r1	; 0x801aaa <__flp>
    598a:	02 c0       	rjmp	.+4      	; 0x5990 <free+0x104>
    598c:	13 82       	std	Z+3, r1	; 0x03
    598e:	12 82       	std	Z+2, r1	; 0x02
    5990:	b0 93 a9 1a 	sts	0x1AA9, r27	; 0x801aa9 <__brkval+0x1>
    5994:	a0 93 a8 1a 	sts	0x1AA8, r26	; 0x801aa8 <__brkval>
    5998:	df 91       	pop	r29
    599a:	cf 91       	pop	r28
    599c:	08 95       	ret

0000599e <abort>:
    599e:	81 e0       	ldi	r24, 0x01	; 1
    59a0:	90 e0       	ldi	r25, 0x00	; 0
    59a2:	f8 94       	cli
    59a4:	7d c3       	rjmp	.+1786   	; 0x60a0 <_exit>

000059a6 <memcpy>:
    59a6:	fb 01       	movw	r30, r22
    59a8:	dc 01       	movw	r26, r24
    59aa:	02 c0       	rjmp	.+4      	; 0x59b0 <memcpy+0xa>
    59ac:	01 90       	ld	r0, Z+
    59ae:	0d 92       	st	X+, r0
    59b0:	41 50       	subi	r20, 0x01	; 1
    59b2:	50 40       	sbci	r21, 0x00	; 0
    59b4:	d8 f7       	brcc	.-10     	; 0x59ac <memcpy+0x6>
    59b6:	08 95       	ret

000059b8 <memset>:
    59b8:	dc 01       	movw	r26, r24
    59ba:	01 c0       	rjmp	.+2      	; 0x59be <memset+0x6>
    59bc:	6d 93       	st	X+, r22
    59be:	41 50       	subi	r20, 0x01	; 1
    59c0:	50 40       	sbci	r21, 0x00	; 0
    59c2:	e0 f7       	brcc	.-8      	; 0x59bc <memset+0x4>
    59c4:	08 95       	ret

000059c6 <strcasestr>:
    59c6:	fb 01       	movw	r30, r22
    59c8:	51 91       	ld	r21, Z+
    59ca:	55 23       	and	r21, r21
    59cc:	b1 f0       	breq	.+44     	; 0x59fa <strcasestr+0x34>
    59ce:	bf 01       	movw	r22, r30
    59d0:	dc 01       	movw	r26, r24
    59d2:	05 2e       	mov	r0, r21
    59d4:	4d 91       	ld	r20, X+
    59d6:	44 23       	and	r20, r20
    59d8:	69 f0       	breq	.+26     	; 0x59f4 <strcasestr+0x2e>
    59da:	10 d0       	rcall	.+32     	; 0x59fc <strcasestr+0x36>
    59dc:	d9 f7       	brne	.-10     	; 0x59d4 <strcasestr+0xe>
    59de:	cd 01       	movw	r24, r26
    59e0:	01 90       	ld	r0, Z+
    59e2:	00 20       	and	r0, r0
    59e4:	49 f0       	breq	.+18     	; 0x59f8 <strcasestr+0x32>
    59e6:	4d 91       	ld	r20, X+
    59e8:	41 11       	cpse	r20, r1
    59ea:	08 d0       	rcall	.+16     	; 0x59fc <strcasestr+0x36>
    59ec:	c9 f3       	breq	.-14     	; 0x59e0 <strcasestr+0x1a>
    59ee:	fb 01       	movw	r30, r22
    59f0:	41 11       	cpse	r20, r1
    59f2:	ee cf       	rjmp	.-36     	; 0x59d0 <strcasestr+0xa>
    59f4:	81 e0       	ldi	r24, 0x01	; 1
    59f6:	90 e0       	ldi	r25, 0x00	; 0
    59f8:	01 97       	sbiw	r24, 0x01	; 1
    59fa:	08 95       	ret
    59fc:	40 25       	eor	r20, r0
    59fe:	39 f0       	breq	.+14     	; 0x5a0e <strcasestr+0x48>
    5a00:	40 32       	cpi	r20, 0x20	; 32
    5a02:	29 f4       	brne	.+10     	; 0x5a0e <strcasestr+0x48>
    5a04:	40 29       	or	r20, r0
    5a06:	4b 57       	subi	r20, 0x7B	; 123
    5a08:	46 5e       	subi	r20, 0xE6	; 230
    5a0a:	08 f0       	brcs	.+2      	; 0x5a0e <strcasestr+0x48>
    5a0c:	18 94       	sez
    5a0e:	08 95       	ret

00005a10 <strcat>:
    5a10:	fb 01       	movw	r30, r22
    5a12:	dc 01       	movw	r26, r24
    5a14:	0d 90       	ld	r0, X+
    5a16:	00 20       	and	r0, r0
    5a18:	e9 f7       	brne	.-6      	; 0x5a14 <strcat+0x4>
    5a1a:	11 97       	sbiw	r26, 0x01	; 1
    5a1c:	01 90       	ld	r0, Z+
    5a1e:	0d 92       	st	X+, r0
    5a20:	00 20       	and	r0, r0
    5a22:	e1 f7       	brne	.-8      	; 0x5a1c <strcat+0xc>
    5a24:	08 95       	ret

00005a26 <strcpy>:
    5a26:	fb 01       	movw	r30, r22
    5a28:	dc 01       	movw	r26, r24
    5a2a:	01 90       	ld	r0, Z+
    5a2c:	0d 92       	st	X+, r0
    5a2e:	00 20       	and	r0, r0
    5a30:	e1 f7       	brne	.-8      	; 0x5a2a <strcpy+0x4>
    5a32:	08 95       	ret

00005a34 <strncasecmp>:
    5a34:	fb 01       	movw	r30, r22
    5a36:	dc 01       	movw	r26, r24
    5a38:	41 50       	subi	r20, 0x01	; 1
    5a3a:	50 40       	sbci	r21, 0x00	; 0
    5a3c:	88 f0       	brcs	.+34     	; 0x5a60 <strncasecmp+0x2c>
    5a3e:	8d 91       	ld	r24, X+
    5a40:	81 34       	cpi	r24, 0x41	; 65
    5a42:	1c f0       	brlt	.+6      	; 0x5a4a <strncasecmp+0x16>
    5a44:	8b 35       	cpi	r24, 0x5B	; 91
    5a46:	0c f4       	brge	.+2      	; 0x5a4a <strncasecmp+0x16>
    5a48:	80 5e       	subi	r24, 0xE0	; 224
    5a4a:	61 91       	ld	r22, Z+
    5a4c:	61 34       	cpi	r22, 0x41	; 65
    5a4e:	1c f0       	brlt	.+6      	; 0x5a56 <strncasecmp+0x22>
    5a50:	6b 35       	cpi	r22, 0x5B	; 91
    5a52:	0c f4       	brge	.+2      	; 0x5a56 <strncasecmp+0x22>
    5a54:	60 5e       	subi	r22, 0xE0	; 224
    5a56:	86 1b       	sub	r24, r22
    5a58:	61 11       	cpse	r22, r1
    5a5a:	71 f3       	breq	.-36     	; 0x5a38 <strncasecmp+0x4>
    5a5c:	99 0b       	sbc	r25, r25
    5a5e:	08 95       	ret
    5a60:	88 1b       	sub	r24, r24
    5a62:	fc cf       	rjmp	.-8      	; 0x5a5c <strncasecmp+0x28>

00005a64 <printf>:
    5a64:	cf 93       	push	r28
    5a66:	df 93       	push	r29
    5a68:	cd b7       	in	r28, 0x3d	; 61
    5a6a:	de b7       	in	r29, 0x3e	; 62
    5a6c:	ae 01       	movw	r20, r28
    5a6e:	4a 5f       	subi	r20, 0xFA	; 250
    5a70:	5f 4f       	sbci	r21, 0xFF	; 255
    5a72:	fa 01       	movw	r30, r20
    5a74:	61 91       	ld	r22, Z+
    5a76:	71 91       	ld	r23, Z+
    5a78:	af 01       	movw	r20, r30
    5a7a:	80 91 ae 1a 	lds	r24, 0x1AAE	; 0x801aae <__iob+0x2>
    5a7e:	90 91 af 1a 	lds	r25, 0x1AAF	; 0x801aaf <__iob+0x3>
    5a82:	61 d0       	rcall	.+194    	; 0x5b46 <vfprintf>
    5a84:	df 91       	pop	r29
    5a86:	cf 91       	pop	r28
    5a88:	08 95       	ret

00005a8a <puts>:
    5a8a:	0f 93       	push	r16
    5a8c:	1f 93       	push	r17
    5a8e:	cf 93       	push	r28
    5a90:	df 93       	push	r29
    5a92:	e0 91 ae 1a 	lds	r30, 0x1AAE	; 0x801aae <__iob+0x2>
    5a96:	f0 91 af 1a 	lds	r31, 0x1AAF	; 0x801aaf <__iob+0x3>
    5a9a:	23 81       	ldd	r18, Z+3	; 0x03
    5a9c:	21 ff       	sbrs	r18, 1
    5a9e:	1b c0       	rjmp	.+54     	; 0x5ad6 <puts+0x4c>
    5aa0:	8c 01       	movw	r16, r24
    5aa2:	d0 e0       	ldi	r29, 0x00	; 0
    5aa4:	c0 e0       	ldi	r28, 0x00	; 0
    5aa6:	f8 01       	movw	r30, r16
    5aa8:	81 91       	ld	r24, Z+
    5aaa:	8f 01       	movw	r16, r30
    5aac:	60 91 ae 1a 	lds	r22, 0x1AAE	; 0x801aae <__iob+0x2>
    5ab0:	70 91 af 1a 	lds	r23, 0x1AAF	; 0x801aaf <__iob+0x3>
    5ab4:	db 01       	movw	r26, r22
    5ab6:	18 96       	adiw	r26, 0x08	; 8
    5ab8:	ed 91       	ld	r30, X+
    5aba:	fc 91       	ld	r31, X
    5abc:	19 97       	sbiw	r26, 0x09	; 9
    5abe:	88 23       	and	r24, r24
    5ac0:	31 f0       	breq	.+12     	; 0x5ace <puts+0x44>
    5ac2:	19 95       	eicall
    5ac4:	89 2b       	or	r24, r25
    5ac6:	79 f3       	breq	.-34     	; 0x5aa6 <puts+0x1c>
    5ac8:	df ef       	ldi	r29, 0xFF	; 255
    5aca:	cf ef       	ldi	r28, 0xFF	; 255
    5acc:	ec cf       	rjmp	.-40     	; 0x5aa6 <puts+0x1c>
    5ace:	8a e0       	ldi	r24, 0x0A	; 10
    5ad0:	19 95       	eicall
    5ad2:	89 2b       	or	r24, r25
    5ad4:	19 f0       	breq	.+6      	; 0x5adc <puts+0x52>
    5ad6:	8f ef       	ldi	r24, 0xFF	; 255
    5ad8:	9f ef       	ldi	r25, 0xFF	; 255
    5ada:	02 c0       	rjmp	.+4      	; 0x5ae0 <puts+0x56>
    5adc:	8d 2f       	mov	r24, r29
    5ade:	9c 2f       	mov	r25, r28
    5ae0:	df 91       	pop	r29
    5ae2:	cf 91       	pop	r28
    5ae4:	1f 91       	pop	r17
    5ae6:	0f 91       	pop	r16
    5ae8:	08 95       	ret

00005aea <sprintf>:
    5aea:	0f 93       	push	r16
    5aec:	1f 93       	push	r17
    5aee:	cf 93       	push	r28
    5af0:	df 93       	push	r29
    5af2:	cd b7       	in	r28, 0x3d	; 61
    5af4:	de b7       	in	r29, 0x3e	; 62
    5af6:	2e 97       	sbiw	r28, 0x0e	; 14
    5af8:	0f b6       	in	r0, 0x3f	; 63
    5afa:	f8 94       	cli
    5afc:	de bf       	out	0x3e, r29	; 62
    5afe:	0f be       	out	0x3f, r0	; 63
    5b00:	cd bf       	out	0x3d, r28	; 61
    5b02:	0e 89       	ldd	r16, Y+22	; 0x16
    5b04:	1f 89       	ldd	r17, Y+23	; 0x17
    5b06:	86 e0       	ldi	r24, 0x06	; 6
    5b08:	8c 83       	std	Y+4, r24	; 0x04
    5b0a:	1a 83       	std	Y+2, r17	; 0x02
    5b0c:	09 83       	std	Y+1, r16	; 0x01
    5b0e:	8f ef       	ldi	r24, 0xFF	; 255
    5b10:	9f e7       	ldi	r25, 0x7F	; 127
    5b12:	9e 83       	std	Y+6, r25	; 0x06
    5b14:	8d 83       	std	Y+5, r24	; 0x05
    5b16:	ae 01       	movw	r20, r28
    5b18:	46 5e       	subi	r20, 0xE6	; 230
    5b1a:	5f 4f       	sbci	r21, 0xFF	; 255
    5b1c:	68 8d       	ldd	r22, Y+24	; 0x18
    5b1e:	79 8d       	ldd	r23, Y+25	; 0x19
    5b20:	ce 01       	movw	r24, r28
    5b22:	01 96       	adiw	r24, 0x01	; 1
    5b24:	10 d0       	rcall	.+32     	; 0x5b46 <vfprintf>
    5b26:	ef 81       	ldd	r30, Y+7	; 0x07
    5b28:	f8 85       	ldd	r31, Y+8	; 0x08
    5b2a:	e0 0f       	add	r30, r16
    5b2c:	f1 1f       	adc	r31, r17
    5b2e:	10 82       	st	Z, r1
    5b30:	2e 96       	adiw	r28, 0x0e	; 14
    5b32:	0f b6       	in	r0, 0x3f	; 63
    5b34:	f8 94       	cli
    5b36:	de bf       	out	0x3e, r29	; 62
    5b38:	0f be       	out	0x3f, r0	; 63
    5b3a:	cd bf       	out	0x3d, r28	; 61
    5b3c:	df 91       	pop	r29
    5b3e:	cf 91       	pop	r28
    5b40:	1f 91       	pop	r17
    5b42:	0f 91       	pop	r16
    5b44:	08 95       	ret

00005b46 <vfprintf>:
    5b46:	2f 92       	push	r2
    5b48:	3f 92       	push	r3
    5b4a:	4f 92       	push	r4
    5b4c:	5f 92       	push	r5
    5b4e:	6f 92       	push	r6
    5b50:	7f 92       	push	r7
    5b52:	8f 92       	push	r8
    5b54:	9f 92       	push	r9
    5b56:	af 92       	push	r10
    5b58:	bf 92       	push	r11
    5b5a:	cf 92       	push	r12
    5b5c:	df 92       	push	r13
    5b5e:	ef 92       	push	r14
    5b60:	ff 92       	push	r15
    5b62:	0f 93       	push	r16
    5b64:	1f 93       	push	r17
    5b66:	cf 93       	push	r28
    5b68:	df 93       	push	r29
    5b6a:	cd b7       	in	r28, 0x3d	; 61
    5b6c:	de b7       	in	r29, 0x3e	; 62
    5b6e:	2b 97       	sbiw	r28, 0x0b	; 11
    5b70:	0f b6       	in	r0, 0x3f	; 63
    5b72:	f8 94       	cli
    5b74:	de bf       	out	0x3e, r29	; 62
    5b76:	0f be       	out	0x3f, r0	; 63
    5b78:	cd bf       	out	0x3d, r28	; 61
    5b7a:	6c 01       	movw	r12, r24
    5b7c:	7b 01       	movw	r14, r22
    5b7e:	8a 01       	movw	r16, r20
    5b80:	fc 01       	movw	r30, r24
    5b82:	17 82       	std	Z+7, r1	; 0x07
    5b84:	16 82       	std	Z+6, r1	; 0x06
    5b86:	83 81       	ldd	r24, Z+3	; 0x03
    5b88:	81 ff       	sbrs	r24, 1
    5b8a:	bf c1       	rjmp	.+894    	; 0x5f0a <vfprintf+0x3c4>
    5b8c:	ce 01       	movw	r24, r28
    5b8e:	01 96       	adiw	r24, 0x01	; 1
    5b90:	3c 01       	movw	r6, r24
    5b92:	f6 01       	movw	r30, r12
    5b94:	93 81       	ldd	r25, Z+3	; 0x03
    5b96:	f7 01       	movw	r30, r14
    5b98:	93 fd       	sbrc	r25, 3
    5b9a:	85 91       	lpm	r24, Z+
    5b9c:	93 ff       	sbrs	r25, 3
    5b9e:	81 91       	ld	r24, Z+
    5ba0:	7f 01       	movw	r14, r30
    5ba2:	88 23       	and	r24, r24
    5ba4:	09 f4       	brne	.+2      	; 0x5ba8 <vfprintf+0x62>
    5ba6:	ad c1       	rjmp	.+858    	; 0x5f02 <vfprintf+0x3bc>
    5ba8:	85 32       	cpi	r24, 0x25	; 37
    5baa:	39 f4       	brne	.+14     	; 0x5bba <vfprintf+0x74>
    5bac:	93 fd       	sbrc	r25, 3
    5bae:	85 91       	lpm	r24, Z+
    5bb0:	93 ff       	sbrs	r25, 3
    5bb2:	81 91       	ld	r24, Z+
    5bb4:	7f 01       	movw	r14, r30
    5bb6:	85 32       	cpi	r24, 0x25	; 37
    5bb8:	21 f4       	brne	.+8      	; 0x5bc2 <vfprintf+0x7c>
    5bba:	b6 01       	movw	r22, r12
    5bbc:	90 e0       	ldi	r25, 0x00	; 0
    5bbe:	d6 d1       	rcall	.+940    	; 0x5f6c <fputc>
    5bc0:	e8 cf       	rjmp	.-48     	; 0x5b92 <vfprintf+0x4c>
    5bc2:	91 2c       	mov	r9, r1
    5bc4:	21 2c       	mov	r2, r1
    5bc6:	31 2c       	mov	r3, r1
    5bc8:	ff e1       	ldi	r31, 0x1F	; 31
    5bca:	f3 15       	cp	r31, r3
    5bcc:	d8 f0       	brcs	.+54     	; 0x5c04 <vfprintf+0xbe>
    5bce:	8b 32       	cpi	r24, 0x2B	; 43
    5bd0:	79 f0       	breq	.+30     	; 0x5bf0 <vfprintf+0xaa>
    5bd2:	38 f4       	brcc	.+14     	; 0x5be2 <vfprintf+0x9c>
    5bd4:	80 32       	cpi	r24, 0x20	; 32
    5bd6:	79 f0       	breq	.+30     	; 0x5bf6 <vfprintf+0xb0>
    5bd8:	83 32       	cpi	r24, 0x23	; 35
    5bda:	a1 f4       	brne	.+40     	; 0x5c04 <vfprintf+0xbe>
    5bdc:	23 2d       	mov	r18, r3
    5bde:	20 61       	ori	r18, 0x10	; 16
    5be0:	1d c0       	rjmp	.+58     	; 0x5c1c <vfprintf+0xd6>
    5be2:	8d 32       	cpi	r24, 0x2D	; 45
    5be4:	61 f0       	breq	.+24     	; 0x5bfe <vfprintf+0xb8>
    5be6:	80 33       	cpi	r24, 0x30	; 48
    5be8:	69 f4       	brne	.+26     	; 0x5c04 <vfprintf+0xbe>
    5bea:	23 2d       	mov	r18, r3
    5bec:	21 60       	ori	r18, 0x01	; 1
    5bee:	16 c0       	rjmp	.+44     	; 0x5c1c <vfprintf+0xd6>
    5bf0:	83 2d       	mov	r24, r3
    5bf2:	82 60       	ori	r24, 0x02	; 2
    5bf4:	38 2e       	mov	r3, r24
    5bf6:	e3 2d       	mov	r30, r3
    5bf8:	e4 60       	ori	r30, 0x04	; 4
    5bfa:	3e 2e       	mov	r3, r30
    5bfc:	2a c0       	rjmp	.+84     	; 0x5c52 <vfprintf+0x10c>
    5bfe:	f3 2d       	mov	r31, r3
    5c00:	f8 60       	ori	r31, 0x08	; 8
    5c02:	1d c0       	rjmp	.+58     	; 0x5c3e <vfprintf+0xf8>
    5c04:	37 fc       	sbrc	r3, 7
    5c06:	2d c0       	rjmp	.+90     	; 0x5c62 <vfprintf+0x11c>
    5c08:	20 ed       	ldi	r18, 0xD0	; 208
    5c0a:	28 0f       	add	r18, r24
    5c0c:	2a 30       	cpi	r18, 0x0A	; 10
    5c0e:	40 f0       	brcs	.+16     	; 0x5c20 <vfprintf+0xda>
    5c10:	8e 32       	cpi	r24, 0x2E	; 46
    5c12:	b9 f4       	brne	.+46     	; 0x5c42 <vfprintf+0xfc>
    5c14:	36 fc       	sbrc	r3, 6
    5c16:	75 c1       	rjmp	.+746    	; 0x5f02 <vfprintf+0x3bc>
    5c18:	23 2d       	mov	r18, r3
    5c1a:	20 64       	ori	r18, 0x40	; 64
    5c1c:	32 2e       	mov	r3, r18
    5c1e:	19 c0       	rjmp	.+50     	; 0x5c52 <vfprintf+0x10c>
    5c20:	36 fe       	sbrs	r3, 6
    5c22:	06 c0       	rjmp	.+12     	; 0x5c30 <vfprintf+0xea>
    5c24:	8a e0       	ldi	r24, 0x0A	; 10
    5c26:	98 9e       	mul	r9, r24
    5c28:	20 0d       	add	r18, r0
    5c2a:	11 24       	eor	r1, r1
    5c2c:	92 2e       	mov	r9, r18
    5c2e:	11 c0       	rjmp	.+34     	; 0x5c52 <vfprintf+0x10c>
    5c30:	ea e0       	ldi	r30, 0x0A	; 10
    5c32:	2e 9e       	mul	r2, r30
    5c34:	20 0d       	add	r18, r0
    5c36:	11 24       	eor	r1, r1
    5c38:	22 2e       	mov	r2, r18
    5c3a:	f3 2d       	mov	r31, r3
    5c3c:	f0 62       	ori	r31, 0x20	; 32
    5c3e:	3f 2e       	mov	r3, r31
    5c40:	08 c0       	rjmp	.+16     	; 0x5c52 <vfprintf+0x10c>
    5c42:	8c 36       	cpi	r24, 0x6C	; 108
    5c44:	21 f4       	brne	.+8      	; 0x5c4e <vfprintf+0x108>
    5c46:	83 2d       	mov	r24, r3
    5c48:	80 68       	ori	r24, 0x80	; 128
    5c4a:	38 2e       	mov	r3, r24
    5c4c:	02 c0       	rjmp	.+4      	; 0x5c52 <vfprintf+0x10c>
    5c4e:	88 36       	cpi	r24, 0x68	; 104
    5c50:	41 f4       	brne	.+16     	; 0x5c62 <vfprintf+0x11c>
    5c52:	f7 01       	movw	r30, r14
    5c54:	93 fd       	sbrc	r25, 3
    5c56:	85 91       	lpm	r24, Z+
    5c58:	93 ff       	sbrs	r25, 3
    5c5a:	81 91       	ld	r24, Z+
    5c5c:	7f 01       	movw	r14, r30
    5c5e:	81 11       	cpse	r24, r1
    5c60:	b3 cf       	rjmp	.-154    	; 0x5bc8 <vfprintf+0x82>
    5c62:	98 2f       	mov	r25, r24
    5c64:	9f 7d       	andi	r25, 0xDF	; 223
    5c66:	95 54       	subi	r25, 0x45	; 69
    5c68:	93 30       	cpi	r25, 0x03	; 3
    5c6a:	28 f4       	brcc	.+10     	; 0x5c76 <vfprintf+0x130>
    5c6c:	0c 5f       	subi	r16, 0xFC	; 252
    5c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    5c70:	9f e3       	ldi	r25, 0x3F	; 63
    5c72:	99 83       	std	Y+1, r25	; 0x01
    5c74:	0d c0       	rjmp	.+26     	; 0x5c90 <vfprintf+0x14a>
    5c76:	83 36       	cpi	r24, 0x63	; 99
    5c78:	31 f0       	breq	.+12     	; 0x5c86 <vfprintf+0x140>
    5c7a:	83 37       	cpi	r24, 0x73	; 115
    5c7c:	71 f0       	breq	.+28     	; 0x5c9a <vfprintf+0x154>
    5c7e:	83 35       	cpi	r24, 0x53	; 83
    5c80:	09 f0       	breq	.+2      	; 0x5c84 <vfprintf+0x13e>
    5c82:	55 c0       	rjmp	.+170    	; 0x5d2e <vfprintf+0x1e8>
    5c84:	20 c0       	rjmp	.+64     	; 0x5cc6 <vfprintf+0x180>
    5c86:	f8 01       	movw	r30, r16
    5c88:	80 81       	ld	r24, Z
    5c8a:	89 83       	std	Y+1, r24	; 0x01
    5c8c:	0e 5f       	subi	r16, 0xFE	; 254
    5c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    5c90:	88 24       	eor	r8, r8
    5c92:	83 94       	inc	r8
    5c94:	91 2c       	mov	r9, r1
    5c96:	53 01       	movw	r10, r6
    5c98:	12 c0       	rjmp	.+36     	; 0x5cbe <vfprintf+0x178>
    5c9a:	28 01       	movw	r4, r16
    5c9c:	f2 e0       	ldi	r31, 0x02	; 2
    5c9e:	4f 0e       	add	r4, r31
    5ca0:	51 1c       	adc	r5, r1
    5ca2:	f8 01       	movw	r30, r16
    5ca4:	a0 80       	ld	r10, Z
    5ca6:	b1 80       	ldd	r11, Z+1	; 0x01
    5ca8:	36 fe       	sbrs	r3, 6
    5caa:	03 c0       	rjmp	.+6      	; 0x5cb2 <vfprintf+0x16c>
    5cac:	69 2d       	mov	r22, r9
    5cae:	70 e0       	ldi	r23, 0x00	; 0
    5cb0:	02 c0       	rjmp	.+4      	; 0x5cb6 <vfprintf+0x170>
    5cb2:	6f ef       	ldi	r22, 0xFF	; 255
    5cb4:	7f ef       	ldi	r23, 0xFF	; 255
    5cb6:	c5 01       	movw	r24, r10
    5cb8:	4e d1       	rcall	.+668    	; 0x5f56 <strnlen>
    5cba:	4c 01       	movw	r8, r24
    5cbc:	82 01       	movw	r16, r4
    5cbe:	f3 2d       	mov	r31, r3
    5cc0:	ff 77       	andi	r31, 0x7F	; 127
    5cc2:	3f 2e       	mov	r3, r31
    5cc4:	15 c0       	rjmp	.+42     	; 0x5cf0 <vfprintf+0x1aa>
    5cc6:	28 01       	movw	r4, r16
    5cc8:	22 e0       	ldi	r18, 0x02	; 2
    5cca:	42 0e       	add	r4, r18
    5ccc:	51 1c       	adc	r5, r1
    5cce:	f8 01       	movw	r30, r16
    5cd0:	a0 80       	ld	r10, Z
    5cd2:	b1 80       	ldd	r11, Z+1	; 0x01
    5cd4:	36 fe       	sbrs	r3, 6
    5cd6:	03 c0       	rjmp	.+6      	; 0x5cde <vfprintf+0x198>
    5cd8:	69 2d       	mov	r22, r9
    5cda:	70 e0       	ldi	r23, 0x00	; 0
    5cdc:	02 c0       	rjmp	.+4      	; 0x5ce2 <vfprintf+0x19c>
    5cde:	6f ef       	ldi	r22, 0xFF	; 255
    5ce0:	7f ef       	ldi	r23, 0xFF	; 255
    5ce2:	c5 01       	movw	r24, r10
    5ce4:	2d d1       	rcall	.+602    	; 0x5f40 <strnlen_P>
    5ce6:	4c 01       	movw	r8, r24
    5ce8:	f3 2d       	mov	r31, r3
    5cea:	f0 68       	ori	r31, 0x80	; 128
    5cec:	3f 2e       	mov	r3, r31
    5cee:	82 01       	movw	r16, r4
    5cf0:	33 fc       	sbrc	r3, 3
    5cf2:	19 c0       	rjmp	.+50     	; 0x5d26 <vfprintf+0x1e0>
    5cf4:	82 2d       	mov	r24, r2
    5cf6:	90 e0       	ldi	r25, 0x00	; 0
    5cf8:	88 16       	cp	r8, r24
    5cfa:	99 06       	cpc	r9, r25
    5cfc:	a0 f4       	brcc	.+40     	; 0x5d26 <vfprintf+0x1e0>
    5cfe:	b6 01       	movw	r22, r12
    5d00:	80 e2       	ldi	r24, 0x20	; 32
    5d02:	90 e0       	ldi	r25, 0x00	; 0
    5d04:	33 d1       	rcall	.+614    	; 0x5f6c <fputc>
    5d06:	2a 94       	dec	r2
    5d08:	f5 cf       	rjmp	.-22     	; 0x5cf4 <vfprintf+0x1ae>
    5d0a:	f5 01       	movw	r30, r10
    5d0c:	37 fc       	sbrc	r3, 7
    5d0e:	85 91       	lpm	r24, Z+
    5d10:	37 fe       	sbrs	r3, 7
    5d12:	81 91       	ld	r24, Z+
    5d14:	5f 01       	movw	r10, r30
    5d16:	b6 01       	movw	r22, r12
    5d18:	90 e0       	ldi	r25, 0x00	; 0
    5d1a:	28 d1       	rcall	.+592    	; 0x5f6c <fputc>
    5d1c:	21 10       	cpse	r2, r1
    5d1e:	2a 94       	dec	r2
    5d20:	21 e0       	ldi	r18, 0x01	; 1
    5d22:	82 1a       	sub	r8, r18
    5d24:	91 08       	sbc	r9, r1
    5d26:	81 14       	cp	r8, r1
    5d28:	91 04       	cpc	r9, r1
    5d2a:	79 f7       	brne	.-34     	; 0x5d0a <vfprintf+0x1c4>
    5d2c:	e1 c0       	rjmp	.+450    	; 0x5ef0 <vfprintf+0x3aa>
    5d2e:	84 36       	cpi	r24, 0x64	; 100
    5d30:	11 f0       	breq	.+4      	; 0x5d36 <vfprintf+0x1f0>
    5d32:	89 36       	cpi	r24, 0x69	; 105
    5d34:	39 f5       	brne	.+78     	; 0x5d84 <vfprintf+0x23e>
    5d36:	f8 01       	movw	r30, r16
    5d38:	37 fe       	sbrs	r3, 7
    5d3a:	07 c0       	rjmp	.+14     	; 0x5d4a <vfprintf+0x204>
    5d3c:	60 81       	ld	r22, Z
    5d3e:	71 81       	ldd	r23, Z+1	; 0x01
    5d40:	82 81       	ldd	r24, Z+2	; 0x02
    5d42:	93 81       	ldd	r25, Z+3	; 0x03
    5d44:	0c 5f       	subi	r16, 0xFC	; 252
    5d46:	1f 4f       	sbci	r17, 0xFF	; 255
    5d48:	08 c0       	rjmp	.+16     	; 0x5d5a <vfprintf+0x214>
    5d4a:	60 81       	ld	r22, Z
    5d4c:	71 81       	ldd	r23, Z+1	; 0x01
    5d4e:	07 2e       	mov	r0, r23
    5d50:	00 0c       	add	r0, r0
    5d52:	88 0b       	sbc	r24, r24
    5d54:	99 0b       	sbc	r25, r25
    5d56:	0e 5f       	subi	r16, 0xFE	; 254
    5d58:	1f 4f       	sbci	r17, 0xFF	; 255
    5d5a:	f3 2d       	mov	r31, r3
    5d5c:	ff 76       	andi	r31, 0x6F	; 111
    5d5e:	3f 2e       	mov	r3, r31
    5d60:	97 ff       	sbrs	r25, 7
    5d62:	09 c0       	rjmp	.+18     	; 0x5d76 <vfprintf+0x230>
    5d64:	90 95       	com	r25
    5d66:	80 95       	com	r24
    5d68:	70 95       	com	r23
    5d6a:	61 95       	neg	r22
    5d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    5d6e:	8f 4f       	sbci	r24, 0xFF	; 255
    5d70:	9f 4f       	sbci	r25, 0xFF	; 255
    5d72:	f0 68       	ori	r31, 0x80	; 128
    5d74:	3f 2e       	mov	r3, r31
    5d76:	2a e0       	ldi	r18, 0x0A	; 10
    5d78:	30 e0       	ldi	r19, 0x00	; 0
    5d7a:	a3 01       	movw	r20, r6
    5d7c:	33 d1       	rcall	.+614    	; 0x5fe4 <__ultoa_invert>
    5d7e:	88 2e       	mov	r8, r24
    5d80:	86 18       	sub	r8, r6
    5d82:	44 c0       	rjmp	.+136    	; 0x5e0c <vfprintf+0x2c6>
    5d84:	85 37       	cpi	r24, 0x75	; 117
    5d86:	31 f4       	brne	.+12     	; 0x5d94 <vfprintf+0x24e>
    5d88:	23 2d       	mov	r18, r3
    5d8a:	2f 7e       	andi	r18, 0xEF	; 239
    5d8c:	b2 2e       	mov	r11, r18
    5d8e:	2a e0       	ldi	r18, 0x0A	; 10
    5d90:	30 e0       	ldi	r19, 0x00	; 0
    5d92:	25 c0       	rjmp	.+74     	; 0x5dde <vfprintf+0x298>
    5d94:	93 2d       	mov	r25, r3
    5d96:	99 7f       	andi	r25, 0xF9	; 249
    5d98:	b9 2e       	mov	r11, r25
    5d9a:	8f 36       	cpi	r24, 0x6F	; 111
    5d9c:	c1 f0       	breq	.+48     	; 0x5dce <vfprintf+0x288>
    5d9e:	18 f4       	brcc	.+6      	; 0x5da6 <vfprintf+0x260>
    5da0:	88 35       	cpi	r24, 0x58	; 88
    5da2:	79 f0       	breq	.+30     	; 0x5dc2 <vfprintf+0x27c>
    5da4:	ae c0       	rjmp	.+348    	; 0x5f02 <vfprintf+0x3bc>
    5da6:	80 37       	cpi	r24, 0x70	; 112
    5da8:	19 f0       	breq	.+6      	; 0x5db0 <vfprintf+0x26a>
    5daa:	88 37       	cpi	r24, 0x78	; 120
    5dac:	21 f0       	breq	.+8      	; 0x5db6 <vfprintf+0x270>
    5dae:	a9 c0       	rjmp	.+338    	; 0x5f02 <vfprintf+0x3bc>
    5db0:	e9 2f       	mov	r30, r25
    5db2:	e0 61       	ori	r30, 0x10	; 16
    5db4:	be 2e       	mov	r11, r30
    5db6:	b4 fe       	sbrs	r11, 4
    5db8:	0d c0       	rjmp	.+26     	; 0x5dd4 <vfprintf+0x28e>
    5dba:	fb 2d       	mov	r31, r11
    5dbc:	f4 60       	ori	r31, 0x04	; 4
    5dbe:	bf 2e       	mov	r11, r31
    5dc0:	09 c0       	rjmp	.+18     	; 0x5dd4 <vfprintf+0x28e>
    5dc2:	34 fe       	sbrs	r3, 4
    5dc4:	0a c0       	rjmp	.+20     	; 0x5dda <vfprintf+0x294>
    5dc6:	29 2f       	mov	r18, r25
    5dc8:	26 60       	ori	r18, 0x06	; 6
    5dca:	b2 2e       	mov	r11, r18
    5dcc:	06 c0       	rjmp	.+12     	; 0x5dda <vfprintf+0x294>
    5dce:	28 e0       	ldi	r18, 0x08	; 8
    5dd0:	30 e0       	ldi	r19, 0x00	; 0
    5dd2:	05 c0       	rjmp	.+10     	; 0x5dde <vfprintf+0x298>
    5dd4:	20 e1       	ldi	r18, 0x10	; 16
    5dd6:	30 e0       	ldi	r19, 0x00	; 0
    5dd8:	02 c0       	rjmp	.+4      	; 0x5dde <vfprintf+0x298>
    5dda:	20 e1       	ldi	r18, 0x10	; 16
    5ddc:	32 e0       	ldi	r19, 0x02	; 2
    5dde:	f8 01       	movw	r30, r16
    5de0:	b7 fe       	sbrs	r11, 7
    5de2:	07 c0       	rjmp	.+14     	; 0x5df2 <vfprintf+0x2ac>
    5de4:	60 81       	ld	r22, Z
    5de6:	71 81       	ldd	r23, Z+1	; 0x01
    5de8:	82 81       	ldd	r24, Z+2	; 0x02
    5dea:	93 81       	ldd	r25, Z+3	; 0x03
    5dec:	0c 5f       	subi	r16, 0xFC	; 252
    5dee:	1f 4f       	sbci	r17, 0xFF	; 255
    5df0:	06 c0       	rjmp	.+12     	; 0x5dfe <vfprintf+0x2b8>
    5df2:	60 81       	ld	r22, Z
    5df4:	71 81       	ldd	r23, Z+1	; 0x01
    5df6:	80 e0       	ldi	r24, 0x00	; 0
    5df8:	90 e0       	ldi	r25, 0x00	; 0
    5dfa:	0e 5f       	subi	r16, 0xFE	; 254
    5dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    5dfe:	a3 01       	movw	r20, r6
    5e00:	f1 d0       	rcall	.+482    	; 0x5fe4 <__ultoa_invert>
    5e02:	88 2e       	mov	r8, r24
    5e04:	86 18       	sub	r8, r6
    5e06:	fb 2d       	mov	r31, r11
    5e08:	ff 77       	andi	r31, 0x7F	; 127
    5e0a:	3f 2e       	mov	r3, r31
    5e0c:	36 fe       	sbrs	r3, 6
    5e0e:	0d c0       	rjmp	.+26     	; 0x5e2a <vfprintf+0x2e4>
    5e10:	23 2d       	mov	r18, r3
    5e12:	2e 7f       	andi	r18, 0xFE	; 254
    5e14:	a2 2e       	mov	r10, r18
    5e16:	89 14       	cp	r8, r9
    5e18:	58 f4       	brcc	.+22     	; 0x5e30 <vfprintf+0x2ea>
    5e1a:	34 fe       	sbrs	r3, 4
    5e1c:	0b c0       	rjmp	.+22     	; 0x5e34 <vfprintf+0x2ee>
    5e1e:	32 fc       	sbrc	r3, 2
    5e20:	09 c0       	rjmp	.+18     	; 0x5e34 <vfprintf+0x2ee>
    5e22:	83 2d       	mov	r24, r3
    5e24:	8e 7e       	andi	r24, 0xEE	; 238
    5e26:	a8 2e       	mov	r10, r24
    5e28:	05 c0       	rjmp	.+10     	; 0x5e34 <vfprintf+0x2ee>
    5e2a:	b8 2c       	mov	r11, r8
    5e2c:	a3 2c       	mov	r10, r3
    5e2e:	03 c0       	rjmp	.+6      	; 0x5e36 <vfprintf+0x2f0>
    5e30:	b8 2c       	mov	r11, r8
    5e32:	01 c0       	rjmp	.+2      	; 0x5e36 <vfprintf+0x2f0>
    5e34:	b9 2c       	mov	r11, r9
    5e36:	a4 fe       	sbrs	r10, 4
    5e38:	0f c0       	rjmp	.+30     	; 0x5e58 <vfprintf+0x312>
    5e3a:	fe 01       	movw	r30, r28
    5e3c:	e8 0d       	add	r30, r8
    5e3e:	f1 1d       	adc	r31, r1
    5e40:	80 81       	ld	r24, Z
    5e42:	80 33       	cpi	r24, 0x30	; 48
    5e44:	21 f4       	brne	.+8      	; 0x5e4e <vfprintf+0x308>
    5e46:	9a 2d       	mov	r25, r10
    5e48:	99 7e       	andi	r25, 0xE9	; 233
    5e4a:	a9 2e       	mov	r10, r25
    5e4c:	09 c0       	rjmp	.+18     	; 0x5e60 <vfprintf+0x31a>
    5e4e:	a2 fe       	sbrs	r10, 2
    5e50:	06 c0       	rjmp	.+12     	; 0x5e5e <vfprintf+0x318>
    5e52:	b3 94       	inc	r11
    5e54:	b3 94       	inc	r11
    5e56:	04 c0       	rjmp	.+8      	; 0x5e60 <vfprintf+0x31a>
    5e58:	8a 2d       	mov	r24, r10
    5e5a:	86 78       	andi	r24, 0x86	; 134
    5e5c:	09 f0       	breq	.+2      	; 0x5e60 <vfprintf+0x31a>
    5e5e:	b3 94       	inc	r11
    5e60:	a3 fc       	sbrc	r10, 3
    5e62:	10 c0       	rjmp	.+32     	; 0x5e84 <vfprintf+0x33e>
    5e64:	a0 fe       	sbrs	r10, 0
    5e66:	06 c0       	rjmp	.+12     	; 0x5e74 <vfprintf+0x32e>
    5e68:	b2 14       	cp	r11, r2
    5e6a:	80 f4       	brcc	.+32     	; 0x5e8c <vfprintf+0x346>
    5e6c:	28 0c       	add	r2, r8
    5e6e:	92 2c       	mov	r9, r2
    5e70:	9b 18       	sub	r9, r11
    5e72:	0d c0       	rjmp	.+26     	; 0x5e8e <vfprintf+0x348>
    5e74:	b2 14       	cp	r11, r2
    5e76:	58 f4       	brcc	.+22     	; 0x5e8e <vfprintf+0x348>
    5e78:	b6 01       	movw	r22, r12
    5e7a:	80 e2       	ldi	r24, 0x20	; 32
    5e7c:	90 e0       	ldi	r25, 0x00	; 0
    5e7e:	76 d0       	rcall	.+236    	; 0x5f6c <fputc>
    5e80:	b3 94       	inc	r11
    5e82:	f8 cf       	rjmp	.-16     	; 0x5e74 <vfprintf+0x32e>
    5e84:	b2 14       	cp	r11, r2
    5e86:	18 f4       	brcc	.+6      	; 0x5e8e <vfprintf+0x348>
    5e88:	2b 18       	sub	r2, r11
    5e8a:	02 c0       	rjmp	.+4      	; 0x5e90 <vfprintf+0x34a>
    5e8c:	98 2c       	mov	r9, r8
    5e8e:	21 2c       	mov	r2, r1
    5e90:	a4 fe       	sbrs	r10, 4
    5e92:	0f c0       	rjmp	.+30     	; 0x5eb2 <vfprintf+0x36c>
    5e94:	b6 01       	movw	r22, r12
    5e96:	80 e3       	ldi	r24, 0x30	; 48
    5e98:	90 e0       	ldi	r25, 0x00	; 0
    5e9a:	68 d0       	rcall	.+208    	; 0x5f6c <fputc>
    5e9c:	a2 fe       	sbrs	r10, 2
    5e9e:	16 c0       	rjmp	.+44     	; 0x5ecc <vfprintf+0x386>
    5ea0:	a1 fc       	sbrc	r10, 1
    5ea2:	03 c0       	rjmp	.+6      	; 0x5eaa <vfprintf+0x364>
    5ea4:	88 e7       	ldi	r24, 0x78	; 120
    5ea6:	90 e0       	ldi	r25, 0x00	; 0
    5ea8:	02 c0       	rjmp	.+4      	; 0x5eae <vfprintf+0x368>
    5eaa:	88 e5       	ldi	r24, 0x58	; 88
    5eac:	90 e0       	ldi	r25, 0x00	; 0
    5eae:	b6 01       	movw	r22, r12
    5eb0:	0c c0       	rjmp	.+24     	; 0x5eca <vfprintf+0x384>
    5eb2:	8a 2d       	mov	r24, r10
    5eb4:	86 78       	andi	r24, 0x86	; 134
    5eb6:	51 f0       	breq	.+20     	; 0x5ecc <vfprintf+0x386>
    5eb8:	a1 fe       	sbrs	r10, 1
    5eba:	02 c0       	rjmp	.+4      	; 0x5ec0 <vfprintf+0x37a>
    5ebc:	8b e2       	ldi	r24, 0x2B	; 43
    5ebe:	01 c0       	rjmp	.+2      	; 0x5ec2 <vfprintf+0x37c>
    5ec0:	80 e2       	ldi	r24, 0x20	; 32
    5ec2:	a7 fc       	sbrc	r10, 7
    5ec4:	8d e2       	ldi	r24, 0x2D	; 45
    5ec6:	b6 01       	movw	r22, r12
    5ec8:	90 e0       	ldi	r25, 0x00	; 0
    5eca:	50 d0       	rcall	.+160    	; 0x5f6c <fputc>
    5ecc:	89 14       	cp	r8, r9
    5ece:	30 f4       	brcc	.+12     	; 0x5edc <vfprintf+0x396>
    5ed0:	b6 01       	movw	r22, r12
    5ed2:	80 e3       	ldi	r24, 0x30	; 48
    5ed4:	90 e0       	ldi	r25, 0x00	; 0
    5ed6:	4a d0       	rcall	.+148    	; 0x5f6c <fputc>
    5ed8:	9a 94       	dec	r9
    5eda:	f8 cf       	rjmp	.-16     	; 0x5ecc <vfprintf+0x386>
    5edc:	8a 94       	dec	r8
    5ede:	f3 01       	movw	r30, r6
    5ee0:	e8 0d       	add	r30, r8
    5ee2:	f1 1d       	adc	r31, r1
    5ee4:	80 81       	ld	r24, Z
    5ee6:	b6 01       	movw	r22, r12
    5ee8:	90 e0       	ldi	r25, 0x00	; 0
    5eea:	40 d0       	rcall	.+128    	; 0x5f6c <fputc>
    5eec:	81 10       	cpse	r8, r1
    5eee:	f6 cf       	rjmp	.-20     	; 0x5edc <vfprintf+0x396>
    5ef0:	22 20       	and	r2, r2
    5ef2:	09 f4       	brne	.+2      	; 0x5ef6 <vfprintf+0x3b0>
    5ef4:	4e ce       	rjmp	.-868    	; 0x5b92 <vfprintf+0x4c>
    5ef6:	b6 01       	movw	r22, r12
    5ef8:	80 e2       	ldi	r24, 0x20	; 32
    5efa:	90 e0       	ldi	r25, 0x00	; 0
    5efc:	37 d0       	rcall	.+110    	; 0x5f6c <fputc>
    5efe:	2a 94       	dec	r2
    5f00:	f7 cf       	rjmp	.-18     	; 0x5ef0 <vfprintf+0x3aa>
    5f02:	f6 01       	movw	r30, r12
    5f04:	86 81       	ldd	r24, Z+6	; 0x06
    5f06:	97 81       	ldd	r25, Z+7	; 0x07
    5f08:	02 c0       	rjmp	.+4      	; 0x5f0e <vfprintf+0x3c8>
    5f0a:	8f ef       	ldi	r24, 0xFF	; 255
    5f0c:	9f ef       	ldi	r25, 0xFF	; 255
    5f0e:	2b 96       	adiw	r28, 0x0b	; 11
    5f10:	0f b6       	in	r0, 0x3f	; 63
    5f12:	f8 94       	cli
    5f14:	de bf       	out	0x3e, r29	; 62
    5f16:	0f be       	out	0x3f, r0	; 63
    5f18:	cd bf       	out	0x3d, r28	; 61
    5f1a:	df 91       	pop	r29
    5f1c:	cf 91       	pop	r28
    5f1e:	1f 91       	pop	r17
    5f20:	0f 91       	pop	r16
    5f22:	ff 90       	pop	r15
    5f24:	ef 90       	pop	r14
    5f26:	df 90       	pop	r13
    5f28:	cf 90       	pop	r12
    5f2a:	bf 90       	pop	r11
    5f2c:	af 90       	pop	r10
    5f2e:	9f 90       	pop	r9
    5f30:	8f 90       	pop	r8
    5f32:	7f 90       	pop	r7
    5f34:	6f 90       	pop	r6
    5f36:	5f 90       	pop	r5
    5f38:	4f 90       	pop	r4
    5f3a:	3f 90       	pop	r3
    5f3c:	2f 90       	pop	r2
    5f3e:	08 95       	ret

00005f40 <strnlen_P>:
    5f40:	fc 01       	movw	r30, r24
    5f42:	05 90       	lpm	r0, Z+
    5f44:	61 50       	subi	r22, 0x01	; 1
    5f46:	70 40       	sbci	r23, 0x00	; 0
    5f48:	01 10       	cpse	r0, r1
    5f4a:	d8 f7       	brcc	.-10     	; 0x5f42 <strnlen_P+0x2>
    5f4c:	80 95       	com	r24
    5f4e:	90 95       	com	r25
    5f50:	8e 0f       	add	r24, r30
    5f52:	9f 1f       	adc	r25, r31
    5f54:	08 95       	ret

00005f56 <strnlen>:
    5f56:	fc 01       	movw	r30, r24
    5f58:	61 50       	subi	r22, 0x01	; 1
    5f5a:	70 40       	sbci	r23, 0x00	; 0
    5f5c:	01 90       	ld	r0, Z+
    5f5e:	01 10       	cpse	r0, r1
    5f60:	d8 f7       	brcc	.-10     	; 0x5f58 <strnlen+0x2>
    5f62:	80 95       	com	r24
    5f64:	90 95       	com	r25
    5f66:	8e 0f       	add	r24, r30
    5f68:	9f 1f       	adc	r25, r31
    5f6a:	08 95       	ret

00005f6c <fputc>:
    5f6c:	0f 93       	push	r16
    5f6e:	1f 93       	push	r17
    5f70:	cf 93       	push	r28
    5f72:	df 93       	push	r29
    5f74:	fb 01       	movw	r30, r22
    5f76:	23 81       	ldd	r18, Z+3	; 0x03
    5f78:	21 fd       	sbrc	r18, 1
    5f7a:	03 c0       	rjmp	.+6      	; 0x5f82 <fputc+0x16>
    5f7c:	8f ef       	ldi	r24, 0xFF	; 255
    5f7e:	9f ef       	ldi	r25, 0xFF	; 255
    5f80:	2c c0       	rjmp	.+88     	; 0x5fda <fputc+0x6e>
    5f82:	22 ff       	sbrs	r18, 2
    5f84:	16 c0       	rjmp	.+44     	; 0x5fb2 <fputc+0x46>
    5f86:	46 81       	ldd	r20, Z+6	; 0x06
    5f88:	57 81       	ldd	r21, Z+7	; 0x07
    5f8a:	24 81       	ldd	r18, Z+4	; 0x04
    5f8c:	35 81       	ldd	r19, Z+5	; 0x05
    5f8e:	42 17       	cp	r20, r18
    5f90:	53 07       	cpc	r21, r19
    5f92:	44 f4       	brge	.+16     	; 0x5fa4 <fputc+0x38>
    5f94:	a0 81       	ld	r26, Z
    5f96:	b1 81       	ldd	r27, Z+1	; 0x01
    5f98:	9d 01       	movw	r18, r26
    5f9a:	2f 5f       	subi	r18, 0xFF	; 255
    5f9c:	3f 4f       	sbci	r19, 0xFF	; 255
    5f9e:	31 83       	std	Z+1, r19	; 0x01
    5fa0:	20 83       	st	Z, r18
    5fa2:	8c 93       	st	X, r24
    5fa4:	26 81       	ldd	r18, Z+6	; 0x06
    5fa6:	37 81       	ldd	r19, Z+7	; 0x07
    5fa8:	2f 5f       	subi	r18, 0xFF	; 255
    5faa:	3f 4f       	sbci	r19, 0xFF	; 255
    5fac:	37 83       	std	Z+7, r19	; 0x07
    5fae:	26 83       	std	Z+6, r18	; 0x06
    5fb0:	14 c0       	rjmp	.+40     	; 0x5fda <fputc+0x6e>
    5fb2:	8b 01       	movw	r16, r22
    5fb4:	ec 01       	movw	r28, r24
    5fb6:	fb 01       	movw	r30, r22
    5fb8:	00 84       	ldd	r0, Z+8	; 0x08
    5fba:	f1 85       	ldd	r31, Z+9	; 0x09
    5fbc:	e0 2d       	mov	r30, r0
    5fbe:	19 95       	eicall
    5fc0:	89 2b       	or	r24, r25
    5fc2:	e1 f6       	brne	.-72     	; 0x5f7c <fputc+0x10>
    5fc4:	d8 01       	movw	r26, r16
    5fc6:	16 96       	adiw	r26, 0x06	; 6
    5fc8:	8d 91       	ld	r24, X+
    5fca:	9c 91       	ld	r25, X
    5fcc:	17 97       	sbiw	r26, 0x07	; 7
    5fce:	01 96       	adiw	r24, 0x01	; 1
    5fd0:	17 96       	adiw	r26, 0x07	; 7
    5fd2:	9c 93       	st	X, r25
    5fd4:	8e 93       	st	-X, r24
    5fd6:	16 97       	sbiw	r26, 0x06	; 6
    5fd8:	ce 01       	movw	r24, r28
    5fda:	df 91       	pop	r29
    5fdc:	cf 91       	pop	r28
    5fde:	1f 91       	pop	r17
    5fe0:	0f 91       	pop	r16
    5fe2:	08 95       	ret

00005fe4 <__ultoa_invert>:
    5fe4:	fa 01       	movw	r30, r20
    5fe6:	aa 27       	eor	r26, r26
    5fe8:	28 30       	cpi	r18, 0x08	; 8
    5fea:	51 f1       	breq	.+84     	; 0x6040 <__ultoa_invert+0x5c>
    5fec:	20 31       	cpi	r18, 0x10	; 16
    5fee:	81 f1       	breq	.+96     	; 0x6050 <__ultoa_invert+0x6c>
    5ff0:	e8 94       	clt
    5ff2:	6f 93       	push	r22
    5ff4:	6e 7f       	andi	r22, 0xFE	; 254
    5ff6:	6e 5f       	subi	r22, 0xFE	; 254
    5ff8:	7f 4f       	sbci	r23, 0xFF	; 255
    5ffa:	8f 4f       	sbci	r24, 0xFF	; 255
    5ffc:	9f 4f       	sbci	r25, 0xFF	; 255
    5ffe:	af 4f       	sbci	r26, 0xFF	; 255
    6000:	b1 e0       	ldi	r27, 0x01	; 1
    6002:	3e d0       	rcall	.+124    	; 0x6080 <__ultoa_invert+0x9c>
    6004:	b4 e0       	ldi	r27, 0x04	; 4
    6006:	3c d0       	rcall	.+120    	; 0x6080 <__ultoa_invert+0x9c>
    6008:	67 0f       	add	r22, r23
    600a:	78 1f       	adc	r23, r24
    600c:	89 1f       	adc	r24, r25
    600e:	9a 1f       	adc	r25, r26
    6010:	a1 1d       	adc	r26, r1
    6012:	68 0f       	add	r22, r24
    6014:	79 1f       	adc	r23, r25
    6016:	8a 1f       	adc	r24, r26
    6018:	91 1d       	adc	r25, r1
    601a:	a1 1d       	adc	r26, r1
    601c:	6a 0f       	add	r22, r26
    601e:	71 1d       	adc	r23, r1
    6020:	81 1d       	adc	r24, r1
    6022:	91 1d       	adc	r25, r1
    6024:	a1 1d       	adc	r26, r1
    6026:	20 d0       	rcall	.+64     	; 0x6068 <__ultoa_invert+0x84>
    6028:	09 f4       	brne	.+2      	; 0x602c <__ultoa_invert+0x48>
    602a:	68 94       	set
    602c:	3f 91       	pop	r19
    602e:	2a e0       	ldi	r18, 0x0A	; 10
    6030:	26 9f       	mul	r18, r22
    6032:	11 24       	eor	r1, r1
    6034:	30 19       	sub	r19, r0
    6036:	30 5d       	subi	r19, 0xD0	; 208
    6038:	31 93       	st	Z+, r19
    603a:	de f6       	brtc	.-74     	; 0x5ff2 <__ultoa_invert+0xe>
    603c:	cf 01       	movw	r24, r30
    603e:	08 95       	ret
    6040:	46 2f       	mov	r20, r22
    6042:	47 70       	andi	r20, 0x07	; 7
    6044:	40 5d       	subi	r20, 0xD0	; 208
    6046:	41 93       	st	Z+, r20
    6048:	b3 e0       	ldi	r27, 0x03	; 3
    604a:	0f d0       	rcall	.+30     	; 0x606a <__ultoa_invert+0x86>
    604c:	c9 f7       	brne	.-14     	; 0x6040 <__ultoa_invert+0x5c>
    604e:	f6 cf       	rjmp	.-20     	; 0x603c <__ultoa_invert+0x58>
    6050:	46 2f       	mov	r20, r22
    6052:	4f 70       	andi	r20, 0x0F	; 15
    6054:	40 5d       	subi	r20, 0xD0	; 208
    6056:	4a 33       	cpi	r20, 0x3A	; 58
    6058:	18 f0       	brcs	.+6      	; 0x6060 <__ultoa_invert+0x7c>
    605a:	49 5d       	subi	r20, 0xD9	; 217
    605c:	31 fd       	sbrc	r19, 1
    605e:	40 52       	subi	r20, 0x20	; 32
    6060:	41 93       	st	Z+, r20
    6062:	02 d0       	rcall	.+4      	; 0x6068 <__ultoa_invert+0x84>
    6064:	a9 f7       	brne	.-22     	; 0x6050 <__ultoa_invert+0x6c>
    6066:	ea cf       	rjmp	.-44     	; 0x603c <__ultoa_invert+0x58>
    6068:	b4 e0       	ldi	r27, 0x04	; 4
    606a:	a6 95       	lsr	r26
    606c:	97 95       	ror	r25
    606e:	87 95       	ror	r24
    6070:	77 95       	ror	r23
    6072:	67 95       	ror	r22
    6074:	ba 95       	dec	r27
    6076:	c9 f7       	brne	.-14     	; 0x606a <__ultoa_invert+0x86>
    6078:	00 97       	sbiw	r24, 0x00	; 0
    607a:	61 05       	cpc	r22, r1
    607c:	71 05       	cpc	r23, r1
    607e:	08 95       	ret
    6080:	9b 01       	movw	r18, r22
    6082:	ac 01       	movw	r20, r24
    6084:	0a 2e       	mov	r0, r26
    6086:	06 94       	lsr	r0
    6088:	57 95       	ror	r21
    608a:	47 95       	ror	r20
    608c:	37 95       	ror	r19
    608e:	27 95       	ror	r18
    6090:	ba 95       	dec	r27
    6092:	c9 f7       	brne	.-14     	; 0x6086 <__ultoa_invert+0xa2>
    6094:	62 0f       	add	r22, r18
    6096:	73 1f       	adc	r23, r19
    6098:	84 1f       	adc	r24, r20
    609a:	95 1f       	adc	r25, r21
    609c:	a0 1d       	adc	r26, r0
    609e:	08 95       	ret

000060a0 <_exit>:
    60a0:	f8 94       	cli

000060a2 <__stop_program>:
    60a2:	ff cf       	rjmp	.-2      	; 0x60a2 <__stop_program>
